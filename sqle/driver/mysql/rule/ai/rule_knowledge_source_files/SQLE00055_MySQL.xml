<?xml version='1.0' encoding='UTF-8'?>
<Rule>
  <原始顺序>49</原始顺序>
  <规则编号>SQLE00055</规则编号>
  <级别>error</级别>
  <数据库类型>MySQL</数据库类型>
  <规则种类>索引优化</规则种类>
  <规则简述>不建议创建冗余索引</规则简述>
  <规则描述>MySQL需要单独维护重复的索引，冗余索引增加维护成本，影响更新性能</规则描述>
  <规则场景>
    <场景 名称="表结构初始定义" 数据库版本="MySQL 所有版本" 检查方式="不连库审核" 适用句型="CREATE TABLE、ALTER TABLE">
      <示例>
        示例表结构:
        create database db_mysql;
        use db_mysql;

        -- 主表
        CREATE TABLE customers(
          id INT(11) NOT NULL, -- 序号
          name VARCHAR(32) DEFAULT '',-- 姓名
          sex TINYINT NOT NULL, -- 性别
          city VARCHAR(32) NOT NULL, -- 所在城市
          age SMALLINT(4) NOT NULL, -- 值类型
          PRIMARY KEY (id), -- 主键
          key idx_name_age_customers (name,age),
          key idx_name_customers (name)
        );


        -- 批量插入语句，不执行，后面插入对比要用。
        set @@cte_max_recursion_depth=20000000;
        insert into customers  
        with recursive tmp (a,b,c,d,e) as (
          select 1,'小王22222333',floor(rand()*2),'上海',ceil(rand()*30)+20 
          union all 
          select a+1,concat('小王',a),floor(rand()*2),'上海',ceil(rand()*20)+20 from tmp where a &lt; 15000000) 
          select * from tmp;

        原理说明：
        1.  一个联合索引可以覆盖按照最左列创建的单列索引或联合索引，所以不需要为最左列单独设计索引。
        2.  单个字段的冗余索引会导致额外的运维成本。比如表批量插入或者批量更新会连带更新索引数据，冗余索引降低了更新的效率，增加了更新的时间，最终导致数据库整体TPS一并降低。
        3.  示例表结构中字段name，存在两个索引，一个是联合索引idx_name_age_customers，另外一个是普通索引idx_name_customers。 后期对于name 列的过滤，只需要保留联合索引即可。

        示例: 冗余索引创建与删除后批量插入前后性能对比。

        -- 有冗余索引： 批量插入1500W行，时间为3分钟28秒。
        (mysql:8.0.31-cluster)        insert into customers  
            -         with recursive tmp (a,b,c,d,e) as (
            -           select 1,'小王22222333',floor(rand()*2),'上海',ceil(rand()*30)+20 
            -           union all 
            -           select a+1,concat('小王',a),floor(rand()*2),'上海',ceil(rand()*20)+20 from tmp where a &lt; 15000000) 
            -           select * from tmp;
        Query OK, 15000000 rows affected (3 min 28.67 sec)
        Records: 15000000  Duplicates: 0  Warnings: 0


        -- 删除冗余索引
        alter table customers drop key/index idx_name_customers;
        -- 或者使用如下语句：
        drop index idx_name_customers on customers;

        -- 无冗余索引：批量插入1500W行，时间为2分钟53秒。
        (mysql:8.0.31-cluster)        insert into customers  
        -         with recursive tmp (a,b,c,d,e) as (
        -           select 1,'小王22222333',floor(rand()*2),'上海',ceil(rand()*30)+20 
        -           union all 
        -           select a+1,concat('小王',a),floor(rand()*2),'上海',ceil(rand()*20)+20 from tmp where a &lt; 15000000) 
        -           select * from tmp;
        Query OK, 15000000 rows affected (2 min 53.67 sec)
        Records: 15000000  Duplicates: 0  Warnings: 0

        结论：
        1. 同样的插入语句，有冗余索引比无冗余索引插入时间多了35秒。
        2. 可见，无冗余索引对表插入性能来讲，更加优化。
  
      </示例>

      <检查流程描述>
        1. 解析 SQL 语句，检查是否包含 CREATE TABLE 关键字，如果存在，则进入下一步检查。
        2. 解析表定义部分:
          1. 检索所有的索引创建子句，包括 KEY 或 INDEX 关键词；
          2. 构建一个索引字段列表，用于记录所有声明的索引和它们的字段；
          3. 遍历索引字段列表，对于每个索引，检查是否有其他索引与其字段完全相同；
          如果发现有字段完全相同的索引，报告违反规则。
      </检查流程描述>
      <知识文档>
      1. 创建表官方文档： https://dev.mysql.com/doc/refman/8.0/en/create-table.html
      2. 创建索引官方文档：https://dev.mysql.com/doc/refman/8.0/en/create-index.html
      3. 修改表官方文档：https://dev.mysql.com/doc/refman/8.0/en/alter-table.html
        </知识文档>
    </场景>
    <场景 名称="在线添加索引" 数据库版本="MySQL 所有版本" 检查方式="连库审核" 适用句型="ALTER TABLE、CREATE INDEX">
      <示例>
      前置:
      create database db_mysql;
      use db_mysql;

      -- 主表
      CREATE TABLE customers(
        id INT(11) NOT NULL, -- 序号
        name VARCHAR(32) DEFAULT '',-- 姓名
        sex TINYINT NOT NULL, -- 性别
        city VARCHAR(32) NOT NULL, -- 所在城市
        age SMALLINT(4) NOT NULL, -- 值类型
        PRIMARY KEY (id), -- 主键
        key idx_name_age_customers (name,age)
      );


      示例：
      alter table customer add key idx_name_customers (name);

      或者：
      create index idx_name_customers on customers(name);

      原理说明：与【表结构初始定义】一致
              
      </示例>

      <检查流程描述>
      1. 解析 SQL 语句，检查是否包含 ALTER TABLE ADD KEY/INDEX 或 CREATE INDEX 关键字。
      2. 如果存在上述关键字，提取索引名称和索引字段。
      3. 连接到数据库，查询目标表的现有索引信息。
      4. 对比提取出的索引字段与数据库中现有索引的字段：
         1. 检查新增索引字段是否与现有索引字段完全相同（考虑索引顺序和组合）。
         2. 检查新增索引字段是否与现有复合索引的前缀相同（最左前缀规则）。
      5. 如果发现现有索引与新增索引字段冗余，记录下整个语句，并标记为触发冗余索引创建规则。
      </检查流程描述>
      <知识文档>
      1. 创建表官方文档： https://dev.mysql.com/doc/refman/8.0/en/create-table.html
      2. 创建索引官方文档：https://dev.mysql.com/doc/refman/8.0/en/create-index.html
      3. 修改表官方文档：https://dev.mysql.com/doc/refman/8.0/en/alter-table.html
        </知识文档>
    </场景>
  </规则场景>
<标签><分类 名称="操作对象"><分类值>索引</分类值></分类><分类 名称="SQL分类"><分类值>DDL</分类值></分类><分类 名称="审核目的"><分类值>增强可维护性</分类值><分类值>发现性能问题</分类值></分类><分类 名称="审核精确度"><分类值>不连库审核</分类值><分类值>连库审核</分类值></分类></标签><完成情况>完成</完成情况></Rule>