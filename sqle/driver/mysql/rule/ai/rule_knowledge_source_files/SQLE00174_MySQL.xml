<?xml version='1.0' encoding='UTF-8'?>
<Rule>
    <规则编号>SQLE00174</规则编号>
    <级别>warn</级别>
    <数据库类型>MySQL</数据库类型>
    <规则种类>使用建议</规则种类>
    <规则简述>禁止GRANT 授予过高权限</规则简述>
    <规则变量>
      <变量 名称="高权限范围">ALL,SUPER,WITH GRANT OPTION</变量>
    </规则变量>
    <规则描述>授予过高权限，可能会带来严重的安全风险。</规则描述>
    <规则场景>
      <场景 名称="给用户授权" 数据库版本="MySQL 所有版本" 检查方式="不连库审核" 适用句型="GRANT">
        <示例>
          前置：预先创建两个用户user1、user2
```sql
          create user user1 identified by 'Root123@aB';
          create user user2 identified by 'Root123@aB';

```
          原理说明：
          1. 管理授权权限的时候要格外注意，不能授予过高的权限，否则会有严重的安全风险。
          2. 应该遵循最小化权限的原则，确保每个用户、每个角色都只分配可以匹配其工作范围的最小权限。
          3. 还要确保用户不能把自己的权限授予给其他用户。比如管理员不能授予用户 WITH GRANT OPTION 选项。
          
          需求：
          1. 业务要求user1 对数据库db_mysql里的所有表具有DML权限，但是不能创建表，修改表,删除表，并且user1不能把自己的权限授予给其他用户。
          2. 业务要求user2 对数据库db_mysql里的所有表具有只读权限，同样不能创建表，修改表，删除表，并且user2也不能把自己的权限授予给其他用户。

          反例： 
          SQL1: `grant all on *.* to user1;`
          SQL2: `grant select,update,delete,insert,alter,create,drop on db_mysql.* to user1 with grant option;`

          SQL3: `grant super on *.* to user2 with grant option;`

          反例说明：
          1. 反例的几条SQL 都不满足业务要求，应禁止执行。

          反例验证： 只验证USER1即可，原理一样。
          1. 授予过高的权限给USER1
```sql
          (mysql:8.4.0:db_mysql)grant select,update,delete,insert,alter ,create,drop  on db_mysql.* to user1 with grant option;
          Query OK, 0 rows affected (0.01 sec)
          
          (mysql:8.4.0:db_mysql)show grants for user1;
          +------------------------------------------------------------------------------------------------------+
          | Grants for user1@%                                                                                   |
          +------------------------------------------------------------------------------------------------------+
          | GRANT USAGE ON *.* TO `user1`@`%`                                                                    |
          | GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, ALTER, DROP ON `db_mysql`.* TO `user1`@`%` WITH GRANT OPTION |
          +------------------------------------------------------------------------------------------------------+
          2 rows in set (0.00 sec)
          

```
          2. 使用USER1登录数据库，没有满足预期，拥有需求外的其他权限，比如可以创建表，这个显然是不可以的。
```sql
          [root@ytt-pc scripts]# mysql -uuser1 -pRoot123@aB -D db_mysql -h 127.1
          ...
          (mysql:8.4.0:db_mysql)show tables;
          +--------------------+
          | Tables_in_db_mysql |
          +--------------------+
          | customers          |
          | t1                 |
          | t2                 |
          | t3                 |
          +--------------------+
          4 rows in set (0.00 sec)

          (mysql:8.4.0:db_mysql)create table t4(id int);
          Query OK, 0 rows affected (0.04 sec)

          (mysql:8.4.0:db_mysql)select user();
          +-----------------+
          | user()          |
          +-----------------+
          | user1@localhost |
          +-----------------+
          1 row in set (0.00 sec)

```
          正例：
          SQL1: `grant update,delete,insert on db_mysql.* to user1;`
          SQL2: `grant select on db_mysql.* to user2;`   
          
          正例说明：
          1. SQL1 是赋予USER1的正确的、最小适配权限。
          2. SQL2 是赋予USER2的正确的、最小适配权限。

          正例验证：
          1. 先删掉user1,user2，重新创建。
```sql
          (mysql:8.4.0:db_mysql)drop user user1,user2;
          Query OK, 0 rows affected (0.01 sec)

          (mysql:8.4.0:db_mysql)create user user1 identified by 'Root123@aB';
          Query OK, 0 rows affected (0.02 sec)
          
          (mysql:8.4.0:db_mysql)create user user2 identified by 'Root123@aB';
          Query OK, 0 rows affected (0.02 sec)
                   
                   
```
          2. 给user1、user2 授予合适的、正确的权限。
```sql
          (mysql:8.4.0:db_mysql)grant update,delete,insert on db_mysql.* to user1;
          Query OK, 0 rows affected (0.01 sec)

          (mysql:8.4.0:db_mysql)grant select on db_mysql.* to user2; 
          Query OK, 0 rows affected (0.02 sec)

```
          3. 查看user1、user2 分配的权限：目前权限分配正确。
```sql
          (mysql:8.4.0:db_mysql)show grants for user1;
          +-------------------------------------------------------------+
          | Grants for user1@%                                          |
          +-------------------------------------------------------------+
          | GRANT USAGE ON *.* TO `user1`@`%`                           |
          | GRANT INSERT, UPDATE, DELETE ON `db_mysql`.* TO `user1`@`%` |
          +-------------------------------------------------------------+
          2 rows in set (0.00 sec)
          
          (mysql:8.4.0:db_mysql)show grants for user2;
          +---------------------------------------------+
          | Grants for user2@%                          |
          +---------------------------------------------+
          | GRANT USAGE ON *.* TO `user2`@`%`           |
          | GRANT SELECT ON `db_mysql`.* TO `user2`@`%` |
          +---------------------------------------------+
          2 rows in set (0.01 sec)
      
```
          结论：
          1. 权限分配应该遵循最小化的权限策略，不能授予超出其工作范围的额外权限，否则会有很大的安全风险。
          2. 应该定期审计、检查各个用户的权限，发现有不当权限的用户，应该尽快的收回。
          3. 确保权限的分配经过一个入口，也就是唯一的数据库管理员，不能由多个管理员来随意分配权限。
          4. 在 MySQL 里，应该谨慎使用 ALL、SUPER 等超级权限；或者使用 WITH GRANT OPTION 来继承权限。
         

        </示例>
        <检查流程描述>
          1. 对于 "GRANT ..." 语句：
            1. 定义一个集合，把语句中的权限以逗号分隔的格式写到集合中。
            2. 使用集合中的权限列表和规则变量的值对比，如果和规则变量的值有交集，则报告违反规则。
        </检查流程描述>
        <知识文档>
          1. 数据库权限官方文档： https://dev.mysql.com/doc/refman/8.4/en/privileges-provided.html
          2. GRANT 语句官方文档： https://dev.mysql.com/doc/refman/8.4/en/grant.html
        </知识文档>
      </场景>
    </规则场景>
  <标签><分类 名称="操作对象"><分类值>用户</分类值></分类><分类 名称="SQL分类"><分类值>DCL</分类值></分类><分类 名称="审核目的"><分类值>增强安全性</分类值></分类><分类 名称="审核精确度"><分类值>不连库审核</分类值></分类></标签><完成情况>完成</完成情况></Rule>