<?xml version='1.0' encoding='UTF-8'?>
<Rule>
    <规则编号>SQLE00052</规则编号>
    <级别>warn</级别>
    <数据库类型>MySQL</数据库类型>
    <规则种类>索引规范</规则种类>
    <规则简述>建议主键使用自增</规则简述>
    <规则描述>自增主键通常为数字类型，其数据写入速度快，占用的存储空间小。自增主键保证了数据的有序性，减少了页分裂的频率，并简化了应用层的数据写入逻辑。</规则描述>
    <规则场景>
        <场景 名称="定义主键与自增属性" 适用句型="CREATE TABLE、ALTER TABLE" 数据库版本="MySQL 所有版本" 检查方式="不连库审核">
            <示例>
                前置：
```sql
                create database db_mysql;
                use db_mysql;
                
```
                原理说明：
                1. MySQL的InnoDB引擎使用聚簇索引存储数据，其中数据和主键直接存储在一起。主键的顺序性和大小直接影响磁盘空间的利用率和数据插入效率。
                2. 主键设计的优劣不仅影响表的存储空间和二级索引的大小，还影响表的更新效率。
                3. 自增主键通过保证数据的有序性、提升写入性能以及最小化存储空间的需求，简化了应用层的数据写入过程，因此强烈推荐其使用。
                             
       
                示例：

```sql
                -- 非自增主键表
                create table customers_no_auto_increment(
                    id char(36) primary key,
                    name varchar(32) default '' not null, -- 序号
                    sex int default 0, -- 性别
                    age int default 0, -- 年龄
                    mark1 varchar(20) not null, -- 备注1
                    mark2 varchar(30) not null, -- 备注2
                    key idx_name_customers_no_auto_increment (name) -- 二级索引
                );
                ALTER TABLE customers ADD primary key(id);
                ALTER TABLE t2 MODIFY id int not null primary key;
                
```
                示例验证：
```sql
                -- 通过对比插入200W 条记录，来验证两表分别占用的磁盘空间以及插入性能。
                -- 设计自增主键的表customers_auto_increment
                create table customers_auto_increment(
                    id int auto_increment primary key,
                    name varchar(32) default '' not null, -- 序号
                    sex int default 0, -- 性别
                    age int default 0, -- 年龄
                    mark1 varchar(20) not null, -- 备注1
                    mark2 varchar(30) not null, -- 备注2
                    key idx_name_customers_auto_increment (name) -- 二级索引
                );

                -- 测试数据存储过程，验证时调用：插入模拟数据 200W 条。
                DELIMITER $$

                USE `db_mysql`$$
                
                DROP PROCEDURE IF EXISTS `sp_insert_customers`$$
                
                CREATE DEFINER=`admin`@`%` PROCEDURE `sp_insert_customers`(
                    IN f_table_name varchar(100)
                )
                BEGIN
                    set @@cte_max_recursion_depth=20000000;
                    if f_table_name = 'customers_auto_increment' then
                        TRUNCATE TABLE customers_auto_increment;
    
                        insert into customers_auto_increment (name,sex,age,mark1,mark2) 
                        with recursive tmp (a,b,c,d,e,f) as (
                        select 1,'小王22222333',floor(rand()*2),ceil(rand()*30)+20,'actionsky','actionsky'
                        union all 
                        select a+1,concat('小王',a),floor(rand()*2),ceil(rand()*20)+20,'actionsky','actionsky' from tmp where a &lt; 2000000) 
                        select b,c,d,e,f from tmp;
                        ANALYZE TABLE customers_auto_increment;
                    else
                        TRUNCATE TABLE customers_no_auto_increment;
          
                        insert into customers_no_auto_increment (id,name,sex,age,mark1,mark2) 
                        with recursive tmp (a,b,c,d,e,f) as (
                        select 1,'小王22222333',floor(rand()*2),ceil(rand()*30)+20,'actionsky','actionsky'
                        union all 
                        select a+1,concat('小王',a),floor(rand()*2),ceil(rand()*20)+20,'actionsky','actionsky' from tmp where a &lt; 2000000) 
                        select uuid(),b,c,d,e,f from tmp;
                        ANALYZE TABLE customers_no_auto_increment;
                    end if;
                END$$
                
                DELIMITER ;

```
                1. 自增主键表 customers_auto_increment
```sql
                -- 调用插数据存储过程：时间43秒多

                (mysql:8.3.0:db_mysql)call sp_insert_customers('customers_auto_increment');
                +-----------------------------------+---------+----------+----------+
                | Table                             | Op      | Msg_type | Msg_text |
                +-----------------------------------+---------+----------+----------+
                | db_mysql.customers_auto_increment | analyze | status   | OK       |
                +-----------------------------------+---------+----------+----------+
                1 row in set (43.64 sec)

                Query OK, 0 rows affected (43.64 sec)

                -- 磁盘空间占用： 228M
                [root@ytt-pc db_mysql]# ls -shil customers_auto_increment.ibd 
                16822610 228M -rw-r----- 1 mysql mysql 228M Apr 29 11:31 customers_auto_increment.ibd

                -- 表记录数 200W
                (mysql:8.3.0:db_mysql)select count(*) from customers_auto_increment;
                +----------+
                | count(*) |
                +----------+
                |  2000000 |
                +----------+
                1 row in set (1.06 sec)

                
```
                2. 非自增主键表 customers_no_auto_increment
```sql
                -- 调用插数据存储过程： 时间1分2秒多
                (mysql:8.3.0:db_mysql)call sp_insert_customers('customers_no_auto_increment');
                +--------------------------------------+---------+----------+----------+
                | Table                                | Op      | Msg_type | Msg_text |
                +--------------------------------------+---------+----------+----------+
                | db_mysql.customers_no_auto_increment | analyze | status   | OK       |
                +--------------------------------------+---------+----------+----------+
                1 row in set (1 min 2.78 sec)

                Query OK, 0 rows affected (1 min 2.78 sec)
                
                -- 磁盘空间占用 416M
                [root@ytt-pc db_mysql]# ls -shil customers_no_auto_increment.ibd 
                16822606 416M -rw-r----- 1 mysql mysql 416M Apr 29 11:34 customers_no_auto_increment.ibd

                -- 表记录数 200W
                (mysql:8.3.0:db_mysql)select count(*) from customers_no_auto_increment;
                +----------+
                | count(*) |
                +----------+
                |  2000000 |
                +----------+
                1 row in set (1.38 sec)


```
                结论：
                1. 自增主键的表占用空间小、插入速度快， 推荐表主键使用自增主键。
                2. 自增主键可以在建表时直接定义；也可以在建表后使用 ALTER TABLE 来添加。
                   两种方式：
                   1. 表没有记录的场景下：alter table customers_no_auto_increment modify id int not null auto_increment;
                   2. 表已经有记录，并且已经有主键的场景下：先删除主键、再添加自增主键
                      1. alter table customers_no_auto_increment drop primary key;
                      2. alter table customers_no_auto_increment add id_inc int not null auto_incerement primary key; 

            </示例>
            <检查流程描述>
                1. 对于"CREATE TABLE..."语句，针对一个主键的字段，若没有定义为 AUTO_INCREMENT，则报告违反规则。
                2. 对于"ALTER TABLE..."语句，当前操作的字段是主键即包含PRIMARY KEY，若没有定义为 AUTO_INCREMENT，则报告违反规则。
            </检查流程描述>
            <知识文档>
            1. CREATE TABLE 官方文档： https://dev.mysql.com/doc/refman/8.3/en/create-table.html
            2. ALTER TABLE 官方文档： https://dev.mysql.com/doc/refman/8.3/en/alter-table.html
            </知识文档>
        </场景>
        <场景 名称="变更索引字段为主键" 适用句型="ALTER TABLE" 数据库版本="MySQL 所有版本" 检查方式="连库审核">
            <示例>
                原理说明：
                与场景【定义主键与自增属性】一致。

                前置：
```sql
                create table customers(
                    id int not null auto_increment,
                    name varchar(32) default '' not null, -- 序号
                    sex int default 0, -- 性别
                    age int default 0, -- 年龄 
                    index idx_customers_id(id)
                );

```
                示例：
```sql
                ALTER TABLE customers ADD primary key(id);
                
```
            </示例>
            <检查流程描述>
            1. 对于"ALTER TABLE..."语句，当前操作的字段是主键，登录数据库，获取操作表的表结构，若当前操作的字段属性未包含AUTO_INCREMENT，则报告违反规则。
            </检查流程描述>
            <知识文档>
              1. ALTER TABLE 官方文档： https://dev.mysql.com/doc/refman/8.3/en/alter-table.html
            </知识文档>
        </场景>
    </规则场景>
<标签><分类 名称="操作对象"><分类值>字段</分类值></分类><分类 名称="SQL分类"><分类值>完整性约束</分类值></分类><分类 名称="审核目的"><分类值>发现性能问题</分类值><分类值>增强可维护性</分类值></分类><分类 名称="审核精确度"><分类值>不连库审核</分类值><分类值>连库审核</分类值></分类></标签><完成情况>完成</完成情况></Rule>