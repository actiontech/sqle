<?xml version='1.0' encoding='UTF-8'?>
<Rule>
    <规则编号>SQLE00013</规则编号>
    <级别>notice</级别>
    <数据库类型>MySQL</数据库类型>
    <规则种类>DDL规范</规则种类>
    <规则简述>建议使用 DECIMAL 类型表示精确数值</规则简述>
    <规则描述>在数据库中，精确数值的表示对于财务数据、统计数据等需要高精度计算的场景至关重要。使用非精确浮点类型如 FLOAT 或 DOUBLE 可能导致精度丢失、计算误差，从而影响数据的准确性与可靠性。</规则描述>
    <规则场景>
      <场景 名称="浮点数举例" 数据库版本="MySQL 所有版本" 检查方式="不连库审核" 适用句型="CREATE TABLE、ALTER TABLE">
        <示例>
            前置：
            create database if not exists db_mysql;
            use db_mysql;

            原理：
            1. 不建议使用非精确浮点类型，比如float、double。 非精确浮点数会造成精度丢失，具体原因如下：
              1. float 类型的精度可能会受到 CPU 架构的影响。在不同的 CPU 架构中，浮点数的运算和表示可能会有一些差异，这可能导致 float 类型的精度在不同的 CPU 上有所不同。
              2. 十进制浮点数转换为二进制时，可能会出现无限循环或舍入误差，导致精度丢失。
              3. float 类型的尾数长度有限，无法精确表示某些小数，从而导致精度丢失。MySQL 里float 的精度最大是53，小数位最大支持的个数随不同的CPU而不同。
              4. float 类型的指数范围有限，当数值过大或过小时，可能会导致指数溢出或下溢，从而影响精度。
              5. 在进行浮点数运算时，由于尾数长度限制和指数范围限制，可能会出现舍入误差，从而导致精度丢失。
            2. 为了解决 float 精度丢失的问题，可以考虑以下方法：
              1. 对于精确浮点数，建议使用decimal、numeric类型。 这两个类型可以定义具体的精度，最大支持64，并且最大的小数位支持30个数字。
              2. 在进行浮点数运算时，尽量避免直接使用 float 类型，而是先将其转换为更高精度的类型进行运算。
              3. 在进行比较或赋值操作时，设置合理的误差范围。
              4. 对于需要高精度的计算，可以使用专门的数学库或算法。
            
            反例：
            SQL1:
            CREATE TABLE t1 (i INT, d1 DOUBLE, d2 DOUBLE);
            或者：
            ALTER TABLE T1 MODIFY d1 double, modify d2 double;
            alter table t1 change d1 d1 double, change d2 d2 double;

            SQL2:
            create table t11(num float(53));

            反例说明：
            1. SQL1 中创建表t1，表t1的两个字段d1、d2 都是非精确浮点数double类型；模拟插入一些数据，然后对两个字段d1、d2 求和，并且打印出两个字段求和值不一样的记录，确认统计结果的准确性。
            2. SQL2 中创建表t11，若插入值100.000000000000000000002，由于精度不准确，所以结果也可能不准确。

            反例验证： 
            1. 验证SQL1示例，先模拟数据。
            (mysql:8.4.0:db_mysql)INSERT INTO t1 VALUES (1, 101.40, 21.40), (1, -80.00, 0.00),
            (2, 0.00, 0.00), (2, -13.20, 0.00), (2, 59.60, 46.40),
            (2, 30.40, 30.40), (3, 37.00, 7.40), (3, -29.60, 0.00),
            (4, 60.00, 15.40), (4, -10.60, 0.00), (4, -34.00, 0.00),
            (5, 33.00, 0.00), (5, -25.80, 0.00), (5, 0.00, 7.20),
            (6, 0.00, 0.00), (6, -51.40, 0.00);
            
            Query OK, 16 rows affected (0.00 sec)
            Records: 16  Duplicates: 0  Warnings: 0


            2. 验证SQL1示例，查询结果显式有6条记录符合，其实是不正确的
            (mysql:8.4.0:db_mysql)SELECT i, SUM(d1) AS a, SUM(d2) AS b FROM t1 GROUP BY i HAVING a &lt;&gt; b;
            +------+--------------------+------+
            | i    | a                  | b    |
            +------+--------------------+------+
            |    1 | 21.400000000000006 | 21.4 |
            |    2 |  76.80000000000001 | 76.8 |
            |    3 |  7.399999999999999 |  7.4 |
            |    4 | 15.399999999999999 | 15.4 |
            |    5 |  7.199999999999999 |  7.2 |
            |    6 |              -51.4 |    0 |
            +------+--------------------+------+
            6 rows in set (0.00 sec)
            
            3. 验证SQL2示例， 插入的结果精度丢失了。
            (mysql:8.4.0:db_mysql)insert into t11 values ('100.000000000000000000002');
            Query OK, 1 row affected (0.01 sec)
            
            (mysql:8.4.0:db_mysql)select * from t11;
            +------+
            | num  |
            +------+
            |  100 |
            +------+
            1 row in set (0.00 sec)
                       

            正例：
            SQL1:
            CREATE TABLE t2 (i INT, d1 decimal(64,30), d2 decimal(64,30));
            或者：
            ALTER TABLE T2 MODIFY d1 decimal(64,30), modify d2 decimal(64,30);
            alter table t2 change d1 d1 decimal(64,30), change d2 d2 decimal(64,30);

            SQL2:
            create table t21(num decimal(64,30));
            
            正例说明：
            1. SQL1 中创建表t1，表t1的两个字段d1、d2 都是精确浮点数decimal类型;模拟插入一些数据，然后对两个字段d1、d2 求和，并且打印出两个字段求和值不一样的记录，确认统计结果的准确性。
            2. SQL2 中创建表t21，并且插入值100.000000000000000000002。
            3. 采用decimal 类型的字段，无论求和还是插入的值都是准确的。

            正例验证：
            示例SQL1：使用与反例中相同的数据模拟。
            1. 执行SQL1， 对表t2求和，结果就是非常准确的。
            (mysql:8.4.0:db_mysql)SELECT i, SUM(d1) AS a, SUM(d2) AS b FROM t2 GROUP BY i HAVING a &lt;&gt; b;
            +------+------------------------------------+----------------------------------+
            | i    | a                                  | b                                |
            +------+------------------------------------+----------------------------------+
            |    6 | -51.400000000000000000000000000000 | 0.000000000000000000000000000000 |
            +------+------------------------------------+----------------------------------+
            1 row in set (0.00 sec)
            
            2. 执行SQL2， 插入的值，精度也是准确的。
            (mysql:8.4.0:db_mysql)insert into t21 values ('100.000000000000000000002');
            Query OK, 1 row affected (0.01 sec)
            
            (mysql:8.4.0:db_mysql)select * from t21;
            +------------------------------------+
            | num                                |
            +------------------------------------+
            | 100.000000000000000000002000000000 |
            +------------------------------------+
            1 row in set (0.00 sec)

            结论：
            1. 对于精度要求准确的类型，比如金钱等，不能使用非精确浮点数FLOAT、DOUBLE；需要使用精确浮点数DECIMAL、NUMERIC 来确保更高的精度不丢失。
            

        </示例>
        <检查流程描述>
          1. 对于“CREATE TABLE ...” 语句，如果以下任意一项为真，则报告违反规则
            1. 语句中包含FLOAT 数据类型
            2. 语句中包含DOUBLE 数据类型
          2. 对于“ALTER TABLE ... ” 语句，执行与上述同样检查。
        </检查流程描述>
        <知识文档>
          1. FLOAT 类型官方文档：https://dev.mysql.com/doc/refman/8.4/en/floating-point-types.html
          2. DECIMAL 类型官方文档：https://dev.mysql.com/doc/refman/8.4/en/fixed-point-types.html
          3. 数据类型具体存储大小官方文档： https://dev.mysql.com/doc/refman/8.4/en/storage-requirements.html#data-types-storage-reqs-numeric
        </知识文档>
      </场景>
    </规则场景>
    <标签><分类 名称="操作对象"><分类值>字段</分类值></分类><分类 名称="SQL分类"><分类值>DDL</分类值></分类><分类 名称="审核目的"><分类值>保障正确性</分类值></分类><分类 名称="审核精确度"><分类值>不连库审核</分类值></分类></标签><完成情况>完成</完成情况></Rule>