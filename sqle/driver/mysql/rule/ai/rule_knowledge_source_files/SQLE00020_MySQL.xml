<?xml version='1.0' encoding='UTF-8'?>
<Rule>
  <规则编号>SQLE00020</规则编号>
  <级别>
    <当前级别>notice</当前级别>
  </级别>
  <数据库类型>MySQL</数据库类型>
  <规则种类>DDL规范</规则种类>
  <规则简述>避免表中包含有太多的列</规则简述>
  <规则变量>
    <变量 name="表内列数上限" type="int">40</变量>
  </规则变量>
  <规则描述>数据库表中字段过多会导致数据操作效率降低、数据完整性检查成本增加，以及索引维护与更新效率之间的权衡成本。对于追求事务响应和处理速度的OLTP系统，应尽量避免宽表设计，采用规范化数据模型以提升性能。</规则描述>
  <规则场景>
    <场景 名称="表结构初始化定义" 数据库版本="MySQL 5.7.25" 检查方式="不连库审核" 适用句型="CREATE TABLE">
    <示例>
      原理说明：
      1. 表字段过多，有以下不合适的场景：
        1. 性能下降：增加数据插入、导入、更新、删除、检索等的开销；
        2. 开发、运维复杂：表字段增多，对于开发人员、运维人员来讲，理解字段、使用字段将会变得困难，增加出错的概率。
        3. 一致性保证：更多的字段，需要更多的约束来保证数据一致性，增加了表检查的开销。比如每个字段都check 约束，字段很多，需要每个字段单独检查。
        4. 索引灵活性与限制： 如果多个字段都可能需要被WHERE 条件或者JOIN 条件包含，那么对于多个字段建立索引，会严重降低对表的写入、更新、删除等性能。
      2. 从数据库表的应用场景上考虑：
        1. OLAP系统（如统计系统）宽表的设计将大量字段同时放在一个表里，目的是为了简化多维度的复杂查询，数据的完整是其重要衡量指标。
        2. OLTP系统典型场景：事务响应和处理速度是重要的衡量指标，表设计应该尽量减少冗余，方便增删改查的操作。
      
      示例说明：
        基于OLAP和OLTP两个不同的业务场景，以设计订单表为例，OLTP类的订单表更加利于更新，但不利于复杂查询；而OLAP类的订单表则简化多维度的复杂查询，数据的完整是其重要衡量指标。
          1. 部门表（部门id，部门名）
          2. 销售员表（销售ID，销售姓名，销售所属部门ID）
          3. 订单表（订单id，订单名，销售ID，订单创建时间，订单结束时间）[OLTP类]
          4. 订单表（订单id，订单名，销售ID，订单创建时间，订单结束时间, 部门名, 销售姓名，销售所属部门ID） [OLAP类]
      </示例>
      <检查流程描述>
      1. 对于“CREATE TABLE ...” 语句，统计定义的字段个数，若字段个数超过阈值，则报告违反规则。
      </检查流程描述>

      <知识文档>
      1. 宽表和窄表的区别、优点、缺点以及各自的用处 https://www.cnblogs.com/zoutong/p/13497545.html
      2. 什么是窄表？什么是宽表？https://cloud.tencent.com/developer/article/2321715
      3. MySQL开发规范：https://cloud.tencent.com/developer/article/2351052
      </知识文档>
    </场景>
    <场景 名称="表结构变更" 数据库版本="MySQL 5.7.25" 检查方式="连库审核" 适用句型="ALTER TABLE">
      <示例>
        原理说明：与场景【表结构初始化定义】一致     
        示例说明：与场景【表结构初始化定义】一致       
      </示例>
      <检查流程描述>
      1. 对于“ALTER TABLE  ...” 语句：
        1. 定义一个集合，
        2. 登录数据库，把变更表的字段个数写入集合中
        3. 统计当前语句中的DROP 个数、ADD 个数，最终算出最后的字段个数（加字段的个数多，结果为正数；删字段个数多，结果为负数）
        4. 使用集合中的字段个数和上一步计算的字段个数相加，如果结果超过阈值，则报告违反规则。
      </检查流程描述>
      <知识文档>
        1. 宽表和窄表的区别、优点、缺点以及各自的用处 https://www.cnblogs.com/zoutong/p/13497545.html
        2. 什么是窄表？什么是宽表？https://cloud.tencent.com/developer/article/2321715
        3. MySQL开发规范：https://cloud.tencent.com/developer/article/2351052

      </知识文档>
    </场景>  
  </规则场景>
  <规则缺陷 />
  <标签><分类 名称="操作对象"><分类值>表</分类值></分类><分类 名称="SQL分类"><分类值>DDL</分类值></分类><分类 名称="审核目的"><分类值>增强可维护性</分类值></分类><分类 名称="审核精确度"><分类值>不连库审核</分类值><分类值>连库审核</分类值></分类></标签><完成情况>完成</完成情况></Rule>