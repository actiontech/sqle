<?xml version='1.0' encoding='UTF-8'?>
<Rule>
    <规则编号>SQLE00107</规则编号>
    <级别>notice</级别>
    <数据库类型>MySQL</数据库类型>
    <规则种类>DML规范</规则种类>
    <规则变量>
      <变量 name="句子长度限制" type="int">1024</变量>
    </规则变量>
    <规则简述>建议将过长的SQL分解成几个简单的SQL</规则简述>
    <规则描述>过长的SQL可读性较差，难以维护，且容易引发性能问题。</规则描述>
    <规则场景>
        <原理说明 数据库版本="大于等于 MySQL 5.7 " 检查方式="不连库审核" 适用句型="SELECT、UPDATE、DELETE、INSERT...SELECT、UNION、WITH">
            <示例>
            原理说明：
            1. 过于长的SQL 语句可读性差、难于维护、难以调试；通过分解复杂SQL，可以增加可读性，易于维护，易于调试。比如长SQL 如果出现错误比分解后的短SQL来讲，更加难于定位错误出处。
            2. 过于长的SQL 语句可能无法准确命中优化器的处理规则，因此相比简单的SQL，会有相对较差的查询性能。
            3. 过于长的SQL 语句让业务端代码重用这段SQL的几率降低，分解后的SQL 则可以增加SQL 重用的概率。简单来讲，也就是分解后的SQL 语句更加容易被单元化。
            4. 对于SQL 语句的长度做限制，是对复杂度较高的SQL提供一种简单的控制方法。比如层次较深的子查询、或者聚合运算个数过多等场景，则可参考其他规则控制：SQLE00096、SQLE00098、SQLE00108
            </示例>
            <检查流程描述>
              1. 对于所有DML语句，计算SQL语句的字符串长度，如果大于等于阈值，则报告违反规则。
            </检查流程描述>
            <知识文档>
              1. SQL 语句优化官方文档：https://dev.mysql.com/doc/refman/8.0/en/statement-optimization.html
            </知识文档>
        </原理说明>
      
    </规则场景>
    <关联规则>SQLE00096、SQLE00098、SQLE00108</关联规则>
    <标签><分类 名称="操作对象"><分类值>业务数据</分类值></分类><分类 名称="SQL分类"><分类值>DML</分类值></分类><分类 名称="审核目的"><分类值>增强可维护性</分类值><分类值>发现性能问题</分类值></分类><分类 名称="审核精确度"><分类值>不连库审核</分类值></分类></标签><完成情况>完成</完成情况></Rule>