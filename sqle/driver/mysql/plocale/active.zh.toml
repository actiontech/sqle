AdvisorIndexTypeComposite = "复合"
AdvisorIndexTypeSingle = "单列"
AllCheckPrepareStatementPlaceholdersAnnotation = "因为过度使用绑定变量会增加查询的复杂度，从而降低查询性能。过度使用绑定变量还会增加维护成本。默认阈值:100"
AllCheckPrepareStatementPlaceholdersDesc = "绑定的变量个数不建议超过阈值"
AllCheckPrepareStatementPlaceholdersMessage = "使用绑定变量数量为 %v，不建议超过设定阈值 %v"
AllCheckPrepareStatementPlaceholdersParams1 = "最大绑定变量数量"
AnalysisChartXTime = "时间"
AnalysisChartYTime = "花费"
AnalysisDescCardinality = "基数"
AnalysisDescCharacterSetName = "列字符集"
AnalysisDescColumnComment = "列说明"
AnalysisDescColumnDefault = "默认值"
AnalysisDescColumnKey = "列索引"
AnalysisDescColumnName = "列名"
AnalysisDescColumnType = "列类型"
AnalysisDescComment = "备注"
AnalysisDescExtra = "拓展信息"
AnalysisDescIndexType = "索引类型"
AnalysisDescIsNullable = "是否可以为空"
AnalysisDescKeyName = "索引名"
AnalysisDescSeqInIndex = "列序列"
AnalysisDescUnique = "唯一性"
AnonymousMark = "(匿名)"
AuditResultMsgExcludedSQL = "审核SQL例外"
AuditResultMsgWhiteList = "白名单"
CheckInvalidError = "预检查失败"
CheckInvalidErrorFormat = "预检查失败: %v"
ColumnExistMessage = "字段 %s 已存在"
ColumnIsAmbiguousMessage = "字段 %s 指代不明"
ColumnNotExistMessage = "字段 %s 不存在"
ColumnsValuesNotMatchMessage = "指定的值列数与字段列数不匹配"
ConfigDDLGhostMinSizeAnnotation = "开启该规则后会自动对大表的DDL操作使用gh-ost 工具进行在线改表；直接对大表进行DDL变更时可能会导致长时间锁表问题，影响业务可持续性。具体对大表定义的阈值可以根据业务需求调整，默认值：1024"
ConfigDDLGhostMinSizeDesc = "改表时，表空间超过指定大小(MB)时使用gh-ost上线"
ConfigDDLGhostMinSizeParams1 = "表空间大小（MB）"
ConfigDDLOSCMinSizeAnnotation = "开启该规则后会对大表的DDL语句给出 pt-osc工具的改写建议【需要参考命令进行手工执行，后续会支持自动执行】；直接对大表进行DDL变更时可能会导致长时间锁表问题，影响业务可持续性。具体对大表定义的阈值可以根据业务需求调整，默认值：1024"
ConfigDDLOSCMinSizeDesc = "改表时，表空间超过指定大小(MB)审核时输出osc改写建议"
ConfigDDLOSCMinSizeParams1 = "表空间大小（MB）"
ConfigDMLExplainPreCheckEnableAnnotation = "通过 EXPLAIN 的形式将待上线的DML进行SQL是否能正确执行的检查，提前发现语句的错误，提高上线成功率"
ConfigDMLExplainPreCheckEnableDesc = "使用EXPLAIN加强预检查能力"
ConfigDMLRollbackMaxRowsAnnotation = "大事务回滚，容易影响数据库性能，使得业务发生波动；具体规则阈值可以根据业务需求调整，默认值：1000"
ConfigDMLRollbackMaxRowsDesc = "在 DML 语句中预计影响行数超过指定值则不回滚"
ConfigDMLRollbackMaxRowsParams1 = "最大影响行数"
ConfigOptimizeIndexEnabledAnnotation = "通过该规则开启索引优化建议，提供两个参数配置来定义索引优化建议的行为。1. 列区分度最低值阈值（百分制）：配置当前表中列的区分度小于多少时，不作为索引的列；2. 联合索引最大列数：限制联合索引给到的列数最大值，防止给出建议的联合索引不符合其他SQL标准"
ConfigOptimizeIndexEnabledDesc = "索引创建建议"
ConfigOptimizeIndexEnabledParams1 = "列区分度最低值阈值（百分比）"
ConfigOptimizeIndexEnabledParams2 = "联合索引最大列数"
ConfigSQLIsExecutedAnnotation = "启用该规则来兼容事后审核的场景，对于事后采集的DDL 和 DML 语句将不再进行上线校验。例如库表元数据的扫描任务可开启该规则"
ConfigSQLIsExecutedDesc = "停用上线审核模式"
DDLAvoidEventAnnotation = "使用event会增加数据库的维护难度和依赖性，并且也会造成安全问题。"
DDLAvoidEventDesc = "禁止使用event"
DDLAvoidEventMessage = "禁止使用event"
DDLAvoidFullTextAnnotation = "全文索引的使用会增加存储开销，并对写操作性能产生一定影响。"
DDLAvoidFullTextDesc = "禁止使用全文索引"
DDLAvoidFullTextMessage = "禁止使用全文索引"
DDLAvoidGeometryAnnotation = "使用空间字段和空间索引会增加存储需求，对数据库性能造成一定影响"
DDLAvoidGeometryDesc = "禁止使用空间字段和空间索引"
DDLAvoidGeometryMessage = "禁止使用空间字段和空间索引"
DDLAvoidTextAnnotation = "将TEXT类型的字段与原表主键分拆成另一个表可以提高数据库性能和查询速度，减少不必要的 I/O 操作。"
DDLAvoidTextDesc = "使用TEXT 类型的字段建议和原表进行分拆，与原表主键单独组成另外一个表进行存放"
DDLAvoidTextMessage = "字段：%v为TEXT类型，建议和原表进行分拆，与原表主键单独组成另外一个表进行存放"
DDLCheckAllIndexNotNullConstraintAnnotation = "所有索引字段均未做非空约束，请确认下表索引规划的合理性。"
DDLCheckAllIndexNotNullConstraintDesc = "建议为至少一个索引添加非空约束"
DDLCheckAllIndexNotNullConstraintMessage = "建议为至少一个索引添加非空约束"
DDLCheckAlterTableNeedMergeAnnotation = "避免多次 TABLE REBUILD 带来的消耗、以及对线上业务的影响"
DDLCheckAlterTableNeedMergeDesc = "存在多条对同一个表的修改语句，建议合并成一个ALTER语句"
DDLCheckAlterTableNeedMergeMessage = "已存在对该表的修改语句，建议合并成一个ALTER语句"
DDLCheckAutoIncrementAnnotation = "创建表时AUTO_INCREMENT设置为0则自增从1开始，可以避免数据空洞。例如在导出表结构DDL时，表结构内AUTO_INCREMENT通常为当前的自增值，如果建表时没有把AUTO_INCREMENT设置为0，那么通过该DDL进行建表操作会导致自增值从一个无意义数字开始。"
DDLCheckAutoIncrementDesc = "表的初始AUTO_INCREMENT值建议为0"
DDLCheckAutoIncrementFieldNumAnnotation = "MySQL InnoDB，MyISAM 引擎不允许存在多个自增字段，设置多个自增字段会导致上线失败。"
DDLCheckAutoIncrementFieldNumDesc = "建表时，自增字段只能设置一个"
DDLCheckAutoIncrementFieldNumMessage = "建表时，自增字段只能设置一个"
DDLCheckAutoIncrementMessage = "表的初始AUTO_INCREMENT值建议为0"
DDLCheckBigintInsteadOfDecimalAnnotation = "因为CPU不支持对DECIMAL的直接运算，只是MySQL自身实现了DECIMAL的高精度计算，但是计算代价高，并且存储同样范围值的时候，空间占用也更多；使用BIGINT代替DECIMAL，可根据小数的位数乘以相应的倍数，即可达到精确的浮点存储计算，避免DECIMAL计算代价高的问题"
DDLCheckBigintInsteadOfDecimalDesc = "建议用BIGINT类型代替DECIMAL"
DDLCheckBigintInsteadOfDecimalMessage = "建议列%s用BIGINT类型代替DECIMAL"
DDLCheckCharLengthAnnotation = "使用过长或者过多的varchar，char字段可能会增加业务逻辑的复杂性；如果字段平均长度过大时，会占用更多的存储空间。"
DDLCheckCharLengthDesc = "禁止char, varchar类型字段字符长度总和超过阈值"
DDLCheckCharLengthMessage = "禁止char, varchar类型字段字符长度总和超过阈值 %v"
DDLCheckCharLengthParams1 = "字符长度"
DDLCheckColumnBlobDefaultIsNotNullAnnotation = "在SQL_MODE严格模式下BLOB 和 TEXT 类型无法设置默认值，如插入数据不指定值，字段会被设置为NULL"
DDLCheckColumnBlobDefaultIsNotNullDesc = "BLOB 和 TEXT 类型的字段默认值只能为NULL"
DDLCheckColumnBlobDefaultIsNotNullMessage = "BLOB 和 TEXT 类型的字段默认值只能为NULL"
DDLCheckColumnBlobNoticeAnnotation = "BLOB 或 TEXT 类型消耗大量的网络和IO带宽，同时在该表上的DML操作都会变得很慢"
DDLCheckColumnBlobNoticeDesc = "不建议使用 BLOB 或 TEXT 类型"
DDLCheckColumnBlobNoticeMessage = "不建议使用 BLOB 或 TEXT 类型"
DDLCheckColumnBlobWithNotNullAnnotation = "BLOB 和 TEXT 类型的字段无法指定默认值，如插入数据不指定字段默认为NULL，如果添加了 NOT NULL 限制，写入数据时又未对该字段指定值会导致写入失败"
DDLCheckColumnBlobWithNotNullDesc = "BLOB 和 TEXT 类型的字段不建议设置为 NOT NULL"
DDLCheckColumnBlobWithNotNullMessage = "BLOB 和 TEXT 类型的字段不建议设置为 NOT NULL"
DDLCheckColumnCharLengthAnnotation = "VARCHAR是变长字段，存储空间小，可节省存储空间，同时相对较小的字段检索效率显然也要高些"
DDLCheckColumnCharLengthDesc = "CHAR长度大于20时，必须使用VARCHAR类型"
DDLCheckColumnCharLengthMessage = "CHAR长度大于20时，必须使用VARCHAR类型"
DDLCheckColumnEnumNoticeAnnotation = "ENUM类型不是SQL标准，移植性较差，后期如修改或增加枚举值需重建整张表，代价较大，且无法通过字面量值进行排序"
DDLCheckColumnEnumNoticeDesc = "不建议使用 ENUM 类型"
DDLCheckColumnEnumNoticeMessage = "不建议使用 ENUM 类型"
DDLCheckColumnNotNULLAnnotation = "表字段建议有 NOT NULL 约束，可确保数据的完整性，防止插入空值，提升查询准确性。"
DDLCheckColumnNotNULLDesc = "表字段建议有NOT NULL约束"
DDLCheckColumnNotNULLMessage = "建议字段%v设置NOT NULL约束"
DDLCheckColumnQuantityAnnotation = "避免在OLTP系统上做宽表设计，后期对性能影响很大；具体规则阈值可根据业务需求调整，默认值：40"
DDLCheckColumnQuantityDesc = "表的列数不建议超过阈值"
DDLCheckColumnQuantityInPKAnnotation = "主建中的列过多，会导致二级索引占用更多的空间，同时增加索引维护的开销；具体规则阈值可根据业务需求调整，默认值：2"
DDLCheckColumnQuantityInPKDesc = "主键包含的列数不建议超过阈值"
DDLCheckColumnQuantityInPKMessage = "主键包含的列数不建议超过阈值"
DDLCheckColumnQuantityInPKParams1 = "最大列数"
DDLCheckColumnQuantityMessage = "表的列数不建议超过阈值"
DDLCheckColumnQuantityParams1 = "最大列数"
DDLCheckColumnSetNoticeAnnotation = "集合的修改需要重新定义列，后期修改的代价大，建议在业务层实现"
DDLCheckColumnSetNoticeDesc = "不建议使用 SET 类型"
DDLCheckColumnSetNoticeMessage = "不建议使用 SET 类型"
DDLCheckColumnTimestampWithoutDefaultAnnotation = "TIMESTAMP添加默认值，可避免出现全为0的日期格式与业务预期不符"
DDLCheckColumnTimestampWithoutDefaultDesc = "TIMESTAMP 类型的列必须添加默认值"
DDLCheckColumnTimestampWithoutDefaultMessage = "TIMESTAMP 类型的列必须添加默认值"
DDLCheckColumnTypeIntegerAnnotation = "INT(M) 或 BIGINT(M)，M 表示最大显示宽度，可存储最大值的宽度分别为10、20，采用 INT(10) 或 BIGINT(20)可避免发生显示截断的可能"
DDLCheckColumnTypeIntegerDesc = "整型定义建议采用 INT(10) 或 BIGINT(20)"
DDLCheckColumnTypeIntegerMessage = "整型定义建议采用 INT(10) 或 BIGINT(20)"
DDLCheckColumnWithoutCommentAnnotation = "列添加注释能够使列的意义更明确，方便日后的维护"
DDLCheckColumnWithoutCommentDesc = "列建议添加注释"
DDLCheckColumnWithoutCommentMessage = "列建议添加注释"
DDLCheckColumnWithoutDefaultAnnotation = "列添加默认值，可避免列为NULL值时对查询的影响"
DDLCheckColumnWithoutDefaultDesc = "除了自增列及大字段列之外，每个列都必须添加默认值"
DDLCheckColumnWithoutDefaultMessage = "除了自增列及大字段列之外，每个列都必须添加默认值"
DDLCheckCompositeIndexDistinctionAnnotation = "将区分度高的字段靠前放置在组合索引中有助于提高索引的查询性能，因为它能更快地减小数据范围，提高检索效率。"
DDLCheckCompositeIndexDistinctionDesc = "建议在组合索引中将区分度高的字段靠前放"
DDLCheckCompositeIndexDistinctionMessage = "建议在组合索引中将区分度高的字段靠前放，%v"
DDLCheckCompositeIndexMaxAnnotation = "复合索引会根据索引列数创建对应组合的索引，列数越多，创建的索引越多，每个索引都会增加磁盘空间的开销，同时增加索引维护的开销；具体规则阈值可以根据业务需求调整，默认值：3"
DDLCheckCompositeIndexMaxDesc = "复合索引的列数量不建议超过阈值"
DDLCheckCompositeIndexMaxMessage = "复合索引的列数量不建议超过%v个"
DDLCheckCompositeIndexMaxParams1 = "最大索引列数量"
DDLCheckCreateFunctionAnnotation = "自定义函数，维护较差，且依赖性高会导致SQL无法跨库使用"
DDLCheckCreateFunctionDesc = "禁止使用自定义函数"
DDLCheckCreateFunctionMessage = "禁止使用自定义函数"
DDLCheckCreateProcedureAnnotation = "存储过程在一定程度上会使程序难以调试和拓展，各种数据库的存储过程语法相差很大，给将来的数据库移植带来很大的困难，且会极大的增加出现BUG的概率"
DDLCheckCreateProcedureDesc = "禁止使用存储过程"
DDLCheckCreateProcedureMessage = "禁止使用存储过程"
DDLCheckCreateTimeColumnAnnotation = "使用CREATE_TIME字段，有利于问题查找跟踪和检索数据，同时避免后期对数据生命周期管理不便 ，默认值为CURRENT_TIMESTAMP可保证时间的准确性"
DDLCheckCreateTimeColumnDesc = "建议建表DDL包含创建时间字段且默认值为CURRENT_TIMESTAMP"
DDLCheckCreateTimeColumnMessage = "建议建表DDL包含%v字段且默认值为CURRENT_TIMESTAMP"
DDLCheckCreateTimeColumnParams1 = "创建时间字段名"
DDLCheckCreateTriggerAnnotation = "触发器难以开发和维护，不能高效移植，且在复杂的逻辑以及高并发下，容易出现死锁影响业务"
DDLCheckCreateTriggerDesc = "禁止使用触发器"
DDLCheckCreateTriggerMessage = "禁止使用触发器"
DDLCheckCreateViewAnnotation = "视图的查询性能较差，同时基表结构变更，需要对视图进行维护，如果视图可读性差且包含复杂的逻辑，都会增加维护的成本"
DDLCheckCreateViewDesc = "禁止使用视图"
DDLCheckCreateViewMessage = "禁止使用视图"
DDLCheckDatabaseCollationAnnotation = "通过该规则约束全局的数据库排序规则，避免创建非预期的数据库排序规则，防止业务侧出现排序结果非预期等问题。建议项目内库表使用统一的字符集和字符集排序，部分连表查询的情况下字段的字符集或排序规则不一致可能会导致索引失效且不易发现"
DDLCheckDatabaseCollationDesc = "建议使用规定的数据库排序规则"
DDLCheckDatabaseCollationMessage = "建议使用规定的数据库排序规则为%s"
DDLCheckDatabaseCollationParams1 = "数据库排序规则"
DDLCheckDatabaseSuffixAnnotation = "通过配置该规则可以规范指定业务的数据库命名规则，具体命名规范可以自定义设置，默认提示值：_DB"
DDLCheckDatabaseSuffixDesc = "建议数据库名称使用固定后缀结尾"
DDLCheckDatabaseSuffixMessage = "建议数据库名称以\"%v\"结尾"
DDLCheckDatabaseSuffixParams1 = "数据库名称后缀"
DDLCheckDecimalTypeColumnAnnotation = "对于浮点数运算，DECIMAL精确度较高"
DDLCheckDecimalTypeColumnDesc = "精确浮点数建议使用DECIMAL"
DDLCheckDecimalTypeColumnMessage = "精确浮点数建议使用DECIMAL"
DDLCheckFieldNotNUllMustContainDefaultValueAnnotation = "如存在NOT NULL且不带默认值的字段，INSERT时不包含该字段，会导致插入报错"
DDLCheckFieldNotNUllMustContainDefaultValueDesc = "建议字段约束为NOT NULL时带默认值"
DDLCheckFieldNotNUllMustContainDefaultValueMessage = "建议字段约束为NOT NULL时带默认值，以下字段不规范:%v"
DDLCheckFullWidthQuotationMarksAnnotation = "建议开启此规则，可避免MySQL会将中文全角引号识别为命名的一部分，执行结果与业务预期不符"
DDLCheckFullWidthQuotationMarksDesc = "DDL语句中不建议使用中文全角引号"
DDLCheckFullWidthQuotationMarksMessage = "DDL语句中不建议使用中文全角引号，这可能是书写错误"
DDLCheckIndexCountAnnotation = "在表上建立的每个索引都会增加存储开销，索引对于插入、删除、更新操作也会增加处理上的开销，太多与不充分、不正确的索引对性能都毫无益处；具体规则阈值可以根据业务需求调整，默认值：5"
DDLCheckIndexCountDesc = "索引个数建议不超过阈值"
DDLCheckIndexCountMessage = "索引个数建议不超过%v个"
DDLCheckIndexCountParams1 = "最大索引个数"
DDLCheckIndexNotNullConstraintAnnotation = "索引字段上如果没有非空约束，则表记录与索引记录不会完全映射。"
DDLCheckIndexNotNullConstraintDesc = "索引字段需要有非空约束"
DDLCheckIndexNotNullConstraintMessage = "这些索引字段(%v)需要有非空约束"
DDLCheckIndexOptionAnnotation = "选择区分度高的字段作为索引，可快速定位数据；区分度太低，无法有效利用索引，甚至可能需要扫描大量数据页，拖慢SQL；具体规则阈值可以根据业务需求调整，默认值：70"
DDLCheckIndexOptionDesc = "建议索引字段对区分度大于阈值"
DDLCheckIndexOptionMessage = "索引 %v 未超过区分度阈值 百分之%v, 不建议选为索引"
DDLCheckIndexOptionParams1 = "可选择性（百分比）"
DDLCheckIndexPrefixAnnotation = "通过配置该规则可以规范指定业务的索引命名规则，具体命名规范可以自定义设置，默认提示值：idx_"
DDLCheckIndexPrefixDesc = "建议普通索引使用固定前缀"
DDLCheckIndexPrefixMessage = "建议普通索引要以\"%v\"为前缀"
DDLCheckIndexPrefixParams1 = "索引前缀"
DDLCheckIndexTooManyAnnotation = "单字段上存在过多索引，一般情况下这些索引都是没有存在价值的；相反，还会降低数据增加删除时的性能，特别是对频繁更新的表来说，负面影响更大；具体规则阈值可以根据业务需求调整，默认值：2"
DDLCheckIndexTooManyDesc = "单字段上的索引数量不建议超过阈值"
DDLCheckIndexTooManyMessage = "字段 %v 上的索引数量不建议超过%v个"
DDLCheckIndexTooManyParams1 = "单字段的索引数最大值"
DDLCheckIndexedColumnWithBlobAnnotation = "BLOB类型属于大字段类型，作为索引会占用很大的存储空间"
DDLCheckIndexedColumnWithBlobDesc = "禁止将BLOB类型的列加入索引"
DDLCheckIndexedColumnWithBlobMessage = "禁止将BLOB类型的列加入索引"
DDLCheckIndexesExistBeforeCreateConstraintsAnnotation = "创建约束前，先行创建索引，约束可作用于二级索引，避免全表扫描，提高性能"
DDLCheckIndexesExistBeforeCreateConstraintsDesc = "对字段创建约束前，建议先创建索引"
DDLCheckIndexesExistBeforeCreateConstraintsMessage = "对字段创建约束前，建议先创建索引"
DDLCheckIsExistLimitOffsetAnnotation = "例如：LIMIT N OFFSET M 或 LIMIT M,N。当偏移量m过大的时候，查询效率会很低，因为MySQL是先查出m+n个数据，然后抛弃掉前m个数据；对于有大数据量的MySQL表来说，使用LIMIT分页存在很严重的性能问题"
DDLCheckIsExistLimitOffsetDesc = "使用分页查询时，避免使用偏移量"
DDLCheckIsExistLimitOffsetMessage = "使用分页查询时，避免使用偏移量"
DDLCheckObjectNameIsUpperAndLowerLetterMixedAnnotation = "数据库对象命名规范，不推荐采用大小写混用的形式建议词语之间使用下划线连接，提高代码可读性"
DDLCheckObjectNameIsUpperAndLowerLetterMixedDesc = "数据库对象命名不建议大小写字母混合"
DDLCheckObjectNameIsUpperAndLowerLetterMixedMessage = "数据库对象命名不建议大小写字母混合，以下对象命名不规范：%v"
DDLCheckObjectNameLengthAnnotation = "通过配置该规则可以规范指定业务的对象命名长度，具体长度可以自定义设置，默认最大长度：64。是MySQL规定标识符命名最大长度为64字节"
DDLCheckObjectNameLengthDesc = "表名、列名、索引名的长度不建议超过阈值"
DDLCheckObjectNameLengthMessage = "表名、列名、索引名的长度不建议大于%v字节"
DDLCheckObjectNameLengthParams1 = "最大长度（字节）"
DDLCheckObjectNameUseCNAnnotation = "通过配置该规则可以规范指定业务的数据对象命名规则"
DDLCheckObjectNameUseCNDesc = "数据库对象命名只能使用英文、下划线或数字，首字母必须是英文"
DDLCheckObjectNameUseCNMessage = "数据库对象命名只能使用英文、下划线或数字，首字母必须是英文"
DDLCheckObjectNameUsingKeywordAnnotation = "通过配置该规则可以规范指定业务的数据对象命名规则，避免发生冲突，以及混淆"
DDLCheckObjectNameUsingKeywordDesc = "数据库对象命名禁止使用保留字"
DDLCheckObjectNameUsingKeywordMessage = "数据库对象命名禁止使用保留字 %s"
DDLCheckPKNameAnnotation = "通过配置该规则可以规范指定业务的主键命名规则"
DDLCheckPKNameDesc = "建议主键命名为\"PK_表名\""
DDLCheckPKNameMessage = "建议主键命名为\"PK_表名\""
DDLCheckPKNotExistAnnotation = "主键使数据达到全局唯一，可提高数据检索效率"
DDLCheckPKNotExistDesc = "表必须有主键"
DDLCheckPKNotExistMessage = "表必须有主键"
DDLCheckPKProhibitAutoIncrementAnnotation = "后期维护相对不便，过于依赖数据库自增机制达到全局唯一，不易拆分，容易造成主键冲突"
DDLCheckPKProhibitAutoIncrementDesc = "不建议主键使用自增"
DDLCheckPKProhibitAutoIncrementMessage = "不建议主键使用自增"
DDLCheckPKWithoutAutoIncrementAnnotation = "自增主键，数字型速度快，而且是增量增长，占用空间小，更快速的做数据插入操作，避免增加维护索引的开销"
DDLCheckPKWithoutAutoIncrementDesc = "主键建议使用自增"
DDLCheckPKWithoutAutoIncrementMessage = "主键建议使用自增"
DDLCheckPKWithoutBigintUnsignedAnnotation = "BIGINT UNSIGNED拥有更大的取值范围，建议开启此规则，避免发生溢出"
DDLCheckPKWithoutBigintUnsignedDesc = "主键建议使用 BIGINT 无符号类型，即 BIGINT UNSIGNED"
DDLCheckPKWithoutBigintUnsignedMessage = "主键建议使用 BIGINT 无符号类型，即 BIGINT UNSIGNED"
DDLCheckPKWithoutIfNotExistsAnnotation = "新建表如果表已经存在，不添加IF NOT EXISTS CREATE执行SQL会报错，建议开启此规则，避免SQL实际执行报错"
DDLCheckPKWithoutIfNotExistsDesc = "新建表建议加入 IF NOT EXISTS，保证重复执行不报错"
DDLCheckPKWithoutIfNotExistsMessage = "新建表建议加入 IF NOT EXISTS，保证重复执行不报错"
DDLCheckRedundantIndexAnnotation = "MySQL需要单独维护重复的索引，冗余索引增加维护成本，并且优化器在优化查询时需要逐个进行代价计算，影响查询性能"
DDLCheckRedundantIndexDesc = "不建议创建冗余索引"
DDLCheckRedundantIndexMessage = "%v"
DDLCheckTableCharacterSetAnnotation = "通过该规则约束全局的数据库字符集，避免创建非预期的字符集，防止业务侧出现“乱码”等问题。建议项目内库表使用统一的字符集和字符集排序，部分连表查询的情况下字段的字符集或排序规则不一致可能会导致索引失效且不易发现"
DDLCheckTableCharacterSetDesc = "建议使用指定数据库字符集"
DDLCheckTableCharacterSetMessage = "建议使用%v数据库字符集"
DDLCheckTableCharacterSetParams1 = "数据库字符集"
DDLCheckTableDBEngineAnnotation = "通过配置该规则可以规范指定业务的数据库引擎，具体规则可以自定义设置。默认值是INNODB，INNODB 支持事务，支持行级锁，更好的恢复性，高并发下性能更好"
DDLCheckTableDBEngineDesc = "建议使用指定数据库引擎"
DDLCheckTableDBEngineMessage = "建议使用%v数据库引擎"
DDLCheckTableDBEngineParams1 = "数据库引擎"
DDLCheckTablePartitionAnnotation = "分区表在物理上表现为多个文件，在逻辑上表现为一个表，跨分区查询效率可能更低，建议采用物理分表的方式管理大数据"
DDLCheckTablePartitionDesc = "不建议使用分区表相关功能"
DDLCheckTablePartitionMessage = "不建议使用分区表相关功能"
DDLCheckTableRowsAnnotation = "当表行数超过阈值时，对表进行拆分有助于提高数据库性能和查询速度。"
DDLCheckTableRowsDesc = "表行数超过阈值，建议对表进行拆分"
DDLCheckTableRowsMessage = "表行数超过阈值，建议对表进行拆分"
DDLCheckTableRowsParams1 = "表行数（万）"
DDLCheckTableSizeAnnotation = "大表执行DDL，耗时较久且负载较高，长时间占用锁资源，会影响数据库性能；具体规则阈值可以根据业务需求调整，默认值：1024"
DDLCheckTableSizeDesc = "不建议对数据量过大的表执行DDL操作"
DDLCheckTableSizeMessage = "执行DDL的表 %v 空间不建议超过 %vMB"
DDLCheckTableSizeParams1 = "表空间大小（MB）"
DDLCheckTableWithoutCommentAnnotation = "表添加注释能够使表的意义更明确，方便日后的维护"
DDLCheckTableWithoutCommentDesc = "表建议添加注释"
DDLCheckTableWithoutCommentMessage = "表建议添加注释"
DDLCheckTransactionIsolationLevelAnnotation = "RC避免了脏读的现象，但没有解决幻读的问题；使用RR，能避免幻读，但是由于引入间隙锁导致加锁的范围可能扩大，从而会影响并发，还容易造成死锁，所以在大多数业务场景下，幻读出现的机率较少，RC基本上能满足业务需求"
DDLCheckTransactionIsolationLevelDesc = "事物隔离级别建议设置成RC"
DDLCheckTransactionIsolationLevelMessage = "事物隔离级别建议设置成RC"
DDLCheckUniqueIndexAnnotation = "通过配置该规则可以规范指定业务的UNIQUE索引命名规则"
DDLCheckUniqueIndexDesc = "建议UNIQUE索引名使用 IDX_UK_表名_字段名"
DDLCheckUniqueIndexMessage = "建议UNIQUE索引名使用 IDX_UK_表名_字段名"
DDLCheckUniqueIndexPrefixAnnotation = "通过配置该规则可以规范指定业务的UNIQUE索引命名规则，具体命名规范可以自定义设置，默认提示值：uniq_"
DDLCheckUniqueIndexPrefixDesc = "建议UNIQUE索引使用固定前缀"
DDLCheckUniqueIndexPrefixMessage = "建议UNIQUE索引要以\"%v\"为前缀"
DDLCheckUniqueIndexPrefixParams1 = "索引前缀"
DDLCheckUpdateTimeColumnAnnotation = "使用更新时间字段，有利于问题查找跟踪和检索数据，同时避免后期对数据生命周期管理不便 ，默认值为UPDATE_TIME可保证时间的准确性"
DDLCheckUpdateTimeColumnDesc = "建表DDL需要包含更新时间字段且默认值为CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"
DDLCheckUpdateTimeColumnMessage = "建表DDL需要包含%v字段且默认值为CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"
DDLCheckUpdateTimeColumnParams1 = "更新时间字段名"
DDLCheckVarcharSizeAnnotation = "MySQL建立索引时没有限制索引的大小，索引长度会默认采用的该字段的长度，VARCHAR 定义长度越长建立的索引存储大小越大；具体规则阈值可以根据业务需求调整，默认值：1024"
DDLCheckVarcharSizeDesc = "定义VARCHAR 长度时不建议大于阈值"
DDLCheckVarcharSizeMessage = "定义VARCHAR 长度时不建议大于阈值, 阈值为%d"
DDLCheckVarcharSizeParams1 = "VARCHAR最大长度"
DDLDisableAlterFieldUseFirstAndAfterAnnotation = "FIRST,AFTER 的ALTER操作通过COPY TABLE的方式完成，对业务影响较大"
DDLDisableAlterFieldUseFirstAndAfterDesc = "ALTER表字段禁止使用FIRST,AFTER"
DDLDisableAlterFieldUseFirstAndAfterMessage = "ALTER表字段禁止使用FIRST,AFTER"
DDLDisableDropStatementAnnotation = "DROP是DDL，数据变更不会写入日志，无法进行回滚；建议开启此规则，避免误删除操作"
DDLDisableDropStatementDesc = "禁止除索引外的DROP操作"
DDLDisableDropStatementMessage = "禁止除索引外的DROP操作"
DDLDisableFKAnnotation = "外键在高并发场景下性能较差，容易造成死锁，同时不利于后期维护（拆分、迁移）"
DDLDisableFKDesc = "禁止使用外键"
DDLDisableFKMessage = "禁止使用外键"
DDLDisableTypeTimestampAnnotation = "TIMESTAMP 有最大值限制（'2038-01-19 03:14:07' UTC），且会时区转换的问题"
DDLDisableTypeTimestampDesc = "不建议使用TIMESTAMP字段"
DDLDisableTypeTimestampMessage = "不建议使用TIMESTAMP字段"
DDLHintDropColumnAnnotation = "业务逻辑与删除列依赖未完全消除，列被删除后可能导致程序异常（无法正常读写）的情况；开启该规则，SQLE将提醒删除列为高危操作"
DDLHintDropColumnDesc = "禁止进行删除列的操作"
DDLHintDropColumnMessage = "禁止进行删除列的操作"
DDLHintDropForeignKeyAnnotation = "删除已有约束会影响已有业务逻辑；开启该规则，SQLE将提醒删除外键为高危操作"
DDLHintDropForeignKeyDesc = "禁止进行删除外键的操作"
DDLHintDropForeignKeyMessage = "禁止进行删除外键的操作"
DDLHintDropPrimaryKeyAnnotation = "删除已有约束会影响已有业务逻辑；开启该规则，SQLE将提醒删除主键为高危操作"
DDLHintDropPrimaryKeyDesc = "禁止进行删除主键的操作"
DDLHintDropPrimaryKeyMessage = "禁止进行删除主键的操作"
DDLHintUpdateTableCharsetWillNotUpdateFieldCharsetAnnotation = "修改表的默认字符集，只会影响后续新增的字段，不会修表已有字段的字符集；如需修改整张表所有字段的字符集建议开启此规则"
DDLHintUpdateTableCharsetWillNotUpdateFieldCharsetDesc = "不建议修改表的默认字符集"
DDLHintUpdateTableCharsetWillNotUpdateFieldCharsetMessage = "不建议修改表的默认字符集"
DDLNotAllowRenamingAnnotation = "RENAME/CHANGE 表名/列名会对线上业务不停机发布造成影响，如需这种操作应当DBA手工干预"
DDLNotAllowRenamingDesc = "禁止使用RENAME或CHANGE对表名字段名进行修改"
DDLNotAllowRenamingMessage = "禁止使用RENAME或CHANGE对表名字段名进行修改"
DDLRecommendTableColumnCharsetSameAnnotation = "统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效"
DDLRecommendTableColumnCharsetSameDesc = "建议列与表使用同一个字符集"
DDLRecommendTableColumnCharsetSameMessage = "建议列与表使用同一个字符集"
DMLAvoidWhereEqualNullAnnotation = "NULL在SQL中属于特殊值，无法与普通值进行比较。例如：column = NULL恒为false，即使column存在null值也不会查询出来，所以column = NULL应该写为column is NULL"
DMLAvoidWhereEqualNullDesc = "WHERE子句中禁止将NULL值与其他字段或值进行比较运算"
DMLAvoidWhereEqualNullMessage = "WHERE子句中禁止将NULL值与其他字段或值进行比较运算"
DMLCheckAffectedRowsAnnotation = "如果 DML 操作影响行数过多，会导致查询性能下降，因为需要扫描更多的数据。"
DMLCheckAffectedRowsDesc = "UPDATE/DELETE操作影响行数不建议超过阈值"
DMLCheckAffectedRowsMessage = "UPDATE/DELETE操作影响行数不建议超过阈值，影响行数为 %v，超过设定阈值 %v"
DMLCheckAffectedRowsParams1 = "最大影响行数"
DMLCheckAggregateAnnotation = "不建议使用SQL聚合函数,是为了确保查询的简单性、高性能和数据一致性。"
DMLCheckAggregateDesc = "不建议使用聚合函数"
DMLCheckAggregateMessage = "不建议使用聚合函数计算"
DMLCheckAliasAnnotation = "表或列的别名与其真实名称相同, 这样的别名会使得查询更难去分辨"
DMLCheckAliasDesc = "别名不建议与表或列的名字相同"
DMLCheckAliasMessage = "这些别名(%v)与列名或表名相同"
DMLCheckBatchInsertListsMaxAnnotation = "避免大事务，以及降低发生回滚对业务的影响；具体规则阈值可以根据业务需求调整，默认值：100"
DMLCheckBatchInsertListsMaxDesc = "单条INSERT语句，建议批量插入不超过阈值"
DMLCheckBatchInsertListsMaxMessage = "单条INSERT语句，建议批量插入不超过%v条"
DMLCheckBatchInsertListsMaxParams1 = "最大插入行数"
DMLCheckExplainAccessTypeAllAnnotation = "全表扫描时，扫描行数不建议超过指定行数是为了避免性能问题；具体规则阈值可以根据业务需求调整，默认值：10000；如果设置为0，全表扫描都会触发规则"
DMLCheckExplainAccessTypeAllDesc = "全表扫描时，扫描行数不建议超过指定行数（默认值：10000）"
DMLCheckExplainAccessTypeAllMessage = "该查询使用了全表扫描并且扫描行数为%v"
DMLCheckExplainAccessTypeAllParams1 = "最大扫描行数"
DMLCheckExplainExtraUsingFilesortAnnotation = "大数据量的情况下，文件排序意味着SQL性能较低，会增加OS的开销，影响数据库性能"
DMLCheckExplainExtraUsingFilesortDesc = "不建议使用文件排序"
DMLCheckExplainExtraUsingFilesortMessage = "不建议使用文件排序"
DMLCheckExplainExtraUsingIndexForSkipScanAnnotation = "索引扫描是跳跃扫描，未遵循最左匹配原则，可能降低索引的使用效率，影响查询性能"
DMLCheckExplainExtraUsingIndexForSkipScanDesc = "不建议对表进行索引跳跃扫描"
DMLCheckExplainExtraUsingIndexForSkipScanMessage = "不建议对表进行索引跳跃扫描"
DMLCheckExplainExtraUsingTemporaryAnnotation = "大数据量的情况下，临时表意味着SQL性能较低，会增加OS的开销，影响数据库性能"
DMLCheckExplainExtraUsingTemporaryDesc = "不建议使用临时表"
DMLCheckExplainExtraUsingTemporaryMessage = "不建议使用临时表"
DMLCheckExplainFullIndexScanAnnotation = "在数据量大的情况下索引全扫描严重影响SQL性能。"
DMLCheckExplainFullIndexScanDesc = "不建议对表进行全索引扫描"
DMLCheckExplainFullIndexScanMessage = "不建议对表进行全索引扫描"
DMLCheckExplainUsingIndexAnnotation = "使用索引可以显著提高SQL查询的性能。"
DMLCheckExplainUsingIndexDesc = "SQL查询条件需要走索引"
DMLCheckExplainUsingIndexMessage = "建议使用索引以优化 SQL 查询性能"
DMLCheckFuzzySearchAnnotation = "使用全模糊搜索或左模糊搜索将导致查询无法使用索引，导致全表扫描"
DMLCheckFuzzySearchDesc = "禁止使用全模糊搜索或左模糊搜索"
DMLCheckFuzzySearchMessage = "禁止使用全模糊搜索或左模糊搜索"
DMLCheckHasJoinConditionAnnotation = "指定连接条件可以确保连接操作的正确性和可靠性，如果没有指定连接条件，可能会导致连接失败或连接不正确的情况。"
DMLCheckHasJoinConditionDesc = "建议连接操作指定连接条件"
DMLCheckHasJoinConditionMessage = "建议连接操作指定连接条件，JOIN字段后必须有ON条件"
DMLCheckIfAfterUnionDistinctAnnotation = "UNION会按照字段的顺序进行排序同时去重，UNION ALL只是简单的将两个结果合并后就返回，从效率上看，UNION ALL 要比UNION快很多；如果合并的两个结果集中允许包含重复数据且不需要排序时的话，建议开启此规则，使用UNION ALL替代UNION"
DMLCheckIfAfterUnionDistinctDesc = "建议使用UNION ALL,替代UNION"
DMLCheckIfAfterUnionDistinctMessage = "建议使用UNION ALL,替代UNION"
DMLCheckInQueryNumberAnnotation = "当IN值过多时，有可能会导致查询进行全表扫描，使得MySQL性能急剧下降；具体规则阈值可以根据业务需求调整，默认值：50"
DMLCheckInQueryNumberDesc = "WHERE条件内IN语句中的参数个数不能超过阈值"
DMLCheckInQueryNumberMessage = "WHERE条件内IN语句中的参数已有%v个，不建议超过阙值%v"
DMLCheckInQueryNumberParams1 = "in语句参数最大个数"
DMLCheckIndexSelectivityAnnotation = "确保SQL执行计划中使用的高索引区分度，有助于提升查询性能并优化查询效率。"
DMLCheckIndexSelectivityDesc = "建议连库查询时，确保SQL执行计划中使用的索引区分度大于阈值"
DMLCheckIndexSelectivityMessage = "索引：%v，未超过区分度阈值：%v，建议使用超过阈值的索引。"
DMLCheckIndexSelectivityParams1 = "可选择性（百分比）"
DMLCheckInsertColumnsExistAnnotation = "当表结构发生变更，INSERT请求不明确指定列名，会发生插入数据不匹配的情况；建议开启此规则，避免插入结果与业务预期不符"
DMLCheckInsertColumnsExistDesc = "INSERT 语句需要指定COLUMN"
DMLCheckInsertColumnsExistMessage = "INSERT 语句需要指定COLUMN"
DMLCheckInsertSelectAnnotation = "使用 INSERT ... SELECT 在默认事务隔离级别下，可能会导致对查询的表施加表级锁。"
DMLCheckInsertSelectDesc = "不建议使用INSERT ... SELECT"
DMLCheckInsertSelectMessage = "不建议使用INSERT ... SELECT"
DMLCheckJoinFieldCharacterSetAndCollationAnnotation = "连接表字段的字符集和排序规则一致可避免数据不一致和查询错误，确保连接操作正确执行。"
DMLCheckJoinFieldCharacterSetAndCollationDesc = "连接表字段的字符集和排序规则必须一致"
DMLCheckJoinFieldCharacterSetAndCollationMessage = "连接表字段的字符集和排序规则必须一致"
DMLCheckJoinFieldTypeAnnotation = "JOIN字段类型不一致会导致类型不匹配发生隐式准换，建议开启此规则，避免索引失效"
DMLCheckJoinFieldTypeDesc = "建议JOIN字段类型保持一致"
DMLCheckJoinFieldTypeMessage = "建议JOIN字段类型保持一致, 否则会导致隐式转换"
DMLCheckJoinFieldUseIndexAnnotation = "JOIN字段包含索引可提高连接操作的性能和查询速度。"
DMLCheckJoinFieldUseIndexDesc = "JOIN字段必须包含索引"
DMLCheckJoinFieldUseIndexMessage = "JOIN字段必须包含索引"
DMLCheckLimitMustExistAnnotation = "LIMIT条件可以降低写错 SQL 的代价（删错数据），同时避免长事务影响业务"
DMLCheckLimitMustExistDesc = "建议DELETE/UPDATE 语句带有LIMIT条件"
DMLCheckLimitMustExistMessage = "建议DELETE/UPDATE 语句带有LIMIT条件"
DMLCheckLimitOffsetNumAnnotation = "因为OFFSET指定了结果集的起始位置，如果起始位置过大，那么 MySQL 需要处理更多的数据才能返回结果集，这可能会导致查询性能下降。"
DMLCheckLimitOffsetNumDesc = "不建议LIMIT的偏移OFFSET大于阈值"
DMLCheckLimitOffsetNumMessage = "不建议LIMIT的偏移OFFSET大于阈值，OFFSET=%v（阈值为%v）"
DMLCheckLimitOffsetNumParams1 = "offset 大小"
DMLCheckMathComputationOrFuncOnIndexAnnotation = "对索引列进行数学运算和使用函数会导致索引失效，从而导致全表扫描，影响查询性能。"
DMLCheckMathComputationOrFuncOnIndexDesc = "禁止对索引列进行数学运算和使用函数"
DMLCheckMathComputationOrFuncOnIndexMessage = "禁止对索引列进行数学运算和使用函数"
DMLCheckNeedlessFuncAnnotation = "通过配置该规则可以指定业务中需要禁止使用的内置函数，使用内置函数可能会导致SQL无法走索引或者产生一些非预期的结果。实际需要禁用的函数可通过规则设置"
DMLCheckNeedlessFuncDesc = "避免使用不必要的内置函数"
DMLCheckNeedlessFuncMessage = "避免使用不必要的内置函数%v"
DMLCheckNeedlessFuncParams1 = "指定的函数集合（逗号分割）"
DMLCheckNotEqualSymbolAnnotation = "'!=' 是非标准的运算符，'<>' 才是SQL中标准的不等于运算符"
DMLCheckNotEqualSymbolDesc = "建议使用'<>'代替'!='"
DMLCheckNotEqualSymbolMessage = "建议使用'<>'代替'!='"
DMLCheckNumberOfJoinTablesAnnotation = "表关联越多，意味着各种驱动关系组合就越多，比较各种结果集的执行成本的代价也就越高，进而SQL查询性能会大幅度下降；具体规则阈值可以根据业务需求调整，默认值：3"
DMLCheckNumberOfJoinTablesDesc = "使用JOIN连接表查询建议不超过阈值"
DMLCheckNumberOfJoinTablesMessage = "使用JOIN连接表查询建议不超过%v张"
DMLCheckNumberOfJoinTablesParams1 = "最大连接表个数"
DMLCheckSQLInjectionFuncAnnotation = "攻击者通过SQL注入，可未经授权可访问数据库中的数据，存在盗取用户信息，造成用户数据泄露等安全漏洞问题"
DMLCheckSQLInjectionFuncDesc = "不建议使用常见 SQL 注入函数"
DMLCheckSQLInjectionFuncMessage = "不建议使用常见 SQL 注入函数"
DMLCheckSQLLengthAnnotation = "过长的SQL可读性较差，难以维护，且容易引发性能问题；具体规则阈值可以根据业务需求调整，默认值：1024"
DMLCheckSQLLengthDesc = "建议将过长的SQL分解成几个简单的SQL"
DMLCheckSQLLengthMessage = "建议将过长的SQL分解成几个简单的SQL"
DMLCheckSQLLengthParams1 = "SQL最大长度"
DMLCheckSameTableJoinedMultipleTimesAnnotation = "如果对单表查询多次，会导致查询性能下降。"
DMLCheckSameTableJoinedMultipleTimesDesc = "不建议对同一张表连接多次"
DMLCheckSameTableJoinedMultipleTimesMessage = "表%v被连接多次"
DMLCheckScanRowsAnnotation = "筛选条件必须带上主键或索引可降低数据库查询的时间复杂度，提高查询效率。"
DMLCheckScanRowsDesc = "扫描行数超过阈值，请检查索引配置"
DMLCheckScanRowsMessage = "扫描行数超过阈值，请检查索引配置"
DMLCheckScanRowsParams1 = "扫描行数量（万）"
DMLCheckSelectForUpdateAnnotation = "SELECT FOR UPDATE 会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞，在高并发下，容易造成数据库大量锁等待，影响数据库查询性能"
DMLCheckSelectForUpdateDesc = "不建议使用SELECT FOR UPDATE"
DMLCheckSelectForUpdateMessage = "不建议使用SELECT FOR UPDATE"
DMLCheckSelectLimitAnnotation = "如果查询的扫描行数很大，可能会导致优化器选择错误的索引甚至不走索引；具体规则阈值可以根据业务需求调整，默认值：1000"
DMLCheckSelectLimitDesc = "SELECT 语句需要带LIMIT"
DMLCheckSelectLimitMessage = "SELECT 语句需要带LIMIT,且限制数不得超过%v"
DMLCheckSelectLimitParams1 = "最大查询行数"
DMLCheckSelectRowsAnnotation = "筛选条件必须带上主键或索引可提高查询性能和减少全表扫描的成本。"
DMLCheckSelectRowsDesc = "查询数据量超过阈值，筛选条件必须带上主键或者索引"
DMLCheckSelectRowsMessage = "查询数据量超过阈值，筛选条件必须带上主键或者索引"
DMLCheckSelectRowsParams1 = "查询数据量（万）"
DMLCheckSelectWithOrderByAnnotation = "ORDER BY 对查询性能影响较大，同时不便于优化维护，建议将排序部分放到业务处理"
DMLCheckSelectWithOrderByDesc = "SELECT 语句不能有ORDER BY"
DMLCheckSelectWithOrderByMessage = "SELECT 语句不能有ORDER BY"
DMLCheckSortColumnLengthAnnotation = "对例如VARCHAR(2000)这样的长字段进行ORDER BY、DISTINCT、GROUP BY、UNION之类的操作，会引发排序，有性能隐患"
DMLCheckSortColumnLengthDesc = "禁止对长字段排序"
DMLCheckSortColumnLengthMessage = "长度超过阈值的字段不建议用于ORDER BY、DISTINCT、GROUP BY、UNION，这些字段有：%v"
DMLCheckSortColumnLengthParams1 = "可排序字段的最大长度"
DMLCheckSortDirectionAnnotation = "在 MySQL 8.0 之前当 ORDER BY 多个列指定的排序方向不同时将无法使用已经建立的索引。在MySQL8.0 之后可以建立对应的排序顺序的联合索引来优化"
DMLCheckSortDirectionDesc = "不建议在 ORDER BY 语句中对多个不同条件使用不同方向的排序"
DMLCheckSortDirectionMessage = "不建议在 ORDER BY 语句中对多个不同条件使用不同方向的排序"
DMLCheckSpacesAroundTheStringAnnotation = "字符串前后存在空格将可能导致查询判断逻辑出错，如在MySQL 5.5中'a'和'a '在查询中被认为是相同的值"
DMLCheckSpacesAroundTheStringDesc = "引号中的字符串开头或结尾不建议包含空格"
DMLCheckSpacesAroundTheStringMessage = "引号中的字符串开头或结尾不建议包含空格"
DMLCheckSubQueryNestNumAnnotation = "子查询嵌套层数超过阈值，有些情况下，子查询并不能使用到索引。同时对于返回结果集比较大的子查询，会产生大量的临时表，消耗过多的CPU和IO资源，产生大量的慢查询"
DMLCheckSubQueryNestNumDesc = "子查询嵌套层数不建议超过阈值"
DMLCheckSubQueryNestNumMessage = "子查询嵌套层数超过阈值%v"
DMLCheckSubQueryNestNumParams1 = "子查询嵌套层数不建议超过阈值"
DMLCheckSubqueryLimitAnnotation = "部分MySQL版本不支持在子查询中进行'LIMIT & IN/ALL/ANY/SOME'"
DMLCheckSubqueryLimitDesc = "不建议在子查询中使用LIMIT"
DMLCheckSubqueryLimitMessage = "不建议在子查询中使用LIMIT"
DMLCheckTableSizeAnnotation = "DML操作大表，耗时较久且负载较高，容易影响数据库性能；具体规则阈值可以根据业务需求调整，默认值：1024"
DMLCheckTableSizeDesc = "不建议对数据量过大的表执行DML操作"
DMLCheckTableSizeMessage = "执行DML的表 %v 空间不建议超过 %vMB"
DMLCheckTableSizeParams1 = "表空间大小（MB）"
DMLCheckUpdateOrDeleteHasWhereAnnotation = "因为这些语句的目的是修改数据库中的数据，需要使用 WHERE 条件来过滤需要更新或删除的记录，以确保数据的正确性。另外，使用 WHERE 条件还可以提高查询性能。"
DMLCheckUpdateOrDeleteHasWhereDesc = "建议UPDATE/DELETE操作使用WHERE条件"
DMLCheckUpdateOrDeleteHasWhereMessage = "建议UPDATE/DELETE操作使用WHERE条件"
DMLCheckWhereExistFuncAnnotation = "对条件字段做函数操作，可能会破坏索引值的有序性，导致优化器选择放弃走索引，使查询性能大幅度降低"
DMLCheckWhereExistFuncDesc = "避免对条件字段使用函数操作"
DMLCheckWhereExistFuncMessage = "避免对条件字段使用函数操作"
DMLCheckWhereExistImplicitConversionAnnotation = "WHERE条件中使用与过滤字段不一致的数据类型会引发隐式数据类型转换，导致查询有无法命中索引的风险，在高并发、大数据量的情况下，不走索引会使得数据库的查询性能严重下降"
DMLCheckWhereExistImplicitConversionDesc = "不建议在WHERE条件中使用与过滤字段不一致的数据类型"
DMLCheckWhereExistImplicitConversionMessage = "不建议在WHERE条件中使用与过滤字段不一致的数据类型"
DMLCheckWhereExistNotAnnotation = "使用负向查询，将导致全表扫描，出现慢SQL"
DMLCheckWhereExistNotDesc = "不建议对条件字段使用负向查询"
DMLCheckWhereExistNotMessage = "不建议对条件字段使用负向查询"
DMLCheckWhereExistScalarSubqueryAnnotation = "标量子查询存在多次访问同一张表的问题，执行开销大效率低，可使用LEFT JOIN 替代标量子查询"
DMLCheckWhereExistScalarSubqueryDesc = "不建议使用标量子查询"
DMLCheckWhereExistScalarSubqueryMessage = "不建议使用标量子查询"
DMLCheckWhereIsInvalidAnnotation = "SQL缺少WHERE条件在执行时会进行全表扫描产生额外开销，建议在大数据量高并发环境下开启，避免影响数据库查询性能"
DMLCheckWhereIsInvalidDesc = "禁止使用没有WHERE条件或者WHERE条件恒为TRUE的SQL"
DMLCheckWhereIsInvalidMessage = "禁止使用没有WHERE条件或者WHERE条件恒为TRUE的SQL"
DMLCheckWithLimitAnnotation = "DELETE/UPDATE 语句使用LIMIT条件将随机选取数据进行删除或者更新，业务无法预期"
DMLCheckWithLimitDesc = "DELETE/UPDATE 语句不能有LIMIT条件"
DMLCheckWithLimitMessage = "DELETE/UPDATE 语句不能有LIMIT条件"
DMLCheckWithOrderByAnnotation = "DELETE/UPDATE 存在ORDER BY会使用排序，带来无谓的开销"
DMLCheckWithOrderByDesc = "DELETE/UPDATE 语句不能有ORDER BY"
DMLCheckWithOrderByMessage = "DELETE/UPDATE 语句不能有ORDER BY"
DMLDisableSelectAllColumnAnnotation = "当表结构变更时，使用*通配符选择所有列将导致查询行为会发生更改，与业务期望不符；同时SELECT * 中的无用字段会带来不必要的磁盘I/O，以及网络开销，且无法覆盖索引进而回表，大幅度降低查询效率"
DMLDisableSelectAllColumnDesc = "不建议使用SELECT *"
DMLDisableSelectAllColumnMessage = "不建议使用SELECT *"
DMLHintCountFuncWithColAnnotation = "建议使用COUNT(*)，因为使用 COUNT(COL) 需要对表进行全表扫描，这可能会导致性能下降。"
DMLHintCountFuncWithColDesc = "避免使用 COUNT(COL)"
DMLHintCountFuncWithColMessage = "避免使用 COUNT(COL)"
DMLHintDeleteTipsAnnotation = "DROP/TRUNCATE是DDL，操作立即生效，不会写入日志，所以无法回滚，在执行高危操作之前对数据进行备份是很有必要的"
DMLHintDeleteTipsDesc = "建议在执行DELETE/DROP/TRUNCATE等操作前进行备份"
DMLHintDeleteTipsMessage = "建议在执行DELETE/DROP/TRUNCATE等操作前进行备份"
DMLHintGroupByRequiresConditionsAnnotation = "在5.7中，MySQL默认会对’GROUP BY col1, …’按如下顺序’ORDER BY col1,…’隐式排序，导致产生无谓的排序，带来额外的开销；在8.0中，则不会出现这种情况。如果不需要排序建议显示添加’ORDER BY NULL’"
DMLHintGroupByRequiresConditionsDesc = "建议为GROUP BY语句添加ORDER BY条件"
DMLHintGroupByRequiresConditionsMessage = "建议为GROUP BY语句添加ORDER BY条件"
DMLHintInNullOnlyFalseAnnotation = "查询条件永远非真，这将导致查询无匹配到的结果"
DMLHintInNullOnlyFalseDesc = "避免使用 IN (NULL) 或者 NOT IN (NULL)"
DMLHintInNullOnlyFalseMessage = "避免使用IN (NULL)/NOT IN (NULL) ，该用法永远非真将导致条件失效"
DMLHintLimitMustBeCombinedWithOrderByAnnotation = "没有ORDER BY的LIMIT会导致非确定性的结果可能与业务需求不符，这取决于执行计划"
DMLHintLimitMustBeCombinedWithOrderByDesc = "LIMIT 查询建议使用ORDER BY"
DMLHintLimitMustBeCombinedWithOrderByMessage = "LIMIT 查询建议使用ORDER BY"
DMLHintSumFuncTipsAnnotation = "当某一列的值全是NULL时，COUNT(COL)的返回结果为0，但SUM(COL)的返回结果为NULL，因此使用SUM()时需注意NPE问题（指数据返回NULL）；如业务需避免NPE问题，建议开启此规则"
DMLHintSumFuncTipsDesc = "避免使用 SUM(COL)"
DMLHintSumFuncTipsMessage = "避免使用 SUM(COL) ，该用法存在返回NULL值导致程序空指针的风险"
DMLHintTruncateTipsAnnotation = "TRUNCATE是DLL，数据不能回滚，在没有备份情况下，谨慎使用TRUNCATE"
DMLHintTruncateTipsDesc = "不建议使用TRUNCATE操作"
DMLHintTruncateTipsMessage = "不建议使用TRUNCATE操作"
DMLHintUseTruncateInsteadOfDeleteAnnotation = "TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，同时TRUNCATE后表所占用的空间会被释放，而DELETE后需要手工执行OPTIMIZE才能释放表空间"
DMLHintUseTruncateInsteadOfDeleteDesc = "删除全表时建议使用 TRUNCATE 替代 DELETE"
DMLHintUseTruncateInsteadOfDeleteMessage = "删除全表时建议使用 TRUNCATE 替代 DELETE"
DMLMustMatchLeftMostPrefixAnnotation = "对联合索引左侧字段进行IN 、OR等非等值查询会导致联合索引失效"
DMLMustMatchLeftMostPrefixDesc = "禁止对联合索引左侧字段进行IN 、OR等非等值查询"
DMLMustMatchLeftMostPrefixMessage = "对联合索引左侧字段进行IN 、OR等非等值查询会导致联合索引失效"
DMLMustUseLeftMostPrefixAnnotation = "使用联合索引时，不包含首字段会导致联合索引失效"
DMLMustUseLeftMostPrefixDesc = "使用联合索引时，必须使用联合索引的首字段"
DMLMustUseLeftMostPrefixMessage = "使用联合索引时，必须使用联合索引的首字段"
DMLNotAllowInsertAutoincrementAnnotation = "手动赋值可能会造成数据空洞，主键冲突"
DMLNotAllowInsertAutoincrementDesc = "禁止手动设置自增字段值"
DMLNotAllowInsertAutoincrementMessage = "禁止手动设置自增字段值"
DMLNotRecommendFuncInWhereAnnotation = "函数或运算符会导致查询无法利用表中的索引，该查询将会全表扫描，性能较差"
DMLNotRecommendFuncInWhereDesc = "应避免在 WHERE 条件中使用函数或其他运算符"
DMLNotRecommendFuncInWhereMessage = "应避免在 WHERE 条件中使用函数或其他运算符"
DMLNotRecommendGroupByConstantAnnotation = "GROUP BY 1 表示按第一列进行GROUP BY；在GROUP BY子句中使用数字，而不是表达式或列名称，当查询列顺序改变时，会导致查询逻辑出现问题"
DMLNotRecommendGroupByConstantDesc = "不建议对常量进行 GROUP BY"
DMLNotRecommendGroupByConstantMessage = "不建议对常量进行 GROUP BY"
DMLNotRecommendGroupByExpressionAnnotation = "当ORDER BY条件为表达式或函数时会使用到临时表，如果在未指定WHERE或WHERE条件返回的结果集较大时性能会很差"
DMLNotRecommendGroupByExpressionDesc = "不建议ORDER BY 的条件为表达式"
DMLNotRecommendGroupByExpressionMessage = "不建议ORDER BY 的条件为表达式"
DMLNotRecommendHavingAnnotation = "对于索引字段，放在HAVING子句中时不会走索引；建议将HAVING子句改写为WHERE中的查询条件，可以在查询处理期间使用索引，提高SQL的执行效率"
DMLNotRecommendHavingDesc = "不建议使用 HAVING 子句"
DMLNotRecommendHavingMessage = "不建议使用 HAVING 子句"
DMLNotRecommendInAnnotation = "当IN值过多时，有可能会导致查询进行全表扫描，使得MySQL性能急剧下降"
DMLNotRecommendInDesc = "不建议使用IN"
DMLNotRecommendInMessage = "不建议使用IN"
DMLNotRecommendNotWildcardLikeAnnotation = "不包含通配符的 LIKE 查询逻辑上与等值查询相同，建议使用等值查询替代"
DMLNotRecommendNotWildcardLikeDesc = "不建议使用没有通配符的 LIKE 查询"
DMLNotRecommendNotWildcardLikeMessage = "不建议使用没有通配符的 LIKE 查询"
DMLNotRecommendOrderByRandAnnotation = "ORDER BY RAND()使用了临时表，同时还要对其进行排序，在数据量很大的情况下会增加服务器负载以及增加查询时间"
DMLNotRecommendOrderByRandDesc = "不建议使用 ORDER BY RAND()"
DMLNotRecommendOrderByRandMessage = "不建议使用 ORDER BY RAND()"
DMLNotRecommendSubqueryAnnotation = "有些情况下，子查询并不能使用到索引，同时对于返回结果集比较大的子查询，会产生大量的临时表，消耗过多的CPU和IO资源，产生大量的慢查询"
DMLNotRecommendSubqueryDesc = "不推荐使用子查询"
DMLNotRecommendSubqueryMessage = "不推荐使用子查询"
DMLNotRecommendSysdateAnnotation = "当SYSDATE()函数在基于STATEMENT模式的主从环境下可能造成数据的不一致，因为语句在主库中执行到日志传递到备库，存在时间差，到备库执行的时候就会变成不同的时间值，建议采取ROW模式的复制环境"
DMLNotRecommendSysdateDesc = "不建议使用 SYSDATE() 函数"
DMLNotRecommendSysdateMessage = "不建议使用 SYSDATE() 函数"
DMLNotRecommendUpdatePKAnnotation = "主键索引数据列的顺序就是表记录的物理存储顺序，频繁更新主键将导致整个表记录的顺序的调整，会耗费相当大的资源"
DMLNotRecommendUpdatePKDesc = "不建议UPDATE主键"
DMLNotRecommendUpdatePKMessage = "不建议UPDATE主键"
DMLSQLExplainLowestLevelAnnotation = "验证 SQL 执行计划中的 type 字段，确保满足要求级别，以保证查询性能。"
DMLSQLExplainLowestLevelDesc = "SQL执行计划中type字段建议满足规定的级别"
DMLSQLExplainLowestLevelMessage = "建议修改SQL，确保执行计划中type字段可以满足规定中的任一等级：%v"
DMLSQLExplainLowestLevelParams1 = "查询计划type等级，以英文逗号隔开"
DMLWhereExistNullAnnotation = "使用 IS NULL 或 IS NOT NULL 可能导致查询放弃使用索引而进行全表扫描"
DMLWhereExistNullDesc = "不建议对条件字段使用 NULL 值判断"
DMLWhereExistNullMessage = "不建议对条件字段使用 NULL 值判断"
DuplicateColumnsMessage = "字段名 %s 重复"
DuplicateIndexedColumnMessage = "索引 %s 字段 %s重复"
DuplicateIndexesMessage = "索引名 %s 重复"
DuplicatePrimaryKeyedColumnMessage = "主键字段 %s 重复"
ExtremalIndexAdviceFormat = "索引建议 | SQL使用了最值函数，可以利用索引有序的性质快速找到最值，建议对表%s添加单列索引，参考列：%s"
FunctionIndexAdviceFormatAll = "索引建议 | SQL使用了函数作为查询条件，在MySQL5.7以上的版本，可以在虚拟列上创建索引，在MySQL8.0.13以上的版本，可以创建函数索引，建议根据MySQL版本对表%s添加合适的索引，参考列：%s"
FunctionIndexAdviceFormatV57 = "索引建议 | SQL使用了函数作为查询条件，在MySQL5.7以上的版本，可以在虚拟列上创建索引，建议对表%s添加虚拟列索引，参考列：%s"
FunctionIndexAdviceFormatV80 = "索引建议 | SQL使用了函数作为查询条件，在MySQL8.0.13以上的版本，可以创建函数索引，建议对表%s添加函数索引，参考列：%s"
GhostDryRunError = "表空间大小超过%vMB, 将使用gh-ost进行上线, 但是dry-run抛出如下错误: %v"
GhostDryRunNotice = "表空间大小超过%vMB, 将使用gh-ost进行上线"
IndexExistMessage = "索引 %s 已存在"
IndexNotExistMessage = "索引 %s 不存在"
JoinIndexAdviceFormat = "索引建议 | SQL中字段%s为被驱动表%s上的关联字段，建议对表%s添加单列索引，参考列：%s"
KeyedColumnNotExistMessage = "索引字段 %s 不存在"
MultiPrimaryKeyMessage = "主键只能设置一个"
NotSupportExceedMaxRowsRollback = "预计影响行数超过配置的最大值，不生成回滚语句"
NotSupportHasVariableRollback = "不支持回滚包含变量的 DML 语句"
NotSupportInsertWithoutPrimaryKeyRollback = "不支持回滚 INSERT 没有指定主键的语句"
NotSupportMultiTableStatementRollback = "暂不支持回滚多表的 DML 语句"
NotSupportNoPrimaryKeyTableRollback = "不支持回滚没有主键的表的DML语句"
NotSupportOnDuplicatStatementRollback = "暂不支持回滚 ON DUPLICATE 语句"
NotSupportParamMarkerStatementRollback = "不支持回滚包含指纹的语句"
NotSupportStatementRollback = "暂不支持回滚该类型的语句"
NotSupportSubQueryStatementRollback = "暂不支持回滚带子查询的语句"
OptDMLCheckLimitOffsetNumAnnotation = "使用LIMIT和OFFSET子句可以分别控制查询结果的数量和指定从哪一行开始返回数据。但是，当OFFSET值较大时，查询效率会降低，因为系统必须扫描更多数据才能找到起始行，这在大数据集中尤其会导致性能问题和资源消耗。"
OptDMLCheckLimitOffsetNumDesc = "OFFSET的值超过阈值"
OptDMLCheckMathComputationOrFuncOnIndexAnnotation = "在索引列上的运算将导致索引失效，容易造成全表扫描，产生严重的性能问题。所以需要尽量将索引列上的运算转换到常量端进行。"
OptDMLCheckMathComputationOrFuncOnIndexDesc = "索引列上的运算导致索引失效"
OptDMLCheckNotEqualSymbolAnnotation = "'!=' 是非标准的运算符，'<>' 才是SQL中标准的不等于运算符"
OptDMLCheckNotEqualSymbolDesc = "建议使用'<>'代替'!='"
OptDMLCheckWhereExistImplicitConversionAnnotation = "WHERE条件中使用与过滤字段不一致的数据类型会引发隐式数据类型转换，导致查询有无法命中索引的风险，在高并发、大数据量的情况下，不走索引会使得数据库的查询性能严重下降"
OptDMLCheckWhereExistImplicitConversionDesc = "隐式类型转换导致索引失效"
OptDMLCheckWhereExistScalarSubqueryAnnotation = "对于使用COUNT标量子查询来进行判断是否存在，可以重写为EXISTS子查询，从而避免一次聚集运算。"
OptDMLCheckWhereExistScalarSubqueryDesc = "COUNT标量子查询重写"
OptDMLHintGroupByRequiresConditionsAnnotation = "在早期版本的MySQL中，GROUP BY 默认进行排序，可通过添加 ORDER BY NULL 来取消此排序，提高查询效率。"
OptDMLHintGroupByRequiresConditionsDesc = "为GROUP BY显示添加 ORDER BY 条件(<MYSQL 5.7)"
OptDMLHintInNullOnlyFalseAnnotation = "查询条件永远非真，这将导致查询无匹配到的结果"
OptDMLHintInNullOnlyFalseDesc = "IN可空子查询可能导致结果集不符合预期"
OptDMLHintUseTruncateInsteadOfDeleteAnnotation = "TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，同时TRUNCATE后表所占用的空间会被释放，而DELETE后需要手工执行OPTIMIZE才能释放表空间"
OptDMLHintUseTruncateInsteadOfDeleteDesc = "无条件的DELETE建议重写为Truncate"
OptDMLNotRecommendHavingAnnotation = "从逻辑上，HAVING条件是在分组之后执行的，而WHERE子句上的条件可以在表访问的时候（索引访问）,或是表访问之后、分组之前执行，这两种条件都比在分组之后执行代价要小。"
OptDMLNotRecommendHavingDesc = "HAVING条件下推"
OptDMLNotRecommendInAnnotation = "IN子查询是指符合下面形式的子查询，IN子查询可以改写成等价的相关EXISTS子查询或是内连接，从而可以产生一个新的过滤条件。"
OptDMLNotRecommendInDesc = "IN子查询优化"
OptDMLNotRecommendNotWildcardLikeAnnotation = "不包含通配符的LIKE 查询逻辑上与等值查询相同，建议使用等值查询替代。而且不包含通配符的LIKE 查询逻辑通常是由于开发者错误导致的，可能不符合其期望的业务逻辑实现"
OptDMLNotRecommendNotWildcardLikeDesc = "避免使用没有通配符的 LIKE 查询"
OptDMLRuleAllSubqueryRewriteAnnotation = "如果ALL子查询的结果中存在NULL，这个SQL永远返回为空。正确的写法应该是在子查询里加上非空限制，或使用max/min的写法。"
OptDMLRuleAllSubqueryRewriteDesc = "ALL修饰的子查询重写"
OptDMLRuleDiffOrderingSpecTypeWarningAnnotation = "ORDER BY 子句中的所有表达式需要按统一的 ASC 或 DESC 方向排序，才能利用索引来避免排序；如果ORDER BY 语句对多个不同条件使用不同方向的排序无法使用索引"
OptDMLRuleDiffOrderingSpecTypeWarningDesc = "排序字段方向不同导致索引失效"
OptDMLRuleDistinctEliminationRewriteAnnotation = "对于仅进行存在性测试的子查询,如果子查询包含DISTINCT通常可以删除,以避免一次去重操作。"
OptDMLRuleDistinctEliminationRewriteDesc = "子查询中的DISTINCT消除"
OptDMLRuleExists2JoinRewriteAnnotation = "EXISTS子查询可以在适当情况下转换为JOIN来优化查询，提高数据库处理效率和性能。"
OptDMLRuleExists2JoinRewriteDesc = "EXISTS查询转换为表连接"
OptDMLRuleFilterPredicatePushDownRewriteAnnotation = "滤条件下推（FPPD）是一种通过将过滤条件提前应用于内部查询块，以减少数据处理量并提升SQL执行效率。"
OptDMLRuleFilterPredicatePushDownRewriteDesc = "过滤谓词下推"
OptDMLRuleGroupingFromDiffTablesRewriteAnnotation = "如果分组字段来自不同的表，数据库优化器将没有办法利用索引的有序性来避免一次排序，如果存在等值条件，可以替换这些字段为来自同一张表的字段，以利用索引优化排序和提高查询效率。"
OptDMLRuleGroupingFromDiffTablesRewriteDesc = "GROUPBY字段来自不同表"
OptDMLRuleJoinEliminationRewriteAnnotation = "在不影响结果的情况下通过删除不必要的表连接来简化查询并提升性能，适用于查询仅涉及到主表主键列的场景。"
OptDMLRuleJoinEliminationRewriteDesc = "表连接消除"
OptDMLRuleLimitClausePushDownRewriteAnnotation = "Limit子句下推优化通过尽可能的 “下压” Limit子句，提前过滤掉部分数据, 减少中间结果集的大小，减少后续计算需要处理的数据量, 以提高查询性能。"
OptDMLRuleLimitClausePushDownRewriteDesc = "LIMIT下推至UNION分支"
OptDMLRuleLimitClausePushDownRewriteParams1 = "OFFSET最大阈值"
OptDMLRuleMaxMinAggRewriteAnnotation = "对于使用MAX/MIN的子查询，可以通过重写从而利用索引的有序来避免一次聚集运算。"
OptDMLRuleMaxMinAggRewriteDesc = "MAX/MIN子查询重写"
OptDMLRuleMoveOrder2LeadingRewriteAnnotation = "如果一个查询中既包含来自同一个表的排序字段也包含分组字段，但字段顺序不同，可以通过调整分组字段顺序，使其和排序字段顺序一致，这样数据库可以避免一次排序操作。"
OptDMLRuleMoveOrder2LeadingRewriteDesc = "ORDER子句重排序优化"
OptDMLRuleNPERewriteAnnotation = "SQL的NPE(Null Pointer Exception)问题是指在SQL查询中,当聚合列全为NULL时,SUM、AVG等聚合函数会返回NULL,这可能会导致后续的程序出现空指针异常。"
OptDMLRuleNPERewriteDesc = "NPE重写"
OptDMLRuleOrCond4SelectRewriteAnnotation = "如果使用OR条件的查询语句，数据库优化器有可能无法使用索引来完成查询，可以把查询语句重写为UNION或UNION ALL查询，以便使用索引提升查询性能。"
OptDMLRuleOrCond4SelectRewriteDesc = "OR条件的SELECT重写"
OptDMLRuleOrCond4UpDeleteRewriteAnnotation = "如果有使用OR条件的UPDATE或DELETE语句，数据库优化器有可能无法使用索引来完成操作，可以把它重写为多个DELETE语句，利用索引提升查询性能。"
OptDMLRuleOrCond4UpDeleteRewriteDesc = "OR条件的UPDELETE重写"
OptDMLRuleOrderEliminationInSubqueryRewriteAnnotation = "如果子查询没有LIMIT子句，那么子查询的排序操作就没有意义，可以将其删除而不影响最终的结果。"
OptDMLRuleOrderEliminationInSubqueryRewriteDesc = "IN子查询中没有LIMIT的排序消除"
OptDMLRuleOrderingFromDiffTablesRewriteAnnotation = "当排序字段来自不同表时，若存在等值条件，可替换这些字段为来自同一张表的字段，利用索引避免额外排序，提升效率。"
OptDMLRuleOrderingFromDiffTablesRewriteDesc = "避免ORDERBY字段来自不同表"
OptDMLRuleOuter2InnerConversionRewriteAnnotation = "外连接优化指的是满足一定条件（外表具有NULL拒绝条件）的外连接可以转化为内连接，从而可以让数据库优化器可以选择更优的执行计划，提升SQL查询的性能。"
OptDMLRuleOuter2InnerConversionRewriteDesc = "外连接优化"
OptDMLRuleProjectionPushdownRewriteAnnotation = "投影下推指的通过删除DT子查询中无意义的列（在外查询中没有使用），来减少IO和网络的代价，同时提升优化器在进行表访问的规划时，采用无需回表的优化选项的几率。"
OptDMLRuleProjectionPushdownRewriteDesc = "投影下推(PROJECTION PUSHDOWN)"
OptDMLRuleQualifierSubQueryRewriteAnnotation = "ANY/SOME/ALL修饰的子查询用于比较值关系，但效率低下因为它们逐行处理比较。通过查询重写可以提升这类子查询的执行效率。"
OptDMLRuleQualifierSubQueryRewriteDesc = "修饰子查询重写优化"
OptDMLRuleQueryFoldingRewriteAnnotation = "查询折叠指的是把视图、CTE或是DT子查询展开，并与引用它的查询语句合并，来减少序列化中间结果集，或是触发更优的关于表连接规划的优化技术。"
OptDMLRuleQueryFoldingRewriteDesc = "查询折叠(QUERY FOLDING)"
OptDMLRuleSATTCRewriteAnnotation = "SAT-TC重写优化通过分析和处理查询条件的逻辑关系，以发现矛盾、简化条件或推断新条件，从而帮助数据库优化器制定更高效的执行计划，提升SQL性能。"
OptDMLRuleSATTCRewriteDesc = "SATTC重写优化"
OptDMLWhereExistNullAnnotation = "= null并不能判断表达式为空,= null总是被判断为假。判断表达式为空应该使用is null。"
OptDMLWhereExistNullDesc = "禁止使用=NULL判断空值"
OptOracle500Annotation = "SQL的NPE(Null Pointer Exception)问题是指在SQL查询中,当聚合列全为NULL时,SUM、AVG等聚合函数会返回NULL,这可能会导致后续的程序出现空指针异常。"
OptOracle500Desc = "NPE重写"
OptOracle501Annotation = "如果ALL子查询的结果中存在NULL，这个SQL永远返回为空。正确的写法应该是在子查询里加上非空限制，或使用max/min的写法。"
OptOracle501Desc = "ALL修饰的子查询重写"
OptOracle502Annotation = "对于使用COUNT标量子查询来进行判断是否存在，可以重写为EXISTS子查询，从而避免一次聚集运算。"
OptOracle502Desc = "COUNT标量子查询重写"
OptOracle503Annotation = "TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，同时TRUNCATE后表所占用的空间会被释放，而DELETE后需要手工执行OPTIMIZE才能释放表空间"
OptOracle503Desc = "无条件的DELETE建议重写为Truncate"
OptOracle504Annotation = "WHERE条件中使用与过滤字段不一致的数据类型会引发隐式数据类型转换，导致查询有无法命中索引的风险，在高并发、大数据量的情况下，不走索引会使得数据库的查询性能严重下降"
OptOracle504Desc = "隐式类型转换导致索引失效"
OptOracle505Annotation = "ORDER BY 子句中的所有表达式需要按统一的 ASC 或 DESC 方向排序，才能利用索引来避免排序；如果ORDER BY 语句对多个不同条件使用不同方向的排序无法使用索引"
OptOracle505Desc = "排序字段方向不同导致索引失效"
OptOracle506Annotation = "在索引列上的运算将导致索引失效，容易造成全表扫描，产生严重的性能问题。所以需要尽量将索引列上的运算转换到常量端进行。"
OptOracle506Desc = "索引列上的运算导致索引失效"
OptOracle507Annotation = "从逻辑上，HAVING条件是在分组之后执行的，而WHERE子句上的条件可以在表访问的时候（索引访问）,或是表访问之后、分组之前执行，这两种条件都比在分组之后执行代价要小。"
OptOracle507Desc = "HAVING条件下推"
OptOracle508Annotation = "= null并不能判断表达式为空,= null总是被判断为假。判断表达式为空应该使用is null。"
OptOracle508Desc = "禁止使用=NULL判断空值"
OptOracle509Annotation = "IN子查询是指符合下面形式的子查询，IN子查询可以改写成等价的相关EXISTS子查询或是内连接，从而可以产生一个新的过滤条件。"
OptOracle509Desc = "IN子查询优化"
OptOracle510Annotation = "查询条件永远非真，这将导致查询无匹配到的结果"
OptOracle510Desc = "IN可空子查询可能导致结果集不符合预期"
OptOracle511Annotation = "不包含通配符的LIKE 查询逻辑上与等值查询相同，建议使用等值查询替代。而且不包含通配符的LIKE 查询逻辑通常是由于开发者错误导致的，可能不符合其期望的业务逻辑实现"
OptOracle511Desc = "避免使用没有通配符的 LIKE 查询"
OptOracle512Annotation = "'!=' 是非标准的运算符，'<>' 才是SQL中标准的不等于运算符"
OptOracle512Desc = "建议使用'<>'代替'!='"
OptOracle513Annotation = "对于仅进行存在性测试的子查询,如果子查询包含DISTINCT通常可以删除,以避免一次去重操作。"
OptOracle513Desc = "子查询中的DISTINCT消除"
OptOracle514Annotation = "EXISTS子查询可以在适当情况下转换为JOIN来优化查询，提高数据库处理效率和性能。"
OptOracle514Desc = "EXISTS查询转换为表连接"
OptOracle515Annotation = "滤条件下推（FPPD）是一种通过将过滤条件提前应用于内部查询块，以减少数据处理量并提升SQL执行效率。"
OptOracle515Desc = "过滤谓词下推"
OptOracle516Annotation = "如果分组字段来自不同的表，数据库优化器将没有办法利用索引的有序性来避免一次排序，如果存在等值条件，可以替换这些字段为来自同一张表的字段，以利用索引优化排序和提高查询效率。"
OptOracle516Desc = "GROUPBY字段来自不同表"
OptOracle517Annotation = "在不影响结果的情况下通过删除不必要的表连接来简化查询并提升性能，适用于查询仅涉及到主表主键列的场景。"
OptOracle517Desc = "表连接消除"
OptOracle518Annotation = "对于使用MAX/MIN的子查询，可以通过重写从而利用索引的有序来避免一次聚集运算。"
OptOracle518Desc = "MAX/MIN子查询重写"
OptOracle519Annotation = "如果一个查询中既包含来自同一个表的排序字段也包含分组字段，但字段顺序不同，可以通过调整分组字段顺序，使其和排序字段顺序一致，这样数据库可以避免一次排序操作。"
OptOracle519Desc = "ORDER子句重排序优化"
OptOracle520Annotation = "如果使用OR条件的查询语句，数据库优化器有可能无法使用索引来完成查询，可以把查询语句重写为UNION或UNION ALL查询，以便使用索引提升查询性能。"
OptOracle520Desc = "OR条件的SELECT重写"
OptOracle521Annotation = "如果有使用OR条件的UPDATE或DELETE语句，数据库优化器有可能无法使用索引来完成操作，可以把它重写为多个DELETE语句，利用索引提升查询性能。"
OptOracle521Desc = "OR条件的UPDELETE重写"
OptOracle522Annotation = "当排序字段来自不同表时，若存在等值条件，可替换这些字段为来自同一张表的字段，利用索引避免额外排序，提升效率。"
OptOracle522Desc = "避免ORDERBY字段来自不同表"
OptOracle523Annotation = "外连接优化指的是满足一定条件（外表具有NULL拒绝条件）的外连接可以转化为内连接，从而可以让数据库优化器可以选择更优的执行计划，提升SQL查询的性能。"
OptOracle523Desc = "外连接优化"
OptOracle524Annotation = "投影下推指的通过删除DT子查询中无意义的列（在外查询中没有使用），来减少IO和网络的代价，同时提升优化器在进行表访问的规划时，采用无需回表的优化选项的几率。"
OptOracle524Desc = "投影下推(PROJECTION PUSHDOWN)"
OptOracle525Annotation = "ANY/SOME/ALL修饰的子查询用于比较值关系，但效率低下因为它们逐行处理比较。通过查询重写可以提升这类子查询的执行效率。"
OptOracle525Desc = "修饰子查询重写优化"
OptOracle526Annotation = "查询折叠指的是把视图、CTE或是DT子查询展开，并与引用它的查询语句合并，来减少序列化中间结果集，或是触发更优的关于表连接规划的优化技术。"
OptOracle526Desc = "查询折叠(QUERY FOLDING)"
OptOracle527Annotation = "SAT-TC重写优化通过分析和处理查询条件的逻辑关系，以发现矛盾、简化条件或推断新条件，从而帮助数据库优化器制定更高效的执行计划，提升SQL性能。"
OptOracle527Desc = "SATTC重写优化"
PTOSCAvoidNoDefaultValueOnNotNullColumn = "[osc]非空字段必须设置默认值，不然 pt-online-schema-change 会执行失败"
PTOSCAvoidRenameTable = "[osc]pt-online-schema-change 不支持使用rename table 来重命名表"
PTOSCAvoidUniqueIndex = "[osc]添加唯一键使用 pt-online-schema-change，可能会导致数据丢失，在数据迁移到新表时使用了insert ignore"
PTOSCNoUniqueIndexOrPrimaryKey = "[osc]至少要包含主键或者唯一键索引才能使用 pt-online-schema-change"
ParseDDLError = "解析建表语句失败，部分在线审核规则可能失效，请人工确认"
PrefixIndexAdviceFormat = "索引建议 | SQL使用了前模糊匹配，数据量大时，可建立翻转函数索引"
PrimaryKeyExistMessage = "已经存在主键，不能再添加"
PrimaryKeyNotExistMessage = "当前没有主键，不能执行删除"
Rule00001Annotation = "使用有效的WHERE条件能够避免全表扫描，提高SQL执行效率；而恒为TRUE的WHERE条件，如where 1=1、where true=true等，在执行时会进行全表扫描产生额外开销。"
Rule00001Desc = "禁止SQL语句不带WHERE条件或者WHERE条件为永真"
Rule00001Message = "禁止SQL语句不带WHERE条件或者WHERE条件为永真"
Rule00002Annotation = "过度使用绑定变量会增加查询的复杂度，从而降低查询性能。同时还会增加维护成本。SQLE设置MySQL绑定变量个数最大阈值：100"
Rule00002Desc = "SQL绑定的变量个数不建议超过阈值"
Rule00002Message = "SQL绑定的变量个数不建议超过阈值"
Rule00002Params1 = "绑定变量阈值"
Rule00003Annotation = "在MySQL中，NULL值表示的含义为missing unknown value，在不同的场景下MySQL存在不同的处理方式；当字段内容存在NULL值时，处理结果可能存在异常"
Rule00003Desc = "建议为组成索引的字段添加非空约束，并配置合理的default值"
Rule00003Message = "建议为组成索引的字段添加非空约束，并配置合理的default值"
Rule00004Annotation = "创建表时AUTO_INCREMENT设置为0则自增从1开始，可以避免数据空洞。例如在导出表结构DDL时，表结构内AUTO_INCREMENT通常为当前的自增值，如果建表时没有把AUTO_INCREMENT设置为0，那么通过该DDL进行建表操作会导致自增值从一个无意义数字开始。"
Rule00004Desc = "建议表的自增字段起始值为0"
Rule00004Message = "建议表的自增字段起始值为0"
Rule00005Annotation = "在设计复合索引过程中，每增加一个索引字段，都会使索引的大小线性增加，从而占用更多的磁盘空间，且增加索引维护的开销。尤其是在数据频繁变动的环境中，这会显著增加数据库的维护压力。"
Rule00005Desc = "避免复合索引中包含过多字段"
Rule00005Message = "避免复合索引中包含过多字段"
Rule00005Params1 = "复合索引内字段个数"
Rule00007Annotation = "多个自增字段会造成表写入性能影响、可读性差、数据库设计不规范等缺点。"
Rule00007Desc = "建表时，自增字段只能设置一个"
Rule00007Message = "建表时，自增字段只能设置一个"
Rule00008Annotation = "表必须存在主键。如果表没有明确指定主键，可能会导致一些问题，如数据一致性难以保证、查询性能下降、数据完整性问题、数据管理和维护困难以及数据库优化受限等。"
Rule00008Desc = "表里必须存在主键"
Rule00008Message = "表里必须存在主键"
Rule00009Annotation = "对条件字段做函数操作，可能会破坏索引值的有序性，导致优化器选择放弃走索引，使查询性能大幅度降低"
Rule00009Desc = "避免对条件字段使用函数操作"
Rule00009Message = "避免对条件字段使用函数操作"
Rule00010Annotation = "在MySQL中删除已有主键代价高昂，极易引起业务阻塞、故障；开启该规则，SQLE将提醒删除主键为高危操作"
Rule00010Desc = "禁止进行删除主键的操作"
Rule00010Message = "禁止进行删除主键的操作"
Rule00011Annotation = "避免对同一个表使用多条单独的ALTER语句，以减少数据库的锁定时间和执行开销，提高SQL语句的可读性和维护性。"
Rule00011Desc = "存在多条对同一个表的修改语句，建议合并成一个ALTER语句"
Rule00011Message = "存在多条对同一个表的修改语句，建议合并成一个ALTER语句"
Rule00012Annotation = "在MySQL中，对于金额等需要高精度计算的小数，建议使用BIGINT类型表示，以避免浮点数精度问题。例如，可以用分来表示金额，1元在数据库中用整型表示为100。"
Rule00012Desc = "建议使用BIGINT类型表示小数"
Rule00012Message = "建议使用BIGINT类型表示小数"
Rule00013Annotation = "对于浮点数运算，DECIMAL精确度较高"
Rule00013Desc = "精确浮点数建议使用DECIMAL"
Rule00013Message = "精确浮点数建议使用DECIMAL. 不符合规定的字段: %v"
Rule00014Annotation = "自定义函数和存储过程维护较困难，且依赖性高，可能导致SQL无法跨库使用。此外，它们在使用时存在一些限制，如无法使用事务相关语句、无法直接产生输出的语句，以及无法在函数体内使用USE语句指定数据库。"
Rule00014Desc = "不建议使用自定义函数"
Rule00014Message = "不建议使用自定义函数"
Rule00015Annotation = "建议库内使用一致的数据库排序规则，以确保查询性能和索引有效性，避免因排序规则不一致导致的全表扫描和数据一致性问题。"
Rule00015Desc = "避免库内出现多种数据库排序规则"
Rule00015Message = "避免库内出现多种数据库排序规则"
Rule00016Annotation = "在MySQL中，存储大数据类型的内容常用BLOB和TEXT、GEOMETRY以及JSON类型，但它们无法指定默认值；写入数据时，如未对该字段指定值会导致写入失败。"
Rule00016Desc = "存储大数据类型（如长文本、图片等）的字段只能设置为NULL"
Rule00016Message = "存储大数据类型（如长文本、图片等）的字段只能设置为NULL"
Rule00016_1Annotation = "BLOB 和 TEXT 类型的字段无法指定默认值，如插入数据不指定字段默认为NULL，如果添加了 NOT NULL 限制，写入数据时又未对该字段指定值会导致写入失败"
Rule00016_1Desc = "BLOB 和 TEXT 类型的字段不建议设置为 NOT NULL"
Rule00016_1Message = "BLOB 和 TEXT 类型的字段不建议设置为 NOT NULL. 不符合规定的字段: %v"
Rule00017Annotation = "BLOB 或 TEXT 类型消耗大量的网络和IO带宽，同时在该表上的DML操作都会变得很慢"
Rule00017Desc = "不建议使用 BLOB 或 TEXT 类型"
Rule00017Message = "不建议使用 BLOB 或 TEXT 类型. 不符合规定的字段: %v"
Rule00018Annotation = "VARCHAR是变长字段，存储空间小，可节省存储空间，同时相对较小的字段检索效率显然也要高些"
Rule00018Desc = "CHAR长度大于20时，建议使用VARCHAR类型"
Rule00018Message = "CHAR长度大于20时，建议使用VARCHAR类型"
Rule00018Params1 = "CHAR最大长度"
Rule00019Annotation = "SET类型，ENUM类型不是SQL标准，移植性较差；后期如修改或增加枚举值需重建整张表，代价较大；且无法通过字面值进行排序；在插入数据时，必须带上引号，否则将写入枚举值的顺序值，造成不可预期的问题"
Rule00019Desc = "不建议使用复合类型（SET和ENUM类型）数据"
Rule00019Message = "不建议使用复合类型（SET和ENUM类型）数据"
Rule00020Annotation = "数据库表中字段过多会导致数据操作效率降低、数据完整性检查成本增加，以及索引维护与更新效率之间的权衡成本。对于追求事务响应和处理速度的OLTP系统，应尽量避免宽表设计，采用规范化数据模型以提升性能。"
Rule00020Desc = "避免表中包含有太多的列"
Rule00020Message = "避免表中包含有太多的列"
Rule00020Params1 = "表内列数上限"
Rule00021Annotation = "若数据库表字段缺少NOT NULL约束，则字段存储值可能是NULL，后期判断时，需要加上IS NULL判断，增加SQL编写的复杂度。"
Rule00021Desc = "禁止表字段缺少NOT NULL约束"
Rule00021Message = "禁止表字段缺少NOT NULL约束"
Rule00022Annotation = "避免在OLTP系统上做宽表设计，后期对性能影响很大；具体规则阈值可根据业务需求调整，默认值：40"
Rule00022Desc = "表的列数不建议超过阈值"
Rule00022Message = "表的列数不建议超过阈值. 阈值: %v"
Rule00022Params1 = "最大列数"
Rule00023Annotation = "主建中的列过多，会导致二级索引占用更多的空间，同时增加索引维护的开销；具体规则阈值可根据业务需求调整，默认值：2"
Rule00023Desc = "主键包含的列数不建议超过阈值"
Rule00023Message = "主键包含的列数不建议超过阈值. 阈值: %v"
Rule00023Params1 = "最大列数"
Rule00024Annotation = "集合的修改需要重新定义列，后期修改的代价大，建议在业务层实现"
Rule00024Desc = "不建议使用 SET 类型"
Rule00024Message = "不建议使用 SET 类型. 不符合规定的字段: %v"
Rule00025Annotation = "TIMESTAMP 类型的列添加默认值，可避免出现全为0的日期格式与业务预期不符"
Rule00025Desc = "TIMESTAMP 类型的列必须添加默认值"
Rule00025Message = "TIMESTAMP 类型的列必须添加默认值. 不符合规定的字段: %v"
Rule00026Annotation = "在表结构定义中，整数字段定义指定了最大显示宽度，可以体现业务对该字段的数据存储预期；同时保持了字段定义的一致性，减少在数据库之间迁移时需要修改字段长度的工作量。"
Rule00026Desc = "整数字段建议指定最大显示宽度"
Rule00026Message = "整数字段建议指定最大显示宽度"
Rule00027Annotation = "MySQL列添加注释能够使列的意义更明确，方便日后的维护。"
Rule00027Desc = "列定义建议加注释"
Rule00027Message = "列定义建议加注释. 不符合规定的字段: %v"
Rule00028Annotation = "列添加默认值，可避免列为NULL值时对查询的影响"
Rule00028Desc = "除了自增列和blob/text类型的列, 每个列都必须添加默认值"
Rule00028Message = "除了自增列和blob/text类型的列, 每个列都必须添加默认值. 不符合规定的字段: %v"
Rule00029Annotation = "存储过程在一定程度上能使程序难以调试和拓展，各种数据库端的存储过程语法相差很大，给将来的数据移植带来很大的困难，且会极大的出现BUG的几率"
Rule00029Desc = "禁止使用存储过程"
Rule00029Message = "禁止使用存储过程"
Rule00030Annotation = "触发器难以开发和维护，不能高效移植，且在复杂的逻辑以及高并发下，容易出现死锁影响业务。"
Rule00030Desc = "禁止使用触发器"
Rule00030Message = "禁止使用触发器"
Rule00031Annotation = "视图的查询性能较差，同时基表结构变更，需要对视图进行维护。如果视图可读性差，且包含复杂的逻辑，会增加维护的成本。"
Rule00031Desc = "禁止使用视图"
Rule00031Message = "禁止使用视图"
Rule00032Annotation = "通过配置该规则可以规范指定业务的数据库命名规则，具体命名规范可以自定义设置。"
Rule00032Desc = "数据库名称必须使用固定后缀结尾"
Rule00032Message = "数据库名称必须使用固定后缀结尾:%s"
Rule00032Params1 = "固定后缀"
Rule00033Annotation = "使用更新时间字段，有利于问题查找跟踪和检索数据，同时避免后期对数据生命周期管理不便 ，默认值为UPDATE_TIME可保证时间的准确性"
Rule00033Desc = "建表DDL必须包含更新时间字段, 默认值为CURRENT_TIMESTAMP, ON UPDATE值为CURRENT_TIMESTAMP"
Rule00033Message = "建表DDL必须包含更新时间字段, 默认值为CURRENT_TIMESTAMP, ON UPDATE值为CURRENT_TIMESTAMP. 更新时间字段名: %v"
Rule00033Params1 = "更新时间字段名"
Rule00034Annotation = "如存在NOT NULL且不带默认值的字段，对字段进行写入时不包含该字段，会导致插入报错"
Rule00034Desc = "字段约束为NOT NULL时必须带默认值"
Rule00034Message = "字段约束为NOT NULL时必须带默认值"
Rule00035Annotation = "建议开启此规则，可避免MySQL会将中文全角引号识别为命名的一部分，执行结果与业务预期不符"
Rule00035Desc = "DDL语句中不建议使用中文全角引号"
Rule00035Message = "DDL语句中不建议使用中文全角引号"
Rule00036Annotation = "BLOB类型属于大字段类型，作为索引会占用很大的存储空间"
Rule00036Desc = "禁止将BLOB类型的列加入索引"
Rule00036Message = "BLOB类型属于大字段类型，作为索引会占用很大的存储空间"
Rule00037Annotation = "在表上建立的每个索引都会增加存储开销，索引对于插入、删除、更新操作也会增加维护索引处理上的开销（TPS），且太多与不充分、不正确的索引对性能都毫无益处。"
Rule00037Desc = "避免一张表内二级索引的个数过多"
Rule00037Message = "避免一张表内二级索引的个数过多"
Rule00037Params1 = "二级索引个数"
Rule00039Annotation = "为了提高查询效率，建议在执行SQL时优先使用区分度高的索引字段。区分度高的索引可以更快地定位数据，减少不必要的数据扫描，从而加速查询响应时间。规则检查将会计算候选索引字段的区分度，如果索引的区分度低于设定的阈值，则建议调整索引策略，默认值：0.7"
Rule00039Desc = "建议使用数据区分度高的索引字段"
Rule00039Message = "索引列 %v 未超过区分度阈值 %v, 不建议选为索引"
Rule00039Params1 = "区分度"
Rule00040Annotation = "通过配置该规则可以规范指定业务的普通索引命名规则，具体命名规范可以自定义设置。"
Rule00040Desc = "普通索引必须使用固定前缀"
Rule00040Message = "普通索引必须使用固定前缀"
Rule00040Params1 = "固定前缀"
Rule00041Annotation = "通过配置该规则可以规范指定业务的唯一索引命名规则，具体命名规范可以自定义设置。"
Rule00041Desc = "唯一索引必须使用固定前缀"
Rule00041Message = "唯一索引必须使用固定前缀"
Rule00041Params1 = "固定前缀"
Rule00042Annotation = "统一命名规范，有利于后期维护以及业务开发"
Rule00042Desc = "临时表必须使用固定前缀"
Rule00042Message = "临时表必须使用固定前缀"
Rule00042Params1 = "固定前缀"
Rule00043Annotation = "复合索引会根据索引列数创建对应组合的索引，列数越多，创建的索引越多，每个索引都会增加磁盘空间的开销，同时增加索引维护的开销；具体规则阈值可以根据业务需求调整，默认值：2"
Rule00043Desc = "避免表内同一字段上存在过多索引"
Rule00043Message = "避免表内同一字段上存在过多索引. 字段 %v 上的索引数量不建议超过%v个"
Rule00043Params1 = "单字段的索引数最大值"
Rule00045Annotation = "在数据库中，分页查询通常使用 LIMIT 和 OFFSET 语句进行。当数据量较大时，使用大的偏移量（OFFSET）进行分页查询可能会导致性能下降，因为数据库需要跳过大量的行来获得所需的结果集。"
Rule00045Desc = "避免在分页查询中使用过大偏移量"
Rule00045Message = "避免在分页查询中使用过大偏移量, 最大偏移量:%v"
Rule00045Params1 = "最大偏移量"
Rule00046Annotation = "数据库对象命名规范，不推荐采用大小写混用的形式建议词语之间使用下划线连接，提高代码可读性"
Rule00046Desc = "数据库对象命名不建议大小写字母混合"
Rule00046Message = "数据库对象命名不建议大小写字母混合"
Rule00047Annotation = "通过配置该规则可以规范指定业务的对象命名长度，具体长度可以自定义设置。"
Rule00047Desc = "数据库对象名称的字符个数不建议超过阈值"
Rule00047Message = "数据库对象名称的字符个数不建议超过阈值:%v"
Rule00047Params1 = "字符个数"
Rule00048Annotation = "遵循良好的命名约定和避免特殊字符的使用，可以提高代码的可读性、可维护性，并减少潜在的兼容性和语法问题。"
Rule00048Desc = "数据库对象命名只能使用英文、下划线或数字，首字母必须是英文"
Rule00048Message = "数据库对象命名只能使用英文、下划线或数字，首字母必须是英文"
Rule00049Annotation = "通过配置该规则可以规范指定业务的数据对象命名规则，避免发生冲突，以及混淆"
Rule00049Desc = "数据库对象命名禁止使用保留字"
Rule00049Message = "数据库对象命名禁止使用保留字"
Rule00051Annotation = "后期维护相对不便，过于依赖数据库自增机制达到全局唯一，不易拆分，容易造成主键冲突"
Rule00051Desc = "禁止主键使用自增"
Rule00051Message = "禁止主键使用自增"
Rule00052Annotation = "自增主键通常为数字类型，其数据写入速度快，占用的存储空间小。自增主键保证了数据的有序性，减少了页分裂的频率，并简化了应用层的数据写入逻辑。"
Rule00052Desc = "建议主键使用自增"
Rule00052Message = "建议主键使用自增"
Rule00053Annotation = "当表结构变更时，使用*通配符选择所有列将导致查询行为会发生更改，与业务期望不符；同时SELECT * 中的无用字段会带来不必要的磁盘I/O，以及网络开销，且无法覆盖索引进而回表，大幅度降低查询效率。"
Rule00053Desc = "不建议使用SELECT *"
Rule00053Message = "不建议使用SELECT *"
Rule00054Annotation = "在设计主键时若选择BIGINT时，使用无符号类型，相对于有符号类型，可以使数据库的索引性能更加优化，因为它减少了负值处理的开销，并能在某些情况下提高查询速度。特别是在系统设计初期可能无法完全预见到未来数据量的情况下，无符号数值类型（BIGINT UNSIGNED）可以有效避免因数据增长导致的溢出问题。"
Rule00054Desc = "建议主键字段使用BIGINT时采用无符号的BIGINT"
Rule00054Message = "建议主键字段使用BIGINT时采用无符号的BIGINT"
Rule00055Annotation = "MySQL需要单独维护重复的索引，冗余索引增加维护成本，影响更新性能"
Rule00055Desc = "不建议创建冗余索引"
Rule00055Message = "已存在索引 %v , 索引 %v 为冗余索引"
Rule00056Annotation = "数据库内使用非标准的字符集，可能导致字符无法编码或者编码不全引起的乱码，最终出现应用写入数据失败或者查询结果显示乱码，影响数据库服务可用性。"
Rule00056Desc = "表建议使用指定的字符集"
Rule00056Message = "表建议使用指定的字符集: %v"
Rule00056Params1 = "标准字符集"
Rule00057Annotation = "INNODB 支持事务，支持行级锁，更好的恢复性，高并发下性能更好。"
Rule00057Desc = "必须使用INNODB数据库引擎"
Rule00057Message = "必须使用INNODB数据库引擎"
Rule00058Annotation = "分区表在使用过程中存在诸多缺点，比如分区裁剪的不确定性、不支持全局分区索引、锁定粒度放大、分区前期规划较为繁杂等问题。如存在分区诉求，通常使用物理分表，即可避免分区表带来的缺点。"
Rule00058Desc = "避免使用分区表相关功能"
Rule00058Message = "避免使用分区表相关功能"
Rule00059Annotation = "对于大型数据表，修改字段类型的DDL操作将导致显著的性能下降和可用性影响。此类操作通常需要复制整个表来更改数据类型，期间表将无法进行写操作，并且可能导致长时间的锁等待，对线上业务造成过长时间的影响。"
Rule00059Desc = "禁止修改大表字段类型"
Rule00059Message = "禁止修改大表字段类型，表大小阈值: %v GB"
Rule00059Params1 = "表大小(GB)"
Rule00060Annotation = "表添加注释能够使表的意义更明确，方便日后的维护"
Rule00060Desc = "表建议添加注释"
Rule00060Message = "表建议添加注释"
Rule00061Annotation = "新建表如果已经存在，不加 IF NOT EXISTS 会报错。新建表只在表不存在的前提下进行，避免SQL 实际执行报错。"
Rule00061Desc = "建议新建表句子中包含表存在判断操作"
Rule00061Message = "建议新建表句子中包含表存在判断操作"
Rule00062Annotation = "RC 虽然没有解决幻读的问题，但是没有间隙锁，从而每次在做更新操作时影响的行数比默认RR要小很多；默认的RR隔离级别虽然解决了幻读问题，但是增加了间隙锁，导致加锁的范围扩大，性能比RC要低，增加死锁的概率；在大多数情况下，出现幻读的几率较小，所以建议使用RC。"
Rule00062Desc = "建议事务隔离级别设置成RC"
Rule00062Message = "建议事务隔离级别设置成RC"
Rule00063Annotation = "通过配置该规则可以规范指定业务的唯一索引命名规则，如索引字段存在多个，则可以拼接字段名，不要超过索引名长度即可。"
Rule00063Desc = "唯一索引名必须遵循指定格式"
Rule00063Message = "唯一索引名必须遵循指定格式"
Rule00063Params1 = "索引命名格式"
Rule00064Annotation = "建立索引时没有限制索引的大小，索引长度会根据该字段实际存储的值来计算，VARCHAR 定义的长度越长，导致业务写入的内容越多，则建立的索引其存储大小将会越大，默认值：767"
Rule00064Desc = "不建议索引字段是VARCHAR类型时其长度大于阈值"
Rule00064Message = "不建议索引字段是VARCHAR类型时其长度大于阈值. 不符合规则的字段: %v"
Rule00064Params1 = "VARCHAR最大长度"
Rule00065Annotation = "FIRST 和 AFTER 关键词在 ALTER TABLE 语句中用于调整字段的顺序，这种操作会改变表字段的物理顺序，可能导致依赖默认列顺序的业务SQL出现错误，影响数据的一致性和业务的稳定性。"
Rule00065Desc = "禁止修改表时指定或调整字段在表结构中的顺序"
Rule00065Message = "禁止修改表时指定或调整字段在表结构中的顺序"
Rule00066Annotation = "DROP 操作是数据定义语言（DDL）的一部分，一旦执行，将导致无法恢复的数据或结构丢失。在不恰当的情况下执行DROP操作可能导致数据丢失、系统功能缺失甚至业务中断。"
Rule00066Desc = "禁止除索引外的DROP 操作"
Rule00066Message = "禁止除索引外的DROP 操作"
Rule00067Annotation = "外键在大量写入场景下性能较差，强烈禁止使用"
Rule00067Desc = "表不建议使用外键"
Rule00067Message = "表不建议使用外键"
Rule00068Annotation = "TIMESTAMP类型字段受制于2038年问题，其时间范围仅限于1970-01-01 00:00:01 UTC至2038-01-19 03:14:07 UTC。超过这个时间范围，TIMESTAMP将无法存储更晚的时间点，导致应用报错。此外，TIMESTAMP字段在存储时会根据数据库服务器的时区进行转换，这可能导致跨时区应用中的时间不一致问题。"
Rule00068Desc = "禁止使用TIMESTAMP字段"
Rule00068Message = "禁止使用TIMESTAMP字段"
Rule00071Annotation = "业务逻辑与删除列依赖未完全消除，列被删除后可能导致程序异常（无法正常读写）的情况；开启该规则，SQLE将提醒删除列为高危操作"
Rule00071Desc = "禁止进行删除列的操作"
Rule00071Message = "禁止进行删除列的操作"
Rule00072Annotation = "删除已有约束会影响已有业务逻辑；开启该规则，SQLE将提醒删除外键为高危操作"
Rule00072Desc = "禁止进行删除外键的操作"
Rule00072Message = "禁止进行删除外键的操作"
Rule00073Annotation = "修改表的默认字符集，只会影响后续新增的字段，不会修表已有字段的字符集；如需修改整张表所有字段的字符集建议开启此规则"
Rule00073Desc = "不建议修改表的默认字符集"
Rule00073Message = "不建议修改表的默认字符集"
Rule00074Annotation = "RENAME/CHANGE 表名/列名会对线上业务不停机发布造成影响，如需这种操作应当DBA手工干预"
Rule00074Desc = "禁止使用RENAME或CHANGE对表名字段名进行修改"
Rule00074Message = "禁止使用RENAME或CHANGE对表名字段名进行修改"
Rule00075Annotation = "统一字符集可以避免由于字符集转换产生的乱码，不同的字符集进行比较前需要进行转换会造成索引失效"
Rule00075Desc = "建议列与表使用同一个字符集"
Rule00075Message = "建议列与表使用同一个字符集. 不符合规则的字段: %v"
Rule00076Annotation = "在数据库中，进行修改或删除等数据变更操作时，一次性操作的数据量过大，会消耗大量的系统资源，产生长事务，会导致查询性能下降，影响其他事务或查询的执行。"
Rule00076Desc = "UPDATE/DELETE操作影响行数不建议超过阈值"
Rule00076Message = "UPDATE/DELETE操作影响行数不建议超过阈值"
Rule00076Params1 = "影响行数上限"
Rule00078Annotation = "禁止使用SQL聚合函数是为了确保查询的简单性、高性能和数据一致性。"
Rule00078Desc = "禁止使用聚合函数"
Rule00078Message = "禁止使用聚合函数"
Rule00079Annotation = "表或列的别名与其真实名称相同, 这样的别名会使得查询更难去分辨"
Rule00079Desc = "别名不建议与表或列的名字相同"
Rule00079Message = "别名不建议与表或列的名字相同"
Rule00080Annotation = "为了避免单个SQL语句在批量写入时对数据库性能造成过大压力，限制每条SQL语句一次性插入的数据行数不得超过指定行。这有助于提高事务的可管理性，减少锁冲突，优化日志处理，以及提升错误恢复速度。"
Rule00080Desc = "建议单条SQL写入数据的行数不超过阈值"
Rule00080Message = "建议单条SQL写入数据的行数不超过阈值"
Rule00080Params1 = "单条SQL写入行数上限"
Rule00082Annotation = "大数据量的情况下，文件排序意味着SQL性能较低，会增加OS的开销，影响数据库性能。"
Rule00082Desc = "禁止使用文件排序"
Rule00082Message = "禁止使用文件排序"
Rule00083Annotation = "索引扫描是跳跃扫描，未遵循最左匹配原则，可能降低索引的使用效率，影响查询性能，尽量避免使用。"
Rule00083Desc = "不建议对表进行索引跳跃扫描"
Rule00083Message = "不建议对表进行索引跳跃扫描"
Rule00084Annotation = "大数据量的情况下，临时表意味着SQL性能较低，会增加OS的开销，影响数据库性能"
Rule00084Desc = "不建议使用临时表"
Rule00084Message = "不建议使用临时表"
Rule00085Annotation = "MySQL需要单独维护重复的索引，冗余索引增加维护成本，影响更新性能"
Rule00085Desc = "不建议对表进行全索引扫描"
Rule00085Message = "不建议对表进行全索引扫描"
Rule00086Annotation = "使用子字符串匹配搜索或后缀匹配搜索将导致查询无法使用索引，导致全表扫描"
Rule00086Desc = "禁止使用子字符串匹配或后缀匹配搜索"
Rule00086Message = "禁止使用子字符串匹配或后缀匹配搜索"
Rule00087Annotation = "当IN值过多时，有可能会出现无法使用索引，导致查询走全表扫描、性能变差、资源消耗过多等问题。"
Rule00087Desc = "避免WHERE条件内IN语句中的参数值个数过多"
Rule00087Message = "避免WHERE条件内IN语句中的参数值个数过多"
Rule00087Params1 = "IN的参数值个数"
Rule00088Annotation = "当表结构发生变更，INSERT请求不明确指定列名，会发生插入数据不匹配的情况；建议开启此规则，避免插入结果与业务预期不符"
Rule00088Desc = "INSERT 语句必须指定COLUMN"
Rule00088Message = "INSERT 语句必须指定COLUMN"
Rule00089Annotation = "使用 INSERT ... SELECT 在默认事务隔离级别下，可能会导致对查询的表施加表级锁"
Rule00089Desc = "禁止INSERT ... SELECT"
Rule00089Message = "禁止INSERT ... SELECT"
Rule00090Annotation = "union会对结果集进行去重，union all只是简单的将两个结果合并后就返回，从效率上看，union all 要比union快很多；如果合并的两个结果集中允许包含重复数据的话，建议开启此规则，使用union all替代union"
Rule00090Desc = "建议使用UNION ALL替代UNION"
Rule00090Message = "建议使用UNION ALL替代UNION"
Rule00091Annotation = "为了确保连接操作的正确性和可靠性，应该始终指定连接条件，定义正确的关联关系。缺少连接条件，可能导致连接操作失败，最终数据库会使用笛卡尔积的方式进行处理，产生不正确的连接结果，并导致性能问题，消耗大量的CPU和内存资源。"
Rule00091Desc = "建议表连接时有连接条件"
Rule00091Message = "建议表连接时有连接条件"
Rule00092Annotation = "在进行DELETE和UPDATE操作时，通过添加LIMIT子句可以明确限制操作影响的数据行数。这样做有助于减少由于执行错误而导致的数据损失风险，并可以有效地控制长事务的执行时间，降低对数据库性能的影响。"
Rule00092Desc = "建议DELETE/UPDATE语句使用LIMIT子句控制影响行数"
Rule00092Message = "建议DELETE/UPDATE语句使用LIMIT子句控制影响行数"
Rule00094Annotation = "通过配置该规则可以指定业务中需要禁止使用的内置函数，使用内置函数可能会导致SQL无法走索引或者产生一些非预期的结果。实际需要禁用的函数可通过规则设置。"
Rule00094Desc = "避免使用不必要的内置函数"
Rule00094Message = "避免使用不必要的内置函数：%v"
Rule00094Params1 = "函数名"
Rule00095Annotation = "'<>' 是ANSI SQL标准中定义的不等于运算符。如果使用了!=运算符，数据库优化器会自动转换为SQL标准不等于运算符，增加了优化器的转换开销；另外，目前并非所有的SQL数据库系统都支持 !=，使用标准的运算符可以确保SQL在各数据库之间具有更高的兼容性。"
Rule00095Desc = "建议使用'<>'代替'!='"
Rule00095Message = "建议使用'<>'代替'!='"
Rule00096Annotation = "表关联越多，意味着各种驱动关系组合就越多，比较各种结果集的执行成本的代价也就越高，进而SQL查询性能会大幅度下降。"
Rule00096Desc = "不建议参与连接操作的表数量过多"
Rule00096Message = "不建议参与连接操作的表数量过多"
Rule00096Params1 = "参与表连接的表个数"
Rule00097Annotation = "在MySQL数据库中，对长字段（如VARCHAR(2000)、TEXT、BLOB等）进行排序操作（包括但不限于ORDER BY、DISTINCT、GROUP BY、UNION等）是不推荐的实践。这类操作会导致排序缓冲区（sort_buffer_size）溢出，引发性能下降和资源浪费。此外，由于长字段排序可能导致临时表（使用Temptable引擎）溢出到磁盘，这不仅会严重影响查询性能，还可能导致系统稳定性和响应能力的降低。"
Rule00097Desc = "禁止对长字段排序"
Rule00097Message = "禁止对长字段排序"
Rule00097Params1 = "排序字段的最大长度"
Rule00098Annotation = "在设计SQL语句时，应避免对同一张表进行多次连接或查询。这种做法可能导致查询性能显著下降，因为它会增加数据库的I/O操作，CPU处理以及内存使用，从而影响整体查询效率"
Rule00098Desc = "避免在单个SQL语句中对同一张表进行多次连接或查询"
Rule00098Message = "避免在单个SQL语句中对同一张表进行多次连接或查询. 违反规则的表名: %s"
Rule00098Params1 = "max_table_join_count"
Rule00099Annotation = "SELECT FOR UPDATE 会对查询结果集中每行数据都添加排他锁，其他线程对该记录的更新与删除操作都会阻塞，在高并发下，容易造成数据库大量锁等待，影响数据库查询性能。"
Rule00099Desc = "不建议使用SELECT FOR UPDATE"
Rule00099Message = "不建议使用SELECT FOR UPDATE"
Rule00100Annotation = "如果查询的扫描行数很大，会导致IO、网络资源消耗过大，并且可能会导致优化器选择错误的执行计划而不走索引。"
Rule00100Desc = "避免SELECT语句一次性返回的结果过多"
Rule00100Message = "避免SELECT语句一次性返回的结果过多"
Rule00100Params1 = "结果集返回行数"
Rule00101Annotation = "ORDER BY 对查询性能影响较大，建议将排序部分放到业务处理。"
Rule00101Desc = "SELECT 语句不能有ORDER BY"
Rule00101Message = "SELECT 语句不能有ORDER BY"
Rule00102Annotation = "使用ORDER BY子句的UPDATE或DELETE语句会导致不必要的性能开销，影响数据库响应时间，并可能导致锁竞争，从而影响到系统的整体性能和稳定性。"
Rule00102Desc = "禁止UPDATE/DELETE语句使用ORDER BY操作 "
Rule00102Message = "禁止UPDATE/DELETE语句使用ORDER BY操作 "
Rule00107Annotation = "过长的SQL可读性较差，难以维护，且容易引发性能问题。"
Rule00107Desc = "建议将过长的SQL分解成几个简单的SQL"
Rule00107Message = "建议将过长的SQL分解成几个简单的SQL"
Rule00107Params1 = "句子长度限制"
Rule00108Annotation = "子查询嵌套层数超过阈值，有些情况下，子查询并不能使用到索引。同时对于返回结果集比较大的子查询，会产生大量的临时表，消耗过多的CPU和IO资源，产生大量的慢查询"
Rule00108Desc = "避免子查询嵌套层数过多"
Rule00108Message = "避免子查询嵌套层数过多"
Rule00108Params1 = "子查询嵌套层数"
Rule00109Annotation = "不支持在子查询中进行'LIMIT & IN/ALL/ANY/SOME'，数据库会执行报错。"
Rule00109Desc = "禁止在子查询中使用LIMIT"
Rule00109Message = "禁止在子查询中使用LIMIT"
Rule00110Annotation = "为SQL查询条件建立索引可以显著提高查询性能，减少I/O操作，并提高查询效率。特别是在处理大数据量的表时，索引可以大幅度缩短查询时间，优化数据库性能。"
Rule00110Desc = "建议为SQL查询条件建立索引"
Rule00110Message = "建议为SQL查询条件建立索引. 不符合条件的字段有: %v"
Rule00111Annotation = "对条件字段做表达式操作，可能会破坏索引值的有序性，导致优化器选择放弃走索引，使查询性能大幅度降低。"
Rule00111Desc = "避免对条件字段使用表达式操作"
Rule00111Message = "避免对条件字段使用表达式操作"
Rule00112Annotation = "WHERE子句中条件字段与值数据类型不一致会引发隐式数据类型转换，导致优化器选择错误的执行计划，在高并发、大数据量的情况下，不走索引会使得数据库的查询性能严重下降"
Rule00112Desc = "禁止WHERE子句中条件字段与值的数据类型不一致"
Rule00112Message = "禁止WHERE子句中条件字段与值的数据类型不一致"
Rule00113Annotation = "SQL查询条件中存在NOT IN、NOT LIKE、NOT EXISTS、不等于等负向查询条件，将导致全表扫描，出现慢SQL"
Rule00113Desc = "不建议对条件字段使用负向查询"
Rule00113Message = "不建议对条件字段使用负向查询"
Rule00115Annotation = "当查询条件包含联合索引的最左侧字段时，查询语句才能更好的利用索引的特性：有序性、过滤性等"
Rule00115Desc = "避免使用标量子查询"
Rule00115Message = "避免使用标量子查询"
Rule00118Annotation = "DROP/TRUNCATE是DDL，操作立即生效，不会写入日志，所以无法回滚，在执行高危操作之前对数据进行备份是很有必要的"
Rule00118Desc = "建议在执行DROP/TRUNCATE等操作前进行备份"
Rule00118Message = "建议在执行DROP/TRUNCATE等操作前进行备份"
Rule00119Annotation = "在5.7中，MySQL默认会对’GROUP BY col1, …’按如下顺序’ORDER BY col1,…’隐式排序，导致产生无谓的排序，带来额外的开销，影响SQL执行效率；在8.0中，则不会出现这种情况。如果不需要排序建议显示添加’ORDER BY NULL’"
Rule00119Desc = "建议为GROUP BY语句添加ORDER BY条件"
Rule00119Message = "建议为GROUP BY语句添加ORDER BY条件."
Rule00120Annotation = "使用 `IN(NULL)` 或 `NOT IN(NULL)` 会导致查询条件永远为假，从而使得查询无法返回任何结果。这不仅影响查询逻辑和结果的准确性，还可能导致性能问题和不必要的资源消耗。"
Rule00120Desc = "避免使用 IN (NULL) 或者 NOT IN (NULL)"
Rule00120Message = "避免使用 IN (NULL) 或者 NOT IN (NULL)"
Rule00121Annotation = "在限定记录的查询语句中，如果没有ORDER BY子句，每次查询的结果可能会受数据更新影响而出现非确定性的结，最终与业务需求不符"
Rule00121Desc = "建议在限定记录数的查询语句中使用ORDER BY"
Rule00121Message = "建议在限定记录数的查询语句中使用ORDER BY."
Rule00122Annotation = "当某一列的值全是NULL时，COUNT(COL)的返回结果为0，但SUM(COL)的返回结果为NULL，因此使用SUM()时需注意NPE问题（指数据返回NULL）；如业务需避免NPE问题，建议开启此规则"
Rule00122Desc = "避免对值全为NULL的列直接使用 SUM或COUNT函数"
Rule00122Message = "避免对值全为NULL的列直接使用 SUM或COUNT函数. 违反规则的列名: %s"
Rule00123Annotation = "TRUNCATE是DDL，执行后数据默认隐式提交，无法回滚，在没有备份的场景下，谨慎使用TRUNCATE"
Rule00123Desc = "禁止使用TRUNCATE操作"
Rule00123Message = "禁止使用TRUNCATE操作."
Rule00124Annotation = "TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，同时TRUNCATE后表所占用的空间会被释放，而DELETE后需要手工执行OPTIMIZE才能释放表空间"
Rule00124Desc = "删除全表时建议使用 TRUNCATE 替代 DELETE"
Rule00124Message = "删除全表时建议使用 TRUNCATE 替代 DELETE"
Rule00126Annotation = "GROUP BY 1 表示按第一列进行GROUP BY；在GROUP BY子句中使用字段编号，而不是表达式或列名称，当查询列顺序改变时，会导致查询逻辑出现问题"
Rule00126Desc = "不建议对字段编号进行 GROUP BY"
Rule00126Message = "不建议对字段编号进行 GROUP BY"
Rule00127Annotation = "在ORDER BY子句中使用表达式或函数会导致无法有效利用索引，从而可能涉及到全表扫描和使用临时表进行数据排序。这样的操作在处理大数据量时会显著降低查询性能。"
Rule00127Desc = "不建议在ORDER BY中使用表达式或函数"
Rule00127Message = "不建议在ORDER BY中使用表达式或函数"
Rule00128Annotation = "对于索引字段，放在HAVING子句中时不会走索引；建议将HAVING子句改写为WHERE中的查询条件，可以在查询处理期间使用索引，提高SQL的执行效率"
Rule00128Desc = "不建议使用 HAVING 子句"
Rule00128Message = "不建议使用 HAVING 子句."
Rule00131Annotation = "使用 ORDER BY RAND() 会导致 MySQL 生成临时表并进行完整的表扫描和排序，这在处理大数据量时会显著增加查询时间和服务器负载。建议采用更高效的随机数据检索方法，如利用主键或其他索引实现快速随机访问。"
Rule00131Desc = "避免使用 ORDER BY RAND() 进行随机排序"
Rule00131Message = "避免使用 ORDER BY RAND() 进行随机排序"
Rule00132Annotation = "有些情况下，子查询并不能使用到索引，同时对于返回结果集比较大的子查询，会产生大量的临时表，消耗过多的CPU和IO资源，产生大量的慢查询"
Rule00132Desc = "不推荐使用子查询"
Rule00132Message = "不推荐使用子查询."
Rule00134Annotation = "主键在大多数数据库系统中用于定义数据的唯一性，并且常常与数据的物理存储结构密切相关。更新主键会导致底层存储结构（如聚簇索引）的重大重新组织，引发性能下降。此外，主键的更改可能影响数据一致性，尤其在涉及复杂事务处理和高并发操作的场景中。"
Rule00134Desc = "避免对主键值进行修改"
Rule00134Message = "避免对主键值进行修改"
Rule00139Annotation = "全表扫描是数据库执行查询时读取表中每一行来查找匹配记录的过程。对于大型表来说，出现全表扫描的SQL会导致显著的性能下降和资源消耗，影响业务稳定运行。"
Rule00139Desc = "不建议使用全表扫描"
Rule00139Message = "不建议使用全表扫描. 表大小阈值: %v GB"
Rule00139Params1 = "表大小(GB)"
Rule00140Annotation = "对表、视图等对象进行创建、修改、查询、更新、删除等DDL、DML操作时，如未指定schema或者库名，会导致在不确定的数据库下执行，与实际业务预期不符合，而且会导致SQL语句执行错误。"
Rule00140Desc = "建议对表、视图等对象进行操作时指定库名"
Rule00140Message = "建议对表、视图等对象进行操作时指定库名"
Rule00141Annotation = "嵌套越深，需要扫描的行数、生成的结果集就越大，SQL的执行效率越低。"
Rule00141Desc = "表关联嵌套循环的层次过多"
Rule00141Message = "表关联嵌套循环的层次过多"
Rule00141Params1 = "表关联嵌套循环层数"
Rule00143Annotation = "多表关联时，在WHERE条件中对不同表的字段使用OR条件可能会导致SQL无法使用正确的索引"
Rule00143Desc = "多表关联时，不建议在WHERE条件中对不同表的字段使用OR条件"
Rule00143Message = "多表关联时，不建议在WHERE条件中对不同表的字段使用OR条件."
Rule00151Annotation = "不允许在系统表空间上创建用户对象，避免不必要的安全风险，方便维护"
Rule00151Desc = "避免CREATE TABLE/ALTER TABLE 使用禁止的表空间"
Rule00151Message = "避免CREATE TABLE/ALTER TABLE 使用禁止的表空间."
Rule00153Annotation = "规划和设计表时，索引应根据业务需求和数据分布合理创建，无索引通常是不合理的情况"
Rule00153Desc = "创建表建议添加索引"
Rule00153Message = "创建表建议添加索引."
Rule00161Annotation = "序列或自增字段的步长为1时，有助于保证主键和其他自增字段的连续性，避免不必要的数据间隔和数字资源的浪费。不仅简化了数据库的管理和维护，而且也提高了系统的可预测性和稳定性。特别是在处理大量数据插入或高并发场景时，连续的主键值还能减少潜在的冲突和错误。"
Rule00161Desc = "建议序列或自增字段的步长为1"
Rule00161Message = "建议序列或自增字段的步长为1"
Rule00170Annotation = "修改字段长度值低于现有字段长度值，如果该字段现有数据超出设定后的长度，会造成语句执行报错"
Rule00170Desc = "避免缩短字段长度"
Rule00170Message = "避免缩短字段长度. 字段 %s 的新长度 %d 小于当前最大长度 %d"
Rule00171Annotation = "使用CREATE_TIME字段，有利于问题查找跟踪和检索数据，同时避免后期对数据生命周期管理不便 ，默认值为CURRENT_TIMESTAMP可保证时间的准确性"
Rule00171Desc = "建表DDL必须包含创建时间字段且默认值为CURRENT_TIMESTAMP"
Rule00171Message = "建表DDL必须包含创建时间字段且默认值为CURRENT_TIMESTAMP"
Rule00171Params1 = "创建时间字段名"
Rule00174Annotation = "授予过高权限，可能会带来严重的安全风险。"
Rule00174Desc = "禁止GRANT 授予过高权限"
Rule00174Message = "禁止GRANT 授予过高权限"
Rule00174Params1 = "高权限范围"
Rule00175Annotation = "索引合并说明一个查询同时使用了多个索引，增加了更多IO操作，特别是在数据量大的情况下执行效率比复合索引明显更多。此外，索引合并操作可能消耗更多CPU和内存资源，以及较长的查询响应时间。"
Rule00175Desc = "避免不必要的索引扫描合并"
Rule00175Message = "避免不必要的索引扫描合并"
Rule00176Annotation = "使用hint可能会导致数据库走错误的执行计划，从而影响执行效率，消耗系统资源。"
Rule00176Desc = "不建议SQL中包含hint指令"
Rule00176Message = "不建议SQL中包含hint指令"
Rule00177Annotation = "使用过多的Order By字段会增加排序操作的复杂性，并可能导致性能下降。排序时，MySQL需要对结果集中的每一行进行多字段比较，这可能会耗费更多的CPU和内存资源。如果排序数据集大小超过了可用内存，则可能会导致创建临时表并在磁盘上进行排序，从而增加I/O开销。"
Rule00177Desc = "建议Order By字段个数不超过指定阈值"
Rule00177Message = "建议Order By字段个数不超过指定阈值. 阈值: %v"
Rule00177Params1 = "order by字段个数最大值"
Rule00178Annotation = "SQL语句存在全表排序操作，无过滤条件，也就是WHERE 必须显式指定过滤条件"
Rule00178Desc = "不建议对表进行全表排序操作"
Rule00178Message = "不建议对表进行全表排序操作"
Rule00179Annotation = "确保WHERE子句中用于索引列的条件字段与索引列的数据类型一致。不一致的数据类型会导致执行计划存在隐式类型转换操作。这种转换不仅增加CPU负担，还可能使得原本高效的索引无法使用，导致查询性能显著下降。"
Rule00179Desc = "避免隐式数据类型转换的SQL查询"
Rule00179Message = "避免隐式数据类型转换的SQL查询"
Rule00180Annotation = "执行计划中的filter 步骤表示查询在检索数据之后需要进行额外的行过滤。过滤通常发生在已经通过索引或其他方法获取的行集上。如果这个步骤处理的行数很多，那么它可能会成为查询性能的瓶颈。"
Rule00180Desc = "避免执行计划中 filter 次数过多"
Rule00180Message = "避免执行计划中 filter 次数过多"
Rule00180Params1 = "filter 个数阈值"
Rule00218Annotation = "当查询条件包含联合索引的最左侧字段时，查询语句才能更好的利用索引的特性：有序性、过滤性等"
Rule00218Desc = "联合索引最左侧的字段必须出现在查询条件内"
Rule00218Message = "联合索引最左侧的字段必须出现在查询条件内. 不符合规范的字段: %v"
Rule00219Annotation = "使用创建时间字段，有利于问题查找跟踪和检索数据，同时避免后期对数据生命周期管理不便 ，可保证时间的准确性"
Rule00219Desc = "建表DDL必须包括创建时间字段，并应确保该字段能记录表记录的创建时间。"
Rule00219Message = "建表DDL必须包括创建时间字段，并应确保该字段能记录表记录的创建时间。"
Rule00219Params1 = "创建时间字段名"
Rule00220Annotation = "不带 where 条件的 count(*) 或者 count(1) 都是对表进行暴力扫描，极其耗费系统资源"
Rule00220Desc = "避免不带where条件的count(*)或者count(1)"
Rule00220Message = "避免不带where条件的count(*)或者count(1)"
RuleTypeDDLConvention = "DDL规范"
RuleTypeDMLConvention = "DML规范"
RuleTypeDQLConvention = "DQL规范"
RuleTypeDistributedConvention = "分布式规范"
RuleTypeExecutePlan = "执行计划"
RuleTypeGlobalConfig = "全局配置"
RuleTypeIndexInvalidation = "索引失效"
RuleTypeIndexOptimization = "索引优化"
RuleTypeIndexingConvention = "索引规范"
RuleTypeNamingConvention = "命名规范"
RuleTypeUsageSuggestion = "使用建议"
SchemaExistMessage = "schema %s 已存在"
SchemaNotExistMessage = "schema %s 不存在"
TableExistMessage = "表 %s 已存在"
TableNotExistMessage = "表 %s 不存在"
ThreeStarIndexAdviceFormat = "索引建议 | 根据三星索引设计规范，建议对表%s添加%s索引：【%s】"
UnsupportedSyntaxError = "语法错误或者解析器不支持，请人工确认SQL正确性"
audit_accuracy = "审核精度"
audit_purpose = "审核目的"
column = "字段"
correction = "正确性"
database = "数据库"
dcl = "DCL"
ddl = "DDL"
dml = "DML"
event = "事件"
function = "函数"
index = "索引"
integrity = "完整性约束"
maintenance = "可维护性"
management = "数据库管理"
offline = "离线"
online = "在线"
operand = "操作对象"
performance = "性能问题"
privilege = "数据权限"
procedure = "存储过程"
query = "查询"
security = "安全性"
sql = "SQL分类"
table = "表"
table_space = "表空间"
transaction = "事务控制"
trigger = "触发器"
user = "用户"
view = "视图"
