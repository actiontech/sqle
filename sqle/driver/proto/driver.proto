syntax = "proto3";
package proto;
option go_package = "./;proto";

service Driver {
  // Metas returns some base info from plugin server.
  rpc Metas(Empty) returns (MetasResponse);

  // Init will should be called at first before calling following methods.
  // It will pass some necessary info to plugin server. In the beginning,
  // we consider that put this info to the executable binary environment.
  // We put all communication on gRPC for unification in the end.
  rpc Init(InitRequest) returns (Empty);
  rpc Close(Empty) returns (Empty);
  rpc Ping(Empty) returns (Empty);
  rpc Exec(ExecRequest) returns (ExecResponse);
  rpc Tx(TxRequest) returns (TxResponse);
  rpc Databases(Empty) returns (DatabasesResponse);
  rpc Parse(ParseRequest) returns (ParseResponse);
  rpc Audit(AuditRequest) returns (AuditResponse);
  rpc GenRollbackSQL(GenRollbackSQLRequest) returns (GenRollbackSQLResponse);
}

message DSN {
  string host = 1;
  string port = 2;
  string user = 3;
  string password = 4;
  string database = 5;
}

message Rule {
  string name = 1;
  string desc = 2;
  string value = 3 [deprecated=true];
  string level = 4;
  string category = 5;
  repeated Param params = 6;
}

message Param {
  string key = 1;
  string value = 2;
  string desc = 3;
  string type = 4;
}

message InitRequest {
  DSN dsn = 1;
  repeated Rule rules = 3;
}

message Empty {}

message ExecRequest {
  string query = 1;
}

message ExecResponse {
  int64 lastInsertId = 1;
  string lastInsertIdError = 2;
  int64 rowsAffected = 3;
  string rowsAffectedError = 4;
}

message TxRequest {
  repeated string queries = 1;
}

message TxResponse {
  repeated ExecResponse results = 1;
}

message DatabasesResponse {
  repeated string databases = 1;
}

message ParseRequest {
  string sqlText = 1;
}

message Node {
  string text = 1;
  string type = 2;
  string fingerprint = 3;
}

message ParseResponse {
  repeated Node nodes = 1;
}

message AuditRequest {
  string sql = 1;
}

message AuditResult {
  string message = 1;
  string level = 2;
}

message AuditResponse {
  repeated AuditResult results = 1;
}

message GenRollbackSQLRequest {
  string sql = 1;
}

message GenRollbackSQLResponse {
  string sql = 1;
  string reason = 2;
}

message MetasResponse {
  string name = 1;
  repeated Rule rules = 2;
}


