// Code generated by protoc-gen-go. DO NOT EDIT.
// source: driver_v2.proto

/*
Package protoV2 is a generated protocol buffer package.

It is generated from these files:
	driver_v2.proto

It has these top-level messages:
	Empty
	Session
	Param
	DSN
	Rule
	Knowledge
	MetasResponse
	InitRequest
	InitResponse
	CloseRequest
	KillProcessRequest
	ParsedSQL
	ParseRequest
	Node
	ParseResponse
	AuditSQL
	AuditRequest
	AuditResult
	AuditResults
	AuditResponse
	NeedRollbackSQL
	GenRollbackSQLRequest
	RollbackSQL
	GenRollbackSQLResponse
	PingRequest
	ExecSQL
	ExecRequest
	ExecResult
	ExecResponse
	TxRequest
	TxResponse
	QuerySQL
	QueryConf
	QueryRequest
	QueryResponse
	QueryResultRow
	QueryResultValue
	ExplainSQL
	ExplainRequest
	ExplainResponse
	ExplainClassicResult
	GetDatabasesRequest
	Database
	GetDatabasesResponse
	Table
	GetTableMetaRequest
	GetTableMetaResponse
	TableMeta
	ColumnsInfo
	IndexesInfo
	TabularDataHead
	TabularDataRows
	TabularData
	ExtractedSQL
	ExtractTableFromSQLRequest
	ExtractTableFromSQLResponse
	AffectRowsSQL
	EstimateSQLAffectRowsRequest
	EstimateSQLAffectRowsResponse
	KillProcessResponse
*/
package protoV2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OptionalModule int32

const (
	OptionalModule_GenRollbackSQL        OptionalModule = 0
	OptionalModule_Query                 OptionalModule = 1
	OptionalModule_Explain               OptionalModule = 2
	OptionalModule_GetTableMeta          OptionalModule = 3
	OptionalModule_ExtractTableFromSQL   OptionalModule = 4
	OptionalModule_EstimateSQLAffectRows OptionalModule = 5
	OptionalModule_KillProcess           OptionalModule = 6
)

var OptionalModule_name = map[int32]string{
	0: "GenRollbackSQL",
	1: "Query",
	2: "Explain",
	3: "GetTableMeta",
	4: "ExtractTableFromSQL",
	5: "EstimateSQLAffectRows",
	6: "KillProcess",
}
var OptionalModule_value = map[string]int32{
	"GenRollbackSQL":        0,
	"Query":                 1,
	"Explain":               2,
	"GetTableMeta":          3,
	"ExtractTableFromSQL":   4,
	"EstimateSQLAffectRows": 5,
	"KillProcess":           6,
}

func (x OptionalModule) String() string {
	return proto.EnumName(OptionalModule_name, int32(x))
}
func (OptionalModule) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Session struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *Session) Reset()                    { *m = Session{} }
func (m *Session) String() string            { return proto.CompactTextString(m) }
func (*Session) ProtoMessage()               {}
func (*Session) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Session) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Param struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Desc  string `protobuf:"bytes,3,opt,name=desc" json:"desc,omitempty"`
	Type  string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
}

func (m *Param) Reset()                    { *m = Param{} }
func (m *Param) String() string            { return proto.CompactTextString(m) }
func (*Param) ProtoMessage()               {}
func (*Param) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Param) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Param) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Param) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Param) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type DSN struct {
	Host             string   `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port             string   `protobuf:"bytes,2,opt,name=port" json:"port,omitempty"`
	User             string   `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	Password         string   `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	Database         string   `protobuf:"bytes,5,opt,name=database" json:"database,omitempty"`
	AdditionalParams []*Param `protobuf:"bytes,6,rep,name=additionalParams" json:"additionalParams,omitempty"`
}

func (m *DSN) Reset()                    { *m = DSN{} }
func (m *DSN) String() string            { return proto.CompactTextString(m) }
func (*DSN) ProtoMessage()               {}
func (*DSN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DSN) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *DSN) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *DSN) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *DSN) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *DSN) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *DSN) GetAdditionalParams() []*Param {
	if m != nil {
		return m.AdditionalParams
	}
	return nil
}

type Rule struct {
	Name       string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Desc       string     `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
	Level      string     `protobuf:"bytes,3,opt,name=level" json:"level,omitempty"`
	Category   string     `protobuf:"bytes,4,opt,name=category" json:"category,omitempty"`
	Params     []*Param   `protobuf:"bytes,5,rep,name=params" json:"params,omitempty"`
	Annotation string     `protobuf:"bytes,6,opt,name=annotation" json:"annotation,omitempty"`
	Knowledge  *Knowledge `protobuf:"bytes,7,opt,name=knowledge" json:"knowledge,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Rule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Rule) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Rule) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *Rule) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Rule) GetParams() []*Param {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *Rule) GetAnnotation() string {
	if m != nil {
		return m.Annotation
	}
	return ""
}

func (m *Rule) GetKnowledge() *Knowledge {
	if m != nil {
		return m.Knowledge
	}
	return nil
}

type Knowledge struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *Knowledge) Reset()                    { *m = Knowledge{} }
func (m *Knowledge) String() string            { return proto.CompactTextString(m) }
func (*Knowledge) ProtoMessage()               {}
func (*Knowledge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Knowledge) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

// Metas
type MetasResponse struct {
	PluginName               string           `protobuf:"bytes,1,opt,name=pluginName" json:"pluginName,omitempty"`
	DatabaseDefaultPort      int64            `protobuf:"varint,2,opt,name=databaseDefaultPort" json:"databaseDefaultPort,omitempty"`
	DatabaseAdditionalParams []*Param         `protobuf:"bytes,3,rep,name=databaseAdditionalParams" json:"databaseAdditionalParams,omitempty"`
	Rules                    []*Rule          `protobuf:"bytes,4,rep,name=rules" json:"rules,omitempty"`
	EnabledOptionalModule    []OptionalModule `protobuf:"varint,5,rep,packed,name=enabledOptionalModule,enum=protoV2.OptionalModule" json:"enabledOptionalModule,omitempty"`
	Logo                     []byte           `protobuf:"bytes,6,opt,name=logo,proto3" json:"logo,omitempty"`
}

func (m *MetasResponse) Reset()                    { *m = MetasResponse{} }
func (m *MetasResponse) String() string            { return proto.CompactTextString(m) }
func (*MetasResponse) ProtoMessage()               {}
func (*MetasResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MetasResponse) GetPluginName() string {
	if m != nil {
		return m.PluginName
	}
	return ""
}

func (m *MetasResponse) GetDatabaseDefaultPort() int64 {
	if m != nil {
		return m.DatabaseDefaultPort
	}
	return 0
}

func (m *MetasResponse) GetDatabaseAdditionalParams() []*Param {
	if m != nil {
		return m.DatabaseAdditionalParams
	}
	return nil
}

func (m *MetasResponse) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

func (m *MetasResponse) GetEnabledOptionalModule() []OptionalModule {
	if m != nil {
		return m.EnabledOptionalModule
	}
	return nil
}

func (m *MetasResponse) GetLogo() []byte {
	if m != nil {
		return m.Logo
	}
	return nil
}

// Init
type InitRequest struct {
	Dsn   *DSN    `protobuf:"bytes,1,opt,name=dsn" json:"dsn,omitempty"`
	Rules []*Rule `protobuf:"bytes,2,rep,name=rules" json:"rules,omitempty"`
}

func (m *InitRequest) Reset()                    { *m = InitRequest{} }
func (m *InitRequest) String() string            { return proto.CompactTextString(m) }
func (*InitRequest) ProtoMessage()               {}
func (*InitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *InitRequest) GetDsn() *DSN {
	if m != nil {
		return m.Dsn
	}
	return nil
}

func (m *InitRequest) GetRules() []*Rule {
	if m != nil {
		return m.Rules
	}
	return nil
}

type InitResponse struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *InitResponse) Reset()                    { *m = InitResponse{} }
func (m *InitResponse) String() string            { return proto.CompactTextString(m) }
func (*InitResponse) ProtoMessage()               {}
func (*InitResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *InitResponse) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

// Close
type CloseRequest struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *CloseRequest) Reset()                    { *m = CloseRequest{} }
func (m *CloseRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseRequest) ProtoMessage()               {}
func (*CloseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CloseRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

// Kill
type KillProcessRequest struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *KillProcessRequest) Reset()                    { *m = KillProcessRequest{} }
func (m *KillProcessRequest) String() string            { return proto.CompactTextString(m) }
func (*KillProcessRequest) ProtoMessage()               {}
func (*KillProcessRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *KillProcessRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

// Parse
type ParsedSQL struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *ParsedSQL) Reset()                    { *m = ParsedSQL{} }
func (m *ParsedSQL) String() string            { return proto.CompactTextString(m) }
func (*ParsedSQL) ProtoMessage()               {}
func (*ParsedSQL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ParsedSQL) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type ParseRequest struct {
	Session *Session   `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Sql     *ParsedSQL `protobuf:"bytes,2,opt,name=sql" json:"sql,omitempty"`
}

func (m *ParseRequest) Reset()                    { *m = ParseRequest{} }
func (m *ParseRequest) String() string            { return proto.CompactTextString(m) }
func (*ParseRequest) ProtoMessage()               {}
func (*ParseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ParseRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ParseRequest) GetSql() *ParsedSQL {
	if m != nil {
		return m.Sql
	}
	return nil
}

type Node struct {
	Text        string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
	Type        string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Fingerprint string `protobuf:"bytes,3,opt,name=fingerprint" json:"fingerprint,omitempty"`
	StartLine   uint64 `protobuf:"varint,4,opt,name=startLine" json:"startLine,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Node) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Node) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Node) GetFingerprint() string {
	if m != nil {
		return m.Fingerprint
	}
	return ""
}

func (m *Node) GetStartLine() uint64 {
	if m != nil {
		return m.StartLine
	}
	return 0
}

type ParseResponse struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *ParseResponse) Reset()                    { *m = ParseResponse{} }
func (m *ParseResponse) String() string            { return proto.CompactTextString(m) }
func (*ParseResponse) ProtoMessage()               {}
func (*ParseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ParseResponse) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

// Audit
type AuditSQL struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *AuditSQL) Reset()                    { *m = AuditSQL{} }
func (m *AuditSQL) String() string            { return proto.CompactTextString(m) }
func (*AuditSQL) ProtoMessage()               {}
func (*AuditSQL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AuditSQL) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type AuditRequest struct {
	Session *Session    `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Sqls    []*AuditSQL `protobuf:"bytes,2,rep,name=sqls" json:"sqls,omitempty"`
}

func (m *AuditRequest) Reset()                    { *m = AuditRequest{} }
func (m *AuditRequest) String() string            { return proto.CompactTextString(m) }
func (*AuditRequest) ProtoMessage()               {}
func (*AuditRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *AuditRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *AuditRequest) GetSqls() []*AuditSQL {
	if m != nil {
		return m.Sqls
	}
	return nil
}

type AuditResult struct {
	Message  string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Level    string `protobuf:"bytes,2,opt,name=level" json:"level,omitempty"`
	RuleName string `protobuf:"bytes,3,opt,name=rule_name,json=ruleName" json:"rule_name,omitempty"`
}

func (m *AuditResult) Reset()                    { *m = AuditResult{} }
func (m *AuditResult) String() string            { return proto.CompactTextString(m) }
func (*AuditResult) ProtoMessage()               {}
func (*AuditResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *AuditResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *AuditResult) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *AuditResult) GetRuleName() string {
	if m != nil {
		return m.RuleName
	}
	return ""
}

type AuditResults struct {
	Results []*AuditResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *AuditResults) Reset()                    { *m = AuditResults{} }
func (m *AuditResults) String() string            { return proto.CompactTextString(m) }
func (*AuditResults) ProtoMessage()               {}
func (*AuditResults) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AuditResults) GetResults() []*AuditResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type AuditResponse struct {
	AuditResults []*AuditResults `protobuf:"bytes,1,rep,name=auditResults" json:"auditResults,omitempty"`
}

func (m *AuditResponse) Reset()                    { *m = AuditResponse{} }
func (m *AuditResponse) String() string            { return proto.CompactTextString(m) }
func (*AuditResponse) ProtoMessage()               {}
func (*AuditResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AuditResponse) GetAuditResults() []*AuditResults {
	if m != nil {
		return m.AuditResults
	}
	return nil
}

// GenRollbackSQL
type NeedRollbackSQL struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *NeedRollbackSQL) Reset()                    { *m = NeedRollbackSQL{} }
func (m *NeedRollbackSQL) String() string            { return proto.CompactTextString(m) }
func (*NeedRollbackSQL) ProtoMessage()               {}
func (*NeedRollbackSQL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *NeedRollbackSQL) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type GenRollbackSQLRequest struct {
	Session *Session         `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Sql     *NeedRollbackSQL `protobuf:"bytes,2,opt,name=sql" json:"sql,omitempty"`
}

func (m *GenRollbackSQLRequest) Reset()                    { *m = GenRollbackSQLRequest{} }
func (m *GenRollbackSQLRequest) String() string            { return proto.CompactTextString(m) }
func (*GenRollbackSQLRequest) ProtoMessage()               {}
func (*GenRollbackSQLRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GenRollbackSQLRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *GenRollbackSQLRequest) GetSql() *NeedRollbackSQL {
	if m != nil {
		return m.Sql
	}
	return nil
}

type RollbackSQL struct {
	Query   string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *RollbackSQL) Reset()                    { *m = RollbackSQL{} }
func (m *RollbackSQL) String() string            { return proto.CompactTextString(m) }
func (*RollbackSQL) ProtoMessage()               {}
func (*RollbackSQL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RollbackSQL) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *RollbackSQL) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type GenRollbackSQLResponse struct {
	Sql *RollbackSQL `protobuf:"bytes,1,opt,name=sql" json:"sql,omitempty"`
}

func (m *GenRollbackSQLResponse) Reset()                    { *m = GenRollbackSQLResponse{} }
func (m *GenRollbackSQLResponse) String() string            { return proto.CompactTextString(m) }
func (*GenRollbackSQLResponse) ProtoMessage()               {}
func (*GenRollbackSQLResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GenRollbackSQLResponse) GetSql() *RollbackSQL {
	if m != nil {
		return m.Sql
	}
	return nil
}

// Ping
type PingRequest struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *PingRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

// Exec
type ExecSQL struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *ExecSQL) Reset()                    { *m = ExecSQL{} }
func (m *ExecSQL) String() string            { return proto.CompactTextString(m) }
func (*ExecSQL) ProtoMessage()               {}
func (*ExecSQL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *ExecSQL) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type ExecRequest struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Sql     *ExecSQL `protobuf:"bytes,2,opt,name=sql" json:"sql,omitempty"`
}

func (m *ExecRequest) Reset()                    { *m = ExecRequest{} }
func (m *ExecRequest) String() string            { return proto.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()               {}
func (*ExecRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ExecRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExecRequest) GetSql() *ExecSQL {
	if m != nil {
		return m.Sql
	}
	return nil
}

type ExecResult struct {
	LastInsertId      int64  `protobuf:"varint,1,opt,name=lastInsertId" json:"lastInsertId,omitempty"`
	LastInsertIdError string `protobuf:"bytes,2,opt,name=lastInsertIdError" json:"lastInsertIdError,omitempty"`
	RowsAffected      int64  `protobuf:"varint,3,opt,name=rowsAffected" json:"rowsAffected,omitempty"`
	RowsAffectedError string `protobuf:"bytes,4,opt,name=rowsAffectedError" json:"rowsAffectedError,omitempty"`
}

func (m *ExecResult) Reset()                    { *m = ExecResult{} }
func (m *ExecResult) String() string            { return proto.CompactTextString(m) }
func (*ExecResult) ProtoMessage()               {}
func (*ExecResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ExecResult) GetLastInsertId() int64 {
	if m != nil {
		return m.LastInsertId
	}
	return 0
}

func (m *ExecResult) GetLastInsertIdError() string {
	if m != nil {
		return m.LastInsertIdError
	}
	return ""
}

func (m *ExecResult) GetRowsAffected() int64 {
	if m != nil {
		return m.RowsAffected
	}
	return 0
}

func (m *ExecResult) GetRowsAffectedError() string {
	if m != nil {
		return m.RowsAffectedError
	}
	return ""
}

type ExecResponse struct {
	Result *ExecResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ExecResponse) Reset()                    { *m = ExecResponse{} }
func (m *ExecResponse) String() string            { return proto.CompactTextString(m) }
func (*ExecResponse) ProtoMessage()               {}
func (*ExecResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ExecResponse) GetResult() *ExecResult {
	if m != nil {
		return m.Result
	}
	return nil
}

// Tx
type TxRequest struct {
	Session *Session   `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Sqls    []*ExecSQL `protobuf:"bytes,2,rep,name=sqls" json:"sqls,omitempty"`
}

func (m *TxRequest) Reset()                    { *m = TxRequest{} }
func (m *TxRequest) String() string            { return proto.CompactTextString(m) }
func (*TxRequest) ProtoMessage()               {}
func (*TxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *TxRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *TxRequest) GetSqls() []*ExecSQL {
	if m != nil {
		return m.Sqls
	}
	return nil
}

type TxResponse struct {
	Results []*ExecResult `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *TxResponse) Reset()                    { *m = TxResponse{} }
func (m *TxResponse) String() string            { return proto.CompactTextString(m) }
func (*TxResponse) ProtoMessage()               {}
func (*TxResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *TxResponse) GetResults() []*ExecResult {
	if m != nil {
		return m.Results
	}
	return nil
}

// Query
type QuerySQL struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *QuerySQL) Reset()                    { *m = QuerySQL{} }
func (m *QuerySQL) String() string            { return proto.CompactTextString(m) }
func (*QuerySQL) ProtoMessage()               {}
func (*QuerySQL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *QuerySQL) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type QueryConf struct {
	TimeoutSecond uint32 `protobuf:"varint,1,opt,name=timeoutSecond" json:"timeoutSecond,omitempty"`
}

func (m *QueryConf) Reset()                    { *m = QueryConf{} }
func (m *QueryConf) String() string            { return proto.CompactTextString(m) }
func (*QueryConf) ProtoMessage()               {}
func (*QueryConf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *QueryConf) GetTimeoutSecond() uint32 {
	if m != nil {
		return m.TimeoutSecond
	}
	return 0
}

type QueryRequest struct {
	Session *Session   `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Sql     *QuerySQL  `protobuf:"bytes,2,opt,name=sql" json:"sql,omitempty"`
	Conf    *QueryConf `protobuf:"bytes,3,opt,name=conf" json:"conf,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *QueryRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *QueryRequest) GetSql() *QuerySQL {
	if m != nil {
		return m.Sql
	}
	return nil
}

func (m *QueryRequest) GetConf() *QueryConf {
	if m != nil {
		return m.Conf
	}
	return nil
}

type QueryResponse struct {
	Column []*Param          `protobuf:"bytes,1,rep,name=column" json:"column,omitempty"`
	Rows   []*QueryResultRow `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *QueryResponse) GetColumn() []*Param {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *QueryResponse) GetRows() []*QueryResultRow {
	if m != nil {
		return m.Rows
	}
	return nil
}

type QueryResultRow struct {
	Values []*QueryResultValue `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *QueryResultRow) Reset()                    { *m = QueryResultRow{} }
func (m *QueryResultRow) String() string            { return proto.CompactTextString(m) }
func (*QueryResultRow) ProtoMessage()               {}
func (*QueryResultRow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *QueryResultRow) GetValues() []*QueryResultValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type QueryResultValue struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *QueryResultValue) Reset()                    { *m = QueryResultValue{} }
func (m *QueryResultValue) String() string            { return proto.CompactTextString(m) }
func (*QueryResultValue) ProtoMessage()               {}
func (*QueryResultValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *QueryResultValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// explain
type ExplainSQL struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *ExplainSQL) Reset()                    { *m = ExplainSQL{} }
func (m *ExplainSQL) String() string            { return proto.CompactTextString(m) }
func (*ExplainSQL) ProtoMessage()               {}
func (*ExplainSQL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ExplainSQL) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type ExplainRequest struct {
	Session *Session    `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Sql     *ExplainSQL `protobuf:"bytes,2,opt,name=sql" json:"sql,omitempty"`
}

func (m *ExplainRequest) Reset()                    { *m = ExplainRequest{} }
func (m *ExplainRequest) String() string            { return proto.CompactTextString(m) }
func (*ExplainRequest) ProtoMessage()               {}
func (*ExplainRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ExplainRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExplainRequest) GetSql() *ExplainSQL {
	if m != nil {
		return m.Sql
	}
	return nil
}

type ExplainResponse struct {
	ClassicResult *ExplainClassicResult `protobuf:"bytes,1,opt,name=classicResult" json:"classicResult,omitempty"`
}

func (m *ExplainResponse) Reset()                    { *m = ExplainResponse{} }
func (m *ExplainResponse) String() string            { return proto.CompactTextString(m) }
func (*ExplainResponse) ProtoMessage()               {}
func (*ExplainResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ExplainResponse) GetClassicResult() *ExplainClassicResult {
	if m != nil {
		return m.ClassicResult
	}
	return nil
}

type ExplainClassicResult struct {
	Data *TabularData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *ExplainClassicResult) Reset()                    { *m = ExplainClassicResult{} }
func (m *ExplainClassicResult) String() string            { return proto.CompactTextString(m) }
func (*ExplainClassicResult) ProtoMessage()               {}
func (*ExplainClassicResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *ExplainClassicResult) GetData() *TabularData {
	if m != nil {
		return m.Data
	}
	return nil
}

// gETDatabases
type GetDatabasesRequest struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
}

func (m *GetDatabasesRequest) Reset()                    { *m = GetDatabasesRequest{} }
func (m *GetDatabasesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDatabasesRequest) ProtoMessage()               {}
func (*GetDatabasesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *GetDatabasesRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type Database struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Database) Reset()                    { *m = Database{} }
func (m *Database) String() string            { return proto.CompactTextString(m) }
func (*Database) ProtoMessage()               {}
func (*Database) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *Database) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetDatabasesResponse struct {
	Databases []*Database `protobuf:"bytes,1,rep,name=databases" json:"databases,omitempty"`
}

func (m *GetDatabasesResponse) Reset()                    { *m = GetDatabasesResponse{} }
func (m *GetDatabasesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDatabasesResponse) ProtoMessage()               {}
func (*GetDatabasesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *GetDatabasesResponse) GetDatabases() []*Database {
	if m != nil {
		return m.Databases
	}
	return nil
}

// GetTableMeta
type Table struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Schema string `protobuf:"bytes,2,opt,name=schema" json:"schema,omitempty"`
}

func (m *Table) Reset()                    { *m = Table{} }
func (m *Table) String() string            { return proto.CompactTextString(m) }
func (*Table) ProtoMessage()               {}
func (*Table) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *Table) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Table) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

type GetTableMetaRequest struct {
	Session *Session `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Table   *Table   `protobuf:"bytes,2,opt,name=table" json:"table,omitempty"`
}

func (m *GetTableMetaRequest) Reset()                    { *m = GetTableMetaRequest{} }
func (m *GetTableMetaRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTableMetaRequest) ProtoMessage()               {}
func (*GetTableMetaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *GetTableMetaRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *GetTableMetaRequest) GetTable() *Table {
	if m != nil {
		return m.Table
	}
	return nil
}

type GetTableMetaResponse struct {
	TableMeta *TableMeta `protobuf:"bytes,1,opt,name=tableMeta" json:"tableMeta,omitempty"`
}

func (m *GetTableMetaResponse) Reset()                    { *m = GetTableMetaResponse{} }
func (m *GetTableMetaResponse) String() string            { return proto.CompactTextString(m) }
func (*GetTableMetaResponse) ProtoMessage()               {}
func (*GetTableMetaResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *GetTableMetaResponse) GetTableMeta() *TableMeta {
	if m != nil {
		return m.TableMeta
	}
	return nil
}

type TableMeta struct {
	ColumnsInfo    *ColumnsInfo `protobuf:"bytes,1,opt,name=columnsInfo" json:"columnsInfo,omitempty"`
	IndexesInfo    *IndexesInfo `protobuf:"bytes,2,opt,name=indexesInfo" json:"indexesInfo,omitempty"`
	CreateTableSQL string       `protobuf:"bytes,3,opt,name=createTableSQL" json:"createTableSQL,omitempty"`
	Message        string       `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
}

func (m *TableMeta) Reset()                    { *m = TableMeta{} }
func (m *TableMeta) String() string            { return proto.CompactTextString(m) }
func (*TableMeta) ProtoMessage()               {}
func (*TableMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *TableMeta) GetColumnsInfo() *ColumnsInfo {
	if m != nil {
		return m.ColumnsInfo
	}
	return nil
}

func (m *TableMeta) GetIndexesInfo() *IndexesInfo {
	if m != nil {
		return m.IndexesInfo
	}
	return nil
}

func (m *TableMeta) GetCreateTableSQL() string {
	if m != nil {
		return m.CreateTableSQL
	}
	return ""
}

func (m *TableMeta) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ColumnsInfo struct {
	Data *TabularData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *ColumnsInfo) Reset()                    { *m = ColumnsInfo{} }
func (m *ColumnsInfo) String() string            { return proto.CompactTextString(m) }
func (*ColumnsInfo) ProtoMessage()               {}
func (*ColumnsInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *ColumnsInfo) GetData() *TabularData {
	if m != nil {
		return m.Data
	}
	return nil
}

type IndexesInfo struct {
	Data *TabularData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *IndexesInfo) Reset()                    { *m = IndexesInfo{} }
func (m *IndexesInfo) String() string            { return proto.CompactTextString(m) }
func (*IndexesInfo) ProtoMessage()               {}
func (*IndexesInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *IndexesInfo) GetData() *TabularData {
	if m != nil {
		return m.Data
	}
	return nil
}

type TabularDataHead struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
}

func (m *TabularDataHead) Reset()                    { *m = TabularDataHead{} }
func (m *TabularDataHead) String() string            { return proto.CompactTextString(m) }
func (*TabularDataHead) ProtoMessage()               {}
func (*TabularDataHead) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *TabularDataHead) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TabularDataHead) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

type TabularDataRows struct {
	Items []string `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
}

func (m *TabularDataRows) Reset()                    { *m = TabularDataRows{} }
func (m *TabularDataRows) String() string            { return proto.CompactTextString(m) }
func (*TabularDataRows) ProtoMessage()               {}
func (*TabularDataRows) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *TabularDataRows) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

type TabularData struct {
	Columns []*TabularDataHead `protobuf:"bytes,1,rep,name=columns" json:"columns,omitempty"`
	Rows    []*TabularDataRows `protobuf:"bytes,2,rep,name=rows" json:"rows,omitempty"`
}

func (m *TabularData) Reset()                    { *m = TabularData{} }
func (m *TabularData) String() string            { return proto.CompactTextString(m) }
func (*TabularData) ProtoMessage()               {}
func (*TabularData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *TabularData) GetColumns() []*TabularDataHead {
	if m != nil {
		return m.Columns
	}
	return nil
}

func (m *TabularData) GetRows() []*TabularDataRows {
	if m != nil {
		return m.Rows
	}
	return nil
}

// ExtractTableFromSQL
type ExtractedSQL struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *ExtractedSQL) Reset()                    { *m = ExtractedSQL{} }
func (m *ExtractedSQL) String() string            { return proto.CompactTextString(m) }
func (*ExtractedSQL) ProtoMessage()               {}
func (*ExtractedSQL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *ExtractedSQL) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type ExtractTableFromSQLRequest struct {
	Session *Session      `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Sql     *ExtractedSQL `protobuf:"bytes,2,opt,name=sql" json:"sql,omitempty"`
}

func (m *ExtractTableFromSQLRequest) Reset()                    { *m = ExtractTableFromSQLRequest{} }
func (m *ExtractTableFromSQLRequest) String() string            { return proto.CompactTextString(m) }
func (*ExtractTableFromSQLRequest) ProtoMessage()               {}
func (*ExtractTableFromSQLRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *ExtractTableFromSQLRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *ExtractTableFromSQLRequest) GetSql() *ExtractedSQL {
	if m != nil {
		return m.Sql
	}
	return nil
}

type ExtractTableFromSQLResponse struct {
	Tables []*Table `protobuf:"bytes,1,rep,name=tables" json:"tables,omitempty"`
}

func (m *ExtractTableFromSQLResponse) Reset()                    { *m = ExtractTableFromSQLResponse{} }
func (m *ExtractTableFromSQLResponse) String() string            { return proto.CompactTextString(m) }
func (*ExtractTableFromSQLResponse) ProtoMessage()               {}
func (*ExtractTableFromSQLResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *ExtractTableFromSQLResponse) GetTables() []*Table {
	if m != nil {
		return m.Tables
	}
	return nil
}

// EstimateSQLAffectRows
type AffectRowsSQL struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *AffectRowsSQL) Reset()                    { *m = AffectRowsSQL{} }
func (m *AffectRowsSQL) String() string            { return proto.CompactTextString(m) }
func (*AffectRowsSQL) ProtoMessage()               {}
func (*AffectRowsSQL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *AffectRowsSQL) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type EstimateSQLAffectRowsRequest struct {
	Session *Session       `protobuf:"bytes,1,opt,name=session" json:"session,omitempty"`
	Sql     *AffectRowsSQL `protobuf:"bytes,2,opt,name=sql" json:"sql,omitempty"`
}

func (m *EstimateSQLAffectRowsRequest) Reset()                    { *m = EstimateSQLAffectRowsRequest{} }
func (m *EstimateSQLAffectRowsRequest) String() string            { return proto.CompactTextString(m) }
func (*EstimateSQLAffectRowsRequest) ProtoMessage()               {}
func (*EstimateSQLAffectRowsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *EstimateSQLAffectRowsRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

func (m *EstimateSQLAffectRowsRequest) GetSql() *AffectRowsSQL {
	if m != nil {
		return m.Sql
	}
	return nil
}

type EstimateSQLAffectRowsResponse struct {
	Count      int64  `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
	ErrMessage string `protobuf:"bytes,2,opt,name=errMessage" json:"errMessage,omitempty"`
}

func (m *EstimateSQLAffectRowsResponse) Reset()                    { *m = EstimateSQLAffectRowsResponse{} }
func (m *EstimateSQLAffectRowsResponse) String() string            { return proto.CompactTextString(m) }
func (*EstimateSQLAffectRowsResponse) ProtoMessage()               {}
func (*EstimateSQLAffectRowsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *EstimateSQLAffectRowsResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *EstimateSQLAffectRowsResponse) GetErrMessage() string {
	if m != nil {
		return m.ErrMessage
	}
	return ""
}

type KillProcessResponse struct {
	ErrMessage string `protobuf:"bytes,1,opt,name=errMessage" json:"errMessage,omitempty"`
}

func (m *KillProcessResponse) Reset()                    { *m = KillProcessResponse{} }
func (m *KillProcessResponse) String() string            { return proto.CompactTextString(m) }
func (*KillProcessResponse) ProtoMessage()               {}
func (*KillProcessResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *KillProcessResponse) GetErrMessage() string {
	if m != nil {
		return m.ErrMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "protoV2.Empty")
	proto.RegisterType((*Session)(nil), "protoV2.Session")
	proto.RegisterType((*Param)(nil), "protoV2.Param")
	proto.RegisterType((*DSN)(nil), "protoV2.DSN")
	proto.RegisterType((*Rule)(nil), "protoV2.Rule")
	proto.RegisterType((*Knowledge)(nil), "protoV2.Knowledge")
	proto.RegisterType((*MetasResponse)(nil), "protoV2.MetasResponse")
	proto.RegisterType((*InitRequest)(nil), "protoV2.InitRequest")
	proto.RegisterType((*InitResponse)(nil), "protoV2.InitResponse")
	proto.RegisterType((*CloseRequest)(nil), "protoV2.CloseRequest")
	proto.RegisterType((*KillProcessRequest)(nil), "protoV2.KillProcessRequest")
	proto.RegisterType((*ParsedSQL)(nil), "protoV2.ParsedSQL")
	proto.RegisterType((*ParseRequest)(nil), "protoV2.ParseRequest")
	proto.RegisterType((*Node)(nil), "protoV2.Node")
	proto.RegisterType((*ParseResponse)(nil), "protoV2.ParseResponse")
	proto.RegisterType((*AuditSQL)(nil), "protoV2.AuditSQL")
	proto.RegisterType((*AuditRequest)(nil), "protoV2.AuditRequest")
	proto.RegisterType((*AuditResult)(nil), "protoV2.AuditResult")
	proto.RegisterType((*AuditResults)(nil), "protoV2.AuditResults")
	proto.RegisterType((*AuditResponse)(nil), "protoV2.AuditResponse")
	proto.RegisterType((*NeedRollbackSQL)(nil), "protoV2.NeedRollbackSQL")
	proto.RegisterType((*GenRollbackSQLRequest)(nil), "protoV2.GenRollbackSQLRequest")
	proto.RegisterType((*RollbackSQL)(nil), "protoV2.RollbackSQL")
	proto.RegisterType((*GenRollbackSQLResponse)(nil), "protoV2.GenRollbackSQLResponse")
	proto.RegisterType((*PingRequest)(nil), "protoV2.PingRequest")
	proto.RegisterType((*ExecSQL)(nil), "protoV2.ExecSQL")
	proto.RegisterType((*ExecRequest)(nil), "protoV2.ExecRequest")
	proto.RegisterType((*ExecResult)(nil), "protoV2.ExecResult")
	proto.RegisterType((*ExecResponse)(nil), "protoV2.ExecResponse")
	proto.RegisterType((*TxRequest)(nil), "protoV2.TxRequest")
	proto.RegisterType((*TxResponse)(nil), "protoV2.TxResponse")
	proto.RegisterType((*QuerySQL)(nil), "protoV2.QuerySQL")
	proto.RegisterType((*QueryConf)(nil), "protoV2.QueryConf")
	proto.RegisterType((*QueryRequest)(nil), "protoV2.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "protoV2.QueryResponse")
	proto.RegisterType((*QueryResultRow)(nil), "protoV2.QueryResultRow")
	proto.RegisterType((*QueryResultValue)(nil), "protoV2.QueryResultValue")
	proto.RegisterType((*ExplainSQL)(nil), "protoV2.ExplainSQL")
	proto.RegisterType((*ExplainRequest)(nil), "protoV2.ExplainRequest")
	proto.RegisterType((*ExplainResponse)(nil), "protoV2.ExplainResponse")
	proto.RegisterType((*ExplainClassicResult)(nil), "protoV2.ExplainClassicResult")
	proto.RegisterType((*GetDatabasesRequest)(nil), "protoV2.GetDatabasesRequest")
	proto.RegisterType((*Database)(nil), "protoV2.Database")
	proto.RegisterType((*GetDatabasesResponse)(nil), "protoV2.GetDatabasesResponse")
	proto.RegisterType((*Table)(nil), "protoV2.Table")
	proto.RegisterType((*GetTableMetaRequest)(nil), "protoV2.GetTableMetaRequest")
	proto.RegisterType((*GetTableMetaResponse)(nil), "protoV2.GetTableMetaResponse")
	proto.RegisterType((*TableMeta)(nil), "protoV2.TableMeta")
	proto.RegisterType((*ColumnsInfo)(nil), "protoV2.ColumnsInfo")
	proto.RegisterType((*IndexesInfo)(nil), "protoV2.IndexesInfo")
	proto.RegisterType((*TabularDataHead)(nil), "protoV2.TabularDataHead")
	proto.RegisterType((*TabularDataRows)(nil), "protoV2.TabularDataRows")
	proto.RegisterType((*TabularData)(nil), "protoV2.TabularData")
	proto.RegisterType((*ExtractedSQL)(nil), "protoV2.ExtractedSQL")
	proto.RegisterType((*ExtractTableFromSQLRequest)(nil), "protoV2.ExtractTableFromSQLRequest")
	proto.RegisterType((*ExtractTableFromSQLResponse)(nil), "protoV2.ExtractTableFromSQLResponse")
	proto.RegisterType((*AffectRowsSQL)(nil), "protoV2.AffectRowsSQL")
	proto.RegisterType((*EstimateSQLAffectRowsRequest)(nil), "protoV2.EstimateSQLAffectRowsRequest")
	proto.RegisterType((*EstimateSQLAffectRowsResponse)(nil), "protoV2.EstimateSQLAffectRowsResponse")
	proto.RegisterType((*KillProcessResponse)(nil), "protoV2.KillProcessResponse")
	proto.RegisterEnum("protoV2.OptionalModule", OptionalModule_name, OptionalModule_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Driver service

type DriverClient interface {
	// Metas returns some base info from plugin server.
	Metas(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetasResponse, error)
	// Init will should be called at first before calling following methods.
	// It will pass some necessary info to plugin server. In the beginning,
	// we consider that put this info to the executable binary environment.
	// We put all communication on gRPC for unification in the end.
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*Empty, error)
	KillProcess(ctx context.Context, in *KillProcessRequest, opts ...grpc.CallOption) (*KillProcessResponse, error)
	// db audit
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error)
	Audit(ctx context.Context, in *AuditRequest, opts ...grpc.CallOption) (*AuditResponse, error)
	GenRollbackSQL(ctx context.Context, in *GenRollbackSQLRequest, opts ...grpc.CallOption) (*GenRollbackSQLResponse, error)
	// db executor
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Empty, error)
	Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	Tx(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*TxResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	Explain(ctx context.Context, in *ExplainRequest, opts ...grpc.CallOption) (*ExplainResponse, error)
	// db metadata
	GetDatabases(ctx context.Context, in *GetDatabasesRequest, opts ...grpc.CallOption) (*GetDatabasesResponse, error)
	GetTableMeta(ctx context.Context, in *GetTableMetaRequest, opts ...grpc.CallOption) (*GetTableMetaResponse, error)
	ExtractTableFromSQL(ctx context.Context, in *ExtractTableFromSQLRequest, opts ...grpc.CallOption) (*ExtractTableFromSQLResponse, error)
	EstimateSQLAffectRows(ctx context.Context, in *EstimateSQLAffectRowsRequest, opts ...grpc.CallOption) (*EstimateSQLAffectRowsResponse, error)
}

type driverClient struct {
	cc *grpc.ClientConn
}

func NewDriverClient(cc *grpc.ClientConn) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) Metas(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*MetasResponse, error) {
	out := new(MetasResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/Metas", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitResponse, error) {
	out := new(InitResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/Init", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/protoV2.Driver/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) KillProcess(ctx context.Context, in *KillProcessRequest, opts ...grpc.CallOption) (*KillProcessResponse, error) {
	out := new(KillProcessResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/KillProcess", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error) {
	out := new(ParseResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/Parse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Audit(ctx context.Context, in *AuditRequest, opts ...grpc.CallOption) (*AuditResponse, error) {
	out := new(AuditResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/Audit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GenRollbackSQL(ctx context.Context, in *GenRollbackSQLRequest, opts ...grpc.CallOption) (*GenRollbackSQLResponse, error) {
	out := new(GenRollbackSQLResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/GenRollbackSQL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/protoV2.Driver/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Exec(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/Exec", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Tx(ctx context.Context, in *TxRequest, opts ...grpc.CallOption) (*TxResponse, error) {
	out := new(TxResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/Tx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Explain(ctx context.Context, in *ExplainRequest, opts ...grpc.CallOption) (*ExplainResponse, error) {
	out := new(ExplainResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/Explain", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetDatabases(ctx context.Context, in *GetDatabasesRequest, opts ...grpc.CallOption) (*GetDatabasesResponse, error) {
	out := new(GetDatabasesResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/GetDatabases", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) GetTableMeta(ctx context.Context, in *GetTableMetaRequest, opts ...grpc.CallOption) (*GetTableMetaResponse, error) {
	out := new(GetTableMetaResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/GetTableMeta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) ExtractTableFromSQL(ctx context.Context, in *ExtractTableFromSQLRequest, opts ...grpc.CallOption) (*ExtractTableFromSQLResponse, error) {
	out := new(ExtractTableFromSQLResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/ExtractTableFromSQL", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) EstimateSQLAffectRows(ctx context.Context, in *EstimateSQLAffectRowsRequest, opts ...grpc.CallOption) (*EstimateSQLAffectRowsResponse, error) {
	out := new(EstimateSQLAffectRowsResponse)
	err := grpc.Invoke(ctx, "/protoV2.Driver/EstimateSQLAffectRows", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Driver service

type DriverServer interface {
	// Metas returns some base info from plugin server.
	Metas(context.Context, *Empty) (*MetasResponse, error)
	// Init will should be called at first before calling following methods.
	// It will pass some necessary info to plugin server. In the beginning,
	// we consider that put this info to the executable binary environment.
	// We put all communication on gRPC for unification in the end.
	Init(context.Context, *InitRequest) (*InitResponse, error)
	Close(context.Context, *CloseRequest) (*Empty, error)
	KillProcess(context.Context, *KillProcessRequest) (*KillProcessResponse, error)
	// db audit
	Parse(context.Context, *ParseRequest) (*ParseResponse, error)
	Audit(context.Context, *AuditRequest) (*AuditResponse, error)
	GenRollbackSQL(context.Context, *GenRollbackSQLRequest) (*GenRollbackSQLResponse, error)
	// db executor
	Ping(context.Context, *PingRequest) (*Empty, error)
	Exec(context.Context, *ExecRequest) (*ExecResponse, error)
	Tx(context.Context, *TxRequest) (*TxResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	Explain(context.Context, *ExplainRequest) (*ExplainResponse, error)
	// db metadata
	GetDatabases(context.Context, *GetDatabasesRequest) (*GetDatabasesResponse, error)
	GetTableMeta(context.Context, *GetTableMetaRequest) (*GetTableMetaResponse, error)
	ExtractTableFromSQL(context.Context, *ExtractTableFromSQLRequest) (*ExtractTableFromSQLResponse, error)
	EstimateSQLAffectRows(context.Context, *EstimateSQLAffectRowsRequest) (*EstimateSQLAffectRowsResponse, error)
}

func RegisterDriverServer(s *grpc.Server, srv DriverServer) {
	s.RegisterService(&_Driver_serviceDesc, srv)
}

func _Driver_Metas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Metas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/Metas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Metas(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_KillProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).KillProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/KillProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).KillProcess(ctx, req.(*KillProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Audit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Audit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/Audit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Audit(ctx, req.(*AuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GenRollbackSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenRollbackSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GenRollbackSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/GenRollbackSQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GenRollbackSQL(ctx, req.(*GenRollbackSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Exec(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Tx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Tx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/Tx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Tx(ctx, req.(*TxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Explain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExplainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Explain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/Explain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Explain(ctx, req.(*ExplainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/GetDatabases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetDatabases(ctx, req.(*GetDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_GetTableMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).GetTableMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/GetTableMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).GetTableMeta(ctx, req.(*GetTableMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_ExtractTableFromSQL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractTableFromSQLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).ExtractTableFromSQL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/ExtractTableFromSQL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).ExtractTableFromSQL(ctx, req.(*ExtractTableFromSQLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_EstimateSQLAffectRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateSQLAffectRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).EstimateSQLAffectRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoV2.Driver/EstimateSQLAffectRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).EstimateSQLAffectRows(ctx, req.(*EstimateSQLAffectRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Driver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoV2.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Metas",
			Handler:    _Driver_Metas_Handler,
		},
		{
			MethodName: "Init",
			Handler:    _Driver_Init_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Driver_Close_Handler,
		},
		{
			MethodName: "KillProcess",
			Handler:    _Driver_KillProcess_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _Driver_Parse_Handler,
		},
		{
			MethodName: "Audit",
			Handler:    _Driver_Audit_Handler,
		},
		{
			MethodName: "GenRollbackSQL",
			Handler:    _Driver_GenRollbackSQL_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Driver_Ping_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Driver_Exec_Handler,
		},
		{
			MethodName: "Tx",
			Handler:    _Driver_Tx_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Driver_Query_Handler,
		},
		{
			MethodName: "Explain",
			Handler:    _Driver_Explain_Handler,
		},
		{
			MethodName: "GetDatabases",
			Handler:    _Driver_GetDatabases_Handler,
		},
		{
			MethodName: "GetTableMeta",
			Handler:    _Driver_GetTableMeta_Handler,
		},
		{
			MethodName: "ExtractTableFromSQL",
			Handler:    _Driver_ExtractTableFromSQL_Handler,
		},
		{
			MethodName: "EstimateSQLAffectRows",
			Handler:    _Driver_EstimateSQLAffectRows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "driver_v2.proto",
}

func init() { proto.RegisterFile("driver_v2.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1893 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xeb, 0x72, 0x14, 0xb9,
	0x15, 0xce, 0x5c, 0xed, 0x39, 0x73, 0xf1, 0xac, 0x6c, 0xc3, 0x30, 0x80, 0xd7, 0x11, 0xe0, 0x75,
	0xb1, 0xc4, 0xb0, 0x26, 0x61, 0x8b, 0x25, 0x49, 0x41, 0x6c, 0x07, 0xbc, 0x80, 0x63, 0x64, 0x42,
	0xaa, 0xb6, 0x6a, 0x6b, 0x57, 0x9e, 0x96, 0x67, 0xbb, 0xe8, 0x69, 0x8d, 0x5b, 0x1a, 0x6c, 0x9e,
	0x20, 0x0f, 0x90, 0x1f, 0x79, 0x8d, 0xfc, 0xd9, 0x9f, 0x79, 0x91, 0x3c, 0x4d, 0x4a, 0x97, 0xee,
	0x56, 0x5f, 0x66, 0x2f, 0xf3, 0xab, 0xa5, 0x73, 0xd3, 0xa7, 0x73, 0x8e, 0x8e, 0x8e, 0x1a, 0x56,
	0xbc, 0xc8, 0xff, 0xc0, 0xa2, 0xef, 0x3e, 0xec, 0xee, 0x4c, 0x23, 0x2e, 0x39, 0x5a, 0xd2, 0x9f,
	0x77, 0xbb, 0x78, 0x09, 0x1a, 0x07, 0x93, 0xa9, 0xfc, 0x88, 0xaf, 0xc1, 0xd2, 0x09, 0x13, 0xc2,
	0xe7, 0x21, 0xea, 0x41, 0xd5, 0xf7, 0x06, 0x95, 0xcd, 0xca, 0x76, 0x8b, 0x54, 0x7d, 0x0f, 0xff,
	0x03, 0x1a, 0xc7, 0x34, 0xa2, 0x13, 0xd4, 0x87, 0xda, 0x7b, 0xf6, 0xd1, 0x72, 0xd4, 0x10, 0xad,
	0x41, 0xe3, 0x03, 0x0d, 0x66, 0x6c, 0x50, 0xd5, 0x34, 0x33, 0x41, 0x08, 0xea, 0x1e, 0x13, 0xa3,
	0x41, 0x4d, 0x13, 0xf5, 0x58, 0xd1, 0xe4, 0xc7, 0x29, 0x1b, 0xd4, 0x0d, 0x4d, 0x8d, 0xf1, 0x8f,
	0x15, 0xa8, 0xed, 0x9f, 0x1c, 0x29, 0xde, 0x0f, 0x5c, 0x48, 0x6b, 0x58, 0x8f, 0x15, 0x6d, 0xca,
	0x23, 0x69, 0x0d, 0xeb, 0xb1, 0xa2, 0xcd, 0x04, 0x8b, 0x62, 0xbb, 0x6a, 0x8c, 0x86, 0xb0, 0x3c,
	0xa5, 0x42, 0x5c, 0xf0, 0xc8, 0xb3, 0xb6, 0x93, 0xb9, 0xe2, 0x79, 0x54, 0xd2, 0x53, 0x2a, 0xd8,
	0xa0, 0x61, 0x78, 0xf1, 0x1c, 0x7d, 0x05, 0x7d, 0xea, 0x79, 0xbe, 0xf4, 0x79, 0x48, 0x03, 0xbd,
	0x3d, 0x31, 0x68, 0x6e, 0xd6, 0xb6, 0xdb, 0xbb, 0xbd, 0x1d, 0xeb, 0x9c, 0x1d, 0x4d, 0x26, 0x05,
	0x39, 0xfc, 0xbf, 0x0a, 0xd4, 0xc9, 0x2c, 0xd0, 0x1b, 0x0d, 0xe9, 0x84, 0xc5, 0xc0, 0xd5, 0x38,
	0xd9, 0x7c, 0xd5, 0xd9, 0xfc, 0x1a, 0x34, 0x02, 0xf6, 0x81, 0x05, 0x16, 0xb9, 0x99, 0x28, 0x78,
	0x23, 0x2a, 0xd9, 0x98, 0x47, 0x1f, 0x63, 0xe8, 0xf1, 0x1c, 0x6d, 0x41, 0x73, 0x6a, 0x40, 0x35,
	0x4a, 0x41, 0x59, 0x2e, 0xda, 0x00, 0xa0, 0x61, 0xc8, 0x25, 0x55, 0x00, 0x07, 0x4d, 0x6d, 0xc5,
	0xa1, 0xa0, 0x07, 0xd0, 0x7a, 0x1f, 0xf2, 0x8b, 0x80, 0x79, 0x63, 0x36, 0x58, 0xda, 0xac, 0x6c,
	0xb7, 0x77, 0x51, 0x62, 0xea, 0x65, 0xcc, 0x21, 0xa9, 0x10, 0xbe, 0x03, 0xad, 0x84, 0x8e, 0x06,
	0xb0, 0x34, 0xe2, 0xa1, 0x64, 0x61, 0x1c, 0x9c, 0x78, 0x8a, 0x7f, 0xac, 0x42, 0xf7, 0x35, 0x93,
	0x54, 0x10, 0x26, 0xa6, 0x3c, 0x14, 0x4c, 0x41, 0x99, 0x06, 0xb3, 0xb1, 0x1f, 0x1e, 0xa5, 0x2e,
	0x71, 0x28, 0xe8, 0x01, 0xac, 0xc6, 0xde, 0xdf, 0x67, 0x67, 0x74, 0x16, 0xc8, 0xe3, 0x38, 0xc0,
	0x35, 0x52, 0xc6, 0x42, 0x5f, 0xc3, 0x20, 0x26, 0x3f, 0xcb, 0xc7, 0xaa, 0x56, 0xea, 0x96, 0xb9,
	0xf2, 0xe8, 0x16, 0x34, 0xa2, 0x59, 0xc0, 0xc4, 0xa0, 0xae, 0x15, 0xbb, 0x89, 0xa2, 0x0a, 0x24,
	0x31, 0x3c, 0xf4, 0x1a, 0xd6, 0x59, 0x48, 0x4f, 0x03, 0xe6, 0xfd, 0x6d, 0x6a, 0xb4, 0x5f, 0x73,
	0x6f, 0x16, 0x30, 0x1d, 0x84, 0xde, 0xee, 0xd5, 0x44, 0x29, 0xcb, 0x26, 0xe5, 0x5a, 0x2a, 0x15,
	0x02, 0x3e, 0xe6, 0x3a, 0x2c, 0x1d, 0xa2, 0xc7, 0x98, 0x40, 0xfb, 0x30, 0xf4, 0x25, 0x61, 0xe7,
	0x33, 0x26, 0x24, 0xda, 0x80, 0x9a, 0x27, 0x42, 0xed, 0xad, 0xf6, 0x6e, 0x27, 0xb1, 0xbf, 0x7f,
	0x72, 0x44, 0x14, 0x23, 0x85, 0x5d, 0x9d, 0x0f, 0x1b, 0x7f, 0x05, 0x1d, 0x63, 0xd3, 0x46, 0xe2,
	0x2e, 0x2c, 0x09, 0x73, 0x96, 0xad, 0xe1, 0x7e, 0xa2, 0x66, 0xcf, 0x38, 0x89, 0x05, 0x94, 0xee,
	0x5e, 0xc0, 0x05, 0x8b, 0x01, 0xfd, 0x1a, 0xdd, 0xa7, 0x80, 0x5e, 0xfa, 0x41, 0x70, 0x1c, 0xf1,
	0x11, 0x13, 0x62, 0x11, 0x0b, 0xbf, 0x85, 0xd6, 0x31, 0x8d, 0x04, 0xf3, 0x4e, 0xde, 0xbc, 0x52,
	0xa7, 0xe4, 0x7c, 0xc6, 0xa2, 0xb8, 0xc0, 0x98, 0x09, 0xfe, 0x1e, 0x3a, 0x5a, 0x64, 0x01, 0xf3,
	0xe8, 0x36, 0xd4, 0xc4, 0x79, 0xa0, 0x53, 0xcc, 0xcd, 0xfb, 0x64, 0x49, 0xa2, 0xd8, 0x38, 0x84,
	0xfa, 0x11, 0xf7, 0x74, 0xb8, 0x24, 0xbb, 0x4c, 0xca, 0x90, 0x1a, 0x27, 0x65, 0xab, 0x9a, 0x96,
	0x2d, 0xb4, 0x09, 0xed, 0x33, 0x3f, 0x1c, 0xb3, 0x68, 0x1a, 0xf9, 0xa1, 0xb4, 0x67, 0xda, 0x25,
	0xa1, 0x1b, 0xd0, 0x12, 0x92, 0x46, 0xf2, 0x95, 0x1f, 0x9a, 0x8a, 0x57, 0x27, 0x29, 0x01, 0xff,
	0x1e, 0xba, 0x76, 0x47, 0x36, 0x5e, 0xb7, 0xa0, 0x11, 0x72, 0x8f, 0x89, 0x41, 0x25, 0x17, 0x64,
	0x05, 0x8b, 0x18, 0x1e, 0xde, 0x84, 0xe5, 0x67, 0x33, 0xcf, 0x97, 0xf3, 0x3d, 0x45, 0xa1, 0xa3,
	0x25, 0x16, 0xf1, 0xd4, 0x1d, 0xa8, 0x8b, 0xf3, 0x20, 0x4e, 0xb3, 0x4f, 0x12, 0xc1, 0x78, 0x49,
	0xa2, 0xd9, 0xf8, 0x1b, 0x68, 0xdb, 0x25, 0xc4, 0x2c, 0x90, 0xaa, 0x3c, 0x4c, 0x98, 0x10, 0x74,
	0x1c, 0x9f, 0xf7, 0x78, 0x9a, 0x56, 0xbc, 0xaa, 0x5b, 0xf1, 0xae, 0x43, 0x4b, 0x65, 0xec, 0x77,
	0xba, 0x68, 0x1a, 0xbf, 0x2d, 0x2b, 0x82, 0xaa, 0x0f, 0xf8, 0xcf, 0x09, 0x7c, 0x65, 0x5b, 0xa0,
	0x1d, 0x58, 0x8a, 0xcc, 0xd0, 0xfa, 0x65, 0x2d, 0x8b, 0xca, 0xc8, 0x91, 0x58, 0x08, 0x7f, 0x0d,
	0xdd, 0x98, 0x6e, 0xdc, 0xfa, 0x18, 0x3a, 0xd4, 0x31, 0x68, 0xad, 0xac, 0x97, 0x59, 0x11, 0x24,
	0x23, 0x8a, 0x3f, 0x83, 0x95, 0x23, 0xc6, 0x3c, 0xc2, 0x83, 0xe0, 0x94, 0x8e, 0xde, 0xcf, 0xf7,
	0x39, 0x87, 0xf5, 0xe7, 0x2c, 0x74, 0xe4, 0x16, 0x71, 0xfe, 0x5d, 0x37, 0x4d, 0x07, 0x69, 0xf4,
	0xb3, 0x08, 0x4c, 0xb2, 0xfe, 0x09, 0xda, 0x3f, 0x8b, 0xca, 0x8d, 0x4b, 0x35, 0x13, 0x17, 0xfc,
	0x14, 0xae, 0xe4, 0xf1, 0x5a, 0x6f, 0x6d, 0x19, 0x10, 0x06, 0x6c, 0xea, 0xea, 0x02, 0x80, 0xc7,
	0xd0, 0x3e, 0xf6, 0xc3, 0xf1, 0x22, 0xa7, 0xfd, 0x53, 0x58, 0x3a, 0xb8, 0x64, 0xa3, 0xf9, 0xde,
	0xfc, 0x16, 0xda, 0x4a, 0x60, 0x11, 0x1f, 0x62, 0xd7, 0x87, 0xa9, 0x9c, 0x5d, 0xcf, 0x40, 0xff,
	0x4f, 0x05, 0xc0, 0xd8, 0xd7, 0xd9, 0x8b, 0xa1, 0x13, 0x50, 0x21, 0x0f, 0x43, 0xc1, 0x22, 0x79,
	0x68, 0x3a, 0x9e, 0x1a, 0xc9, 0xd0, 0xd0, 0x3d, 0xf8, 0xc4, 0x9d, 0x1f, 0x44, 0x11, 0x8f, 0xac,
	0x4f, 0x8b, 0x0c, 0x65, 0x31, 0xe2, 0x17, 0xe2, 0xd9, 0xd9, 0x19, 0x1b, 0x49, 0xe6, 0xe9, 0x14,
	0xaf, 0x91, 0x0c, 0x4d, 0x59, 0x74, 0xe7, 0xc6, 0xa2, 0xb9, 0xfe, 0x8b, 0x0c, 0xfc, 0x04, 0x3a,
	0x16, 0xb1, 0x89, 0xd2, 0xe7, 0xd0, 0x34, 0xf9, 0x6e, 0x3d, 0xb2, 0x9a, 0xd9, 0xa9, 0x3d, 0x12,
	0x56, 0x04, 0x7f, 0x0b, 0xad, 0xb7, 0x97, 0x8b, 0xd5, 0x4d, 0xb7, 0x1a, 0x14, 0xbd, 0x69, 0x8a,
	0xc1, 0x13, 0x00, 0x65, 0xde, 0x22, 0xfb, 0x5d, 0xfe, 0xb8, 0x96, 0x42, 0x4b, 0x4e, 0xeb, 0x26,
	0x2c, 0xbf, 0x51, 0x31, 0x9f, 0x9f, 0x0c, 0x5f, 0x40, 0x4b, 0x4b, 0xec, 0xf1, 0xf0, 0x0c, 0xdd,
	0x86, 0xae, 0xf4, 0x27, 0x8c, 0xcf, 0xe4, 0x09, 0x1b, 0xf1, 0xd0, 0x04, 0xab, 0x4b, 0xb2, 0x44,
	0xfc, 0xcf, 0x0a, 0x74, 0xb4, 0xce, 0x22, 0x9b, 0xbe, 0xe5, 0x66, 0x50, 0x5a, 0x01, 0x63, 0x94,
	0x3a, 0x85, 0xd0, 0x16, 0xd4, 0x47, 0x3c, 0x3c, 0xd3, 0x91, 0x75, 0xaf, 0x94, 0x04, 0x29, 0xd1,
	0x7c, 0xec, 0x41, 0xd7, 0x02, 0x49, 0x8e, 0x57, 0x73, 0xc4, 0x83, 0xd9, 0x24, 0xb4, 0xde, 0x29,
	0x34, 0x74, 0x86, 0x8b, 0x3e, 0x87, 0xba, 0xca, 0x02, 0xeb, 0xfa, 0xab, 0xd9, 0x05, 0xac, 0x13,
	0xf9, 0x05, 0xd1, 0x42, 0x78, 0x0f, 0x7a, 0x59, 0x3a, 0xfa, 0x02, 0x9a, 0xba, 0x07, 0x8f, 0x83,
	0x70, 0xad, 0xcc, 0xc0, 0x3b, 0x25, 0x41, 0xac, 0x20, 0xde, 0x86, 0x7e, 0x9e, 0x97, 0xf6, 0xf5,
	0x15, 0xa7, 0xaf, 0xc7, 0x58, 0x1d, 0x9f, 0x69, 0x40, 0xfd, 0x70, 0x7e, 0xd4, 0x46, 0xd0, 0xb3,
	0x32, 0x8b, 0x5d, 0x43, 0x4e, 0x0c, 0xdc, 0x04, 0x8a, 0x57, 0x35, 0x07, 0xf9, 0x1d, 0xac, 0x24,
	0x8b, 0x58, 0xff, 0xee, 0x41, 0x77, 0x14, 0x50, 0x21, 0x7c, 0x9b, 0x69, 0x76, 0xad, 0x9b, 0x79,
	0x1b, 0x7b, 0xae, 0x10, 0xc9, 0xea, 0xe0, 0xa7, 0xb0, 0x56, 0x26, 0x86, 0xb6, 0xa1, 0xae, 0x1a,
	0xcb, 0x42, 0x71, 0x7c, 0x4b, 0x4f, 0x67, 0x01, 0x8d, 0xf6, 0xa9, 0xa4, 0x44, 0x4b, 0xe0, 0x67,
	0xb0, 0xfa, 0x9c, 0xc9, 0x7d, 0xdb, 0x85, 0x2e, 0xd4, 0x13, 0x6d, 0xc0, 0x72, 0xac, 0x5f, 0xf6,
	0xc0, 0xc0, 0xcf, 0x61, 0x2d, 0xbb, 0x84, 0xf5, 0xc0, 0x7d, 0x68, 0xc5, 0xdd, 0x6f, 0x1c, 0xfd,
	0x34, 0x8b, 0x63, 0x71, 0x92, 0xca, 0xe0, 0x87, 0xd0, 0x78, 0xab, 0xda, 0xd6, 0xd2, 0x67, 0xcc,
	0x15, 0x68, 0x8a, 0xd1, 0x0f, 0x6c, 0x42, 0x6d, 0xb5, 0xb3, 0x33, 0x3c, 0xd6, 0x1b, 0xd4, 0x7a,
	0xaa, 0xfd, 0x5f, 0xac, 0xba, 0x34, 0xa4, 0xd2, 0xb7, 0x61, 0xee, 0xb9, 0xee, 0x54, 0x4d, 0xad,
	0x66, 0xe2, 0x17, 0x7a, 0x9b, 0xce, 0x42, 0x76, 0x9b, 0x0f, 0xa0, 0x25, 0x63, 0xa2, 0x5d, 0x0b,
	0x65, 0x2d, 0x68, 0xf1, 0x54, 0x08, 0xff, 0xb7, 0x02, 0xad, 0x84, 0x81, 0x1e, 0x41, 0xdb, 0x1c,
	0x35, 0x71, 0x18, 0x9e, 0xf1, 0x42, 0x48, 0xf7, 0x52, 0x1e, 0x71, 0x05, 0x95, 0x9e, 0x1f, 0x7a,
	0xec, 0x92, 0x19, 0xbd, 0x6a, 0x4e, 0xef, 0x30, 0xe5, 0x11, 0x57, 0x10, 0x6d, 0x41, 0x6f, 0x14,
	0x31, 0x2a, 0x99, 0x86, 0x70, 0xf2, 0xe6, 0x95, 0x6d, 0x7c, 0x72, 0x54, 0xf7, 0xce, 0xae, 0x67,
	0xef, 0xec, 0x2f, 0xa1, 0xed, 0xa0, 0xfa, 0x15, 0xc9, 0xf8, 0xa5, 0x7a, 0x6b, 0xa4, 0x48, 0x7e,
	0xb9, 0xe2, 0x63, 0x58, 0x71, 0x88, 0x2f, 0x18, 0xf5, 0x7e, 0xe9, 0x53, 0x57, 0x75, 0x4e, 0xae,
	0x3d, 0x7e, 0x21, 0x54, 0xa1, 0xf0, 0x25, 0x9b, 0x98, 0xa4, 0x6c, 0x11, 0x33, 0xc1, 0x1c, 0xda,
	0x8e, 0x20, 0xda, 0x55, 0x2f, 0x4d, 0xbd, 0x49, 0x9b, 0xbb, 0x83, 0x32, 0x7c, 0x0a, 0x0a, 0x89,
	0x05, 0xd1, 0xbd, 0x4c, 0xad, 0x2c, 0x55, 0x50, 0x00, 0x6c, 0xb1, 0xbc, 0xad, 0xae, 0x52, 0x19,
	0x51, 0x75, 0xb9, 0xce, 0xaf, 0x5f, 0xe7, 0x30, 0xb4, 0x52, 0x3a, 0x32, 0x7f, 0x8d, 0xf8, 0x64,
	0xc1, 0xae, 0xee, 0x33, 0xb7, 0x96, 0xad, 0x3b, 0x75, 0x28, 0xc5, 0x60, 0xaa, 0xd9, 0x01, 0x5c,
	0x2f, 0x5d, 0x32, 0xbd, 0x39, 0x74, 0x2e, 0x8b, 0xc2, 0xcd, 0x61, 0xce, 0x8b, 0xe5, 0xe2, 0x3b,
	0xd0, 0x35, 0xbd, 0x83, 0xda, 0xf3, 0xfc, 0x0d, 0x4a, 0xb8, 0x71, 0x20, 0xa4, 0x3f, 0xa1, 0x52,
	0xa5, 0x5d, 0xaa, 0xb1, 0xc8, 0x16, 0xb7, 0xdd, 0x2d, 0x5e, 0x49, 0x1b, 0x6b, 0x17, 0x86, 0xd9,
	0xe3, 0xdf, 0xe1, 0xe6, 0x9c, 0x55, 0xed, 0x2e, 0xd7, 0xa0, 0x31, 0xe2, 0x33, 0xfb, 0x9f, 0xa1,
	0x46, 0xcc, 0x04, 0x6d, 0x00, 0xb0, 0x28, 0x7a, 0x9d, 0xe9, 0x65, 0x1d, 0x0a, 0xfe, 0x03, 0xac,
	0x66, 0x5e, 0xa0, 0xe9, 0xaf, 0x08, 0x47, 0xad, 0x92, 0x57, 0xbb, 0xfb, 0xaf, 0x0a, 0xf4, 0x0a,
	0x6f, 0xf5, 0x5e, 0xb6, 0x31, 0xee, 0xff, 0x06, 0xb5, 0xa0, 0xa1, 0x6f, 0xc6, 0x7e, 0x05, 0xb5,
	0x55, 0xeb, 0xaa, 0x6f, 0x86, 0x7e, 0x15, 0xf5, 0xa1, 0xe3, 0x96, 0xa6, 0x7e, 0x0d, 0x5d, 0x85,
	0xd5, 0x92, 0x10, 0xf6, 0xeb, 0xe8, 0x1a, 0xac, 0x97, 0xee, 0xbb, 0xdf, 0x40, 0x2b, 0xd0, 0x76,
	0xb0, 0xf7, 0x9b, 0xbb, 0xff, 0x5e, 0x86, 0xe6, 0xbe, 0xfe, 0x51, 0x87, 0xee, 0x43, 0x43, 0xff,
	0x5c, 0x41, 0x69, 0xb0, 0xf5, 0x6f, 0xba, 0x61, 0xea, 0xe4, 0xec, 0xcf, 0x97, 0x87, 0x50, 0x3f,
	0x0c, 0x7d, 0x89, 0xdc, 0x82, 0x94, 0xbc, 0x04, 0x87, 0xeb, 0x39, 0xaa, 0x55, 0xda, 0x81, 0x86,
	0x7e, 0xfb, 0xa3, 0x94, 0xef, 0xfe, 0x0b, 0x18, 0xe6, 0x16, 0x47, 0x2f, 0x32, 0x88, 0xd1, 0xf5,
	0xf4, 0x47, 0x52, 0xe1, 0x2f, 0xc0, 0xf0, 0x46, 0x39, 0xd3, 0xae, 0xfc, 0x48, 0xff, 0x52, 0xcc,
	0xac, 0xec, 0x3e, 0xf2, 0x9d, 0x6d, 0x66, 0x5f, 0xca, 0x8f, 0xa0, 0xa1, 0x5f, 0x6d, 0xa8, 0xf0,
	0x8a, 0xcb, 0xeb, 0x65, 0x9f, 0x82, 0x6f, 0xf2, 0xd1, 0x45, 0x1b, 0x89, 0x64, 0xe9, 0xfb, 0x6d,
	0xf8, 0xe9, 0x5c, 0xbe, 0x35, 0x79, 0x0f, 0xea, 0xea, 0x1d, 0xe4, 0x78, 0xdc, 0x79, 0x16, 0x15,
	0x5c, 0xf7, 0x10, 0xea, 0xaa, 0x0b, 0x76, 0xa4, 0x9d, 0x87, 0xce, 0x70, 0x3d, 0xdf, 0x2a, 0xc7,
	0x2d, 0x75, 0xf5, 0xed, 0x25, 0x72, 0x6e, 0xb7, 0xb8, 0x99, 0x1f, 0xae, 0x66, 0x68, 0xa9, 0x73,
	0x74, 0xba, 0x3a, 0xce, 0x71, 0x9b, 0x61, 0xc7, 0x39, 0xd9, 0xd6, 0xf4, 0x8f, 0x49, 0x6e, 0xa3,
	0xab, 0xf9, 0x76, 0x29, 0xd6, 0x1d, 0x14, 0x19, 0x56, 0xfb, 0xa5, 0x3e, 0x0c, 0x49, 0x3b, 0x82,
	0x6e, 0x38, 0x8e, 0x2b, 0x34, 0x42, 0xc3, 0x9b, 0x73, 0xb8, 0x19, 0x63, 0xe9, 0x65, 0x9d, 0x31,
	0x96, 0x6f, 0x3a, 0xb2, 0xc6, 0x8a, 0x9d, 0xc2, 0xf7, 0xa5, 0x87, 0x12, 0xdd, 0xca, 0x97, 0xe2,
	0x92, 0x42, 0x3f, 0xbc, 0xfd, 0xd3, 0x42, 0x76, 0x85, 0xb3, 0x39, 0xa7, 0x1b, 0xdd, 0x49, 0xd5,
	0x7f, 0xa2, 0xd6, 0x0e, 0xb7, 0x7e, 0x4e, 0xcc, 0xac, 0xf3, 0x97, 0xce, 0x37, 0xb0, 0x73, 0xff,
	0x89, 0x95, 0x3d, 0x6d, 0xea, 0xc1, 0xc3, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xb3, 0x57, 0xbd,
	0x7d, 0xd6, 0x17, 0x00, 0x00,
}
