// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AdminAuthProviderConfiguration struct {
	ProviderID   string      `json:"providerId"`
	ID           string      `json:"id"`
	DisplayName  string      `json:"displayName"`
	Disabled     bool        `json:"disabled"`
	IconURL      *string     `json:"iconURL"`
	Description  *string     `json:"description"`
	Parameters   interface{} `json:"parameters"`
	SignInLink   *string     `json:"signInLink"`
	SignOutLink  *string     `json:"signOutLink"`
	RedirectLink *string     `json:"redirectLink"`
	MetadataLink *string     `json:"metadataLink"`
}

type AdminConnectionGrantInfo struct {
	ConnectionID string           `json:"connectionId"`
	DataSourceID string           `json:"dataSourceId"`
	SubjectID    string           `json:"subjectId"`
	SubjectType  AdminSubjectType `json:"subjectType"`
}

type AdminConnectionSearchInfo struct {
	DisplayName     string   `json:"displayName"`
	Host            string   `json:"host"`
	Port            int      `json:"port"`
	PossibleDrivers []string `json:"possibleDrivers"`
	DefaultDriver   string   `json:"defaultDriver"`
}

type AdminPermissionInfo struct {
	ID          string  `json:"id"`
	Label       *string `json:"label"`
	Description *string `json:"description"`
	Provider    string  `json:"provider"`
	Category    *string `json:"category"`
}

type AdminRoleInfo struct {
	RoleID             string                      `json:"roleId"`
	RoleName           *string                     `json:"roleName"`
	Description        *string                     `json:"description"`
	GrantedUsers       []string                    `json:"grantedUsers"`
	GrantedConnections []*AdminConnectionGrantInfo `json:"grantedConnections"`
	RolePermissions    []string                    `json:"rolePermissions"`
}

type AdminUserInfo struct {
	UserID                  string                      `json:"userId"`
	MetaParameters          interface{}                 `json:"metaParameters"`
	ConfigurationParameters interface{}                 `json:"configurationParameters"`
	GrantedRoles            []string                    `json:"grantedRoles"`
	GrantedConnections      []*AdminConnectionGrantInfo `json:"grantedConnections"`
	Origins                 []*ObjectOrigin             `json:"origins"`
	LinkedAuthProviders     []string                    `json:"linkedAuthProviders"`
	Enabled                 bool                        `json:"enabled"`
}

type AsyncTaskInfo struct {
	ID         string          `json:"id"`
	Name       *string         `json:"name"`
	Running    bool            `json:"running"`
	Status     *string         `json:"status"`
	Error      *ServerError    `json:"error"`
	Result     *SQLExecuteInfo `json:"result"`
	TaskResult interface{}     `json:"taskResult"`
}

type AuthCredentialInfo struct {
	ID             string                    `json:"id"`
	DisplayName    string                    `json:"displayName"`
	Description    *string                   `json:"description"`
	Admin          bool                      `json:"admin"`
	User           bool                      `json:"user"`
	Identifying    bool                      `json:"identifying"`
	PossibleValues []*string                 `json:"possibleValues"`
	Encryption     *AuthCredentialEncryption `json:"encryption"`
}

type AuthInfo struct {
	RedirectLink *string          `json:"redirectLink"`
	AuthID       *string          `json:"authId"`
	AuthStatus   AuthStatus       `json:"authStatus"`
	UserTokens   []*UserAuthToken `json:"userTokens"`
}

type AuthProviderConfiguration struct {
	ID           string  `json:"id"`
	DisplayName  string  `json:"displayName"`
	Disabled     bool    `json:"disabled"`
	IconURL      *string `json:"iconURL"`
	Description  *string `json:"description"`
	SignInLink   *string `json:"signInLink"`
	SignOutLink  *string `json:"signOutLink"`
	MetadataLink *string `json:"metadataLink"`
}

type AuthProviderCredentialsProfile struct {
	ID                   *string               `json:"id"`
	Label                *string               `json:"label"`
	Description          *string               `json:"description"`
	CredentialParameters []*AuthCredentialInfo `json:"credentialParameters"`
}

type AuthProviderInfo struct {
	ID                 string                            `json:"id"`
	Label              string                            `json:"label"`
	Icon               *string                           `json:"icon"`
	Description        *string                           `json:"description"`
	DefaultProvider    bool                              `json:"defaultProvider"`
	Configurable       bool                              `json:"configurable"`
	Configurations     []*AuthProviderConfiguration      `json:"configurations"`
	CredentialProfiles []*AuthProviderCredentialsProfile `json:"credentialProfiles"`
	RequiredFeatures   []string                          `json:"requiredFeatures"`
}

type ConnectionConfig struct {
	ConnectionID          *string                      `json:"connectionId"`
	Name                  *string                      `json:"name"`
	Description           *string                      `json:"description"`
	TemplateID            *string                      `json:"templateId"`
	DriverID              *string                      `json:"driverId"`
	Host                  *string                      `json:"host"`
	Port                  *string                      `json:"port"`
	ServerName            *string                      `json:"serverName"`
	DatabaseName          *string                      `json:"databaseName"`
	URL                   *string                      `json:"url"`
	Properties            interface{}                  `json:"properties"`
	Template              *bool                        `json:"template"`
	ReadOnly              *bool                        `json:"readOnly"`
	SaveCredentials       *bool                        `json:"saveCredentials"`
	AuthModelID           *string                      `json:"authModelId"`
	Credentials           interface{}                  `json:"credentials"`
	ProviderProperties    interface{}                  `json:"providerProperties"`
	NetworkHandlersConfig []*NetworkHandlerConfigInput `json:"networkHandlersConfig"`
	DataSourceID          *string                      `json:"dataSourceId"`
	UserName              *string                      `json:"userName"`
	UserPassword          *string                      `json:"userPassword"`
	Folder                *string                      `json:"folder"`
}

type ConnectionFolderInfo struct {
	ID          string  `json:"id"`
	Description *string `json:"description"`
}

type ConnectionInfo struct {
	ID                    string                  `json:"id"`
	DriverID              string                  `json:"driverId"`
	Name                  string                  `json:"name"`
	Description           *string                 `json:"description"`
	Host                  *string                 `json:"host"`
	Port                  *string                 `json:"port"`
	ServerName            *string                 `json:"serverName"`
	DatabaseName          *string                 `json:"databaseName"`
	URL                   *string                 `json:"url"`
	Properties            interface{}             `json:"properties"`
	Template              bool                    `json:"template"`
	Connected             bool                    `json:"connected"`
	Provided              bool                    `json:"provided"`
	ReadOnly              bool                    `json:"readOnly"`
	UseURL                bool                    `json:"useUrl"`
	SaveCredentials       bool                    `json:"saveCredentials"`
	Folder                *string                 `json:"folder"`
	NodePath              *string                 `json:"nodePath"`
	ConnectTime           *string                 `json:"connectTime"`
	ConnectionError       *ServerError            `json:"connectionError"`
	ServerVersion         *string                 `json:"serverVersion"`
	ClientVersion         *string                 `json:"clientVersion"`
	Origin                *ObjectOrigin           `json:"origin"`
	AuthNeeded            bool                    `json:"authNeeded"`
	AuthModel             *string                 `json:"authModel"`
	AuthProperties        []*ObjectPropertyInfo   `json:"authProperties"`
	ProviderProperties    interface{}             `json:"providerProperties"`
	NetworkHandlersConfig []*NetworkHandlerConfig `json:"networkHandlersConfig"`
	Features              []string                `json:"features"`
	NavigatorSettings     *NavigatorSettings      `json:"navigatorSettings"`
	SupportedDataFormats  []ResultDataFormat      `json:"supportedDataFormats"`
}

type DataTransferParameters struct {
	ProcessorID         string         `json:"processorId"`
	Settings            interface{}    `json:"settings"`
	ProcessorProperties interface{}    `json:"processorProperties"`
	Filter              *SQLDataFilter `json:"filter"`
}

type DataTransferProcessorInfo struct {
	ID               string                `json:"id"`
	Name             *string               `json:"name"`
	Description      *string               `json:"description"`
	FileExtension    *string               `json:"fileExtension"`
	AppFileExtension *string               `json:"appFileExtension"`
	AppName          *string               `json:"appName"`
	Order            int                   `json:"order"`
	Icon             *string               `json:"icon"`
	Properties       []*ObjectPropertyInfo `json:"properties"`
	IsBinary         *bool                 `json:"isBinary"`
	IsHTML           *bool                 `json:"isHTML"`
}

type DataTypeLogicalOperation struct {
	ID            string `json:"id"`
	Expression    string `json:"expression"`
	ArgumentCount *int   `json:"argumentCount"`
}

type DatabaseAuthModel struct {
	ID                         string                `json:"id"`
	DisplayName                string                `json:"displayName"`
	Description                *string               `json:"description"`
	Icon                       *string               `json:"icon"`
	RequiresLocalConfiguration *bool                 `json:"requiresLocalConfiguration"`
	Properties                 []*ObjectPropertyInfo `json:"properties"`
}

type DatabaseCatalog struct {
	Catalog    *NavigatorNodeInfo   `json:"catalog"`
	SchemaList []*NavigatorNodeInfo `json:"schemaList"`
}

type DatabaseDocument struct {
	ID          *string     `json:"id"`
	ContentType *string     `json:"contentType"`
	Properties  interface{} `json:"properties"`
	Data        interface{} `json:"data"`
}

type DatabaseObjectInfo struct {
	Name               *string               `json:"name"`
	Description        *string               `json:"description"`
	Type               *string               `json:"type"`
	Properties         []*ObjectPropertyInfo `json:"properties"`
	OrdinalPosition    *int                  `json:"ordinalPosition"`
	FullyQualifiedName *string               `json:"fullyQualifiedName"`
	OverloadedName     *string               `json:"overloadedName"`
	UniqueName         *string               `json:"uniqueName"`
	State              *string               `json:"state"`
	Features           []string              `json:"features"`
	Editors            []string              `json:"editors"`
}

type DatabaseStructContainers struct {
	CatalogList           []*DatabaseCatalog   `json:"catalogList"`
	SchemaList            []*NavigatorNodeInfo `json:"schemaList"`
	SupportsCatalogChange bool                 `json:"supportsCatalogChange"`
	SupportsSchemaChange  bool                 `json:"supportsSchemaChange"`
}

type DriverInfo struct {
	ID                        string                `json:"id"`
	Name                      *string               `json:"name"`
	Description               *string               `json:"description"`
	Icon                      *string               `json:"icon"`
	IconBig                   *string               `json:"iconBig"`
	ProviderID                *string               `json:"providerId"`
	DriverClassName           *string               `json:"driverClassName"`
	DefaultHost               *string               `json:"defaultHost"`
	DefaultPort               *string               `json:"defaultPort"`
	DefaultDatabase           *string               `json:"defaultDatabase"`
	DefaultServer             *string               `json:"defaultServer"`
	DefaultUser               *string               `json:"defaultUser"`
	SampleURL                 *string               `json:"sampleURL"`
	DriverInfoURL             *string               `json:"driverInfoURL"`
	DriverPropertiesURL       *string               `json:"driverPropertiesURL"`
	Embedded                  *bool                 `json:"embedded"`
	Enabled                   bool                  `json:"enabled"`
	RequiresServerName        *bool                 `json:"requiresServerName"`
	AllowsEmptyPassword       *bool                 `json:"allowsEmptyPassword"`
	LicenseRequired           *bool                 `json:"licenseRequired"`
	License                   *string               `json:"license"`
	Custom                    *bool                 `json:"custom"`
	PromotedScore             *int                  `json:"promotedScore"`
	DriverProperties          []*ObjectPropertyInfo `json:"driverProperties"`
	DriverParameters          interface{}           `json:"driverParameters"`
	ProviderProperties        []*ObjectPropertyInfo `json:"providerProperties"`
	AnonymousAccess           *bool                 `json:"anonymousAccess"`
	DefaultAuthModel          string                `json:"defaultAuthModel"`
	ApplicableAuthModels      []string              `json:"applicableAuthModels"`
	ApplicableNetworkHandlers []*string             `json:"applicableNetworkHandlers"`
}

type LogEntry struct {
	Time       *time.Time `json:"time"`
	Type       string     `json:"type"`
	Message    *string    `json:"message"`
	StackTrace *string    `json:"stackTrace"`
}

type NavigatorNodeInfo struct {
	ID          string                `json:"id"`
	Name        *string               `json:"name"`
	FullName    *string               `json:"fullName"`
	Icon        *string               `json:"icon"`
	Description *string               `json:"description"`
	NodeType    *string               `json:"nodeType"`
	HasChildren *bool                 `json:"hasChildren"`
	Object      *DatabaseObjectInfo   `json:"object"`
	Features    []string              `json:"features"`
	NodeDetails []*ObjectPropertyInfo `json:"nodeDetails"`
	Folder      *bool                 `json:"folder"`
	Inline      *bool                 `json:"inline"`
	Navigable   *bool                 `json:"navigable"`
}

type NavigatorSettings struct {
	ShowSystemObjects  bool `json:"showSystemObjects"`
	ShowUtilityObjects bool `json:"showUtilityObjects"`
	ShowOnlyEntities   bool `json:"showOnlyEntities"`
	MergeEntities      bool `json:"mergeEntities"`
	HideFolders        bool `json:"hideFolders"`
	HideSchemas        bool `json:"hideSchemas"`
	HideVirtualModel   bool `json:"hideVirtualModel"`
}

type NavigatorSettingsInput struct {
	ShowSystemObjects  bool `json:"showSystemObjects"`
	ShowUtilityObjects bool `json:"showUtilityObjects"`
	ShowOnlyEntities   bool `json:"showOnlyEntities"`
	MergeEntities      bool `json:"mergeEntities"`
	HideFolders        bool `json:"hideFolders"`
	HideSchemas        bool `json:"hideSchemas"`
	HideVirtualModel   bool `json:"hideVirtualModel"`
}

type NetworkEndpointInfo struct {
	Message       *string `json:"message"`
	ClientVersion *string `json:"clientVersion"`
	ServerVersion *string `json:"serverVersion"`
}

type NetworkHandlerConfig struct {
	ID           string                 `json:"id"`
	Enabled      bool                   `json:"enabled"`
	AuthType     NetworkHandlerAuthType `json:"authType"`
	UserName     *string                `json:"userName"`
	Password     *string                `json:"password"`
	Key          *string                `json:"key"`
	SavePassword bool                   `json:"savePassword"`
	Properties   interface{}            `json:"properties"`
}

type NetworkHandlerConfigInput struct {
	ID           string                  `json:"id"`
	Enabled      *bool                   `json:"enabled"`
	AuthType     *NetworkHandlerAuthType `json:"authType"`
	UserName     *string                 `json:"userName"`
	Password     *string                 `json:"password"`
	Key          *string                 `json:"key"`
	SavePassword *bool                   `json:"savePassword"`
	Properties   interface{}             `json:"properties"`
}

type NetworkHandlerDescriptor struct {
	ID          string                `json:"id"`
	CodeName    string                `json:"codeName"`
	Label       string                `json:"label"`
	Description *string               `json:"description"`
	Secured     bool                  `json:"secured"`
	Type        *NetworkHandlerType   `json:"type"`
	Properties  []*ObjectPropertyInfo `json:"properties"`
}

type ObjectDescriptor struct {
	ID          *int    `json:"id"`
	DisplayName *string `json:"displayName"`
	FullName    *string `json:"fullName"`
	UniqueName  *string `json:"uniqueName"`
	Description *string `json:"description"`
	Value       *string `json:"value"`
}

type ObjectDetails struct {
	ID          *int        `json:"id"`
	DisplayName *string     `json:"displayName"`
	Description *string     `json:"description"`
	Value       interface{} `json:"value"`
}

type ObjectOrigin struct {
	Type          string                `json:"type"`
	SubType       *string               `json:"subType"`
	DisplayName   string                `json:"displayName"`
	Icon          *string               `json:"icon"`
	Configuration interface{}           `json:"configuration"`
	Details       []*ObjectPropertyInfo `json:"details"`
}

type ObjectPropertyFilter struct {
	Ids        []string `json:"ids"`
	Features   []string `json:"features"`
	Categories []string `json:"categories"`
	DataTypes  []string `json:"dataTypes"`
}

type ObjectPropertyInfo struct {
	ID           *string              `json:"id"`
	DisplayName  *string              `json:"displayName"`
	Description  *string              `json:"description"`
	Category     *string              `json:"category"`
	DataType     *string              `json:"dataType"`
	Value        interface{}          `json:"value"`
	ValidValues  []interface{}        `json:"validValues"`
	DefaultValue interface{}          `json:"defaultValue"`
	Length       ObjectPropertyLength `json:"length"`
	Features     []string             `json:"features"`
	Order        int                  `json:"order"`
}

type ProductInfo struct {
	ID                string  `json:"id"`
	Version           string  `json:"version"`
	Name              string  `json:"name"`
	Description       *string `json:"description"`
	BuildTime         string  `json:"buildTime"`
	ReleaseTime       string  `json:"releaseTime"`
	LicenseInfo       *string `json:"licenseInfo"`
	LatestVersionInfo *string `json:"latestVersionInfo"`
}

type RMProject struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description"`
	Shared      bool      `json:"shared"`
	CreateTime  time.Time `json:"createTime"`
	Creator     string    `json:"creator"`
}

type RMResource struct {
	Name   string `json:"name"`
	Folder bool   `json:"folder"`
	Length int    `json:"length"`
}

type SQLCompletionProposal struct {
	DisplayString     string  `json:"displayString"`
	Type              string  `json:"type"`
	Score             *int    `json:"score"`
	ReplacementString string  `json:"replacementString"`
	ReplacementOffset int     `json:"replacementOffset"`
	ReplacementLength int     `json:"replacementLength"`
	CursorPosition    *int    `json:"cursorPosition"`
	Icon              *string `json:"icon"`
	NodePath          *string `json:"nodePath"`
}

type SQLContextInfo struct {
	ID             string  `json:"id"`
	ConnectionID   string  `json:"connectionId"`
	DefaultCatalog *string `json:"defaultCatalog"`
	DefaultSchema  *string `json:"defaultSchema"`
}

type SQLDataFilter struct {
	Offset      *float64                   `json:"offset"`
	Limit       *int                       `json:"limit"`
	Constraints []*SQLDataFilterConstraint `json:"constraints"`
	Where       *string                    `json:"where"`
	OrderBy     *string                    `json:"orderBy"`
}

type SQLDataFilterConstraint struct {
	AttributePosition int         `json:"attributePosition"`
	OrderPosition     *int        `json:"orderPosition"`
	OrderAsc          *bool       `json:"orderAsc"`
	Criteria          *string     `json:"criteria"`
	Operator          *string     `json:"operator"`
	Value             interface{} `json:"value"`
}

type SQLDialectInfo struct {
	Name                         string      `json:"name"`
	DataTypes                    []*string   `json:"dataTypes"`
	Functions                    []*string   `json:"functions"`
	ReservedWords                []*string   `json:"reservedWords"`
	QuoteStrings                 [][]*string `json:"quoteStrings"`
	SingleLineComments           []*string   `json:"singleLineComments"`
	MultiLineComments            [][]*string `json:"multiLineComments"`
	CatalogSeparator             *string     `json:"catalogSeparator"`
	StructSeparator              *string     `json:"structSeparator"`
	ScriptDelimiter              *string     `json:"scriptDelimiter"`
	SupportsExplainExecutionPlan bool        `json:"supportsExplainExecutionPlan"`
}

type SQLExecuteInfo struct {
	StatusMessage *string            `json:"statusMessage"`
	Duration      int                `json:"duration"`
	FilterText    *string            `json:"filterText"`
	Results       []*SQLQueryResults `json:"results"`
}

type SQLExecutionPlan struct {
	Query string                  `json:"query"`
	Nodes []*SQLExecutionPlanNode `json:"nodes"`
}

type SQLExecutionPlanNode struct {
	ID          string                `json:"id"`
	ParentID    *string               `json:"parentId"`
	Kind        string                `json:"kind"`
	Name        *string               `json:"name"`
	Type        string                `json:"type"`
	Condition   *string               `json:"condition"`
	Description *string               `json:"description"`
	Properties  []*ObjectPropertyInfo `json:"properties"`
}

type SQLQueryGenerator struct {
	ID          string  `json:"id"`
	Label       string  `json:"label"`
	Description *string `json:"description"`
	Order       int     `json:"order"`
	MultiObject bool    `json:"multiObject"`
}

type SQLQueryResults struct {
	Title          *string           `json:"title"`
	UpdateRowCount *float64          `json:"updateRowCount"`
	SourceQuery    *string           `json:"sourceQuery"`
	DataFormat     *ResultDataFormat `json:"dataFormat"`
	ResultSet      *SQLResultSet     `json:"resultSet"`
}

type SQLResultColumn struct {
	Position            int                         `json:"position"`
	Name                *string                     `json:"name"`
	Label               *string                     `json:"label"`
	Icon                *string                     `json:"icon"`
	EntityName          *string                     `json:"entityName"`
	DataKind            *string                     `json:"dataKind"`
	TypeName            *string                     `json:"typeName"`
	FullTypeName        *string                     `json:"fullTypeName"`
	MaxLength           *float64                    `json:"maxLength"`
	Scale               *int                        `json:"scale"`
	Precision           *int                        `json:"precision"`
	Required            bool                        `json:"required"`
	ReadOnly            bool                        `json:"readOnly"`
	ReadOnlyStatus      *string                     `json:"readOnlyStatus"`
	SupportedOperations []*DataTypeLogicalOperation `json:"supportedOperations"`
}

type SQLResultRow struct {
	Data         []interface{} `json:"data"`
	UpdateValues interface{}   `json:"updateValues"`
}

type SQLResultSet struct {
	ID               string             `json:"id"`
	Columns          []*SQLResultColumn `json:"columns"`
	Rows             [][]interface{}    `json:"rows"`
	SingleEntity     bool               `json:"singleEntity"`
	HasMoreData      bool               `json:"hasMoreData"`
	HasRowIdentifier bool               `json:"hasRowIdentifier"`
}

type SQLScriptInfo struct {
	Queries []*SQLScriptQuery `json:"queries"`
}

type SQLScriptQuery struct {
	Start int `json:"start"`
	End   int `json:"end"`
}

type ServerConfig struct {
	Name                         string              `json:"name"`
	Version                      string              `json:"version"`
	WorkspaceID                  string              `json:"workspaceId"`
	ServerURL                    string              `json:"serverURL"`
	RootURI                      string              `json:"rootURI"`
	HostName                     string              `json:"hostName"`
	AnonymousAccessEnabled       *bool               `json:"anonymousAccessEnabled"`
	AuthenticationEnabled        *bool               `json:"authenticationEnabled"`
	SupportsCustomConnections    *bool               `json:"supportsCustomConnections"`
	SupportsConnectionBrowser    *bool               `json:"supportsConnectionBrowser"`
	SupportsWorkspaces           *bool               `json:"supportsWorkspaces"`
	ResourceManagerEnabled       *bool               `json:"resourceManagerEnabled"`
	PublicCredentialsSaveEnabled *bool               `json:"publicCredentialsSaveEnabled"`
	AdminCredentialsSaveEnabled  *bool               `json:"adminCredentialsSaveEnabled"`
	LicenseRequired              bool                `json:"licenseRequired"`
	LicenseValid                 bool                `json:"licenseValid"`
	SessionExpireTime            *int                `json:"sessionExpireTime"`
	LocalHostAddress             *string             `json:"localHostAddress"`
	ConfigurationMode            *bool               `json:"configurationMode"`
	DevelopmentMode              *bool               `json:"developmentMode"`
	RedirectOnFederatedAuth      *bool               `json:"redirectOnFederatedAuth"`
	EnabledFeatures              []string            `json:"enabledFeatures"`
	EnabledAuthProviders         []string            `json:"enabledAuthProviders"`
	SupportedLanguages           []*ServerLanguage   `json:"supportedLanguages"`
	Services                     []*WebServiceConfig `json:"services"`
	ProductConfiguration         interface{}         `json:"productConfiguration"`
	ProductInfo                  *ProductInfo        `json:"productInfo"`
	DefaultNavigatorSettings     *NavigatorSettings  `json:"defaultNavigatorSettings"`
	DisabledDrivers              []string            `json:"disabledDrivers"`
	ResourceQuotas               interface{}         `json:"resourceQuotas"`
}

type ServerConfigInput struct {
	ServerName                   *string  `json:"serverName"`
	ServerURL                    *string  `json:"serverURL"`
	AdminName                    *string  `json:"adminName"`
	AdminPassword                *string  `json:"adminPassword"`
	AnonymousAccessEnabled       *bool    `json:"anonymousAccessEnabled"`
	AuthenticationEnabled        *bool    `json:"authenticationEnabled"`
	CustomConnectionsEnabled     *bool    `json:"customConnectionsEnabled"`
	PublicCredentialsSaveEnabled *bool    `json:"publicCredentialsSaveEnabled"`
	AdminCredentialsSaveEnabled  *bool    `json:"adminCredentialsSaveEnabled"`
	ResourceManagerEnabled       *bool    `json:"resourceManagerEnabled"`
	EnabledFeatures              []string `json:"enabledFeatures"`
	EnabledAuthProviders         []string `json:"enabledAuthProviders"`
	DisabledDrivers              []string `json:"disabledDrivers"`
	SessionExpireTime            *int     `json:"sessionExpireTime"`
}

type ServerError struct {
	Message    *string      `json:"message"`
	ErrorCode  *string      `json:"errorCode"`
	ErrorType  *string      `json:"errorType"`
	StackTrace *string      `json:"stackTrace"`
	CausedBy   *ServerError `json:"causedBy"`
}

type ServerLanguage struct {
	IsoCode     string  `json:"isoCode"`
	DisplayName *string `json:"displayName"`
	NativeName  *string `json:"nativeName"`
}

type ServerMessage struct {
	Time    *string `json:"time"`
	Message *string `json:"message"`
}

type SessionInfo struct {
	CreateTime       string            `json:"createTime"`
	LastAccessTime   string            `json:"lastAccessTime"`
	Locale           string            `json:"locale"`
	CacheExpired     bool              `json:"cacheExpired"`
	ServerMessages   []*ServerMessage  `json:"serverMessages"`
	Connections      []*ConnectionInfo `json:"connections"`
	ActionParameters interface{}       `json:"actionParameters"`
}

type UserAuthToken struct {
	AuthProvider      string        `json:"authProvider"`
	AuthConfiguration *string       `json:"authConfiguration"`
	LoginTime         time.Time     `json:"loginTime"`
	UserID            string        `json:"userId"`
	DisplayName       string        `json:"displayName"`
	Message           *string       `json:"message"`
	Origin            *ObjectOrigin `json:"origin"`
}

type UserInfo struct {
	UserID                  string           `json:"userId"`
	DisplayName             *string          `json:"displayName"`
	AuthTokens              []*UserAuthToken `json:"authTokens"`
	LinkedAuthProviders     []string         `json:"linkedAuthProviders"`
	MetaParameters          interface{}      `json:"metaParameters"`
	ConfigurationParameters interface{}      `json:"configurationParameters"`
}

type WebFeatureSet struct {
	ID          string  `json:"id"`
	Label       string  `json:"label"`
	Description *string `json:"description"`
	Icon        *string `json:"icon"`
	Enabled     bool    `json:"enabled"`
}

type WebServiceConfig struct {
	ID            string `json:"id"`
	Name          string `json:"name"`
	Description   string `json:"description"`
	BundleVersion string `json:"bundleVersion"`
}

type AdminSubjectType string

const (
	AdminSubjectTypeUser AdminSubjectType = "user"
	AdminSubjectTypeRole AdminSubjectType = "role"
)

var AllAdminSubjectType = []AdminSubjectType{
	AdminSubjectTypeUser,
	AdminSubjectTypeRole,
}

func (e AdminSubjectType) IsValid() bool {
	switch e {
	case AdminSubjectTypeUser, AdminSubjectTypeRole:
		return true
	}
	return false
}

func (e AdminSubjectType) String() string {
	return string(e)
}

func (e *AdminSubjectType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AdminSubjectType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AdminSubjectType", str)
	}
	return nil
}

func (e AdminSubjectType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuthCredentialEncryption string

const (
	AuthCredentialEncryptionNone  AuthCredentialEncryption = "none"
	AuthCredentialEncryptionPlain AuthCredentialEncryption = "plain"
	AuthCredentialEncryptionHash  AuthCredentialEncryption = "hash"
)

var AllAuthCredentialEncryption = []AuthCredentialEncryption{
	AuthCredentialEncryptionNone,
	AuthCredentialEncryptionPlain,
	AuthCredentialEncryptionHash,
}

func (e AuthCredentialEncryption) IsValid() bool {
	switch e {
	case AuthCredentialEncryptionNone, AuthCredentialEncryptionPlain, AuthCredentialEncryptionHash:
		return true
	}
	return false
}

func (e AuthCredentialEncryption) String() string {
	return string(e)
}

func (e *AuthCredentialEncryption) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthCredentialEncryption(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthCredentialEncryption", str)
	}
	return nil
}

func (e AuthCredentialEncryption) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuthStatus string

const (
	AuthStatusSuccess    AuthStatus = "SUCCESS"
	AuthStatusInProgress AuthStatus = "IN_PROGRESS"
	AuthStatusError      AuthStatus = "ERROR"
)

var AllAuthStatus = []AuthStatus{
	AuthStatusSuccess,
	AuthStatusInProgress,
	AuthStatusError,
}

func (e AuthStatus) IsValid() bool {
	switch e {
	case AuthStatusSuccess, AuthStatusInProgress, AuthStatusError:
		return true
	}
	return false
}

func (e AuthStatus) String() string {
	return string(e)
}

func (e *AuthStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthStatus", str)
	}
	return nil
}

func (e AuthStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NetworkHandlerAuthType string

const (
	NetworkHandlerAuthTypePassword  NetworkHandlerAuthType = "PASSWORD"
	NetworkHandlerAuthTypePublicKey NetworkHandlerAuthType = "PUBLIC_KEY"
	NetworkHandlerAuthTypeAgent     NetworkHandlerAuthType = "AGENT"
)

var AllNetworkHandlerAuthType = []NetworkHandlerAuthType{
	NetworkHandlerAuthTypePassword,
	NetworkHandlerAuthTypePublicKey,
	NetworkHandlerAuthTypeAgent,
}

func (e NetworkHandlerAuthType) IsValid() bool {
	switch e {
	case NetworkHandlerAuthTypePassword, NetworkHandlerAuthTypePublicKey, NetworkHandlerAuthTypeAgent:
		return true
	}
	return false
}

func (e NetworkHandlerAuthType) String() string {
	return string(e)
}

func (e *NetworkHandlerAuthType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NetworkHandlerAuthType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NetworkHandlerAuthType", str)
	}
	return nil
}

func (e NetworkHandlerAuthType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type NetworkHandlerType string

const (
	NetworkHandlerTypeTunnel NetworkHandlerType = "TUNNEL"
	NetworkHandlerTypeProxy  NetworkHandlerType = "PROXY"
	NetworkHandlerTypeConfig NetworkHandlerType = "CONFIG"
)

var AllNetworkHandlerType = []NetworkHandlerType{
	NetworkHandlerTypeTunnel,
	NetworkHandlerTypeProxy,
	NetworkHandlerTypeConfig,
}

func (e NetworkHandlerType) IsValid() bool {
	switch e {
	case NetworkHandlerTypeTunnel, NetworkHandlerTypeProxy, NetworkHandlerTypeConfig:
		return true
	}
	return false
}

func (e NetworkHandlerType) String() string {
	return string(e)
}

func (e *NetworkHandlerType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NetworkHandlerType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NetworkHandlerType", str)
	}
	return nil
}

func (e NetworkHandlerType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ObjectPropertyLength string

const (
	ObjectPropertyLengthTiny      ObjectPropertyLength = "TINY"
	ObjectPropertyLengthShort     ObjectPropertyLength = "SHORT"
	ObjectPropertyLengthMedium    ObjectPropertyLength = "MEDIUM"
	ObjectPropertyLengthLong      ObjectPropertyLength = "LONG"
	ObjectPropertyLengthMultiline ObjectPropertyLength = "MULTILINE"
)

var AllObjectPropertyLength = []ObjectPropertyLength{
	ObjectPropertyLengthTiny,
	ObjectPropertyLengthShort,
	ObjectPropertyLengthMedium,
	ObjectPropertyLengthLong,
	ObjectPropertyLengthMultiline,
}

func (e ObjectPropertyLength) IsValid() bool {
	switch e {
	case ObjectPropertyLengthTiny, ObjectPropertyLengthShort, ObjectPropertyLengthMedium, ObjectPropertyLengthLong, ObjectPropertyLengthMultiline:
		return true
	}
	return false
}

func (e ObjectPropertyLength) String() string {
	return string(e)
}

func (e *ObjectPropertyLength) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ObjectPropertyLength(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ObjectPropertyLength", str)
	}
	return nil
}

func (e ObjectPropertyLength) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ResultDataFormat string

const (
	ResultDataFormatResultset  ResultDataFormat = "resultset"
	ResultDataFormatDocument   ResultDataFormat = "document"
	ResultDataFormatGraph      ResultDataFormat = "graph"
	ResultDataFormatTimeseries ResultDataFormat = "timeseries"
)

var AllResultDataFormat = []ResultDataFormat{
	ResultDataFormatResultset,
	ResultDataFormatDocument,
	ResultDataFormatGraph,
	ResultDataFormatTimeseries,
}

func (e ResultDataFormat) IsValid() bool {
	switch e {
	case ResultDataFormatResultset, ResultDataFormatDocument, ResultDataFormatGraph, ResultDataFormatTimeseries:
		return true
	}
	return false
}

func (e ResultDataFormat) String() string {
	return string(e)
}

func (e *ResultDataFormat) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResultDataFormat(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResultDataFormat", str)
	}
	return nil
}

func (e ResultDataFormat) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
