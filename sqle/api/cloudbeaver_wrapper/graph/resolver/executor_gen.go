// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package resolver

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/actiontech/sqle/sqle/api/cloudbeaver_wrapper/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AdminAuthProviderConfiguration struct {
		Description  func(childComplexity int) int
		Disabled     func(childComplexity int) int
		DisplayName  func(childComplexity int) int
		ID           func(childComplexity int) int
		IconURL      func(childComplexity int) int
		MetadataLink func(childComplexity int) int
		Parameters   func(childComplexity int) int
		ProviderID   func(childComplexity int) int
		RedirectLink func(childComplexity int) int
		SignInLink   func(childComplexity int) int
		SignOutLink  func(childComplexity int) int
	}

	AdminConnectionGrantInfo struct {
		ConnectionID func(childComplexity int) int
		DataSourceID func(childComplexity int) int
		SubjectID    func(childComplexity int) int
		SubjectType  func(childComplexity int) int
	}

	AdminConnectionSearchInfo struct {
		DefaultDriver   func(childComplexity int) int
		DisplayName     func(childComplexity int) int
		Host            func(childComplexity int) int
		Port            func(childComplexity int) int
		PossibleDrivers func(childComplexity int) int
	}

	AdminPermissionInfo struct {
		Category    func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Label       func(childComplexity int) int
		Provider    func(childComplexity int) int
	}

	AdminRoleInfo struct {
		Description        func(childComplexity int) int
		GrantedConnections func(childComplexity int) int
		GrantedUsers       func(childComplexity int) int
		RoleID             func(childComplexity int) int
		RoleName           func(childComplexity int) int
		RolePermissions    func(childComplexity int) int
	}

	AdminUserInfo struct {
		ConfigurationParameters func(childComplexity int) int
		Enabled                 func(childComplexity int) int
		GrantedConnections      func(childComplexity int) int
		GrantedRoles            func(childComplexity int) int
		LinkedAuthProviders     func(childComplexity int) int
		MetaParameters          func(childComplexity int) int
		Origins                 func(childComplexity int) int
		UserID                  func(childComplexity int) int
	}

	AsyncTaskInfo struct {
		Error      func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		Result     func(childComplexity int) int
		Running    func(childComplexity int) int
		Status     func(childComplexity int) int
		TaskResult func(childComplexity int) int
	}

	AuthCredentialInfo struct {
		Admin          func(childComplexity int) int
		Description    func(childComplexity int) int
		DisplayName    func(childComplexity int) int
		Encryption     func(childComplexity int) int
		ID             func(childComplexity int) int
		Identifying    func(childComplexity int) int
		PossibleValues func(childComplexity int) int
		User           func(childComplexity int) int
	}

	AuthInfo struct {
		AuthID       func(childComplexity int) int
		AuthStatus   func(childComplexity int) int
		RedirectLink func(childComplexity int) int
		UserTokens   func(childComplexity int) int
	}

	AuthProviderConfiguration struct {
		Description  func(childComplexity int) int
		Disabled     func(childComplexity int) int
		DisplayName  func(childComplexity int) int
		ID           func(childComplexity int) int
		IconURL      func(childComplexity int) int
		MetadataLink func(childComplexity int) int
		SignInLink   func(childComplexity int) int
		SignOutLink  func(childComplexity int) int
	}

	AuthProviderCredentialsProfile struct {
		CredentialParameters func(childComplexity int) int
		Description          func(childComplexity int) int
		ID                   func(childComplexity int) int
		Label                func(childComplexity int) int
	}

	AuthProviderInfo struct {
		Configurable       func(childComplexity int) int
		Configurations     func(childComplexity int) int
		CredentialProfiles func(childComplexity int) int
		DefaultProvider    func(childComplexity int) int
		Description        func(childComplexity int) int
		ID                 func(childComplexity int) int
		Icon               func(childComplexity int) int
		Label              func(childComplexity int) int
		RequiredFeatures   func(childComplexity int) int
	}

	ConnectionFolderInfo struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
	}

	ConnectionInfo struct {
		AuthModel             func(childComplexity int) int
		AuthNeeded            func(childComplexity int) int
		AuthProperties        func(childComplexity int) int
		ClientVersion         func(childComplexity int) int
		ConnectTime           func(childComplexity int) int
		Connected             func(childComplexity int) int
		ConnectionError       func(childComplexity int) int
		DatabaseName          func(childComplexity int) int
		Description           func(childComplexity int) int
		DriverID              func(childComplexity int) int
		Features              func(childComplexity int) int
		Folder                func(childComplexity int) int
		Host                  func(childComplexity int) int
		ID                    func(childComplexity int) int
		Name                  func(childComplexity int) int
		NavigatorSettings     func(childComplexity int) int
		NetworkHandlersConfig func(childComplexity int) int
		NodePath              func(childComplexity int) int
		Origin                func(childComplexity int) int
		Port                  func(childComplexity int) int
		Properties            func(childComplexity int) int
		Provided              func(childComplexity int) int
		ProviderProperties    func(childComplexity int) int
		ReadOnly              func(childComplexity int) int
		SaveCredentials       func(childComplexity int) int
		ServerName            func(childComplexity int) int
		ServerVersion         func(childComplexity int) int
		SupportedDataFormats  func(childComplexity int) int
		Template              func(childComplexity int) int
		URL                   func(childComplexity int) int
		UseURL                func(childComplexity int) int
	}

	DataTransferProcessorInfo struct {
		AppFileExtension func(childComplexity int) int
		AppName          func(childComplexity int) int
		Description      func(childComplexity int) int
		FileExtension    func(childComplexity int) int
		ID               func(childComplexity int) int
		Icon             func(childComplexity int) int
		IsBinary         func(childComplexity int) int
		IsHTML           func(childComplexity int) int
		Name             func(childComplexity int) int
		Order            func(childComplexity int) int
		Properties       func(childComplexity int) int
	}

	DataTypeLogicalOperation struct {
		ArgumentCount func(childComplexity int) int
		Expression    func(childComplexity int) int
		ID            func(childComplexity int) int
	}

	DatabaseAuthModel struct {
		Description                func(childComplexity int) int
		DisplayName                func(childComplexity int) int
		ID                         func(childComplexity int) int
		Icon                       func(childComplexity int) int
		Properties                 func(childComplexity int) int
		RequiresLocalConfiguration func(childComplexity int) int
	}

	DatabaseCatalog struct {
		Catalog    func(childComplexity int) int
		SchemaList func(childComplexity int) int
	}

	DatabaseDocument struct {
		ContentType func(childComplexity int) int
		Data        func(childComplexity int) int
		ID          func(childComplexity int) int
		Properties  func(childComplexity int) int
	}

	DatabaseObjectInfo struct {
		Description        func(childComplexity int) int
		Editors            func(childComplexity int) int
		Features           func(childComplexity int) int
		FullyQualifiedName func(childComplexity int) int
		Name               func(childComplexity int) int
		OrdinalPosition    func(childComplexity int) int
		OverloadedName     func(childComplexity int) int
		Properties         func(childComplexity int, filter *model.ObjectPropertyFilter) int
		State              func(childComplexity int) int
		Type               func(childComplexity int) int
		UniqueName         func(childComplexity int) int
	}

	DatabaseStructContainers struct {
		CatalogList           func(childComplexity int) int
		SchemaList            func(childComplexity int) int
		SupportsCatalogChange func(childComplexity int) int
		SupportsSchemaChange  func(childComplexity int) int
	}

	DriverInfo struct {
		AllowsEmptyPassword       func(childComplexity int) int
		AnonymousAccess           func(childComplexity int) int
		ApplicableAuthModels      func(childComplexity int) int
		ApplicableNetworkHandlers func(childComplexity int) int
		Custom                    func(childComplexity int) int
		DefaultAuthModel          func(childComplexity int) int
		DefaultDatabase           func(childComplexity int) int
		DefaultHost               func(childComplexity int) int
		DefaultPort               func(childComplexity int) int
		DefaultServer             func(childComplexity int) int
		DefaultUser               func(childComplexity int) int
		Description               func(childComplexity int) int
		DriverClassName           func(childComplexity int) int
		DriverInfoURL             func(childComplexity int) int
		DriverParameters          func(childComplexity int) int
		DriverProperties          func(childComplexity int) int
		DriverPropertiesURL       func(childComplexity int) int
		Embedded                  func(childComplexity int) int
		Enabled                   func(childComplexity int) int
		ID                        func(childComplexity int) int
		Icon                      func(childComplexity int) int
		IconBig                   func(childComplexity int) int
		License                   func(childComplexity int) int
		LicenseRequired           func(childComplexity int) int
		Name                      func(childComplexity int) int
		PromotedScore             func(childComplexity int) int
		ProviderID                func(childComplexity int) int
		ProviderProperties        func(childComplexity int) int
		RequiresServerName        func(childComplexity int) int
		SampleURL                 func(childComplexity int) int
	}

	LogEntry struct {
		Message    func(childComplexity int) int
		StackTrace func(childComplexity int) int
		Time       func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	Mutation struct {
		AsyncReadDataFromContainer         func(childComplexity int, connectionID string, contextID string, containerNodePath string, resultID *string, filter *model.SQLDataFilter, dataFormat *model.ResultDataFormat) int
		AsyncSQLExecuteQuery               func(childComplexity int, connectionID string, contextID string, sql string, resultID *string, filter *model.SQLDataFilter, dataFormat *model.ResultDataFormat) int
		AsyncSQLExecuteResults             func(childComplexity int, taskID string) int
		AsyncSQLExplainExecutionPlan       func(childComplexity int, connectionID string, contextID string, query string, configuration interface{}) int
		AsyncSQLExplainExecutionPlanResult func(childComplexity int, taskID string) int
		AsyncTaskCancel                    func(childComplexity int, id string) int
		AsyncTaskInfo                      func(childComplexity int, id string, removeOnFinish bool) int
		AsyncTaskStatus                    func(childComplexity int, id string) int
		ChangeSessionLanguage              func(childComplexity int, locale *string) int
		CloseConnection                    func(childComplexity int, id string) int
		CloseSession                       func(childComplexity int) int
		CopyConnectionFromNode             func(childComplexity int, nodePath string, config *model.ConnectionConfig) int
		CreateConnection                   func(childComplexity int, config model.ConnectionConfig) int
		CreateConnectionFolder             func(childComplexity int, parentFolderPath *string, folderName string) int
		CreateConnectionFromTemplate       func(childComplexity int, templateID string, connectionName *string) int
		DeleteConnection                   func(childComplexity int, id string) int
		DeleteConnectionFolder             func(childComplexity int, folderPath string) int
		InitConnection                     func(childComplexity int, id string, credentials interface{}, networkCredentials []*model.NetworkHandlerConfigInput, saveCredentials *bool) int
		NavDeleteNodes                     func(childComplexity int, nodePaths []string) int
		NavMoveNodesToFolder               func(childComplexity int, nodePaths []string, folderPath string) int
		NavRenameNode                      func(childComplexity int, nodePath string, newName string) int
		OpenConnection                     func(childComplexity int, config model.ConnectionConfig) int
		OpenSession                        func(childComplexity int, defaultLocale *string) int
		ReadLobValue                       func(childComplexity int, connectionID string, contextID string, resultsID string, lobColumnIndex int, row []*model.SQLResultRow) int
		RefreshSessionConnections          func(childComplexity int) int
		RmCreateResource                   func(childComplexity int, projectID string, resourcePath string, isFolder bool) int
		RmDeleteResource                   func(childComplexity int, projectID string, resourcePath string, recursive bool) int
		RmMoveResource                     func(childComplexity int, projectID string, oldResourcePath string, newResourcePath *string) int
		RmWriteResourceStringContent       func(childComplexity int, projectID string, resourcePath string, data string) int
		SQLContextCreate                   func(childComplexity int, connectionID string, defaultCatalog *string, defaultSchema *string) int
		SQLContextDestroy                  func(childComplexity int, connectionID string, contextID string) int
		SQLContextSetDefaults              func(childComplexity int, connectionID string, contextID string, defaultCatalog *string, defaultSchema *string) int
		SQLResultClose                     func(childComplexity int, connectionID string, contextID string, resultID string) int
		SetConnectionNavigatorSettings     func(childComplexity int, id string, settings model.NavigatorSettingsInput) int
		SetUserConfigurationParameter      func(childComplexity int, name string, value interface{}) int
		TestConnection                     func(childComplexity int, config model.ConnectionConfig) int
		TestNetworkHandler                 func(childComplexity int, config model.NetworkHandlerConfigInput) int
		TouchSession                       func(childComplexity int) int
		UpdateConnection                   func(childComplexity int, config model.ConnectionConfig) int
		UpdateResultsDataBatch             func(childComplexity int, connectionID string, contextID string, resultsID string, updatedRows []*model.SQLResultRow, deletedRows []*model.SQLResultRow, addedRows []*model.SQLResultRow) int
		UpdateResultsDataBatchScript       func(childComplexity int, connectionID string, contextID string, resultsID string, updatedRows []*model.SQLResultRow, deletedRows []*model.SQLResultRow, addedRows []*model.SQLResultRow) int
	}

	NavigatorNodeInfo struct {
		Description func(childComplexity int) int
		Features    func(childComplexity int) int
		Folder      func(childComplexity int) int
		FullName    func(childComplexity int) int
		HasChildren func(childComplexity int) int
		ID          func(childComplexity int) int
		Icon        func(childComplexity int) int
		Inline      func(childComplexity int) int
		Name        func(childComplexity int) int
		Navigable   func(childComplexity int) int
		NodeDetails func(childComplexity int) int
		NodeType    func(childComplexity int) int
		Object      func(childComplexity int) int
	}

	NavigatorSettings struct {
		HideFolders        func(childComplexity int) int
		HideSchemas        func(childComplexity int) int
		HideVirtualModel   func(childComplexity int) int
		MergeEntities      func(childComplexity int) int
		ShowOnlyEntities   func(childComplexity int) int
		ShowSystemObjects  func(childComplexity int) int
		ShowUtilityObjects func(childComplexity int) int
	}

	NetworkEndpointInfo struct {
		ClientVersion func(childComplexity int) int
		Message       func(childComplexity int) int
		ServerVersion func(childComplexity int) int
	}

	NetworkHandlerConfig struct {
		AuthType     func(childComplexity int) int
		Enabled      func(childComplexity int) int
		ID           func(childComplexity int) int
		Key          func(childComplexity int) int
		Password     func(childComplexity int) int
		Properties   func(childComplexity int) int
		SavePassword func(childComplexity int) int
		UserName     func(childComplexity int) int
	}

	NetworkHandlerDescriptor struct {
		CodeName    func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Label       func(childComplexity int) int
		Properties  func(childComplexity int) int
		Secured     func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	ObjectDescriptor struct {
		Description func(childComplexity int) int
		DisplayName func(childComplexity int) int
		FullName    func(childComplexity int) int
		ID          func(childComplexity int) int
		UniqueName  func(childComplexity int) int
		Value       func(childComplexity int) int
	}

	ObjectDetails struct {
		Description func(childComplexity int) int
		DisplayName func(childComplexity int) int
		ID          func(childComplexity int) int
		Value       func(childComplexity int) int
	}

	ObjectOrigin struct {
		Configuration func(childComplexity int) int
		Details       func(childComplexity int) int
		DisplayName   func(childComplexity int) int
		Icon          func(childComplexity int) int
		SubType       func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	ObjectPropertyInfo struct {
		Category     func(childComplexity int) int
		DataType     func(childComplexity int) int
		DefaultValue func(childComplexity int) int
		Description  func(childComplexity int) int
		DisplayName  func(childComplexity int) int
		Features     func(childComplexity int) int
		ID           func(childComplexity int) int
		Length       func(childComplexity int) int
		Order        func(childComplexity int) int
		ValidValues  func(childComplexity int) int
		Value        func(childComplexity int) int
	}

	ProductInfo struct {
		BuildTime         func(childComplexity int) int
		Description       func(childComplexity int) int
		ID                func(childComplexity int) int
		LatestVersionInfo func(childComplexity int) int
		LicenseInfo       func(childComplexity int) int
		Name              func(childComplexity int) int
		ReleaseTime       func(childComplexity int) int
		Version           func(childComplexity int) int
	}

	Query struct {
		ActiveUser                              func(childComplexity int) int
		AllConnections                          func(childComplexity int, id *string) int
		AuthChangeLocalPassword                 func(childComplexity int, oldPassword string, newPassword string) int
		AuthLogin                               func(childComplexity int, provider string, configuration *string, credentials interface{}, linkUser *bool) int
		AuthLogout                              func(childComplexity int, provider *string, configuration *string) int
		AuthModels                              func(childComplexity int) int
		AuthProviders                           func(childComplexity int) int
		AuthUpdateStatus                        func(childComplexity int, authID string, linkUser *bool) int
		ConfigureServer                         func(childComplexity int, configuration model.ServerConfigInput) int
		ConnectionFolders                       func(childComplexity int, path *string) int
		ConnectionInfo                          func(childComplexity int, id string) int
		ConnectionState                         func(childComplexity int, id string) int
		CopyConnectionConfiguration             func(childComplexity int, nodePath string, config *model.ConnectionConfig) int
		CreateConnectionConfiguration           func(childComplexity int, config model.ConnectionConfig) int
		CreateRole                              func(childComplexity int, roleID string, roleName *string, description *string) int
		CreateUser                              func(childComplexity int, userID string) int
		DataTransferAvailableStreamProcessors   func(childComplexity int) int
		DataTransferExportDataFromContainer     func(childComplexity int, connectionID string, containerNodePath string, parameters model.DataTransferParameters) int
		DataTransferExportDataFromResults       func(childComplexity int, connectionID string, contextID string, resultsID string, parameters model.DataTransferParameters) int
		DataTransferRemoveDataFile              func(childComplexity int, dataFileID string) int
		DeleteAuthProviderConfiguration         func(childComplexity int, id string) int
		DeleteConnectionConfiguration           func(childComplexity int, id string) int
		DeleteRole                              func(childComplexity int, roleID string) int
		DeleteUser                              func(childComplexity int, userID string) int
		DeleteUserMetaParameter                 func(childComplexity int, id string) int
		DriverList                              func(childComplexity int, id *string) int
		EnableUser                              func(childComplexity int, userID string, enabled bool) int
		GetConnectionSubjectAccess              func(childComplexity int, connectionID *string) int
		GetSubjectConnectionAccess              func(childComplexity int, subjectID *string) int
		GrantUserRole                           func(childComplexity int, userID string, roleID string) int
		ListAuthProviderConfigurationParameters func(childComplexity int, providerID string) int
		ListAuthProviderConfigurations          func(childComplexity int, providerID *string) int
		ListFeatureSets                         func(childComplexity int) int
		ListPermissions                         func(childComplexity int) int
		ListRoles                               func(childComplexity int, roleID *string) int
		ListUserProfileProperties               func(childComplexity int) int
		ListUsers                               func(childComplexity int, userID *string) int
		MetadataGetNodeDdl                      func(childComplexity int, nodeID string, options interface{}) int
		NavGetStructContainers                  func(childComplexity int, connectionID string, contextID *string, catalog *string) int
		NavNodeChildren                         func(childComplexity int, parentPath string, offset *int, limit *int, onlyFolders *bool) int
		NavNodeInfo                             func(childComplexity int, nodePath string) int
		NavNodeParents                          func(childComplexity int, nodePath string) int
		NavRefreshNode                          func(childComplexity int, nodePath string) int
		NetworkHandlers                         func(childComplexity int) int
		ReadSessionLog                          func(childComplexity int, maxEntries *int, clearEntries *bool) int
		RevokeUserRole                          func(childComplexity int, userID string, roleID string) int
		RmListProjects                          func(childComplexity int) int
		RmListResources                         func(childComplexity int, projectID string, folder *string, nameMask *string, readProperties *bool, readHistory *bool) int
		RmReadResourceAsString                  func(childComplexity int, projectID string, resourcePath string) int
		SQLCompletionProposals                  func(childComplexity int, connectionID string, contextID string, query string, position int, maxResults *int, simpleMode *bool) int
		SQLDialectInfo                          func(childComplexity int, connectionID string) int
		SQLEntityQueryGenerators                func(childComplexity int, nodePathList []string) int
		SQLFormatQuery                          func(childComplexity int, connectionID string, contextID string, query string) int
		SQLGenerateEntityQuery                  func(childComplexity int, generatorID string, options interface{}, nodePathList []string) int
		SQLListContexts                         func(childComplexity int, connectionID *string, contextID *string) int
		SQLParseQuery                           func(childComplexity int, connectionID string, script string, position int) int
		SQLParseScript                          func(childComplexity int, connectionID string, script string) int
		SQLSupportedOperations                  func(childComplexity int, connectionID string, contextID string, resultsID string, attributeIndex int) int
		SaveAuthProviderConfiguration           func(childComplexity int, providerID string, id string, displayName *string, disabled *bool, iconURL *string, description *string, parameters interface{}) int
		SaveUserMetaParameter                   func(childComplexity int, id string, displayName string, description *string, required bool) int
		SearchConnections                       func(childComplexity int, hostNames []string) int
		ServerConfig                            func(childComplexity int) int
		SessionPermissions                      func(childComplexity int) int
		SessionState                            func(childComplexity int) int
		SetConnectionSubjectAccess              func(childComplexity int, connectionID string, subjects []string) int
		SetDefaultNavigatorSettings             func(childComplexity int, settings model.NavigatorSettingsInput) int
		SetSubjectConnectionAccess              func(childComplexity int, subjectID string, connections []string) int
		SetSubjectPermissions                   func(childComplexity int, roleID string, permissions []string) int
		SetUserCredentials                      func(childComplexity int, userID string, providerID string, credentials interface{}) int
		SetUserMetaParameterValues              func(childComplexity int, userID string, parameters interface{}) int
		TemplateConnections                     func(childComplexity int) int
		UpdateConnectionConfiguration           func(childComplexity int, id string, config model.ConnectionConfig) int
		UpdateRole                              func(childComplexity int, roleID string, roleName *string, description *string) int
		UserConnections                         func(childComplexity int, id *string) int
	}

	RMProject struct {
		CreateTime  func(childComplexity int) int
		Creator     func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Shared      func(childComplexity int) int
	}

	RMResource struct {
		Folder func(childComplexity int) int
		Length func(childComplexity int) int
		Name   func(childComplexity int) int
	}

	SQLCompletionProposal struct {
		CursorPosition    func(childComplexity int) int
		DisplayString     func(childComplexity int) int
		Icon              func(childComplexity int) int
		NodePath          func(childComplexity int) int
		ReplacementLength func(childComplexity int) int
		ReplacementOffset func(childComplexity int) int
		ReplacementString func(childComplexity int) int
		Score             func(childComplexity int) int
		Type              func(childComplexity int) int
	}

	SQLContextInfo struct {
		ConnectionID   func(childComplexity int) int
		DefaultCatalog func(childComplexity int) int
		DefaultSchema  func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	SQLDialectInfo struct {
		CatalogSeparator             func(childComplexity int) int
		DataTypes                    func(childComplexity int) int
		Functions                    func(childComplexity int) int
		MultiLineComments            func(childComplexity int) int
		Name                         func(childComplexity int) int
		QuoteStrings                 func(childComplexity int) int
		ReservedWords                func(childComplexity int) int
		ScriptDelimiter              func(childComplexity int) int
		SingleLineComments           func(childComplexity int) int
		StructSeparator              func(childComplexity int) int
		SupportsExplainExecutionPlan func(childComplexity int) int
	}

	SQLExecuteInfo struct {
		Duration      func(childComplexity int) int
		FilterText    func(childComplexity int) int
		Results       func(childComplexity int) int
		StatusMessage func(childComplexity int) int
	}

	SQLExecutionPlan struct {
		Nodes func(childComplexity int) int
		Query func(childComplexity int) int
	}

	SQLExecutionPlanNode struct {
		Condition   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Kind        func(childComplexity int) int
		Name        func(childComplexity int) int
		ParentID    func(childComplexity int) int
		Properties  func(childComplexity int) int
		Type        func(childComplexity int) int
	}

	SQLQueryGenerator struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Label       func(childComplexity int) int
		MultiObject func(childComplexity int) int
		Order       func(childComplexity int) int
	}

	SQLQueryResults struct {
		DataFormat     func(childComplexity int) int
		ResultSet      func(childComplexity int) int
		SourceQuery    func(childComplexity int) int
		Title          func(childComplexity int) int
		UpdateRowCount func(childComplexity int) int
	}

	SQLResultColumn struct {
		DataKind            func(childComplexity int) int
		EntityName          func(childComplexity int) int
		FullTypeName        func(childComplexity int) int
		Icon                func(childComplexity int) int
		Label               func(childComplexity int) int
		MaxLength           func(childComplexity int) int
		Name                func(childComplexity int) int
		Position            func(childComplexity int) int
		Precision           func(childComplexity int) int
		ReadOnly            func(childComplexity int) int
		ReadOnlyStatus      func(childComplexity int) int
		Required            func(childComplexity int) int
		Scale               func(childComplexity int) int
		SupportedOperations func(childComplexity int) int
		TypeName            func(childComplexity int) int
	}

	SQLResultSet struct {
		Columns          func(childComplexity int) int
		HasMoreData      func(childComplexity int) int
		HasRowIdentifier func(childComplexity int) int
		ID               func(childComplexity int) int
		Rows             func(childComplexity int) int
		SingleEntity     func(childComplexity int) int
	}

	SQLScriptInfo struct {
		Queries func(childComplexity int) int
	}

	SQLScriptQuery struct {
		End   func(childComplexity int) int
		Start func(childComplexity int) int
	}

	ServerConfig struct {
		AdminCredentialsSaveEnabled  func(childComplexity int) int
		AnonymousAccessEnabled       func(childComplexity int) int
		AuthenticationEnabled        func(childComplexity int) int
		ConfigurationMode            func(childComplexity int) int
		DefaultNavigatorSettings     func(childComplexity int) int
		DevelopmentMode              func(childComplexity int) int
		DisabledDrivers              func(childComplexity int) int
		EnabledAuthProviders         func(childComplexity int) int
		EnabledFeatures              func(childComplexity int) int
		HostName                     func(childComplexity int) int
		LicenseRequired              func(childComplexity int) int
		LicenseValid                 func(childComplexity int) int
		LocalHostAddress             func(childComplexity int) int
		Name                         func(childComplexity int) int
		ProductConfiguration         func(childComplexity int) int
		ProductInfo                  func(childComplexity int) int
		PublicCredentialsSaveEnabled func(childComplexity int) int
		RedirectOnFederatedAuth      func(childComplexity int) int
		ResourceManagerEnabled       func(childComplexity int) int
		ResourceQuotas               func(childComplexity int) int
		RootURI                      func(childComplexity int) int
		ServerURL                    func(childComplexity int) int
		Services                     func(childComplexity int) int
		SessionExpireTime            func(childComplexity int) int
		SupportedLanguages           func(childComplexity int) int
		SupportsConnectionBrowser    func(childComplexity int) int
		SupportsCustomConnections    func(childComplexity int) int
		SupportsWorkspaces           func(childComplexity int) int
		Version                      func(childComplexity int) int
		WorkspaceID                  func(childComplexity int) int
	}

	ServerError struct {
		CausedBy   func(childComplexity int) int
		ErrorCode  func(childComplexity int) int
		ErrorType  func(childComplexity int) int
		Message    func(childComplexity int) int
		StackTrace func(childComplexity int) int
	}

	ServerLanguage struct {
		DisplayName func(childComplexity int) int
		IsoCode     func(childComplexity int) int
		NativeName  func(childComplexity int) int
	}

	ServerMessage struct {
		Message func(childComplexity int) int
		Time    func(childComplexity int) int
	}

	SessionInfo struct {
		ActionParameters func(childComplexity int) int
		CacheExpired     func(childComplexity int) int
		Connections      func(childComplexity int) int
		CreateTime       func(childComplexity int) int
		LastAccessTime   func(childComplexity int) int
		Locale           func(childComplexity int) int
		ServerMessages   func(childComplexity int) int
	}

	UserAuthToken struct {
		AuthConfiguration func(childComplexity int) int
		AuthProvider      func(childComplexity int) int
		DisplayName       func(childComplexity int) int
		LoginTime         func(childComplexity int) int
		Message           func(childComplexity int) int
		Origin            func(childComplexity int) int
		UserID            func(childComplexity int) int
	}

	UserInfo struct {
		AuthTokens              func(childComplexity int) int
		ConfigurationParameters func(childComplexity int) int
		DisplayName             func(childComplexity int) int
		LinkedAuthProviders     func(childComplexity int) int
		MetaParameters          func(childComplexity int) int
		UserID                  func(childComplexity int) int
	}

	WebFeatureSet struct {
		Description func(childComplexity int) int
		Enabled     func(childComplexity int) int
		ID          func(childComplexity int) int
		Icon        func(childComplexity int) int
		Label       func(childComplexity int) int
	}

	WebServiceConfig struct {
		BundleVersion func(childComplexity int) int
		Description   func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
	}
}

type MutationResolver interface {
	SetUserConfigurationParameter(ctx context.Context, name string, value interface{}) (bool, error)
	OpenSession(ctx context.Context, defaultLocale *string) (*model.SessionInfo, error)
	CloseSession(ctx context.Context) (*bool, error)
	TouchSession(ctx context.Context) (*bool, error)
	RefreshSessionConnections(ctx context.Context) (*bool, error)
	ChangeSessionLanguage(ctx context.Context, locale *string) (*bool, error)
	CreateConnection(ctx context.Context, config model.ConnectionConfig) (*model.ConnectionInfo, error)
	UpdateConnection(ctx context.Context, config model.ConnectionConfig) (*model.ConnectionInfo, error)
	DeleteConnection(ctx context.Context, id string) (bool, error)
	CreateConnectionFromTemplate(ctx context.Context, templateID string, connectionName *string) (*model.ConnectionInfo, error)
	CreateConnectionFolder(ctx context.Context, parentFolderPath *string, folderName string) (*model.ConnectionFolderInfo, error)
	DeleteConnectionFolder(ctx context.Context, folderPath string) (bool, error)
	CopyConnectionFromNode(ctx context.Context, nodePath string, config *model.ConnectionConfig) (*model.ConnectionInfo, error)
	TestConnection(ctx context.Context, config model.ConnectionConfig) (*model.ConnectionInfo, error)
	TestNetworkHandler(ctx context.Context, config model.NetworkHandlerConfigInput) (*model.NetworkEndpointInfo, error)
	InitConnection(ctx context.Context, id string, credentials interface{}, networkCredentials []*model.NetworkHandlerConfigInput, saveCredentials *bool) (*model.ConnectionInfo, error)
	CloseConnection(ctx context.Context, id string) (*model.ConnectionInfo, error)
	SetConnectionNavigatorSettings(ctx context.Context, id string, settings model.NavigatorSettingsInput) (*model.ConnectionInfo, error)
	AsyncTaskCancel(ctx context.Context, id string) (*bool, error)
	AsyncTaskInfo(ctx context.Context, id string, removeOnFinish bool) (*model.AsyncTaskInfo, error)
	OpenConnection(ctx context.Context, config model.ConnectionConfig) (*model.ConnectionInfo, error)
	AsyncTaskStatus(ctx context.Context, id string) (*model.AsyncTaskInfo, error)
	NavRenameNode(ctx context.Context, nodePath string, newName string) (*string, error)
	NavDeleteNodes(ctx context.Context, nodePaths []string) (*int, error)
	NavMoveNodesToFolder(ctx context.Context, nodePaths []string, folderPath string) (*bool, error)
	RmCreateResource(ctx context.Context, projectID string, resourcePath string, isFolder bool) (string, error)
	RmMoveResource(ctx context.Context, projectID string, oldResourcePath string, newResourcePath *string) (string, error)
	RmDeleteResource(ctx context.Context, projectID string, resourcePath string, recursive bool) (*bool, error)
	RmWriteResourceStringContent(ctx context.Context, projectID string, resourcePath string, data string) (string, error)
	SQLContextCreate(ctx context.Context, connectionID string, defaultCatalog *string, defaultSchema *string) (*model.SQLContextInfo, error)
	SQLContextSetDefaults(ctx context.Context, connectionID string, contextID string, defaultCatalog *string, defaultSchema *string) (bool, error)
	SQLContextDestroy(ctx context.Context, connectionID string, contextID string) (bool, error)
	AsyncSQLExecuteQuery(ctx context.Context, connectionID string, contextID string, sql string, resultID *string, filter *model.SQLDataFilter, dataFormat *model.ResultDataFormat) (*model.AsyncTaskInfo, error)
	AsyncReadDataFromContainer(ctx context.Context, connectionID string, contextID string, containerNodePath string, resultID *string, filter *model.SQLDataFilter, dataFormat *model.ResultDataFormat) (*model.AsyncTaskInfo, error)
	SQLResultClose(ctx context.Context, connectionID string, contextID string, resultID string) (bool, error)
	UpdateResultsDataBatch(ctx context.Context, connectionID string, contextID string, resultsID string, updatedRows []*model.SQLResultRow, deletedRows []*model.SQLResultRow, addedRows []*model.SQLResultRow) (*model.SQLExecuteInfo, error)
	UpdateResultsDataBatchScript(ctx context.Context, connectionID string, contextID string, resultsID string, updatedRows []*model.SQLResultRow, deletedRows []*model.SQLResultRow, addedRows []*model.SQLResultRow) (string, error)
	ReadLobValue(ctx context.Context, connectionID string, contextID string, resultsID string, lobColumnIndex int, row []*model.SQLResultRow) (string, error)
	AsyncSQLExecuteResults(ctx context.Context, taskID string) (*model.SQLExecuteInfo, error)
	AsyncSQLExplainExecutionPlan(ctx context.Context, connectionID string, contextID string, query string, configuration interface{}) (*model.AsyncTaskInfo, error)
	AsyncSQLExplainExecutionPlanResult(ctx context.Context, taskID string) (*model.SQLExecutionPlan, error)
}
type QueryResolver interface {
	ListUsers(ctx context.Context, userID *string) ([]*model.AdminUserInfo, error)
	ListRoles(ctx context.Context, roleID *string) ([]*model.AdminRoleInfo, error)
	ListPermissions(ctx context.Context) ([]*model.AdminPermissionInfo, error)
	CreateUser(ctx context.Context, userID string) (*model.AdminUserInfo, error)
	DeleteUser(ctx context.Context, userID string) (*bool, error)
	CreateRole(ctx context.Context, roleID string, roleName *string, description *string) (*model.AdminRoleInfo, error)
	UpdateRole(ctx context.Context, roleID string, roleName *string, description *string) (*model.AdminRoleInfo, error)
	DeleteRole(ctx context.Context, roleID string) (*bool, error)
	GrantUserRole(ctx context.Context, userID string, roleID string) (*bool, error)
	RevokeUserRole(ctx context.Context, userID string, roleID string) (*bool, error)
	SetSubjectPermissions(ctx context.Context, roleID string, permissions []string) ([]*model.AdminPermissionInfo, error)
	SetUserCredentials(ctx context.Context, userID string, providerID string, credentials interface{}) (*bool, error)
	EnableUser(ctx context.Context, userID string, enabled bool) (*bool, error)
	AllConnections(ctx context.Context, id *string) ([]*model.ConnectionInfo, error)
	SearchConnections(ctx context.Context, hostNames []string) ([]*model.AdminConnectionSearchInfo, error)
	CreateConnectionConfiguration(ctx context.Context, config model.ConnectionConfig) (*model.ConnectionInfo, error)
	CopyConnectionConfiguration(ctx context.Context, nodePath string, config *model.ConnectionConfig) (*model.ConnectionInfo, error)
	UpdateConnectionConfiguration(ctx context.Context, id string, config model.ConnectionConfig) (*model.ConnectionInfo, error)
	DeleteConnectionConfiguration(ctx context.Context, id string) (*bool, error)
	GetConnectionSubjectAccess(ctx context.Context, connectionID *string) ([]*model.AdminConnectionGrantInfo, error)
	SetConnectionSubjectAccess(ctx context.Context, connectionID string, subjects []string) (*bool, error)
	GetSubjectConnectionAccess(ctx context.Context, subjectID *string) ([]*model.AdminConnectionGrantInfo, error)
	SetSubjectConnectionAccess(ctx context.Context, subjectID string, connections []string) (*bool, error)
	ListFeatureSets(ctx context.Context) ([]*model.WebFeatureSet, error)
	ListAuthProviderConfigurationParameters(ctx context.Context, providerID string) ([]*model.ObjectPropertyInfo, error)
	ListAuthProviderConfigurations(ctx context.Context, providerID *string) ([]*model.AdminAuthProviderConfiguration, error)
	SaveAuthProviderConfiguration(ctx context.Context, providerID string, id string, displayName *string, disabled *bool, iconURL *string, description *string, parameters interface{}) (*model.AdminAuthProviderConfiguration, error)
	DeleteAuthProviderConfiguration(ctx context.Context, id string) (bool, error)
	SaveUserMetaParameter(ctx context.Context, id string, displayName string, description *string, required bool) (*model.ObjectPropertyInfo, error)
	DeleteUserMetaParameter(ctx context.Context, id string) (bool, error)
	SetUserMetaParameterValues(ctx context.Context, userID string, parameters interface{}) (bool, error)
	ConfigureServer(ctx context.Context, configuration model.ServerConfigInput) (bool, error)
	SetDefaultNavigatorSettings(ctx context.Context, settings model.NavigatorSettingsInput) (bool, error)
	AuthLogin(ctx context.Context, provider string, configuration *string, credentials interface{}, linkUser *bool) (*model.AuthInfo, error)
	AuthUpdateStatus(ctx context.Context, authID string, linkUser *bool) (*model.AuthInfo, error)
	AuthLogout(ctx context.Context, provider *string, configuration *string) (*bool, error)
	ActiveUser(ctx context.Context) (*model.UserInfo, error)
	AuthProviders(ctx context.Context) ([]*model.AuthProviderInfo, error)
	AuthChangeLocalPassword(ctx context.Context, oldPassword string, newPassword string) (bool, error)
	ListUserProfileProperties(ctx context.Context) ([]*model.ObjectPropertyInfo, error)
	ServerConfig(ctx context.Context) (*model.ServerConfig, error)
	SessionState(ctx context.Context) (*model.SessionInfo, error)
	SessionPermissions(ctx context.Context) ([]*string, error)
	DriverList(ctx context.Context, id *string) ([]*model.DriverInfo, error)
	AuthModels(ctx context.Context) ([]*model.DatabaseAuthModel, error)
	NetworkHandlers(ctx context.Context) ([]*model.NetworkHandlerDescriptor, error)
	UserConnections(ctx context.Context, id *string) ([]*model.ConnectionInfo, error)
	TemplateConnections(ctx context.Context) ([]*model.ConnectionInfo, error)
	ConnectionFolders(ctx context.Context, path *string) ([]*model.ConnectionFolderInfo, error)
	ConnectionState(ctx context.Context, id string) (*model.ConnectionInfo, error)
	ConnectionInfo(ctx context.Context, id string) (*model.ConnectionInfo, error)
	ReadSessionLog(ctx context.Context, maxEntries *int, clearEntries *bool) ([]*model.LogEntry, error)
	DataTransferAvailableStreamProcessors(ctx context.Context) ([]*model.DataTransferProcessorInfo, error)
	DataTransferExportDataFromContainer(ctx context.Context, connectionID string, containerNodePath string, parameters model.DataTransferParameters) (*model.AsyncTaskInfo, error)
	DataTransferExportDataFromResults(ctx context.Context, connectionID string, contextID string, resultsID string, parameters model.DataTransferParameters) (*model.AsyncTaskInfo, error)
	DataTransferRemoveDataFile(ctx context.Context, dataFileID string) (*bool, error)
	MetadataGetNodeDdl(ctx context.Context, nodeID string, options interface{}) (*string, error)
	NavNodeChildren(ctx context.Context, parentPath string, offset *int, limit *int, onlyFolders *bool) ([]*model.NavigatorNodeInfo, error)
	NavNodeParents(ctx context.Context, nodePath string) ([]*model.NavigatorNodeInfo, error)
	NavNodeInfo(ctx context.Context, nodePath string) (*model.NavigatorNodeInfo, error)
	NavRefreshNode(ctx context.Context, nodePath string) (*bool, error)
	NavGetStructContainers(ctx context.Context, connectionID string, contextID *string, catalog *string) (*model.DatabaseStructContainers, error)
	RmListProjects(ctx context.Context) ([]*model.RMProject, error)
	RmListResources(ctx context.Context, projectID string, folder *string, nameMask *string, readProperties *bool, readHistory *bool) ([]*model.RMResource, error)
	RmReadResourceAsString(ctx context.Context, projectID string, resourcePath string) (string, error)
	SQLDialectInfo(ctx context.Context, connectionID string) (*model.SQLDialectInfo, error)
	SQLListContexts(ctx context.Context, connectionID *string, contextID *string) ([]*model.SQLContextInfo, error)
	SQLCompletionProposals(ctx context.Context, connectionID string, contextID string, query string, position int, maxResults *int, simpleMode *bool) ([]*model.SQLCompletionProposal, error)
	SQLFormatQuery(ctx context.Context, connectionID string, contextID string, query string) (string, error)
	SQLSupportedOperations(ctx context.Context, connectionID string, contextID string, resultsID string, attributeIndex int) ([]*model.DataTypeLogicalOperation, error)
	SQLEntityQueryGenerators(ctx context.Context, nodePathList []string) ([]*model.SQLQueryGenerator, error)
	SQLGenerateEntityQuery(ctx context.Context, generatorID string, options interface{}, nodePathList []string) (string, error)
	SQLParseScript(ctx context.Context, connectionID string, script string) (*model.SQLScriptInfo, error)
	SQLParseQuery(ctx context.Context, connectionID string, script string, position int) (*model.SQLScriptQuery, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AdminAuthProviderConfiguration.description":
		if e.complexity.AdminAuthProviderConfiguration.Description == nil {
			break
		}

		return e.complexity.AdminAuthProviderConfiguration.Description(childComplexity), true

	case "AdminAuthProviderConfiguration.disabled":
		if e.complexity.AdminAuthProviderConfiguration.Disabled == nil {
			break
		}

		return e.complexity.AdminAuthProviderConfiguration.Disabled(childComplexity), true

	case "AdminAuthProviderConfiguration.displayName":
		if e.complexity.AdminAuthProviderConfiguration.DisplayName == nil {
			break
		}

		return e.complexity.AdminAuthProviderConfiguration.DisplayName(childComplexity), true

	case "AdminAuthProviderConfiguration.id":
		if e.complexity.AdminAuthProviderConfiguration.ID == nil {
			break
		}

		return e.complexity.AdminAuthProviderConfiguration.ID(childComplexity), true

	case "AdminAuthProviderConfiguration.iconURL":
		if e.complexity.AdminAuthProviderConfiguration.IconURL == nil {
			break
		}

		return e.complexity.AdminAuthProviderConfiguration.IconURL(childComplexity), true

	case "AdminAuthProviderConfiguration.metadataLink":
		if e.complexity.AdminAuthProviderConfiguration.MetadataLink == nil {
			break
		}

		return e.complexity.AdminAuthProviderConfiguration.MetadataLink(childComplexity), true

	case "AdminAuthProviderConfiguration.parameters":
		if e.complexity.AdminAuthProviderConfiguration.Parameters == nil {
			break
		}

		return e.complexity.AdminAuthProviderConfiguration.Parameters(childComplexity), true

	case "AdminAuthProviderConfiguration.providerId":
		if e.complexity.AdminAuthProviderConfiguration.ProviderID == nil {
			break
		}

		return e.complexity.AdminAuthProviderConfiguration.ProviderID(childComplexity), true

	case "AdminAuthProviderConfiguration.redirectLink":
		if e.complexity.AdminAuthProviderConfiguration.RedirectLink == nil {
			break
		}

		return e.complexity.AdminAuthProviderConfiguration.RedirectLink(childComplexity), true

	case "AdminAuthProviderConfiguration.signInLink":
		if e.complexity.AdminAuthProviderConfiguration.SignInLink == nil {
			break
		}

		return e.complexity.AdminAuthProviderConfiguration.SignInLink(childComplexity), true

	case "AdminAuthProviderConfiguration.signOutLink":
		if e.complexity.AdminAuthProviderConfiguration.SignOutLink == nil {
			break
		}

		return e.complexity.AdminAuthProviderConfiguration.SignOutLink(childComplexity), true

	case "AdminConnectionGrantInfo.connectionId":
		if e.complexity.AdminConnectionGrantInfo.ConnectionID == nil {
			break
		}

		return e.complexity.AdminConnectionGrantInfo.ConnectionID(childComplexity), true

	case "AdminConnectionGrantInfo.dataSourceId":
		if e.complexity.AdminConnectionGrantInfo.DataSourceID == nil {
			break
		}

		return e.complexity.AdminConnectionGrantInfo.DataSourceID(childComplexity), true

	case "AdminConnectionGrantInfo.subjectId":
		if e.complexity.AdminConnectionGrantInfo.SubjectID == nil {
			break
		}

		return e.complexity.AdminConnectionGrantInfo.SubjectID(childComplexity), true

	case "AdminConnectionGrantInfo.subjectType":
		if e.complexity.AdminConnectionGrantInfo.SubjectType == nil {
			break
		}

		return e.complexity.AdminConnectionGrantInfo.SubjectType(childComplexity), true

	case "AdminConnectionSearchInfo.defaultDriver":
		if e.complexity.AdminConnectionSearchInfo.DefaultDriver == nil {
			break
		}

		return e.complexity.AdminConnectionSearchInfo.DefaultDriver(childComplexity), true

	case "AdminConnectionSearchInfo.displayName":
		if e.complexity.AdminConnectionSearchInfo.DisplayName == nil {
			break
		}

		return e.complexity.AdminConnectionSearchInfo.DisplayName(childComplexity), true

	case "AdminConnectionSearchInfo.host":
		if e.complexity.AdminConnectionSearchInfo.Host == nil {
			break
		}

		return e.complexity.AdminConnectionSearchInfo.Host(childComplexity), true

	case "AdminConnectionSearchInfo.port":
		if e.complexity.AdminConnectionSearchInfo.Port == nil {
			break
		}

		return e.complexity.AdminConnectionSearchInfo.Port(childComplexity), true

	case "AdminConnectionSearchInfo.possibleDrivers":
		if e.complexity.AdminConnectionSearchInfo.PossibleDrivers == nil {
			break
		}

		return e.complexity.AdminConnectionSearchInfo.PossibleDrivers(childComplexity), true

	case "AdminPermissionInfo.category":
		if e.complexity.AdminPermissionInfo.Category == nil {
			break
		}

		return e.complexity.AdminPermissionInfo.Category(childComplexity), true

	case "AdminPermissionInfo.description":
		if e.complexity.AdminPermissionInfo.Description == nil {
			break
		}

		return e.complexity.AdminPermissionInfo.Description(childComplexity), true

	case "AdminPermissionInfo.id":
		if e.complexity.AdminPermissionInfo.ID == nil {
			break
		}

		return e.complexity.AdminPermissionInfo.ID(childComplexity), true

	case "AdminPermissionInfo.label":
		if e.complexity.AdminPermissionInfo.Label == nil {
			break
		}

		return e.complexity.AdminPermissionInfo.Label(childComplexity), true

	case "AdminPermissionInfo.provider":
		if e.complexity.AdminPermissionInfo.Provider == nil {
			break
		}

		return e.complexity.AdminPermissionInfo.Provider(childComplexity), true

	case "AdminRoleInfo.description":
		if e.complexity.AdminRoleInfo.Description == nil {
			break
		}

		return e.complexity.AdminRoleInfo.Description(childComplexity), true

	case "AdminRoleInfo.grantedConnections":
		if e.complexity.AdminRoleInfo.GrantedConnections == nil {
			break
		}

		return e.complexity.AdminRoleInfo.GrantedConnections(childComplexity), true

	case "AdminRoleInfo.grantedUsers":
		if e.complexity.AdminRoleInfo.GrantedUsers == nil {
			break
		}

		return e.complexity.AdminRoleInfo.GrantedUsers(childComplexity), true

	case "AdminRoleInfo.roleId":
		if e.complexity.AdminRoleInfo.RoleID == nil {
			break
		}

		return e.complexity.AdminRoleInfo.RoleID(childComplexity), true

	case "AdminRoleInfo.roleName":
		if e.complexity.AdminRoleInfo.RoleName == nil {
			break
		}

		return e.complexity.AdminRoleInfo.RoleName(childComplexity), true

	case "AdminRoleInfo.rolePermissions":
		if e.complexity.AdminRoleInfo.RolePermissions == nil {
			break
		}

		return e.complexity.AdminRoleInfo.RolePermissions(childComplexity), true

	case "AdminUserInfo.configurationParameters":
		if e.complexity.AdminUserInfo.ConfigurationParameters == nil {
			break
		}

		return e.complexity.AdminUserInfo.ConfigurationParameters(childComplexity), true

	case "AdminUserInfo.enabled":
		if e.complexity.AdminUserInfo.Enabled == nil {
			break
		}

		return e.complexity.AdminUserInfo.Enabled(childComplexity), true

	case "AdminUserInfo.grantedConnections":
		if e.complexity.AdminUserInfo.GrantedConnections == nil {
			break
		}

		return e.complexity.AdminUserInfo.GrantedConnections(childComplexity), true

	case "AdminUserInfo.grantedRoles":
		if e.complexity.AdminUserInfo.GrantedRoles == nil {
			break
		}

		return e.complexity.AdminUserInfo.GrantedRoles(childComplexity), true

	case "AdminUserInfo.linkedAuthProviders":
		if e.complexity.AdminUserInfo.LinkedAuthProviders == nil {
			break
		}

		return e.complexity.AdminUserInfo.LinkedAuthProviders(childComplexity), true

	case "AdminUserInfo.metaParameters":
		if e.complexity.AdminUserInfo.MetaParameters == nil {
			break
		}

		return e.complexity.AdminUserInfo.MetaParameters(childComplexity), true

	case "AdminUserInfo.origins":
		if e.complexity.AdminUserInfo.Origins == nil {
			break
		}

		return e.complexity.AdminUserInfo.Origins(childComplexity), true

	case "AdminUserInfo.userId":
		if e.complexity.AdminUserInfo.UserID == nil {
			break
		}

		return e.complexity.AdminUserInfo.UserID(childComplexity), true

	case "AsyncTaskInfo.error":
		if e.complexity.AsyncTaskInfo.Error == nil {
			break
		}

		return e.complexity.AsyncTaskInfo.Error(childComplexity), true

	case "AsyncTaskInfo.id":
		if e.complexity.AsyncTaskInfo.ID == nil {
			break
		}

		return e.complexity.AsyncTaskInfo.ID(childComplexity), true

	case "AsyncTaskInfo.name":
		if e.complexity.AsyncTaskInfo.Name == nil {
			break
		}

		return e.complexity.AsyncTaskInfo.Name(childComplexity), true

	case "AsyncTaskInfo.result":
		if e.complexity.AsyncTaskInfo.Result == nil {
			break
		}

		return e.complexity.AsyncTaskInfo.Result(childComplexity), true

	case "AsyncTaskInfo.running":
		if e.complexity.AsyncTaskInfo.Running == nil {
			break
		}

		return e.complexity.AsyncTaskInfo.Running(childComplexity), true

	case "AsyncTaskInfo.status":
		if e.complexity.AsyncTaskInfo.Status == nil {
			break
		}

		return e.complexity.AsyncTaskInfo.Status(childComplexity), true

	case "AsyncTaskInfo.taskResult":
		if e.complexity.AsyncTaskInfo.TaskResult == nil {
			break
		}

		return e.complexity.AsyncTaskInfo.TaskResult(childComplexity), true

	case "AuthCredentialInfo.admin":
		if e.complexity.AuthCredentialInfo.Admin == nil {
			break
		}

		return e.complexity.AuthCredentialInfo.Admin(childComplexity), true

	case "AuthCredentialInfo.description":
		if e.complexity.AuthCredentialInfo.Description == nil {
			break
		}

		return e.complexity.AuthCredentialInfo.Description(childComplexity), true

	case "AuthCredentialInfo.displayName":
		if e.complexity.AuthCredentialInfo.DisplayName == nil {
			break
		}

		return e.complexity.AuthCredentialInfo.DisplayName(childComplexity), true

	case "AuthCredentialInfo.encryption":
		if e.complexity.AuthCredentialInfo.Encryption == nil {
			break
		}

		return e.complexity.AuthCredentialInfo.Encryption(childComplexity), true

	case "AuthCredentialInfo.id":
		if e.complexity.AuthCredentialInfo.ID == nil {
			break
		}

		return e.complexity.AuthCredentialInfo.ID(childComplexity), true

	case "AuthCredentialInfo.identifying":
		if e.complexity.AuthCredentialInfo.Identifying == nil {
			break
		}

		return e.complexity.AuthCredentialInfo.Identifying(childComplexity), true

	case "AuthCredentialInfo.possibleValues":
		if e.complexity.AuthCredentialInfo.PossibleValues == nil {
			break
		}

		return e.complexity.AuthCredentialInfo.PossibleValues(childComplexity), true

	case "AuthCredentialInfo.user":
		if e.complexity.AuthCredentialInfo.User == nil {
			break
		}

		return e.complexity.AuthCredentialInfo.User(childComplexity), true

	case "AuthInfo.authId":
		if e.complexity.AuthInfo.AuthID == nil {
			break
		}

		return e.complexity.AuthInfo.AuthID(childComplexity), true

	case "AuthInfo.authStatus":
		if e.complexity.AuthInfo.AuthStatus == nil {
			break
		}

		return e.complexity.AuthInfo.AuthStatus(childComplexity), true

	case "AuthInfo.redirectLink":
		if e.complexity.AuthInfo.RedirectLink == nil {
			break
		}

		return e.complexity.AuthInfo.RedirectLink(childComplexity), true

	case "AuthInfo.userTokens":
		if e.complexity.AuthInfo.UserTokens == nil {
			break
		}

		return e.complexity.AuthInfo.UserTokens(childComplexity), true

	case "AuthProviderConfiguration.description":
		if e.complexity.AuthProviderConfiguration.Description == nil {
			break
		}

		return e.complexity.AuthProviderConfiguration.Description(childComplexity), true

	case "AuthProviderConfiguration.disabled":
		if e.complexity.AuthProviderConfiguration.Disabled == nil {
			break
		}

		return e.complexity.AuthProviderConfiguration.Disabled(childComplexity), true

	case "AuthProviderConfiguration.displayName":
		if e.complexity.AuthProviderConfiguration.DisplayName == nil {
			break
		}

		return e.complexity.AuthProviderConfiguration.DisplayName(childComplexity), true

	case "AuthProviderConfiguration.id":
		if e.complexity.AuthProviderConfiguration.ID == nil {
			break
		}

		return e.complexity.AuthProviderConfiguration.ID(childComplexity), true

	case "AuthProviderConfiguration.iconURL":
		if e.complexity.AuthProviderConfiguration.IconURL == nil {
			break
		}

		return e.complexity.AuthProviderConfiguration.IconURL(childComplexity), true

	case "AuthProviderConfiguration.metadataLink":
		if e.complexity.AuthProviderConfiguration.MetadataLink == nil {
			break
		}

		return e.complexity.AuthProviderConfiguration.MetadataLink(childComplexity), true

	case "AuthProviderConfiguration.signInLink":
		if e.complexity.AuthProviderConfiguration.SignInLink == nil {
			break
		}

		return e.complexity.AuthProviderConfiguration.SignInLink(childComplexity), true

	case "AuthProviderConfiguration.signOutLink":
		if e.complexity.AuthProviderConfiguration.SignOutLink == nil {
			break
		}

		return e.complexity.AuthProviderConfiguration.SignOutLink(childComplexity), true

	case "AuthProviderCredentialsProfile.credentialParameters":
		if e.complexity.AuthProviderCredentialsProfile.CredentialParameters == nil {
			break
		}

		return e.complexity.AuthProviderCredentialsProfile.CredentialParameters(childComplexity), true

	case "AuthProviderCredentialsProfile.description":
		if e.complexity.AuthProviderCredentialsProfile.Description == nil {
			break
		}

		return e.complexity.AuthProviderCredentialsProfile.Description(childComplexity), true

	case "AuthProviderCredentialsProfile.id":
		if e.complexity.AuthProviderCredentialsProfile.ID == nil {
			break
		}

		return e.complexity.AuthProviderCredentialsProfile.ID(childComplexity), true

	case "AuthProviderCredentialsProfile.label":
		if e.complexity.AuthProviderCredentialsProfile.Label == nil {
			break
		}

		return e.complexity.AuthProviderCredentialsProfile.Label(childComplexity), true

	case "AuthProviderInfo.configurable":
		if e.complexity.AuthProviderInfo.Configurable == nil {
			break
		}

		return e.complexity.AuthProviderInfo.Configurable(childComplexity), true

	case "AuthProviderInfo.configurations":
		if e.complexity.AuthProviderInfo.Configurations == nil {
			break
		}

		return e.complexity.AuthProviderInfo.Configurations(childComplexity), true

	case "AuthProviderInfo.credentialProfiles":
		if e.complexity.AuthProviderInfo.CredentialProfiles == nil {
			break
		}

		return e.complexity.AuthProviderInfo.CredentialProfiles(childComplexity), true

	case "AuthProviderInfo.defaultProvider":
		if e.complexity.AuthProviderInfo.DefaultProvider == nil {
			break
		}

		return e.complexity.AuthProviderInfo.DefaultProvider(childComplexity), true

	case "AuthProviderInfo.description":
		if e.complexity.AuthProviderInfo.Description == nil {
			break
		}

		return e.complexity.AuthProviderInfo.Description(childComplexity), true

	case "AuthProviderInfo.id":
		if e.complexity.AuthProviderInfo.ID == nil {
			break
		}

		return e.complexity.AuthProviderInfo.ID(childComplexity), true

	case "AuthProviderInfo.icon":
		if e.complexity.AuthProviderInfo.Icon == nil {
			break
		}

		return e.complexity.AuthProviderInfo.Icon(childComplexity), true

	case "AuthProviderInfo.label":
		if e.complexity.AuthProviderInfo.Label == nil {
			break
		}

		return e.complexity.AuthProviderInfo.Label(childComplexity), true

	case "AuthProviderInfo.requiredFeatures":
		if e.complexity.AuthProviderInfo.RequiredFeatures == nil {
			break
		}

		return e.complexity.AuthProviderInfo.RequiredFeatures(childComplexity), true

	case "ConnectionFolderInfo.description":
		if e.complexity.ConnectionFolderInfo.Description == nil {
			break
		}

		return e.complexity.ConnectionFolderInfo.Description(childComplexity), true

	case "ConnectionFolderInfo.id":
		if e.complexity.ConnectionFolderInfo.ID == nil {
			break
		}

		return e.complexity.ConnectionFolderInfo.ID(childComplexity), true

	case "ConnectionInfo.authModel":
		if e.complexity.ConnectionInfo.AuthModel == nil {
			break
		}

		return e.complexity.ConnectionInfo.AuthModel(childComplexity), true

	case "ConnectionInfo.authNeeded":
		if e.complexity.ConnectionInfo.AuthNeeded == nil {
			break
		}

		return e.complexity.ConnectionInfo.AuthNeeded(childComplexity), true

	case "ConnectionInfo.authProperties":
		if e.complexity.ConnectionInfo.AuthProperties == nil {
			break
		}

		return e.complexity.ConnectionInfo.AuthProperties(childComplexity), true

	case "ConnectionInfo.clientVersion":
		if e.complexity.ConnectionInfo.ClientVersion == nil {
			break
		}

		return e.complexity.ConnectionInfo.ClientVersion(childComplexity), true

	case "ConnectionInfo.connectTime":
		if e.complexity.ConnectionInfo.ConnectTime == nil {
			break
		}

		return e.complexity.ConnectionInfo.ConnectTime(childComplexity), true

	case "ConnectionInfo.connected":
		if e.complexity.ConnectionInfo.Connected == nil {
			break
		}

		return e.complexity.ConnectionInfo.Connected(childComplexity), true

	case "ConnectionInfo.connectionError":
		if e.complexity.ConnectionInfo.ConnectionError == nil {
			break
		}

		return e.complexity.ConnectionInfo.ConnectionError(childComplexity), true

	case "ConnectionInfo.databaseName":
		if e.complexity.ConnectionInfo.DatabaseName == nil {
			break
		}

		return e.complexity.ConnectionInfo.DatabaseName(childComplexity), true

	case "ConnectionInfo.description":
		if e.complexity.ConnectionInfo.Description == nil {
			break
		}

		return e.complexity.ConnectionInfo.Description(childComplexity), true

	case "ConnectionInfo.driverId":
		if e.complexity.ConnectionInfo.DriverID == nil {
			break
		}

		return e.complexity.ConnectionInfo.DriverID(childComplexity), true

	case "ConnectionInfo.features":
		if e.complexity.ConnectionInfo.Features == nil {
			break
		}

		return e.complexity.ConnectionInfo.Features(childComplexity), true

	case "ConnectionInfo.folder":
		if e.complexity.ConnectionInfo.Folder == nil {
			break
		}

		return e.complexity.ConnectionInfo.Folder(childComplexity), true

	case "ConnectionInfo.host":
		if e.complexity.ConnectionInfo.Host == nil {
			break
		}

		return e.complexity.ConnectionInfo.Host(childComplexity), true

	case "ConnectionInfo.id":
		if e.complexity.ConnectionInfo.ID == nil {
			break
		}

		return e.complexity.ConnectionInfo.ID(childComplexity), true

	case "ConnectionInfo.name":
		if e.complexity.ConnectionInfo.Name == nil {
			break
		}

		return e.complexity.ConnectionInfo.Name(childComplexity), true

	case "ConnectionInfo.navigatorSettings":
		if e.complexity.ConnectionInfo.NavigatorSettings == nil {
			break
		}

		return e.complexity.ConnectionInfo.NavigatorSettings(childComplexity), true

	case "ConnectionInfo.networkHandlersConfig":
		if e.complexity.ConnectionInfo.NetworkHandlersConfig == nil {
			break
		}

		return e.complexity.ConnectionInfo.NetworkHandlersConfig(childComplexity), true

	case "ConnectionInfo.nodePath":
		if e.complexity.ConnectionInfo.NodePath == nil {
			break
		}

		return e.complexity.ConnectionInfo.NodePath(childComplexity), true

	case "ConnectionInfo.origin":
		if e.complexity.ConnectionInfo.Origin == nil {
			break
		}

		return e.complexity.ConnectionInfo.Origin(childComplexity), true

	case "ConnectionInfo.port":
		if e.complexity.ConnectionInfo.Port == nil {
			break
		}

		return e.complexity.ConnectionInfo.Port(childComplexity), true

	case "ConnectionInfo.properties":
		if e.complexity.ConnectionInfo.Properties == nil {
			break
		}

		return e.complexity.ConnectionInfo.Properties(childComplexity), true

	case "ConnectionInfo.provided":
		if e.complexity.ConnectionInfo.Provided == nil {
			break
		}

		return e.complexity.ConnectionInfo.Provided(childComplexity), true

	case "ConnectionInfo.providerProperties":
		if e.complexity.ConnectionInfo.ProviderProperties == nil {
			break
		}

		return e.complexity.ConnectionInfo.ProviderProperties(childComplexity), true

	case "ConnectionInfo.readOnly":
		if e.complexity.ConnectionInfo.ReadOnly == nil {
			break
		}

		return e.complexity.ConnectionInfo.ReadOnly(childComplexity), true

	case "ConnectionInfo.saveCredentials":
		if e.complexity.ConnectionInfo.SaveCredentials == nil {
			break
		}

		return e.complexity.ConnectionInfo.SaveCredentials(childComplexity), true

	case "ConnectionInfo.serverName":
		if e.complexity.ConnectionInfo.ServerName == nil {
			break
		}

		return e.complexity.ConnectionInfo.ServerName(childComplexity), true

	case "ConnectionInfo.serverVersion":
		if e.complexity.ConnectionInfo.ServerVersion == nil {
			break
		}

		return e.complexity.ConnectionInfo.ServerVersion(childComplexity), true

	case "ConnectionInfo.supportedDataFormats":
		if e.complexity.ConnectionInfo.SupportedDataFormats == nil {
			break
		}

		return e.complexity.ConnectionInfo.SupportedDataFormats(childComplexity), true

	case "ConnectionInfo.template":
		if e.complexity.ConnectionInfo.Template == nil {
			break
		}

		return e.complexity.ConnectionInfo.Template(childComplexity), true

	case "ConnectionInfo.url":
		if e.complexity.ConnectionInfo.URL == nil {
			break
		}

		return e.complexity.ConnectionInfo.URL(childComplexity), true

	case "ConnectionInfo.useUrl":
		if e.complexity.ConnectionInfo.UseURL == nil {
			break
		}

		return e.complexity.ConnectionInfo.UseURL(childComplexity), true

	case "DataTransferProcessorInfo.appFileExtension":
		if e.complexity.DataTransferProcessorInfo.AppFileExtension == nil {
			break
		}

		return e.complexity.DataTransferProcessorInfo.AppFileExtension(childComplexity), true

	case "DataTransferProcessorInfo.appName":
		if e.complexity.DataTransferProcessorInfo.AppName == nil {
			break
		}

		return e.complexity.DataTransferProcessorInfo.AppName(childComplexity), true

	case "DataTransferProcessorInfo.description":
		if e.complexity.DataTransferProcessorInfo.Description == nil {
			break
		}

		return e.complexity.DataTransferProcessorInfo.Description(childComplexity), true

	case "DataTransferProcessorInfo.fileExtension":
		if e.complexity.DataTransferProcessorInfo.FileExtension == nil {
			break
		}

		return e.complexity.DataTransferProcessorInfo.FileExtension(childComplexity), true

	case "DataTransferProcessorInfo.id":
		if e.complexity.DataTransferProcessorInfo.ID == nil {
			break
		}

		return e.complexity.DataTransferProcessorInfo.ID(childComplexity), true

	case "DataTransferProcessorInfo.icon":
		if e.complexity.DataTransferProcessorInfo.Icon == nil {
			break
		}

		return e.complexity.DataTransferProcessorInfo.Icon(childComplexity), true

	case "DataTransferProcessorInfo.isBinary":
		if e.complexity.DataTransferProcessorInfo.IsBinary == nil {
			break
		}

		return e.complexity.DataTransferProcessorInfo.IsBinary(childComplexity), true

	case "DataTransferProcessorInfo.isHTML":
		if e.complexity.DataTransferProcessorInfo.IsHTML == nil {
			break
		}

		return e.complexity.DataTransferProcessorInfo.IsHTML(childComplexity), true

	case "DataTransferProcessorInfo.name":
		if e.complexity.DataTransferProcessorInfo.Name == nil {
			break
		}

		return e.complexity.DataTransferProcessorInfo.Name(childComplexity), true

	case "DataTransferProcessorInfo.order":
		if e.complexity.DataTransferProcessorInfo.Order == nil {
			break
		}

		return e.complexity.DataTransferProcessorInfo.Order(childComplexity), true

	case "DataTransferProcessorInfo.properties":
		if e.complexity.DataTransferProcessorInfo.Properties == nil {
			break
		}

		return e.complexity.DataTransferProcessorInfo.Properties(childComplexity), true

	case "DataTypeLogicalOperation.argumentCount":
		if e.complexity.DataTypeLogicalOperation.ArgumentCount == nil {
			break
		}

		return e.complexity.DataTypeLogicalOperation.ArgumentCount(childComplexity), true

	case "DataTypeLogicalOperation.expression":
		if e.complexity.DataTypeLogicalOperation.Expression == nil {
			break
		}

		return e.complexity.DataTypeLogicalOperation.Expression(childComplexity), true

	case "DataTypeLogicalOperation.id":
		if e.complexity.DataTypeLogicalOperation.ID == nil {
			break
		}

		return e.complexity.DataTypeLogicalOperation.ID(childComplexity), true

	case "DatabaseAuthModel.description":
		if e.complexity.DatabaseAuthModel.Description == nil {
			break
		}

		return e.complexity.DatabaseAuthModel.Description(childComplexity), true

	case "DatabaseAuthModel.displayName":
		if e.complexity.DatabaseAuthModel.DisplayName == nil {
			break
		}

		return e.complexity.DatabaseAuthModel.DisplayName(childComplexity), true

	case "DatabaseAuthModel.id":
		if e.complexity.DatabaseAuthModel.ID == nil {
			break
		}

		return e.complexity.DatabaseAuthModel.ID(childComplexity), true

	case "DatabaseAuthModel.icon":
		if e.complexity.DatabaseAuthModel.Icon == nil {
			break
		}

		return e.complexity.DatabaseAuthModel.Icon(childComplexity), true

	case "DatabaseAuthModel.properties":
		if e.complexity.DatabaseAuthModel.Properties == nil {
			break
		}

		return e.complexity.DatabaseAuthModel.Properties(childComplexity), true

	case "DatabaseAuthModel.requiresLocalConfiguration":
		if e.complexity.DatabaseAuthModel.RequiresLocalConfiguration == nil {
			break
		}

		return e.complexity.DatabaseAuthModel.RequiresLocalConfiguration(childComplexity), true

	case "DatabaseCatalog.catalog":
		if e.complexity.DatabaseCatalog.Catalog == nil {
			break
		}

		return e.complexity.DatabaseCatalog.Catalog(childComplexity), true

	case "DatabaseCatalog.schemaList":
		if e.complexity.DatabaseCatalog.SchemaList == nil {
			break
		}

		return e.complexity.DatabaseCatalog.SchemaList(childComplexity), true

	case "DatabaseDocument.contentType":
		if e.complexity.DatabaseDocument.ContentType == nil {
			break
		}

		return e.complexity.DatabaseDocument.ContentType(childComplexity), true

	case "DatabaseDocument.data":
		if e.complexity.DatabaseDocument.Data == nil {
			break
		}

		return e.complexity.DatabaseDocument.Data(childComplexity), true

	case "DatabaseDocument.id":
		if e.complexity.DatabaseDocument.ID == nil {
			break
		}

		return e.complexity.DatabaseDocument.ID(childComplexity), true

	case "DatabaseDocument.properties":
		if e.complexity.DatabaseDocument.Properties == nil {
			break
		}

		return e.complexity.DatabaseDocument.Properties(childComplexity), true

	case "DatabaseObjectInfo.description":
		if e.complexity.DatabaseObjectInfo.Description == nil {
			break
		}

		return e.complexity.DatabaseObjectInfo.Description(childComplexity), true

	case "DatabaseObjectInfo.editors":
		if e.complexity.DatabaseObjectInfo.Editors == nil {
			break
		}

		return e.complexity.DatabaseObjectInfo.Editors(childComplexity), true

	case "DatabaseObjectInfo.features":
		if e.complexity.DatabaseObjectInfo.Features == nil {
			break
		}

		return e.complexity.DatabaseObjectInfo.Features(childComplexity), true

	case "DatabaseObjectInfo.fullyQualifiedName":
		if e.complexity.DatabaseObjectInfo.FullyQualifiedName == nil {
			break
		}

		return e.complexity.DatabaseObjectInfo.FullyQualifiedName(childComplexity), true

	case "DatabaseObjectInfo.name":
		if e.complexity.DatabaseObjectInfo.Name == nil {
			break
		}

		return e.complexity.DatabaseObjectInfo.Name(childComplexity), true

	case "DatabaseObjectInfo.ordinalPosition":
		if e.complexity.DatabaseObjectInfo.OrdinalPosition == nil {
			break
		}

		return e.complexity.DatabaseObjectInfo.OrdinalPosition(childComplexity), true

	case "DatabaseObjectInfo.overloadedName":
		if e.complexity.DatabaseObjectInfo.OverloadedName == nil {
			break
		}

		return e.complexity.DatabaseObjectInfo.OverloadedName(childComplexity), true

	case "DatabaseObjectInfo.properties":
		if e.complexity.DatabaseObjectInfo.Properties == nil {
			break
		}

		args, err := ec.field_DatabaseObjectInfo_properties_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DatabaseObjectInfo.Properties(childComplexity, args["filter"].(*model.ObjectPropertyFilter)), true

	case "DatabaseObjectInfo.state":
		if e.complexity.DatabaseObjectInfo.State == nil {
			break
		}

		return e.complexity.DatabaseObjectInfo.State(childComplexity), true

	case "DatabaseObjectInfo.type":
		if e.complexity.DatabaseObjectInfo.Type == nil {
			break
		}

		return e.complexity.DatabaseObjectInfo.Type(childComplexity), true

	case "DatabaseObjectInfo.uniqueName":
		if e.complexity.DatabaseObjectInfo.UniqueName == nil {
			break
		}

		return e.complexity.DatabaseObjectInfo.UniqueName(childComplexity), true

	case "DatabaseStructContainers.catalogList":
		if e.complexity.DatabaseStructContainers.CatalogList == nil {
			break
		}

		return e.complexity.DatabaseStructContainers.CatalogList(childComplexity), true

	case "DatabaseStructContainers.schemaList":
		if e.complexity.DatabaseStructContainers.SchemaList == nil {
			break
		}

		return e.complexity.DatabaseStructContainers.SchemaList(childComplexity), true

	case "DatabaseStructContainers.supportsCatalogChange":
		if e.complexity.DatabaseStructContainers.SupportsCatalogChange == nil {
			break
		}

		return e.complexity.DatabaseStructContainers.SupportsCatalogChange(childComplexity), true

	case "DatabaseStructContainers.supportsSchemaChange":
		if e.complexity.DatabaseStructContainers.SupportsSchemaChange == nil {
			break
		}

		return e.complexity.DatabaseStructContainers.SupportsSchemaChange(childComplexity), true

	case "DriverInfo.allowsEmptyPassword":
		if e.complexity.DriverInfo.AllowsEmptyPassword == nil {
			break
		}

		return e.complexity.DriverInfo.AllowsEmptyPassword(childComplexity), true

	case "DriverInfo.anonymousAccess":
		if e.complexity.DriverInfo.AnonymousAccess == nil {
			break
		}

		return e.complexity.DriverInfo.AnonymousAccess(childComplexity), true

	case "DriverInfo.applicableAuthModels":
		if e.complexity.DriverInfo.ApplicableAuthModels == nil {
			break
		}

		return e.complexity.DriverInfo.ApplicableAuthModels(childComplexity), true

	case "DriverInfo.applicableNetworkHandlers":
		if e.complexity.DriverInfo.ApplicableNetworkHandlers == nil {
			break
		}

		return e.complexity.DriverInfo.ApplicableNetworkHandlers(childComplexity), true

	case "DriverInfo.custom":
		if e.complexity.DriverInfo.Custom == nil {
			break
		}

		return e.complexity.DriverInfo.Custom(childComplexity), true

	case "DriverInfo.defaultAuthModel":
		if e.complexity.DriverInfo.DefaultAuthModel == nil {
			break
		}

		return e.complexity.DriverInfo.DefaultAuthModel(childComplexity), true

	case "DriverInfo.defaultDatabase":
		if e.complexity.DriverInfo.DefaultDatabase == nil {
			break
		}

		return e.complexity.DriverInfo.DefaultDatabase(childComplexity), true

	case "DriverInfo.defaultHost":
		if e.complexity.DriverInfo.DefaultHost == nil {
			break
		}

		return e.complexity.DriverInfo.DefaultHost(childComplexity), true

	case "DriverInfo.defaultPort":
		if e.complexity.DriverInfo.DefaultPort == nil {
			break
		}

		return e.complexity.DriverInfo.DefaultPort(childComplexity), true

	case "DriverInfo.defaultServer":
		if e.complexity.DriverInfo.DefaultServer == nil {
			break
		}

		return e.complexity.DriverInfo.DefaultServer(childComplexity), true

	case "DriverInfo.defaultUser":
		if e.complexity.DriverInfo.DefaultUser == nil {
			break
		}

		return e.complexity.DriverInfo.DefaultUser(childComplexity), true

	case "DriverInfo.description":
		if e.complexity.DriverInfo.Description == nil {
			break
		}

		return e.complexity.DriverInfo.Description(childComplexity), true

	case "DriverInfo.driverClassName":
		if e.complexity.DriverInfo.DriverClassName == nil {
			break
		}

		return e.complexity.DriverInfo.DriverClassName(childComplexity), true

	case "DriverInfo.driverInfoURL":
		if e.complexity.DriverInfo.DriverInfoURL == nil {
			break
		}

		return e.complexity.DriverInfo.DriverInfoURL(childComplexity), true

	case "DriverInfo.driverParameters":
		if e.complexity.DriverInfo.DriverParameters == nil {
			break
		}

		return e.complexity.DriverInfo.DriverParameters(childComplexity), true

	case "DriverInfo.driverProperties":
		if e.complexity.DriverInfo.DriverProperties == nil {
			break
		}

		return e.complexity.DriverInfo.DriverProperties(childComplexity), true

	case "DriverInfo.driverPropertiesURL":
		if e.complexity.DriverInfo.DriverPropertiesURL == nil {
			break
		}

		return e.complexity.DriverInfo.DriverPropertiesURL(childComplexity), true

	case "DriverInfo.embedded":
		if e.complexity.DriverInfo.Embedded == nil {
			break
		}

		return e.complexity.DriverInfo.Embedded(childComplexity), true

	case "DriverInfo.enabled":
		if e.complexity.DriverInfo.Enabled == nil {
			break
		}

		return e.complexity.DriverInfo.Enabled(childComplexity), true

	case "DriverInfo.id":
		if e.complexity.DriverInfo.ID == nil {
			break
		}

		return e.complexity.DriverInfo.ID(childComplexity), true

	case "DriverInfo.icon":
		if e.complexity.DriverInfo.Icon == nil {
			break
		}

		return e.complexity.DriverInfo.Icon(childComplexity), true

	case "DriverInfo.iconBig":
		if e.complexity.DriverInfo.IconBig == nil {
			break
		}

		return e.complexity.DriverInfo.IconBig(childComplexity), true

	case "DriverInfo.license":
		if e.complexity.DriverInfo.License == nil {
			break
		}

		return e.complexity.DriverInfo.License(childComplexity), true

	case "DriverInfo.licenseRequired":
		if e.complexity.DriverInfo.LicenseRequired == nil {
			break
		}

		return e.complexity.DriverInfo.LicenseRequired(childComplexity), true

	case "DriverInfo.name":
		if e.complexity.DriverInfo.Name == nil {
			break
		}

		return e.complexity.DriverInfo.Name(childComplexity), true

	case "DriverInfo.promotedScore":
		if e.complexity.DriverInfo.PromotedScore == nil {
			break
		}

		return e.complexity.DriverInfo.PromotedScore(childComplexity), true

	case "DriverInfo.providerId":
		if e.complexity.DriverInfo.ProviderID == nil {
			break
		}

		return e.complexity.DriverInfo.ProviderID(childComplexity), true

	case "DriverInfo.providerProperties":
		if e.complexity.DriverInfo.ProviderProperties == nil {
			break
		}

		return e.complexity.DriverInfo.ProviderProperties(childComplexity), true

	case "DriverInfo.requiresServerName":
		if e.complexity.DriverInfo.RequiresServerName == nil {
			break
		}

		return e.complexity.DriverInfo.RequiresServerName(childComplexity), true

	case "DriverInfo.sampleURL":
		if e.complexity.DriverInfo.SampleURL == nil {
			break
		}

		return e.complexity.DriverInfo.SampleURL(childComplexity), true

	case "LogEntry.message":
		if e.complexity.LogEntry.Message == nil {
			break
		}

		return e.complexity.LogEntry.Message(childComplexity), true

	case "LogEntry.stackTrace":
		if e.complexity.LogEntry.StackTrace == nil {
			break
		}

		return e.complexity.LogEntry.StackTrace(childComplexity), true

	case "LogEntry.time":
		if e.complexity.LogEntry.Time == nil {
			break
		}

		return e.complexity.LogEntry.Time(childComplexity), true

	case "LogEntry.type":
		if e.complexity.LogEntry.Type == nil {
			break
		}

		return e.complexity.LogEntry.Type(childComplexity), true

	case "Mutation.asyncReadDataFromContainer":
		if e.complexity.Mutation.AsyncReadDataFromContainer == nil {
			break
		}

		args, err := ec.field_Mutation_asyncReadDataFromContainer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AsyncReadDataFromContainer(childComplexity, args["connectionId"].(string), args["contextId"].(string), args["containerNodePath"].(string), args["resultId"].(*string), args["filter"].(*model.SQLDataFilter), args["dataFormat"].(*model.ResultDataFormat)), true

	case "Mutation.asyncSqlExecuteQuery":
		if e.complexity.Mutation.AsyncSQLExecuteQuery == nil {
			break
		}

		args, err := ec.field_Mutation_asyncSqlExecuteQuery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AsyncSQLExecuteQuery(childComplexity, args["connectionId"].(string), args["contextId"].(string), args["sql"].(string), args["resultId"].(*string), args["filter"].(*model.SQLDataFilter), args["dataFormat"].(*model.ResultDataFormat)), true

	case "Mutation.asyncSqlExecuteResults":
		if e.complexity.Mutation.AsyncSQLExecuteResults == nil {
			break
		}

		args, err := ec.field_Mutation_asyncSqlExecuteResults_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AsyncSQLExecuteResults(childComplexity, args["taskId"].(string)), true

	case "Mutation.asyncSqlExplainExecutionPlan":
		if e.complexity.Mutation.AsyncSQLExplainExecutionPlan == nil {
			break
		}

		args, err := ec.field_Mutation_asyncSqlExplainExecutionPlan_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AsyncSQLExplainExecutionPlan(childComplexity, args["connectionId"].(string), args["contextId"].(string), args["query"].(string), args["configuration"].(interface{})), true

	case "Mutation.asyncSqlExplainExecutionPlanResult":
		if e.complexity.Mutation.AsyncSQLExplainExecutionPlanResult == nil {
			break
		}

		args, err := ec.field_Mutation_asyncSqlExplainExecutionPlanResult_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AsyncSQLExplainExecutionPlanResult(childComplexity, args["taskId"].(string)), true

	case "Mutation.asyncTaskCancel":
		if e.complexity.Mutation.AsyncTaskCancel == nil {
			break
		}

		args, err := ec.field_Mutation_asyncTaskCancel_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AsyncTaskCancel(childComplexity, args["id"].(string)), true

	case "Mutation.asyncTaskInfo":
		if e.complexity.Mutation.AsyncTaskInfo == nil {
			break
		}

		args, err := ec.field_Mutation_asyncTaskInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AsyncTaskInfo(childComplexity, args["id"].(string), args["removeOnFinish"].(bool)), true

	case "Mutation.asyncTaskStatus":
		if e.complexity.Mutation.AsyncTaskStatus == nil {
			break
		}

		args, err := ec.field_Mutation_asyncTaskStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AsyncTaskStatus(childComplexity, args["id"].(string)), true

	case "Mutation.changeSessionLanguage":
		if e.complexity.Mutation.ChangeSessionLanguage == nil {
			break
		}

		args, err := ec.field_Mutation_changeSessionLanguage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangeSessionLanguage(childComplexity, args["locale"].(*string)), true

	case "Mutation.closeConnection":
		if e.complexity.Mutation.CloseConnection == nil {
			break
		}

		args, err := ec.field_Mutation_closeConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CloseConnection(childComplexity, args["id"].(string)), true

	case "Mutation.closeSession":
		if e.complexity.Mutation.CloseSession == nil {
			break
		}

		return e.complexity.Mutation.CloseSession(childComplexity), true

	case "Mutation.copyConnectionFromNode":
		if e.complexity.Mutation.CopyConnectionFromNode == nil {
			break
		}

		args, err := ec.field_Mutation_copyConnectionFromNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CopyConnectionFromNode(childComplexity, args["nodePath"].(string), args["config"].(*model.ConnectionConfig)), true

	case "Mutation.createConnection":
		if e.complexity.Mutation.CreateConnection == nil {
			break
		}

		args, err := ec.field_Mutation_createConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateConnection(childComplexity, args["config"].(model.ConnectionConfig)), true

	case "Mutation.createConnectionFolder":
		if e.complexity.Mutation.CreateConnectionFolder == nil {
			break
		}

		args, err := ec.field_Mutation_createConnectionFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateConnectionFolder(childComplexity, args["parentFolderPath"].(*string), args["folderName"].(string)), true

	case "Mutation.createConnectionFromTemplate":
		if e.complexity.Mutation.CreateConnectionFromTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_createConnectionFromTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateConnectionFromTemplate(childComplexity, args["templateId"].(string), args["connectionName"].(*string)), true

	case "Mutation.deleteConnection":
		if e.complexity.Mutation.DeleteConnection == nil {
			break
		}

		args, err := ec.field_Mutation_deleteConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConnection(childComplexity, args["id"].(string)), true

	case "Mutation.deleteConnectionFolder":
		if e.complexity.Mutation.DeleteConnectionFolder == nil {
			break
		}

		args, err := ec.field_Mutation_deleteConnectionFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteConnectionFolder(childComplexity, args["folderPath"].(string)), true

	case "Mutation.initConnection":
		if e.complexity.Mutation.InitConnection == nil {
			break
		}

		args, err := ec.field_Mutation_initConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InitConnection(childComplexity, args["id"].(string), args["credentials"].(interface{}), args["networkCredentials"].([]*model.NetworkHandlerConfigInput), args["saveCredentials"].(*bool)), true

	case "Mutation.navDeleteNodes":
		if e.complexity.Mutation.NavDeleteNodes == nil {
			break
		}

		args, err := ec.field_Mutation_navDeleteNodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NavDeleteNodes(childComplexity, args["nodePaths"].([]string)), true

	case "Mutation.navMoveNodesToFolder":
		if e.complexity.Mutation.NavMoveNodesToFolder == nil {
			break
		}

		args, err := ec.field_Mutation_navMoveNodesToFolder_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NavMoveNodesToFolder(childComplexity, args["nodePaths"].([]string), args["folderPath"].(string)), true

	case "Mutation.navRenameNode":
		if e.complexity.Mutation.NavRenameNode == nil {
			break
		}

		args, err := ec.field_Mutation_navRenameNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NavRenameNode(childComplexity, args["nodePath"].(string), args["newName"].(string)), true

	case "Mutation.openConnection":
		if e.complexity.Mutation.OpenConnection == nil {
			break
		}

		args, err := ec.field_Mutation_openConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OpenConnection(childComplexity, args["config"].(model.ConnectionConfig)), true

	case "Mutation.openSession":
		if e.complexity.Mutation.OpenSession == nil {
			break
		}

		args, err := ec.field_Mutation_openSession_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OpenSession(childComplexity, args["defaultLocale"].(*string)), true

	case "Mutation.readLobValue":
		if e.complexity.Mutation.ReadLobValue == nil {
			break
		}

		args, err := ec.field_Mutation_readLobValue_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ReadLobValue(childComplexity, args["connectionId"].(string), args["contextId"].(string), args["resultsId"].(string), args["lobColumnIndex"].(int), args["row"].([]*model.SQLResultRow)), true

	case "Mutation.refreshSessionConnections":
		if e.complexity.Mutation.RefreshSessionConnections == nil {
			break
		}

		return e.complexity.Mutation.RefreshSessionConnections(childComplexity), true

	case "Mutation.rmCreateResource":
		if e.complexity.Mutation.RmCreateResource == nil {
			break
		}

		args, err := ec.field_Mutation_rmCreateResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RmCreateResource(childComplexity, args["projectId"].(string), args["resourcePath"].(string), args["isFolder"].(bool)), true

	case "Mutation.rmDeleteResource":
		if e.complexity.Mutation.RmDeleteResource == nil {
			break
		}

		args, err := ec.field_Mutation_rmDeleteResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RmDeleteResource(childComplexity, args["projectId"].(string), args["resourcePath"].(string), args["recursive"].(bool)), true

	case "Mutation.rmMoveResource":
		if e.complexity.Mutation.RmMoveResource == nil {
			break
		}

		args, err := ec.field_Mutation_rmMoveResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RmMoveResource(childComplexity, args["projectId"].(string), args["oldResourcePath"].(string), args["newResourcePath"].(*string)), true

	case "Mutation.rmWriteResourceStringContent":
		if e.complexity.Mutation.RmWriteResourceStringContent == nil {
			break
		}

		args, err := ec.field_Mutation_rmWriteResourceStringContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RmWriteResourceStringContent(childComplexity, args["projectId"].(string), args["resourcePath"].(string), args["data"].(string)), true

	case "Mutation.sqlContextCreate":
		if e.complexity.Mutation.SQLContextCreate == nil {
			break
		}

		args, err := ec.field_Mutation_sqlContextCreate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SQLContextCreate(childComplexity, args["connectionId"].(string), args["defaultCatalog"].(*string), args["defaultSchema"].(*string)), true

	case "Mutation.sqlContextDestroy":
		if e.complexity.Mutation.SQLContextDestroy == nil {
			break
		}

		args, err := ec.field_Mutation_sqlContextDestroy_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SQLContextDestroy(childComplexity, args["connectionId"].(string), args["contextId"].(string)), true

	case "Mutation.sqlContextSetDefaults":
		if e.complexity.Mutation.SQLContextSetDefaults == nil {
			break
		}

		args, err := ec.field_Mutation_sqlContextSetDefaults_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SQLContextSetDefaults(childComplexity, args["connectionId"].(string), args["contextId"].(string), args["defaultCatalog"].(*string), args["defaultSchema"].(*string)), true

	case "Mutation.sqlResultClose":
		if e.complexity.Mutation.SQLResultClose == nil {
			break
		}

		args, err := ec.field_Mutation_sqlResultClose_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SQLResultClose(childComplexity, args["connectionId"].(string), args["contextId"].(string), args["resultId"].(string)), true

	case "Mutation.setConnectionNavigatorSettings":
		if e.complexity.Mutation.SetConnectionNavigatorSettings == nil {
			break
		}

		args, err := ec.field_Mutation_setConnectionNavigatorSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetConnectionNavigatorSettings(childComplexity, args["id"].(string), args["settings"].(model.NavigatorSettingsInput)), true

	case "Mutation.setUserConfigurationParameter":
		if e.complexity.Mutation.SetUserConfigurationParameter == nil {
			break
		}

		args, err := ec.field_Mutation_setUserConfigurationParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetUserConfigurationParameter(childComplexity, args["name"].(string), args["value"].(interface{})), true

	case "Mutation.testConnection":
		if e.complexity.Mutation.TestConnection == nil {
			break
		}

		args, err := ec.field_Mutation_testConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TestConnection(childComplexity, args["config"].(model.ConnectionConfig)), true

	case "Mutation.testNetworkHandler":
		if e.complexity.Mutation.TestNetworkHandler == nil {
			break
		}

		args, err := ec.field_Mutation_testNetworkHandler_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.TestNetworkHandler(childComplexity, args["config"].(model.NetworkHandlerConfigInput)), true

	case "Mutation.touchSession":
		if e.complexity.Mutation.TouchSession == nil {
			break
		}

		return e.complexity.Mutation.TouchSession(childComplexity), true

	case "Mutation.updateConnection":
		if e.complexity.Mutation.UpdateConnection == nil {
			break
		}

		args, err := ec.field_Mutation_updateConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConnection(childComplexity, args["config"].(model.ConnectionConfig)), true

	case "Mutation.updateResultsDataBatch":
		if e.complexity.Mutation.UpdateResultsDataBatch == nil {
			break
		}

		args, err := ec.field_Mutation_updateResultsDataBatch_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateResultsDataBatch(childComplexity, args["connectionId"].(string), args["contextId"].(string), args["resultsId"].(string), args["updatedRows"].([]*model.SQLResultRow), args["deletedRows"].([]*model.SQLResultRow), args["addedRows"].([]*model.SQLResultRow)), true

	case "Mutation.updateResultsDataBatchScript":
		if e.complexity.Mutation.UpdateResultsDataBatchScript == nil {
			break
		}

		args, err := ec.field_Mutation_updateResultsDataBatchScript_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateResultsDataBatchScript(childComplexity, args["connectionId"].(string), args["contextId"].(string), args["resultsId"].(string), args["updatedRows"].([]*model.SQLResultRow), args["deletedRows"].([]*model.SQLResultRow), args["addedRows"].([]*model.SQLResultRow)), true

	case "NavigatorNodeInfo.description":
		if e.complexity.NavigatorNodeInfo.Description == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.Description(childComplexity), true

	case "NavigatorNodeInfo.features":
		if e.complexity.NavigatorNodeInfo.Features == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.Features(childComplexity), true

	case "NavigatorNodeInfo.folder":
		if e.complexity.NavigatorNodeInfo.Folder == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.Folder(childComplexity), true

	case "NavigatorNodeInfo.fullName":
		if e.complexity.NavigatorNodeInfo.FullName == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.FullName(childComplexity), true

	case "NavigatorNodeInfo.hasChildren":
		if e.complexity.NavigatorNodeInfo.HasChildren == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.HasChildren(childComplexity), true

	case "NavigatorNodeInfo.id":
		if e.complexity.NavigatorNodeInfo.ID == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.ID(childComplexity), true

	case "NavigatorNodeInfo.icon":
		if e.complexity.NavigatorNodeInfo.Icon == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.Icon(childComplexity), true

	case "NavigatorNodeInfo.inline":
		if e.complexity.NavigatorNodeInfo.Inline == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.Inline(childComplexity), true

	case "NavigatorNodeInfo.name":
		if e.complexity.NavigatorNodeInfo.Name == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.Name(childComplexity), true

	case "NavigatorNodeInfo.navigable":
		if e.complexity.NavigatorNodeInfo.Navigable == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.Navigable(childComplexity), true

	case "NavigatorNodeInfo.nodeDetails":
		if e.complexity.NavigatorNodeInfo.NodeDetails == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.NodeDetails(childComplexity), true

	case "NavigatorNodeInfo.nodeType":
		if e.complexity.NavigatorNodeInfo.NodeType == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.NodeType(childComplexity), true

	case "NavigatorNodeInfo.object":
		if e.complexity.NavigatorNodeInfo.Object == nil {
			break
		}

		return e.complexity.NavigatorNodeInfo.Object(childComplexity), true

	case "NavigatorSettings.hideFolders":
		if e.complexity.NavigatorSettings.HideFolders == nil {
			break
		}

		return e.complexity.NavigatorSettings.HideFolders(childComplexity), true

	case "NavigatorSettings.hideSchemas":
		if e.complexity.NavigatorSettings.HideSchemas == nil {
			break
		}

		return e.complexity.NavigatorSettings.HideSchemas(childComplexity), true

	case "NavigatorSettings.hideVirtualModel":
		if e.complexity.NavigatorSettings.HideVirtualModel == nil {
			break
		}

		return e.complexity.NavigatorSettings.HideVirtualModel(childComplexity), true

	case "NavigatorSettings.mergeEntities":
		if e.complexity.NavigatorSettings.MergeEntities == nil {
			break
		}

		return e.complexity.NavigatorSettings.MergeEntities(childComplexity), true

	case "NavigatorSettings.showOnlyEntities":
		if e.complexity.NavigatorSettings.ShowOnlyEntities == nil {
			break
		}

		return e.complexity.NavigatorSettings.ShowOnlyEntities(childComplexity), true

	case "NavigatorSettings.showSystemObjects":
		if e.complexity.NavigatorSettings.ShowSystemObjects == nil {
			break
		}

		return e.complexity.NavigatorSettings.ShowSystemObjects(childComplexity), true

	case "NavigatorSettings.showUtilityObjects":
		if e.complexity.NavigatorSettings.ShowUtilityObjects == nil {
			break
		}

		return e.complexity.NavigatorSettings.ShowUtilityObjects(childComplexity), true

	case "NetworkEndpointInfo.clientVersion":
		if e.complexity.NetworkEndpointInfo.ClientVersion == nil {
			break
		}

		return e.complexity.NetworkEndpointInfo.ClientVersion(childComplexity), true

	case "NetworkEndpointInfo.message":
		if e.complexity.NetworkEndpointInfo.Message == nil {
			break
		}

		return e.complexity.NetworkEndpointInfo.Message(childComplexity), true

	case "NetworkEndpointInfo.serverVersion":
		if e.complexity.NetworkEndpointInfo.ServerVersion == nil {
			break
		}

		return e.complexity.NetworkEndpointInfo.ServerVersion(childComplexity), true

	case "NetworkHandlerConfig.authType":
		if e.complexity.NetworkHandlerConfig.AuthType == nil {
			break
		}

		return e.complexity.NetworkHandlerConfig.AuthType(childComplexity), true

	case "NetworkHandlerConfig.enabled":
		if e.complexity.NetworkHandlerConfig.Enabled == nil {
			break
		}

		return e.complexity.NetworkHandlerConfig.Enabled(childComplexity), true

	case "NetworkHandlerConfig.id":
		if e.complexity.NetworkHandlerConfig.ID == nil {
			break
		}

		return e.complexity.NetworkHandlerConfig.ID(childComplexity), true

	case "NetworkHandlerConfig.key":
		if e.complexity.NetworkHandlerConfig.Key == nil {
			break
		}

		return e.complexity.NetworkHandlerConfig.Key(childComplexity), true

	case "NetworkHandlerConfig.password":
		if e.complexity.NetworkHandlerConfig.Password == nil {
			break
		}

		return e.complexity.NetworkHandlerConfig.Password(childComplexity), true

	case "NetworkHandlerConfig.properties":
		if e.complexity.NetworkHandlerConfig.Properties == nil {
			break
		}

		return e.complexity.NetworkHandlerConfig.Properties(childComplexity), true

	case "NetworkHandlerConfig.savePassword":
		if e.complexity.NetworkHandlerConfig.SavePassword == nil {
			break
		}

		return e.complexity.NetworkHandlerConfig.SavePassword(childComplexity), true

	case "NetworkHandlerConfig.userName":
		if e.complexity.NetworkHandlerConfig.UserName == nil {
			break
		}

		return e.complexity.NetworkHandlerConfig.UserName(childComplexity), true

	case "NetworkHandlerDescriptor.codeName":
		if e.complexity.NetworkHandlerDescriptor.CodeName == nil {
			break
		}

		return e.complexity.NetworkHandlerDescriptor.CodeName(childComplexity), true

	case "NetworkHandlerDescriptor.description":
		if e.complexity.NetworkHandlerDescriptor.Description == nil {
			break
		}

		return e.complexity.NetworkHandlerDescriptor.Description(childComplexity), true

	case "NetworkHandlerDescriptor.id":
		if e.complexity.NetworkHandlerDescriptor.ID == nil {
			break
		}

		return e.complexity.NetworkHandlerDescriptor.ID(childComplexity), true

	case "NetworkHandlerDescriptor.label":
		if e.complexity.NetworkHandlerDescriptor.Label == nil {
			break
		}

		return e.complexity.NetworkHandlerDescriptor.Label(childComplexity), true

	case "NetworkHandlerDescriptor.properties":
		if e.complexity.NetworkHandlerDescriptor.Properties == nil {
			break
		}

		return e.complexity.NetworkHandlerDescriptor.Properties(childComplexity), true

	case "NetworkHandlerDescriptor.secured":
		if e.complexity.NetworkHandlerDescriptor.Secured == nil {
			break
		}

		return e.complexity.NetworkHandlerDescriptor.Secured(childComplexity), true

	case "NetworkHandlerDescriptor.type":
		if e.complexity.NetworkHandlerDescriptor.Type == nil {
			break
		}

		return e.complexity.NetworkHandlerDescriptor.Type(childComplexity), true

	case "ObjectDescriptor.description":
		if e.complexity.ObjectDescriptor.Description == nil {
			break
		}

		return e.complexity.ObjectDescriptor.Description(childComplexity), true

	case "ObjectDescriptor.displayName":
		if e.complexity.ObjectDescriptor.DisplayName == nil {
			break
		}

		return e.complexity.ObjectDescriptor.DisplayName(childComplexity), true

	case "ObjectDescriptor.fullName":
		if e.complexity.ObjectDescriptor.FullName == nil {
			break
		}

		return e.complexity.ObjectDescriptor.FullName(childComplexity), true

	case "ObjectDescriptor.id":
		if e.complexity.ObjectDescriptor.ID == nil {
			break
		}

		return e.complexity.ObjectDescriptor.ID(childComplexity), true

	case "ObjectDescriptor.uniqueName":
		if e.complexity.ObjectDescriptor.UniqueName == nil {
			break
		}

		return e.complexity.ObjectDescriptor.UniqueName(childComplexity), true

	case "ObjectDescriptor.value":
		if e.complexity.ObjectDescriptor.Value == nil {
			break
		}

		return e.complexity.ObjectDescriptor.Value(childComplexity), true

	case "ObjectDetails.description":
		if e.complexity.ObjectDetails.Description == nil {
			break
		}

		return e.complexity.ObjectDetails.Description(childComplexity), true

	case "ObjectDetails.displayName":
		if e.complexity.ObjectDetails.DisplayName == nil {
			break
		}

		return e.complexity.ObjectDetails.DisplayName(childComplexity), true

	case "ObjectDetails.id":
		if e.complexity.ObjectDetails.ID == nil {
			break
		}

		return e.complexity.ObjectDetails.ID(childComplexity), true

	case "ObjectDetails.value":
		if e.complexity.ObjectDetails.Value == nil {
			break
		}

		return e.complexity.ObjectDetails.Value(childComplexity), true

	case "ObjectOrigin.configuration":
		if e.complexity.ObjectOrigin.Configuration == nil {
			break
		}

		return e.complexity.ObjectOrigin.Configuration(childComplexity), true

	case "ObjectOrigin.details":
		if e.complexity.ObjectOrigin.Details == nil {
			break
		}

		return e.complexity.ObjectOrigin.Details(childComplexity), true

	case "ObjectOrigin.displayName":
		if e.complexity.ObjectOrigin.DisplayName == nil {
			break
		}

		return e.complexity.ObjectOrigin.DisplayName(childComplexity), true

	case "ObjectOrigin.icon":
		if e.complexity.ObjectOrigin.Icon == nil {
			break
		}

		return e.complexity.ObjectOrigin.Icon(childComplexity), true

	case "ObjectOrigin.subType":
		if e.complexity.ObjectOrigin.SubType == nil {
			break
		}

		return e.complexity.ObjectOrigin.SubType(childComplexity), true

	case "ObjectOrigin.type":
		if e.complexity.ObjectOrigin.Type == nil {
			break
		}

		return e.complexity.ObjectOrigin.Type(childComplexity), true

	case "ObjectPropertyInfo.category":
		if e.complexity.ObjectPropertyInfo.Category == nil {
			break
		}

		return e.complexity.ObjectPropertyInfo.Category(childComplexity), true

	case "ObjectPropertyInfo.dataType":
		if e.complexity.ObjectPropertyInfo.DataType == nil {
			break
		}

		return e.complexity.ObjectPropertyInfo.DataType(childComplexity), true

	case "ObjectPropertyInfo.defaultValue":
		if e.complexity.ObjectPropertyInfo.DefaultValue == nil {
			break
		}

		return e.complexity.ObjectPropertyInfo.DefaultValue(childComplexity), true

	case "ObjectPropertyInfo.description":
		if e.complexity.ObjectPropertyInfo.Description == nil {
			break
		}

		return e.complexity.ObjectPropertyInfo.Description(childComplexity), true

	case "ObjectPropertyInfo.displayName":
		if e.complexity.ObjectPropertyInfo.DisplayName == nil {
			break
		}

		return e.complexity.ObjectPropertyInfo.DisplayName(childComplexity), true

	case "ObjectPropertyInfo.features":
		if e.complexity.ObjectPropertyInfo.Features == nil {
			break
		}

		return e.complexity.ObjectPropertyInfo.Features(childComplexity), true

	case "ObjectPropertyInfo.id":
		if e.complexity.ObjectPropertyInfo.ID == nil {
			break
		}

		return e.complexity.ObjectPropertyInfo.ID(childComplexity), true

	case "ObjectPropertyInfo.length":
		if e.complexity.ObjectPropertyInfo.Length == nil {
			break
		}

		return e.complexity.ObjectPropertyInfo.Length(childComplexity), true

	case "ObjectPropertyInfo.order":
		if e.complexity.ObjectPropertyInfo.Order == nil {
			break
		}

		return e.complexity.ObjectPropertyInfo.Order(childComplexity), true

	case "ObjectPropertyInfo.validValues":
		if e.complexity.ObjectPropertyInfo.ValidValues == nil {
			break
		}

		return e.complexity.ObjectPropertyInfo.ValidValues(childComplexity), true

	case "ObjectPropertyInfo.value":
		if e.complexity.ObjectPropertyInfo.Value == nil {
			break
		}

		return e.complexity.ObjectPropertyInfo.Value(childComplexity), true

	case "ProductInfo.buildTime":
		if e.complexity.ProductInfo.BuildTime == nil {
			break
		}

		return e.complexity.ProductInfo.BuildTime(childComplexity), true

	case "ProductInfo.description":
		if e.complexity.ProductInfo.Description == nil {
			break
		}

		return e.complexity.ProductInfo.Description(childComplexity), true

	case "ProductInfo.id":
		if e.complexity.ProductInfo.ID == nil {
			break
		}

		return e.complexity.ProductInfo.ID(childComplexity), true

	case "ProductInfo.latestVersionInfo":
		if e.complexity.ProductInfo.LatestVersionInfo == nil {
			break
		}

		return e.complexity.ProductInfo.LatestVersionInfo(childComplexity), true

	case "ProductInfo.licenseInfo":
		if e.complexity.ProductInfo.LicenseInfo == nil {
			break
		}

		return e.complexity.ProductInfo.LicenseInfo(childComplexity), true

	case "ProductInfo.name":
		if e.complexity.ProductInfo.Name == nil {
			break
		}

		return e.complexity.ProductInfo.Name(childComplexity), true

	case "ProductInfo.releaseTime":
		if e.complexity.ProductInfo.ReleaseTime == nil {
			break
		}

		return e.complexity.ProductInfo.ReleaseTime(childComplexity), true

	case "ProductInfo.version":
		if e.complexity.ProductInfo.Version == nil {
			break
		}

		return e.complexity.ProductInfo.Version(childComplexity), true

	case "Query.activeUser":
		if e.complexity.Query.ActiveUser == nil {
			break
		}

		return e.complexity.Query.ActiveUser(childComplexity), true

	case "Query.allConnections":
		if e.complexity.Query.AllConnections == nil {
			break
		}

		args, err := ec.field_Query_allConnections_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AllConnections(childComplexity, args["id"].(*string)), true

	case "Query.authChangeLocalPassword":
		if e.complexity.Query.AuthChangeLocalPassword == nil {
			break
		}

		args, err := ec.field_Query_authChangeLocalPassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthChangeLocalPassword(childComplexity, args["oldPassword"].(string), args["newPassword"].(string)), true

	case "Query.authLogin":
		if e.complexity.Query.AuthLogin == nil {
			break
		}

		args, err := ec.field_Query_authLogin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthLogin(childComplexity, args["provider"].(string), args["configuration"].(*string), args["credentials"].(interface{}), args["linkUser"].(*bool)), true

	case "Query.authLogout":
		if e.complexity.Query.AuthLogout == nil {
			break
		}

		args, err := ec.field_Query_authLogout_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthLogout(childComplexity, args["provider"].(*string), args["configuration"].(*string)), true

	case "Query.authModels":
		if e.complexity.Query.AuthModels == nil {
			break
		}

		return e.complexity.Query.AuthModels(childComplexity), true

	case "Query.authProviders":
		if e.complexity.Query.AuthProviders == nil {
			break
		}

		return e.complexity.Query.AuthProviders(childComplexity), true

	case "Query.authUpdateStatus":
		if e.complexity.Query.AuthUpdateStatus == nil {
			break
		}

		args, err := ec.field_Query_authUpdateStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AuthUpdateStatus(childComplexity, args["authId"].(string), args["linkUser"].(*bool)), true

	case "Query.configureServer":
		if e.complexity.Query.ConfigureServer == nil {
			break
		}

		args, err := ec.field_Query_configureServer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConfigureServer(childComplexity, args["configuration"].(model.ServerConfigInput)), true

	case "Query.connectionFolders":
		if e.complexity.Query.ConnectionFolders == nil {
			break
		}

		args, err := ec.field_Query_connectionFolders_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConnectionFolders(childComplexity, args["path"].(*string)), true

	case "Query.connectionInfo":
		if e.complexity.Query.ConnectionInfo == nil {
			break
		}

		args, err := ec.field_Query_connectionInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConnectionInfo(childComplexity, args["id"].(string)), true

	case "Query.connectionState":
		if e.complexity.Query.ConnectionState == nil {
			break
		}

		args, err := ec.field_Query_connectionState_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ConnectionState(childComplexity, args["id"].(string)), true

	case "Query.copyConnectionConfiguration":
		if e.complexity.Query.CopyConnectionConfiguration == nil {
			break
		}

		args, err := ec.field_Query_copyConnectionConfiguration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CopyConnectionConfiguration(childComplexity, args["nodePath"].(string), args["config"].(*model.ConnectionConfig)), true

	case "Query.createConnectionConfiguration":
		if e.complexity.Query.CreateConnectionConfiguration == nil {
			break
		}

		args, err := ec.field_Query_createConnectionConfiguration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CreateConnectionConfiguration(childComplexity, args["config"].(model.ConnectionConfig)), true

	case "Query.createRole":
		if e.complexity.Query.CreateRole == nil {
			break
		}

		args, err := ec.field_Query_createRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CreateRole(childComplexity, args["roleId"].(string), args["roleName"].(*string), args["description"].(*string)), true

	case "Query.createUser":
		if e.complexity.Query.CreateUser == nil {
			break
		}

		args, err := ec.field_Query_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CreateUser(childComplexity, args["userId"].(string)), true

	case "Query.dataTransferAvailableStreamProcessors":
		if e.complexity.Query.DataTransferAvailableStreamProcessors == nil {
			break
		}

		return e.complexity.Query.DataTransferAvailableStreamProcessors(childComplexity), true

	case "Query.dataTransferExportDataFromContainer":
		if e.complexity.Query.DataTransferExportDataFromContainer == nil {
			break
		}

		args, err := ec.field_Query_dataTransferExportDataFromContainer_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataTransferExportDataFromContainer(childComplexity, args["connectionId"].(string), args["containerNodePath"].(string), args["parameters"].(model.DataTransferParameters)), true

	case "Query.dataTransferExportDataFromResults":
		if e.complexity.Query.DataTransferExportDataFromResults == nil {
			break
		}

		args, err := ec.field_Query_dataTransferExportDataFromResults_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataTransferExportDataFromResults(childComplexity, args["connectionId"].(string), args["contextId"].(string), args["resultsId"].(string), args["parameters"].(model.DataTransferParameters)), true

	case "Query.dataTransferRemoveDataFile":
		if e.complexity.Query.DataTransferRemoveDataFile == nil {
			break
		}

		args, err := ec.field_Query_dataTransferRemoveDataFile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DataTransferRemoveDataFile(childComplexity, args["dataFileId"].(string)), true

	case "Query.deleteAuthProviderConfiguration":
		if e.complexity.Query.DeleteAuthProviderConfiguration == nil {
			break
		}

		args, err := ec.field_Query_deleteAuthProviderConfiguration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeleteAuthProviderConfiguration(childComplexity, args["id"].(string)), true

	case "Query.deleteConnectionConfiguration":
		if e.complexity.Query.DeleteConnectionConfiguration == nil {
			break
		}

		args, err := ec.field_Query_deleteConnectionConfiguration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeleteConnectionConfiguration(childComplexity, args["id"].(string)), true

	case "Query.deleteRole":
		if e.complexity.Query.DeleteRole == nil {
			break
		}

		args, err := ec.field_Query_deleteRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeleteRole(childComplexity, args["roleId"].(string)), true

	case "Query.deleteUser":
		if e.complexity.Query.DeleteUser == nil {
			break
		}

		args, err := ec.field_Query_deleteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeleteUser(childComplexity, args["userId"].(string)), true

	case "Query.deleteUserMetaParameter":
		if e.complexity.Query.DeleteUserMetaParameter == nil {
			break
		}

		args, err := ec.field_Query_deleteUserMetaParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DeleteUserMetaParameter(childComplexity, args["id"].(string)), true

	case "Query.driverList":
		if e.complexity.Query.DriverList == nil {
			break
		}

		args, err := ec.field_Query_driverList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.DriverList(childComplexity, args["id"].(*string)), true

	case "Query.enableUser":
		if e.complexity.Query.EnableUser == nil {
			break
		}

		args, err := ec.field_Query_enableUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EnableUser(childComplexity, args["userId"].(string), args["enabled"].(bool)), true

	case "Query.getConnectionSubjectAccess":
		if e.complexity.Query.GetConnectionSubjectAccess == nil {
			break
		}

		args, err := ec.field_Query_getConnectionSubjectAccess_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetConnectionSubjectAccess(childComplexity, args["connectionId"].(*string)), true

	case "Query.getSubjectConnectionAccess":
		if e.complexity.Query.GetSubjectConnectionAccess == nil {
			break
		}

		args, err := ec.field_Query_getSubjectConnectionAccess_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSubjectConnectionAccess(childComplexity, args["subjectId"].(*string)), true

	case "Query.grantUserRole":
		if e.complexity.Query.GrantUserRole == nil {
			break
		}

		args, err := ec.field_Query_grantUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GrantUserRole(childComplexity, args["userId"].(string), args["roleId"].(string)), true

	case "Query.listAuthProviderConfigurationParameters":
		if e.complexity.Query.ListAuthProviderConfigurationParameters == nil {
			break
		}

		args, err := ec.field_Query_listAuthProviderConfigurationParameters_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListAuthProviderConfigurationParameters(childComplexity, args["providerId"].(string)), true

	case "Query.listAuthProviderConfigurations":
		if e.complexity.Query.ListAuthProviderConfigurations == nil {
			break
		}

		args, err := ec.field_Query_listAuthProviderConfigurations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListAuthProviderConfigurations(childComplexity, args["providerId"].(*string)), true

	case "Query.listFeatureSets":
		if e.complexity.Query.ListFeatureSets == nil {
			break
		}

		return e.complexity.Query.ListFeatureSets(childComplexity), true

	case "Query.listPermissions":
		if e.complexity.Query.ListPermissions == nil {
			break
		}

		return e.complexity.Query.ListPermissions(childComplexity), true

	case "Query.listRoles":
		if e.complexity.Query.ListRoles == nil {
			break
		}

		args, err := ec.field_Query_listRoles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListRoles(childComplexity, args["roleId"].(*string)), true

	case "Query.listUserProfileProperties":
		if e.complexity.Query.ListUserProfileProperties == nil {
			break
		}

		return e.complexity.Query.ListUserProfileProperties(childComplexity), true

	case "Query.listUsers":
		if e.complexity.Query.ListUsers == nil {
			break
		}

		args, err := ec.field_Query_listUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ListUsers(childComplexity, args["userId"].(*string)), true

	case "Query.metadataGetNodeDDL":
		if e.complexity.Query.MetadataGetNodeDdl == nil {
			break
		}

		args, err := ec.field_Query_metadataGetNodeDDL_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MetadataGetNodeDdl(childComplexity, args["nodeId"].(string), args["options"].(interface{})), true

	case "Query.navGetStructContainers":
		if e.complexity.Query.NavGetStructContainers == nil {
			break
		}

		args, err := ec.field_Query_navGetStructContainers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NavGetStructContainers(childComplexity, args["connectionId"].(string), args["contextId"].(*string), args["catalog"].(*string)), true

	case "Query.navNodeChildren":
		if e.complexity.Query.NavNodeChildren == nil {
			break
		}

		args, err := ec.field_Query_navNodeChildren_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NavNodeChildren(childComplexity, args["parentPath"].(string), args["offset"].(*int), args["limit"].(*int), args["onlyFolders"].(*bool)), true

	case "Query.navNodeInfo":
		if e.complexity.Query.NavNodeInfo == nil {
			break
		}

		args, err := ec.field_Query_navNodeInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NavNodeInfo(childComplexity, args["nodePath"].(string)), true

	case "Query.navNodeParents":
		if e.complexity.Query.NavNodeParents == nil {
			break
		}

		args, err := ec.field_Query_navNodeParents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NavNodeParents(childComplexity, args["nodePath"].(string)), true

	case "Query.navRefreshNode":
		if e.complexity.Query.NavRefreshNode == nil {
			break
		}

		args, err := ec.field_Query_navRefreshNode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NavRefreshNode(childComplexity, args["nodePath"].(string)), true

	case "Query.networkHandlers":
		if e.complexity.Query.NetworkHandlers == nil {
			break
		}

		return e.complexity.Query.NetworkHandlers(childComplexity), true

	case "Query.readSessionLog":
		if e.complexity.Query.ReadSessionLog == nil {
			break
		}

		args, err := ec.field_Query_readSessionLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ReadSessionLog(childComplexity, args["maxEntries"].(*int), args["clearEntries"].(*bool)), true

	case "Query.revokeUserRole":
		if e.complexity.Query.RevokeUserRole == nil {
			break
		}

		args, err := ec.field_Query_revokeUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RevokeUserRole(childComplexity, args["userId"].(string), args["roleId"].(string)), true

	case "Query.rmListProjects":
		if e.complexity.Query.RmListProjects == nil {
			break
		}

		return e.complexity.Query.RmListProjects(childComplexity), true

	case "Query.rmListResources":
		if e.complexity.Query.RmListResources == nil {
			break
		}

		args, err := ec.field_Query_rmListResources_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RmListResources(childComplexity, args["projectId"].(string), args["folder"].(*string), args["nameMask"].(*string), args["readProperties"].(*bool), args["readHistory"].(*bool)), true

	case "Query.rmReadResourceAsString":
		if e.complexity.Query.RmReadResourceAsString == nil {
			break
		}

		args, err := ec.field_Query_rmReadResourceAsString_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.RmReadResourceAsString(childComplexity, args["projectId"].(string), args["resourcePath"].(string)), true

	case "Query.sqlCompletionProposals":
		if e.complexity.Query.SQLCompletionProposals == nil {
			break
		}

		args, err := ec.field_Query_sqlCompletionProposals_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SQLCompletionProposals(childComplexity, args["connectionId"].(string), args["contextId"].(string), args["query"].(string), args["position"].(int), args["maxResults"].(*int), args["simpleMode"].(*bool)), true

	case "Query.sqlDialectInfo":
		if e.complexity.Query.SQLDialectInfo == nil {
			break
		}

		args, err := ec.field_Query_sqlDialectInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SQLDialectInfo(childComplexity, args["connectionId"].(string)), true

	case "Query.sqlEntityQueryGenerators":
		if e.complexity.Query.SQLEntityQueryGenerators == nil {
			break
		}

		args, err := ec.field_Query_sqlEntityQueryGenerators_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SQLEntityQueryGenerators(childComplexity, args["nodePathList"].([]string)), true

	case "Query.sqlFormatQuery":
		if e.complexity.Query.SQLFormatQuery == nil {
			break
		}

		args, err := ec.field_Query_sqlFormatQuery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SQLFormatQuery(childComplexity, args["connectionId"].(string), args["contextId"].(string), args["query"].(string)), true

	case "Query.sqlGenerateEntityQuery":
		if e.complexity.Query.SQLGenerateEntityQuery == nil {
			break
		}

		args, err := ec.field_Query_sqlGenerateEntityQuery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SQLGenerateEntityQuery(childComplexity, args["generatorId"].(string), args["options"].(interface{}), args["nodePathList"].([]string)), true

	case "Query.sqlListContexts":
		if e.complexity.Query.SQLListContexts == nil {
			break
		}

		args, err := ec.field_Query_sqlListContexts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SQLListContexts(childComplexity, args["connectionId"].(*string), args["contextId"].(*string)), true

	case "Query.sqlParseQuery":
		if e.complexity.Query.SQLParseQuery == nil {
			break
		}

		args, err := ec.field_Query_sqlParseQuery_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SQLParseQuery(childComplexity, args["connectionId"].(string), args["script"].(string), args["position"].(int)), true

	case "Query.sqlParseScript":
		if e.complexity.Query.SQLParseScript == nil {
			break
		}

		args, err := ec.field_Query_sqlParseScript_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SQLParseScript(childComplexity, args["connectionId"].(string), args["script"].(string)), true

	case "Query.sqlSupportedOperations":
		if e.complexity.Query.SQLSupportedOperations == nil {
			break
		}

		args, err := ec.field_Query_sqlSupportedOperations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SQLSupportedOperations(childComplexity, args["connectionId"].(string), args["contextId"].(string), args["resultsId"].(string), args["attributeIndex"].(int)), true

	case "Query.saveAuthProviderConfiguration":
		if e.complexity.Query.SaveAuthProviderConfiguration == nil {
			break
		}

		args, err := ec.field_Query_saveAuthProviderConfiguration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SaveAuthProviderConfiguration(childComplexity, args["providerId"].(string), args["id"].(string), args["displayName"].(*string), args["disabled"].(*bool), args["iconURL"].(*string), args["description"].(*string), args["parameters"].(interface{})), true

	case "Query.saveUserMetaParameter":
		if e.complexity.Query.SaveUserMetaParameter == nil {
			break
		}

		args, err := ec.field_Query_saveUserMetaParameter_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SaveUserMetaParameter(childComplexity, args["id"].(string), args["displayName"].(string), args["description"].(*string), args["required"].(bool)), true

	case "Query.searchConnections":
		if e.complexity.Query.SearchConnections == nil {
			break
		}

		args, err := ec.field_Query_searchConnections_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SearchConnections(childComplexity, args["hostNames"].([]string)), true

	case "Query.serverConfig":
		if e.complexity.Query.ServerConfig == nil {
			break
		}

		return e.complexity.Query.ServerConfig(childComplexity), true

	case "Query.sessionPermissions":
		if e.complexity.Query.SessionPermissions == nil {
			break
		}

		return e.complexity.Query.SessionPermissions(childComplexity), true

	case "Query.sessionState":
		if e.complexity.Query.SessionState == nil {
			break
		}

		return e.complexity.Query.SessionState(childComplexity), true

	case "Query.setConnectionSubjectAccess":
		if e.complexity.Query.SetConnectionSubjectAccess == nil {
			break
		}

		args, err := ec.field_Query_setConnectionSubjectAccess_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SetConnectionSubjectAccess(childComplexity, args["connectionId"].(string), args["subjects"].([]string)), true

	case "Query.setDefaultNavigatorSettings":
		if e.complexity.Query.SetDefaultNavigatorSettings == nil {
			break
		}

		args, err := ec.field_Query_setDefaultNavigatorSettings_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SetDefaultNavigatorSettings(childComplexity, args["settings"].(model.NavigatorSettingsInput)), true

	case "Query.setSubjectConnectionAccess":
		if e.complexity.Query.SetSubjectConnectionAccess == nil {
			break
		}

		args, err := ec.field_Query_setSubjectConnectionAccess_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SetSubjectConnectionAccess(childComplexity, args["subjectId"].(string), args["connections"].([]string)), true

	case "Query.setSubjectPermissions":
		if e.complexity.Query.SetSubjectPermissions == nil {
			break
		}

		args, err := ec.field_Query_setSubjectPermissions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SetSubjectPermissions(childComplexity, args["roleId"].(string), args["permissions"].([]string)), true

	case "Query.setUserCredentials":
		if e.complexity.Query.SetUserCredentials == nil {
			break
		}

		args, err := ec.field_Query_setUserCredentials_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SetUserCredentials(childComplexity, args["userId"].(string), args["providerId"].(string), args["credentials"].(interface{})), true

	case "Query.setUserMetaParameterValues":
		if e.complexity.Query.SetUserMetaParameterValues == nil {
			break
		}

		args, err := ec.field_Query_setUserMetaParameterValues_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SetUserMetaParameterValues(childComplexity, args["userId"].(string), args["parameters"].(interface{})), true

	case "Query.templateConnections":
		if e.complexity.Query.TemplateConnections == nil {
			break
		}

		return e.complexity.Query.TemplateConnections(childComplexity), true

	case "Query.updateConnectionConfiguration":
		if e.complexity.Query.UpdateConnectionConfiguration == nil {
			break
		}

		args, err := ec.field_Query_updateConnectionConfiguration_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UpdateConnectionConfiguration(childComplexity, args["id"].(string), args["config"].(model.ConnectionConfig)), true

	case "Query.updateRole":
		if e.complexity.Query.UpdateRole == nil {
			break
		}

		args, err := ec.field_Query_updateRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UpdateRole(childComplexity, args["roleId"].(string), args["roleName"].(*string), args["description"].(*string)), true

	case "Query.userConnections":
		if e.complexity.Query.UserConnections == nil {
			break
		}

		args, err := ec.field_Query_userConnections_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserConnections(childComplexity, args["id"].(*string)), true

	case "RMProject.createTime":
		if e.complexity.RMProject.CreateTime == nil {
			break
		}

		return e.complexity.RMProject.CreateTime(childComplexity), true

	case "RMProject.creator":
		if e.complexity.RMProject.Creator == nil {
			break
		}

		return e.complexity.RMProject.Creator(childComplexity), true

	case "RMProject.description":
		if e.complexity.RMProject.Description == nil {
			break
		}

		return e.complexity.RMProject.Description(childComplexity), true

	case "RMProject.id":
		if e.complexity.RMProject.ID == nil {
			break
		}

		return e.complexity.RMProject.ID(childComplexity), true

	case "RMProject.name":
		if e.complexity.RMProject.Name == nil {
			break
		}

		return e.complexity.RMProject.Name(childComplexity), true

	case "RMProject.shared":
		if e.complexity.RMProject.Shared == nil {
			break
		}

		return e.complexity.RMProject.Shared(childComplexity), true

	case "RMResource.folder":
		if e.complexity.RMResource.Folder == nil {
			break
		}

		return e.complexity.RMResource.Folder(childComplexity), true

	case "RMResource.length":
		if e.complexity.RMResource.Length == nil {
			break
		}

		return e.complexity.RMResource.Length(childComplexity), true

	case "RMResource.name":
		if e.complexity.RMResource.Name == nil {
			break
		}

		return e.complexity.RMResource.Name(childComplexity), true

	case "SQLCompletionProposal.cursorPosition":
		if e.complexity.SQLCompletionProposal.CursorPosition == nil {
			break
		}

		return e.complexity.SQLCompletionProposal.CursorPosition(childComplexity), true

	case "SQLCompletionProposal.displayString":
		if e.complexity.SQLCompletionProposal.DisplayString == nil {
			break
		}

		return e.complexity.SQLCompletionProposal.DisplayString(childComplexity), true

	case "SQLCompletionProposal.icon":
		if e.complexity.SQLCompletionProposal.Icon == nil {
			break
		}

		return e.complexity.SQLCompletionProposal.Icon(childComplexity), true

	case "SQLCompletionProposal.nodePath":
		if e.complexity.SQLCompletionProposal.NodePath == nil {
			break
		}

		return e.complexity.SQLCompletionProposal.NodePath(childComplexity), true

	case "SQLCompletionProposal.replacementLength":
		if e.complexity.SQLCompletionProposal.ReplacementLength == nil {
			break
		}

		return e.complexity.SQLCompletionProposal.ReplacementLength(childComplexity), true

	case "SQLCompletionProposal.replacementOffset":
		if e.complexity.SQLCompletionProposal.ReplacementOffset == nil {
			break
		}

		return e.complexity.SQLCompletionProposal.ReplacementOffset(childComplexity), true

	case "SQLCompletionProposal.replacementString":
		if e.complexity.SQLCompletionProposal.ReplacementString == nil {
			break
		}

		return e.complexity.SQLCompletionProposal.ReplacementString(childComplexity), true

	case "SQLCompletionProposal.score":
		if e.complexity.SQLCompletionProposal.Score == nil {
			break
		}

		return e.complexity.SQLCompletionProposal.Score(childComplexity), true

	case "SQLCompletionProposal.type":
		if e.complexity.SQLCompletionProposal.Type == nil {
			break
		}

		return e.complexity.SQLCompletionProposal.Type(childComplexity), true

	case "SQLContextInfo.connectionId":
		if e.complexity.SQLContextInfo.ConnectionID == nil {
			break
		}

		return e.complexity.SQLContextInfo.ConnectionID(childComplexity), true

	case "SQLContextInfo.defaultCatalog":
		if e.complexity.SQLContextInfo.DefaultCatalog == nil {
			break
		}

		return e.complexity.SQLContextInfo.DefaultCatalog(childComplexity), true

	case "SQLContextInfo.defaultSchema":
		if e.complexity.SQLContextInfo.DefaultSchema == nil {
			break
		}

		return e.complexity.SQLContextInfo.DefaultSchema(childComplexity), true

	case "SQLContextInfo.id":
		if e.complexity.SQLContextInfo.ID == nil {
			break
		}

		return e.complexity.SQLContextInfo.ID(childComplexity), true

	case "SQLDialectInfo.catalogSeparator":
		if e.complexity.SQLDialectInfo.CatalogSeparator == nil {
			break
		}

		return e.complexity.SQLDialectInfo.CatalogSeparator(childComplexity), true

	case "SQLDialectInfo.dataTypes":
		if e.complexity.SQLDialectInfo.DataTypes == nil {
			break
		}

		return e.complexity.SQLDialectInfo.DataTypes(childComplexity), true

	case "SQLDialectInfo.functions":
		if e.complexity.SQLDialectInfo.Functions == nil {
			break
		}

		return e.complexity.SQLDialectInfo.Functions(childComplexity), true

	case "SQLDialectInfo.multiLineComments":
		if e.complexity.SQLDialectInfo.MultiLineComments == nil {
			break
		}

		return e.complexity.SQLDialectInfo.MultiLineComments(childComplexity), true

	case "SQLDialectInfo.name":
		if e.complexity.SQLDialectInfo.Name == nil {
			break
		}

		return e.complexity.SQLDialectInfo.Name(childComplexity), true

	case "SQLDialectInfo.quoteStrings":
		if e.complexity.SQLDialectInfo.QuoteStrings == nil {
			break
		}

		return e.complexity.SQLDialectInfo.QuoteStrings(childComplexity), true

	case "SQLDialectInfo.reservedWords":
		if e.complexity.SQLDialectInfo.ReservedWords == nil {
			break
		}

		return e.complexity.SQLDialectInfo.ReservedWords(childComplexity), true

	case "SQLDialectInfo.scriptDelimiter":
		if e.complexity.SQLDialectInfo.ScriptDelimiter == nil {
			break
		}

		return e.complexity.SQLDialectInfo.ScriptDelimiter(childComplexity), true

	case "SQLDialectInfo.singleLineComments":
		if e.complexity.SQLDialectInfo.SingleLineComments == nil {
			break
		}

		return e.complexity.SQLDialectInfo.SingleLineComments(childComplexity), true

	case "SQLDialectInfo.structSeparator":
		if e.complexity.SQLDialectInfo.StructSeparator == nil {
			break
		}

		return e.complexity.SQLDialectInfo.StructSeparator(childComplexity), true

	case "SQLDialectInfo.supportsExplainExecutionPlan":
		if e.complexity.SQLDialectInfo.SupportsExplainExecutionPlan == nil {
			break
		}

		return e.complexity.SQLDialectInfo.SupportsExplainExecutionPlan(childComplexity), true

	case "SQLExecuteInfo.duration":
		if e.complexity.SQLExecuteInfo.Duration == nil {
			break
		}

		return e.complexity.SQLExecuteInfo.Duration(childComplexity), true

	case "SQLExecuteInfo.filterText":
		if e.complexity.SQLExecuteInfo.FilterText == nil {
			break
		}

		return e.complexity.SQLExecuteInfo.FilterText(childComplexity), true

	case "SQLExecuteInfo.results":
		if e.complexity.SQLExecuteInfo.Results == nil {
			break
		}

		return e.complexity.SQLExecuteInfo.Results(childComplexity), true

	case "SQLExecuteInfo.statusMessage":
		if e.complexity.SQLExecuteInfo.StatusMessage == nil {
			break
		}

		return e.complexity.SQLExecuteInfo.StatusMessage(childComplexity), true

	case "SQLExecutionPlan.nodes":
		if e.complexity.SQLExecutionPlan.Nodes == nil {
			break
		}

		return e.complexity.SQLExecutionPlan.Nodes(childComplexity), true

	case "SQLExecutionPlan.query":
		if e.complexity.SQLExecutionPlan.Query == nil {
			break
		}

		return e.complexity.SQLExecutionPlan.Query(childComplexity), true

	case "SQLExecutionPlanNode.condition":
		if e.complexity.SQLExecutionPlanNode.Condition == nil {
			break
		}

		return e.complexity.SQLExecutionPlanNode.Condition(childComplexity), true

	case "SQLExecutionPlanNode.description":
		if e.complexity.SQLExecutionPlanNode.Description == nil {
			break
		}

		return e.complexity.SQLExecutionPlanNode.Description(childComplexity), true

	case "SQLExecutionPlanNode.id":
		if e.complexity.SQLExecutionPlanNode.ID == nil {
			break
		}

		return e.complexity.SQLExecutionPlanNode.ID(childComplexity), true

	case "SQLExecutionPlanNode.kind":
		if e.complexity.SQLExecutionPlanNode.Kind == nil {
			break
		}

		return e.complexity.SQLExecutionPlanNode.Kind(childComplexity), true

	case "SQLExecutionPlanNode.name":
		if e.complexity.SQLExecutionPlanNode.Name == nil {
			break
		}

		return e.complexity.SQLExecutionPlanNode.Name(childComplexity), true

	case "SQLExecutionPlanNode.parentId":
		if e.complexity.SQLExecutionPlanNode.ParentID == nil {
			break
		}

		return e.complexity.SQLExecutionPlanNode.ParentID(childComplexity), true

	case "SQLExecutionPlanNode.properties":
		if e.complexity.SQLExecutionPlanNode.Properties == nil {
			break
		}

		return e.complexity.SQLExecutionPlanNode.Properties(childComplexity), true

	case "SQLExecutionPlanNode.type":
		if e.complexity.SQLExecutionPlanNode.Type == nil {
			break
		}

		return e.complexity.SQLExecutionPlanNode.Type(childComplexity), true

	case "SQLQueryGenerator.description":
		if e.complexity.SQLQueryGenerator.Description == nil {
			break
		}

		return e.complexity.SQLQueryGenerator.Description(childComplexity), true

	case "SQLQueryGenerator.id":
		if e.complexity.SQLQueryGenerator.ID == nil {
			break
		}

		return e.complexity.SQLQueryGenerator.ID(childComplexity), true

	case "SQLQueryGenerator.label":
		if e.complexity.SQLQueryGenerator.Label == nil {
			break
		}

		return e.complexity.SQLQueryGenerator.Label(childComplexity), true

	case "SQLQueryGenerator.multiObject":
		if e.complexity.SQLQueryGenerator.MultiObject == nil {
			break
		}

		return e.complexity.SQLQueryGenerator.MultiObject(childComplexity), true

	case "SQLQueryGenerator.order":
		if e.complexity.SQLQueryGenerator.Order == nil {
			break
		}

		return e.complexity.SQLQueryGenerator.Order(childComplexity), true

	case "SQLQueryResults.dataFormat":
		if e.complexity.SQLQueryResults.DataFormat == nil {
			break
		}

		return e.complexity.SQLQueryResults.DataFormat(childComplexity), true

	case "SQLQueryResults.resultSet":
		if e.complexity.SQLQueryResults.ResultSet == nil {
			break
		}

		return e.complexity.SQLQueryResults.ResultSet(childComplexity), true

	case "SQLQueryResults.sourceQuery":
		if e.complexity.SQLQueryResults.SourceQuery == nil {
			break
		}

		return e.complexity.SQLQueryResults.SourceQuery(childComplexity), true

	case "SQLQueryResults.title":
		if e.complexity.SQLQueryResults.Title == nil {
			break
		}

		return e.complexity.SQLQueryResults.Title(childComplexity), true

	case "SQLQueryResults.updateRowCount":
		if e.complexity.SQLQueryResults.UpdateRowCount == nil {
			break
		}

		return e.complexity.SQLQueryResults.UpdateRowCount(childComplexity), true

	case "SQLResultColumn.dataKind":
		if e.complexity.SQLResultColumn.DataKind == nil {
			break
		}

		return e.complexity.SQLResultColumn.DataKind(childComplexity), true

	case "SQLResultColumn.entityName":
		if e.complexity.SQLResultColumn.EntityName == nil {
			break
		}

		return e.complexity.SQLResultColumn.EntityName(childComplexity), true

	case "SQLResultColumn.fullTypeName":
		if e.complexity.SQLResultColumn.FullTypeName == nil {
			break
		}

		return e.complexity.SQLResultColumn.FullTypeName(childComplexity), true

	case "SQLResultColumn.icon":
		if e.complexity.SQLResultColumn.Icon == nil {
			break
		}

		return e.complexity.SQLResultColumn.Icon(childComplexity), true

	case "SQLResultColumn.label":
		if e.complexity.SQLResultColumn.Label == nil {
			break
		}

		return e.complexity.SQLResultColumn.Label(childComplexity), true

	case "SQLResultColumn.maxLength":
		if e.complexity.SQLResultColumn.MaxLength == nil {
			break
		}

		return e.complexity.SQLResultColumn.MaxLength(childComplexity), true

	case "SQLResultColumn.name":
		if e.complexity.SQLResultColumn.Name == nil {
			break
		}

		return e.complexity.SQLResultColumn.Name(childComplexity), true

	case "SQLResultColumn.position":
		if e.complexity.SQLResultColumn.Position == nil {
			break
		}

		return e.complexity.SQLResultColumn.Position(childComplexity), true

	case "SQLResultColumn.precision":
		if e.complexity.SQLResultColumn.Precision == nil {
			break
		}

		return e.complexity.SQLResultColumn.Precision(childComplexity), true

	case "SQLResultColumn.readOnly":
		if e.complexity.SQLResultColumn.ReadOnly == nil {
			break
		}

		return e.complexity.SQLResultColumn.ReadOnly(childComplexity), true

	case "SQLResultColumn.readOnlyStatus":
		if e.complexity.SQLResultColumn.ReadOnlyStatus == nil {
			break
		}

		return e.complexity.SQLResultColumn.ReadOnlyStatus(childComplexity), true

	case "SQLResultColumn.required":
		if e.complexity.SQLResultColumn.Required == nil {
			break
		}

		return e.complexity.SQLResultColumn.Required(childComplexity), true

	case "SQLResultColumn.scale":
		if e.complexity.SQLResultColumn.Scale == nil {
			break
		}

		return e.complexity.SQLResultColumn.Scale(childComplexity), true

	case "SQLResultColumn.supportedOperations":
		if e.complexity.SQLResultColumn.SupportedOperations == nil {
			break
		}

		return e.complexity.SQLResultColumn.SupportedOperations(childComplexity), true

	case "SQLResultColumn.typeName":
		if e.complexity.SQLResultColumn.TypeName == nil {
			break
		}

		return e.complexity.SQLResultColumn.TypeName(childComplexity), true

	case "SQLResultSet.columns":
		if e.complexity.SQLResultSet.Columns == nil {
			break
		}

		return e.complexity.SQLResultSet.Columns(childComplexity), true

	case "SQLResultSet.hasMoreData":
		if e.complexity.SQLResultSet.HasMoreData == nil {
			break
		}

		return e.complexity.SQLResultSet.HasMoreData(childComplexity), true

	case "SQLResultSet.hasRowIdentifier":
		if e.complexity.SQLResultSet.HasRowIdentifier == nil {
			break
		}

		return e.complexity.SQLResultSet.HasRowIdentifier(childComplexity), true

	case "SQLResultSet.id":
		if e.complexity.SQLResultSet.ID == nil {
			break
		}

		return e.complexity.SQLResultSet.ID(childComplexity), true

	case "SQLResultSet.rows":
		if e.complexity.SQLResultSet.Rows == nil {
			break
		}

		return e.complexity.SQLResultSet.Rows(childComplexity), true

	case "SQLResultSet.singleEntity":
		if e.complexity.SQLResultSet.SingleEntity == nil {
			break
		}

		return e.complexity.SQLResultSet.SingleEntity(childComplexity), true

	case "SQLScriptInfo.queries":
		if e.complexity.SQLScriptInfo.Queries == nil {
			break
		}

		return e.complexity.SQLScriptInfo.Queries(childComplexity), true

	case "SQLScriptQuery.end":
		if e.complexity.SQLScriptQuery.End == nil {
			break
		}

		return e.complexity.SQLScriptQuery.End(childComplexity), true

	case "SQLScriptQuery.start":
		if e.complexity.SQLScriptQuery.Start == nil {
			break
		}

		return e.complexity.SQLScriptQuery.Start(childComplexity), true

	case "ServerConfig.adminCredentialsSaveEnabled":
		if e.complexity.ServerConfig.AdminCredentialsSaveEnabled == nil {
			break
		}

		return e.complexity.ServerConfig.AdminCredentialsSaveEnabled(childComplexity), true

	case "ServerConfig.anonymousAccessEnabled":
		if e.complexity.ServerConfig.AnonymousAccessEnabled == nil {
			break
		}

		return e.complexity.ServerConfig.AnonymousAccessEnabled(childComplexity), true

	case "ServerConfig.authenticationEnabled":
		if e.complexity.ServerConfig.AuthenticationEnabled == nil {
			break
		}

		return e.complexity.ServerConfig.AuthenticationEnabled(childComplexity), true

	case "ServerConfig.configurationMode":
		if e.complexity.ServerConfig.ConfigurationMode == nil {
			break
		}

		return e.complexity.ServerConfig.ConfigurationMode(childComplexity), true

	case "ServerConfig.defaultNavigatorSettings":
		if e.complexity.ServerConfig.DefaultNavigatorSettings == nil {
			break
		}

		return e.complexity.ServerConfig.DefaultNavigatorSettings(childComplexity), true

	case "ServerConfig.developmentMode":
		if e.complexity.ServerConfig.DevelopmentMode == nil {
			break
		}

		return e.complexity.ServerConfig.DevelopmentMode(childComplexity), true

	case "ServerConfig.disabledDrivers":
		if e.complexity.ServerConfig.DisabledDrivers == nil {
			break
		}

		return e.complexity.ServerConfig.DisabledDrivers(childComplexity), true

	case "ServerConfig.enabledAuthProviders":
		if e.complexity.ServerConfig.EnabledAuthProviders == nil {
			break
		}

		return e.complexity.ServerConfig.EnabledAuthProviders(childComplexity), true

	case "ServerConfig.enabledFeatures":
		if e.complexity.ServerConfig.EnabledFeatures == nil {
			break
		}

		return e.complexity.ServerConfig.EnabledFeatures(childComplexity), true

	case "ServerConfig.hostName":
		if e.complexity.ServerConfig.HostName == nil {
			break
		}

		return e.complexity.ServerConfig.HostName(childComplexity), true

	case "ServerConfig.licenseRequired":
		if e.complexity.ServerConfig.LicenseRequired == nil {
			break
		}

		return e.complexity.ServerConfig.LicenseRequired(childComplexity), true

	case "ServerConfig.licenseValid":
		if e.complexity.ServerConfig.LicenseValid == nil {
			break
		}

		return e.complexity.ServerConfig.LicenseValid(childComplexity), true

	case "ServerConfig.localHostAddress":
		if e.complexity.ServerConfig.LocalHostAddress == nil {
			break
		}

		return e.complexity.ServerConfig.LocalHostAddress(childComplexity), true

	case "ServerConfig.name":
		if e.complexity.ServerConfig.Name == nil {
			break
		}

		return e.complexity.ServerConfig.Name(childComplexity), true

	case "ServerConfig.productConfiguration":
		if e.complexity.ServerConfig.ProductConfiguration == nil {
			break
		}

		return e.complexity.ServerConfig.ProductConfiguration(childComplexity), true

	case "ServerConfig.productInfo":
		if e.complexity.ServerConfig.ProductInfo == nil {
			break
		}

		return e.complexity.ServerConfig.ProductInfo(childComplexity), true

	case "ServerConfig.publicCredentialsSaveEnabled":
		if e.complexity.ServerConfig.PublicCredentialsSaveEnabled == nil {
			break
		}

		return e.complexity.ServerConfig.PublicCredentialsSaveEnabled(childComplexity), true

	case "ServerConfig.redirectOnFederatedAuth":
		if e.complexity.ServerConfig.RedirectOnFederatedAuth == nil {
			break
		}

		return e.complexity.ServerConfig.RedirectOnFederatedAuth(childComplexity), true

	case "ServerConfig.resourceManagerEnabled":
		if e.complexity.ServerConfig.ResourceManagerEnabled == nil {
			break
		}

		return e.complexity.ServerConfig.ResourceManagerEnabled(childComplexity), true

	case "ServerConfig.resourceQuotas":
		if e.complexity.ServerConfig.ResourceQuotas == nil {
			break
		}

		return e.complexity.ServerConfig.ResourceQuotas(childComplexity), true

	case "ServerConfig.rootURI":
		if e.complexity.ServerConfig.RootURI == nil {
			break
		}

		return e.complexity.ServerConfig.RootURI(childComplexity), true

	case "ServerConfig.serverURL":
		if e.complexity.ServerConfig.ServerURL == nil {
			break
		}

		return e.complexity.ServerConfig.ServerURL(childComplexity), true

	case "ServerConfig.services":
		if e.complexity.ServerConfig.Services == nil {
			break
		}

		return e.complexity.ServerConfig.Services(childComplexity), true

	case "ServerConfig.sessionExpireTime":
		if e.complexity.ServerConfig.SessionExpireTime == nil {
			break
		}

		return e.complexity.ServerConfig.SessionExpireTime(childComplexity), true

	case "ServerConfig.supportedLanguages":
		if e.complexity.ServerConfig.SupportedLanguages == nil {
			break
		}

		return e.complexity.ServerConfig.SupportedLanguages(childComplexity), true

	case "ServerConfig.supportsConnectionBrowser":
		if e.complexity.ServerConfig.SupportsConnectionBrowser == nil {
			break
		}

		return e.complexity.ServerConfig.SupportsConnectionBrowser(childComplexity), true

	case "ServerConfig.supportsCustomConnections":
		if e.complexity.ServerConfig.SupportsCustomConnections == nil {
			break
		}

		return e.complexity.ServerConfig.SupportsCustomConnections(childComplexity), true

	case "ServerConfig.supportsWorkspaces":
		if e.complexity.ServerConfig.SupportsWorkspaces == nil {
			break
		}

		return e.complexity.ServerConfig.SupportsWorkspaces(childComplexity), true

	case "ServerConfig.version":
		if e.complexity.ServerConfig.Version == nil {
			break
		}

		return e.complexity.ServerConfig.Version(childComplexity), true

	case "ServerConfig.workspaceId":
		if e.complexity.ServerConfig.WorkspaceID == nil {
			break
		}

		return e.complexity.ServerConfig.WorkspaceID(childComplexity), true

	case "ServerError.causedBy":
		if e.complexity.ServerError.CausedBy == nil {
			break
		}

		return e.complexity.ServerError.CausedBy(childComplexity), true

	case "ServerError.errorCode":
		if e.complexity.ServerError.ErrorCode == nil {
			break
		}

		return e.complexity.ServerError.ErrorCode(childComplexity), true

	case "ServerError.errorType":
		if e.complexity.ServerError.ErrorType == nil {
			break
		}

		return e.complexity.ServerError.ErrorType(childComplexity), true

	case "ServerError.message":
		if e.complexity.ServerError.Message == nil {
			break
		}

		return e.complexity.ServerError.Message(childComplexity), true

	case "ServerError.stackTrace":
		if e.complexity.ServerError.StackTrace == nil {
			break
		}

		return e.complexity.ServerError.StackTrace(childComplexity), true

	case "ServerLanguage.displayName":
		if e.complexity.ServerLanguage.DisplayName == nil {
			break
		}

		return e.complexity.ServerLanguage.DisplayName(childComplexity), true

	case "ServerLanguage.isoCode":
		if e.complexity.ServerLanguage.IsoCode == nil {
			break
		}

		return e.complexity.ServerLanguage.IsoCode(childComplexity), true

	case "ServerLanguage.nativeName":
		if e.complexity.ServerLanguage.NativeName == nil {
			break
		}

		return e.complexity.ServerLanguage.NativeName(childComplexity), true

	case "ServerMessage.message":
		if e.complexity.ServerMessage.Message == nil {
			break
		}

		return e.complexity.ServerMessage.Message(childComplexity), true

	case "ServerMessage.time":
		if e.complexity.ServerMessage.Time == nil {
			break
		}

		return e.complexity.ServerMessage.Time(childComplexity), true

	case "SessionInfo.actionParameters":
		if e.complexity.SessionInfo.ActionParameters == nil {
			break
		}

		return e.complexity.SessionInfo.ActionParameters(childComplexity), true

	case "SessionInfo.cacheExpired":
		if e.complexity.SessionInfo.CacheExpired == nil {
			break
		}

		return e.complexity.SessionInfo.CacheExpired(childComplexity), true

	case "SessionInfo.connections":
		if e.complexity.SessionInfo.Connections == nil {
			break
		}

		return e.complexity.SessionInfo.Connections(childComplexity), true

	case "SessionInfo.createTime":
		if e.complexity.SessionInfo.CreateTime == nil {
			break
		}

		return e.complexity.SessionInfo.CreateTime(childComplexity), true

	case "SessionInfo.lastAccessTime":
		if e.complexity.SessionInfo.LastAccessTime == nil {
			break
		}

		return e.complexity.SessionInfo.LastAccessTime(childComplexity), true

	case "SessionInfo.locale":
		if e.complexity.SessionInfo.Locale == nil {
			break
		}

		return e.complexity.SessionInfo.Locale(childComplexity), true

	case "SessionInfo.serverMessages":
		if e.complexity.SessionInfo.ServerMessages == nil {
			break
		}

		return e.complexity.SessionInfo.ServerMessages(childComplexity), true

	case "UserAuthToken.authConfiguration":
		if e.complexity.UserAuthToken.AuthConfiguration == nil {
			break
		}

		return e.complexity.UserAuthToken.AuthConfiguration(childComplexity), true

	case "UserAuthToken.authProvider":
		if e.complexity.UserAuthToken.AuthProvider == nil {
			break
		}

		return e.complexity.UserAuthToken.AuthProvider(childComplexity), true

	case "UserAuthToken.displayName":
		if e.complexity.UserAuthToken.DisplayName == nil {
			break
		}

		return e.complexity.UserAuthToken.DisplayName(childComplexity), true

	case "UserAuthToken.loginTime":
		if e.complexity.UserAuthToken.LoginTime == nil {
			break
		}

		return e.complexity.UserAuthToken.LoginTime(childComplexity), true

	case "UserAuthToken.message":
		if e.complexity.UserAuthToken.Message == nil {
			break
		}

		return e.complexity.UserAuthToken.Message(childComplexity), true

	case "UserAuthToken.origin":
		if e.complexity.UserAuthToken.Origin == nil {
			break
		}

		return e.complexity.UserAuthToken.Origin(childComplexity), true

	case "UserAuthToken.userId":
		if e.complexity.UserAuthToken.UserID == nil {
			break
		}

		return e.complexity.UserAuthToken.UserID(childComplexity), true

	case "UserInfo.authTokens":
		if e.complexity.UserInfo.AuthTokens == nil {
			break
		}

		return e.complexity.UserInfo.AuthTokens(childComplexity), true

	case "UserInfo.configurationParameters":
		if e.complexity.UserInfo.ConfigurationParameters == nil {
			break
		}

		return e.complexity.UserInfo.ConfigurationParameters(childComplexity), true

	case "UserInfo.displayName":
		if e.complexity.UserInfo.DisplayName == nil {
			break
		}

		return e.complexity.UserInfo.DisplayName(childComplexity), true

	case "UserInfo.linkedAuthProviders":
		if e.complexity.UserInfo.LinkedAuthProviders == nil {
			break
		}

		return e.complexity.UserInfo.LinkedAuthProviders(childComplexity), true

	case "UserInfo.metaParameters":
		if e.complexity.UserInfo.MetaParameters == nil {
			break
		}

		return e.complexity.UserInfo.MetaParameters(childComplexity), true

	case "UserInfo.userId":
		if e.complexity.UserInfo.UserID == nil {
			break
		}

		return e.complexity.UserInfo.UserID(childComplexity), true

	case "WebFeatureSet.description":
		if e.complexity.WebFeatureSet.Description == nil {
			break
		}

		return e.complexity.WebFeatureSet.Description(childComplexity), true

	case "WebFeatureSet.enabled":
		if e.complexity.WebFeatureSet.Enabled == nil {
			break
		}

		return e.complexity.WebFeatureSet.Enabled(childComplexity), true

	case "WebFeatureSet.id":
		if e.complexity.WebFeatureSet.ID == nil {
			break
		}

		return e.complexity.WebFeatureSet.ID(childComplexity), true

	case "WebFeatureSet.icon":
		if e.complexity.WebFeatureSet.Icon == nil {
			break
		}

		return e.complexity.WebFeatureSet.Icon(childComplexity), true

	case "WebFeatureSet.label":
		if e.complexity.WebFeatureSet.Label == nil {
			break
		}

		return e.complexity.WebFeatureSet.Label(childComplexity), true

	case "WebServiceConfig.bundleVersion":
		if e.complexity.WebServiceConfig.BundleVersion == nil {
			break
		}

		return e.complexity.WebServiceConfig.BundleVersion(childComplexity), true

	case "WebServiceConfig.description":
		if e.complexity.WebServiceConfig.Description == nil {
			break
		}

		return e.complexity.WebServiceConfig.Description(childComplexity), true

	case "WebServiceConfig.id":
		if e.complexity.WebServiceConfig.ID == nil {
			break
		}

		return e.complexity.WebServiceConfig.ID(childComplexity), true

	case "WebServiceConfig.name":
		if e.complexity.WebServiceConfig.Name == nil {
			break
		}

		return e.complexity.WebServiceConfig.Name(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputConnectionConfig,
		ec.unmarshalInputDataTransferParameters,
		ec.unmarshalInputNavigatorSettingsInput,
		ec.unmarshalInputNetworkHandlerConfigInput,
		ec.unmarshalInputObjectPropertyFilter,
		ec.unmarshalInputSQLDataFilter,
		ec.unmarshalInputSQLDataFilterConstraint,
		ec.unmarshalInputSQLResultRow,
		ec.unmarshalInputServerConfigInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schema/schema.graphqls", Input: `# Any object (JSON)
scalar Object
# Date/Time
scalar DateTime

type Query

type Mutation

schema {
    query: Query
    mutation: Mutation
}
`, BuiltIn: false},
	{Name: "../schema/service.admin.graphqls", Input: `
enum AdminSubjectType {
    user,
    role
}

type AdminConnectionGrantInfo {
    connectionId: ID! @deprecated(reason: "use dataSourceId instead")
    dataSourceId: ID!
    subjectId: ID!
    subjectType: AdminSubjectType!
}

type AdminConnectionSearchInfo {
    displayName: String!
    host: String!
    port: Int!
    possibleDrivers: [ID!]!
    defaultDriver: ID!
}

type AdminUserInfo {
    userId: ID!

    metaParameters: Object!
    configurationParameters: Object!
    grantedRoles: [ID!]!
    grantedConnections: [AdminConnectionGrantInfo!]!

    origins: [ObjectOrigin!]!

    linkedAuthProviders: [String!]!
    enabled: Boolean!
}

type AdminRoleInfo {
    roleId: ID!
    roleName: String
    description: String

    grantedUsers: [ID!]!
    grantedConnections: [AdminConnectionGrantInfo!]!

    rolePermissions: [ID!]!
}

type AdminPermissionInfo {
    id: ID!
    label: String
    description: String

    provider: String!
    category: String
}

type AdminAuthProviderConfiguration {
    providerId: ID!
    id: ID!
    displayName: String!
    disabled: Boolean!

    iconURL: String
    description: String

    parameters: Object!

    signInLink: String
    signOutLink: String
    redirectLink: String
    metadataLink: String
}

type WebFeatureSet {
    id: String!
    label: String!
    description: String
    icon: String

    enabled: Boolean!
}

input ServerConfigInput {
    serverName: String
    serverURL: String

    adminName: String
    adminPassword: String

    anonymousAccessEnabled: Boolean
    authenticationEnabled: Boolean
    customConnectionsEnabled: Boolean
    publicCredentialsSaveEnabled: Boolean
    adminCredentialsSaveEnabled: Boolean
    resourceManagerEnabled: Boolean

    enabledFeatures: [ID!]
    enabledAuthProviders: [ID!]
    disabledDrivers: [ID!]

    sessionExpireTime: Int
}

extend type Query {

    #### Users and roles

    listUsers(userId: ID): [AdminUserInfo!]!
    listRoles(roleId: ID): [AdminRoleInfo!]!
    listPermissions: [AdminPermissionInfo!]!

    createUser(userId: ID!): AdminUserInfo!
    deleteUser(userId: ID!): Boolean

    createRole(roleId: ID!, roleName: String, description: String): AdminRoleInfo!
    updateRole(roleId: ID!, roleName: String, description: String): AdminRoleInfo!
    deleteRole(roleId: ID!): Boolean

    grantUserRole(userId: ID!, roleId: ID!): Boolean
    revokeUserRole(userId: ID!, roleId: ID!): Boolean

    setSubjectPermissions(roleId: ID!, permissions: [ID!]!): [AdminPermissionInfo!]!

    setUserCredentials(userId: ID!, providerId: ID!, credentials: Object!): Boolean

    enableUser(userId: ID!, enabled: Boolean!): Boolean

    #### Connection management

    # All connection configurations
    allConnections( id: ID ): [ ConnectionInfo! ]!

    searchConnections( hostNames: [String!]! ): [AdminConnectionSearchInfo!]!

    createConnectionConfiguration( config: ConnectionConfig! ): ConnectionInfo!
    copyConnectionConfiguration( nodePath: String!, config: ConnectionConfig ): ConnectionInfo!
    updateConnectionConfiguration( id: ID!, config: ConnectionConfig! ): ConnectionInfo!
    deleteConnectionConfiguration( id: ID! ): Boolean

    # Permissions

    getConnectionSubjectAccess(connectionId: ID): [AdminConnectionGrantInfo!]!
    setConnectionSubjectAccess(connectionId: ID!, subjects: [ID!]!): Boolean

    getSubjectConnectionAccess(subjectId: ID): [AdminConnectionGrantInfo!]!
    setSubjectConnectionAccess(subjectId: ID!, connections: [ID!]!): Boolean

    #### Feature sets

    listFeatureSets: [WebFeatureSet!]!

    #### Auth providers and configurations

    listAuthProviderConfigurationParameters(providerId: ID!): [ObjectPropertyInfo!]!
    listAuthProviderConfigurations(providerId: ID): [AdminAuthProviderConfiguration!]!

    saveAuthProviderConfiguration(
        providerId: ID!,
        id: ID!,
        displayName: String,
        disabled: Boolean,
        iconURL: String
        description: String
        parameters: Object): AdminAuthProviderConfiguration!
    deleteAuthProviderConfiguration(id: ID!): Boolean!

    #### User profile

    saveUserMetaParameter(id: ID!, displayName: String!, description: String, required: Boolean!): ObjectPropertyInfo!

    deleteUserMetaParameter(id: ID!): Boolean!

    setUserMetaParameterValues(userId: ID!, parameters: Object!): Boolean!

    #### Global configuration

    configureServer(configuration: ServerConfigInput!): Boolean!

    # Changes default navigator settings
    setDefaultNavigatorSettings( settings: NavigatorSettingsInput!): Boolean!

}
`, BuiltIn: false},
	{Name: "../schema/service.auth.graphqls", Input: `enum AuthCredentialEncryption {
    none,
    plain,
    hash
}

enum AuthStatus {
    SUCCESS,
    IN_PROGRESS,
    ERROR
}

type AuthCredentialInfo {
    id: ID!
    displayName: String!
    description: String

    # This field must be shown in admin panel
    admin: Boolean!
    # This field must be shown in login form
    user: Boolean!
    # This field can be used as user identifier

    identifying: Boolean!
    possibleValues: [String]
    encryption: AuthCredentialEncryption
}

type AuthProviderConfiguration {
    id: ID!
    displayName: String!
    disabled: Boolean!

    iconURL: String
    description: String

    # URL to external authentication service.
    # If specified then it is external auhentication provider (SSO).
    # Otherwise authLogin function must be called.
    signInLink: String
    signOutLink: String
    metadataLink: String
}

type AuthProviderCredentialsProfile {
    id: String
    label: String
    description: String
    credentialParameters: [AuthCredentialInfo!]!
}

type AuthProviderInfo {
    id: ID!
    label: String!
    icon: ID
    description: String

    defaultProvider: Boolean!

    # Configurable providers must be configured first. See configurations field.
    configurable: Boolean!

    # Provider configurations (applicable only if configurable=true)
    configurations: [AuthProviderConfiguration!]

    credentialProfiles: [AuthProviderCredentialsProfile!]!

    requiredFeatures: [String!]!
}

type AuthInfo {
    redirectLink: String

    authId: String

    authStatus: AuthStatus!

    userTokens: [UserAuthToken!]
}

type UserAuthToken {
    # Auth provider used for authorization
    authProvider: ID!

    # Auth provider configuration ID
    authConfiguration: ID

    # Authorization time
    loginTime: DateTime!

    # User identity (aka user name) specific to auth provider
    userId: String!

    # User display name specific to auth provider
    displayName: String!

    # Optional login message
    message: String

    # Auth origin
    origin: ObjectOrigin!

}

type UserInfo {
    # User unique identifier
    userId: ID!

    # Human readable display name. It is taken from the first auth provider which was used for user login.
    displayName: String

    authTokens: [UserAuthToken!]!

    linkedAuthProviders: [String!]!

    # User profile properties map
    metaParameters: Object!

    # USer configuiraiton parameters
    configurationParameters: Object!
}

extend type Query {

    # Authorize user using specified auth provider. If linkUser=true then associates new
    authLogin(provider: ID!, configuration: ID, credentials: Object, linkUser: Boolean): AuthInfo!

    authUpdateStatus(authId: ID!, linkUser: Boolean): AuthInfo!

    # Logouts user. If provider not specified then all authorizations are revoked from session.
    authLogout(provider: ID, configuration: ID): Boolean

    # Active user information. null is no user was authorized within session
    activeUser: UserInfo

    authProviders: [AuthProviderInfo!]!

    authChangeLocalPassword(oldPassword: String!, newPassword: String!): Boolean!

    listUserProfileProperties: [ObjectPropertyInfo!]!

}

extend type Mutation {

    # Set user config parameter. If parameter value is null then removes the parameter
    setUserConfigurationParameter(name: String!, value: Object): Boolean!

}
`, BuiltIn: false},
	{Name: "../schema/service.core.graphqls", Input: `
####################################################
# General stuff
####################################################

# Property

type ObjectPropertyInfo {
    # ID
    id: String
    # Human readable name
    displayName: String
    # Property description
    description: String
    # Property category (may be used if object has a lot of properties)
    category: String
    # Property data type (int, String, etc)
    dataType: String

    # Property value. Note: for some properties value reading may take a lot of time (e.g. RowCount for tables)
    value: Object

    # List of values this property can take. Makes sense only for enumerable properties
    validValues: [ Object ]
    # Default property value
    defaultValue: Object

    # Property value length
    length: ObjectPropertyLength!

    # Supported features (system, hidden, inherited, foreign, expensive, etc)
    features: [ String! ]!
    # Order position
    order: Int!
}

enum ObjectPropertyLength {
    # 1 character
    TINY,
    # 20 characters
    SHORT,
    # <= 64 characters
    MEDIUM,
    # Full line length. The default
    LONG,
    # Multi-line long text
    MULTILINE
}

# Async types

type AsyncTaskInfo {
    id: String!
    name: String
    running: Boolean!

    status: String
    error: ServerError

    result: SQLExecuteInfo @deprecated # Deprecated. Use asyncSqlExecuteResults instead
    # Task result.
    # Can be some kind of identifier to obtain real result using another API function
    taskResult: Object
}

# Various server errors descriptor

type ServerError {
    message: String
    errorCode: String
    errorType: String
    stackTrace: String
    causedBy: ServerError
}

type ServerMessage {
    time: String
    message: String
}

# Languages supported by server

type ServerLanguage {
    isoCode: String!
    displayName: String
    nativeName: String
}

type WebServiceConfig {
    id: String!
    name: String!
    description: String!
    bundleVersion: String!
}

type ProductInfo {
    id: ID!
    version: String!
    name: String!
    description: String
    buildTime: String!
    releaseTime: String!
    licenseInfo: String

    latestVersionInfo: String
}

type ServerConfig {
    name: String!
    version: String!
    workspaceId: ID!

    serverURL: String!

    rootURI: String!

    hostName: String!

    anonymousAccessEnabled: Boolean
    authenticationEnabled: Boolean @deprecated
    supportsCustomConnections: Boolean
    supportsConnectionBrowser: Boolean
    supportsWorkspaces: Boolean
    resourceManagerEnabled: Boolean

    publicCredentialsSaveEnabled: Boolean
    adminCredentialsSaveEnabled: Boolean

    licenseRequired: Boolean!
    licenseValid: Boolean!

    sessionExpireTime: Int
    localHostAddress: String

    configurationMode: Boolean
    developmentMode: Boolean
    redirectOnFederatedAuth: Boolean

    enabledFeatures: [ID!]!
    enabledAuthProviders: [ID!]!
    supportedLanguages: [ ServerLanguage! ]!
    services: [ WebServiceConfig ]
    productConfiguration: Object!
    productInfo: ProductInfo!
    defaultNavigatorSettings: NavigatorSettings!
    disabledDrivers: [ID!]!
    resourceQuotas: Object!
}

type SessionInfo {
    createTime: String!
    lastAccessTime: String!
    locale: String!

    cacheExpired: Boolean!

    serverMessages: [ ServerMessage ]
    connections: [ ConnectionInfo! ]!
    actionParameters: Object
}

####################################################
# Drivers and connections
####################################################

type DatabaseAuthModel {
    id: ID!
    displayName: String!
    description: String
    icon: String
    # checks if the auth model needs a configuration on a local file system
    requiresLocalConfiguration: Boolean

    properties: [ObjectPropertyInfo!]!
}

type DriverInfo {
    id: ID!
    name: String
    description: String
    icon: String
    iconBig: String

    # Driver provider ID
    providerId: ID
    # Driver Java class name
    driverClassName: String
    defaultHost: String
    defaultPort: String
    defaultDatabase: String
    defaultServer: String
    defaultUser: String
    sampleURL: String
    driverInfoURL: String
    driverPropertiesURL: String
    embedded: Boolean
    enabled: Boolean!
    requiresServerName: Boolean

    # this fields must be removed and be replaced by DriverAuthModel
    allowsEmptyPassword: Boolean @deprecated

    licenseRequired: Boolean
    license: String
    custom: Boolean
    # Driver score for ordering, biggest first
    promotedScore: Int

    # Never used?
    #connectionProperties: Object
    #defaultConnectionProperties: Object

    # Driver properties.
    # Note: it is expensive property and it may produce database server roundtrips.
    # Call it only when you really need it.
    # These properties are for advanced users in usually shouldn't be specified for new connections.
    driverProperties: [ObjectPropertyInfo!]!
    # Driver parameters (map name->value)
    driverParameters: Object!

    # Additional driver provider properties
    # These properties can be configured by user on main connection page
    # to provide important connection settings
    providerProperties: [ObjectPropertyInfo!]!

    # False for drivers which do not support authentication
    anonymousAccess: Boolean

    defaultAuthModel: ID!
    applicableAuthModels: [ID!]!

    applicableNetworkHandlers: [ID]!
}

enum ResultDataFormat {
    resultset,
    document,
    graph,
    timeseries
}

## Network handler config

enum NetworkHandlerType {
    TUNNEL,
    PROXY,
    CONFIG
}

enum NetworkHandlerAuthType {
    PASSWORD,
    PUBLIC_KEY,
    AGENT
}

type NetworkHandlerDescriptor {
    id: ID!
    codeName: String!
    label: String!
    description: String
    secured: Boolean!
    type: NetworkHandlerType
    properties: [ObjectPropertyInfo!]!
}

type NetworkHandlerConfig {
    id: ID!
    enabled: Boolean!
    authType: NetworkHandlerAuthType!
    userName: String
    password: String
    key: String
    savePassword: Boolean!
    properties: Object!
}

# Connection instance
type ConnectionInfo {
    id: ID!
    driverId: ID!

    name: String!
    description: String

    host: String
    port: String
    serverName: String
    databaseName: String
    url: String

    properties: Object

    template: Boolean!
    connected: Boolean!
    provided: Boolean!
    readOnly: Boolean!
    useUrl: Boolean!
    saveCredentials: Boolean!

    folder: ID
    nodePath: String

    connectTime: String
    connectionError: ServerError
    serverVersion: String
    clientVersion: String

    origin: ObjectOrigin!

    authNeeded: Boolean!
    authModel: ID
    authProperties: [ObjectPropertyInfo!]!

    providerProperties: Object!
    networkHandlersConfig: [NetworkHandlerConfig!]!

    # Supported features (provided etc)
    features: [ String! ]!
    navigatorSettings: NavigatorSettings!
    supportedDataFormats: [ ResultDataFormat! ]!
}

type ConnectionFolderInfo {
    id: ID!
    description: String
}

type NetworkEndpointInfo {
    message: String
    clientVersion: String
    serverVersion: String
}

type ObjectOrigin {
    type: ID!
    subType: ID
    displayName: String!
    icon: String
    configuration: Object
    details: [ObjectPropertyInfo!]
}

type NavigatorSettings {
    showSystemObjects: Boolean!
    showUtilityObjects: Boolean!
    showOnlyEntities: Boolean!
    mergeEntities: Boolean!
    hideFolders: Boolean!
    hideSchemas: Boolean!
    hideVirtualModel: Boolean!
}

type LogEntry {
    time: DateTime
    type: String!
    message: String
    stackTrace: String
}

####################################################
# Input types
####################################################

input NavigatorSettingsInput {
    showSystemObjects: Boolean!
    showUtilityObjects: Boolean!
    showOnlyEntities: Boolean!
    mergeEntities: Boolean!
    hideFolders: Boolean!
    hideSchemas: Boolean!
    hideVirtualModel: Boolean!
}

input NetworkHandlerConfigInput {
    id: ID!
    enabled: Boolean
    authType: NetworkHandlerAuthType
    userName: String
    password: String
    key: String
    savePassword: Boolean
    properties: Object
}

# Configuration of particular connection. Used for new connection create. Includes auth info
input ConnectionConfig {
    # used only for testing created connection
    connectionId: String
    name: String
    description: String

    # ID of template connection
    templateId: ID
    # ID of database driver
    driverId: ID

    # Custom connection parameters (all optional)

    host: String
    port: String
    serverName: String
    databaseName: String
    # Connection url jdbc:{driver}://{host}[:{port}]/[{database}]
    url: String
    # Properties
    properties: Object

    # Template connection
    template: Boolean
    # Read-onyl connection
    readOnly: Boolean

    # User credentials

    saveCredentials: Boolean
    authModelId: ID
    credentials: Object

    # Map of provider properties (name/value)

    providerProperties: Object

    # Network handlers. Map of id->property map (name/value).

    networkHandlersConfig: [NetworkHandlerConfigInput!]

    #### deprecated fields

    # ID of predefined datasource
    dataSourceId: ID #@deprecated

    # Direct user credentials
    userName: String #@deprecated
    userPassword: String #@deprecated

    # Folder
    folder: ID
}

####################################################
# Main API
####################################################

extend type Query {
    # Returns server config
    serverConfig: ServerConfig!

    # Returns session state ( initialize if not )
    sessionState: SessionInfo!

    # Session permissions
    sessionPermissions: [ID]!

    # Get driver info
    driverList( id: ID ): [ DriverInfo! ]!
    authModels: [DatabaseAuthModel!]!
    networkHandlers: [NetworkHandlerDescriptor!]!

    # List of user connections.
    userConnections( id: ID ): [ ConnectionInfo! ]!
    # List of template connections.
    templateConnections: [ ConnectionInfo! ]!

    # List of connection folders
    connectionFolders( path: ID ): [ ConnectionFolderInfo! ]!

    # Return connection state
    connectionState( id: ID! ): ConnectionInfo! @deprecated

    # Return connection info
    connectionInfo( id: ID! ): ConnectionInfo!

    readSessionLog(maxEntries: Int, clearEntries: Boolean): [ LogEntry! ]!
}

extend type Mutation {
    # Initialize session
    openSession(defaultLocale: String): SessionInfo!

    # Destroy session
    closeSession: Boolean

    # Refreshes session on server and returns its state
    touchSession: Boolean

    # Refresh session connection list
    refreshSessionConnections: Boolean

    # Refreshes session on server and returns its state
    changeSessionLanguage(locale: String): Boolean

    # Create new custom connection. Custom connections exist only within the current session.
    createConnection( config: ConnectionConfig! ): ConnectionInfo!

    updateConnection( config: ConnectionConfig! ): ConnectionInfo!

    deleteConnection( id: ID! ): Boolean!

    createConnectionFromTemplate( templateId: ID!, connectionName: String ): ConnectionInfo!

    # Create new folder
    createConnectionFolder(parentFolderPath: ID, folderName: String! ): ConnectionFolderInfo!

    deleteConnectionFolder( folderPath: ID! ): Boolean!

    # Copies connection configuration from node
    copyConnectionFromNode( nodePath: String!, config: ConnectionConfig ): ConnectionInfo!

    # Test connection configuration. Returns remote server version
    testConnection( config: ConnectionConfig! ): ConnectionInfo!

    # Test connection configuration. Returns remote server version
    testNetworkHandler( config: NetworkHandlerConfigInput! ): NetworkEndpointInfo!

    # Initiate existing connection
    initConnection( id: ID!, credentials: Object, networkCredentials: [NetworkHandlerConfigInput!], saveCredentials: Boolean ): ConnectionInfo!

    # Disconnect from database
    closeConnection( id: ID! ): ConnectionInfo!

    # Changes navigator settings for connection
    setConnectionNavigatorSettings( id: ID!, settings: NavigatorSettingsInput!): ConnectionInfo!

    #### Generic async functions

    asyncTaskCancel(id: String!): Boolean

    asyncTaskInfo(id: String!, removeOnFinish: Boolean!): AsyncTaskInfo!


    #### Deprecated API

    # Create connection from template. Use createConnection instead
    openConnection( config: ConnectionConfig! ): ConnectionInfo! @deprecated

    # Use asyncTaskInfo instead
    asyncTaskStatus(id: String!): AsyncTaskInfo! @deprecated

}

`, BuiltIn: false},
	{Name: "../schema/service.data.transfer.graphqls", Input: `# Data transfer queries

type DataTransferProcessorInfo {
    id: ID!
    name: String
    description: String
    fileExtension: String
    appFileExtension: String
    appName: String
    order: Int!
    icon: String
    properties: [ ObjectPropertyInfo ]
    isBinary: Boolean
    isHTML: Boolean
}

input DataTransferParameters {
    # Processor ID
    processorId: ID!
    # General settings:
    #   - openNewConnection: opens new database connection for data transfer task
    settings: Object
    # Processor properties. See DataTransferProcessorInfo.properties
    processorProperties: Object!
    # Data filter settings
    filter: SQLDataFilter
}

extend type Query {

    # Available transfer processors
    dataTransferAvailableStreamProcessors: [ DataTransferProcessorInfo! ]!

    dataTransferExportDataFromContainer(
        connectionId: ID!,
        containerNodePath: ID!,
        parameters: DataTransferParameters!
    ): AsyncTaskInfo!

    dataTransferExportDataFromResults(
        connectionId: ID!,
        contextId: ID!,
        resultsId: ID!,
        parameters: DataTransferParameters!
    ): AsyncTaskInfo!

    dataTransferRemoveDataFile(dataFileId: String!): Boolean

}
`, BuiltIn: false},
	{Name: "../schema/service.metadata.graphqls", Input: `# Metadata queries

extend type Query {

    # Get child nodes
    metadataGetNodeDDL(nodeId: ID!, options: Object): String

}
`, BuiltIn: false},
	{Name: "../schema/service.navigator.graphqls", Input: `# Nodes, objects and properties

type ObjectDescriptor {
    id: Int
    displayName: String
    fullName: String
    uniqueName: String
    description: String
    value: String
}

input ObjectPropertyFilter {
    ids: [String!]
    features: [String!]
    categories: [String!]
    dataTypes: [String!]
}

type ObjectDetails {
    id: Int
    displayName: String
    description: String
    value: Object
}

type DatabaseObjectInfo {
    # Object name
    name: String
    # Description - optional
    description: String
    # Object type. Java class name in most cases
    type: String

    # Read object properties.
    # Optional parameter 'ids' filters properties by id. null means all properties.
    # Note: property value reading may take a lot of time so don't read all property values always
    # Examine property meta (features in particular) before reading them
    properties(filter: ObjectPropertyFilter): [ ObjectPropertyInfo ]

    # Optional properties

    ordinalPosition: Int
    fullyQualifiedName: String
    overloadedName: String
    uniqueName: String
    state: String

    # Features: script, scriptExtended, dataContainer, dataManipulator,
    # entity, schema, catalog
    features: [ String! ]

    # Supported editors: ddl, permissions, sourceDeclaration, sourceDefinition
    editors: [ String! ]
}

type NavigatorNodeInfo {
    # Node ID - generally a full path to the node from root of tree
    id: ID!
    # Node human readable name
    name: String
    #Node full name
    fullName: String
    # Node icon path
    icon: String
    # Node description
    description: String
    # Node type
    nodeType: String
    # Can this property have child nodes?
    hasChildren: Boolean

    # Associated object. Maybe null for non-database objects
    object: DatabaseObjectInfo

    # Supported features: item, container, leaf
    # canDelete, canRename
    features: [ String! ]

    # Object detailed info.
    # If is different than properties. It doesn't perform any expensive operation and doesn't require authentication.
    nodeDetails: [ ObjectPropertyInfo! ]

    folder: Boolean
    inline: Boolean
    navigable: Boolean
}

type DatabaseCatalog {
    catalog: NavigatorNodeInfo!
    schemaList: [ NavigatorNodeInfo! ]!
}

type DatabaseStructContainers {
    catalogList: [ DatabaseCatalog! ]!
    schemaList: [ NavigatorNodeInfo! ]!
    supportsCatalogChange: Boolean!
    supportsSchemaChange: Boolean!
}

####################################################
# Main API
####################################################

extend type Query {

    # Get child nodes
    navNodeChildren(
        parentPath: ID!,
        offset: Int,
        limit: Int,
        onlyFolders: Boolean): [ NavigatorNodeInfo! ]!

    # Get child nodes
    navNodeParents(nodePath: ID!): [ NavigatorNodeInfo! ]!

    navNodeInfo( nodePath: ID! ): NavigatorNodeInfo!

    navRefreshNode( nodePath: ID! ): Boolean

    # contextId currently not using
    navGetStructContainers( connectionId: ID!, contextId: ID, catalog: ID ): DatabaseStructContainers!

}

extend type Mutation {

    # Rename node and returns new node name
    navRenameNode( nodePath: ID!, newName: String! ): String

    # Deletes nodes with specified IDs and returns number of deleted nodes
    navDeleteNodes( nodePaths: [ID!]! ): Int

    # Moves nodes with specified IDs to the connection folder
    navMoveNodesToFolder(nodePaths: [ID!]!, folderPath: ID!): Boolean

}`, BuiltIn: false},
	{Name: "../schema/service.rm.graphqls", Input: `# Metadata queries

type RMProject {
    id: String!
    name: String!
    description: String
    shared: Boolean!

    createTime: DateTime!
    creator: String!
}

type RMResource {
    name: String!
    folder: Boolean!
    length: Int!
}

extend type Query {

    # List accessible projects
    rmListProjects: [RMProject!]!

    # List accessible projects
    rmListResources(
        projectId: String!,
        folder: String,
        nameMask: String,
        readProperties: Boolean,
        readHistory: Boolean): [RMResource!]!

    # Reads resource contents as string in UTF-8
    rmReadResourceAsString(
        projectId: String!,
        resourcePath: String!): String!

}

extend type Mutation {

    rmCreateResource(
        projectId: String!,
        resourcePath: String!,
        isFolder: Boolean!): String!

    rmMoveResource(
        projectId: String!,
        oldResourcePath: String!,
        newResourcePath: String): String!

    rmDeleteResource(
        projectId: String!,
        resourcePath: String!,
        recursive: Boolean!): Boolean

    rmWriteResourceStringContent(
        projectId: String!,
        resourcePath: String!,
        data: String!): String!
}`, BuiltIn: false},
	{Name: "../schema/service.sql.graphqls", Input: `####################################################
# SQL helpers
####################################################

type SQLDialectInfo {
    name: String!

    dataTypes: [ String ]!
    functions: [ String ]!
    reservedWords: [ String ]!
    quoteStrings: [ [ String ] ]!
    singleLineComments: [ String ]!
    multiLineComments: [ [ String ] ]!

    catalogSeparator: String
    structSeparator: String
    scriptDelimiter: String

    supportsExplainExecutionPlan: Boolean!

}

type SQLCompletionProposal {
    displayString: String!
    type: String!
    score: Int

    replacementString: String!
    replacementOffset: Int!
    replacementLength: Int!
    cursorPosition: Int

    icon: String
    nodePath: String
}

####################################################
# Data read / SQL execution
####################################################

# SQL context must be created for each SQL editor
type SQLContextInfo {

    id: ID!
    connectionId: ID!
    defaultCatalog: String
    defaultSchema: String

}

input SQLDataFilterConstraint {
    attributePosition: Int!
    orderPosition: Int
    orderAsc: Boolean

    criteria: String
    operator: String
    value: Object
}

input SQLDataFilter {
    # Row offset. We use Float because offset may be bigger than 32 bit.
    offset: Float
    limit: Int

    constraints: [ SQLDataFilterConstraint ]
    where: String
    orderBy: String
}

type SQLResultColumn {
    position: Int!
    name: String
    label: String
    icon: String
    entityName: String

    dataKind: String
    typeName: String
    fullTypeName: String
    # Column value max length. We use Float because it may be bigger than 32 bit.
    maxLength: Float
    scale: Int
    precision: Int

    required: Boolean!

    readOnly: Boolean!
    readOnlyStatus: String

    # Operations supported for this attribute
    supportedOperations: [DataTypeLogicalOperation!]!
}

type DatabaseDocument {
    id: String
    contentType: String
    properties: Object
    data: Object
}

type SQLResultSet {
    id: ID!
    columns: [ SQLResultColumn ]
    rows: [ [ Object ] ]

    # True means that resultset was generated by single entity query
    # New rows can be added, old rows can be deleted
    singleEntity: Boolean!
    # server always returns hasMoreData = false
    hasMoreData: Boolean!
    # can't update data or load LOB file if hasRowIdentifier = false
    hasRowIdentifier: Boolean!
}

type SQLQueryResults {
    title: String
    updateRowCount: Float
    sourceQuery: String

    # Actual data format of this result
    dataFormat: ResultDataFormat

    resultSet: SQLResultSet
}

type SQLExecuteInfo {

    # Status message
    statusMessage: String
    # Execute time (ms)
    duration: Int!
    # Actual conditions applied to query
    filterText: String
    # Results
    results: [ SQLQueryResults! ]!
}

input SQLResultRow {
    data: [ Object ]!
    updateValues: Object
}

type DataTypeLogicalOperation {
    id: ID!
    expression: String!
    argumentCount: Int
}

####################################################
# SQL Execution plan
####################################################

type SQLExecutionPlan {
    query: String!
    nodes: [SQLExecutionPlanNode!]!
}

type SQLExecutionPlanNode {
    id: ID!
    parentId: ID

    kind: String!
    name: String
    type: String!
    condition: String
    description: String
    properties: [ObjectPropertyInfo!]!
}

####################################################
# SQL Generation
####################################################

type SQLQueryGenerator {
    id: String!
    label: String!
    description: String
    order: Int!
    multiObject: Boolean!
}

####################################################
# SQL Query info
####################################################
type SQLScriptInfo {
    queries: [ SQLScriptQuery! ]!
}

type SQLScriptQuery {
    start: Int!
    end: Int!
}
####################################################
# Query and Mutation
####################################################

extend type Query {

    sqlDialectInfo( connectionId: ID! ): SQLDialectInfo

    # Lists SQL contexts for a connection (optional) or returns the particular context info
    sqlListContexts( connectionId: ID, contextId: ID ): [ SQLContextInfo ]!

    sqlCompletionProposals(
        connectionId: ID!,
        contextId: ID!,
        query: String!,
        position: Int!,
        maxResults: Int,
        simpleMode: Boolean
    ): [ SQLCompletionProposal ]

    sqlFormatQuery(
        connectionId: ID!,
        contextId: ID!,
        query: String!
    ): String!

    sqlSupportedOperations(
        connectionId: ID!,
        contextId: ID!,
        resultsId: ID!,
        attributeIndex: Int!
    ): [DataTypeLogicalOperation!]!

    # List of all available entity query generators
    sqlEntityQueryGenerators(nodePathList: [String!]!
    ): [SQLQueryGenerator!]!

    # Options:
    # fullyQualifiedNames: Boolean
    # compactSQL: Boolean
    # showComments: Boolean
    # showPermissions: Boolean
    # showFullDdl: Boolean
    # excludeAutoGeneratedColumn: Boolean
    # useCustomDataFormat: Boolean
    sqlGenerateEntityQuery(
        generatorId: String!,
        options: Object!,
        nodePathList: [String!]!
    ): String!

    sqlParseScript(
        connectionId: ID!,
        script: String!
    ): SQLScriptInfo!

    sqlParseQuery(
        connectionId: ID!,
        script: String!,
        position: Int!
    ): SQLScriptQuery!
}

extend type Mutation {
    sqlContextCreate( connectionId: ID!, defaultCatalog: String, defaultSchema: String ): SQLContextInfo!

    sqlContextSetDefaults( connectionId: ID!, contextId: ID!, defaultCatalog: ID, defaultSchema: ID ): Boolean!

    sqlContextDestroy( connectionId: ID!, contextId: ID! ): Boolean!

    # Execute SQL and return results
    asyncSqlExecuteQuery(
        connectionId: ID!,
        contextId: ID!,
        sql: String!,
        resultId: ID,
        filter: SQLDataFilter,
        dataFormat: ResultDataFormat    # requested data format. May be ignored by server
    ): AsyncTaskInfo!

    # Read data from table
    asyncReadDataFromContainer(
        connectionId: ID!,
        contextId: ID!,
        containerNodePath: ID!,
        resultId: ID,
        filter: SQLDataFilter,
        dataFormat: ResultDataFormat
    ): AsyncTaskInfo!

    # Close results (free resources)
    sqlResultClose(connectionId: ID!, contextId: ID!, resultId: ID!): Boolean!

    # Update multiple cell values
    updateResultsDataBatch(
        connectionId: ID!,
        contextId: ID!,
        resultsId: ID!,

        updatedRows: [ SQLResultRow! ],
        deletedRows: [ SQLResultRow! ],
        addedRows: [ SQLResultRow! ],
    ): SQLExecuteInfo!

    # Return SQL script for cell values update
    updateResultsDataBatchScript(
        connectionId: ID!,
        contextId: ID!,
        resultsId: ID!,

        updatedRows: [ SQLResultRow! ],
        deletedRows: [ SQLResultRow! ],
        addedRows: [ SQLResultRow! ],
    ): String!

    #Return BLOB name
    readLobValue(
        connectionId: ID!,
        contextId: ID!,
        resultsId: ID!,
        lobColumnIndex: Int!,
        row: [ SQLResultRow! ]!
    ): String!

    # Returns SQLExecuteInfo
    asyncSqlExecuteResults(taskId: ID!): SQLExecuteInfo !

    # Read data from table
    asyncSqlExplainExecutionPlan(
        connectionId: ID!,
        contextId: ID!,
        query: String!,
        configuration: Object!
    ): AsyncTaskInfo!

    # Returns SQLExecutionPlan
    asyncSqlExplainExecutionPlanResult(taskId: ID!): SQLExecutionPlan !

}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_DatabaseObjectInfo_properties_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ObjectPropertyFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg0, err = ec.unmarshalOObjectPropertyFilter2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_asyncReadDataFromContainer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["containerNodePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("containerNodePath"))
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["containerNodePath"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["resultId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resultId"))
		arg3, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resultId"] = arg3
	var arg4 *model.SQLDataFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOSQLDataFilter2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLDataFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	var arg5 *model.ResultDataFormat
	if tmp, ok := rawArgs["dataFormat"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataFormat"))
		arg5, err = ec.unmarshalOResultDataFormat2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐResultDataFormat(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataFormat"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_asyncSqlExecuteQuery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["sql"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sql"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["sql"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["resultId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resultId"))
		arg3, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resultId"] = arg3
	var arg4 *model.SQLDataFilter
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg4, err = ec.unmarshalOSQLDataFilter2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLDataFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg4
	var arg5 *model.ResultDataFormat
	if tmp, ok := rawArgs["dataFormat"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataFormat"))
		arg5, err = ec.unmarshalOResultDataFormat2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐResultDataFormat(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataFormat"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_asyncSqlExecuteResults_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["taskId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taskId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["taskId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_asyncSqlExplainExecutionPlanResult_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["taskId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("taskId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["taskId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_asyncSqlExplainExecutionPlan_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg2
	var arg3 interface{}
	if tmp, ok := rawArgs["configuration"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configuration"))
		arg3, err = ec.unmarshalNObject2interface(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["configuration"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_asyncTaskCancel_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_asyncTaskInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["removeOnFinish"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("removeOnFinish"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["removeOnFinish"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_asyncTaskStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_changeSessionLanguage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["locale"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locale"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locale"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_closeConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_copyConnectionFromNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nodePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodePath"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nodePath"] = arg0
	var arg1 *model.ConnectionConfig
	if tmp, ok := rawArgs["config"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
		arg1, err = ec.unmarshalOConnectionConfig2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionConfig(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["config"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createConnectionFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["parentFolderPath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentFolderPath"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["parentFolderPath"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["folderName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folderName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["folderName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createConnectionFromTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["templateId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["templateId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["connectionName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionName"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConnectionConfig
	if tmp, ok := rawArgs["config"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
		arg0, err = ec.unmarshalNConnectionConfig2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionConfig(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["config"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteConnectionFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["folderPath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folderPath"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["folderPath"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_initConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 interface{}
	if tmp, ok := rawArgs["credentials"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credentials"))
		arg1, err = ec.unmarshalOObject2interface(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["credentials"] = arg1
	var arg2 []*model.NetworkHandlerConfigInput
	if tmp, ok := rawArgs["networkCredentials"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("networkCredentials"))
		arg2, err = ec.unmarshalONetworkHandlerConfigInput2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerConfigInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["networkCredentials"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["saveCredentials"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveCredentials"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["saveCredentials"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_navDeleteNodes_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["nodePaths"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodePaths"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nodePaths"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_navMoveNodesToFolder_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["nodePaths"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodePaths"))
		arg0, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nodePaths"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["folderPath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folderPath"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["folderPath"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_navRenameNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nodePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodePath"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nodePath"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["newName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_openConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConnectionConfig
	if tmp, ok := rawArgs["config"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
		arg0, err = ec.unmarshalNConnectionConfig2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionConfig(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["config"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_openSession_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["defaultLocale"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultLocale"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["defaultLocale"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_readLobValue_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["resultsId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resultsId"))
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resultsId"] = arg2
	var arg3 int
	if tmp, ok := rawArgs["lobColumnIndex"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lobColumnIndex"))
		arg3, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["lobColumnIndex"] = arg3
	var arg4 []*model.SQLResultRow
	if tmp, ok := rawArgs["row"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("row"))
		arg4, err = ec.unmarshalNSQLResultRow2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultRowᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["row"] = arg4
	return args, nil
}

func (ec *executionContext) field_Mutation_rmCreateResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["resourcePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourcePath"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resourcePath"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["isFolder"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isFolder"))
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isFolder"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_rmDeleteResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["resourcePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourcePath"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resourcePath"] = arg1
	var arg2 bool
	if tmp, ok := rawArgs["recursive"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("recursive"))
		arg2, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["recursive"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_rmMoveResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["oldResourcePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oldResourcePath"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["oldResourcePath"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["newResourcePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newResourcePath"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newResourcePath"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_rmWriteResourceStringContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["resourcePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourcePath"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resourcePath"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_setConnectionNavigatorSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.NavigatorSettingsInput
	if tmp, ok := rawArgs["settings"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settings"))
		arg1, err = ec.unmarshalNNavigatorSettingsInput2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorSettingsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["settings"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_setUserConfigurationParameter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 interface{}
	if tmp, ok := rawArgs["value"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
		arg1, err = ec.unmarshalOObject2interface(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["value"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_sqlContextCreate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["defaultCatalog"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultCatalog"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["defaultCatalog"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["defaultSchema"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultSchema"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["defaultSchema"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_sqlContextDestroy_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_sqlContextSetDefaults_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["defaultCatalog"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultCatalog"))
		arg2, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["defaultCatalog"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["defaultSchema"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultSchema"))
		arg3, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["defaultSchema"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_sqlResultClose_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["resultId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resultId"))
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resultId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_testConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConnectionConfig
	if tmp, ok := rawArgs["config"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
		arg0, err = ec.unmarshalNConnectionConfig2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionConfig(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["config"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_testNetworkHandler_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NetworkHandlerConfigInput
	if tmp, ok := rawArgs["config"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
		arg0, err = ec.unmarshalNNetworkHandlerConfigInput2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerConfigInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["config"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateConnection_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConnectionConfig
	if tmp, ok := rawArgs["config"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
		arg0, err = ec.unmarshalNConnectionConfig2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionConfig(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["config"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateResultsDataBatchScript_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["resultsId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resultsId"))
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resultsId"] = arg2
	var arg3 []*model.SQLResultRow
	if tmp, ok := rawArgs["updatedRows"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedRows"))
		arg3, err = ec.unmarshalOSQLResultRow2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultRowᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["updatedRows"] = arg3
	var arg4 []*model.SQLResultRow
	if tmp, ok := rawArgs["deletedRows"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedRows"))
		arg4, err = ec.unmarshalOSQLResultRow2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultRowᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deletedRows"] = arg4
	var arg5 []*model.SQLResultRow
	if tmp, ok := rawArgs["addedRows"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addedRows"))
		arg5, err = ec.unmarshalOSQLResultRow2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultRowᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addedRows"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_updateResultsDataBatch_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["resultsId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resultsId"))
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resultsId"] = arg2
	var arg3 []*model.SQLResultRow
	if tmp, ok := rawArgs["updatedRows"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedRows"))
		arg3, err = ec.unmarshalOSQLResultRow2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultRowᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["updatedRows"] = arg3
	var arg4 []*model.SQLResultRow
	if tmp, ok := rawArgs["deletedRows"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedRows"))
		arg4, err = ec.unmarshalOSQLResultRow2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultRowᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["deletedRows"] = arg4
	var arg5 []*model.SQLResultRow
	if tmp, ok := rawArgs["addedRows"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("addedRows"))
		arg5, err = ec.unmarshalOSQLResultRow2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultRowᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["addedRows"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_allConnections_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_authChangeLocalPassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["oldPassword"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oldPassword"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["oldPassword"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["newPassword"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newPassword"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newPassword"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_authLogin_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["provider"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["provider"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["configuration"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configuration"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["configuration"] = arg1
	var arg2 interface{}
	if tmp, ok := rawArgs["credentials"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credentials"))
		arg2, err = ec.unmarshalOObject2interface(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["credentials"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["linkUser"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linkUser"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["linkUser"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_authLogout_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["provider"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["provider"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["configuration"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configuration"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["configuration"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_authUpdateStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["authId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["authId"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["linkUser"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("linkUser"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["linkUser"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_configureServer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ServerConfigInput
	if tmp, ok := rawArgs["configuration"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("configuration"))
		arg0, err = ec.unmarshalNServerConfigInput2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerConfigInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["configuration"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_connectionFolders_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["path"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("path"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["path"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_connectionInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_connectionState_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_copyConnectionConfiguration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nodePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodePath"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nodePath"] = arg0
	var arg1 *model.ConnectionConfig
	if tmp, ok := rawArgs["config"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
		arg1, err = ec.unmarshalOConnectionConfig2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionConfig(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["config"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_createConnectionConfiguration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConnectionConfig
	if tmp, ok := rawArgs["config"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
		arg0, err = ec.unmarshalNConnectionConfig2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionConfig(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["config"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_createRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["roleId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["roleName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleName"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleName"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["description"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["description"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_dataTransferExportDataFromContainer_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["containerNodePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("containerNodePath"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["containerNodePath"] = arg1
	var arg2 model.DataTransferParameters
	if tmp, ok := rawArgs["parameters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parameters"))
		arg2, err = ec.unmarshalNDataTransferParameters2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDataTransferParameters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["parameters"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_dataTransferExportDataFromResults_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["resultsId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resultsId"))
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resultsId"] = arg2
	var arg3 model.DataTransferParameters
	if tmp, ok := rawArgs["parameters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parameters"))
		arg3, err = ec.unmarshalNDataTransferParameters2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDataTransferParameters(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["parameters"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_dataTransferRemoveDataFile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dataFileId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataFileId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataFileId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_deleteAuthProviderConfiguration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_deleteConnectionConfiguration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_deleteRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["roleId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_deleteUserMetaParameter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_deleteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_driverList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_enableUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["enabled"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["enabled"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getConnectionSubjectAccess_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSubjectConnectionAccess_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["subjectId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subjectId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subjectId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_grantUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["roleId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_listAuthProviderConfigurationParameters_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["providerId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["providerId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listAuthProviderConfigurations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["providerId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["providerId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listRoles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["roleId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_listUsers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_metadataGetNodeDDL_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nodeId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodeId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nodeId"] = arg0
	var arg1 interface{}
	if tmp, ok := rawArgs["options"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("options"))
		arg1, err = ec.unmarshalOObject2interface(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["options"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_navGetStructContainers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["catalog"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("catalog"))
		arg2, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["catalog"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_navNodeChildren_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["parentPath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentPath"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["parentPath"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["onlyFolders"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("onlyFolders"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["onlyFolders"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_navNodeInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nodePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodePath"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nodePath"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_navNodeParents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nodePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodePath"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nodePath"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_navRefreshNode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["nodePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodePath"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nodePath"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_readSessionLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["maxEntries"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxEntries"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["maxEntries"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["clearEntries"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clearEntries"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["clearEntries"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_revokeUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["roleId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_rmListResources_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["folder"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folder"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["folder"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["nameMask"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nameMask"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nameMask"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["readProperties"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readProperties"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["readProperties"] = arg3
	var arg4 *bool
	if tmp, ok := rawArgs["readHistory"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readHistory"))
		arg4, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["readHistory"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_rmReadResourceAsString_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["projectId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("projectId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["projectId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["resourcePath"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourcePath"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resourcePath"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_saveAuthProviderConfiguration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["providerId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["providerId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["displayName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayName"] = arg2
	var arg3 *bool
	if tmp, ok := rawArgs["disabled"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabled"))
		arg3, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["disabled"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["iconURL"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iconURL"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["iconURL"] = arg4
	var arg5 *string
	if tmp, ok := rawArgs["description"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
		arg5, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["description"] = arg5
	var arg6 interface{}
	if tmp, ok := rawArgs["parameters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parameters"))
		arg6, err = ec.unmarshalOObject2interface(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["parameters"] = arg6
	return args, nil
}

func (ec *executionContext) field_Query_saveUserMetaParameter_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["displayName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["displayName"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["description"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["description"] = arg2
	var arg3 bool
	if tmp, ok := rawArgs["required"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("required"))
		arg3, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["required"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_searchConnections_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["hostNames"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostNames"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["hostNames"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_setConnectionSubjectAccess_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["subjects"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subjects"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subjects"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_setDefaultNavigatorSettings_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NavigatorSettingsInput
	if tmp, ok := rawArgs["settings"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settings"))
		arg0, err = ec.unmarshalNNavigatorSettingsInput2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorSettingsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["settings"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_setSubjectConnectionAccess_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subjectId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subjectId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subjectId"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["connections"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connections"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connections"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_setSubjectPermissions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["roleId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleId"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["permissions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("permissions"))
		arg1, err = ec.unmarshalNID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["permissions"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_setUserCredentials_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["providerId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["providerId"] = arg1
	var arg2 interface{}
	if tmp, ok := rawArgs["credentials"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credentials"))
		arg2, err = ec.unmarshalNObject2interface(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["credentials"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_setUserMetaParameterValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 interface{}
	if tmp, ok := rawArgs["parameters"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parameters"))
		arg1, err = ec.unmarshalNObject2interface(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["parameters"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_sqlCompletionProposals_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg2
	var arg3 int
	if tmp, ok := rawArgs["position"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
		arg3, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["position"] = arg3
	var arg4 *int
	if tmp, ok := rawArgs["maxResults"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("maxResults"))
		arg4, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["maxResults"] = arg4
	var arg5 *bool
	if tmp, ok := rawArgs["simpleMode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("simpleMode"))
		arg5, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["simpleMode"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_sqlDialectInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_sqlEntityQueryGenerators_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["nodePathList"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodePathList"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nodePathList"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_sqlFormatQuery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["query"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("query"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["query"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_sqlGenerateEntityQuery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["generatorId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("generatorId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["generatorId"] = arg0
	var arg1 interface{}
	if tmp, ok := rawArgs["options"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("options"))
		arg1, err = ec.unmarshalNObject2interface(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["options"] = arg1
	var arg2 []string
	if tmp, ok := rawArgs["nodePathList"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodePathList"))
		arg2, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nodePathList"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_sqlListContexts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_sqlParseQuery_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["script"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("script"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["script"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["position"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["position"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_sqlParseScript_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["script"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("script"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["script"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_sqlSupportedOperations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["connectionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["connectionId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["contextId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contextId"))
		arg1, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["contextId"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["resultsId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resultsId"))
		arg2, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["resultsId"] = arg2
	var arg3 int
	if tmp, ok := rawArgs["attributeIndex"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attributeIndex"))
		arg3, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["attributeIndex"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_updateConnectionConfiguration_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.ConnectionConfig
	if tmp, ok := rawArgs["config"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("config"))
		arg1, err = ec.unmarshalNConnectionConfig2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionConfig(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["config"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_updateRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["roleId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["roleName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleName"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleName"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["description"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["description"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_userConnections_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AdminAuthProviderConfiguration_providerId(ctx context.Context, field graphql.CollectedField, obj *model.AdminAuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuthProviderConfiguration_providerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuthProviderConfiguration_providerId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuthProviderConfiguration_id(ctx context.Context, field graphql.CollectedField, obj *model.AdminAuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuthProviderConfiguration_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuthProviderConfiguration_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuthProviderConfiguration_displayName(ctx context.Context, field graphql.CollectedField, obj *model.AdminAuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuthProviderConfiguration_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuthProviderConfiguration_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuthProviderConfiguration_disabled(ctx context.Context, field graphql.CollectedField, obj *model.AdminAuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuthProviderConfiguration_disabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Disabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuthProviderConfiguration_disabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuthProviderConfiguration_iconURL(ctx context.Context, field graphql.CollectedField, obj *model.AdminAuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuthProviderConfiguration_iconURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IconURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuthProviderConfiguration_iconURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuthProviderConfiguration_description(ctx context.Context, field graphql.CollectedField, obj *model.AdminAuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuthProviderConfiguration_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuthProviderConfiguration_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuthProviderConfiguration_parameters(ctx context.Context, field graphql.CollectedField, obj *model.AdminAuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuthProviderConfiguration_parameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuthProviderConfiguration_parameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuthProviderConfiguration_signInLink(ctx context.Context, field graphql.CollectedField, obj *model.AdminAuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuthProviderConfiguration_signInLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignInLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuthProviderConfiguration_signInLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuthProviderConfiguration_signOutLink(ctx context.Context, field graphql.CollectedField, obj *model.AdminAuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuthProviderConfiguration_signOutLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignOutLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuthProviderConfiguration_signOutLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuthProviderConfiguration_redirectLink(ctx context.Context, field graphql.CollectedField, obj *model.AdminAuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuthProviderConfiguration_redirectLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedirectLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuthProviderConfiguration_redirectLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminAuthProviderConfiguration_metadataLink(ctx context.Context, field graphql.CollectedField, obj *model.AdminAuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminAuthProviderConfiguration_metadataLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetadataLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminAuthProviderConfiguration_metadataLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminAuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminConnectionGrantInfo_connectionId(ctx context.Context, field graphql.CollectedField, obj *model.AdminConnectionGrantInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminConnectionGrantInfo_connectionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminConnectionGrantInfo_connectionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminConnectionGrantInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminConnectionGrantInfo_dataSourceId(ctx context.Context, field graphql.CollectedField, obj *model.AdminConnectionGrantInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminConnectionGrantInfo_dataSourceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataSourceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminConnectionGrantInfo_dataSourceId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminConnectionGrantInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminConnectionGrantInfo_subjectId(ctx context.Context, field graphql.CollectedField, obj *model.AdminConnectionGrantInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminConnectionGrantInfo_subjectId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubjectID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminConnectionGrantInfo_subjectId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminConnectionGrantInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminConnectionGrantInfo_subjectType(ctx context.Context, field graphql.CollectedField, obj *model.AdminConnectionGrantInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminConnectionGrantInfo_subjectType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubjectType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.AdminSubjectType)
	fc.Result = res
	return ec.marshalNAdminSubjectType2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminSubjectType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminConnectionGrantInfo_subjectType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminConnectionGrantInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AdminSubjectType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminConnectionSearchInfo_displayName(ctx context.Context, field graphql.CollectedField, obj *model.AdminConnectionSearchInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminConnectionSearchInfo_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminConnectionSearchInfo_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminConnectionSearchInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminConnectionSearchInfo_host(ctx context.Context, field graphql.CollectedField, obj *model.AdminConnectionSearchInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminConnectionSearchInfo_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminConnectionSearchInfo_host(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminConnectionSearchInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminConnectionSearchInfo_port(ctx context.Context, field graphql.CollectedField, obj *model.AdminConnectionSearchInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminConnectionSearchInfo_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminConnectionSearchInfo_port(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminConnectionSearchInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminConnectionSearchInfo_possibleDrivers(ctx context.Context, field graphql.CollectedField, obj *model.AdminConnectionSearchInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminConnectionSearchInfo_possibleDrivers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminConnectionSearchInfo_possibleDrivers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminConnectionSearchInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminConnectionSearchInfo_defaultDriver(ctx context.Context, field graphql.CollectedField, obj *model.AdminConnectionSearchInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminConnectionSearchInfo_defaultDriver(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultDriver, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminConnectionSearchInfo_defaultDriver(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminConnectionSearchInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminPermissionInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.AdminPermissionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminPermissionInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminPermissionInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminPermissionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminPermissionInfo_label(ctx context.Context, field graphql.CollectedField, obj *model.AdminPermissionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminPermissionInfo_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminPermissionInfo_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminPermissionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminPermissionInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.AdminPermissionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminPermissionInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminPermissionInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminPermissionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminPermissionInfo_provider(ctx context.Context, field graphql.CollectedField, obj *model.AdminPermissionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminPermissionInfo_provider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminPermissionInfo_provider(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminPermissionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminPermissionInfo_category(ctx context.Context, field graphql.CollectedField, obj *model.AdminPermissionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminPermissionInfo_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminPermissionInfo_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminPermissionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminRoleInfo_roleId(ctx context.Context, field graphql.CollectedField, obj *model.AdminRoleInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminRoleInfo_roleId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminRoleInfo_roleId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminRoleInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminRoleInfo_roleName(ctx context.Context, field graphql.CollectedField, obj *model.AdminRoleInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminRoleInfo_roleName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminRoleInfo_roleName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminRoleInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminRoleInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.AdminRoleInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminRoleInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminRoleInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminRoleInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminRoleInfo_grantedUsers(ctx context.Context, field graphql.CollectedField, obj *model.AdminRoleInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminRoleInfo_grantedUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrantedUsers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminRoleInfo_grantedUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminRoleInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminRoleInfo_grantedConnections(ctx context.Context, field graphql.CollectedField, obj *model.AdminRoleInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminRoleInfo_grantedConnections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrantedConnections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdminConnectionGrantInfo)
	fc.Result = res
	return ec.marshalNAdminConnectionGrantInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminConnectionGrantInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminRoleInfo_grantedConnections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminRoleInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "connectionId":
				return ec.fieldContext_AdminConnectionGrantInfo_connectionId(ctx, field)
			case "dataSourceId":
				return ec.fieldContext_AdminConnectionGrantInfo_dataSourceId(ctx, field)
			case "subjectId":
				return ec.fieldContext_AdminConnectionGrantInfo_subjectId(ctx, field)
			case "subjectType":
				return ec.fieldContext_AdminConnectionGrantInfo_subjectType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminConnectionGrantInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminRoleInfo_rolePermissions(ctx context.Context, field graphql.CollectedField, obj *model.AdminRoleInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminRoleInfo_rolePermissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RolePermissions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminRoleInfo_rolePermissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminRoleInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminUserInfo_userId(ctx context.Context, field graphql.CollectedField, obj *model.AdminUserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminUserInfo_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminUserInfo_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminUserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminUserInfo_metaParameters(ctx context.Context, field graphql.CollectedField, obj *model.AdminUserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminUserInfo_metaParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetaParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminUserInfo_metaParameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminUserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminUserInfo_configurationParameters(ctx context.Context, field graphql.CollectedField, obj *model.AdminUserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminUserInfo_configurationParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfigurationParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminUserInfo_configurationParameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminUserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminUserInfo_grantedRoles(ctx context.Context, field graphql.CollectedField, obj *model.AdminUserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminUserInfo_grantedRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrantedRoles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminUserInfo_grantedRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminUserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminUserInfo_grantedConnections(ctx context.Context, field graphql.CollectedField, obj *model.AdminUserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminUserInfo_grantedConnections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GrantedConnections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdminConnectionGrantInfo)
	fc.Result = res
	return ec.marshalNAdminConnectionGrantInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminConnectionGrantInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminUserInfo_grantedConnections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminUserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "connectionId":
				return ec.fieldContext_AdminConnectionGrantInfo_connectionId(ctx, field)
			case "dataSourceId":
				return ec.fieldContext_AdminConnectionGrantInfo_dataSourceId(ctx, field)
			case "subjectId":
				return ec.fieldContext_AdminConnectionGrantInfo_subjectId(ctx, field)
			case "subjectType":
				return ec.fieldContext_AdminConnectionGrantInfo_subjectType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminConnectionGrantInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminUserInfo_origins(ctx context.Context, field graphql.CollectedField, obj *model.AdminUserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminUserInfo_origins(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Origins, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectOrigin)
	fc.Result = res
	return ec.marshalNObjectOrigin2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectOriginᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminUserInfo_origins(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminUserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ObjectOrigin_type(ctx, field)
			case "subType":
				return ec.fieldContext_ObjectOrigin_subType(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectOrigin_displayName(ctx, field)
			case "icon":
				return ec.fieldContext_ObjectOrigin_icon(ctx, field)
			case "configuration":
				return ec.fieldContext_ObjectOrigin_configuration(ctx, field)
			case "details":
				return ec.fieldContext_ObjectOrigin_details(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectOrigin", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminUserInfo_linkedAuthProviders(ctx context.Context, field graphql.CollectedField, obj *model.AdminUserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminUserInfo_linkedAuthProviders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkedAuthProviders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminUserInfo_linkedAuthProviders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminUserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AdminUserInfo_enabled(ctx context.Context, field graphql.CollectedField, obj *model.AdminUserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AdminUserInfo_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AdminUserInfo_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AdminUserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AsyncTaskInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.AsyncTaskInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AsyncTaskInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AsyncTaskInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AsyncTaskInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AsyncTaskInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.AsyncTaskInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AsyncTaskInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AsyncTaskInfo_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AsyncTaskInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AsyncTaskInfo_running(ctx context.Context, field graphql.CollectedField, obj *model.AsyncTaskInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AsyncTaskInfo_running(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Running, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AsyncTaskInfo_running(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AsyncTaskInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AsyncTaskInfo_status(ctx context.Context, field graphql.CollectedField, obj *model.AsyncTaskInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AsyncTaskInfo_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AsyncTaskInfo_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AsyncTaskInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AsyncTaskInfo_error(ctx context.Context, field graphql.CollectedField, obj *model.AsyncTaskInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AsyncTaskInfo_error(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Error, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ServerError)
	fc.Result = res
	return ec.marshalOServerError2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerError(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AsyncTaskInfo_error(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AsyncTaskInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_ServerError_message(ctx, field)
			case "errorCode":
				return ec.fieldContext_ServerError_errorCode(ctx, field)
			case "errorType":
				return ec.fieldContext_ServerError_errorType(ctx, field)
			case "stackTrace":
				return ec.fieldContext_ServerError_stackTrace(ctx, field)
			case "causedBy":
				return ec.fieldContext_ServerError_causedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServerError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AsyncTaskInfo_result(ctx context.Context, field graphql.CollectedField, obj *model.AsyncTaskInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AsyncTaskInfo_result(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Result, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SQLExecuteInfo)
	fc.Result = res
	return ec.marshalOSQLExecuteInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecuteInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AsyncTaskInfo_result(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AsyncTaskInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "statusMessage":
				return ec.fieldContext_SQLExecuteInfo_statusMessage(ctx, field)
			case "duration":
				return ec.fieldContext_SQLExecuteInfo_duration(ctx, field)
			case "filterText":
				return ec.fieldContext_SQLExecuteInfo_filterText(ctx, field)
			case "results":
				return ec.fieldContext_SQLExecuteInfo_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLExecuteInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AsyncTaskInfo_taskResult(ctx context.Context, field graphql.CollectedField, obj *model.AsyncTaskInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AsyncTaskInfo_taskResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TaskResult, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AsyncTaskInfo_taskResult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AsyncTaskInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthCredentialInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.AuthCredentialInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthCredentialInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthCredentialInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthCredentialInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthCredentialInfo_displayName(ctx context.Context, field graphql.CollectedField, obj *model.AuthCredentialInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthCredentialInfo_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthCredentialInfo_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthCredentialInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthCredentialInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.AuthCredentialInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthCredentialInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthCredentialInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthCredentialInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthCredentialInfo_admin(ctx context.Context, field graphql.CollectedField, obj *model.AuthCredentialInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthCredentialInfo_admin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Admin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthCredentialInfo_admin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthCredentialInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthCredentialInfo_user(ctx context.Context, field graphql.CollectedField, obj *model.AuthCredentialInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthCredentialInfo_user(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthCredentialInfo_user(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthCredentialInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthCredentialInfo_identifying(ctx context.Context, field graphql.CollectedField, obj *model.AuthCredentialInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthCredentialInfo_identifying(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Identifying, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthCredentialInfo_identifying(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthCredentialInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthCredentialInfo_possibleValues(ctx context.Context, field graphql.CollectedField, obj *model.AuthCredentialInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthCredentialInfo_possibleValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthCredentialInfo_possibleValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthCredentialInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthCredentialInfo_encryption(ctx context.Context, field graphql.CollectedField, obj *model.AuthCredentialInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthCredentialInfo_encryption(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Encryption, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AuthCredentialEncryption)
	fc.Result = res
	return ec.marshalOAuthCredentialEncryption2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthCredentialEncryption(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthCredentialInfo_encryption(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthCredentialInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AuthCredentialEncryption does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthInfo_redirectLink(ctx context.Context, field graphql.CollectedField, obj *model.AuthInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthInfo_redirectLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedirectLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthInfo_redirectLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthInfo_authId(ctx context.Context, field graphql.CollectedField, obj *model.AuthInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthInfo_authId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthInfo_authId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthInfo_authStatus(ctx context.Context, field graphql.CollectedField, obj *model.AuthInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthInfo_authStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.AuthStatus)
	fc.Result = res
	return ec.marshalNAuthStatus2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthInfo_authStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type AuthStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthInfo_userTokens(ctx context.Context, field graphql.CollectedField, obj *model.AuthInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthInfo_userTokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserTokens, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserAuthToken)
	fc.Result = res
	return ec.marshalOUserAuthToken2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐUserAuthTokenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthInfo_userTokens(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "authProvider":
				return ec.fieldContext_UserAuthToken_authProvider(ctx, field)
			case "authConfiguration":
				return ec.fieldContext_UserAuthToken_authConfiguration(ctx, field)
			case "loginTime":
				return ec.fieldContext_UserAuthToken_loginTime(ctx, field)
			case "userId":
				return ec.fieldContext_UserAuthToken_userId(ctx, field)
			case "displayName":
				return ec.fieldContext_UserAuthToken_displayName(ctx, field)
			case "message":
				return ec.fieldContext_UserAuthToken_message(ctx, field)
			case "origin":
				return ec.fieldContext_UserAuthToken_origin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAuthToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderConfiguration_id(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderConfiguration_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderConfiguration_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderConfiguration_displayName(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderConfiguration_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderConfiguration_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderConfiguration_disabled(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderConfiguration_disabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Disabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderConfiguration_disabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderConfiguration_iconURL(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderConfiguration_iconURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IconURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderConfiguration_iconURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderConfiguration_description(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderConfiguration_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderConfiguration_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderConfiguration_signInLink(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderConfiguration_signInLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignInLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderConfiguration_signInLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderConfiguration_signOutLink(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderConfiguration_signOutLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SignOutLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderConfiguration_signOutLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderConfiguration_metadataLink(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderConfiguration) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderConfiguration_metadataLink(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetadataLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderConfiguration_metadataLink(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderConfiguration",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderCredentialsProfile_id(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderCredentialsProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderCredentialsProfile_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderCredentialsProfile_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderCredentialsProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderCredentialsProfile_label(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderCredentialsProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderCredentialsProfile_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderCredentialsProfile_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderCredentialsProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderCredentialsProfile_description(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderCredentialsProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderCredentialsProfile_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderCredentialsProfile_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderCredentialsProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderCredentialsProfile_credentialParameters(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderCredentialsProfile) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderCredentialsProfile_credentialParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CredentialParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AuthCredentialInfo)
	fc.Result = res
	return ec.marshalNAuthCredentialInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthCredentialInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderCredentialsProfile_credentialParameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderCredentialsProfile",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuthCredentialInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_AuthCredentialInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_AuthCredentialInfo_description(ctx, field)
			case "admin":
				return ec.fieldContext_AuthCredentialInfo_admin(ctx, field)
			case "user":
				return ec.fieldContext_AuthCredentialInfo_user(ctx, field)
			case "identifying":
				return ec.fieldContext_AuthCredentialInfo_identifying(ctx, field)
			case "possibleValues":
				return ec.fieldContext_AuthCredentialInfo_possibleValues(ctx, field)
			case "encryption":
				return ec.fieldContext_AuthCredentialInfo_encryption(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthCredentialInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderInfo_label(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderInfo_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderInfo_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderInfo_icon(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderInfo_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderInfo_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderInfo_defaultProvider(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderInfo_defaultProvider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultProvider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderInfo_defaultProvider(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderInfo_configurable(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderInfo_configurable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Configurable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderInfo_configurable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderInfo_configurations(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderInfo_configurations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Configurations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AuthProviderConfiguration)
	fc.Result = res
	return ec.marshalOAuthProviderConfiguration2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthProviderConfigurationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderInfo_configurations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuthProviderConfiguration_id(ctx, field)
			case "displayName":
				return ec.fieldContext_AuthProviderConfiguration_displayName(ctx, field)
			case "disabled":
				return ec.fieldContext_AuthProviderConfiguration_disabled(ctx, field)
			case "iconURL":
				return ec.fieldContext_AuthProviderConfiguration_iconURL(ctx, field)
			case "description":
				return ec.fieldContext_AuthProviderConfiguration_description(ctx, field)
			case "signInLink":
				return ec.fieldContext_AuthProviderConfiguration_signInLink(ctx, field)
			case "signOutLink":
				return ec.fieldContext_AuthProviderConfiguration_signOutLink(ctx, field)
			case "metadataLink":
				return ec.fieldContext_AuthProviderConfiguration_metadataLink(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthProviderConfiguration", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderInfo_credentialProfiles(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderInfo_credentialProfiles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CredentialProfiles, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AuthProviderCredentialsProfile)
	fc.Result = res
	return ec.marshalNAuthProviderCredentialsProfile2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthProviderCredentialsProfileᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderInfo_credentialProfiles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuthProviderCredentialsProfile_id(ctx, field)
			case "label":
				return ec.fieldContext_AuthProviderCredentialsProfile_label(ctx, field)
			case "description":
				return ec.fieldContext_AuthProviderCredentialsProfile_description(ctx, field)
			case "credentialParameters":
				return ec.fieldContext_AuthProviderCredentialsProfile_credentialParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthProviderCredentialsProfile", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _AuthProviderInfo_requiredFeatures(ctx context.Context, field graphql.CollectedField, obj *model.AuthProviderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_AuthProviderInfo_requiredFeatures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiredFeatures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_AuthProviderInfo_requiredFeatures(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "AuthProviderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionFolderInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionFolderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionFolderInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionFolderInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionFolderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionFolderInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionFolderInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionFolderInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionFolderInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionFolderInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_driverId(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_driverId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_driverId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_host(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_host(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Host, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_host(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_port(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_port(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_port(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_serverName(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_serverName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_serverName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_databaseName(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DatabaseName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_databaseName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_url(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_url(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_url(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_properties(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_template(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_template(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Template, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_template(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_connected(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_connected(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Connected, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_connected(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_provided(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_provided(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Provided, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_provided(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_readOnly(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadOnly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_readOnly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_useUrl(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UseURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_useUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_saveCredentials(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SaveCredentials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_saveCredentials(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_folder(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_folder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Folder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_folder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_nodePath(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_nodePath(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_connectTime(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_connectTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_connectionError(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionError, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ServerError)
	fc.Result = res
	return ec.marshalOServerError2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerError(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_connectionError(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_ServerError_message(ctx, field)
			case "errorCode":
				return ec.fieldContext_ServerError_errorCode(ctx, field)
			case "errorType":
				return ec.fieldContext_ServerError_errorType(ctx, field)
			case "stackTrace":
				return ec.fieldContext_ServerError_stackTrace(ctx, field)
			case "causedBy":
				return ec.fieldContext_ServerError_causedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServerError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_serverVersion(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_serverVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_clientVersion(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_clientVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_origin(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_origin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Origin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectOrigin)
	fc.Result = res
	return ec.marshalNObjectOrigin2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectOrigin(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_origin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ObjectOrigin_type(ctx, field)
			case "subType":
				return ec.fieldContext_ObjectOrigin_subType(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectOrigin_displayName(ctx, field)
			case "icon":
				return ec.fieldContext_ObjectOrigin_icon(ctx, field)
			case "configuration":
				return ec.fieldContext_ObjectOrigin_configuration(ctx, field)
			case "details":
				return ec.fieldContext_ObjectOrigin_details(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectOrigin", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_authNeeded(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthNeeded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_authNeeded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_authModel(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_authModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_authModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_authProperties(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthProperties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalNObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_authProperties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_providerProperties(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderProperties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_providerProperties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_networkHandlersConfig(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NetworkHandlersConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.NetworkHandlerConfig)
	fc.Result = res
	return ec.marshalNNetworkHandlerConfig2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerConfigᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_networkHandlersConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NetworkHandlerConfig_id(ctx, field)
			case "enabled":
				return ec.fieldContext_NetworkHandlerConfig_enabled(ctx, field)
			case "authType":
				return ec.fieldContext_NetworkHandlerConfig_authType(ctx, field)
			case "userName":
				return ec.fieldContext_NetworkHandlerConfig_userName(ctx, field)
			case "password":
				return ec.fieldContext_NetworkHandlerConfig_password(ctx, field)
			case "key":
				return ec.fieldContext_NetworkHandlerConfig_key(ctx, field)
			case "savePassword":
				return ec.fieldContext_NetworkHandlerConfig_savePassword(ctx, field)
			case "properties":
				return ec.fieldContext_NetworkHandlerConfig_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NetworkHandlerConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_features(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_features(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Features, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_features(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_navigatorSettings(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NavigatorSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NavigatorSettings)
	fc.Result = res
	return ec.marshalNNavigatorSettings2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_navigatorSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "showSystemObjects":
				return ec.fieldContext_NavigatorSettings_showSystemObjects(ctx, field)
			case "showUtilityObjects":
				return ec.fieldContext_NavigatorSettings_showUtilityObjects(ctx, field)
			case "showOnlyEntities":
				return ec.fieldContext_NavigatorSettings_showOnlyEntities(ctx, field)
			case "mergeEntities":
				return ec.fieldContext_NavigatorSettings_mergeEntities(ctx, field)
			case "hideFolders":
				return ec.fieldContext_NavigatorSettings_hideFolders(ctx, field)
			case "hideSchemas":
				return ec.fieldContext_NavigatorSettings_hideSchemas(ctx, field)
			case "hideVirtualModel":
				return ec.fieldContext_NavigatorSettings_hideVirtualModel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NavigatorSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionInfo_supportedDataFormats(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportedDataFormats, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]model.ResultDataFormat)
	fc.Result = res
	return ec.marshalNResultDataFormat2ᚕgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐResultDataFormatᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionInfo_supportedDataFormats(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ResultDataFormat does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTransferProcessorInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.DataTransferProcessorInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTransferProcessorInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTransferProcessorInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTransferProcessorInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTransferProcessorInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.DataTransferProcessorInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTransferProcessorInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTransferProcessorInfo_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTransferProcessorInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTransferProcessorInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.DataTransferProcessorInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTransferProcessorInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTransferProcessorInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTransferProcessorInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTransferProcessorInfo_fileExtension(ctx context.Context, field graphql.CollectedField, obj *model.DataTransferProcessorInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTransferProcessorInfo_fileExtension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileExtension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTransferProcessorInfo_fileExtension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTransferProcessorInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTransferProcessorInfo_appFileExtension(ctx context.Context, field graphql.CollectedField, obj *model.DataTransferProcessorInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTransferProcessorInfo_appFileExtension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppFileExtension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTransferProcessorInfo_appFileExtension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTransferProcessorInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTransferProcessorInfo_appName(ctx context.Context, field graphql.CollectedField, obj *model.DataTransferProcessorInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTransferProcessorInfo_appName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTransferProcessorInfo_appName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTransferProcessorInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTransferProcessorInfo_order(ctx context.Context, field graphql.CollectedField, obj *model.DataTransferProcessorInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTransferProcessorInfo_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTransferProcessorInfo_order(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTransferProcessorInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTransferProcessorInfo_icon(ctx context.Context, field graphql.CollectedField, obj *model.DataTransferProcessorInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTransferProcessorInfo_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTransferProcessorInfo_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTransferProcessorInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTransferProcessorInfo_properties(ctx context.Context, field graphql.CollectedField, obj *model.DataTransferProcessorInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTransferProcessorInfo_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalOObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTransferProcessorInfo_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTransferProcessorInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTransferProcessorInfo_isBinary(ctx context.Context, field graphql.CollectedField, obj *model.DataTransferProcessorInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTransferProcessorInfo_isBinary(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsBinary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTransferProcessorInfo_isBinary(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTransferProcessorInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTransferProcessorInfo_isHTML(ctx context.Context, field graphql.CollectedField, obj *model.DataTransferProcessorInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTransferProcessorInfo_isHTML(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHTML, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTransferProcessorInfo_isHTML(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTransferProcessorInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTypeLogicalOperation_id(ctx context.Context, field graphql.CollectedField, obj *model.DataTypeLogicalOperation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTypeLogicalOperation_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTypeLogicalOperation_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTypeLogicalOperation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTypeLogicalOperation_expression(ctx context.Context, field graphql.CollectedField, obj *model.DataTypeLogicalOperation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTypeLogicalOperation_expression(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expression, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTypeLogicalOperation_expression(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTypeLogicalOperation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DataTypeLogicalOperation_argumentCount(ctx context.Context, field graphql.CollectedField, obj *model.DataTypeLogicalOperation) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DataTypeLogicalOperation_argumentCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArgumentCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DataTypeLogicalOperation_argumentCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DataTypeLogicalOperation",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseAuthModel_id(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseAuthModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseAuthModel_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseAuthModel_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseAuthModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseAuthModel_displayName(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseAuthModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseAuthModel_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseAuthModel_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseAuthModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseAuthModel_description(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseAuthModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseAuthModel_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseAuthModel_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseAuthModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseAuthModel_icon(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseAuthModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseAuthModel_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseAuthModel_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseAuthModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseAuthModel_requiresLocalConfiguration(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseAuthModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseAuthModel_requiresLocalConfiguration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiresLocalConfiguration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseAuthModel_requiresLocalConfiguration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseAuthModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseAuthModel_properties(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseAuthModel) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseAuthModel_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalNObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseAuthModel_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseAuthModel",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseCatalog_catalog(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseCatalog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseCatalog_catalog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Catalog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NavigatorNodeInfo)
	fc.Result = res
	return ec.marshalNNavigatorNodeInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorNodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseCatalog_catalog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseCatalog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NavigatorNodeInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_NavigatorNodeInfo_name(ctx, field)
			case "fullName":
				return ec.fieldContext_NavigatorNodeInfo_fullName(ctx, field)
			case "icon":
				return ec.fieldContext_NavigatorNodeInfo_icon(ctx, field)
			case "description":
				return ec.fieldContext_NavigatorNodeInfo_description(ctx, field)
			case "nodeType":
				return ec.fieldContext_NavigatorNodeInfo_nodeType(ctx, field)
			case "hasChildren":
				return ec.fieldContext_NavigatorNodeInfo_hasChildren(ctx, field)
			case "object":
				return ec.fieldContext_NavigatorNodeInfo_object(ctx, field)
			case "features":
				return ec.fieldContext_NavigatorNodeInfo_features(ctx, field)
			case "nodeDetails":
				return ec.fieldContext_NavigatorNodeInfo_nodeDetails(ctx, field)
			case "folder":
				return ec.fieldContext_NavigatorNodeInfo_folder(ctx, field)
			case "inline":
				return ec.fieldContext_NavigatorNodeInfo_inline(ctx, field)
			case "navigable":
				return ec.fieldContext_NavigatorNodeInfo_navigable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NavigatorNodeInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseCatalog_schemaList(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseCatalog) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseCatalog_schemaList(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SchemaList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.NavigatorNodeInfo)
	fc.Result = res
	return ec.marshalNNavigatorNodeInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorNodeInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseCatalog_schemaList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseCatalog",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NavigatorNodeInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_NavigatorNodeInfo_name(ctx, field)
			case "fullName":
				return ec.fieldContext_NavigatorNodeInfo_fullName(ctx, field)
			case "icon":
				return ec.fieldContext_NavigatorNodeInfo_icon(ctx, field)
			case "description":
				return ec.fieldContext_NavigatorNodeInfo_description(ctx, field)
			case "nodeType":
				return ec.fieldContext_NavigatorNodeInfo_nodeType(ctx, field)
			case "hasChildren":
				return ec.fieldContext_NavigatorNodeInfo_hasChildren(ctx, field)
			case "object":
				return ec.fieldContext_NavigatorNodeInfo_object(ctx, field)
			case "features":
				return ec.fieldContext_NavigatorNodeInfo_features(ctx, field)
			case "nodeDetails":
				return ec.fieldContext_NavigatorNodeInfo_nodeDetails(ctx, field)
			case "folder":
				return ec.fieldContext_NavigatorNodeInfo_folder(ctx, field)
			case "inline":
				return ec.fieldContext_NavigatorNodeInfo_inline(ctx, field)
			case "navigable":
				return ec.fieldContext_NavigatorNodeInfo_navigable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NavigatorNodeInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseDocument_id(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseDocument_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseDocument_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseDocument_contentType(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseDocument_contentType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseDocument_contentType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseDocument_properties(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseDocument_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseDocument_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseDocument_data(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseDocument) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseDocument_data(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseDocument_data(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseDocument",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseObjectInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseObjectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseObjectInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseObjectInfo_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseObjectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseObjectInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseObjectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseObjectInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseObjectInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseObjectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseObjectInfo_type(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseObjectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseObjectInfo_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseObjectInfo_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseObjectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseObjectInfo_properties(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseObjectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseObjectInfo_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalOObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseObjectInfo_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseObjectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DatabaseObjectInfo_properties_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseObjectInfo_ordinalPosition(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseObjectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseObjectInfo_ordinalPosition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrdinalPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseObjectInfo_ordinalPosition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseObjectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseObjectInfo_fullyQualifiedName(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseObjectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseObjectInfo_fullyQualifiedName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullyQualifiedName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseObjectInfo_fullyQualifiedName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseObjectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseObjectInfo_overloadedName(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseObjectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseObjectInfo_overloadedName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OverloadedName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseObjectInfo_overloadedName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseObjectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseObjectInfo_uniqueName(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseObjectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseObjectInfo_uniqueName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UniqueName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseObjectInfo_uniqueName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseObjectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseObjectInfo_state(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseObjectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseObjectInfo_state(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseObjectInfo_state(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseObjectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseObjectInfo_features(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseObjectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseObjectInfo_features(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Features, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseObjectInfo_features(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseObjectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseObjectInfo_editors(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseObjectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseObjectInfo_editors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Editors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseObjectInfo_editors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseObjectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseStructContainers_catalogList(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseStructContainers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseStructContainers_catalogList(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DatabaseCatalog)
	fc.Result = res
	return ec.marshalNDatabaseCatalog2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseCatalogᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseStructContainers_catalogList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseStructContainers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "catalog":
				return ec.fieldContext_DatabaseCatalog_catalog(ctx, field)
			case "schemaList":
				return ec.fieldContext_DatabaseCatalog_schemaList(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DatabaseCatalog", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseStructContainers_schemaList(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseStructContainers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseStructContainers_schemaList(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SchemaList, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.NavigatorNodeInfo)
	fc.Result = res
	return ec.marshalNNavigatorNodeInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorNodeInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseStructContainers_schemaList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseStructContainers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NavigatorNodeInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_NavigatorNodeInfo_name(ctx, field)
			case "fullName":
				return ec.fieldContext_NavigatorNodeInfo_fullName(ctx, field)
			case "icon":
				return ec.fieldContext_NavigatorNodeInfo_icon(ctx, field)
			case "description":
				return ec.fieldContext_NavigatorNodeInfo_description(ctx, field)
			case "nodeType":
				return ec.fieldContext_NavigatorNodeInfo_nodeType(ctx, field)
			case "hasChildren":
				return ec.fieldContext_NavigatorNodeInfo_hasChildren(ctx, field)
			case "object":
				return ec.fieldContext_NavigatorNodeInfo_object(ctx, field)
			case "features":
				return ec.fieldContext_NavigatorNodeInfo_features(ctx, field)
			case "nodeDetails":
				return ec.fieldContext_NavigatorNodeInfo_nodeDetails(ctx, field)
			case "folder":
				return ec.fieldContext_NavigatorNodeInfo_folder(ctx, field)
			case "inline":
				return ec.fieldContext_NavigatorNodeInfo_inline(ctx, field)
			case "navigable":
				return ec.fieldContext_NavigatorNodeInfo_navigable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NavigatorNodeInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseStructContainers_supportsCatalogChange(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseStructContainers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseStructContainers_supportsCatalogChange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportsCatalogChange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseStructContainers_supportsCatalogChange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseStructContainers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DatabaseStructContainers_supportsSchemaChange(ctx context.Context, field graphql.CollectedField, obj *model.DatabaseStructContainers) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DatabaseStructContainers_supportsSchemaChange(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportsSchemaChange, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DatabaseStructContainers_supportsSchemaChange(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DatabaseStructContainers",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_icon(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_iconBig(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_iconBig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IconBig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_iconBig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_providerId(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_providerId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_providerId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_driverClassName(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_driverClassName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverClassName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_driverClassName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_defaultHost(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_defaultHost(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultHost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_defaultHost(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_defaultPort(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_defaultPort(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_defaultPort(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_defaultDatabase(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_defaultDatabase(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultDatabase, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_defaultDatabase(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_defaultServer(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_defaultServer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultServer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_defaultServer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_defaultUser(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_defaultUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultUser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_defaultUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_sampleURL(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_sampleURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SampleURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_sampleURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_driverInfoURL(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_driverInfoURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverInfoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_driverInfoURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_driverPropertiesURL(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_driverPropertiesURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverPropertiesURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_driverPropertiesURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_embedded(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_embedded(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Embedded, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_embedded(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_enabled(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_requiresServerName(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_requiresServerName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequiresServerName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_requiresServerName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_allowsEmptyPassword(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_allowsEmptyPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowsEmptyPassword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_allowsEmptyPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_licenseRequired(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_licenseRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_licenseRequired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_license(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_license(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.License, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_license(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_custom(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_custom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Custom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_custom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_promotedScore(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_promotedScore(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PromotedScore, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_promotedScore(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_driverProperties(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_driverProperties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverProperties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalNObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_driverProperties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_driverParameters(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_driverParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DriverParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_driverParameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_providerProperties(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_providerProperties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderProperties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalNObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_providerProperties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_anonymousAccess(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_anonymousAccess(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnonymousAccess, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_anonymousAccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_defaultAuthModel(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_defaultAuthModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultAuthModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_defaultAuthModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_applicableAuthModels(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_applicableAuthModels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicableAuthModels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_applicableAuthModels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DriverInfo_applicableNetworkHandlers(ctx context.Context, field graphql.CollectedField, obj *model.DriverInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DriverInfo_applicableNetworkHandlers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicableNetworkHandlers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalNID2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DriverInfo_applicableNetworkHandlers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DriverInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_time(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalODateTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_type(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_message(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LogEntry_stackTrace(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LogEntry_stackTrace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StackTrace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LogEntry_stackTrace(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setUserConfigurationParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setUserConfigurationParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetUserConfigurationParameter(rctx, fc.Args["name"].(string),
			func() interface{} {
				if fc.Args["value"] == nil {
					return nil
				}
				return fc.Args["value"].(interface{})
			}())
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setUserConfigurationParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setUserConfigurationParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_openSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_openSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OpenSession(rctx, fc.Args["defaultLocale"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SessionInfo)
	fc.Result = res
	return ec.marshalNSessionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSessionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_openSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createTime":
				return ec.fieldContext_SessionInfo_createTime(ctx, field)
			case "lastAccessTime":
				return ec.fieldContext_SessionInfo_lastAccessTime(ctx, field)
			case "locale":
				return ec.fieldContext_SessionInfo_locale(ctx, field)
			case "cacheExpired":
				return ec.fieldContext_SessionInfo_cacheExpired(ctx, field)
			case "serverMessages":
				return ec.fieldContext_SessionInfo_serverMessages(ctx, field)
			case "connections":
				return ec.fieldContext_SessionInfo_connections(ctx, field)
			case "actionParameters":
				return ec.fieldContext_SessionInfo_actionParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SessionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_openSession_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_closeSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_closeSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CloseSession(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_closeSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_touchSession(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_touchSession(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TouchSession(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_touchSession(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_refreshSessionConnections(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_refreshSessionConnections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RefreshSessionConnections(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_refreshSessionConnections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_changeSessionLanguage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_changeSessionLanguage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ChangeSessionLanguage(rctx, fc.Args["locale"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_changeSessionLanguage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_changeSessionLanguage_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createConnection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createConnection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateConnection(rctx, fc.Args["config"].(model.ConnectionConfig))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createConnection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createConnection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateConnection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateConnection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConnection(rctx, fc.Args["config"].(model.ConnectionConfig))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateConnection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateConnection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteConnection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteConnection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConnection(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteConnection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteConnection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createConnectionFromTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createConnectionFromTemplate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateConnectionFromTemplate(rctx, fc.Args["templateId"].(string), fc.Args["connectionName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createConnectionFromTemplate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createConnectionFromTemplate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createConnectionFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createConnectionFolder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateConnectionFolder(rctx, fc.Args["parentFolderPath"].(*string), fc.Args["folderName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionFolderInfo)
	fc.Result = res
	return ec.marshalNConnectionFolderInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionFolderInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createConnectionFolder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionFolderInfo_id(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionFolderInfo_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionFolderInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createConnectionFolder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deleteConnectionFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deleteConnectionFolder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteConnectionFolder(rctx, fc.Args["folderPath"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deleteConnectionFolder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deleteConnectionFolder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_copyConnectionFromNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_copyConnectionFromNode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CopyConnectionFromNode(rctx, fc.Args["nodePath"].(string), fc.Args["config"].(*model.ConnectionConfig))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_copyConnectionFromNode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_copyConnectionFromNode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_testConnection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_testConnection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TestConnection(rctx, fc.Args["config"].(model.ConnectionConfig))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_testConnection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_testConnection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_testNetworkHandler(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_testNetworkHandler(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TestNetworkHandler(rctx, fc.Args["config"].(model.NetworkHandlerConfigInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NetworkEndpointInfo)
	fc.Result = res
	return ec.marshalNNetworkEndpointInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkEndpointInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_testNetworkHandler(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_NetworkEndpointInfo_message(ctx, field)
			case "clientVersion":
				return ec.fieldContext_NetworkEndpointInfo_clientVersion(ctx, field)
			case "serverVersion":
				return ec.fieldContext_NetworkEndpointInfo_serverVersion(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NetworkEndpointInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_testNetworkHandler_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_initConnection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_initConnection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InitConnection(rctx, fc.Args["id"].(string),
			func() interface{} {
				if fc.Args["credentials"] == nil {
					return nil
				}
				return fc.Args["credentials"].(interface{})
			}(), fc.Args["networkCredentials"].([]*model.NetworkHandlerConfigInput), fc.Args["saveCredentials"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_initConnection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_initConnection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_closeConnection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_closeConnection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CloseConnection(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_closeConnection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_closeConnection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setConnectionNavigatorSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setConnectionNavigatorSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetConnectionNavigatorSettings(rctx, fc.Args["id"].(string), fc.Args["settings"].(model.NavigatorSettingsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setConnectionNavigatorSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setConnectionNavigatorSettings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_asyncTaskCancel(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_asyncTaskCancel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AsyncTaskCancel(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_asyncTaskCancel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_asyncTaskCancel_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_asyncTaskInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_asyncTaskInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AsyncTaskInfo(rctx, fc.Args["id"].(string), fc.Args["removeOnFinish"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AsyncTaskInfo)
	fc.Result = res
	return ec.marshalNAsyncTaskInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAsyncTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_asyncTaskInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AsyncTaskInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_AsyncTaskInfo_name(ctx, field)
			case "running":
				return ec.fieldContext_AsyncTaskInfo_running(ctx, field)
			case "status":
				return ec.fieldContext_AsyncTaskInfo_status(ctx, field)
			case "error":
				return ec.fieldContext_AsyncTaskInfo_error(ctx, field)
			case "result":
				return ec.fieldContext_AsyncTaskInfo_result(ctx, field)
			case "taskResult":
				return ec.fieldContext_AsyncTaskInfo_taskResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AsyncTaskInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_asyncTaskInfo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_openConnection(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_openConnection(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OpenConnection(rctx, fc.Args["config"].(model.ConnectionConfig))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_openConnection(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_openConnection_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_asyncTaskStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_asyncTaskStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AsyncTaskStatus(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AsyncTaskInfo)
	fc.Result = res
	return ec.marshalNAsyncTaskInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAsyncTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_asyncTaskStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AsyncTaskInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_AsyncTaskInfo_name(ctx, field)
			case "running":
				return ec.fieldContext_AsyncTaskInfo_running(ctx, field)
			case "status":
				return ec.fieldContext_AsyncTaskInfo_status(ctx, field)
			case "error":
				return ec.fieldContext_AsyncTaskInfo_error(ctx, field)
			case "result":
				return ec.fieldContext_AsyncTaskInfo_result(ctx, field)
			case "taskResult":
				return ec.fieldContext_AsyncTaskInfo_taskResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AsyncTaskInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_asyncTaskStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_navRenameNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_navRenameNode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NavRenameNode(rctx, fc.Args["nodePath"].(string), fc.Args["newName"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_navRenameNode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_navRenameNode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_navDeleteNodes(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_navDeleteNodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NavDeleteNodes(rctx, fc.Args["nodePaths"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_navDeleteNodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_navDeleteNodes_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_navMoveNodesToFolder(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_navMoveNodesToFolder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NavMoveNodesToFolder(rctx, fc.Args["nodePaths"].([]string), fc.Args["folderPath"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_navMoveNodesToFolder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_navMoveNodesToFolder_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rmCreateResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rmCreateResource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RmCreateResource(rctx, fc.Args["projectId"].(string), fc.Args["resourcePath"].(string), fc.Args["isFolder"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rmCreateResource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rmCreateResource_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rmMoveResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rmMoveResource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RmMoveResource(rctx, fc.Args["projectId"].(string), fc.Args["oldResourcePath"].(string), fc.Args["newResourcePath"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rmMoveResource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rmMoveResource_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rmDeleteResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rmDeleteResource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RmDeleteResource(rctx, fc.Args["projectId"].(string), fc.Args["resourcePath"].(string), fc.Args["recursive"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rmDeleteResource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rmDeleteResource_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_rmWriteResourceStringContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_rmWriteResourceStringContent(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RmWriteResourceStringContent(rctx, fc.Args["projectId"].(string), fc.Args["resourcePath"].(string), fc.Args["data"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_rmWriteResourceStringContent(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_rmWriteResourceStringContent_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sqlContextCreate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sqlContextCreate(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SQLContextCreate(rctx, fc.Args["connectionId"].(string), fc.Args["defaultCatalog"].(*string), fc.Args["defaultSchema"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SQLContextInfo)
	fc.Result = res
	return ec.marshalNSQLContextInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLContextInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sqlContextCreate(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SQLContextInfo_id(ctx, field)
			case "connectionId":
				return ec.fieldContext_SQLContextInfo_connectionId(ctx, field)
			case "defaultCatalog":
				return ec.fieldContext_SQLContextInfo_defaultCatalog(ctx, field)
			case "defaultSchema":
				return ec.fieldContext_SQLContextInfo_defaultSchema(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLContextInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sqlContextCreate_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sqlContextSetDefaults(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sqlContextSetDefaults(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SQLContextSetDefaults(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string), fc.Args["defaultCatalog"].(*string), fc.Args["defaultSchema"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sqlContextSetDefaults(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sqlContextSetDefaults_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sqlContextDestroy(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sqlContextDestroy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SQLContextDestroy(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sqlContextDestroy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sqlContextDestroy_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_asyncSqlExecuteQuery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_asyncSqlExecuteQuery(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AsyncSQLExecuteQuery(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string), fc.Args["sql"].(string), fc.Args["resultId"].(*string), fc.Args["filter"].(*model.SQLDataFilter), fc.Args["dataFormat"].(*model.ResultDataFormat))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AsyncTaskInfo)
	fc.Result = res
	return ec.marshalNAsyncTaskInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAsyncTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_asyncSqlExecuteQuery(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AsyncTaskInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_AsyncTaskInfo_name(ctx, field)
			case "running":
				return ec.fieldContext_AsyncTaskInfo_running(ctx, field)
			case "status":
				return ec.fieldContext_AsyncTaskInfo_status(ctx, field)
			case "error":
				return ec.fieldContext_AsyncTaskInfo_error(ctx, field)
			case "result":
				return ec.fieldContext_AsyncTaskInfo_result(ctx, field)
			case "taskResult":
				return ec.fieldContext_AsyncTaskInfo_taskResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AsyncTaskInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_asyncSqlExecuteQuery_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_asyncReadDataFromContainer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_asyncReadDataFromContainer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AsyncReadDataFromContainer(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string), fc.Args["containerNodePath"].(string), fc.Args["resultId"].(*string), fc.Args["filter"].(*model.SQLDataFilter), fc.Args["dataFormat"].(*model.ResultDataFormat))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AsyncTaskInfo)
	fc.Result = res
	return ec.marshalNAsyncTaskInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAsyncTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_asyncReadDataFromContainer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AsyncTaskInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_AsyncTaskInfo_name(ctx, field)
			case "running":
				return ec.fieldContext_AsyncTaskInfo_running(ctx, field)
			case "status":
				return ec.fieldContext_AsyncTaskInfo_status(ctx, field)
			case "error":
				return ec.fieldContext_AsyncTaskInfo_error(ctx, field)
			case "result":
				return ec.fieldContext_AsyncTaskInfo_result(ctx, field)
			case "taskResult":
				return ec.fieldContext_AsyncTaskInfo_taskResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AsyncTaskInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_asyncReadDataFromContainer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_sqlResultClose(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_sqlResultClose(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SQLResultClose(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string), fc.Args["resultId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_sqlResultClose(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_sqlResultClose_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateResultsDataBatch(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateResultsDataBatch(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateResultsDataBatch(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string), fc.Args["resultsId"].(string), fc.Args["updatedRows"].([]*model.SQLResultRow), fc.Args["deletedRows"].([]*model.SQLResultRow), fc.Args["addedRows"].([]*model.SQLResultRow))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SQLExecuteInfo)
	fc.Result = res
	return ec.marshalNSQLExecuteInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecuteInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateResultsDataBatch(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "statusMessage":
				return ec.fieldContext_SQLExecuteInfo_statusMessage(ctx, field)
			case "duration":
				return ec.fieldContext_SQLExecuteInfo_duration(ctx, field)
			case "filterText":
				return ec.fieldContext_SQLExecuteInfo_filterText(ctx, field)
			case "results":
				return ec.fieldContext_SQLExecuteInfo_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLExecuteInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateResultsDataBatch_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateResultsDataBatchScript(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateResultsDataBatchScript(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateResultsDataBatchScript(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string), fc.Args["resultsId"].(string), fc.Args["updatedRows"].([]*model.SQLResultRow), fc.Args["deletedRows"].([]*model.SQLResultRow), fc.Args["addedRows"].([]*model.SQLResultRow))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateResultsDataBatchScript(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateResultsDataBatchScript_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_readLobValue(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_readLobValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ReadLobValue(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string), fc.Args["resultsId"].(string), fc.Args["lobColumnIndex"].(int), fc.Args["row"].([]*model.SQLResultRow))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_readLobValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_readLobValue_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_asyncSqlExecuteResults(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_asyncSqlExecuteResults(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AsyncSQLExecuteResults(rctx, fc.Args["taskId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SQLExecuteInfo)
	fc.Result = res
	return ec.marshalNSQLExecuteInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecuteInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_asyncSqlExecuteResults(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "statusMessage":
				return ec.fieldContext_SQLExecuteInfo_statusMessage(ctx, field)
			case "duration":
				return ec.fieldContext_SQLExecuteInfo_duration(ctx, field)
			case "filterText":
				return ec.fieldContext_SQLExecuteInfo_filterText(ctx, field)
			case "results":
				return ec.fieldContext_SQLExecuteInfo_results(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLExecuteInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_asyncSqlExecuteResults_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_asyncSqlExplainExecutionPlan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_asyncSqlExplainExecutionPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AsyncSQLExplainExecutionPlan(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string), fc.Args["query"].(string),
			func() interface{} {
				if fc.Args["configuration"] == nil {
					return nil
				}
				return fc.Args["configuration"].(interface{})
			}())
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AsyncTaskInfo)
	fc.Result = res
	return ec.marshalNAsyncTaskInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAsyncTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_asyncSqlExplainExecutionPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AsyncTaskInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_AsyncTaskInfo_name(ctx, field)
			case "running":
				return ec.fieldContext_AsyncTaskInfo_running(ctx, field)
			case "status":
				return ec.fieldContext_AsyncTaskInfo_status(ctx, field)
			case "error":
				return ec.fieldContext_AsyncTaskInfo_error(ctx, field)
			case "result":
				return ec.fieldContext_AsyncTaskInfo_result(ctx, field)
			case "taskResult":
				return ec.fieldContext_AsyncTaskInfo_taskResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AsyncTaskInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_asyncSqlExplainExecutionPlan_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_asyncSqlExplainExecutionPlanResult(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_asyncSqlExplainExecutionPlanResult(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AsyncSQLExplainExecutionPlanResult(rctx, fc.Args["taskId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SQLExecutionPlan)
	fc.Result = res
	return ec.marshalNSQLExecutionPlan2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecutionPlan(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_asyncSqlExplainExecutionPlanResult(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "query":
				return ec.fieldContext_SQLExecutionPlan_query(ctx, field)
			case "nodes":
				return ec.fieldContext_SQLExecutionPlan_nodes(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLExecutionPlan", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_asyncSqlExplainExecutionPlanResult_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_fullName(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_fullName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_fullName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_icon(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_nodeType(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_nodeType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_nodeType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_hasChildren(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_hasChildren(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasChildren, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_hasChildren(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_object(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_object(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Object, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DatabaseObjectInfo)
	fc.Result = res
	return ec.marshalODatabaseObjectInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseObjectInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_object(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_DatabaseObjectInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_DatabaseObjectInfo_description(ctx, field)
			case "type":
				return ec.fieldContext_DatabaseObjectInfo_type(ctx, field)
			case "properties":
				return ec.fieldContext_DatabaseObjectInfo_properties(ctx, field)
			case "ordinalPosition":
				return ec.fieldContext_DatabaseObjectInfo_ordinalPosition(ctx, field)
			case "fullyQualifiedName":
				return ec.fieldContext_DatabaseObjectInfo_fullyQualifiedName(ctx, field)
			case "overloadedName":
				return ec.fieldContext_DatabaseObjectInfo_overloadedName(ctx, field)
			case "uniqueName":
				return ec.fieldContext_DatabaseObjectInfo_uniqueName(ctx, field)
			case "state":
				return ec.fieldContext_DatabaseObjectInfo_state(ctx, field)
			case "features":
				return ec.fieldContext_DatabaseObjectInfo_features(ctx, field)
			case "editors":
				return ec.fieldContext_DatabaseObjectInfo_editors(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DatabaseObjectInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_features(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_features(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Features, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_features(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_nodeDetails(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_nodeDetails(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalOObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_nodeDetails(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_folder(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_folder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Folder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_folder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_inline(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_inline(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Inline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_inline(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorNodeInfo_navigable(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorNodeInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorNodeInfo_navigable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Navigable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorNodeInfo_navigable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorNodeInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorSettings_showSystemObjects(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorSettings_showSystemObjects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowSystemObjects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorSettings_showSystemObjects(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorSettings_showUtilityObjects(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorSettings_showUtilityObjects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowUtilityObjects, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorSettings_showUtilityObjects(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorSettings_showOnlyEntities(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorSettings_showOnlyEntities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowOnlyEntities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorSettings_showOnlyEntities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorSettings_mergeEntities(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorSettings_mergeEntities(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MergeEntities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorSettings_mergeEntities(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorSettings_hideFolders(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorSettings_hideFolders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HideFolders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorSettings_hideFolders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorSettings_hideSchemas(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorSettings_hideSchemas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HideSchemas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorSettings_hideSchemas(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NavigatorSettings_hideVirtualModel(ctx context.Context, field graphql.CollectedField, obj *model.NavigatorSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NavigatorSettings_hideVirtualModel(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HideVirtualModel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NavigatorSettings_hideVirtualModel(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NavigatorSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkEndpointInfo_message(ctx context.Context, field graphql.CollectedField, obj *model.NetworkEndpointInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkEndpointInfo_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkEndpointInfo_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkEndpointInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkEndpointInfo_clientVersion(ctx context.Context, field graphql.CollectedField, obj *model.NetworkEndpointInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkEndpointInfo_clientVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkEndpointInfo_clientVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkEndpointInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkEndpointInfo_serverVersion(ctx context.Context, field graphql.CollectedField, obj *model.NetworkEndpointInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkEndpointInfo_serverVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkEndpointInfo_serverVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkEndpointInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerConfig_id(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerConfig_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerConfig_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerConfig_enabled(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerConfig_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerConfig_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerConfig_authType(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerConfig_authType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.NetworkHandlerAuthType)
	fc.Result = res
	return ec.marshalNNetworkHandlerAuthType2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerAuthType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerConfig_authType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NetworkHandlerAuthType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerConfig_userName(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerConfig_userName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerConfig_userName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerConfig_password(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerConfig_password(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerConfig_password(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerConfig_key(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerConfig_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerConfig_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerConfig_savePassword(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerConfig_savePassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SavePassword, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerConfig_savePassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerConfig_properties(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerConfig_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerConfig_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerDescriptor_id(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerDescriptor_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerDescriptor_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerDescriptor_codeName(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerDescriptor_codeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CodeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerDescriptor_codeName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerDescriptor_label(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerDescriptor_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerDescriptor_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerDescriptor_description(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerDescriptor_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerDescriptor_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerDescriptor_secured(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerDescriptor_secured(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secured, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerDescriptor_secured(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerDescriptor_type(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerDescriptor_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.NetworkHandlerType)
	fc.Result = res
	return ec.marshalONetworkHandlerType2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerDescriptor_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type NetworkHandlerType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _NetworkHandlerDescriptor_properties(ctx context.Context, field graphql.CollectedField, obj *model.NetworkHandlerDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_NetworkHandlerDescriptor_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalNObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_NetworkHandlerDescriptor_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "NetworkHandlerDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectDescriptor_id(ctx context.Context, field graphql.CollectedField, obj *model.ObjectDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectDescriptor_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectDescriptor_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectDescriptor_displayName(ctx context.Context, field graphql.CollectedField, obj *model.ObjectDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectDescriptor_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectDescriptor_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectDescriptor_fullName(ctx context.Context, field graphql.CollectedField, obj *model.ObjectDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectDescriptor_fullName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectDescriptor_fullName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectDescriptor_uniqueName(ctx context.Context, field graphql.CollectedField, obj *model.ObjectDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectDescriptor_uniqueName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UniqueName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectDescriptor_uniqueName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectDescriptor_description(ctx context.Context, field graphql.CollectedField, obj *model.ObjectDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectDescriptor_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectDescriptor_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectDescriptor_value(ctx context.Context, field graphql.CollectedField, obj *model.ObjectDescriptor) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectDescriptor_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectDescriptor_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectDescriptor",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectDetails_id(ctx context.Context, field graphql.CollectedField, obj *model.ObjectDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectDetails_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectDetails_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectDetails_displayName(ctx context.Context, field graphql.CollectedField, obj *model.ObjectDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectDetails_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectDetails_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectDetails_description(ctx context.Context, field graphql.CollectedField, obj *model.ObjectDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectDetails_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectDetails_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectDetails_value(ctx context.Context, field graphql.CollectedField, obj *model.ObjectDetails) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectDetails_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectDetails_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectDetails",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectOrigin_type(ctx context.Context, field graphql.CollectedField, obj *model.ObjectOrigin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectOrigin_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectOrigin_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectOrigin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectOrigin_subType(ctx context.Context, field graphql.CollectedField, obj *model.ObjectOrigin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectOrigin_subType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectOrigin_subType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectOrigin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectOrigin_displayName(ctx context.Context, field graphql.CollectedField, obj *model.ObjectOrigin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectOrigin_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectOrigin_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectOrigin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectOrigin_icon(ctx context.Context, field graphql.CollectedField, obj *model.ObjectOrigin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectOrigin_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectOrigin_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectOrigin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectOrigin_configuration(ctx context.Context, field graphql.CollectedField, obj *model.ObjectOrigin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectOrigin_configuration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Configuration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectOrigin_configuration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectOrigin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectOrigin_details(ctx context.Context, field graphql.CollectedField, obj *model.ObjectOrigin) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectOrigin_details(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Details, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalOObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectOrigin_details(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectOrigin",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectPropertyInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.ObjectPropertyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectPropertyInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectPropertyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectPropertyInfo_displayName(ctx context.Context, field graphql.CollectedField, obj *model.ObjectPropertyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectPropertyInfo_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectPropertyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectPropertyInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.ObjectPropertyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectPropertyInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectPropertyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectPropertyInfo_category(ctx context.Context, field graphql.CollectedField, obj *model.ObjectPropertyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectPropertyInfo_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectPropertyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectPropertyInfo_dataType(ctx context.Context, field graphql.CollectedField, obj *model.ObjectPropertyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectPropertyInfo_dataType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectPropertyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectPropertyInfo_value(ctx context.Context, field graphql.CollectedField, obj *model.ObjectPropertyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectPropertyInfo_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectPropertyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectPropertyInfo_validValues(ctx context.Context, field graphql.CollectedField, obj *model.ObjectPropertyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValidValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]interface{})
	fc.Result = res
	return ec.marshalOObject2ᚕinterface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectPropertyInfo_validValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectPropertyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectPropertyInfo_defaultValue(ctx context.Context, field graphql.CollectedField, obj *model.ObjectPropertyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectPropertyInfo_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectPropertyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectPropertyInfo_length(ctx context.Context, field graphql.CollectedField, obj *model.ObjectPropertyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Length, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(model.ObjectPropertyLength)
	fc.Result = res
	return ec.marshalNObjectPropertyLength2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyLength(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectPropertyInfo_length(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectPropertyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ObjectPropertyLength does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectPropertyInfo_features(ctx context.Context, field graphql.CollectedField, obj *model.ObjectPropertyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Features, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectPropertyInfo_features(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectPropertyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ObjectPropertyInfo_order(ctx context.Context, field graphql.CollectedField, obj *model.ObjectPropertyInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ObjectPropertyInfo_order(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ObjectPropertyInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.ProductInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductInfo_version(ctx context.Context, field graphql.CollectedField, obj *model.ProductInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductInfo_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductInfo_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.ProductInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductInfo_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductInfo_description(ctx context.Context, field graphql.CollectedField, obj *model.ProductInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductInfo_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductInfo_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductInfo_buildTime(ctx context.Context, field graphql.CollectedField, obj *model.ProductInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductInfo_buildTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductInfo_buildTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductInfo_releaseTime(ctx context.Context, field graphql.CollectedField, obj *model.ProductInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductInfo_releaseTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReleaseTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductInfo_releaseTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductInfo_licenseInfo(ctx context.Context, field graphql.CollectedField, obj *model.ProductInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductInfo_licenseInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductInfo_licenseInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProductInfo_latestVersionInfo(ctx context.Context, field graphql.CollectedField, obj *model.ProductInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProductInfo_latestVersionInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestVersionInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProductInfo_latestVersionInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProductInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUsers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUsers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUsers(rctx, fc.Args["userId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdminUserInfo)
	fc.Result = res
	return ec.marshalNAdminUserInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminUserInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUsers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_AdminUserInfo_userId(ctx, field)
			case "metaParameters":
				return ec.fieldContext_AdminUserInfo_metaParameters(ctx, field)
			case "configurationParameters":
				return ec.fieldContext_AdminUserInfo_configurationParameters(ctx, field)
			case "grantedRoles":
				return ec.fieldContext_AdminUserInfo_grantedRoles(ctx, field)
			case "grantedConnections":
				return ec.fieldContext_AdminUserInfo_grantedConnections(ctx, field)
			case "origins":
				return ec.fieldContext_AdminUserInfo_origins(ctx, field)
			case "linkedAuthProviders":
				return ec.fieldContext_AdminUserInfo_linkedAuthProviders(ctx, field)
			case "enabled":
				return ec.fieldContext_AdminUserInfo_enabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminUserInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listUsers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listRoles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listRoles(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListRoles(rctx, fc.Args["roleId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdminRoleInfo)
	fc.Result = res
	return ec.marshalNAdminRoleInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminRoleInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listRoles(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "roleId":
				return ec.fieldContext_AdminRoleInfo_roleId(ctx, field)
			case "roleName":
				return ec.fieldContext_AdminRoleInfo_roleName(ctx, field)
			case "description":
				return ec.fieldContext_AdminRoleInfo_description(ctx, field)
			case "grantedUsers":
				return ec.fieldContext_AdminRoleInfo_grantedUsers(ctx, field)
			case "grantedConnections":
				return ec.fieldContext_AdminRoleInfo_grantedConnections(ctx, field)
			case "rolePermissions":
				return ec.fieldContext_AdminRoleInfo_rolePermissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminRoleInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listRoles_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listPermissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListPermissions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdminPermissionInfo)
	fc.Result = res
	return ec.marshalNAdminPermissionInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminPermissionInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listPermissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AdminPermissionInfo_id(ctx, field)
			case "label":
				return ec.fieldContext_AdminPermissionInfo_label(ctx, field)
			case "description":
				return ec.fieldContext_AdminPermissionInfo_description(ctx, field)
			case "provider":
				return ec.fieldContext_AdminPermissionInfo_provider(ctx, field)
			case "category":
				return ec.fieldContext_AdminPermissionInfo_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminPermissionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateUser(rctx, fc.Args["userId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdminUserInfo)
	fc.Result = res
	return ec.marshalNAdminUserInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminUserInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_AdminUserInfo_userId(ctx, field)
			case "metaParameters":
				return ec.fieldContext_AdminUserInfo_metaParameters(ctx, field)
			case "configurationParameters":
				return ec.fieldContext_AdminUserInfo_configurationParameters(ctx, field)
			case "grantedRoles":
				return ec.fieldContext_AdminUserInfo_grantedRoles(ctx, field)
			case "grantedConnections":
				return ec.fieldContext_AdminUserInfo_grantedConnections(ctx, field)
			case "origins":
				return ec.fieldContext_AdminUserInfo_origins(ctx, field)
			case "linkedAuthProviders":
				return ec.fieldContext_AdminUserInfo_linkedAuthProviders(ctx, field)
			case "enabled":
				return ec.fieldContext_AdminUserInfo_enabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminUserInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteUser(rctx, fc.Args["userId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deleteUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_createRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateRole(rctx, fc.Args["roleId"].(string), fc.Args["roleName"].(*string), fc.Args["description"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdminRoleInfo)
	fc.Result = res
	return ec.marshalNAdminRoleInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminRoleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "roleId":
				return ec.fieldContext_AdminRoleInfo_roleId(ctx, field)
			case "roleName":
				return ec.fieldContext_AdminRoleInfo_roleName(ctx, field)
			case "description":
				return ec.fieldContext_AdminRoleInfo_description(ctx, field)
			case "grantedUsers":
				return ec.fieldContext_AdminRoleInfo_grantedUsers(ctx, field)
			case "grantedConnections":
				return ec.fieldContext_AdminRoleInfo_grantedConnections(ctx, field)
			case "rolePermissions":
				return ec.fieldContext_AdminRoleInfo_rolePermissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminRoleInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_createRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateRole(rctx, fc.Args["roleId"].(string), fc.Args["roleName"].(*string), fc.Args["description"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdminRoleInfo)
	fc.Result = res
	return ec.marshalNAdminRoleInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminRoleInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "roleId":
				return ec.fieldContext_AdminRoleInfo_roleId(ctx, field)
			case "roleName":
				return ec.fieldContext_AdminRoleInfo_roleName(ctx, field)
			case "description":
				return ec.fieldContext_AdminRoleInfo_description(ctx, field)
			case "grantedUsers":
				return ec.fieldContext_AdminRoleInfo_grantedUsers(ctx, field)
			case "grantedConnections":
				return ec.fieldContext_AdminRoleInfo_grantedConnections(ctx, field)
			case "rolePermissions":
				return ec.fieldContext_AdminRoleInfo_rolePermissions(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminRoleInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_updateRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteRole(rctx, fc.Args["roleId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deleteRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_grantUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_grantUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GrantUserRole(rctx, fc.Args["userId"].(string), fc.Args["roleId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_grantUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_grantUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_revokeUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_revokeUserRole(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RevokeUserRole(rctx, fc.Args["userId"].(string), fc.Args["roleId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_revokeUserRole(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_revokeUserRole_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_setSubjectPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_setSubjectPermissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SetSubjectPermissions(rctx, fc.Args["roleId"].(string), fc.Args["permissions"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdminPermissionInfo)
	fc.Result = res
	return ec.marshalNAdminPermissionInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminPermissionInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_setSubjectPermissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AdminPermissionInfo_id(ctx, field)
			case "label":
				return ec.fieldContext_AdminPermissionInfo_label(ctx, field)
			case "description":
				return ec.fieldContext_AdminPermissionInfo_description(ctx, field)
			case "provider":
				return ec.fieldContext_AdminPermissionInfo_provider(ctx, field)
			case "category":
				return ec.fieldContext_AdminPermissionInfo_category(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminPermissionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_setSubjectPermissions_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_setUserCredentials(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_setUserCredentials(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SetUserCredentials(rctx, fc.Args["userId"].(string), fc.Args["providerId"].(string),
			func() interface{} {
				if fc.Args["credentials"] == nil {
					return nil
				}
				return fc.Args["credentials"].(interface{})
			}())
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_setUserCredentials(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_setUserCredentials_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_enableUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_enableUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EnableUser(rctx, fc.Args["userId"].(string), fc.Args["enabled"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_enableUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_enableUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_allConnections(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_allConnections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AllConnections(rctx, fc.Args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_allConnections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_allConnections_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_searchConnections(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_searchConnections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SearchConnections(rctx, fc.Args["hostNames"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdminConnectionSearchInfo)
	fc.Result = res
	return ec.marshalNAdminConnectionSearchInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminConnectionSearchInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_searchConnections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "displayName":
				return ec.fieldContext_AdminConnectionSearchInfo_displayName(ctx, field)
			case "host":
				return ec.fieldContext_AdminConnectionSearchInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_AdminConnectionSearchInfo_port(ctx, field)
			case "possibleDrivers":
				return ec.fieldContext_AdminConnectionSearchInfo_possibleDrivers(ctx, field)
			case "defaultDriver":
				return ec.fieldContext_AdminConnectionSearchInfo_defaultDriver(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminConnectionSearchInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_searchConnections_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_createConnectionConfiguration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_createConnectionConfiguration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CreateConnectionConfiguration(rctx, fc.Args["config"].(model.ConnectionConfig))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_createConnectionConfiguration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_createConnectionConfiguration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_copyConnectionConfiguration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_copyConnectionConfiguration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CopyConnectionConfiguration(rctx, fc.Args["nodePath"].(string), fc.Args["config"].(*model.ConnectionConfig))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_copyConnectionConfiguration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_copyConnectionConfiguration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_updateConnectionConfiguration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_updateConnectionConfiguration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UpdateConnectionConfiguration(rctx, fc.Args["id"].(string), fc.Args["config"].(model.ConnectionConfig))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_updateConnectionConfiguration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_updateConnectionConfiguration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteConnectionConfiguration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteConnectionConfiguration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteConnectionConfiguration(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteConnectionConfiguration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deleteConnectionConfiguration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getConnectionSubjectAccess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getConnectionSubjectAccess(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetConnectionSubjectAccess(rctx, fc.Args["connectionId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdminConnectionGrantInfo)
	fc.Result = res
	return ec.marshalNAdminConnectionGrantInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminConnectionGrantInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getConnectionSubjectAccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "connectionId":
				return ec.fieldContext_AdminConnectionGrantInfo_connectionId(ctx, field)
			case "dataSourceId":
				return ec.fieldContext_AdminConnectionGrantInfo_dataSourceId(ctx, field)
			case "subjectId":
				return ec.fieldContext_AdminConnectionGrantInfo_subjectId(ctx, field)
			case "subjectType":
				return ec.fieldContext_AdminConnectionGrantInfo_subjectType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminConnectionGrantInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getConnectionSubjectAccess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_setConnectionSubjectAccess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_setConnectionSubjectAccess(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SetConnectionSubjectAccess(rctx, fc.Args["connectionId"].(string), fc.Args["subjects"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_setConnectionSubjectAccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_setConnectionSubjectAccess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_getSubjectConnectionAccess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_getSubjectConnectionAccess(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSubjectConnectionAccess(rctx, fc.Args["subjectId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdminConnectionGrantInfo)
	fc.Result = res
	return ec.marshalNAdminConnectionGrantInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminConnectionGrantInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_getSubjectConnectionAccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "connectionId":
				return ec.fieldContext_AdminConnectionGrantInfo_connectionId(ctx, field)
			case "dataSourceId":
				return ec.fieldContext_AdminConnectionGrantInfo_dataSourceId(ctx, field)
			case "subjectId":
				return ec.fieldContext_AdminConnectionGrantInfo_subjectId(ctx, field)
			case "subjectType":
				return ec.fieldContext_AdminConnectionGrantInfo_subjectType(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminConnectionGrantInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_getSubjectConnectionAccess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_setSubjectConnectionAccess(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_setSubjectConnectionAccess(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SetSubjectConnectionAccess(rctx, fc.Args["subjectId"].(string), fc.Args["connections"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_setSubjectConnectionAccess(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_setSubjectConnectionAccess_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listFeatureSets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listFeatureSets(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListFeatureSets(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.WebFeatureSet)
	fc.Result = res
	return ec.marshalNWebFeatureSet2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐWebFeatureSetᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listFeatureSets(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_WebFeatureSet_id(ctx, field)
			case "label":
				return ec.fieldContext_WebFeatureSet_label(ctx, field)
			case "description":
				return ec.fieldContext_WebFeatureSet_description(ctx, field)
			case "icon":
				return ec.fieldContext_WebFeatureSet_icon(ctx, field)
			case "enabled":
				return ec.fieldContext_WebFeatureSet_enabled(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WebFeatureSet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_listAuthProviderConfigurationParameters(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listAuthProviderConfigurationParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListAuthProviderConfigurationParameters(rctx, fc.Args["providerId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalNObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listAuthProviderConfigurationParameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listAuthProviderConfigurationParameters_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listAuthProviderConfigurations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listAuthProviderConfigurations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListAuthProviderConfigurations(rctx, fc.Args["providerId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AdminAuthProviderConfiguration)
	fc.Result = res
	return ec.marshalNAdminAuthProviderConfiguration2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminAuthProviderConfigurationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listAuthProviderConfigurations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "providerId":
				return ec.fieldContext_AdminAuthProviderConfiguration_providerId(ctx, field)
			case "id":
				return ec.fieldContext_AdminAuthProviderConfiguration_id(ctx, field)
			case "displayName":
				return ec.fieldContext_AdminAuthProviderConfiguration_displayName(ctx, field)
			case "disabled":
				return ec.fieldContext_AdminAuthProviderConfiguration_disabled(ctx, field)
			case "iconURL":
				return ec.fieldContext_AdminAuthProviderConfiguration_iconURL(ctx, field)
			case "description":
				return ec.fieldContext_AdminAuthProviderConfiguration_description(ctx, field)
			case "parameters":
				return ec.fieldContext_AdminAuthProviderConfiguration_parameters(ctx, field)
			case "signInLink":
				return ec.fieldContext_AdminAuthProviderConfiguration_signInLink(ctx, field)
			case "signOutLink":
				return ec.fieldContext_AdminAuthProviderConfiguration_signOutLink(ctx, field)
			case "redirectLink":
				return ec.fieldContext_AdminAuthProviderConfiguration_redirectLink(ctx, field)
			case "metadataLink":
				return ec.fieldContext_AdminAuthProviderConfiguration_metadataLink(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminAuthProviderConfiguration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_listAuthProviderConfigurations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_saveAuthProviderConfiguration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_saveAuthProviderConfiguration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SaveAuthProviderConfiguration(rctx, fc.Args["providerId"].(string), fc.Args["id"].(string), fc.Args["displayName"].(*string), fc.Args["disabled"].(*bool), fc.Args["iconURL"].(*string), fc.Args["description"].(*string),
			func() interface{} {
				if fc.Args["parameters"] == nil {
					return nil
				}
				return fc.Args["parameters"].(interface{})
			}())
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AdminAuthProviderConfiguration)
	fc.Result = res
	return ec.marshalNAdminAuthProviderConfiguration2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminAuthProviderConfiguration(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_saveAuthProviderConfiguration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "providerId":
				return ec.fieldContext_AdminAuthProviderConfiguration_providerId(ctx, field)
			case "id":
				return ec.fieldContext_AdminAuthProviderConfiguration_id(ctx, field)
			case "displayName":
				return ec.fieldContext_AdminAuthProviderConfiguration_displayName(ctx, field)
			case "disabled":
				return ec.fieldContext_AdminAuthProviderConfiguration_disabled(ctx, field)
			case "iconURL":
				return ec.fieldContext_AdminAuthProviderConfiguration_iconURL(ctx, field)
			case "description":
				return ec.fieldContext_AdminAuthProviderConfiguration_description(ctx, field)
			case "parameters":
				return ec.fieldContext_AdminAuthProviderConfiguration_parameters(ctx, field)
			case "signInLink":
				return ec.fieldContext_AdminAuthProviderConfiguration_signInLink(ctx, field)
			case "signOutLink":
				return ec.fieldContext_AdminAuthProviderConfiguration_signOutLink(ctx, field)
			case "redirectLink":
				return ec.fieldContext_AdminAuthProviderConfiguration_redirectLink(ctx, field)
			case "metadataLink":
				return ec.fieldContext_AdminAuthProviderConfiguration_metadataLink(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AdminAuthProviderConfiguration", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_saveAuthProviderConfiguration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteAuthProviderConfiguration(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteAuthProviderConfiguration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteAuthProviderConfiguration(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteAuthProviderConfiguration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deleteAuthProviderConfiguration_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_saveUserMetaParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_saveUserMetaParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SaveUserMetaParameter(rctx, fc.Args["id"].(string), fc.Args["displayName"].(string), fc.Args["description"].(*string), fc.Args["required"].(bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalNObjectPropertyInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_saveUserMetaParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_saveUserMetaParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_deleteUserMetaParameter(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_deleteUserMetaParameter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DeleteUserMetaParameter(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_deleteUserMetaParameter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_deleteUserMetaParameter_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_setUserMetaParameterValues(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_setUserMetaParameterValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SetUserMetaParameterValues(rctx, fc.Args["userId"].(string),
			func() interface{} {
				if fc.Args["parameters"] == nil {
					return nil
				}
				return fc.Args["parameters"].(interface{})
			}())
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_setUserMetaParameterValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_setUserMetaParameterValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_configureServer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_configureServer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConfigureServer(rctx, fc.Args["configuration"].(model.ServerConfigInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_configureServer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_configureServer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_setDefaultNavigatorSettings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_setDefaultNavigatorSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SetDefaultNavigatorSettings(rctx, fc.Args["settings"].(model.NavigatorSettingsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_setDefaultNavigatorSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_setDefaultNavigatorSettings_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_authLogin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authLogin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuthLogin(rctx, fc.Args["provider"].(string), fc.Args["configuration"].(*string),
			func() interface{} {
				if fc.Args["credentials"] == nil {
					return nil
				}
				return fc.Args["credentials"].(interface{})
			}(), fc.Args["linkUser"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AuthInfo)
	fc.Result = res
	return ec.marshalNAuthInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authLogin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "redirectLink":
				return ec.fieldContext_AuthInfo_redirectLink(ctx, field)
			case "authId":
				return ec.fieldContext_AuthInfo_authId(ctx, field)
			case "authStatus":
				return ec.fieldContext_AuthInfo_authStatus(ctx, field)
			case "userTokens":
				return ec.fieldContext_AuthInfo_userTokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_authLogin_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_authUpdateStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authUpdateStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuthUpdateStatus(rctx, fc.Args["authId"].(string), fc.Args["linkUser"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AuthInfo)
	fc.Result = res
	return ec.marshalNAuthInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authUpdateStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "redirectLink":
				return ec.fieldContext_AuthInfo_redirectLink(ctx, field)
			case "authId":
				return ec.fieldContext_AuthInfo_authId(ctx, field)
			case "authStatus":
				return ec.fieldContext_AuthInfo_authStatus(ctx, field)
			case "userTokens":
				return ec.fieldContext_AuthInfo_userTokens(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_authUpdateStatus_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_authLogout(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authLogout(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuthLogout(rctx, fc.Args["provider"].(*string), fc.Args["configuration"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authLogout(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_authLogout_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_activeUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_activeUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ActiveUser(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UserInfo)
	fc.Result = res
	return ec.marshalOUserInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐUserInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_activeUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "userId":
				return ec.fieldContext_UserInfo_userId(ctx, field)
			case "displayName":
				return ec.fieldContext_UserInfo_displayName(ctx, field)
			case "authTokens":
				return ec.fieldContext_UserInfo_authTokens(ctx, field)
			case "linkedAuthProviders":
				return ec.fieldContext_UserInfo_linkedAuthProviders(ctx, field)
			case "metaParameters":
				return ec.fieldContext_UserInfo_metaParameters(ctx, field)
			case "configurationParameters":
				return ec.fieldContext_UserInfo_configurationParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_authProviders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authProviders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuthProviders(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.AuthProviderInfo)
	fc.Result = res
	return ec.marshalNAuthProviderInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthProviderInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authProviders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AuthProviderInfo_id(ctx, field)
			case "label":
				return ec.fieldContext_AuthProviderInfo_label(ctx, field)
			case "icon":
				return ec.fieldContext_AuthProviderInfo_icon(ctx, field)
			case "description":
				return ec.fieldContext_AuthProviderInfo_description(ctx, field)
			case "defaultProvider":
				return ec.fieldContext_AuthProviderInfo_defaultProvider(ctx, field)
			case "configurable":
				return ec.fieldContext_AuthProviderInfo_configurable(ctx, field)
			case "configurations":
				return ec.fieldContext_AuthProviderInfo_configurations(ctx, field)
			case "credentialProfiles":
				return ec.fieldContext_AuthProviderInfo_credentialProfiles(ctx, field)
			case "requiredFeatures":
				return ec.fieldContext_AuthProviderInfo_requiredFeatures(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AuthProviderInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_authChangeLocalPassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authChangeLocalPassword(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuthChangeLocalPassword(rctx, fc.Args["oldPassword"].(string), fc.Args["newPassword"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authChangeLocalPassword(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_authChangeLocalPassword_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_listUserProfileProperties(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_listUserProfileProperties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListUserProfileProperties(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalNObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_listUserProfileProperties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_serverConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_serverConfig(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ServerConfig(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ServerConfig)
	fc.Result = res
	return ec.marshalNServerConfig2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_serverConfig(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ServerConfig_name(ctx, field)
			case "version":
				return ec.fieldContext_ServerConfig_version(ctx, field)
			case "workspaceId":
				return ec.fieldContext_ServerConfig_workspaceId(ctx, field)
			case "serverURL":
				return ec.fieldContext_ServerConfig_serverURL(ctx, field)
			case "rootURI":
				return ec.fieldContext_ServerConfig_rootURI(ctx, field)
			case "hostName":
				return ec.fieldContext_ServerConfig_hostName(ctx, field)
			case "anonymousAccessEnabled":
				return ec.fieldContext_ServerConfig_anonymousAccessEnabled(ctx, field)
			case "authenticationEnabled":
				return ec.fieldContext_ServerConfig_authenticationEnabled(ctx, field)
			case "supportsCustomConnections":
				return ec.fieldContext_ServerConfig_supportsCustomConnections(ctx, field)
			case "supportsConnectionBrowser":
				return ec.fieldContext_ServerConfig_supportsConnectionBrowser(ctx, field)
			case "supportsWorkspaces":
				return ec.fieldContext_ServerConfig_supportsWorkspaces(ctx, field)
			case "resourceManagerEnabled":
				return ec.fieldContext_ServerConfig_resourceManagerEnabled(ctx, field)
			case "publicCredentialsSaveEnabled":
				return ec.fieldContext_ServerConfig_publicCredentialsSaveEnabled(ctx, field)
			case "adminCredentialsSaveEnabled":
				return ec.fieldContext_ServerConfig_adminCredentialsSaveEnabled(ctx, field)
			case "licenseRequired":
				return ec.fieldContext_ServerConfig_licenseRequired(ctx, field)
			case "licenseValid":
				return ec.fieldContext_ServerConfig_licenseValid(ctx, field)
			case "sessionExpireTime":
				return ec.fieldContext_ServerConfig_sessionExpireTime(ctx, field)
			case "localHostAddress":
				return ec.fieldContext_ServerConfig_localHostAddress(ctx, field)
			case "configurationMode":
				return ec.fieldContext_ServerConfig_configurationMode(ctx, field)
			case "developmentMode":
				return ec.fieldContext_ServerConfig_developmentMode(ctx, field)
			case "redirectOnFederatedAuth":
				return ec.fieldContext_ServerConfig_redirectOnFederatedAuth(ctx, field)
			case "enabledFeatures":
				return ec.fieldContext_ServerConfig_enabledFeatures(ctx, field)
			case "enabledAuthProviders":
				return ec.fieldContext_ServerConfig_enabledAuthProviders(ctx, field)
			case "supportedLanguages":
				return ec.fieldContext_ServerConfig_supportedLanguages(ctx, field)
			case "services":
				return ec.fieldContext_ServerConfig_services(ctx, field)
			case "productConfiguration":
				return ec.fieldContext_ServerConfig_productConfiguration(ctx, field)
			case "productInfo":
				return ec.fieldContext_ServerConfig_productInfo(ctx, field)
			case "defaultNavigatorSettings":
				return ec.fieldContext_ServerConfig_defaultNavigatorSettings(ctx, field)
			case "disabledDrivers":
				return ec.fieldContext_ServerConfig_disabledDrivers(ctx, field)
			case "resourceQuotas":
				return ec.fieldContext_ServerConfig_resourceQuotas(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServerConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_sessionState(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sessionState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SessionState(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SessionInfo)
	fc.Result = res
	return ec.marshalNSessionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSessionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sessionState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "createTime":
				return ec.fieldContext_SessionInfo_createTime(ctx, field)
			case "lastAccessTime":
				return ec.fieldContext_SessionInfo_lastAccessTime(ctx, field)
			case "locale":
				return ec.fieldContext_SessionInfo_locale(ctx, field)
			case "cacheExpired":
				return ec.fieldContext_SessionInfo_cacheExpired(ctx, field)
			case "serverMessages":
				return ec.fieldContext_SessionInfo_serverMessages(ctx, field)
			case "connections":
				return ec.fieldContext_SessionInfo_connections(ctx, field)
			case "actionParameters":
				return ec.fieldContext_SessionInfo_actionParameters(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SessionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_sessionPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sessionPermissions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SessionPermissions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalNID2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sessionPermissions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_driverList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_driverList(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DriverList(rctx, fc.Args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DriverInfo)
	fc.Result = res
	return ec.marshalNDriverInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDriverInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_driverList(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DriverInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_DriverInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_DriverInfo_description(ctx, field)
			case "icon":
				return ec.fieldContext_DriverInfo_icon(ctx, field)
			case "iconBig":
				return ec.fieldContext_DriverInfo_iconBig(ctx, field)
			case "providerId":
				return ec.fieldContext_DriverInfo_providerId(ctx, field)
			case "driverClassName":
				return ec.fieldContext_DriverInfo_driverClassName(ctx, field)
			case "defaultHost":
				return ec.fieldContext_DriverInfo_defaultHost(ctx, field)
			case "defaultPort":
				return ec.fieldContext_DriverInfo_defaultPort(ctx, field)
			case "defaultDatabase":
				return ec.fieldContext_DriverInfo_defaultDatabase(ctx, field)
			case "defaultServer":
				return ec.fieldContext_DriverInfo_defaultServer(ctx, field)
			case "defaultUser":
				return ec.fieldContext_DriverInfo_defaultUser(ctx, field)
			case "sampleURL":
				return ec.fieldContext_DriverInfo_sampleURL(ctx, field)
			case "driverInfoURL":
				return ec.fieldContext_DriverInfo_driverInfoURL(ctx, field)
			case "driverPropertiesURL":
				return ec.fieldContext_DriverInfo_driverPropertiesURL(ctx, field)
			case "embedded":
				return ec.fieldContext_DriverInfo_embedded(ctx, field)
			case "enabled":
				return ec.fieldContext_DriverInfo_enabled(ctx, field)
			case "requiresServerName":
				return ec.fieldContext_DriverInfo_requiresServerName(ctx, field)
			case "allowsEmptyPassword":
				return ec.fieldContext_DriverInfo_allowsEmptyPassword(ctx, field)
			case "licenseRequired":
				return ec.fieldContext_DriverInfo_licenseRequired(ctx, field)
			case "license":
				return ec.fieldContext_DriverInfo_license(ctx, field)
			case "custom":
				return ec.fieldContext_DriverInfo_custom(ctx, field)
			case "promotedScore":
				return ec.fieldContext_DriverInfo_promotedScore(ctx, field)
			case "driverProperties":
				return ec.fieldContext_DriverInfo_driverProperties(ctx, field)
			case "driverParameters":
				return ec.fieldContext_DriverInfo_driverParameters(ctx, field)
			case "providerProperties":
				return ec.fieldContext_DriverInfo_providerProperties(ctx, field)
			case "anonymousAccess":
				return ec.fieldContext_DriverInfo_anonymousAccess(ctx, field)
			case "defaultAuthModel":
				return ec.fieldContext_DriverInfo_defaultAuthModel(ctx, field)
			case "applicableAuthModels":
				return ec.fieldContext_DriverInfo_applicableAuthModels(ctx, field)
			case "applicableNetworkHandlers":
				return ec.fieldContext_DriverInfo_applicableNetworkHandlers(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DriverInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_driverList_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_authModels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_authModels(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AuthModels(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DatabaseAuthModel)
	fc.Result = res
	return ec.marshalNDatabaseAuthModel2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseAuthModelᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_authModels(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DatabaseAuthModel_id(ctx, field)
			case "displayName":
				return ec.fieldContext_DatabaseAuthModel_displayName(ctx, field)
			case "description":
				return ec.fieldContext_DatabaseAuthModel_description(ctx, field)
			case "icon":
				return ec.fieldContext_DatabaseAuthModel_icon(ctx, field)
			case "requiresLocalConfiguration":
				return ec.fieldContext_DatabaseAuthModel_requiresLocalConfiguration(ctx, field)
			case "properties":
				return ec.fieldContext_DatabaseAuthModel_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DatabaseAuthModel", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_networkHandlers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_networkHandlers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NetworkHandlers(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.NetworkHandlerDescriptor)
	fc.Result = res
	return ec.marshalNNetworkHandlerDescriptor2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerDescriptorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_networkHandlers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NetworkHandlerDescriptor_id(ctx, field)
			case "codeName":
				return ec.fieldContext_NetworkHandlerDescriptor_codeName(ctx, field)
			case "label":
				return ec.fieldContext_NetworkHandlerDescriptor_label(ctx, field)
			case "description":
				return ec.fieldContext_NetworkHandlerDescriptor_description(ctx, field)
			case "secured":
				return ec.fieldContext_NetworkHandlerDescriptor_secured(ctx, field)
			case "type":
				return ec.fieldContext_NetworkHandlerDescriptor_type(ctx, field)
			case "properties":
				return ec.fieldContext_NetworkHandlerDescriptor_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NetworkHandlerDescriptor", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_userConnections(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_userConnections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserConnections(rctx, fc.Args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_userConnections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_userConnections_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_templateConnections(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_templateConnections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TemplateConnections(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_templateConnections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_connectionFolders(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_connectionFolders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConnectionFolders(rctx, fc.Args["path"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConnectionFolderInfo)
	fc.Result = res
	return ec.marshalNConnectionFolderInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionFolderInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_connectionFolders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionFolderInfo_id(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionFolderInfo_description(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionFolderInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_connectionFolders_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_connectionState(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_connectionState(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConnectionState(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_connectionState(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_connectionState_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_connectionInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_connectionInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ConnectionInfo(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_connectionInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_connectionInfo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_readSessionLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_readSessionLog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ReadSessionLog(rctx, fc.Args["maxEntries"].(*int), fc.Args["clearEntries"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.LogEntry)
	fc.Result = res
	return ec.marshalNLogEntry2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐLogEntryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_readSessionLog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "time":
				return ec.fieldContext_LogEntry_time(ctx, field)
			case "type":
				return ec.fieldContext_LogEntry_type(ctx, field)
			case "message":
				return ec.fieldContext_LogEntry_message(ctx, field)
			case "stackTrace":
				return ec.fieldContext_LogEntry_stackTrace(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LogEntry", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_readSessionLog_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_dataTransferAvailableStreamProcessors(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dataTransferAvailableStreamProcessors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataTransferAvailableStreamProcessors(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DataTransferProcessorInfo)
	fc.Result = res
	return ec.marshalNDataTransferProcessorInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDataTransferProcessorInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dataTransferAvailableStreamProcessors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DataTransferProcessorInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_DataTransferProcessorInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_DataTransferProcessorInfo_description(ctx, field)
			case "fileExtension":
				return ec.fieldContext_DataTransferProcessorInfo_fileExtension(ctx, field)
			case "appFileExtension":
				return ec.fieldContext_DataTransferProcessorInfo_appFileExtension(ctx, field)
			case "appName":
				return ec.fieldContext_DataTransferProcessorInfo_appName(ctx, field)
			case "order":
				return ec.fieldContext_DataTransferProcessorInfo_order(ctx, field)
			case "icon":
				return ec.fieldContext_DataTransferProcessorInfo_icon(ctx, field)
			case "properties":
				return ec.fieldContext_DataTransferProcessorInfo_properties(ctx, field)
			case "isBinary":
				return ec.fieldContext_DataTransferProcessorInfo_isBinary(ctx, field)
			case "isHTML":
				return ec.fieldContext_DataTransferProcessorInfo_isHTML(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DataTransferProcessorInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_dataTransferExportDataFromContainer(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dataTransferExportDataFromContainer(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataTransferExportDataFromContainer(rctx, fc.Args["connectionId"].(string), fc.Args["containerNodePath"].(string), fc.Args["parameters"].(model.DataTransferParameters))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AsyncTaskInfo)
	fc.Result = res
	return ec.marshalNAsyncTaskInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAsyncTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dataTransferExportDataFromContainer(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AsyncTaskInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_AsyncTaskInfo_name(ctx, field)
			case "running":
				return ec.fieldContext_AsyncTaskInfo_running(ctx, field)
			case "status":
				return ec.fieldContext_AsyncTaskInfo_status(ctx, field)
			case "error":
				return ec.fieldContext_AsyncTaskInfo_error(ctx, field)
			case "result":
				return ec.fieldContext_AsyncTaskInfo_result(ctx, field)
			case "taskResult":
				return ec.fieldContext_AsyncTaskInfo_taskResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AsyncTaskInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dataTransferExportDataFromContainer_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_dataTransferExportDataFromResults(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dataTransferExportDataFromResults(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataTransferExportDataFromResults(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string), fc.Args["resultsId"].(string), fc.Args["parameters"].(model.DataTransferParameters))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AsyncTaskInfo)
	fc.Result = res
	return ec.marshalNAsyncTaskInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAsyncTaskInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dataTransferExportDataFromResults(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_AsyncTaskInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_AsyncTaskInfo_name(ctx, field)
			case "running":
				return ec.fieldContext_AsyncTaskInfo_running(ctx, field)
			case "status":
				return ec.fieldContext_AsyncTaskInfo_status(ctx, field)
			case "error":
				return ec.fieldContext_AsyncTaskInfo_error(ctx, field)
			case "result":
				return ec.fieldContext_AsyncTaskInfo_result(ctx, field)
			case "taskResult":
				return ec.fieldContext_AsyncTaskInfo_taskResult(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type AsyncTaskInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dataTransferExportDataFromResults_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_dataTransferRemoveDataFile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_dataTransferRemoveDataFile(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().DataTransferRemoveDataFile(rctx, fc.Args["dataFileId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_dataTransferRemoveDataFile(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_dataTransferRemoveDataFile_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_metadataGetNodeDDL(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_metadataGetNodeDDL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().MetadataGetNodeDdl(rctx, fc.Args["nodeId"].(string),
			func() interface{} {
				if fc.Args["options"] == nil {
					return nil
				}
				return fc.Args["options"].(interface{})
			}())
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_metadataGetNodeDDL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_metadataGetNodeDDL_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_navNodeChildren(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_navNodeChildren(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NavNodeChildren(rctx, fc.Args["parentPath"].(string), fc.Args["offset"].(*int), fc.Args["limit"].(*int), fc.Args["onlyFolders"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.NavigatorNodeInfo)
	fc.Result = res
	return ec.marshalNNavigatorNodeInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorNodeInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_navNodeChildren(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NavigatorNodeInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_NavigatorNodeInfo_name(ctx, field)
			case "fullName":
				return ec.fieldContext_NavigatorNodeInfo_fullName(ctx, field)
			case "icon":
				return ec.fieldContext_NavigatorNodeInfo_icon(ctx, field)
			case "description":
				return ec.fieldContext_NavigatorNodeInfo_description(ctx, field)
			case "nodeType":
				return ec.fieldContext_NavigatorNodeInfo_nodeType(ctx, field)
			case "hasChildren":
				return ec.fieldContext_NavigatorNodeInfo_hasChildren(ctx, field)
			case "object":
				return ec.fieldContext_NavigatorNodeInfo_object(ctx, field)
			case "features":
				return ec.fieldContext_NavigatorNodeInfo_features(ctx, field)
			case "nodeDetails":
				return ec.fieldContext_NavigatorNodeInfo_nodeDetails(ctx, field)
			case "folder":
				return ec.fieldContext_NavigatorNodeInfo_folder(ctx, field)
			case "inline":
				return ec.fieldContext_NavigatorNodeInfo_inline(ctx, field)
			case "navigable":
				return ec.fieldContext_NavigatorNodeInfo_navigable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NavigatorNodeInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_navNodeChildren_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_navNodeParents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_navNodeParents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NavNodeParents(rctx, fc.Args["nodePath"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.NavigatorNodeInfo)
	fc.Result = res
	return ec.marshalNNavigatorNodeInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorNodeInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_navNodeParents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NavigatorNodeInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_NavigatorNodeInfo_name(ctx, field)
			case "fullName":
				return ec.fieldContext_NavigatorNodeInfo_fullName(ctx, field)
			case "icon":
				return ec.fieldContext_NavigatorNodeInfo_icon(ctx, field)
			case "description":
				return ec.fieldContext_NavigatorNodeInfo_description(ctx, field)
			case "nodeType":
				return ec.fieldContext_NavigatorNodeInfo_nodeType(ctx, field)
			case "hasChildren":
				return ec.fieldContext_NavigatorNodeInfo_hasChildren(ctx, field)
			case "object":
				return ec.fieldContext_NavigatorNodeInfo_object(ctx, field)
			case "features":
				return ec.fieldContext_NavigatorNodeInfo_features(ctx, field)
			case "nodeDetails":
				return ec.fieldContext_NavigatorNodeInfo_nodeDetails(ctx, field)
			case "folder":
				return ec.fieldContext_NavigatorNodeInfo_folder(ctx, field)
			case "inline":
				return ec.fieldContext_NavigatorNodeInfo_inline(ctx, field)
			case "navigable":
				return ec.fieldContext_NavigatorNodeInfo_navigable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NavigatorNodeInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_navNodeParents_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_navNodeInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_navNodeInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NavNodeInfo(rctx, fc.Args["nodePath"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NavigatorNodeInfo)
	fc.Result = res
	return ec.marshalNNavigatorNodeInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorNodeInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_navNodeInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_NavigatorNodeInfo_id(ctx, field)
			case "name":
				return ec.fieldContext_NavigatorNodeInfo_name(ctx, field)
			case "fullName":
				return ec.fieldContext_NavigatorNodeInfo_fullName(ctx, field)
			case "icon":
				return ec.fieldContext_NavigatorNodeInfo_icon(ctx, field)
			case "description":
				return ec.fieldContext_NavigatorNodeInfo_description(ctx, field)
			case "nodeType":
				return ec.fieldContext_NavigatorNodeInfo_nodeType(ctx, field)
			case "hasChildren":
				return ec.fieldContext_NavigatorNodeInfo_hasChildren(ctx, field)
			case "object":
				return ec.fieldContext_NavigatorNodeInfo_object(ctx, field)
			case "features":
				return ec.fieldContext_NavigatorNodeInfo_features(ctx, field)
			case "nodeDetails":
				return ec.fieldContext_NavigatorNodeInfo_nodeDetails(ctx, field)
			case "folder":
				return ec.fieldContext_NavigatorNodeInfo_folder(ctx, field)
			case "inline":
				return ec.fieldContext_NavigatorNodeInfo_inline(ctx, field)
			case "navigable":
				return ec.fieldContext_NavigatorNodeInfo_navigable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NavigatorNodeInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_navNodeInfo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_navRefreshNode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_navRefreshNode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NavRefreshNode(rctx, fc.Args["nodePath"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_navRefreshNode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_navRefreshNode_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_navGetStructContainers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_navGetStructContainers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NavGetStructContainers(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(*string), fc.Args["catalog"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DatabaseStructContainers)
	fc.Result = res
	return ec.marshalNDatabaseStructContainers2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseStructContainers(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_navGetStructContainers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "catalogList":
				return ec.fieldContext_DatabaseStructContainers_catalogList(ctx, field)
			case "schemaList":
				return ec.fieldContext_DatabaseStructContainers_schemaList(ctx, field)
			case "supportsCatalogChange":
				return ec.fieldContext_DatabaseStructContainers_supportsCatalogChange(ctx, field)
			case "supportsSchemaChange":
				return ec.fieldContext_DatabaseStructContainers_supportsSchemaChange(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DatabaseStructContainers", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_navGetStructContainers_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_rmListProjects(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rmListProjects(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RmListProjects(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RMProject)
	fc.Result = res
	return ec.marshalNRMProject2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐRMProjectᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rmListProjects(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_RMProject_id(ctx, field)
			case "name":
				return ec.fieldContext_RMProject_name(ctx, field)
			case "description":
				return ec.fieldContext_RMProject_description(ctx, field)
			case "shared":
				return ec.fieldContext_RMProject_shared(ctx, field)
			case "createTime":
				return ec.fieldContext_RMProject_createTime(ctx, field)
			case "creator":
				return ec.fieldContext_RMProject_creator(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RMProject", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_rmListResources(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rmListResources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RmListResources(rctx, fc.Args["projectId"].(string), fc.Args["folder"].(*string), fc.Args["nameMask"].(*string), fc.Args["readProperties"].(*bool), fc.Args["readHistory"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.RMResource)
	fc.Result = res
	return ec.marshalNRMResource2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐRMResourceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rmListResources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_RMResource_name(ctx, field)
			case "folder":
				return ec.fieldContext_RMResource_folder(ctx, field)
			case "length":
				return ec.fieldContext_RMResource_length(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type RMResource", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rmListResources_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_rmReadResourceAsString(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_rmReadResourceAsString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().RmReadResourceAsString(rctx, fc.Args["projectId"].(string), fc.Args["resourcePath"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_rmReadResourceAsString(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_rmReadResourceAsString_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sqlDialectInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sqlDialectInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SQLDialectInfo(rctx, fc.Args["connectionId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SQLDialectInfo)
	fc.Result = res
	return ec.marshalOSQLDialectInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLDialectInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sqlDialectInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_SQLDialectInfo_name(ctx, field)
			case "dataTypes":
				return ec.fieldContext_SQLDialectInfo_dataTypes(ctx, field)
			case "functions":
				return ec.fieldContext_SQLDialectInfo_functions(ctx, field)
			case "reservedWords":
				return ec.fieldContext_SQLDialectInfo_reservedWords(ctx, field)
			case "quoteStrings":
				return ec.fieldContext_SQLDialectInfo_quoteStrings(ctx, field)
			case "singleLineComments":
				return ec.fieldContext_SQLDialectInfo_singleLineComments(ctx, field)
			case "multiLineComments":
				return ec.fieldContext_SQLDialectInfo_multiLineComments(ctx, field)
			case "catalogSeparator":
				return ec.fieldContext_SQLDialectInfo_catalogSeparator(ctx, field)
			case "structSeparator":
				return ec.fieldContext_SQLDialectInfo_structSeparator(ctx, field)
			case "scriptDelimiter":
				return ec.fieldContext_SQLDialectInfo_scriptDelimiter(ctx, field)
			case "supportsExplainExecutionPlan":
				return ec.fieldContext_SQLDialectInfo_supportsExplainExecutionPlan(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLDialectInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sqlDialectInfo_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sqlListContexts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sqlListContexts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SQLListContexts(rctx, fc.Args["connectionId"].(*string), fc.Args["contextId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SQLContextInfo)
	fc.Result = res
	return ec.marshalNSQLContextInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLContextInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sqlListContexts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SQLContextInfo_id(ctx, field)
			case "connectionId":
				return ec.fieldContext_SQLContextInfo_connectionId(ctx, field)
			case "defaultCatalog":
				return ec.fieldContext_SQLContextInfo_defaultCatalog(ctx, field)
			case "defaultSchema":
				return ec.fieldContext_SQLContextInfo_defaultSchema(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLContextInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sqlListContexts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sqlCompletionProposals(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sqlCompletionProposals(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SQLCompletionProposals(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string), fc.Args["query"].(string), fc.Args["position"].(int), fc.Args["maxResults"].(*int), fc.Args["simpleMode"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SQLCompletionProposal)
	fc.Result = res
	return ec.marshalOSQLCompletionProposal2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLCompletionProposal(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sqlCompletionProposals(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "displayString":
				return ec.fieldContext_SQLCompletionProposal_displayString(ctx, field)
			case "type":
				return ec.fieldContext_SQLCompletionProposal_type(ctx, field)
			case "score":
				return ec.fieldContext_SQLCompletionProposal_score(ctx, field)
			case "replacementString":
				return ec.fieldContext_SQLCompletionProposal_replacementString(ctx, field)
			case "replacementOffset":
				return ec.fieldContext_SQLCompletionProposal_replacementOffset(ctx, field)
			case "replacementLength":
				return ec.fieldContext_SQLCompletionProposal_replacementLength(ctx, field)
			case "cursorPosition":
				return ec.fieldContext_SQLCompletionProposal_cursorPosition(ctx, field)
			case "icon":
				return ec.fieldContext_SQLCompletionProposal_icon(ctx, field)
			case "nodePath":
				return ec.fieldContext_SQLCompletionProposal_nodePath(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLCompletionProposal", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sqlCompletionProposals_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sqlFormatQuery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sqlFormatQuery(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SQLFormatQuery(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string), fc.Args["query"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sqlFormatQuery(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sqlFormatQuery_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sqlSupportedOperations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sqlSupportedOperations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SQLSupportedOperations(rctx, fc.Args["connectionId"].(string), fc.Args["contextId"].(string), fc.Args["resultsId"].(string), fc.Args["attributeIndex"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DataTypeLogicalOperation)
	fc.Result = res
	return ec.marshalNDataTypeLogicalOperation2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDataTypeLogicalOperationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sqlSupportedOperations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DataTypeLogicalOperation_id(ctx, field)
			case "expression":
				return ec.fieldContext_DataTypeLogicalOperation_expression(ctx, field)
			case "argumentCount":
				return ec.fieldContext_DataTypeLogicalOperation_argumentCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DataTypeLogicalOperation", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sqlSupportedOperations_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sqlEntityQueryGenerators(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sqlEntityQueryGenerators(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SQLEntityQueryGenerators(rctx, fc.Args["nodePathList"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SQLQueryGenerator)
	fc.Result = res
	return ec.marshalNSQLQueryGenerator2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLQueryGeneratorᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sqlEntityQueryGenerators(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SQLQueryGenerator_id(ctx, field)
			case "label":
				return ec.fieldContext_SQLQueryGenerator_label(ctx, field)
			case "description":
				return ec.fieldContext_SQLQueryGenerator_description(ctx, field)
			case "order":
				return ec.fieldContext_SQLQueryGenerator_order(ctx, field)
			case "multiObject":
				return ec.fieldContext_SQLQueryGenerator_multiObject(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLQueryGenerator", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sqlEntityQueryGenerators_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sqlGenerateEntityQuery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sqlGenerateEntityQuery(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SQLGenerateEntityQuery(rctx, fc.Args["generatorId"].(string),
			func() interface{} {
				if fc.Args["options"] == nil {
					return nil
				}
				return fc.Args["options"].(interface{})
			}(), fc.Args["nodePathList"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sqlGenerateEntityQuery(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sqlGenerateEntityQuery_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sqlParseScript(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sqlParseScript(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SQLParseScript(rctx, fc.Args["connectionId"].(string), fc.Args["script"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SQLScriptInfo)
	fc.Result = res
	return ec.marshalNSQLScriptInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLScriptInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sqlParseScript(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "queries":
				return ec.fieldContext_SQLScriptInfo_queries(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLScriptInfo", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sqlParseScript_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_sqlParseQuery(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_sqlParseQuery(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SQLParseQuery(rctx, fc.Args["connectionId"].(string), fc.Args["script"].(string), fc.Args["position"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SQLScriptQuery)
	fc.Result = res
	return ec.marshalNSQLScriptQuery2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLScriptQuery(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_sqlParseQuery(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "start":
				return ec.fieldContext_SQLScriptQuery_start(ctx, field)
			case "end":
				return ec.fieldContext_SQLScriptQuery_end(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLScriptQuery", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_sqlParseQuery_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _RMProject_id(ctx context.Context, field graphql.CollectedField, obj *model.RMProject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RMProject_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RMProject_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RMProject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RMProject_name(ctx context.Context, field graphql.CollectedField, obj *model.RMProject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RMProject_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RMProject_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RMProject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RMProject_description(ctx context.Context, field graphql.CollectedField, obj *model.RMProject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RMProject_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RMProject_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RMProject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RMProject_shared(ctx context.Context, field graphql.CollectedField, obj *model.RMProject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RMProject_shared(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Shared, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RMProject_shared(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RMProject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RMProject_createTime(ctx context.Context, field graphql.CollectedField, obj *model.RMProject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RMProject_createTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RMProject_createTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RMProject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RMProject_creator(ctx context.Context, field graphql.CollectedField, obj *model.RMProject) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RMProject_creator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RMProject_creator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RMProject",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RMResource_name(ctx context.Context, field graphql.CollectedField, obj *model.RMResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RMResource_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RMResource_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RMResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RMResource_folder(ctx context.Context, field graphql.CollectedField, obj *model.RMResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RMResource_folder(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Folder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RMResource_folder(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RMResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _RMResource_length(ctx context.Context, field graphql.CollectedField, obj *model.RMResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_RMResource_length(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Length, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_RMResource_length(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "RMResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLCompletionProposal_displayString(ctx context.Context, field graphql.CollectedField, obj *model.SQLCompletionProposal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLCompletionProposal_displayString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLCompletionProposal_displayString(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLCompletionProposal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLCompletionProposal_type(ctx context.Context, field graphql.CollectedField, obj *model.SQLCompletionProposal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLCompletionProposal_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLCompletionProposal_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLCompletionProposal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLCompletionProposal_score(ctx context.Context, field graphql.CollectedField, obj *model.SQLCompletionProposal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLCompletionProposal_score(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLCompletionProposal_score(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLCompletionProposal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLCompletionProposal_replacementString(ctx context.Context, field graphql.CollectedField, obj *model.SQLCompletionProposal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLCompletionProposal_replacementString(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplacementString, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLCompletionProposal_replacementString(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLCompletionProposal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLCompletionProposal_replacementOffset(ctx context.Context, field graphql.CollectedField, obj *model.SQLCompletionProposal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLCompletionProposal_replacementOffset(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplacementOffset, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLCompletionProposal_replacementOffset(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLCompletionProposal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLCompletionProposal_replacementLength(ctx context.Context, field graphql.CollectedField, obj *model.SQLCompletionProposal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLCompletionProposal_replacementLength(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplacementLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLCompletionProposal_replacementLength(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLCompletionProposal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLCompletionProposal_cursorPosition(ctx context.Context, field graphql.CollectedField, obj *model.SQLCompletionProposal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLCompletionProposal_cursorPosition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CursorPosition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLCompletionProposal_cursorPosition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLCompletionProposal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLCompletionProposal_icon(ctx context.Context, field graphql.CollectedField, obj *model.SQLCompletionProposal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLCompletionProposal_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLCompletionProposal_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLCompletionProposal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLCompletionProposal_nodePath(ctx context.Context, field graphql.CollectedField, obj *model.SQLCompletionProposal) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLCompletionProposal_nodePath(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodePath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLCompletionProposal_nodePath(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLCompletionProposal",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLContextInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.SQLContextInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLContextInfo_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLContextInfo_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLContextInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLContextInfo_connectionId(ctx context.Context, field graphql.CollectedField, obj *model.SQLContextInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLContextInfo_connectionId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConnectionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLContextInfo_connectionId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLContextInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLContextInfo_defaultCatalog(ctx context.Context, field graphql.CollectedField, obj *model.SQLContextInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLContextInfo_defaultCatalog(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultCatalog, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLContextInfo_defaultCatalog(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLContextInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLContextInfo_defaultSchema(ctx context.Context, field graphql.CollectedField, obj *model.SQLContextInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLContextInfo_defaultSchema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultSchema, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLContextInfo_defaultSchema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLContextInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLDialectInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.SQLDialectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLDialectInfo_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLDialectInfo_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLDialectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLDialectInfo_dataTypes(ctx context.Context, field graphql.CollectedField, obj *model.SQLDialectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLDialectInfo_dataTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataTypes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalNString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLDialectInfo_dataTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLDialectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLDialectInfo_functions(ctx context.Context, field graphql.CollectedField, obj *model.SQLDialectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLDialectInfo_functions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Functions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalNString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLDialectInfo_functions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLDialectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLDialectInfo_reservedWords(ctx context.Context, field graphql.CollectedField, obj *model.SQLDialectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLDialectInfo_reservedWords(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReservedWords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalNString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLDialectInfo_reservedWords(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLDialectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLDialectInfo_quoteStrings(ctx context.Context, field graphql.CollectedField, obj *model.SQLDialectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLDialectInfo_quoteStrings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QuoteStrings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([][]*string)
	fc.Result = res
	return ec.marshalNString2ᚕᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLDialectInfo_quoteStrings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLDialectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLDialectInfo_singleLineComments(ctx context.Context, field graphql.CollectedField, obj *model.SQLDialectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLDialectInfo_singleLineComments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SingleLineComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalNString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLDialectInfo_singleLineComments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLDialectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLDialectInfo_multiLineComments(ctx context.Context, field graphql.CollectedField, obj *model.SQLDialectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLDialectInfo_multiLineComments(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MultiLineComments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([][]*string)
	fc.Result = res
	return ec.marshalNString2ᚕᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLDialectInfo_multiLineComments(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLDialectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLDialectInfo_catalogSeparator(ctx context.Context, field graphql.CollectedField, obj *model.SQLDialectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLDialectInfo_catalogSeparator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CatalogSeparator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLDialectInfo_catalogSeparator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLDialectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLDialectInfo_structSeparator(ctx context.Context, field graphql.CollectedField, obj *model.SQLDialectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLDialectInfo_structSeparator(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StructSeparator, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLDialectInfo_structSeparator(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLDialectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLDialectInfo_scriptDelimiter(ctx context.Context, field graphql.CollectedField, obj *model.SQLDialectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLDialectInfo_scriptDelimiter(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ScriptDelimiter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLDialectInfo_scriptDelimiter(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLDialectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLDialectInfo_supportsExplainExecutionPlan(ctx context.Context, field graphql.CollectedField, obj *model.SQLDialectInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLDialectInfo_supportsExplainExecutionPlan(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportsExplainExecutionPlan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLDialectInfo_supportsExplainExecutionPlan(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLDialectInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecuteInfo_statusMessage(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecuteInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecuteInfo_statusMessage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StatusMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecuteInfo_statusMessage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecuteInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecuteInfo_duration(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecuteInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecuteInfo_duration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecuteInfo_duration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecuteInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecuteInfo_filterText(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecuteInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecuteInfo_filterText(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FilterText, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecuteInfo_filterText(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecuteInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecuteInfo_results(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecuteInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecuteInfo_results(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Results, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SQLQueryResults)
	fc.Result = res
	return ec.marshalNSQLQueryResults2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLQueryResultsᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecuteInfo_results(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecuteInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "title":
				return ec.fieldContext_SQLQueryResults_title(ctx, field)
			case "updateRowCount":
				return ec.fieldContext_SQLQueryResults_updateRowCount(ctx, field)
			case "sourceQuery":
				return ec.fieldContext_SQLQueryResults_sourceQuery(ctx, field)
			case "dataFormat":
				return ec.fieldContext_SQLQueryResults_dataFormat(ctx, field)
			case "resultSet":
				return ec.fieldContext_SQLQueryResults_resultSet(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLQueryResults", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecutionPlan_query(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecutionPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecutionPlan_query(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Query, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecutionPlan_query(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecutionPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecutionPlan_nodes(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecutionPlan) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecutionPlan_nodes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SQLExecutionPlanNode)
	fc.Result = res
	return ec.marshalNSQLExecutionPlanNode2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecutionPlanNodeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecutionPlan_nodes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecutionPlan",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SQLExecutionPlanNode_id(ctx, field)
			case "parentId":
				return ec.fieldContext_SQLExecutionPlanNode_parentId(ctx, field)
			case "kind":
				return ec.fieldContext_SQLExecutionPlanNode_kind(ctx, field)
			case "name":
				return ec.fieldContext_SQLExecutionPlanNode_name(ctx, field)
			case "type":
				return ec.fieldContext_SQLExecutionPlanNode_type(ctx, field)
			case "condition":
				return ec.fieldContext_SQLExecutionPlanNode_condition(ctx, field)
			case "description":
				return ec.fieldContext_SQLExecutionPlanNode_description(ctx, field)
			case "properties":
				return ec.fieldContext_SQLExecutionPlanNode_properties(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLExecutionPlanNode", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecutionPlanNode_id(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecutionPlanNode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecutionPlanNode_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecutionPlanNode_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecutionPlanNode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecutionPlanNode_parentId(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecutionPlanNode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecutionPlanNode_parentId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecutionPlanNode_parentId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecutionPlanNode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecutionPlanNode_kind(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecutionPlanNode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecutionPlanNode_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecutionPlanNode_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecutionPlanNode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecutionPlanNode_name(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecutionPlanNode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecutionPlanNode_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecutionPlanNode_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecutionPlanNode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecutionPlanNode_type(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecutionPlanNode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecutionPlanNode_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecutionPlanNode_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecutionPlanNode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecutionPlanNode_condition(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecutionPlanNode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecutionPlanNode_condition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Condition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecutionPlanNode_condition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecutionPlanNode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecutionPlanNode_description(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecutionPlanNode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecutionPlanNode_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecutionPlanNode_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecutionPlanNode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLExecutionPlanNode_properties(ctx context.Context, field graphql.CollectedField, obj *model.SQLExecutionPlanNode) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLExecutionPlanNode_properties(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Properties, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ObjectPropertyInfo)
	fc.Result = res
	return ec.marshalNObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLExecutionPlanNode_properties(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLExecutionPlanNode",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ObjectPropertyInfo_id(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectPropertyInfo_displayName(ctx, field)
			case "description":
				return ec.fieldContext_ObjectPropertyInfo_description(ctx, field)
			case "category":
				return ec.fieldContext_ObjectPropertyInfo_category(ctx, field)
			case "dataType":
				return ec.fieldContext_ObjectPropertyInfo_dataType(ctx, field)
			case "value":
				return ec.fieldContext_ObjectPropertyInfo_value(ctx, field)
			case "validValues":
				return ec.fieldContext_ObjectPropertyInfo_validValues(ctx, field)
			case "defaultValue":
				return ec.fieldContext_ObjectPropertyInfo_defaultValue(ctx, field)
			case "length":
				return ec.fieldContext_ObjectPropertyInfo_length(ctx, field)
			case "features":
				return ec.fieldContext_ObjectPropertyInfo_features(ctx, field)
			case "order":
				return ec.fieldContext_ObjectPropertyInfo_order(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectPropertyInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLQueryGenerator_id(ctx context.Context, field graphql.CollectedField, obj *model.SQLQueryGenerator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLQueryGenerator_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLQueryGenerator_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLQueryGenerator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLQueryGenerator_label(ctx context.Context, field graphql.CollectedField, obj *model.SQLQueryGenerator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLQueryGenerator_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLQueryGenerator_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLQueryGenerator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLQueryGenerator_description(ctx context.Context, field graphql.CollectedField, obj *model.SQLQueryGenerator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLQueryGenerator_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLQueryGenerator_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLQueryGenerator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLQueryGenerator_order(ctx context.Context, field graphql.CollectedField, obj *model.SQLQueryGenerator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLQueryGenerator_order(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Order, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLQueryGenerator_order(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLQueryGenerator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLQueryGenerator_multiObject(ctx context.Context, field graphql.CollectedField, obj *model.SQLQueryGenerator) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLQueryGenerator_multiObject(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MultiObject, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLQueryGenerator_multiObject(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLQueryGenerator",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLQueryResults_title(ctx context.Context, field graphql.CollectedField, obj *model.SQLQueryResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLQueryResults_title(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLQueryResults_title(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLQueryResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLQueryResults_updateRowCount(ctx context.Context, field graphql.CollectedField, obj *model.SQLQueryResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLQueryResults_updateRowCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdateRowCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLQueryResults_updateRowCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLQueryResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLQueryResults_sourceQuery(ctx context.Context, field graphql.CollectedField, obj *model.SQLQueryResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLQueryResults_sourceQuery(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SourceQuery, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLQueryResults_sourceQuery(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLQueryResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLQueryResults_dataFormat(ctx context.Context, field graphql.CollectedField, obj *model.SQLQueryResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLQueryResults_dataFormat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataFormat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ResultDataFormat)
	fc.Result = res
	return ec.marshalOResultDataFormat2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐResultDataFormat(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLQueryResults_dataFormat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLQueryResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ResultDataFormat does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLQueryResults_resultSet(ctx context.Context, field graphql.CollectedField, obj *model.SQLQueryResults) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLQueryResults_resultSet(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResultSet, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.SQLResultSet)
	fc.Result = res
	return ec.marshalOSQLResultSet2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultSet(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLQueryResults_resultSet(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLQueryResults",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_SQLResultSet_id(ctx, field)
			case "columns":
				return ec.fieldContext_SQLResultSet_columns(ctx, field)
			case "rows":
				return ec.fieldContext_SQLResultSet_rows(ctx, field)
			case "singleEntity":
				return ec.fieldContext_SQLResultSet_singleEntity(ctx, field)
			case "hasMoreData":
				return ec.fieldContext_SQLResultSet_hasMoreData(ctx, field)
			case "hasRowIdentifier":
				return ec.fieldContext_SQLResultSet_hasRowIdentifier(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLResultSet", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_position(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_position(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_name(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_label(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_icon(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_entityName(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_entityName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EntityName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_entityName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_dataKind(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_dataKind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DataKind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_dataKind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_typeName(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_typeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_typeName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_fullTypeName(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_fullTypeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FullTypeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_fullTypeName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_maxLength(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_maxLength(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxLength, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_maxLength(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_scale(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_scale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Scale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_scale(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_precision(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_precision(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Precision, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_precision(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_required(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_required(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Required, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_required(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_readOnly(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_readOnly(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadOnly, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_readOnly(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_readOnlyStatus(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_readOnlyStatus(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadOnlyStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_readOnlyStatus(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultColumn_supportedOperations(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultColumn) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultColumn_supportedOperations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportedOperations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.DataTypeLogicalOperation)
	fc.Result = res
	return ec.marshalNDataTypeLogicalOperation2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDataTypeLogicalOperationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultColumn_supportedOperations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultColumn",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DataTypeLogicalOperation_id(ctx, field)
			case "expression":
				return ec.fieldContext_DataTypeLogicalOperation_expression(ctx, field)
			case "argumentCount":
				return ec.fieldContext_DataTypeLogicalOperation_argumentCount(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DataTypeLogicalOperation", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultSet_id(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultSet_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultSet_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultSet_columns(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultSet_columns(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Columns, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SQLResultColumn)
	fc.Result = res
	return ec.marshalOSQLResultColumn2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultColumn(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultSet_columns(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "position":
				return ec.fieldContext_SQLResultColumn_position(ctx, field)
			case "name":
				return ec.fieldContext_SQLResultColumn_name(ctx, field)
			case "label":
				return ec.fieldContext_SQLResultColumn_label(ctx, field)
			case "icon":
				return ec.fieldContext_SQLResultColumn_icon(ctx, field)
			case "entityName":
				return ec.fieldContext_SQLResultColumn_entityName(ctx, field)
			case "dataKind":
				return ec.fieldContext_SQLResultColumn_dataKind(ctx, field)
			case "typeName":
				return ec.fieldContext_SQLResultColumn_typeName(ctx, field)
			case "fullTypeName":
				return ec.fieldContext_SQLResultColumn_fullTypeName(ctx, field)
			case "maxLength":
				return ec.fieldContext_SQLResultColumn_maxLength(ctx, field)
			case "scale":
				return ec.fieldContext_SQLResultColumn_scale(ctx, field)
			case "precision":
				return ec.fieldContext_SQLResultColumn_precision(ctx, field)
			case "required":
				return ec.fieldContext_SQLResultColumn_required(ctx, field)
			case "readOnly":
				return ec.fieldContext_SQLResultColumn_readOnly(ctx, field)
			case "readOnlyStatus":
				return ec.fieldContext_SQLResultColumn_readOnlyStatus(ctx, field)
			case "supportedOperations":
				return ec.fieldContext_SQLResultColumn_supportedOperations(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLResultColumn", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultSet_rows(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultSet_rows(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Rows, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([][]interface{})
	fc.Result = res
	return ec.marshalOObject2ᚕᚕinterface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultSet_rows(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultSet_singleEntity(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultSet_singleEntity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SingleEntity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultSet_singleEntity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultSet_hasMoreData(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultSet_hasMoreData(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasMoreData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultSet_hasMoreData(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLResultSet_hasRowIdentifier(ctx context.Context, field graphql.CollectedField, obj *model.SQLResultSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLResultSet_hasRowIdentifier(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasRowIdentifier, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLResultSet_hasRowIdentifier(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLResultSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLScriptInfo_queries(ctx context.Context, field graphql.CollectedField, obj *model.SQLScriptInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLScriptInfo_queries(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Queries, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.SQLScriptQuery)
	fc.Result = res
	return ec.marshalNSQLScriptQuery2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLScriptQueryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLScriptInfo_queries(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLScriptInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "start":
				return ec.fieldContext_SQLScriptQuery_start(ctx, field)
			case "end":
				return ec.fieldContext_SQLScriptQuery_end(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type SQLScriptQuery", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLScriptQuery_start(ctx context.Context, field graphql.CollectedField, obj *model.SQLScriptQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLScriptQuery_start(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLScriptQuery_start(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLScriptQuery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SQLScriptQuery_end(ctx context.Context, field graphql.CollectedField, obj *model.SQLScriptQuery) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SQLScriptQuery_end(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SQLScriptQuery_end(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SQLScriptQuery",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_name(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_version(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_workspaceId(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_workspaceId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkspaceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_workspaceId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_serverURL(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_serverURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_serverURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_rootURI(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_rootURI(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RootURI, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_rootURI(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_hostName(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_hostName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_hostName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_anonymousAccessEnabled(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_anonymousAccessEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnonymousAccessEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_anonymousAccessEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_authenticationEnabled(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_authenticationEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthenticationEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_authenticationEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_supportsCustomConnections(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_supportsCustomConnections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportsCustomConnections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_supportsCustomConnections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_supportsConnectionBrowser(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_supportsConnectionBrowser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportsConnectionBrowser, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_supportsConnectionBrowser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_supportsWorkspaces(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_supportsWorkspaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportsWorkspaces, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_supportsWorkspaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_resourceManagerEnabled(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_resourceManagerEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceManagerEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_resourceManagerEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_publicCredentialsSaveEnabled(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_publicCredentialsSaveEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublicCredentialsSaveEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_publicCredentialsSaveEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_adminCredentialsSaveEnabled(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_adminCredentialsSaveEnabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdminCredentialsSaveEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_adminCredentialsSaveEnabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_licenseRequired(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_licenseRequired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseRequired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_licenseRequired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_licenseValid(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_licenseValid(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LicenseValid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_licenseValid(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_sessionExpireTime(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_sessionExpireTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SessionExpireTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_sessionExpireTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_localHostAddress(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_localHostAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocalHostAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_localHostAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_configurationMode(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_configurationMode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfigurationMode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_configurationMode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_developmentMode(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_developmentMode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DevelopmentMode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_developmentMode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_redirectOnFederatedAuth(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_redirectOnFederatedAuth(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RedirectOnFederatedAuth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_redirectOnFederatedAuth(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_enabledFeatures(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_enabledFeatures(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnabledFeatures, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_enabledFeatures(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_enabledAuthProviders(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_enabledAuthProviders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnabledAuthProviders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_enabledAuthProviders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_supportedLanguages(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_supportedLanguages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SupportedLanguages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ServerLanguage)
	fc.Result = res
	return ec.marshalNServerLanguage2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerLanguageᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_supportedLanguages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "isoCode":
				return ec.fieldContext_ServerLanguage_isoCode(ctx, field)
			case "displayName":
				return ec.fieldContext_ServerLanguage_displayName(ctx, field)
			case "nativeName":
				return ec.fieldContext_ServerLanguage_nativeName(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServerLanguage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_services(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_services(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Services, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.WebServiceConfig)
	fc.Result = res
	return ec.marshalOWebServiceConfig2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐWebServiceConfig(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_services(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_WebServiceConfig_id(ctx, field)
			case "name":
				return ec.fieldContext_WebServiceConfig_name(ctx, field)
			case "description":
				return ec.fieldContext_WebServiceConfig_description(ctx, field)
			case "bundleVersion":
				return ec.fieldContext_WebServiceConfig_bundleVersion(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type WebServiceConfig", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_productConfiguration(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_productConfiguration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductConfiguration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_productConfiguration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_productInfo(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_productInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProductInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ProductInfo)
	fc.Result = res
	return ec.marshalNProductInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐProductInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_productInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ProductInfo_id(ctx, field)
			case "version":
				return ec.fieldContext_ProductInfo_version(ctx, field)
			case "name":
				return ec.fieldContext_ProductInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ProductInfo_description(ctx, field)
			case "buildTime":
				return ec.fieldContext_ProductInfo_buildTime(ctx, field)
			case "releaseTime":
				return ec.fieldContext_ProductInfo_releaseTime(ctx, field)
			case "licenseInfo":
				return ec.fieldContext_ProductInfo_licenseInfo(ctx, field)
			case "latestVersionInfo":
				return ec.fieldContext_ProductInfo_latestVersionInfo(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProductInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_defaultNavigatorSettings(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_defaultNavigatorSettings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultNavigatorSettings, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NavigatorSettings)
	fc.Result = res
	return ec.marshalNNavigatorSettings2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_defaultNavigatorSettings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "showSystemObjects":
				return ec.fieldContext_NavigatorSettings_showSystemObjects(ctx, field)
			case "showUtilityObjects":
				return ec.fieldContext_NavigatorSettings_showUtilityObjects(ctx, field)
			case "showOnlyEntities":
				return ec.fieldContext_NavigatorSettings_showOnlyEntities(ctx, field)
			case "mergeEntities":
				return ec.fieldContext_NavigatorSettings_mergeEntities(ctx, field)
			case "hideFolders":
				return ec.fieldContext_NavigatorSettings_hideFolders(ctx, field)
			case "hideSchemas":
				return ec.fieldContext_NavigatorSettings_hideSchemas(ctx, field)
			case "hideVirtualModel":
				return ec.fieldContext_NavigatorSettings_hideVirtualModel(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type NavigatorSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_disabledDrivers(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_disabledDrivers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisabledDrivers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_disabledDrivers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerConfig_resourceQuotas(ctx context.Context, field graphql.CollectedField, obj *model.ServerConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerConfig_resourceQuotas(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceQuotas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerConfig_resourceQuotas(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerError_message(ctx context.Context, field graphql.CollectedField, obj *model.ServerError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerError_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerError_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerError_errorCode(ctx context.Context, field graphql.CollectedField, obj *model.ServerError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerError_errorCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerError_errorCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerError_errorType(ctx context.Context, field graphql.CollectedField, obj *model.ServerError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerError_errorType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ErrorType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerError_errorType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerError_stackTrace(ctx context.Context, field graphql.CollectedField, obj *model.ServerError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerError_stackTrace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StackTrace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerError_stackTrace(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerError_causedBy(ctx context.Context, field graphql.CollectedField, obj *model.ServerError) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerError_causedBy(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CausedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ServerError)
	fc.Result = res
	return ec.marshalOServerError2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerError(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerError_causedBy(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerError",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "message":
				return ec.fieldContext_ServerError_message(ctx, field)
			case "errorCode":
				return ec.fieldContext_ServerError_errorCode(ctx, field)
			case "errorType":
				return ec.fieldContext_ServerError_errorType(ctx, field)
			case "stackTrace":
				return ec.fieldContext_ServerError_stackTrace(ctx, field)
			case "causedBy":
				return ec.fieldContext_ServerError_causedBy(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServerError", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerLanguage_isoCode(ctx context.Context, field graphql.CollectedField, obj *model.ServerLanguage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerLanguage_isoCode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsoCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerLanguage_isoCode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerLanguage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerLanguage_displayName(ctx context.Context, field graphql.CollectedField, obj *model.ServerLanguage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerLanguage_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerLanguage_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerLanguage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerLanguage_nativeName(ctx context.Context, field graphql.CollectedField, obj *model.ServerLanguage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerLanguage_nativeName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NativeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerLanguage_nativeName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerLanguage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerMessage_time(ctx context.Context, field graphql.CollectedField, obj *model.ServerMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerMessage_time(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Time, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerMessage_time(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServerMessage_message(ctx context.Context, field graphql.CollectedField, obj *model.ServerMessage) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServerMessage_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServerMessage_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServerMessage",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionInfo_createTime(ctx context.Context, field graphql.CollectedField, obj *model.SessionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionInfo_createTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionInfo_createTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionInfo_lastAccessTime(ctx context.Context, field graphql.CollectedField, obj *model.SessionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionInfo_lastAccessTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastAccessTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionInfo_lastAccessTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionInfo_locale(ctx context.Context, field graphql.CollectedField, obj *model.SessionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionInfo_locale(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locale, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionInfo_locale(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionInfo_cacheExpired(ctx context.Context, field graphql.CollectedField, obj *model.SessionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionInfo_cacheExpired(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CacheExpired, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionInfo_cacheExpired(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionInfo_serverMessages(ctx context.Context, field graphql.CollectedField, obj *model.SessionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionInfo_serverMessages(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServerMessages, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ServerMessage)
	fc.Result = res
	return ec.marshalOServerMessage2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerMessage(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionInfo_serverMessages(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "time":
				return ec.fieldContext_ServerMessage_time(ctx, field)
			case "message":
				return ec.fieldContext_ServerMessage_message(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServerMessage", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionInfo_connections(ctx context.Context, field graphql.CollectedField, obj *model.SessionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionInfo_connections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Connections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConnectionInfo)
	fc.Result = res
	return ec.marshalNConnectionInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfoᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionInfo_connections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionInfo_id(ctx, field)
			case "driverId":
				return ec.fieldContext_ConnectionInfo_driverId(ctx, field)
			case "name":
				return ec.fieldContext_ConnectionInfo_name(ctx, field)
			case "description":
				return ec.fieldContext_ConnectionInfo_description(ctx, field)
			case "host":
				return ec.fieldContext_ConnectionInfo_host(ctx, field)
			case "port":
				return ec.fieldContext_ConnectionInfo_port(ctx, field)
			case "serverName":
				return ec.fieldContext_ConnectionInfo_serverName(ctx, field)
			case "databaseName":
				return ec.fieldContext_ConnectionInfo_databaseName(ctx, field)
			case "url":
				return ec.fieldContext_ConnectionInfo_url(ctx, field)
			case "properties":
				return ec.fieldContext_ConnectionInfo_properties(ctx, field)
			case "template":
				return ec.fieldContext_ConnectionInfo_template(ctx, field)
			case "connected":
				return ec.fieldContext_ConnectionInfo_connected(ctx, field)
			case "provided":
				return ec.fieldContext_ConnectionInfo_provided(ctx, field)
			case "readOnly":
				return ec.fieldContext_ConnectionInfo_readOnly(ctx, field)
			case "useUrl":
				return ec.fieldContext_ConnectionInfo_useUrl(ctx, field)
			case "saveCredentials":
				return ec.fieldContext_ConnectionInfo_saveCredentials(ctx, field)
			case "folder":
				return ec.fieldContext_ConnectionInfo_folder(ctx, field)
			case "nodePath":
				return ec.fieldContext_ConnectionInfo_nodePath(ctx, field)
			case "connectTime":
				return ec.fieldContext_ConnectionInfo_connectTime(ctx, field)
			case "connectionError":
				return ec.fieldContext_ConnectionInfo_connectionError(ctx, field)
			case "serverVersion":
				return ec.fieldContext_ConnectionInfo_serverVersion(ctx, field)
			case "clientVersion":
				return ec.fieldContext_ConnectionInfo_clientVersion(ctx, field)
			case "origin":
				return ec.fieldContext_ConnectionInfo_origin(ctx, field)
			case "authNeeded":
				return ec.fieldContext_ConnectionInfo_authNeeded(ctx, field)
			case "authModel":
				return ec.fieldContext_ConnectionInfo_authModel(ctx, field)
			case "authProperties":
				return ec.fieldContext_ConnectionInfo_authProperties(ctx, field)
			case "providerProperties":
				return ec.fieldContext_ConnectionInfo_providerProperties(ctx, field)
			case "networkHandlersConfig":
				return ec.fieldContext_ConnectionInfo_networkHandlersConfig(ctx, field)
			case "features":
				return ec.fieldContext_ConnectionInfo_features(ctx, field)
			case "navigatorSettings":
				return ec.fieldContext_ConnectionInfo_navigatorSettings(ctx, field)
			case "supportedDataFormats":
				return ec.fieldContext_ConnectionInfo_supportedDataFormats(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _SessionInfo_actionParameters(ctx context.Context, field graphql.CollectedField, obj *model.SessionInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_SessionInfo_actionParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalOObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_SessionInfo_actionParameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "SessionInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAuthToken_authProvider(ctx context.Context, field graphql.CollectedField, obj *model.UserAuthToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAuthToken_authProvider(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthProvider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAuthToken_authProvider(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAuthToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAuthToken_authConfiguration(ctx context.Context, field graphql.CollectedField, obj *model.UserAuthToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAuthToken_authConfiguration(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthConfiguration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAuthToken_authConfiguration(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAuthToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAuthToken_loginTime(ctx context.Context, field graphql.CollectedField, obj *model.UserAuthToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAuthToken_loginTime(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoginTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNDateTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAuthToken_loginTime(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAuthToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DateTime does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAuthToken_userId(ctx context.Context, field graphql.CollectedField, obj *model.UserAuthToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAuthToken_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAuthToken_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAuthToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAuthToken_displayName(ctx context.Context, field graphql.CollectedField, obj *model.UserAuthToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAuthToken_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAuthToken_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAuthToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAuthToken_message(ctx context.Context, field graphql.CollectedField, obj *model.UserAuthToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAuthToken_message(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAuthToken_message(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAuthToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserAuthToken_origin(ctx context.Context, field graphql.CollectedField, obj *model.UserAuthToken) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserAuthToken_origin(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Origin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ObjectOrigin)
	fc.Result = res
	return ec.marshalNObjectOrigin2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectOrigin(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserAuthToken_origin(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserAuthToken",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "type":
				return ec.fieldContext_ObjectOrigin_type(ctx, field)
			case "subType":
				return ec.fieldContext_ObjectOrigin_subType(ctx, field)
			case "displayName":
				return ec.fieldContext_ObjectOrigin_displayName(ctx, field)
			case "icon":
				return ec.fieldContext_ObjectOrigin_icon(ctx, field)
			case "configuration":
				return ec.fieldContext_ObjectOrigin_configuration(ctx, field)
			case "details":
				return ec.fieldContext_ObjectOrigin_details(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ObjectOrigin", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_userId(ctx context.Context, field graphql.CollectedField, obj *model.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_userId(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_userId(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_displayName(ctx context.Context, field graphql.CollectedField, obj *model.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_authTokens(ctx context.Context, field graphql.CollectedField, obj *model.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_authTokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuthTokens, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.UserAuthToken)
	fc.Result = res
	return ec.marshalNUserAuthToken2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐUserAuthTokenᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_authTokens(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "authProvider":
				return ec.fieldContext_UserAuthToken_authProvider(ctx, field)
			case "authConfiguration":
				return ec.fieldContext_UserAuthToken_authConfiguration(ctx, field)
			case "loginTime":
				return ec.fieldContext_UserAuthToken_loginTime(ctx, field)
			case "userId":
				return ec.fieldContext_UserAuthToken_userId(ctx, field)
			case "displayName":
				return ec.fieldContext_UserAuthToken_displayName(ctx, field)
			case "message":
				return ec.fieldContext_UserAuthToken_message(ctx, field)
			case "origin":
				return ec.fieldContext_UserAuthToken_origin(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type UserAuthToken", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_linkedAuthProviders(ctx context.Context, field graphql.CollectedField, obj *model.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_linkedAuthProviders(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkedAuthProviders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_linkedAuthProviders(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_metaParameters(ctx context.Context, field graphql.CollectedField, obj *model.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_metaParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MetaParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_metaParameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _UserInfo_configurationParameters(ctx context.Context, field graphql.CollectedField, obj *model.UserInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_UserInfo_configurationParameters(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ConfigurationParameters, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(interface{})
	fc.Result = res
	return ec.marshalNObject2interface(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_UserInfo_configurationParameters(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "UserInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Object does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WebFeatureSet_id(ctx context.Context, field graphql.CollectedField, obj *model.WebFeatureSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WebFeatureSet_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WebFeatureSet_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WebFeatureSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WebFeatureSet_label(ctx context.Context, field graphql.CollectedField, obj *model.WebFeatureSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WebFeatureSet_label(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WebFeatureSet_label(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WebFeatureSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WebFeatureSet_description(ctx context.Context, field graphql.CollectedField, obj *model.WebFeatureSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WebFeatureSet_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WebFeatureSet_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WebFeatureSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WebFeatureSet_icon(ctx context.Context, field graphql.CollectedField, obj *model.WebFeatureSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WebFeatureSet_icon(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WebFeatureSet_icon(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WebFeatureSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WebFeatureSet_enabled(ctx context.Context, field graphql.CollectedField, obj *model.WebFeatureSet) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WebFeatureSet_enabled(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WebFeatureSet_enabled(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WebFeatureSet",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WebServiceConfig_id(ctx context.Context, field graphql.CollectedField, obj *model.WebServiceConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WebServiceConfig_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WebServiceConfig_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WebServiceConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WebServiceConfig_name(ctx context.Context, field graphql.CollectedField, obj *model.WebServiceConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WebServiceConfig_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WebServiceConfig_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WebServiceConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WebServiceConfig_description(ctx context.Context, field graphql.CollectedField, obj *model.WebServiceConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WebServiceConfig_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WebServiceConfig_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WebServiceConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _WebServiceConfig_bundleVersion(ctx context.Context, field graphql.CollectedField, obj *model.WebServiceConfig) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_WebServiceConfig_bundleVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BundleVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_WebServiceConfig_bundleVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "WebServiceConfig",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputConnectionConfig(ctx context.Context, obj interface{}) (model.ConnectionConfig, error) {
	var it model.ConnectionConfig
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"connectionId", "name", "description", "templateId", "driverId", "host", "port", "serverName", "databaseName", "url", "properties", "template", "readOnly", "saveCredentials", "authModelId", "credentials", "providerProperties", "networkHandlersConfig", "dataSourceId", "userName", "userPassword", "folder"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "connectionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connectionId"))
			it.ConnectionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "templateId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("templateId"))
			it.TemplateID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "driverId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("driverId"))
			it.DriverID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "host":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("host"))
			it.Host, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "port":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			it.Port, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "serverName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serverName"))
			it.ServerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "databaseName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("databaseName"))
			it.DatabaseName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("url"))
			it.URL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "properties":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("properties"))
			it.Properties, err = ec.unmarshalOObject2interface(ctx, v)
			if err != nil {
				return it, err
			}
		case "template":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("template"))
			it.Template, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "readOnly":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("readOnly"))
			it.ReadOnly, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "saveCredentials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("saveCredentials"))
			it.SaveCredentials, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "authModelId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authModelId"))
			it.AuthModelID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "credentials":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("credentials"))
			it.Credentials, err = ec.unmarshalOObject2interface(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerProperties":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerProperties"))
			it.ProviderProperties, err = ec.unmarshalOObject2interface(ctx, v)
			if err != nil {
				return it, err
			}
		case "networkHandlersConfig":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("networkHandlersConfig"))
			it.NetworkHandlersConfig, err = ec.unmarshalONetworkHandlerConfigInput2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerConfigInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dataSourceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataSourceId"))
			it.DataSourceID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userName"))
			it.UserName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userPassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userPassword"))
			it.UserPassword, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "folder":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("folder"))
			it.Folder, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataTransferParameters(ctx context.Context, obj interface{}) (model.DataTransferParameters, error) {
	var it model.DataTransferParameters
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"processorId", "settings", "processorProperties", "filter"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "processorId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processorId"))
			it.ProcessorID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "settings":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("settings"))
			it.Settings, err = ec.unmarshalOObject2interface(ctx, v)
			if err != nil {
				return it, err
			}
		case "processorProperties":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("processorProperties"))
			it.ProcessorProperties, err = ec.unmarshalNObject2interface(ctx, v)
			if err != nil {
				return it, err
			}
		case "filter":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
			it.Filter, err = ec.unmarshalOSQLDataFilter2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLDataFilter(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNavigatorSettingsInput(ctx context.Context, obj interface{}) (model.NavigatorSettingsInput, error) {
	var it model.NavigatorSettingsInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"showSystemObjects", "showUtilityObjects", "showOnlyEntities", "mergeEntities", "hideFolders", "hideSchemas", "hideVirtualModel"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "showSystemObjects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showSystemObjects"))
			it.ShowSystemObjects, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "showUtilityObjects":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showUtilityObjects"))
			it.ShowUtilityObjects, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "showOnlyEntities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showOnlyEntities"))
			it.ShowOnlyEntities, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "mergeEntities":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mergeEntities"))
			it.MergeEntities, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hideFolders":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hideFolders"))
			it.HideFolders, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hideSchemas":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hideSchemas"))
			it.HideSchemas, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		case "hideVirtualModel":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hideVirtualModel"))
			it.HideVirtualModel, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNetworkHandlerConfigInput(ctx context.Context, obj interface{}) (model.NetworkHandlerConfigInput, error) {
	var it model.NetworkHandlerConfigInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"id", "enabled", "authType", "userName", "password", "key", "savePassword", "properties"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabled"))
			it.Enabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "authType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authType"))
			it.AuthType, err = ec.unmarshalONetworkHandlerAuthType2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerAuthType(ctx, v)
			if err != nil {
				return it, err
			}
		case "userName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userName"))
			it.UserName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			it.Key, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "savePassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("savePassword"))
			it.SavePassword, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "properties":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("properties"))
			it.Properties, err = ec.unmarshalOObject2interface(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputObjectPropertyFilter(ctx context.Context, obj interface{}) (model.ObjectPropertyFilter, error) {
	var it model.ObjectPropertyFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"ids", "features", "categories", "dataTypes"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "ids":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ids"))
			it.Ids, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "features":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("features"))
			it.Features, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "categories":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("categories"))
			it.Categories, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "dataTypes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataTypes"))
			it.DataTypes, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSQLDataFilter(ctx context.Context, obj interface{}) (model.SQLDataFilter, error) {
	var it model.SQLDataFilter
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"offset", "limit", "constraints", "where", "orderBy"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "offset":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
			it.Offset, err = ec.unmarshalOFloat2ᚖfloat64(ctx, v)
			if err != nil {
				return it, err
			}
		case "limit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
			it.Limit, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "constraints":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("constraints"))
			it.Constraints, err = ec.unmarshalOSQLDataFilterConstraint2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLDataFilterConstraint(ctx, v)
			if err != nil {
				return it, err
			}
		case "where":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("where"))
			it.Where, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
			it.OrderBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSQLDataFilterConstraint(ctx context.Context, obj interface{}) (model.SQLDataFilterConstraint, error) {
	var it model.SQLDataFilterConstraint
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"attributePosition", "orderPosition", "orderAsc", "criteria", "operator", "value"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "attributePosition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("attributePosition"))
			it.AttributePosition, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderPosition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderPosition"))
			it.OrderPosition, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "orderAsc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderAsc"))
			it.OrderAsc, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "criteria":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("criteria"))
			it.Criteria, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "operator":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("operator"))
			it.Operator, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOObject2interface(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSQLResultRow(ctx context.Context, obj interface{}) (model.SQLResultRow, error) {
	var it model.SQLResultRow
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"data", "updateValues"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNObject2ᚕinterface(ctx, v)
			if err != nil {
				return it, err
			}
		case "updateValues":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updateValues"))
			it.UpdateValues, err = ec.unmarshalOObject2interface(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputServerConfigInput(ctx context.Context, obj interface{}) (model.ServerConfigInput, error) {
	var it model.ServerConfigInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	fieldsInOrder := [...]string{"serverName", "serverURL", "adminName", "adminPassword", "anonymousAccessEnabled", "authenticationEnabled", "customConnectionsEnabled", "publicCredentialsSaveEnabled", "adminCredentialsSaveEnabled", "resourceManagerEnabled", "enabledFeatures", "enabledAuthProviders", "disabledDrivers", "sessionExpireTime"}
	for _, k := range fieldsInOrder {
		v, ok := asMap[k]
		if !ok {
			continue
		}
		switch k {
		case "serverName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serverName"))
			it.ServerName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "serverURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serverURL"))
			it.ServerURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminName"))
			it.AdminName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminPassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminPassword"))
			it.AdminPassword, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "anonymousAccessEnabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("anonymousAccessEnabled"))
			it.AnonymousAccessEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "authenticationEnabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("authenticationEnabled"))
			it.AuthenticationEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "customConnectionsEnabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customConnectionsEnabled"))
			it.CustomConnectionsEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "publicCredentialsSaveEnabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("publicCredentialsSaveEnabled"))
			it.PublicCredentialsSaveEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "adminCredentialsSaveEnabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("adminCredentialsSaveEnabled"))
			it.AdminCredentialsSaveEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceManagerEnabled":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourceManagerEnabled"))
			it.ResourceManagerEnabled, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabledFeatures":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabledFeatures"))
			it.EnabledFeatures, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "enabledAuthProviders":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("enabledAuthProviders"))
			it.EnabledAuthProviders, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "disabledDrivers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("disabledDrivers"))
			it.DisabledDrivers, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "sessionExpireTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sessionExpireTime"))
			it.SessionExpireTime, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var adminAuthProviderConfigurationImplementors = []string{"AdminAuthProviderConfiguration"}

func (ec *executionContext) _AdminAuthProviderConfiguration(ctx context.Context, sel ast.SelectionSet, obj *model.AdminAuthProviderConfiguration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminAuthProviderConfigurationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminAuthProviderConfiguration")
		case "providerId":

			out.Values[i] = ec._AdminAuthProviderConfiguration_providerId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "id":

			out.Values[i] = ec._AdminAuthProviderConfiguration_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._AdminAuthProviderConfiguration_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "disabled":

			out.Values[i] = ec._AdminAuthProviderConfiguration_disabled(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iconURL":

			out.Values[i] = ec._AdminAuthProviderConfiguration_iconURL(ctx, field, obj)

		case "description":

			out.Values[i] = ec._AdminAuthProviderConfiguration_description(ctx, field, obj)

		case "parameters":

			out.Values[i] = ec._AdminAuthProviderConfiguration_parameters(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "signInLink":

			out.Values[i] = ec._AdminAuthProviderConfiguration_signInLink(ctx, field, obj)

		case "signOutLink":

			out.Values[i] = ec._AdminAuthProviderConfiguration_signOutLink(ctx, field, obj)

		case "redirectLink":

			out.Values[i] = ec._AdminAuthProviderConfiguration_redirectLink(ctx, field, obj)

		case "metadataLink":

			out.Values[i] = ec._AdminAuthProviderConfiguration_metadataLink(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adminConnectionGrantInfoImplementors = []string{"AdminConnectionGrantInfo"}

func (ec *executionContext) _AdminConnectionGrantInfo(ctx context.Context, sel ast.SelectionSet, obj *model.AdminConnectionGrantInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminConnectionGrantInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminConnectionGrantInfo")
		case "connectionId":

			out.Values[i] = ec._AdminConnectionGrantInfo_connectionId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dataSourceId":

			out.Values[i] = ec._AdminConnectionGrantInfo_dataSourceId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subjectId":

			out.Values[i] = ec._AdminConnectionGrantInfo_subjectId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subjectType":

			out.Values[i] = ec._AdminConnectionGrantInfo_subjectType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adminConnectionSearchInfoImplementors = []string{"AdminConnectionSearchInfo"}

func (ec *executionContext) _AdminConnectionSearchInfo(ctx context.Context, sel ast.SelectionSet, obj *model.AdminConnectionSearchInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminConnectionSearchInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminConnectionSearchInfo")
		case "displayName":

			out.Values[i] = ec._AdminConnectionSearchInfo_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "host":

			out.Values[i] = ec._AdminConnectionSearchInfo_host(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "port":

			out.Values[i] = ec._AdminConnectionSearchInfo_port(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "possibleDrivers":

			out.Values[i] = ec._AdminConnectionSearchInfo_possibleDrivers(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultDriver":

			out.Values[i] = ec._AdminConnectionSearchInfo_defaultDriver(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adminPermissionInfoImplementors = []string{"AdminPermissionInfo"}

func (ec *executionContext) _AdminPermissionInfo(ctx context.Context, sel ast.SelectionSet, obj *model.AdminPermissionInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminPermissionInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminPermissionInfo")
		case "id":

			out.Values[i] = ec._AdminPermissionInfo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":

			out.Values[i] = ec._AdminPermissionInfo_label(ctx, field, obj)

		case "description":

			out.Values[i] = ec._AdminPermissionInfo_description(ctx, field, obj)

		case "provider":

			out.Values[i] = ec._AdminPermissionInfo_provider(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category":

			out.Values[i] = ec._AdminPermissionInfo_category(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adminRoleInfoImplementors = []string{"AdminRoleInfo"}

func (ec *executionContext) _AdminRoleInfo(ctx context.Context, sel ast.SelectionSet, obj *model.AdminRoleInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminRoleInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminRoleInfo")
		case "roleId":

			out.Values[i] = ec._AdminRoleInfo_roleId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "roleName":

			out.Values[i] = ec._AdminRoleInfo_roleName(ctx, field, obj)

		case "description":

			out.Values[i] = ec._AdminRoleInfo_description(ctx, field, obj)

		case "grantedUsers":

			out.Values[i] = ec._AdminRoleInfo_grantedUsers(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grantedConnections":

			out.Values[i] = ec._AdminRoleInfo_grantedConnections(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rolePermissions":

			out.Values[i] = ec._AdminRoleInfo_rolePermissions(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var adminUserInfoImplementors = []string{"AdminUserInfo"}

func (ec *executionContext) _AdminUserInfo(ctx context.Context, sel ast.SelectionSet, obj *model.AdminUserInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, adminUserInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AdminUserInfo")
		case "userId":

			out.Values[i] = ec._AdminUserInfo_userId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "metaParameters":

			out.Values[i] = ec._AdminUserInfo_metaParameters(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configurationParameters":

			out.Values[i] = ec._AdminUserInfo_configurationParameters(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grantedRoles":

			out.Values[i] = ec._AdminUserInfo_grantedRoles(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "grantedConnections":

			out.Values[i] = ec._AdminUserInfo_grantedConnections(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "origins":

			out.Values[i] = ec._AdminUserInfo_origins(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "linkedAuthProviders":

			out.Values[i] = ec._AdminUserInfo_linkedAuthProviders(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enabled":

			out.Values[i] = ec._AdminUserInfo_enabled(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var asyncTaskInfoImplementors = []string{"AsyncTaskInfo"}

func (ec *executionContext) _AsyncTaskInfo(ctx context.Context, sel ast.SelectionSet, obj *model.AsyncTaskInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, asyncTaskInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AsyncTaskInfo")
		case "id":

			out.Values[i] = ec._AsyncTaskInfo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._AsyncTaskInfo_name(ctx, field, obj)

		case "running":

			out.Values[i] = ec._AsyncTaskInfo_running(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":

			out.Values[i] = ec._AsyncTaskInfo_status(ctx, field, obj)

		case "error":

			out.Values[i] = ec._AsyncTaskInfo_error(ctx, field, obj)

		case "result":

			out.Values[i] = ec._AsyncTaskInfo_result(ctx, field, obj)

		case "taskResult":

			out.Values[i] = ec._AsyncTaskInfo_taskResult(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authCredentialInfoImplementors = []string{"AuthCredentialInfo"}

func (ec *executionContext) _AuthCredentialInfo(ctx context.Context, sel ast.SelectionSet, obj *model.AuthCredentialInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authCredentialInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthCredentialInfo")
		case "id":

			out.Values[i] = ec._AuthCredentialInfo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._AuthCredentialInfo_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._AuthCredentialInfo_description(ctx, field, obj)

		case "admin":

			out.Values[i] = ec._AuthCredentialInfo_admin(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":

			out.Values[i] = ec._AuthCredentialInfo_user(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "identifying":

			out.Values[i] = ec._AuthCredentialInfo_identifying(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "possibleValues":

			out.Values[i] = ec._AuthCredentialInfo_possibleValues(ctx, field, obj)

		case "encryption":

			out.Values[i] = ec._AuthCredentialInfo_encryption(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authInfoImplementors = []string{"AuthInfo"}

func (ec *executionContext) _AuthInfo(ctx context.Context, sel ast.SelectionSet, obj *model.AuthInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthInfo")
		case "redirectLink":

			out.Values[i] = ec._AuthInfo_redirectLink(ctx, field, obj)

		case "authId":

			out.Values[i] = ec._AuthInfo_authId(ctx, field, obj)

		case "authStatus":

			out.Values[i] = ec._AuthInfo_authStatus(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userTokens":

			out.Values[i] = ec._AuthInfo_userTokens(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authProviderConfigurationImplementors = []string{"AuthProviderConfiguration"}

func (ec *executionContext) _AuthProviderConfiguration(ctx context.Context, sel ast.SelectionSet, obj *model.AuthProviderConfiguration) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authProviderConfigurationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthProviderConfiguration")
		case "id":

			out.Values[i] = ec._AuthProviderConfiguration_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._AuthProviderConfiguration_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "disabled":

			out.Values[i] = ec._AuthProviderConfiguration_disabled(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iconURL":

			out.Values[i] = ec._AuthProviderConfiguration_iconURL(ctx, field, obj)

		case "description":

			out.Values[i] = ec._AuthProviderConfiguration_description(ctx, field, obj)

		case "signInLink":

			out.Values[i] = ec._AuthProviderConfiguration_signInLink(ctx, field, obj)

		case "signOutLink":

			out.Values[i] = ec._AuthProviderConfiguration_signOutLink(ctx, field, obj)

		case "metadataLink":

			out.Values[i] = ec._AuthProviderConfiguration_metadataLink(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authProviderCredentialsProfileImplementors = []string{"AuthProviderCredentialsProfile"}

func (ec *executionContext) _AuthProviderCredentialsProfile(ctx context.Context, sel ast.SelectionSet, obj *model.AuthProviderCredentialsProfile) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authProviderCredentialsProfileImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthProviderCredentialsProfile")
		case "id":

			out.Values[i] = ec._AuthProviderCredentialsProfile_id(ctx, field, obj)

		case "label":

			out.Values[i] = ec._AuthProviderCredentialsProfile_label(ctx, field, obj)

		case "description":

			out.Values[i] = ec._AuthProviderCredentialsProfile_description(ctx, field, obj)

		case "credentialParameters":

			out.Values[i] = ec._AuthProviderCredentialsProfile_credentialParameters(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var authProviderInfoImplementors = []string{"AuthProviderInfo"}

func (ec *executionContext) _AuthProviderInfo(ctx context.Context, sel ast.SelectionSet, obj *model.AuthProviderInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, authProviderInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AuthProviderInfo")
		case "id":

			out.Values[i] = ec._AuthProviderInfo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":

			out.Values[i] = ec._AuthProviderInfo_label(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":

			out.Values[i] = ec._AuthProviderInfo_icon(ctx, field, obj)

		case "description":

			out.Values[i] = ec._AuthProviderInfo_description(ctx, field, obj)

		case "defaultProvider":

			out.Values[i] = ec._AuthProviderInfo_defaultProvider(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configurable":

			out.Values[i] = ec._AuthProviderInfo_configurable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configurations":

			out.Values[i] = ec._AuthProviderInfo_configurations(ctx, field, obj)

		case "credentialProfiles":

			out.Values[i] = ec._AuthProviderInfo_credentialProfiles(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "requiredFeatures":

			out.Values[i] = ec._AuthProviderInfo_requiredFeatures(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var connectionFolderInfoImplementors = []string{"ConnectionFolderInfo"}

func (ec *executionContext) _ConnectionFolderInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionFolderInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionFolderInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionFolderInfo")
		case "id":

			out.Values[i] = ec._ConnectionFolderInfo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._ConnectionFolderInfo_description(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var connectionInfoImplementors = []string{"ConnectionInfo"}

func (ec *executionContext) _ConnectionInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionInfo")
		case "id":

			out.Values[i] = ec._ConnectionInfo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driverId":

			out.Values[i] = ec._ConnectionInfo_driverId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._ConnectionInfo_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._ConnectionInfo_description(ctx, field, obj)

		case "host":

			out.Values[i] = ec._ConnectionInfo_host(ctx, field, obj)

		case "port":

			out.Values[i] = ec._ConnectionInfo_port(ctx, field, obj)

		case "serverName":

			out.Values[i] = ec._ConnectionInfo_serverName(ctx, field, obj)

		case "databaseName":

			out.Values[i] = ec._ConnectionInfo_databaseName(ctx, field, obj)

		case "url":

			out.Values[i] = ec._ConnectionInfo_url(ctx, field, obj)

		case "properties":

			out.Values[i] = ec._ConnectionInfo_properties(ctx, field, obj)

		case "template":

			out.Values[i] = ec._ConnectionInfo_template(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "connected":

			out.Values[i] = ec._ConnectionInfo_connected(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "provided":

			out.Values[i] = ec._ConnectionInfo_provided(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "readOnly":

			out.Values[i] = ec._ConnectionInfo_readOnly(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "useUrl":

			out.Values[i] = ec._ConnectionInfo_useUrl(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "saveCredentials":

			out.Values[i] = ec._ConnectionInfo_saveCredentials(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "folder":

			out.Values[i] = ec._ConnectionInfo_folder(ctx, field, obj)

		case "nodePath":

			out.Values[i] = ec._ConnectionInfo_nodePath(ctx, field, obj)

		case "connectTime":

			out.Values[i] = ec._ConnectionInfo_connectTime(ctx, field, obj)

		case "connectionError":

			out.Values[i] = ec._ConnectionInfo_connectionError(ctx, field, obj)

		case "serverVersion":

			out.Values[i] = ec._ConnectionInfo_serverVersion(ctx, field, obj)

		case "clientVersion":

			out.Values[i] = ec._ConnectionInfo_clientVersion(ctx, field, obj)

		case "origin":

			out.Values[i] = ec._ConnectionInfo_origin(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authNeeded":

			out.Values[i] = ec._ConnectionInfo_authNeeded(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authModel":

			out.Values[i] = ec._ConnectionInfo_authModel(ctx, field, obj)

		case "authProperties":

			out.Values[i] = ec._ConnectionInfo_authProperties(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "providerProperties":

			out.Values[i] = ec._ConnectionInfo_providerProperties(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "networkHandlersConfig":

			out.Values[i] = ec._ConnectionInfo_networkHandlersConfig(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "features":

			out.Values[i] = ec._ConnectionInfo_features(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "navigatorSettings":

			out.Values[i] = ec._ConnectionInfo_navigatorSettings(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportedDataFormats":

			out.Values[i] = ec._ConnectionInfo_supportedDataFormats(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataTransferProcessorInfoImplementors = []string{"DataTransferProcessorInfo"}

func (ec *executionContext) _DataTransferProcessorInfo(ctx context.Context, sel ast.SelectionSet, obj *model.DataTransferProcessorInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataTransferProcessorInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataTransferProcessorInfo")
		case "id":

			out.Values[i] = ec._DataTransferProcessorInfo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._DataTransferProcessorInfo_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec._DataTransferProcessorInfo_description(ctx, field, obj)

		case "fileExtension":

			out.Values[i] = ec._DataTransferProcessorInfo_fileExtension(ctx, field, obj)

		case "appFileExtension":

			out.Values[i] = ec._DataTransferProcessorInfo_appFileExtension(ctx, field, obj)

		case "appName":

			out.Values[i] = ec._DataTransferProcessorInfo_appName(ctx, field, obj)

		case "order":

			out.Values[i] = ec._DataTransferProcessorInfo_order(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":

			out.Values[i] = ec._DataTransferProcessorInfo_icon(ctx, field, obj)

		case "properties":

			out.Values[i] = ec._DataTransferProcessorInfo_properties(ctx, field, obj)

		case "isBinary":

			out.Values[i] = ec._DataTransferProcessorInfo_isBinary(ctx, field, obj)

		case "isHTML":

			out.Values[i] = ec._DataTransferProcessorInfo_isHTML(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dataTypeLogicalOperationImplementors = []string{"DataTypeLogicalOperation"}

func (ec *executionContext) _DataTypeLogicalOperation(ctx context.Context, sel ast.SelectionSet, obj *model.DataTypeLogicalOperation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dataTypeLogicalOperationImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DataTypeLogicalOperation")
		case "id":

			out.Values[i] = ec._DataTypeLogicalOperation_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expression":

			out.Values[i] = ec._DataTypeLogicalOperation_expression(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "argumentCount":

			out.Values[i] = ec._DataTypeLogicalOperation_argumentCount(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var databaseAuthModelImplementors = []string{"DatabaseAuthModel"}

func (ec *executionContext) _DatabaseAuthModel(ctx context.Context, sel ast.SelectionSet, obj *model.DatabaseAuthModel) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, databaseAuthModelImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DatabaseAuthModel")
		case "id":

			out.Values[i] = ec._DatabaseAuthModel_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._DatabaseAuthModel_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._DatabaseAuthModel_description(ctx, field, obj)

		case "icon":

			out.Values[i] = ec._DatabaseAuthModel_icon(ctx, field, obj)

		case "requiresLocalConfiguration":

			out.Values[i] = ec._DatabaseAuthModel_requiresLocalConfiguration(ctx, field, obj)

		case "properties":

			out.Values[i] = ec._DatabaseAuthModel_properties(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var databaseCatalogImplementors = []string{"DatabaseCatalog"}

func (ec *executionContext) _DatabaseCatalog(ctx context.Context, sel ast.SelectionSet, obj *model.DatabaseCatalog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, databaseCatalogImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DatabaseCatalog")
		case "catalog":

			out.Values[i] = ec._DatabaseCatalog_catalog(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "schemaList":

			out.Values[i] = ec._DatabaseCatalog_schemaList(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var databaseDocumentImplementors = []string{"DatabaseDocument"}

func (ec *executionContext) _DatabaseDocument(ctx context.Context, sel ast.SelectionSet, obj *model.DatabaseDocument) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, databaseDocumentImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DatabaseDocument")
		case "id":

			out.Values[i] = ec._DatabaseDocument_id(ctx, field, obj)

		case "contentType":

			out.Values[i] = ec._DatabaseDocument_contentType(ctx, field, obj)

		case "properties":

			out.Values[i] = ec._DatabaseDocument_properties(ctx, field, obj)

		case "data":

			out.Values[i] = ec._DatabaseDocument_data(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var databaseObjectInfoImplementors = []string{"DatabaseObjectInfo"}

func (ec *executionContext) _DatabaseObjectInfo(ctx context.Context, sel ast.SelectionSet, obj *model.DatabaseObjectInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, databaseObjectInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DatabaseObjectInfo")
		case "name":

			out.Values[i] = ec._DatabaseObjectInfo_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec._DatabaseObjectInfo_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec._DatabaseObjectInfo_type(ctx, field, obj)

		case "properties":

			out.Values[i] = ec._DatabaseObjectInfo_properties(ctx, field, obj)

		case "ordinalPosition":

			out.Values[i] = ec._DatabaseObjectInfo_ordinalPosition(ctx, field, obj)

		case "fullyQualifiedName":

			out.Values[i] = ec._DatabaseObjectInfo_fullyQualifiedName(ctx, field, obj)

		case "overloadedName":

			out.Values[i] = ec._DatabaseObjectInfo_overloadedName(ctx, field, obj)

		case "uniqueName":

			out.Values[i] = ec._DatabaseObjectInfo_uniqueName(ctx, field, obj)

		case "state":

			out.Values[i] = ec._DatabaseObjectInfo_state(ctx, field, obj)

		case "features":

			out.Values[i] = ec._DatabaseObjectInfo_features(ctx, field, obj)

		case "editors":

			out.Values[i] = ec._DatabaseObjectInfo_editors(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var databaseStructContainersImplementors = []string{"DatabaseStructContainers"}

func (ec *executionContext) _DatabaseStructContainers(ctx context.Context, sel ast.SelectionSet, obj *model.DatabaseStructContainers) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, databaseStructContainersImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DatabaseStructContainers")
		case "catalogList":

			out.Values[i] = ec._DatabaseStructContainers_catalogList(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "schemaList":

			out.Values[i] = ec._DatabaseStructContainers_schemaList(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportsCatalogChange":

			out.Values[i] = ec._DatabaseStructContainers_supportsCatalogChange(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportsSchemaChange":

			out.Values[i] = ec._DatabaseStructContainers_supportsSchemaChange(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var driverInfoImplementors = []string{"DriverInfo"}

func (ec *executionContext) _DriverInfo(ctx context.Context, sel ast.SelectionSet, obj *model.DriverInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, driverInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DriverInfo")
		case "id":

			out.Values[i] = ec._DriverInfo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._DriverInfo_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec._DriverInfo_description(ctx, field, obj)

		case "icon":

			out.Values[i] = ec._DriverInfo_icon(ctx, field, obj)

		case "iconBig":

			out.Values[i] = ec._DriverInfo_iconBig(ctx, field, obj)

		case "providerId":

			out.Values[i] = ec._DriverInfo_providerId(ctx, field, obj)

		case "driverClassName":

			out.Values[i] = ec._DriverInfo_driverClassName(ctx, field, obj)

		case "defaultHost":

			out.Values[i] = ec._DriverInfo_defaultHost(ctx, field, obj)

		case "defaultPort":

			out.Values[i] = ec._DriverInfo_defaultPort(ctx, field, obj)

		case "defaultDatabase":

			out.Values[i] = ec._DriverInfo_defaultDatabase(ctx, field, obj)

		case "defaultServer":

			out.Values[i] = ec._DriverInfo_defaultServer(ctx, field, obj)

		case "defaultUser":

			out.Values[i] = ec._DriverInfo_defaultUser(ctx, field, obj)

		case "sampleURL":

			out.Values[i] = ec._DriverInfo_sampleURL(ctx, field, obj)

		case "driverInfoURL":

			out.Values[i] = ec._DriverInfo_driverInfoURL(ctx, field, obj)

		case "driverPropertiesURL":

			out.Values[i] = ec._DriverInfo_driverPropertiesURL(ctx, field, obj)

		case "embedded":

			out.Values[i] = ec._DriverInfo_embedded(ctx, field, obj)

		case "enabled":

			out.Values[i] = ec._DriverInfo_enabled(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "requiresServerName":

			out.Values[i] = ec._DriverInfo_requiresServerName(ctx, field, obj)

		case "allowsEmptyPassword":

			out.Values[i] = ec._DriverInfo_allowsEmptyPassword(ctx, field, obj)

		case "licenseRequired":

			out.Values[i] = ec._DriverInfo_licenseRequired(ctx, field, obj)

		case "license":

			out.Values[i] = ec._DriverInfo_license(ctx, field, obj)

		case "custom":

			out.Values[i] = ec._DriverInfo_custom(ctx, field, obj)

		case "promotedScore":

			out.Values[i] = ec._DriverInfo_promotedScore(ctx, field, obj)

		case "driverProperties":

			out.Values[i] = ec._DriverInfo_driverProperties(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "driverParameters":

			out.Values[i] = ec._DriverInfo_driverParameters(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "providerProperties":

			out.Values[i] = ec._DriverInfo_providerProperties(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "anonymousAccess":

			out.Values[i] = ec._DriverInfo_anonymousAccess(ctx, field, obj)

		case "defaultAuthModel":

			out.Values[i] = ec._DriverInfo_defaultAuthModel(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applicableAuthModels":

			out.Values[i] = ec._DriverInfo_applicableAuthModels(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "applicableNetworkHandlers":

			out.Values[i] = ec._DriverInfo_applicableNetworkHandlers(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var logEntryImplementors = []string{"LogEntry"}

func (ec *executionContext) _LogEntry(ctx context.Context, sel ast.SelectionSet, obj *model.LogEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, logEntryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LogEntry")
		case "time":

			out.Values[i] = ec._LogEntry_time(ctx, field, obj)

		case "type":

			out.Values[i] = ec._LogEntry_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":

			out.Values[i] = ec._LogEntry_message(ctx, field, obj)

		case "stackTrace":

			out.Values[i] = ec._LogEntry_stackTrace(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "setUserConfigurationParameter":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setUserConfigurationParameter(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "openSession":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_openSession(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "closeSession":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_closeSession(ctx, field)
			})

		case "touchSession":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_touchSession(ctx, field)
			})

		case "refreshSessionConnections":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_refreshSessionConnections(ctx, field)
			})

		case "changeSessionLanguage":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_changeSessionLanguage(ctx, field)
			})

		case "createConnection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createConnection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateConnection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateConnection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteConnection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteConnection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createConnectionFromTemplate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createConnectionFromTemplate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createConnectionFolder":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createConnectionFolder(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteConnectionFolder":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deleteConnectionFolder(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "copyConnectionFromNode":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_copyConnectionFromNode(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testConnection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_testConnection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "testNetworkHandler":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_testNetworkHandler(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "initConnection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_initConnection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "closeConnection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_closeConnection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setConnectionNavigatorSettings":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setConnectionNavigatorSettings(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "asyncTaskCancel":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_asyncTaskCancel(ctx, field)
			})

		case "asyncTaskInfo":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_asyncTaskInfo(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "openConnection":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_openConnection(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "asyncTaskStatus":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_asyncTaskStatus(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "navRenameNode":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_navRenameNode(ctx, field)
			})

		case "navDeleteNodes":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_navDeleteNodes(ctx, field)
			})

		case "navMoveNodesToFolder":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_navMoveNodesToFolder(ctx, field)
			})

		case "rmCreateResource":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rmCreateResource(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rmMoveResource":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rmMoveResource(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rmDeleteResource":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rmDeleteResource(ctx, field)
			})

		case "rmWriteResourceStringContent":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_rmWriteResourceStringContent(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sqlContextCreate":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sqlContextCreate(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sqlContextSetDefaults":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sqlContextSetDefaults(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sqlContextDestroy":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sqlContextDestroy(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "asyncSqlExecuteQuery":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_asyncSqlExecuteQuery(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "asyncReadDataFromContainer":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_asyncReadDataFromContainer(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sqlResultClose":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_sqlResultClose(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateResultsDataBatch":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateResultsDataBatch(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateResultsDataBatchScript":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateResultsDataBatchScript(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "readLobValue":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_readLobValue(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "asyncSqlExecuteResults":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_asyncSqlExecuteResults(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "asyncSqlExplainExecutionPlan":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_asyncSqlExplainExecutionPlan(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "asyncSqlExplainExecutionPlanResult":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_asyncSqlExplainExecutionPlanResult(ctx, field)
			})

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var navigatorNodeInfoImplementors = []string{"NavigatorNodeInfo"}

func (ec *executionContext) _NavigatorNodeInfo(ctx context.Context, sel ast.SelectionSet, obj *model.NavigatorNodeInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, navigatorNodeInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NavigatorNodeInfo")
		case "id":

			out.Values[i] = ec._NavigatorNodeInfo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._NavigatorNodeInfo_name(ctx, field, obj)

		case "fullName":

			out.Values[i] = ec._NavigatorNodeInfo_fullName(ctx, field, obj)

		case "icon":

			out.Values[i] = ec._NavigatorNodeInfo_icon(ctx, field, obj)

		case "description":

			out.Values[i] = ec._NavigatorNodeInfo_description(ctx, field, obj)

		case "nodeType":

			out.Values[i] = ec._NavigatorNodeInfo_nodeType(ctx, field, obj)

		case "hasChildren":

			out.Values[i] = ec._NavigatorNodeInfo_hasChildren(ctx, field, obj)

		case "object":

			out.Values[i] = ec._NavigatorNodeInfo_object(ctx, field, obj)

		case "features":

			out.Values[i] = ec._NavigatorNodeInfo_features(ctx, field, obj)

		case "nodeDetails":

			out.Values[i] = ec._NavigatorNodeInfo_nodeDetails(ctx, field, obj)

		case "folder":

			out.Values[i] = ec._NavigatorNodeInfo_folder(ctx, field, obj)

		case "inline":

			out.Values[i] = ec._NavigatorNodeInfo_inline(ctx, field, obj)

		case "navigable":

			out.Values[i] = ec._NavigatorNodeInfo_navigable(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var navigatorSettingsImplementors = []string{"NavigatorSettings"}

func (ec *executionContext) _NavigatorSettings(ctx context.Context, sel ast.SelectionSet, obj *model.NavigatorSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, navigatorSettingsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NavigatorSettings")
		case "showSystemObjects":

			out.Values[i] = ec._NavigatorSettings_showSystemObjects(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "showUtilityObjects":

			out.Values[i] = ec._NavigatorSettings_showUtilityObjects(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "showOnlyEntities":

			out.Values[i] = ec._NavigatorSettings_showOnlyEntities(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mergeEntities":

			out.Values[i] = ec._NavigatorSettings_mergeEntities(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hideFolders":

			out.Values[i] = ec._NavigatorSettings_hideFolders(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hideSchemas":

			out.Values[i] = ec._NavigatorSettings_hideSchemas(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hideVirtualModel":

			out.Values[i] = ec._NavigatorSettings_hideVirtualModel(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var networkEndpointInfoImplementors = []string{"NetworkEndpointInfo"}

func (ec *executionContext) _NetworkEndpointInfo(ctx context.Context, sel ast.SelectionSet, obj *model.NetworkEndpointInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, networkEndpointInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NetworkEndpointInfo")
		case "message":

			out.Values[i] = ec._NetworkEndpointInfo_message(ctx, field, obj)

		case "clientVersion":

			out.Values[i] = ec._NetworkEndpointInfo_clientVersion(ctx, field, obj)

		case "serverVersion":

			out.Values[i] = ec._NetworkEndpointInfo_serverVersion(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var networkHandlerConfigImplementors = []string{"NetworkHandlerConfig"}

func (ec *executionContext) _NetworkHandlerConfig(ctx context.Context, sel ast.SelectionSet, obj *model.NetworkHandlerConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, networkHandlerConfigImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NetworkHandlerConfig")
		case "id":

			out.Values[i] = ec._NetworkHandlerConfig_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enabled":

			out.Values[i] = ec._NetworkHandlerConfig_enabled(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authType":

			out.Values[i] = ec._NetworkHandlerConfig_authType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userName":

			out.Values[i] = ec._NetworkHandlerConfig_userName(ctx, field, obj)

		case "password":

			out.Values[i] = ec._NetworkHandlerConfig_password(ctx, field, obj)

		case "key":

			out.Values[i] = ec._NetworkHandlerConfig_key(ctx, field, obj)

		case "savePassword":

			out.Values[i] = ec._NetworkHandlerConfig_savePassword(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "properties":

			out.Values[i] = ec._NetworkHandlerConfig_properties(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var networkHandlerDescriptorImplementors = []string{"NetworkHandlerDescriptor"}

func (ec *executionContext) _NetworkHandlerDescriptor(ctx context.Context, sel ast.SelectionSet, obj *model.NetworkHandlerDescriptor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, networkHandlerDescriptorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NetworkHandlerDescriptor")
		case "id":

			out.Values[i] = ec._NetworkHandlerDescriptor_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "codeName":

			out.Values[i] = ec._NetworkHandlerDescriptor_codeName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":

			out.Values[i] = ec._NetworkHandlerDescriptor_label(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._NetworkHandlerDescriptor_description(ctx, field, obj)

		case "secured":

			out.Values[i] = ec._NetworkHandlerDescriptor_secured(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._NetworkHandlerDescriptor_type(ctx, field, obj)

		case "properties":

			out.Values[i] = ec._NetworkHandlerDescriptor_properties(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var objectDescriptorImplementors = []string{"ObjectDescriptor"}

func (ec *executionContext) _ObjectDescriptor(ctx context.Context, sel ast.SelectionSet, obj *model.ObjectDescriptor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, objectDescriptorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ObjectDescriptor")
		case "id":

			out.Values[i] = ec._ObjectDescriptor_id(ctx, field, obj)

		case "displayName":

			out.Values[i] = ec._ObjectDescriptor_displayName(ctx, field, obj)

		case "fullName":

			out.Values[i] = ec._ObjectDescriptor_fullName(ctx, field, obj)

		case "uniqueName":

			out.Values[i] = ec._ObjectDescriptor_uniqueName(ctx, field, obj)

		case "description":

			out.Values[i] = ec._ObjectDescriptor_description(ctx, field, obj)

		case "value":

			out.Values[i] = ec._ObjectDescriptor_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var objectDetailsImplementors = []string{"ObjectDetails"}

func (ec *executionContext) _ObjectDetails(ctx context.Context, sel ast.SelectionSet, obj *model.ObjectDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, objectDetailsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ObjectDetails")
		case "id":

			out.Values[i] = ec._ObjectDetails_id(ctx, field, obj)

		case "displayName":

			out.Values[i] = ec._ObjectDetails_displayName(ctx, field, obj)

		case "description":

			out.Values[i] = ec._ObjectDetails_description(ctx, field, obj)

		case "value":

			out.Values[i] = ec._ObjectDetails_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var objectOriginImplementors = []string{"ObjectOrigin"}

func (ec *executionContext) _ObjectOrigin(ctx context.Context, sel ast.SelectionSet, obj *model.ObjectOrigin) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, objectOriginImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ObjectOrigin")
		case "type":

			out.Values[i] = ec._ObjectOrigin_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "subType":

			out.Values[i] = ec._ObjectOrigin_subType(ctx, field, obj)

		case "displayName":

			out.Values[i] = ec._ObjectOrigin_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":

			out.Values[i] = ec._ObjectOrigin_icon(ctx, field, obj)

		case "configuration":

			out.Values[i] = ec._ObjectOrigin_configuration(ctx, field, obj)

		case "details":

			out.Values[i] = ec._ObjectOrigin_details(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var objectPropertyInfoImplementors = []string{"ObjectPropertyInfo"}

func (ec *executionContext) _ObjectPropertyInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ObjectPropertyInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, objectPropertyInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ObjectPropertyInfo")
		case "id":

			out.Values[i] = ec._ObjectPropertyInfo_id(ctx, field, obj)

		case "displayName":

			out.Values[i] = ec._ObjectPropertyInfo_displayName(ctx, field, obj)

		case "description":

			out.Values[i] = ec._ObjectPropertyInfo_description(ctx, field, obj)

		case "category":

			out.Values[i] = ec._ObjectPropertyInfo_category(ctx, field, obj)

		case "dataType":

			out.Values[i] = ec._ObjectPropertyInfo_dataType(ctx, field, obj)

		case "value":

			out.Values[i] = ec._ObjectPropertyInfo_value(ctx, field, obj)

		case "validValues":

			out.Values[i] = ec._ObjectPropertyInfo_validValues(ctx, field, obj)

		case "defaultValue":

			out.Values[i] = ec._ObjectPropertyInfo_defaultValue(ctx, field, obj)

		case "length":

			out.Values[i] = ec._ObjectPropertyInfo_length(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "features":

			out.Values[i] = ec._ObjectPropertyInfo_features(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "order":

			out.Values[i] = ec._ObjectPropertyInfo_order(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var productInfoImplementors = []string{"ProductInfo"}

func (ec *executionContext) _ProductInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ProductInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, productInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProductInfo")
		case "id":

			out.Values[i] = ec._ProductInfo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":

			out.Values[i] = ec._ProductInfo_version(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._ProductInfo_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._ProductInfo_description(ctx, field, obj)

		case "buildTime":

			out.Values[i] = ec._ProductInfo_buildTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "releaseTime":

			out.Values[i] = ec._ProductInfo_releaseTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "licenseInfo":

			out.Values[i] = ec._ProductInfo_licenseInfo(ctx, field, obj)

		case "latestVersionInfo":

			out.Values[i] = ec._ProductInfo_latestVersionInfo(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "listUsers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUsers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listRoles":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listRoles(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listPermissions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listPermissions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "createUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "deleteUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "createRole":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createRole(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "updateRole":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateRole(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "deleteRole":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteRole(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "grantUserRole":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_grantUserRole(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "revokeUserRole":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_revokeUserRole(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "setSubjectPermissions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_setSubjectPermissions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "setUserCredentials":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_setUserCredentials(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "enableUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_enableUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "allConnections":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_allConnections(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "searchConnections":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_searchConnections(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "createConnectionConfiguration":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_createConnectionConfiguration(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "copyConnectionConfiguration":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_copyConnectionConfiguration(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "updateConnectionConfiguration":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_updateConnectionConfiguration(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "deleteConnectionConfiguration":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteConnectionConfiguration(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getConnectionSubjectAccess":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getConnectionSubjectAccess(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "setConnectionSubjectAccess":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_setConnectionSubjectAccess(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "getSubjectConnectionAccess":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSubjectConnectionAccess(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "setSubjectConnectionAccess":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_setSubjectConnectionAccess(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listFeatureSets":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listFeatureSets(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listAuthProviderConfigurationParameters":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listAuthProviderConfigurationParameters(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listAuthProviderConfigurations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listAuthProviderConfigurations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "saveAuthProviderConfiguration":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_saveAuthProviderConfiguration(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "deleteAuthProviderConfiguration":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteAuthProviderConfiguration(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "saveUserMetaParameter":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_saveUserMetaParameter(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "deleteUserMetaParameter":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_deleteUserMetaParameter(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "setUserMetaParameterValues":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_setUserMetaParameterValues(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "configureServer":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_configureServer(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "setDefaultNavigatorSettings":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_setDefaultNavigatorSettings(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "authLogin":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authLogin(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "authUpdateStatus":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authUpdateStatus(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "authLogout":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authLogout(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "activeUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_activeUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "authProviders":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authProviders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "authChangeLocalPassword":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authChangeLocalPassword(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "listUserProfileProperties":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listUserProfileProperties(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "serverConfig":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serverConfig(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sessionState":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sessionState(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sessionPermissions":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sessionPermissions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "driverList":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_driverList(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "authModels":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_authModels(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "networkHandlers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_networkHandlers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "userConnections":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userConnections(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "templateConnections":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_templateConnections(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "connectionFolders":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_connectionFolders(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "connectionState":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_connectionState(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "connectionInfo":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_connectionInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "readSessionLog":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_readSessionLog(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "dataTransferAvailableStreamProcessors":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dataTransferAvailableStreamProcessors(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "dataTransferExportDataFromContainer":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dataTransferExportDataFromContainer(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "dataTransferExportDataFromResults":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dataTransferExportDataFromResults(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "dataTransferRemoveDataFile":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_dataTransferRemoveDataFile(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "metadataGetNodeDDL":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_metadataGetNodeDDL(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "navNodeChildren":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_navNodeChildren(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "navNodeParents":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_navNodeParents(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "navNodeInfo":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_navNodeInfo(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "navRefreshNode":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_navRefreshNode(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "navGetStructContainers":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_navGetStructContainers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "rmListProjects":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rmListProjects(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "rmListResources":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rmListResources(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "rmReadResourceAsString":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_rmReadResourceAsString(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sqlDialectInfo":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sqlDialectInfo(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sqlListContexts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sqlListContexts(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sqlCompletionProposals":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sqlCompletionProposals(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sqlFormatQuery":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sqlFormatQuery(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sqlSupportedOperations":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sqlSupportedOperations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sqlEntityQueryGenerators":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sqlEntityQueryGenerators(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sqlGenerateEntityQuery":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sqlGenerateEntityQuery(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sqlParseScript":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sqlParseScript(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "sqlParseQuery":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_sqlParseQuery(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rMProjectImplementors = []string{"RMProject"}

func (ec *executionContext) _RMProject(ctx context.Context, sel ast.SelectionSet, obj *model.RMProject) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rMProjectImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RMProject")
		case "id":

			out.Values[i] = ec._RMProject_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._RMProject_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._RMProject_description(ctx, field, obj)

		case "shared":

			out.Values[i] = ec._RMProject_shared(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createTime":

			out.Values[i] = ec._RMProject_createTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creator":

			out.Values[i] = ec._RMProject_creator(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var rMResourceImplementors = []string{"RMResource"}

func (ec *executionContext) _RMResource(ctx context.Context, sel ast.SelectionSet, obj *model.RMResource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, rMResourceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RMResource")
		case "name":

			out.Values[i] = ec._RMResource_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "folder":

			out.Values[i] = ec._RMResource_folder(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "length":

			out.Values[i] = ec._RMResource_length(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sQLCompletionProposalImplementors = []string{"SQLCompletionProposal"}

func (ec *executionContext) _SQLCompletionProposal(ctx context.Context, sel ast.SelectionSet, obj *model.SQLCompletionProposal) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLCompletionProposalImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLCompletionProposal")
		case "displayString":

			out.Values[i] = ec._SQLCompletionProposal_displayString(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._SQLCompletionProposal_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score":

			out.Values[i] = ec._SQLCompletionProposal_score(ctx, field, obj)

		case "replacementString":

			out.Values[i] = ec._SQLCompletionProposal_replacementString(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "replacementOffset":

			out.Values[i] = ec._SQLCompletionProposal_replacementOffset(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "replacementLength":

			out.Values[i] = ec._SQLCompletionProposal_replacementLength(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cursorPosition":

			out.Values[i] = ec._SQLCompletionProposal_cursorPosition(ctx, field, obj)

		case "icon":

			out.Values[i] = ec._SQLCompletionProposal_icon(ctx, field, obj)

		case "nodePath":

			out.Values[i] = ec._SQLCompletionProposal_nodePath(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sQLContextInfoImplementors = []string{"SQLContextInfo"}

func (ec *executionContext) _SQLContextInfo(ctx context.Context, sel ast.SelectionSet, obj *model.SQLContextInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLContextInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLContextInfo")
		case "id":

			out.Values[i] = ec._SQLContextInfo_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "connectionId":

			out.Values[i] = ec._SQLContextInfo_connectionId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultCatalog":

			out.Values[i] = ec._SQLContextInfo_defaultCatalog(ctx, field, obj)

		case "defaultSchema":

			out.Values[i] = ec._SQLContextInfo_defaultSchema(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sQLDialectInfoImplementors = []string{"SQLDialectInfo"}

func (ec *executionContext) _SQLDialectInfo(ctx context.Context, sel ast.SelectionSet, obj *model.SQLDialectInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLDialectInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLDialectInfo")
		case "name":

			out.Values[i] = ec._SQLDialectInfo_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dataTypes":

			out.Values[i] = ec._SQLDialectInfo_dataTypes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "functions":

			out.Values[i] = ec._SQLDialectInfo_functions(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "reservedWords":

			out.Values[i] = ec._SQLDialectInfo_reservedWords(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "quoteStrings":

			out.Values[i] = ec._SQLDialectInfo_quoteStrings(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "singleLineComments":

			out.Values[i] = ec._SQLDialectInfo_singleLineComments(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "multiLineComments":

			out.Values[i] = ec._SQLDialectInfo_multiLineComments(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "catalogSeparator":

			out.Values[i] = ec._SQLDialectInfo_catalogSeparator(ctx, field, obj)

		case "structSeparator":

			out.Values[i] = ec._SQLDialectInfo_structSeparator(ctx, field, obj)

		case "scriptDelimiter":

			out.Values[i] = ec._SQLDialectInfo_scriptDelimiter(ctx, field, obj)

		case "supportsExplainExecutionPlan":

			out.Values[i] = ec._SQLDialectInfo_supportsExplainExecutionPlan(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sQLExecuteInfoImplementors = []string{"SQLExecuteInfo"}

func (ec *executionContext) _SQLExecuteInfo(ctx context.Context, sel ast.SelectionSet, obj *model.SQLExecuteInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLExecuteInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLExecuteInfo")
		case "statusMessage":

			out.Values[i] = ec._SQLExecuteInfo_statusMessage(ctx, field, obj)

		case "duration":

			out.Values[i] = ec._SQLExecuteInfo_duration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "filterText":

			out.Values[i] = ec._SQLExecuteInfo_filterText(ctx, field, obj)

		case "results":

			out.Values[i] = ec._SQLExecuteInfo_results(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sQLExecutionPlanImplementors = []string{"SQLExecutionPlan"}

func (ec *executionContext) _SQLExecutionPlan(ctx context.Context, sel ast.SelectionSet, obj *model.SQLExecutionPlan) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLExecutionPlanImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLExecutionPlan")
		case "query":

			out.Values[i] = ec._SQLExecutionPlan_query(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nodes":

			out.Values[i] = ec._SQLExecutionPlan_nodes(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sQLExecutionPlanNodeImplementors = []string{"SQLExecutionPlanNode"}

func (ec *executionContext) _SQLExecutionPlanNode(ctx context.Context, sel ast.SelectionSet, obj *model.SQLExecutionPlanNode) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLExecutionPlanNodeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLExecutionPlanNode")
		case "id":

			out.Values[i] = ec._SQLExecutionPlanNode_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentId":

			out.Values[i] = ec._SQLExecutionPlanNode_parentId(ctx, field, obj)

		case "kind":

			out.Values[i] = ec._SQLExecutionPlanNode_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._SQLExecutionPlanNode_name(ctx, field, obj)

		case "type":

			out.Values[i] = ec._SQLExecutionPlanNode_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "condition":

			out.Values[i] = ec._SQLExecutionPlanNode_condition(ctx, field, obj)

		case "description":

			out.Values[i] = ec._SQLExecutionPlanNode_description(ctx, field, obj)

		case "properties":

			out.Values[i] = ec._SQLExecutionPlanNode_properties(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sQLQueryGeneratorImplementors = []string{"SQLQueryGenerator"}

func (ec *executionContext) _SQLQueryGenerator(ctx context.Context, sel ast.SelectionSet, obj *model.SQLQueryGenerator) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLQueryGeneratorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLQueryGenerator")
		case "id":

			out.Values[i] = ec._SQLQueryGenerator_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":

			out.Values[i] = ec._SQLQueryGenerator_label(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._SQLQueryGenerator_description(ctx, field, obj)

		case "order":

			out.Values[i] = ec._SQLQueryGenerator_order(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "multiObject":

			out.Values[i] = ec._SQLQueryGenerator_multiObject(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sQLQueryResultsImplementors = []string{"SQLQueryResults"}

func (ec *executionContext) _SQLQueryResults(ctx context.Context, sel ast.SelectionSet, obj *model.SQLQueryResults) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLQueryResultsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLQueryResults")
		case "title":

			out.Values[i] = ec._SQLQueryResults_title(ctx, field, obj)

		case "updateRowCount":

			out.Values[i] = ec._SQLQueryResults_updateRowCount(ctx, field, obj)

		case "sourceQuery":

			out.Values[i] = ec._SQLQueryResults_sourceQuery(ctx, field, obj)

		case "dataFormat":

			out.Values[i] = ec._SQLQueryResults_dataFormat(ctx, field, obj)

		case "resultSet":

			out.Values[i] = ec._SQLQueryResults_resultSet(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sQLResultColumnImplementors = []string{"SQLResultColumn"}

func (ec *executionContext) _SQLResultColumn(ctx context.Context, sel ast.SelectionSet, obj *model.SQLResultColumn) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLResultColumnImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLResultColumn")
		case "position":

			out.Values[i] = ec._SQLResultColumn_position(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._SQLResultColumn_name(ctx, field, obj)

		case "label":

			out.Values[i] = ec._SQLResultColumn_label(ctx, field, obj)

		case "icon":

			out.Values[i] = ec._SQLResultColumn_icon(ctx, field, obj)

		case "entityName":

			out.Values[i] = ec._SQLResultColumn_entityName(ctx, field, obj)

		case "dataKind":

			out.Values[i] = ec._SQLResultColumn_dataKind(ctx, field, obj)

		case "typeName":

			out.Values[i] = ec._SQLResultColumn_typeName(ctx, field, obj)

		case "fullTypeName":

			out.Values[i] = ec._SQLResultColumn_fullTypeName(ctx, field, obj)

		case "maxLength":

			out.Values[i] = ec._SQLResultColumn_maxLength(ctx, field, obj)

		case "scale":

			out.Values[i] = ec._SQLResultColumn_scale(ctx, field, obj)

		case "precision":

			out.Values[i] = ec._SQLResultColumn_precision(ctx, field, obj)

		case "required":

			out.Values[i] = ec._SQLResultColumn_required(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "readOnly":

			out.Values[i] = ec._SQLResultColumn_readOnly(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "readOnlyStatus":

			out.Values[i] = ec._SQLResultColumn_readOnlyStatus(ctx, field, obj)

		case "supportedOperations":

			out.Values[i] = ec._SQLResultColumn_supportedOperations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sQLResultSetImplementors = []string{"SQLResultSet"}

func (ec *executionContext) _SQLResultSet(ctx context.Context, sel ast.SelectionSet, obj *model.SQLResultSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLResultSetImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLResultSet")
		case "id":

			out.Values[i] = ec._SQLResultSet_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "columns":

			out.Values[i] = ec._SQLResultSet_columns(ctx, field, obj)

		case "rows":

			out.Values[i] = ec._SQLResultSet_rows(ctx, field, obj)

		case "singleEntity":

			out.Values[i] = ec._SQLResultSet_singleEntity(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasMoreData":

			out.Values[i] = ec._SQLResultSet_hasMoreData(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasRowIdentifier":

			out.Values[i] = ec._SQLResultSet_hasRowIdentifier(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sQLScriptInfoImplementors = []string{"SQLScriptInfo"}

func (ec *executionContext) _SQLScriptInfo(ctx context.Context, sel ast.SelectionSet, obj *model.SQLScriptInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLScriptInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLScriptInfo")
		case "queries":

			out.Values[i] = ec._SQLScriptInfo_queries(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sQLScriptQueryImplementors = []string{"SQLScriptQuery"}

func (ec *executionContext) _SQLScriptQuery(ctx context.Context, sel ast.SelectionSet, obj *model.SQLScriptQuery) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sQLScriptQueryImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SQLScriptQuery")
		case "start":

			out.Values[i] = ec._SQLScriptQuery_start(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "end":

			out.Values[i] = ec._SQLScriptQuery_end(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serverConfigImplementors = []string{"ServerConfig"}

func (ec *executionContext) _ServerConfig(ctx context.Context, sel ast.SelectionSet, obj *model.ServerConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serverConfigImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServerConfig")
		case "name":

			out.Values[i] = ec._ServerConfig_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":

			out.Values[i] = ec._ServerConfig_version(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "workspaceId":

			out.Values[i] = ec._ServerConfig_workspaceId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "serverURL":

			out.Values[i] = ec._ServerConfig_serverURL(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "rootURI":

			out.Values[i] = ec._ServerConfig_rootURI(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hostName":

			out.Values[i] = ec._ServerConfig_hostName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "anonymousAccessEnabled":

			out.Values[i] = ec._ServerConfig_anonymousAccessEnabled(ctx, field, obj)

		case "authenticationEnabled":

			out.Values[i] = ec._ServerConfig_authenticationEnabled(ctx, field, obj)

		case "supportsCustomConnections":

			out.Values[i] = ec._ServerConfig_supportsCustomConnections(ctx, field, obj)

		case "supportsConnectionBrowser":

			out.Values[i] = ec._ServerConfig_supportsConnectionBrowser(ctx, field, obj)

		case "supportsWorkspaces":

			out.Values[i] = ec._ServerConfig_supportsWorkspaces(ctx, field, obj)

		case "resourceManagerEnabled":

			out.Values[i] = ec._ServerConfig_resourceManagerEnabled(ctx, field, obj)

		case "publicCredentialsSaveEnabled":

			out.Values[i] = ec._ServerConfig_publicCredentialsSaveEnabled(ctx, field, obj)

		case "adminCredentialsSaveEnabled":

			out.Values[i] = ec._ServerConfig_adminCredentialsSaveEnabled(ctx, field, obj)

		case "licenseRequired":

			out.Values[i] = ec._ServerConfig_licenseRequired(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "licenseValid":

			out.Values[i] = ec._ServerConfig_licenseValid(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sessionExpireTime":

			out.Values[i] = ec._ServerConfig_sessionExpireTime(ctx, field, obj)

		case "localHostAddress":

			out.Values[i] = ec._ServerConfig_localHostAddress(ctx, field, obj)

		case "configurationMode":

			out.Values[i] = ec._ServerConfig_configurationMode(ctx, field, obj)

		case "developmentMode":

			out.Values[i] = ec._ServerConfig_developmentMode(ctx, field, obj)

		case "redirectOnFederatedAuth":

			out.Values[i] = ec._ServerConfig_redirectOnFederatedAuth(ctx, field, obj)

		case "enabledFeatures":

			out.Values[i] = ec._ServerConfig_enabledFeatures(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "enabledAuthProviders":

			out.Values[i] = ec._ServerConfig_enabledAuthProviders(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "supportedLanguages":

			out.Values[i] = ec._ServerConfig_supportedLanguages(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "services":

			out.Values[i] = ec._ServerConfig_services(ctx, field, obj)

		case "productConfiguration":

			out.Values[i] = ec._ServerConfig_productConfiguration(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "productInfo":

			out.Values[i] = ec._ServerConfig_productInfo(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultNavigatorSettings":

			out.Values[i] = ec._ServerConfig_defaultNavigatorSettings(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "disabledDrivers":

			out.Values[i] = ec._ServerConfig_disabledDrivers(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resourceQuotas":

			out.Values[i] = ec._ServerConfig_resourceQuotas(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serverErrorImplementors = []string{"ServerError"}

func (ec *executionContext) _ServerError(ctx context.Context, sel ast.SelectionSet, obj *model.ServerError) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serverErrorImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServerError")
		case "message":

			out.Values[i] = ec._ServerError_message(ctx, field, obj)

		case "errorCode":

			out.Values[i] = ec._ServerError_errorCode(ctx, field, obj)

		case "errorType":

			out.Values[i] = ec._ServerError_errorType(ctx, field, obj)

		case "stackTrace":

			out.Values[i] = ec._ServerError_stackTrace(ctx, field, obj)

		case "causedBy":

			out.Values[i] = ec._ServerError_causedBy(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serverLanguageImplementors = []string{"ServerLanguage"}

func (ec *executionContext) _ServerLanguage(ctx context.Context, sel ast.SelectionSet, obj *model.ServerLanguage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serverLanguageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServerLanguage")
		case "isoCode":

			out.Values[i] = ec._ServerLanguage_isoCode(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._ServerLanguage_displayName(ctx, field, obj)

		case "nativeName":

			out.Values[i] = ec._ServerLanguage_nativeName(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serverMessageImplementors = []string{"ServerMessage"}

func (ec *executionContext) _ServerMessage(ctx context.Context, sel ast.SelectionSet, obj *model.ServerMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serverMessageImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServerMessage")
		case "time":

			out.Values[i] = ec._ServerMessage_time(ctx, field, obj)

		case "message":

			out.Values[i] = ec._ServerMessage_message(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sessionInfoImplementors = []string{"SessionInfo"}

func (ec *executionContext) _SessionInfo(ctx context.Context, sel ast.SelectionSet, obj *model.SessionInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sessionInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SessionInfo")
		case "createTime":

			out.Values[i] = ec._SessionInfo_createTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastAccessTime":

			out.Values[i] = ec._SessionInfo_lastAccessTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "locale":

			out.Values[i] = ec._SessionInfo_locale(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cacheExpired":

			out.Values[i] = ec._SessionInfo_cacheExpired(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "serverMessages":

			out.Values[i] = ec._SessionInfo_serverMessages(ctx, field, obj)

		case "connections":

			out.Values[i] = ec._SessionInfo_connections(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actionParameters":

			out.Values[i] = ec._SessionInfo_actionParameters(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userAuthTokenImplementors = []string{"UserAuthToken"}

func (ec *executionContext) _UserAuthToken(ctx context.Context, sel ast.SelectionSet, obj *model.UserAuthToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userAuthTokenImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserAuthToken")
		case "authProvider":

			out.Values[i] = ec._UserAuthToken_authProvider(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "authConfiguration":

			out.Values[i] = ec._UserAuthToken_authConfiguration(ctx, field, obj)

		case "loginTime":

			out.Values[i] = ec._UserAuthToken_loginTime(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userId":

			out.Values[i] = ec._UserAuthToken_userId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._UserAuthToken_displayName(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "message":

			out.Values[i] = ec._UserAuthToken_message(ctx, field, obj)

		case "origin":

			out.Values[i] = ec._UserAuthToken_origin(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userInfoImplementors = []string{"UserInfo"}

func (ec *executionContext) _UserInfo(ctx context.Context, sel ast.SelectionSet, obj *model.UserInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserInfo")
		case "userId":

			out.Values[i] = ec._UserInfo_userId(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._UserInfo_displayName(ctx, field, obj)

		case "authTokens":

			out.Values[i] = ec._UserInfo_authTokens(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "linkedAuthProviders":

			out.Values[i] = ec._UserInfo_linkedAuthProviders(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "metaParameters":

			out.Values[i] = ec._UserInfo_metaParameters(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configurationParameters":

			out.Values[i] = ec._UserInfo_configurationParameters(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var webFeatureSetImplementors = []string{"WebFeatureSet"}

func (ec *executionContext) _WebFeatureSet(ctx context.Context, sel ast.SelectionSet, obj *model.WebFeatureSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, webFeatureSetImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WebFeatureSet")
		case "id":

			out.Values[i] = ec._WebFeatureSet_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":

			out.Values[i] = ec._WebFeatureSet_label(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._WebFeatureSet_description(ctx, field, obj)

		case "icon":

			out.Values[i] = ec._WebFeatureSet_icon(ctx, field, obj)

		case "enabled":

			out.Values[i] = ec._WebFeatureSet_enabled(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var webServiceConfigImplementors = []string{"WebServiceConfig"}

func (ec *executionContext) _WebServiceConfig(ctx context.Context, sel ast.SelectionSet, obj *model.WebServiceConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, webServiceConfigImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WebServiceConfig")
		case "id":

			out.Values[i] = ec._WebServiceConfig_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._WebServiceConfig_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._WebServiceConfig_description(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "bundleVersion":

			out.Values[i] = ec._WebServiceConfig_bundleVersion(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAdminAuthProviderConfiguration2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminAuthProviderConfiguration(ctx context.Context, sel ast.SelectionSet, v model.AdminAuthProviderConfiguration) graphql.Marshaler {
	return ec._AdminAuthProviderConfiguration(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdminAuthProviderConfiguration2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminAuthProviderConfigurationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdminAuthProviderConfiguration) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdminAuthProviderConfiguration2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminAuthProviderConfiguration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdminAuthProviderConfiguration2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminAuthProviderConfiguration(ctx context.Context, sel ast.SelectionSet, v *model.AdminAuthProviderConfiguration) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdminAuthProviderConfiguration(ctx, sel, v)
}

func (ec *executionContext) marshalNAdminConnectionGrantInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminConnectionGrantInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdminConnectionGrantInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdminConnectionGrantInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminConnectionGrantInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdminConnectionGrantInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminConnectionGrantInfo(ctx context.Context, sel ast.SelectionSet, v *model.AdminConnectionGrantInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdminConnectionGrantInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNAdminConnectionSearchInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminConnectionSearchInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdminConnectionSearchInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdminConnectionSearchInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminConnectionSearchInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdminConnectionSearchInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminConnectionSearchInfo(ctx context.Context, sel ast.SelectionSet, v *model.AdminConnectionSearchInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdminConnectionSearchInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNAdminPermissionInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminPermissionInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdminPermissionInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdminPermissionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminPermissionInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdminPermissionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminPermissionInfo(ctx context.Context, sel ast.SelectionSet, v *model.AdminPermissionInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdminPermissionInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNAdminRoleInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminRoleInfo(ctx context.Context, sel ast.SelectionSet, v model.AdminRoleInfo) graphql.Marshaler {
	return ec._AdminRoleInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdminRoleInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminRoleInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdminRoleInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdminRoleInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminRoleInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdminRoleInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminRoleInfo(ctx context.Context, sel ast.SelectionSet, v *model.AdminRoleInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdminRoleInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAdminSubjectType2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminSubjectType(ctx context.Context, v interface{}) (model.AdminSubjectType, error) {
	var res model.AdminSubjectType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAdminSubjectType2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminSubjectType(ctx context.Context, sel ast.SelectionSet, v model.AdminSubjectType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNAdminUserInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminUserInfo(ctx context.Context, sel ast.SelectionSet, v model.AdminUserInfo) graphql.Marshaler {
	return ec._AdminUserInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNAdminUserInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminUserInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AdminUserInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAdminUserInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminUserInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAdminUserInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAdminUserInfo(ctx context.Context, sel ast.SelectionSet, v *model.AdminUserInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AdminUserInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNAsyncTaskInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAsyncTaskInfo(ctx context.Context, sel ast.SelectionSet, v model.AsyncTaskInfo) graphql.Marshaler {
	return ec._AsyncTaskInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNAsyncTaskInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAsyncTaskInfo(ctx context.Context, sel ast.SelectionSet, v *model.AsyncTaskInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AsyncTaskInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthCredentialInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthCredentialInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AuthCredentialInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthCredentialInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthCredentialInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAuthCredentialInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthCredentialInfo(ctx context.Context, sel ast.SelectionSet, v *model.AuthCredentialInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthCredentialInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthInfo(ctx context.Context, sel ast.SelectionSet, v model.AuthInfo) graphql.Marshaler {
	return ec._AuthInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNAuthInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthInfo(ctx context.Context, sel ast.SelectionSet, v *model.AuthInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthProviderConfiguration2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthProviderConfiguration(ctx context.Context, sel ast.SelectionSet, v *model.AuthProviderConfiguration) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthProviderConfiguration(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthProviderCredentialsProfile2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthProviderCredentialsProfileᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AuthProviderCredentialsProfile) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthProviderCredentialsProfile2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthProviderCredentialsProfile(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAuthProviderCredentialsProfile2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthProviderCredentialsProfile(ctx context.Context, sel ast.SelectionSet, v *model.AuthProviderCredentialsProfile) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthProviderCredentialsProfile(ctx, sel, v)
}

func (ec *executionContext) marshalNAuthProviderInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthProviderInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AuthProviderInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthProviderInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthProviderInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNAuthProviderInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthProviderInfo(ctx context.Context, sel ast.SelectionSet, v *model.AuthProviderInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._AuthProviderInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNAuthStatus2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthStatus(ctx context.Context, v interface{}) (model.AuthStatus, error) {
	var res model.AuthStatus
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNAuthStatus2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthStatus(ctx context.Context, sel ast.SelectionSet, v model.AuthStatus) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConnectionConfig2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionConfig(ctx context.Context, v interface{}) (model.ConnectionConfig, error) {
	res, err := ec.unmarshalInputConnectionConfig(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConnectionFolderInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionFolderInfo(ctx context.Context, sel ast.SelectionSet, v model.ConnectionFolderInfo) graphql.Marshaler {
	return ec._ConnectionFolderInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNConnectionFolderInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionFolderInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConnectionFolderInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConnectionFolderInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionFolderInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNConnectionFolderInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionFolderInfo(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionFolderInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConnectionFolderInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNConnectionInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx context.Context, sel ast.SelectionSet, v model.ConnectionInfo) graphql.Marshaler {
	return ec._ConnectionInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNConnectionInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ConnectionInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNConnectionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionInfo(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ConnectionInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDataTransferParameters2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDataTransferParameters(ctx context.Context, v interface{}) (model.DataTransferParameters, error) {
	res, err := ec.unmarshalInputDataTransferParameters(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDataTransferProcessorInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDataTransferProcessorInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DataTransferProcessorInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataTransferProcessorInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDataTransferProcessorInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDataTransferProcessorInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDataTransferProcessorInfo(ctx context.Context, sel ast.SelectionSet, v *model.DataTransferProcessorInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DataTransferProcessorInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNDataTypeLogicalOperation2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDataTypeLogicalOperationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DataTypeLogicalOperation) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDataTypeLogicalOperation2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDataTypeLogicalOperation(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDataTypeLogicalOperation2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDataTypeLogicalOperation(ctx context.Context, sel ast.SelectionSet, v *model.DataTypeLogicalOperation) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DataTypeLogicalOperation(ctx, sel, v)
}

func (ec *executionContext) marshalNDatabaseAuthModel2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseAuthModelᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DatabaseAuthModel) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDatabaseAuthModel2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseAuthModel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDatabaseAuthModel2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseAuthModel(ctx context.Context, sel ast.SelectionSet, v *model.DatabaseAuthModel) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DatabaseAuthModel(ctx, sel, v)
}

func (ec *executionContext) marshalNDatabaseCatalog2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseCatalogᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DatabaseCatalog) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDatabaseCatalog2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseCatalog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDatabaseCatalog2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseCatalog(ctx context.Context, sel ast.SelectionSet, v *model.DatabaseCatalog) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DatabaseCatalog(ctx, sel, v)
}

func (ec *executionContext) marshalNDatabaseStructContainers2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseStructContainers(ctx context.Context, sel ast.SelectionSet, v model.DatabaseStructContainers) graphql.Marshaler {
	return ec._DatabaseStructContainers(ctx, sel, &v)
}

func (ec *executionContext) marshalNDatabaseStructContainers2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseStructContainers(ctx context.Context, sel ast.SelectionSet, v *model.DatabaseStructContainers) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DatabaseStructContainers(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDateTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDateTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNDriverInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDriverInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DriverInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDriverInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDriverInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNDriverInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDriverInfo(ctx context.Context, sel ast.SelectionSet, v *model.DriverInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DriverInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNID2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOID2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNID2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOID2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalNLogEntry2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐLogEntryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.LogEntry) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNLogEntry2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐLogEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNLogEntry2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐLogEntry(ctx context.Context, sel ast.SelectionSet, v *model.LogEntry) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._LogEntry(ctx, sel, v)
}

func (ec *executionContext) marshalNNavigatorNodeInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorNodeInfo(ctx context.Context, sel ast.SelectionSet, v model.NavigatorNodeInfo) graphql.Marshaler {
	return ec._NavigatorNodeInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNNavigatorNodeInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorNodeInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.NavigatorNodeInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNavigatorNodeInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorNodeInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNavigatorNodeInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorNodeInfo(ctx context.Context, sel ast.SelectionSet, v *model.NavigatorNodeInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NavigatorNodeInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNNavigatorSettings2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorSettings(ctx context.Context, sel ast.SelectionSet, v *model.NavigatorSettings) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NavigatorSettings(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNavigatorSettingsInput2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNavigatorSettingsInput(ctx context.Context, v interface{}) (model.NavigatorSettingsInput, error) {
	res, err := ec.unmarshalInputNavigatorSettingsInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNetworkEndpointInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkEndpointInfo(ctx context.Context, sel ast.SelectionSet, v model.NetworkEndpointInfo) graphql.Marshaler {
	return ec._NetworkEndpointInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNNetworkEndpointInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkEndpointInfo(ctx context.Context, sel ast.SelectionSet, v *model.NetworkEndpointInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NetworkEndpointInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNetworkHandlerAuthType2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerAuthType(ctx context.Context, v interface{}) (model.NetworkHandlerAuthType, error) {
	var res model.NetworkHandlerAuthType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNetworkHandlerAuthType2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerAuthType(ctx context.Context, sel ast.SelectionSet, v model.NetworkHandlerAuthType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNNetworkHandlerConfig2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerConfigᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.NetworkHandlerConfig) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNetworkHandlerConfig2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerConfig(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNetworkHandlerConfig2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerConfig(ctx context.Context, sel ast.SelectionSet, v *model.NetworkHandlerConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NetworkHandlerConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNetworkHandlerConfigInput2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerConfigInput(ctx context.Context, v interface{}) (model.NetworkHandlerConfigInput, error) {
	res, err := ec.unmarshalInputNetworkHandlerConfigInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNetworkHandlerConfigInput2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerConfigInput(ctx context.Context, v interface{}) (*model.NetworkHandlerConfigInput, error) {
	res, err := ec.unmarshalInputNetworkHandlerConfigInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNetworkHandlerDescriptor2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerDescriptorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.NetworkHandlerDescriptor) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNetworkHandlerDescriptor2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerDescriptor(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNNetworkHandlerDescriptor2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerDescriptor(ctx context.Context, sel ast.SelectionSet, v *model.NetworkHandlerDescriptor) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._NetworkHandlerDescriptor(ctx, sel, v)
}

func (ec *executionContext) unmarshalNObject2interface(ctx context.Context, v interface{}) (interface{}, error) {
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNObject2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNObject2ᚕinterface(ctx context.Context, v interface{}) ([]interface{}, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOObject2interface(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNObject2ᚕinterface(ctx context.Context, sel ast.SelectionSet, v []interface{}) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOObject2interface(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNObjectOrigin2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectOriginᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ObjectOrigin) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNObjectOrigin2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectOrigin(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNObjectOrigin2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectOrigin(ctx context.Context, sel ast.SelectionSet, v *model.ObjectOrigin) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ObjectOrigin(ctx, sel, v)
}

func (ec *executionContext) marshalNObjectPropertyInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfo(ctx context.Context, sel ast.SelectionSet, v model.ObjectPropertyInfo) graphql.Marshaler {
	return ec._ObjectPropertyInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ObjectPropertyInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNObjectPropertyInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNObjectPropertyInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfo(ctx context.Context, sel ast.SelectionSet, v *model.ObjectPropertyInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ObjectPropertyInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNObjectPropertyLength2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyLength(ctx context.Context, v interface{}) (model.ObjectPropertyLength, error) {
	var res model.ObjectPropertyLength
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNObjectPropertyLength2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyLength(ctx context.Context, sel ast.SelectionSet, v model.ObjectPropertyLength) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNProductInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐProductInfo(ctx context.Context, sel ast.SelectionSet, v *model.ProductInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ProductInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNRMProject2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐRMProjectᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.RMProject) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRMProject2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐRMProject(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRMProject2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐRMProject(ctx context.Context, sel ast.SelectionSet, v *model.RMProject) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RMProject(ctx, sel, v)
}

func (ec *executionContext) marshalNRMResource2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐRMResourceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.RMResource) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRMResource2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐRMResource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNRMResource2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐRMResource(ctx context.Context, sel ast.SelectionSet, v *model.RMResource) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._RMResource(ctx, sel, v)
}

func (ec *executionContext) unmarshalNResultDataFormat2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐResultDataFormat(ctx context.Context, v interface{}) (model.ResultDataFormat, error) {
	var res model.ResultDataFormat
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNResultDataFormat2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐResultDataFormat(ctx context.Context, sel ast.SelectionSet, v model.ResultDataFormat) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNResultDataFormat2ᚕgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐResultDataFormatᚄ(ctx context.Context, v interface{}) ([]model.ResultDataFormat, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]model.ResultDataFormat, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNResultDataFormat2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐResultDataFormat(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNResultDataFormat2ᚕgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐResultDataFormatᚄ(ctx context.Context, sel ast.SelectionSet, v []model.ResultDataFormat) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNResultDataFormat2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐResultDataFormat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSQLContextInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLContextInfo(ctx context.Context, sel ast.SelectionSet, v model.SQLContextInfo) graphql.Marshaler {
	return ec._SQLContextInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNSQLContextInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLContextInfo(ctx context.Context, sel ast.SelectionSet, v []*model.SQLContextInfo) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSQLContextInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLContextInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalNSQLContextInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLContextInfo(ctx context.Context, sel ast.SelectionSet, v *model.SQLContextInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SQLContextInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNSQLExecuteInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecuteInfo(ctx context.Context, sel ast.SelectionSet, v model.SQLExecuteInfo) graphql.Marshaler {
	return ec._SQLExecuteInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNSQLExecuteInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecuteInfo(ctx context.Context, sel ast.SelectionSet, v *model.SQLExecuteInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SQLExecuteInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNSQLExecutionPlan2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecutionPlan(ctx context.Context, sel ast.SelectionSet, v model.SQLExecutionPlan) graphql.Marshaler {
	return ec._SQLExecutionPlan(ctx, sel, &v)
}

func (ec *executionContext) marshalNSQLExecutionPlan2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecutionPlan(ctx context.Context, sel ast.SelectionSet, v *model.SQLExecutionPlan) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SQLExecutionPlan(ctx, sel, v)
}

func (ec *executionContext) marshalNSQLExecutionPlanNode2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecutionPlanNodeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SQLExecutionPlanNode) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSQLExecutionPlanNode2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecutionPlanNode(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSQLExecutionPlanNode2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecutionPlanNode(ctx context.Context, sel ast.SelectionSet, v *model.SQLExecutionPlanNode) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SQLExecutionPlanNode(ctx, sel, v)
}

func (ec *executionContext) marshalNSQLQueryGenerator2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLQueryGeneratorᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SQLQueryGenerator) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSQLQueryGenerator2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLQueryGenerator(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSQLQueryGenerator2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLQueryGenerator(ctx context.Context, sel ast.SelectionSet, v *model.SQLQueryGenerator) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SQLQueryGenerator(ctx, sel, v)
}

func (ec *executionContext) marshalNSQLQueryResults2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLQueryResultsᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SQLQueryResults) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSQLQueryResults2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLQueryResults(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSQLQueryResults2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLQueryResults(ctx context.Context, sel ast.SelectionSet, v *model.SQLQueryResults) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SQLQueryResults(ctx, sel, v)
}

func (ec *executionContext) unmarshalNSQLResultRow2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultRowᚄ(ctx context.Context, v interface{}) ([]*model.SQLResultRow, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SQLResultRow, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSQLResultRow2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultRow(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalNSQLResultRow2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultRow(ctx context.Context, v interface{}) (*model.SQLResultRow, error) {
	res, err := ec.unmarshalInputSQLResultRow(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNSQLScriptInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLScriptInfo(ctx context.Context, sel ast.SelectionSet, v model.SQLScriptInfo) graphql.Marshaler {
	return ec._SQLScriptInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNSQLScriptInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLScriptInfo(ctx context.Context, sel ast.SelectionSet, v *model.SQLScriptInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SQLScriptInfo(ctx, sel, v)
}

func (ec *executionContext) marshalNSQLScriptQuery2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLScriptQuery(ctx context.Context, sel ast.SelectionSet, v model.SQLScriptQuery) graphql.Marshaler {
	return ec._SQLScriptQuery(ctx, sel, &v)
}

func (ec *executionContext) marshalNSQLScriptQuery2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLScriptQueryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.SQLScriptQuery) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSQLScriptQuery2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLScriptQuery(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNSQLScriptQuery2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLScriptQuery(ctx context.Context, sel ast.SelectionSet, v *model.SQLScriptQuery) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SQLScriptQuery(ctx, sel, v)
}

func (ec *executionContext) marshalNServerConfig2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerConfig(ctx context.Context, sel ast.SelectionSet, v model.ServerConfig) graphql.Marshaler {
	return ec._ServerConfig(ctx, sel, &v)
}

func (ec *executionContext) marshalNServerConfig2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerConfig(ctx context.Context, sel ast.SelectionSet, v *model.ServerConfig) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ServerConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalNServerConfigInput2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerConfigInput(ctx context.Context, v interface{}) (model.ServerConfigInput, error) {
	res, err := ec.unmarshalInputServerConfigInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNServerLanguage2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerLanguageᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ServerLanguage) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNServerLanguage2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerLanguage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNServerLanguage2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerLanguage(ctx context.Context, sel ast.SelectionSet, v *model.ServerLanguage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._ServerLanguage(ctx, sel, v)
}

func (ec *executionContext) marshalNSessionInfo2githubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSessionInfo(ctx context.Context, sel ast.SelectionSet, v model.SessionInfo) graphql.Marshaler {
	return ec._SessionInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalNSessionInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSessionInfo(ctx context.Context, sel ast.SelectionSet, v *model.SessionInfo) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._SessionInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚕᚕᚖstring(ctx context.Context, v interface{}) ([][]*string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([][]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚕᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v [][]*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚕᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNUserAuthToken2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐUserAuthTokenᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserAuthToken) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserAuthToken2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐUserAuthToken(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNUserAuthToken2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐUserAuthToken(ctx context.Context, sel ast.SelectionSet, v *model.UserAuthToken) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._UserAuthToken(ctx, sel, v)
}

func (ec *executionContext) marshalNWebFeatureSet2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐWebFeatureSetᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WebFeatureSet) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWebFeatureSet2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐWebFeatureSet(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalNWebFeatureSet2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐWebFeatureSet(ctx context.Context, sel ast.SelectionSet, v *model.WebFeatureSet) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._WebFeatureSet(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOAuthCredentialEncryption2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthCredentialEncryption(ctx context.Context, v interface{}) (*model.AuthCredentialEncryption, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.AuthCredentialEncryption)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAuthCredentialEncryption2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthCredentialEncryption(ctx context.Context, sel ast.SelectionSet, v *model.AuthCredentialEncryption) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOAuthProviderConfiguration2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthProviderConfigurationᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.AuthProviderConfiguration) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAuthProviderConfiguration2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐAuthProviderConfiguration(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) unmarshalOConnectionConfig2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐConnectionConfig(ctx context.Context, v interface{}) (*model.ConnectionConfig, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConnectionConfig(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODatabaseObjectInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐDatabaseObjectInfo(ctx context.Context, sel ast.SelectionSet, v *model.DatabaseObjectInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DatabaseObjectInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalODateTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODateTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) unmarshalONetworkHandlerAuthType2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerAuthType(ctx context.Context, v interface{}) (*model.NetworkHandlerAuthType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.NetworkHandlerAuthType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONetworkHandlerAuthType2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerAuthType(ctx context.Context, sel ast.SelectionSet, v *model.NetworkHandlerAuthType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalONetworkHandlerConfigInput2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerConfigInputᚄ(ctx context.Context, v interface{}) ([]*model.NetworkHandlerConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.NetworkHandlerConfigInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNNetworkHandlerConfigInput2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerConfigInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalONetworkHandlerType2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerType(ctx context.Context, v interface{}) (*model.NetworkHandlerType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.NetworkHandlerType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalONetworkHandlerType2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐNetworkHandlerType(ctx context.Context, sel ast.SelectionSet, v *model.NetworkHandlerType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOObject2interface(ctx context.Context, v interface{}) (interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalAny(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOObject2interface(ctx context.Context, sel ast.SelectionSet, v interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalAny(v)
	return res
}

func (ec *executionContext) unmarshalOObject2ᚕinterface(ctx context.Context, v interface{}) ([]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOObject2interface(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOObject2ᚕinterface(ctx context.Context, sel ast.SelectionSet, v []interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOObject2interface(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOObject2ᚕᚕinterface(ctx context.Context, v interface{}) ([][]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([][]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOObject2ᚕinterface(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOObject2ᚕᚕinterface(ctx context.Context, sel ast.SelectionSet, v [][]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOObject2ᚕinterface(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOObjectPropertyFilter2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyFilter(ctx context.Context, v interface{}) (*model.ObjectPropertyFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputObjectPropertyFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfo(ctx context.Context, sel ast.SelectionSet, v []*model.ObjectPropertyInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOObjectPropertyInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOObjectPropertyInfo2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfoᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ObjectPropertyInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNObjectPropertyInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOObjectPropertyInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐObjectPropertyInfo(ctx context.Context, sel ast.SelectionSet, v *model.ObjectPropertyInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ObjectPropertyInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOResultDataFormat2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐResultDataFormat(ctx context.Context, v interface{}) (*model.ResultDataFormat, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.ResultDataFormat)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOResultDataFormat2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐResultDataFormat(ctx context.Context, sel ast.SelectionSet, v *model.ResultDataFormat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOSQLCompletionProposal2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLCompletionProposal(ctx context.Context, sel ast.SelectionSet, v []*model.SQLCompletionProposal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSQLCompletionProposal2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLCompletionProposal(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSQLCompletionProposal2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLCompletionProposal(ctx context.Context, sel ast.SelectionSet, v *model.SQLCompletionProposal) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SQLCompletionProposal(ctx, sel, v)
}

func (ec *executionContext) marshalOSQLContextInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLContextInfo(ctx context.Context, sel ast.SelectionSet, v *model.SQLContextInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SQLContextInfo(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSQLDataFilter2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLDataFilter(ctx context.Context, v interface{}) (*model.SQLDataFilter, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSQLDataFilter(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOSQLDataFilterConstraint2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLDataFilterConstraint(ctx context.Context, v interface{}) ([]*model.SQLDataFilterConstraint, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SQLDataFilterConstraint, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOSQLDataFilterConstraint2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLDataFilterConstraint(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOSQLDataFilterConstraint2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLDataFilterConstraint(ctx context.Context, v interface{}) (*model.SQLDataFilterConstraint, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputSQLDataFilterConstraint(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSQLDialectInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLDialectInfo(ctx context.Context, sel ast.SelectionSet, v *model.SQLDialectInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SQLDialectInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOSQLExecuteInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLExecuteInfo(ctx context.Context, sel ast.SelectionSet, v *model.SQLExecuteInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SQLExecuteInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOSQLResultColumn2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultColumn(ctx context.Context, sel ast.SelectionSet, v []*model.SQLResultColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSQLResultColumn2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultColumn(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSQLResultColumn2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultColumn(ctx context.Context, sel ast.SelectionSet, v *model.SQLResultColumn) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SQLResultColumn(ctx, sel, v)
}

func (ec *executionContext) unmarshalOSQLResultRow2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultRowᚄ(ctx context.Context, v interface{}) ([]*model.SQLResultRow, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.SQLResultRow, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNSQLResultRow2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultRow(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOSQLResultSet2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐSQLResultSet(ctx context.Context, sel ast.SelectionSet, v *model.SQLResultSet) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SQLResultSet(ctx, sel, v)
}

func (ec *executionContext) marshalOServerError2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerError(ctx context.Context, sel ast.SelectionSet, v *model.ServerError) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ServerError(ctx, sel, v)
}

func (ec *executionContext) marshalOServerMessage2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerMessage(ctx context.Context, sel ast.SelectionSet, v []*model.ServerMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOServerMessage2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerMessage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOServerMessage2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐServerMessage(ctx context.Context, sel ast.SelectionSet, v *model.ServerMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ServerMessage(ctx, sel, v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) marshalOUserAuthToken2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐUserAuthTokenᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.UserAuthToken) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUserAuthToken2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐUserAuthToken(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalOUserInfo2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐUserInfo(ctx context.Context, sel ast.SelectionSet, v *model.UserInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOWebServiceConfig2ᚕᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐWebServiceConfig(ctx context.Context, sel ast.SelectionSet, v []*model.WebServiceConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOWebServiceConfig2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐWebServiceConfig(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOWebServiceConfig2ᚖgithubᚗcomᚋactiontechᚋsqleᚋsqleᚋapiᚋcloudbeaver_wrapperᚋgraphᚋmodelᚐWebServiceConfig(ctx context.Context, sel ast.SelectionSet, v *model.WebServiceConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._WebServiceConfig(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
