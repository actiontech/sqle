/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: protobuf/pg_query.proto */

#ifndef PROTOBUF_C_protobuf_2fpg_5fquery_2eproto__INCLUDED
#define PROTOBUF_C_protobuf_2fpg_5fquery_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct PgQuery__ParseResult PgQuery__ParseResult;
typedef struct PgQuery__ScanResult PgQuery__ScanResult;
typedef struct PgQuery__Node PgQuery__Node;
typedef struct PgQuery__Integer PgQuery__Integer;
typedef struct PgQuery__Float PgQuery__Float;
typedef struct PgQuery__Boolean PgQuery__Boolean;
typedef struct PgQuery__String PgQuery__String;
typedef struct PgQuery__BitString PgQuery__BitString;
typedef struct PgQuery__List PgQuery__List;
typedef struct PgQuery__OidList PgQuery__OidList;
typedef struct PgQuery__IntList PgQuery__IntList;
typedef struct PgQuery__AConst PgQuery__AConst;
typedef struct PgQuery__Alias PgQuery__Alias;
typedef struct PgQuery__RangeVar PgQuery__RangeVar;
typedef struct PgQuery__TableFunc PgQuery__TableFunc;
typedef struct PgQuery__Var PgQuery__Var;
typedef struct PgQuery__Param PgQuery__Param;
typedef struct PgQuery__Aggref PgQuery__Aggref;
typedef struct PgQuery__GroupingFunc PgQuery__GroupingFunc;
typedef struct PgQuery__WindowFunc PgQuery__WindowFunc;
typedef struct PgQuery__SubscriptingRef PgQuery__SubscriptingRef;
typedef struct PgQuery__FuncExpr PgQuery__FuncExpr;
typedef struct PgQuery__NamedArgExpr PgQuery__NamedArgExpr;
typedef struct PgQuery__OpExpr PgQuery__OpExpr;
typedef struct PgQuery__DistinctExpr PgQuery__DistinctExpr;
typedef struct PgQuery__NullIfExpr PgQuery__NullIfExpr;
typedef struct PgQuery__ScalarArrayOpExpr PgQuery__ScalarArrayOpExpr;
typedef struct PgQuery__BoolExpr PgQuery__BoolExpr;
typedef struct PgQuery__SubLink PgQuery__SubLink;
typedef struct PgQuery__SubPlan PgQuery__SubPlan;
typedef struct PgQuery__AlternativeSubPlan PgQuery__AlternativeSubPlan;
typedef struct PgQuery__FieldSelect PgQuery__FieldSelect;
typedef struct PgQuery__FieldStore PgQuery__FieldStore;
typedef struct PgQuery__RelabelType PgQuery__RelabelType;
typedef struct PgQuery__CoerceViaIO PgQuery__CoerceViaIO;
typedef struct PgQuery__ArrayCoerceExpr PgQuery__ArrayCoerceExpr;
typedef struct PgQuery__ConvertRowtypeExpr PgQuery__ConvertRowtypeExpr;
typedef struct PgQuery__CollateExpr PgQuery__CollateExpr;
typedef struct PgQuery__CaseExpr PgQuery__CaseExpr;
typedef struct PgQuery__CaseWhen PgQuery__CaseWhen;
typedef struct PgQuery__CaseTestExpr PgQuery__CaseTestExpr;
typedef struct PgQuery__ArrayExpr PgQuery__ArrayExpr;
typedef struct PgQuery__RowExpr PgQuery__RowExpr;
typedef struct PgQuery__RowCompareExpr PgQuery__RowCompareExpr;
typedef struct PgQuery__CoalesceExpr PgQuery__CoalesceExpr;
typedef struct PgQuery__MinMaxExpr PgQuery__MinMaxExpr;
typedef struct PgQuery__SQLValueFunction PgQuery__SQLValueFunction;
typedef struct PgQuery__XmlExpr PgQuery__XmlExpr;
typedef struct PgQuery__NullTest PgQuery__NullTest;
typedef struct PgQuery__BooleanTest PgQuery__BooleanTest;
typedef struct PgQuery__CoerceToDomain PgQuery__CoerceToDomain;
typedef struct PgQuery__CoerceToDomainValue PgQuery__CoerceToDomainValue;
typedef struct PgQuery__SetToDefault PgQuery__SetToDefault;
typedef struct PgQuery__CurrentOfExpr PgQuery__CurrentOfExpr;
typedef struct PgQuery__NextValueExpr PgQuery__NextValueExpr;
typedef struct PgQuery__InferenceElem PgQuery__InferenceElem;
typedef struct PgQuery__TargetEntry PgQuery__TargetEntry;
typedef struct PgQuery__RangeTblRef PgQuery__RangeTblRef;
typedef struct PgQuery__JoinExpr PgQuery__JoinExpr;
typedef struct PgQuery__FromExpr PgQuery__FromExpr;
typedef struct PgQuery__OnConflictExpr PgQuery__OnConflictExpr;
typedef struct PgQuery__IntoClause PgQuery__IntoClause;
typedef struct PgQuery__MergeAction PgQuery__MergeAction;
typedef struct PgQuery__RawStmt PgQuery__RawStmt;
typedef struct PgQuery__Query PgQuery__Query;
typedef struct PgQuery__InsertStmt PgQuery__InsertStmt;
typedef struct PgQuery__DeleteStmt PgQuery__DeleteStmt;
typedef struct PgQuery__UpdateStmt PgQuery__UpdateStmt;
typedef struct PgQuery__MergeStmt PgQuery__MergeStmt;
typedef struct PgQuery__SelectStmt PgQuery__SelectStmt;
typedef struct PgQuery__ReturnStmt PgQuery__ReturnStmt;
typedef struct PgQuery__PLAssignStmt PgQuery__PLAssignStmt;
typedef struct PgQuery__AlterTableStmt PgQuery__AlterTableStmt;
typedef struct PgQuery__AlterTableCmd PgQuery__AlterTableCmd;
typedef struct PgQuery__AlterDomainStmt PgQuery__AlterDomainStmt;
typedef struct PgQuery__SetOperationStmt PgQuery__SetOperationStmt;
typedef struct PgQuery__GrantStmt PgQuery__GrantStmt;
typedef struct PgQuery__GrantRoleStmt PgQuery__GrantRoleStmt;
typedef struct PgQuery__AlterDefaultPrivilegesStmt PgQuery__AlterDefaultPrivilegesStmt;
typedef struct PgQuery__ClosePortalStmt PgQuery__ClosePortalStmt;
typedef struct PgQuery__ClusterStmt PgQuery__ClusterStmt;
typedef struct PgQuery__CopyStmt PgQuery__CopyStmt;
typedef struct PgQuery__CreateStmt PgQuery__CreateStmt;
typedef struct PgQuery__DefineStmt PgQuery__DefineStmt;
typedef struct PgQuery__DropStmt PgQuery__DropStmt;
typedef struct PgQuery__TruncateStmt PgQuery__TruncateStmt;
typedef struct PgQuery__CommentStmt PgQuery__CommentStmt;
typedef struct PgQuery__FetchStmt PgQuery__FetchStmt;
typedef struct PgQuery__IndexStmt PgQuery__IndexStmt;
typedef struct PgQuery__CreateFunctionStmt PgQuery__CreateFunctionStmt;
typedef struct PgQuery__AlterFunctionStmt PgQuery__AlterFunctionStmt;
typedef struct PgQuery__DoStmt PgQuery__DoStmt;
typedef struct PgQuery__RenameStmt PgQuery__RenameStmt;
typedef struct PgQuery__RuleStmt PgQuery__RuleStmt;
typedef struct PgQuery__NotifyStmt PgQuery__NotifyStmt;
typedef struct PgQuery__ListenStmt PgQuery__ListenStmt;
typedef struct PgQuery__UnlistenStmt PgQuery__UnlistenStmt;
typedef struct PgQuery__TransactionStmt PgQuery__TransactionStmt;
typedef struct PgQuery__ViewStmt PgQuery__ViewStmt;
typedef struct PgQuery__LoadStmt PgQuery__LoadStmt;
typedef struct PgQuery__CreateDomainStmt PgQuery__CreateDomainStmt;
typedef struct PgQuery__CreatedbStmt PgQuery__CreatedbStmt;
typedef struct PgQuery__DropdbStmt PgQuery__DropdbStmt;
typedef struct PgQuery__VacuumStmt PgQuery__VacuumStmt;
typedef struct PgQuery__ExplainStmt PgQuery__ExplainStmt;
typedef struct PgQuery__CreateTableAsStmt PgQuery__CreateTableAsStmt;
typedef struct PgQuery__CreateSeqStmt PgQuery__CreateSeqStmt;
typedef struct PgQuery__AlterSeqStmt PgQuery__AlterSeqStmt;
typedef struct PgQuery__VariableSetStmt PgQuery__VariableSetStmt;
typedef struct PgQuery__VariableShowStmt PgQuery__VariableShowStmt;
typedef struct PgQuery__DiscardStmt PgQuery__DiscardStmt;
typedef struct PgQuery__CreateTrigStmt PgQuery__CreateTrigStmt;
typedef struct PgQuery__CreatePLangStmt PgQuery__CreatePLangStmt;
typedef struct PgQuery__CreateRoleStmt PgQuery__CreateRoleStmt;
typedef struct PgQuery__AlterRoleStmt PgQuery__AlterRoleStmt;
typedef struct PgQuery__DropRoleStmt PgQuery__DropRoleStmt;
typedef struct PgQuery__LockStmt PgQuery__LockStmt;
typedef struct PgQuery__ConstraintsSetStmt PgQuery__ConstraintsSetStmt;
typedef struct PgQuery__ReindexStmt PgQuery__ReindexStmt;
typedef struct PgQuery__CheckPointStmt PgQuery__CheckPointStmt;
typedef struct PgQuery__CreateSchemaStmt PgQuery__CreateSchemaStmt;
typedef struct PgQuery__AlterDatabaseStmt PgQuery__AlterDatabaseStmt;
typedef struct PgQuery__AlterDatabaseRefreshCollStmt PgQuery__AlterDatabaseRefreshCollStmt;
typedef struct PgQuery__AlterDatabaseSetStmt PgQuery__AlterDatabaseSetStmt;
typedef struct PgQuery__AlterRoleSetStmt PgQuery__AlterRoleSetStmt;
typedef struct PgQuery__CreateConversionStmt PgQuery__CreateConversionStmt;
typedef struct PgQuery__CreateCastStmt PgQuery__CreateCastStmt;
typedef struct PgQuery__CreateOpClassStmt PgQuery__CreateOpClassStmt;
typedef struct PgQuery__CreateOpFamilyStmt PgQuery__CreateOpFamilyStmt;
typedef struct PgQuery__AlterOpFamilyStmt PgQuery__AlterOpFamilyStmt;
typedef struct PgQuery__PrepareStmt PgQuery__PrepareStmt;
typedef struct PgQuery__ExecuteStmt PgQuery__ExecuteStmt;
typedef struct PgQuery__DeallocateStmt PgQuery__DeallocateStmt;
typedef struct PgQuery__DeclareCursorStmt PgQuery__DeclareCursorStmt;
typedef struct PgQuery__CreateTableSpaceStmt PgQuery__CreateTableSpaceStmt;
typedef struct PgQuery__DropTableSpaceStmt PgQuery__DropTableSpaceStmt;
typedef struct PgQuery__AlterObjectDependsStmt PgQuery__AlterObjectDependsStmt;
typedef struct PgQuery__AlterObjectSchemaStmt PgQuery__AlterObjectSchemaStmt;
typedef struct PgQuery__AlterOwnerStmt PgQuery__AlterOwnerStmt;
typedef struct PgQuery__AlterOperatorStmt PgQuery__AlterOperatorStmt;
typedef struct PgQuery__AlterTypeStmt PgQuery__AlterTypeStmt;
typedef struct PgQuery__DropOwnedStmt PgQuery__DropOwnedStmt;
typedef struct PgQuery__ReassignOwnedStmt PgQuery__ReassignOwnedStmt;
typedef struct PgQuery__CompositeTypeStmt PgQuery__CompositeTypeStmt;
typedef struct PgQuery__CreateEnumStmt PgQuery__CreateEnumStmt;
typedef struct PgQuery__CreateRangeStmt PgQuery__CreateRangeStmt;
typedef struct PgQuery__AlterEnumStmt PgQuery__AlterEnumStmt;
typedef struct PgQuery__AlterTSDictionaryStmt PgQuery__AlterTSDictionaryStmt;
typedef struct PgQuery__AlterTSConfigurationStmt PgQuery__AlterTSConfigurationStmt;
typedef struct PgQuery__CreateFdwStmt PgQuery__CreateFdwStmt;
typedef struct PgQuery__AlterFdwStmt PgQuery__AlterFdwStmt;
typedef struct PgQuery__CreateForeignServerStmt PgQuery__CreateForeignServerStmt;
typedef struct PgQuery__AlterForeignServerStmt PgQuery__AlterForeignServerStmt;
typedef struct PgQuery__CreateUserMappingStmt PgQuery__CreateUserMappingStmt;
typedef struct PgQuery__AlterUserMappingStmt PgQuery__AlterUserMappingStmt;
typedef struct PgQuery__DropUserMappingStmt PgQuery__DropUserMappingStmt;
typedef struct PgQuery__AlterTableSpaceOptionsStmt PgQuery__AlterTableSpaceOptionsStmt;
typedef struct PgQuery__AlterTableMoveAllStmt PgQuery__AlterTableMoveAllStmt;
typedef struct PgQuery__SecLabelStmt PgQuery__SecLabelStmt;
typedef struct PgQuery__CreateForeignTableStmt PgQuery__CreateForeignTableStmt;
typedef struct PgQuery__ImportForeignSchemaStmt PgQuery__ImportForeignSchemaStmt;
typedef struct PgQuery__CreateExtensionStmt PgQuery__CreateExtensionStmt;
typedef struct PgQuery__AlterExtensionStmt PgQuery__AlterExtensionStmt;
typedef struct PgQuery__AlterExtensionContentsStmt PgQuery__AlterExtensionContentsStmt;
typedef struct PgQuery__CreateEventTrigStmt PgQuery__CreateEventTrigStmt;
typedef struct PgQuery__AlterEventTrigStmt PgQuery__AlterEventTrigStmt;
typedef struct PgQuery__RefreshMatViewStmt PgQuery__RefreshMatViewStmt;
typedef struct PgQuery__ReplicaIdentityStmt PgQuery__ReplicaIdentityStmt;
typedef struct PgQuery__AlterSystemStmt PgQuery__AlterSystemStmt;
typedef struct PgQuery__CreatePolicyStmt PgQuery__CreatePolicyStmt;
typedef struct PgQuery__AlterPolicyStmt PgQuery__AlterPolicyStmt;
typedef struct PgQuery__CreateTransformStmt PgQuery__CreateTransformStmt;
typedef struct PgQuery__CreateAmStmt PgQuery__CreateAmStmt;
typedef struct PgQuery__CreatePublicationStmt PgQuery__CreatePublicationStmt;
typedef struct PgQuery__AlterPublicationStmt PgQuery__AlterPublicationStmt;
typedef struct PgQuery__CreateSubscriptionStmt PgQuery__CreateSubscriptionStmt;
typedef struct PgQuery__AlterSubscriptionStmt PgQuery__AlterSubscriptionStmt;
typedef struct PgQuery__DropSubscriptionStmt PgQuery__DropSubscriptionStmt;
typedef struct PgQuery__CreateStatsStmt PgQuery__CreateStatsStmt;
typedef struct PgQuery__AlterCollationStmt PgQuery__AlterCollationStmt;
typedef struct PgQuery__CallStmt PgQuery__CallStmt;
typedef struct PgQuery__AlterStatsStmt PgQuery__AlterStatsStmt;
typedef struct PgQuery__AExpr PgQuery__AExpr;
typedef struct PgQuery__ColumnRef PgQuery__ColumnRef;
typedef struct PgQuery__ParamRef PgQuery__ParamRef;
typedef struct PgQuery__FuncCall PgQuery__FuncCall;
typedef struct PgQuery__AStar PgQuery__AStar;
typedef struct PgQuery__AIndices PgQuery__AIndices;
typedef struct PgQuery__AIndirection PgQuery__AIndirection;
typedef struct PgQuery__AArrayExpr PgQuery__AArrayExpr;
typedef struct PgQuery__ResTarget PgQuery__ResTarget;
typedef struct PgQuery__MultiAssignRef PgQuery__MultiAssignRef;
typedef struct PgQuery__TypeCast PgQuery__TypeCast;
typedef struct PgQuery__CollateClause PgQuery__CollateClause;
typedef struct PgQuery__SortBy PgQuery__SortBy;
typedef struct PgQuery__WindowDef PgQuery__WindowDef;
typedef struct PgQuery__RangeSubselect PgQuery__RangeSubselect;
typedef struct PgQuery__RangeFunction PgQuery__RangeFunction;
typedef struct PgQuery__RangeTableSample PgQuery__RangeTableSample;
typedef struct PgQuery__RangeTableFunc PgQuery__RangeTableFunc;
typedef struct PgQuery__RangeTableFuncCol PgQuery__RangeTableFuncCol;
typedef struct PgQuery__TypeName PgQuery__TypeName;
typedef struct PgQuery__ColumnDef PgQuery__ColumnDef;
typedef struct PgQuery__IndexElem PgQuery__IndexElem;
typedef struct PgQuery__StatsElem PgQuery__StatsElem;
typedef struct PgQuery__Constraint PgQuery__Constraint;
typedef struct PgQuery__DefElem PgQuery__DefElem;
typedef struct PgQuery__RangeTblEntry PgQuery__RangeTblEntry;
typedef struct PgQuery__RangeTblFunction PgQuery__RangeTblFunction;
typedef struct PgQuery__TableSampleClause PgQuery__TableSampleClause;
typedef struct PgQuery__WithCheckOption PgQuery__WithCheckOption;
typedef struct PgQuery__SortGroupClause PgQuery__SortGroupClause;
typedef struct PgQuery__GroupingSet PgQuery__GroupingSet;
typedef struct PgQuery__WindowClause PgQuery__WindowClause;
typedef struct PgQuery__ObjectWithArgs PgQuery__ObjectWithArgs;
typedef struct PgQuery__AccessPriv PgQuery__AccessPriv;
typedef struct PgQuery__CreateOpClassItem PgQuery__CreateOpClassItem;
typedef struct PgQuery__TableLikeClause PgQuery__TableLikeClause;
typedef struct PgQuery__FunctionParameter PgQuery__FunctionParameter;
typedef struct PgQuery__LockingClause PgQuery__LockingClause;
typedef struct PgQuery__RowMarkClause PgQuery__RowMarkClause;
typedef struct PgQuery__XmlSerialize PgQuery__XmlSerialize;
typedef struct PgQuery__WithClause PgQuery__WithClause;
typedef struct PgQuery__InferClause PgQuery__InferClause;
typedef struct PgQuery__OnConflictClause PgQuery__OnConflictClause;
typedef struct PgQuery__CTESearchClause PgQuery__CTESearchClause;
typedef struct PgQuery__CTECycleClause PgQuery__CTECycleClause;
typedef struct PgQuery__CommonTableExpr PgQuery__CommonTableExpr;
typedef struct PgQuery__MergeWhenClause PgQuery__MergeWhenClause;
typedef struct PgQuery__RoleSpec PgQuery__RoleSpec;
typedef struct PgQuery__TriggerTransition PgQuery__TriggerTransition;
typedef struct PgQuery__PartitionElem PgQuery__PartitionElem;
typedef struct PgQuery__PartitionSpec PgQuery__PartitionSpec;
typedef struct PgQuery__PartitionBoundSpec PgQuery__PartitionBoundSpec;
typedef struct PgQuery__PartitionRangeDatum PgQuery__PartitionRangeDatum;
typedef struct PgQuery__PartitionCmd PgQuery__PartitionCmd;
typedef struct PgQuery__VacuumRelation PgQuery__VacuumRelation;
typedef struct PgQuery__PublicationObjSpec PgQuery__PublicationObjSpec;
typedef struct PgQuery__PublicationTable PgQuery__PublicationTable;
typedef struct PgQuery__InlineCodeBlock PgQuery__InlineCodeBlock;
typedef struct PgQuery__CallContext PgQuery__CallContext;
typedef struct PgQuery__ScanToken PgQuery__ScanToken;


/* --- enums --- */

typedef enum _PgQuery__OverridingKind {
  PG_QUERY__OVERRIDING_KIND__OVERRIDING_KIND_UNDEFINED = 0,
  PG_QUERY__OVERRIDING_KIND__OVERRIDING_NOT_SET = 1,
  PG_QUERY__OVERRIDING_KIND__OVERRIDING_USER_VALUE = 2,
  PG_QUERY__OVERRIDING_KIND__OVERRIDING_SYSTEM_VALUE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__OVERRIDING_KIND)
} PgQuery__OverridingKind;
typedef enum _PgQuery__QuerySource {
  PG_QUERY__QUERY_SOURCE__QUERY_SOURCE_UNDEFINED = 0,
  PG_QUERY__QUERY_SOURCE__QSRC_ORIGINAL = 1,
  PG_QUERY__QUERY_SOURCE__QSRC_PARSER = 2,
  PG_QUERY__QUERY_SOURCE__QSRC_INSTEAD_RULE = 3,
  PG_QUERY__QUERY_SOURCE__QSRC_QUAL_INSTEAD_RULE = 4,
  PG_QUERY__QUERY_SOURCE__QSRC_NON_INSTEAD_RULE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__QUERY_SOURCE)
} PgQuery__QuerySource;
typedef enum _PgQuery__SortByDir {
  PG_QUERY__SORT_BY_DIR__SORT_BY_DIR_UNDEFINED = 0,
  PG_QUERY__SORT_BY_DIR__SORTBY_DEFAULT = 1,
  PG_QUERY__SORT_BY_DIR__SORTBY_ASC = 2,
  PG_QUERY__SORT_BY_DIR__SORTBY_DESC = 3,
  PG_QUERY__SORT_BY_DIR__SORTBY_USING = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__SORT_BY_DIR)
} PgQuery__SortByDir;
typedef enum _PgQuery__SortByNulls {
  PG_QUERY__SORT_BY_NULLS__SORT_BY_NULLS_UNDEFINED = 0,
  PG_QUERY__SORT_BY_NULLS__SORTBY_NULLS_DEFAULT = 1,
  PG_QUERY__SORT_BY_NULLS__SORTBY_NULLS_FIRST = 2,
  PG_QUERY__SORT_BY_NULLS__SORTBY_NULLS_LAST = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__SORT_BY_NULLS)
} PgQuery__SortByNulls;
typedef enum _PgQuery__SetQuantifier {
  PG_QUERY__SET_QUANTIFIER__SET_QUANTIFIER_UNDEFINED = 0,
  PG_QUERY__SET_QUANTIFIER__SET_QUANTIFIER_DEFAULT = 1,
  PG_QUERY__SET_QUANTIFIER__SET_QUANTIFIER_ALL = 2,
  PG_QUERY__SET_QUANTIFIER__SET_QUANTIFIER_DISTINCT = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__SET_QUANTIFIER)
} PgQuery__SetQuantifier;
typedef enum _PgQuery__AExprKind {
  PG_QUERY__A__EXPR__KIND__A_EXPR_KIND_UNDEFINED = 0,
  PG_QUERY__A__EXPR__KIND__AEXPR_OP = 1,
  PG_QUERY__A__EXPR__KIND__AEXPR_OP_ANY = 2,
  PG_QUERY__A__EXPR__KIND__AEXPR_OP_ALL = 3,
  PG_QUERY__A__EXPR__KIND__AEXPR_DISTINCT = 4,
  PG_QUERY__A__EXPR__KIND__AEXPR_NOT_DISTINCT = 5,
  PG_QUERY__A__EXPR__KIND__AEXPR_NULLIF = 6,
  PG_QUERY__A__EXPR__KIND__AEXPR_IN = 7,
  PG_QUERY__A__EXPR__KIND__AEXPR_LIKE = 8,
  PG_QUERY__A__EXPR__KIND__AEXPR_ILIKE = 9,
  PG_QUERY__A__EXPR__KIND__AEXPR_SIMILAR = 10,
  PG_QUERY__A__EXPR__KIND__AEXPR_BETWEEN = 11,
  PG_QUERY__A__EXPR__KIND__AEXPR_NOT_BETWEEN = 12,
  PG_QUERY__A__EXPR__KIND__AEXPR_BETWEEN_SYM = 13,
  PG_QUERY__A__EXPR__KIND__AEXPR_NOT_BETWEEN_SYM = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__A__EXPR__KIND)
} PgQuery__AExprKind;
typedef enum _PgQuery__RoleSpecType {
  PG_QUERY__ROLE_SPEC_TYPE__ROLE_SPEC_TYPE_UNDEFINED = 0,
  PG_QUERY__ROLE_SPEC_TYPE__ROLESPEC_CSTRING = 1,
  PG_QUERY__ROLE_SPEC_TYPE__ROLESPEC_CURRENT_ROLE = 2,
  PG_QUERY__ROLE_SPEC_TYPE__ROLESPEC_CURRENT_USER = 3,
  PG_QUERY__ROLE_SPEC_TYPE__ROLESPEC_SESSION_USER = 4,
  PG_QUERY__ROLE_SPEC_TYPE__ROLESPEC_PUBLIC = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__ROLE_SPEC_TYPE)
} PgQuery__RoleSpecType;
typedef enum _PgQuery__TableLikeOption {
  PG_QUERY__TABLE_LIKE_OPTION__TABLE_LIKE_OPTION_UNDEFINED = 0,
  PG_QUERY__TABLE_LIKE_OPTION__CREATE_TABLE_LIKE_COMMENTS = 1,
  PG_QUERY__TABLE_LIKE_OPTION__CREATE_TABLE_LIKE_COMPRESSION = 2,
  PG_QUERY__TABLE_LIKE_OPTION__CREATE_TABLE_LIKE_CONSTRAINTS = 3,
  PG_QUERY__TABLE_LIKE_OPTION__CREATE_TABLE_LIKE_DEFAULTS = 4,
  PG_QUERY__TABLE_LIKE_OPTION__CREATE_TABLE_LIKE_GENERATED = 5,
  PG_QUERY__TABLE_LIKE_OPTION__CREATE_TABLE_LIKE_IDENTITY = 6,
  PG_QUERY__TABLE_LIKE_OPTION__CREATE_TABLE_LIKE_INDEXES = 7,
  PG_QUERY__TABLE_LIKE_OPTION__CREATE_TABLE_LIKE_STATISTICS = 8,
  PG_QUERY__TABLE_LIKE_OPTION__CREATE_TABLE_LIKE_STORAGE = 9,
  PG_QUERY__TABLE_LIKE_OPTION__CREATE_TABLE_LIKE_ALL = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__TABLE_LIKE_OPTION)
} PgQuery__TableLikeOption;
typedef enum _PgQuery__DefElemAction {
  PG_QUERY__DEF_ELEM_ACTION__DEF_ELEM_ACTION_UNDEFINED = 0,
  PG_QUERY__DEF_ELEM_ACTION__DEFELEM_UNSPEC = 1,
  PG_QUERY__DEF_ELEM_ACTION__DEFELEM_SET = 2,
  PG_QUERY__DEF_ELEM_ACTION__DEFELEM_ADD = 3,
  PG_QUERY__DEF_ELEM_ACTION__DEFELEM_DROP = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__DEF_ELEM_ACTION)
} PgQuery__DefElemAction;
typedef enum _PgQuery__PartitionRangeDatumKind {
  PG_QUERY__PARTITION_RANGE_DATUM_KIND__PARTITION_RANGE_DATUM_KIND_UNDEFINED = 0,
  PG_QUERY__PARTITION_RANGE_DATUM_KIND__PARTITION_RANGE_DATUM_MINVALUE = 1,
  PG_QUERY__PARTITION_RANGE_DATUM_KIND__PARTITION_RANGE_DATUM_VALUE = 2,
  PG_QUERY__PARTITION_RANGE_DATUM_KIND__PARTITION_RANGE_DATUM_MAXVALUE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__PARTITION_RANGE_DATUM_KIND)
} PgQuery__PartitionRangeDatumKind;
typedef enum _PgQuery__RTEKind {
  PG_QUERY__RTEKIND__RTEKIND_UNDEFINED = 0,
  PG_QUERY__RTEKIND__RTE_RELATION = 1,
  PG_QUERY__RTEKIND__RTE_SUBQUERY = 2,
  PG_QUERY__RTEKIND__RTE_JOIN = 3,
  PG_QUERY__RTEKIND__RTE_FUNCTION = 4,
  PG_QUERY__RTEKIND__RTE_TABLEFUNC = 5,
  PG_QUERY__RTEKIND__RTE_VALUES = 6,
  PG_QUERY__RTEKIND__RTE_CTE = 7,
  PG_QUERY__RTEKIND__RTE_NAMEDTUPLESTORE = 8,
  PG_QUERY__RTEKIND__RTE_RESULT = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__RTEKIND)
} PgQuery__RTEKind;
typedef enum _PgQuery__WCOKind {
  PG_QUERY__WCOKIND__WCOKIND_UNDEFINED = 0,
  PG_QUERY__WCOKIND__WCO_VIEW_CHECK = 1,
  PG_QUERY__WCOKIND__WCO_RLS_INSERT_CHECK = 2,
  PG_QUERY__WCOKIND__WCO_RLS_UPDATE_CHECK = 3,
  PG_QUERY__WCOKIND__WCO_RLS_CONFLICT_CHECK = 4,
  PG_QUERY__WCOKIND__WCO_RLS_MERGE_UPDATE_CHECK = 5,
  PG_QUERY__WCOKIND__WCO_RLS_MERGE_DELETE_CHECK = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__WCOKIND)
} PgQuery__WCOKind;
typedef enum _PgQuery__GroupingSetKind {
  PG_QUERY__GROUPING_SET_KIND__GROUPING_SET_KIND_UNDEFINED = 0,
  PG_QUERY__GROUPING_SET_KIND__GROUPING_SET_EMPTY = 1,
  PG_QUERY__GROUPING_SET_KIND__GROUPING_SET_SIMPLE = 2,
  PG_QUERY__GROUPING_SET_KIND__GROUPING_SET_ROLLUP = 3,
  PG_QUERY__GROUPING_SET_KIND__GROUPING_SET_CUBE = 4,
  PG_QUERY__GROUPING_SET_KIND__GROUPING_SET_SETS = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__GROUPING_SET_KIND)
} PgQuery__GroupingSetKind;
typedef enum _PgQuery__CTEMaterialize {
  PG_QUERY__CTEMATERIALIZE__CTEMATERIALIZE_UNDEFINED = 0,
  PG_QUERY__CTEMATERIALIZE__CTEMaterializeDefault = 1,
  PG_QUERY__CTEMATERIALIZE__CTEMaterializeAlways = 2,
  PG_QUERY__CTEMATERIALIZE__CTEMaterializeNever = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__CTEMATERIALIZE)
} PgQuery__CTEMaterialize;
typedef enum _PgQuery__SetOperation {
  PG_QUERY__SET_OPERATION__SET_OPERATION_UNDEFINED = 0,
  PG_QUERY__SET_OPERATION__SETOP_NONE = 1,
  PG_QUERY__SET_OPERATION__SETOP_UNION = 2,
  PG_QUERY__SET_OPERATION__SETOP_INTERSECT = 3,
  PG_QUERY__SET_OPERATION__SETOP_EXCEPT = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__SET_OPERATION)
} PgQuery__SetOperation;
typedef enum _PgQuery__ObjectType {
  PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED = 0,
  PG_QUERY__OBJECT_TYPE__OBJECT_ACCESS_METHOD = 1,
  PG_QUERY__OBJECT_TYPE__OBJECT_AGGREGATE = 2,
  PG_QUERY__OBJECT_TYPE__OBJECT_AMOP = 3,
  PG_QUERY__OBJECT_TYPE__OBJECT_AMPROC = 4,
  PG_QUERY__OBJECT_TYPE__OBJECT_ATTRIBUTE = 5,
  PG_QUERY__OBJECT_TYPE__OBJECT_CAST = 6,
  PG_QUERY__OBJECT_TYPE__OBJECT_COLUMN = 7,
  PG_QUERY__OBJECT_TYPE__OBJECT_COLLATION = 8,
  PG_QUERY__OBJECT_TYPE__OBJECT_CONVERSION = 9,
  PG_QUERY__OBJECT_TYPE__OBJECT_DATABASE = 10,
  PG_QUERY__OBJECT_TYPE__OBJECT_DEFAULT = 11,
  PG_QUERY__OBJECT_TYPE__OBJECT_DEFACL = 12,
  PG_QUERY__OBJECT_TYPE__OBJECT_DOMAIN = 13,
  PG_QUERY__OBJECT_TYPE__OBJECT_DOMCONSTRAINT = 14,
  PG_QUERY__OBJECT_TYPE__OBJECT_EVENT_TRIGGER = 15,
  PG_QUERY__OBJECT_TYPE__OBJECT_EXTENSION = 16,
  PG_QUERY__OBJECT_TYPE__OBJECT_FDW = 17,
  PG_QUERY__OBJECT_TYPE__OBJECT_FOREIGN_SERVER = 18,
  PG_QUERY__OBJECT_TYPE__OBJECT_FOREIGN_TABLE = 19,
  PG_QUERY__OBJECT_TYPE__OBJECT_FUNCTION = 20,
  PG_QUERY__OBJECT_TYPE__OBJECT_INDEX = 21,
  PG_QUERY__OBJECT_TYPE__OBJECT_LANGUAGE = 22,
  PG_QUERY__OBJECT_TYPE__OBJECT_LARGEOBJECT = 23,
  PG_QUERY__OBJECT_TYPE__OBJECT_MATVIEW = 24,
  PG_QUERY__OBJECT_TYPE__OBJECT_OPCLASS = 25,
  PG_QUERY__OBJECT_TYPE__OBJECT_OPERATOR = 26,
  PG_QUERY__OBJECT_TYPE__OBJECT_OPFAMILY = 27,
  PG_QUERY__OBJECT_TYPE__OBJECT_PARAMETER_ACL = 28,
  PG_QUERY__OBJECT_TYPE__OBJECT_POLICY = 29,
  PG_QUERY__OBJECT_TYPE__OBJECT_PROCEDURE = 30,
  PG_QUERY__OBJECT_TYPE__OBJECT_PUBLICATION = 31,
  PG_QUERY__OBJECT_TYPE__OBJECT_PUBLICATION_NAMESPACE = 32,
  PG_QUERY__OBJECT_TYPE__OBJECT_PUBLICATION_REL = 33,
  PG_QUERY__OBJECT_TYPE__OBJECT_ROLE = 34,
  PG_QUERY__OBJECT_TYPE__OBJECT_ROUTINE = 35,
  PG_QUERY__OBJECT_TYPE__OBJECT_RULE = 36,
  PG_QUERY__OBJECT_TYPE__OBJECT_SCHEMA = 37,
  PG_QUERY__OBJECT_TYPE__OBJECT_SEQUENCE = 38,
  PG_QUERY__OBJECT_TYPE__OBJECT_SUBSCRIPTION = 39,
  PG_QUERY__OBJECT_TYPE__OBJECT_STATISTIC_EXT = 40,
  PG_QUERY__OBJECT_TYPE__OBJECT_TABCONSTRAINT = 41,
  PG_QUERY__OBJECT_TYPE__OBJECT_TABLE = 42,
  PG_QUERY__OBJECT_TYPE__OBJECT_TABLESPACE = 43,
  PG_QUERY__OBJECT_TYPE__OBJECT_TRANSFORM = 44,
  PG_QUERY__OBJECT_TYPE__OBJECT_TRIGGER = 45,
  PG_QUERY__OBJECT_TYPE__OBJECT_TSCONFIGURATION = 46,
  PG_QUERY__OBJECT_TYPE__OBJECT_TSDICTIONARY = 47,
  PG_QUERY__OBJECT_TYPE__OBJECT_TSPARSER = 48,
  PG_QUERY__OBJECT_TYPE__OBJECT_TSTEMPLATE = 49,
  PG_QUERY__OBJECT_TYPE__OBJECT_TYPE = 50,
  PG_QUERY__OBJECT_TYPE__OBJECT_USER_MAPPING = 51,
  PG_QUERY__OBJECT_TYPE__OBJECT_VIEW = 52
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__OBJECT_TYPE)
} PgQuery__ObjectType;
typedef enum _PgQuery__DropBehavior {
  PG_QUERY__DROP_BEHAVIOR__DROP_BEHAVIOR_UNDEFINED = 0,
  PG_QUERY__DROP_BEHAVIOR__DROP_RESTRICT = 1,
  PG_QUERY__DROP_BEHAVIOR__DROP_CASCADE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__DROP_BEHAVIOR)
} PgQuery__DropBehavior;
typedef enum _PgQuery__AlterTableType {
  PG_QUERY__ALTER_TABLE_TYPE__ALTER_TABLE_TYPE_UNDEFINED = 0,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AddColumn = 1,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AddColumnRecurse = 2,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AddColumnToView = 3,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ColumnDefault = 4,
  PG_QUERY__ALTER_TABLE_TYPE__AT_CookedColumnDefault = 5,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DropNotNull = 6,
  PG_QUERY__ALTER_TABLE_TYPE__AT_SetNotNull = 7,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DropExpression = 8,
  PG_QUERY__ALTER_TABLE_TYPE__AT_CheckNotNull = 9,
  PG_QUERY__ALTER_TABLE_TYPE__AT_SetStatistics = 10,
  PG_QUERY__ALTER_TABLE_TYPE__AT_SetOptions = 11,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ResetOptions = 12,
  PG_QUERY__ALTER_TABLE_TYPE__AT_SetStorage = 13,
  PG_QUERY__ALTER_TABLE_TYPE__AT_SetCompression = 14,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DropColumn = 15,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DropColumnRecurse = 16,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AddIndex = 17,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ReAddIndex = 18,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AddConstraint = 19,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AddConstraintRecurse = 20,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ReAddConstraint = 21,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ReAddDomainConstraint = 22,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AlterConstraint = 23,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ValidateConstraint = 24,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ValidateConstraintRecurse = 25,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AddIndexConstraint = 26,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DropConstraint = 27,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DropConstraintRecurse = 28,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ReAddComment = 29,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AlterColumnType = 30,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AlterColumnGenericOptions = 31,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ChangeOwner = 32,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ClusterOn = 33,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DropCluster = 34,
  PG_QUERY__ALTER_TABLE_TYPE__AT_SetLogged = 35,
  PG_QUERY__ALTER_TABLE_TYPE__AT_SetUnLogged = 36,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DropOids = 37,
  PG_QUERY__ALTER_TABLE_TYPE__AT_SetAccessMethod = 38,
  PG_QUERY__ALTER_TABLE_TYPE__AT_SetTableSpace = 39,
  PG_QUERY__ALTER_TABLE_TYPE__AT_SetRelOptions = 40,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ResetRelOptions = 41,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ReplaceRelOptions = 42,
  PG_QUERY__ALTER_TABLE_TYPE__AT_EnableTrig = 43,
  PG_QUERY__ALTER_TABLE_TYPE__AT_EnableAlwaysTrig = 44,
  PG_QUERY__ALTER_TABLE_TYPE__AT_EnableReplicaTrig = 45,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DisableTrig = 46,
  PG_QUERY__ALTER_TABLE_TYPE__AT_EnableTrigAll = 47,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DisableTrigAll = 48,
  PG_QUERY__ALTER_TABLE_TYPE__AT_EnableTrigUser = 49,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DisableTrigUser = 50,
  PG_QUERY__ALTER_TABLE_TYPE__AT_EnableRule = 51,
  PG_QUERY__ALTER_TABLE_TYPE__AT_EnableAlwaysRule = 52,
  PG_QUERY__ALTER_TABLE_TYPE__AT_EnableReplicaRule = 53,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DisableRule = 54,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AddInherit = 55,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DropInherit = 56,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AddOf = 57,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DropOf = 58,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ReplicaIdentity = 59,
  PG_QUERY__ALTER_TABLE_TYPE__AT_EnableRowSecurity = 60,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DisableRowSecurity = 61,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ForceRowSecurity = 62,
  PG_QUERY__ALTER_TABLE_TYPE__AT_NoForceRowSecurity = 63,
  PG_QUERY__ALTER_TABLE_TYPE__AT_GenericOptions = 64,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AttachPartition = 65,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DetachPartition = 66,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DetachPartitionFinalize = 67,
  PG_QUERY__ALTER_TABLE_TYPE__AT_AddIdentity = 68,
  PG_QUERY__ALTER_TABLE_TYPE__AT_SetIdentity = 69,
  PG_QUERY__ALTER_TABLE_TYPE__AT_DropIdentity = 70,
  PG_QUERY__ALTER_TABLE_TYPE__AT_ReAddStatistics = 71
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__ALTER_TABLE_TYPE)
} PgQuery__AlterTableType;
typedef enum _PgQuery__GrantTargetType {
  PG_QUERY__GRANT_TARGET_TYPE__GRANT_TARGET_TYPE_UNDEFINED = 0,
  PG_QUERY__GRANT_TARGET_TYPE__ACL_TARGET_OBJECT = 1,
  PG_QUERY__GRANT_TARGET_TYPE__ACL_TARGET_ALL_IN_SCHEMA = 2,
  PG_QUERY__GRANT_TARGET_TYPE__ACL_TARGET_DEFAULTS = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__GRANT_TARGET_TYPE)
} PgQuery__GrantTargetType;
typedef enum _PgQuery__VariableSetKind {
  PG_QUERY__VARIABLE_SET_KIND__VARIABLE_SET_KIND_UNDEFINED = 0,
  PG_QUERY__VARIABLE_SET_KIND__VAR_SET_VALUE = 1,
  PG_QUERY__VARIABLE_SET_KIND__VAR_SET_DEFAULT = 2,
  PG_QUERY__VARIABLE_SET_KIND__VAR_SET_CURRENT = 3,
  PG_QUERY__VARIABLE_SET_KIND__VAR_SET_MULTI = 4,
  PG_QUERY__VARIABLE_SET_KIND__VAR_RESET = 5,
  PG_QUERY__VARIABLE_SET_KIND__VAR_RESET_ALL = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__VARIABLE_SET_KIND)
} PgQuery__VariableSetKind;
typedef enum _PgQuery__ConstrType {
  PG_QUERY__CONSTR_TYPE__CONSTR_TYPE_UNDEFINED = 0,
  PG_QUERY__CONSTR_TYPE__CONSTR_NULL = 1,
  PG_QUERY__CONSTR_TYPE__CONSTR_NOTNULL = 2,
  PG_QUERY__CONSTR_TYPE__CONSTR_DEFAULT = 3,
  PG_QUERY__CONSTR_TYPE__CONSTR_IDENTITY = 4,
  PG_QUERY__CONSTR_TYPE__CONSTR_GENERATED = 5,
  PG_QUERY__CONSTR_TYPE__CONSTR_CHECK = 6,
  PG_QUERY__CONSTR_TYPE__CONSTR_PRIMARY = 7,
  PG_QUERY__CONSTR_TYPE__CONSTR_UNIQUE = 8,
  PG_QUERY__CONSTR_TYPE__CONSTR_EXCLUSION = 9,
  PG_QUERY__CONSTR_TYPE__CONSTR_FOREIGN = 10,
  PG_QUERY__CONSTR_TYPE__CONSTR_ATTR_DEFERRABLE = 11,
  PG_QUERY__CONSTR_TYPE__CONSTR_ATTR_NOT_DEFERRABLE = 12,
  PG_QUERY__CONSTR_TYPE__CONSTR_ATTR_DEFERRED = 13,
  PG_QUERY__CONSTR_TYPE__CONSTR_ATTR_IMMEDIATE = 14
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__CONSTR_TYPE)
} PgQuery__ConstrType;
typedef enum _PgQuery__ImportForeignSchemaType {
  PG_QUERY__IMPORT_FOREIGN_SCHEMA_TYPE__IMPORT_FOREIGN_SCHEMA_TYPE_UNDEFINED = 0,
  PG_QUERY__IMPORT_FOREIGN_SCHEMA_TYPE__FDW_IMPORT_SCHEMA_ALL = 1,
  PG_QUERY__IMPORT_FOREIGN_SCHEMA_TYPE__FDW_IMPORT_SCHEMA_LIMIT_TO = 2,
  PG_QUERY__IMPORT_FOREIGN_SCHEMA_TYPE__FDW_IMPORT_SCHEMA_EXCEPT = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__IMPORT_FOREIGN_SCHEMA_TYPE)
} PgQuery__ImportForeignSchemaType;
typedef enum _PgQuery__RoleStmtType {
  PG_QUERY__ROLE_STMT_TYPE__ROLE_STMT_TYPE_UNDEFINED = 0,
  PG_QUERY__ROLE_STMT_TYPE__ROLESTMT_ROLE = 1,
  PG_QUERY__ROLE_STMT_TYPE__ROLESTMT_USER = 2,
  PG_QUERY__ROLE_STMT_TYPE__ROLESTMT_GROUP = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__ROLE_STMT_TYPE)
} PgQuery__RoleStmtType;
typedef enum _PgQuery__FetchDirection {
  PG_QUERY__FETCH_DIRECTION__FETCH_DIRECTION_UNDEFINED = 0,
  PG_QUERY__FETCH_DIRECTION__FETCH_FORWARD = 1,
  PG_QUERY__FETCH_DIRECTION__FETCH_BACKWARD = 2,
  PG_QUERY__FETCH_DIRECTION__FETCH_ABSOLUTE = 3,
  PG_QUERY__FETCH_DIRECTION__FETCH_RELATIVE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__FETCH_DIRECTION)
} PgQuery__FetchDirection;
typedef enum _PgQuery__FunctionParameterMode {
  PG_QUERY__FUNCTION_PARAMETER_MODE__FUNCTION_PARAMETER_MODE_UNDEFINED = 0,
  PG_QUERY__FUNCTION_PARAMETER_MODE__FUNC_PARAM_IN = 1,
  PG_QUERY__FUNCTION_PARAMETER_MODE__FUNC_PARAM_OUT = 2,
  PG_QUERY__FUNCTION_PARAMETER_MODE__FUNC_PARAM_INOUT = 3,
  PG_QUERY__FUNCTION_PARAMETER_MODE__FUNC_PARAM_VARIADIC = 4,
  PG_QUERY__FUNCTION_PARAMETER_MODE__FUNC_PARAM_TABLE = 5,
  PG_QUERY__FUNCTION_PARAMETER_MODE__FUNC_PARAM_DEFAULT = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__FUNCTION_PARAMETER_MODE)
} PgQuery__FunctionParameterMode;
typedef enum _PgQuery__TransactionStmtKind {
  PG_QUERY__TRANSACTION_STMT_KIND__TRANSACTION_STMT_KIND_UNDEFINED = 0,
  PG_QUERY__TRANSACTION_STMT_KIND__TRANS_STMT_BEGIN = 1,
  PG_QUERY__TRANSACTION_STMT_KIND__TRANS_STMT_START = 2,
  PG_QUERY__TRANSACTION_STMT_KIND__TRANS_STMT_COMMIT = 3,
  PG_QUERY__TRANSACTION_STMT_KIND__TRANS_STMT_ROLLBACK = 4,
  PG_QUERY__TRANSACTION_STMT_KIND__TRANS_STMT_SAVEPOINT = 5,
  PG_QUERY__TRANSACTION_STMT_KIND__TRANS_STMT_RELEASE = 6,
  PG_QUERY__TRANSACTION_STMT_KIND__TRANS_STMT_ROLLBACK_TO = 7,
  PG_QUERY__TRANSACTION_STMT_KIND__TRANS_STMT_PREPARE = 8,
  PG_QUERY__TRANSACTION_STMT_KIND__TRANS_STMT_COMMIT_PREPARED = 9,
  PG_QUERY__TRANSACTION_STMT_KIND__TRANS_STMT_ROLLBACK_PREPARED = 10
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__TRANSACTION_STMT_KIND)
} PgQuery__TransactionStmtKind;
typedef enum _PgQuery__ViewCheckOption {
  PG_QUERY__VIEW_CHECK_OPTION__VIEW_CHECK_OPTION_UNDEFINED = 0,
  PG_QUERY__VIEW_CHECK_OPTION__NO_CHECK_OPTION = 1,
  PG_QUERY__VIEW_CHECK_OPTION__LOCAL_CHECK_OPTION = 2,
  PG_QUERY__VIEW_CHECK_OPTION__CASCADED_CHECK_OPTION = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__VIEW_CHECK_OPTION)
} PgQuery__ViewCheckOption;
typedef enum _PgQuery__DiscardMode {
  PG_QUERY__DISCARD_MODE__DISCARD_MODE_UNDEFINED = 0,
  PG_QUERY__DISCARD_MODE__DISCARD_ALL = 1,
  PG_QUERY__DISCARD_MODE__DISCARD_PLANS = 2,
  PG_QUERY__DISCARD_MODE__DISCARD_SEQUENCES = 3,
  PG_QUERY__DISCARD_MODE__DISCARD_TEMP = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__DISCARD_MODE)
} PgQuery__DiscardMode;
typedef enum _PgQuery__ReindexObjectType {
  PG_QUERY__REINDEX_OBJECT_TYPE__REINDEX_OBJECT_TYPE_UNDEFINED = 0,
  PG_QUERY__REINDEX_OBJECT_TYPE__REINDEX_OBJECT_INDEX = 1,
  PG_QUERY__REINDEX_OBJECT_TYPE__REINDEX_OBJECT_TABLE = 2,
  PG_QUERY__REINDEX_OBJECT_TYPE__REINDEX_OBJECT_SCHEMA = 3,
  PG_QUERY__REINDEX_OBJECT_TYPE__REINDEX_OBJECT_SYSTEM = 4,
  PG_QUERY__REINDEX_OBJECT_TYPE__REINDEX_OBJECT_DATABASE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__REINDEX_OBJECT_TYPE)
} PgQuery__ReindexObjectType;
typedef enum _PgQuery__AlterTSConfigType {
  PG_QUERY__ALTER_TSCONFIG_TYPE__ALTER_TSCONFIG_TYPE_UNDEFINED = 0,
  PG_QUERY__ALTER_TSCONFIG_TYPE__ALTER_TSCONFIG_ADD_MAPPING = 1,
  PG_QUERY__ALTER_TSCONFIG_TYPE__ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN = 2,
  PG_QUERY__ALTER_TSCONFIG_TYPE__ALTER_TSCONFIG_REPLACE_DICT = 3,
  PG_QUERY__ALTER_TSCONFIG_TYPE__ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN = 4,
  PG_QUERY__ALTER_TSCONFIG_TYPE__ALTER_TSCONFIG_DROP_MAPPING = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__ALTER_TSCONFIG_TYPE)
} PgQuery__AlterTSConfigType;
typedef enum _PgQuery__PublicationObjSpecType {
  PG_QUERY__PUBLICATION_OBJ_SPEC_TYPE__PUBLICATION_OBJ_SPEC_TYPE_UNDEFINED = 0,
  PG_QUERY__PUBLICATION_OBJ_SPEC_TYPE__PUBLICATIONOBJ_TABLE = 1,
  PG_QUERY__PUBLICATION_OBJ_SPEC_TYPE__PUBLICATIONOBJ_TABLES_IN_SCHEMA = 2,
  PG_QUERY__PUBLICATION_OBJ_SPEC_TYPE__PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA = 3,
  PG_QUERY__PUBLICATION_OBJ_SPEC_TYPE__PUBLICATIONOBJ_CONTINUATION = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__PUBLICATION_OBJ_SPEC_TYPE)
} PgQuery__PublicationObjSpecType;
typedef enum _PgQuery__AlterPublicationAction {
  PG_QUERY__ALTER_PUBLICATION_ACTION__ALTER_PUBLICATION_ACTION_UNDEFINED = 0,
  PG_QUERY__ALTER_PUBLICATION_ACTION__AP_AddObjects = 1,
  PG_QUERY__ALTER_PUBLICATION_ACTION__AP_DropObjects = 2,
  PG_QUERY__ALTER_PUBLICATION_ACTION__AP_SetObjects = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__ALTER_PUBLICATION_ACTION)
} PgQuery__AlterPublicationAction;
typedef enum _PgQuery__AlterSubscriptionType {
  PG_QUERY__ALTER_SUBSCRIPTION_TYPE__ALTER_SUBSCRIPTION_TYPE_UNDEFINED = 0,
  PG_QUERY__ALTER_SUBSCRIPTION_TYPE__ALTER_SUBSCRIPTION_OPTIONS = 1,
  PG_QUERY__ALTER_SUBSCRIPTION_TYPE__ALTER_SUBSCRIPTION_CONNECTION = 2,
  PG_QUERY__ALTER_SUBSCRIPTION_TYPE__ALTER_SUBSCRIPTION_SET_PUBLICATION = 3,
  PG_QUERY__ALTER_SUBSCRIPTION_TYPE__ALTER_SUBSCRIPTION_ADD_PUBLICATION = 4,
  PG_QUERY__ALTER_SUBSCRIPTION_TYPE__ALTER_SUBSCRIPTION_DROP_PUBLICATION = 5,
  PG_QUERY__ALTER_SUBSCRIPTION_TYPE__ALTER_SUBSCRIPTION_REFRESH = 6,
  PG_QUERY__ALTER_SUBSCRIPTION_TYPE__ALTER_SUBSCRIPTION_ENABLED = 7,
  PG_QUERY__ALTER_SUBSCRIPTION_TYPE__ALTER_SUBSCRIPTION_SKIP = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__ALTER_SUBSCRIPTION_TYPE)
} PgQuery__AlterSubscriptionType;
typedef enum _PgQuery__OnCommitAction {
  PG_QUERY__ON_COMMIT_ACTION__ON_COMMIT_ACTION_UNDEFINED = 0,
  PG_QUERY__ON_COMMIT_ACTION__ONCOMMIT_NOOP = 1,
  PG_QUERY__ON_COMMIT_ACTION__ONCOMMIT_PRESERVE_ROWS = 2,
  PG_QUERY__ON_COMMIT_ACTION__ONCOMMIT_DELETE_ROWS = 3,
  PG_QUERY__ON_COMMIT_ACTION__ONCOMMIT_DROP = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__ON_COMMIT_ACTION)
} PgQuery__OnCommitAction;
typedef enum _PgQuery__ParamKind {
  PG_QUERY__PARAM_KIND__PARAM_KIND_UNDEFINED = 0,
  PG_QUERY__PARAM_KIND__PARAM_EXTERN = 1,
  PG_QUERY__PARAM_KIND__PARAM_EXEC = 2,
  PG_QUERY__PARAM_KIND__PARAM_SUBLINK = 3,
  PG_QUERY__PARAM_KIND__PARAM_MULTIEXPR = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__PARAM_KIND)
} PgQuery__ParamKind;
typedef enum _PgQuery__CoercionContext {
  PG_QUERY__COERCION_CONTEXT__COERCION_CONTEXT_UNDEFINED = 0,
  PG_QUERY__COERCION_CONTEXT__COERCION_IMPLICIT = 1,
  PG_QUERY__COERCION_CONTEXT__COERCION_ASSIGNMENT = 2,
  PG_QUERY__COERCION_CONTEXT__COERCION_PLPGSQL = 3,
  PG_QUERY__COERCION_CONTEXT__COERCION_EXPLICIT = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__COERCION_CONTEXT)
} PgQuery__CoercionContext;
typedef enum _PgQuery__CoercionForm {
  PG_QUERY__COERCION_FORM__COERCION_FORM_UNDEFINED = 0,
  PG_QUERY__COERCION_FORM__COERCE_EXPLICIT_CALL = 1,
  PG_QUERY__COERCION_FORM__COERCE_EXPLICIT_CAST = 2,
  PG_QUERY__COERCION_FORM__COERCE_IMPLICIT_CAST = 3,
  PG_QUERY__COERCION_FORM__COERCE_SQL_SYNTAX = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__COERCION_FORM)
} PgQuery__CoercionForm;
typedef enum _PgQuery__BoolExprType {
  PG_QUERY__BOOL_EXPR_TYPE__BOOL_EXPR_TYPE_UNDEFINED = 0,
  PG_QUERY__BOOL_EXPR_TYPE__AND_EXPR = 1,
  PG_QUERY__BOOL_EXPR_TYPE__OR_EXPR = 2,
  PG_QUERY__BOOL_EXPR_TYPE__NOT_EXPR = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__BOOL_EXPR_TYPE)
} PgQuery__BoolExprType;
typedef enum _PgQuery__SubLinkType {
  PG_QUERY__SUB_LINK_TYPE__SUB_LINK_TYPE_UNDEFINED = 0,
  PG_QUERY__SUB_LINK_TYPE__EXISTS_SUBLINK = 1,
  PG_QUERY__SUB_LINK_TYPE__ALL_SUBLINK = 2,
  PG_QUERY__SUB_LINK_TYPE__ANY_SUBLINK = 3,
  PG_QUERY__SUB_LINK_TYPE__ROWCOMPARE_SUBLINK = 4,
  PG_QUERY__SUB_LINK_TYPE__EXPR_SUBLINK = 5,
  PG_QUERY__SUB_LINK_TYPE__MULTIEXPR_SUBLINK = 6,
  PG_QUERY__SUB_LINK_TYPE__ARRAY_SUBLINK = 7,
  PG_QUERY__SUB_LINK_TYPE__CTE_SUBLINK = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__SUB_LINK_TYPE)
} PgQuery__SubLinkType;
typedef enum _PgQuery__RowCompareType {
  PG_QUERY__ROW_COMPARE_TYPE__ROW_COMPARE_TYPE_UNDEFINED = 0,
  PG_QUERY__ROW_COMPARE_TYPE__ROWCOMPARE_LT = 1,
  PG_QUERY__ROW_COMPARE_TYPE__ROWCOMPARE_LE = 2,
  PG_QUERY__ROW_COMPARE_TYPE__ROWCOMPARE_EQ = 3,
  PG_QUERY__ROW_COMPARE_TYPE__ROWCOMPARE_GE = 4,
  PG_QUERY__ROW_COMPARE_TYPE__ROWCOMPARE_GT = 5,
  PG_QUERY__ROW_COMPARE_TYPE__ROWCOMPARE_NE = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__ROW_COMPARE_TYPE)
} PgQuery__RowCompareType;
typedef enum _PgQuery__MinMaxOp {
  PG_QUERY__MIN_MAX_OP__MIN_MAX_OP_UNDEFINED = 0,
  PG_QUERY__MIN_MAX_OP__IS_GREATEST = 1,
  PG_QUERY__MIN_MAX_OP__IS_LEAST = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__MIN_MAX_OP)
} PgQuery__MinMaxOp;
typedef enum _PgQuery__SQLValueFunctionOp {
  PG_QUERY__SQLVALUE_FUNCTION_OP__SQLVALUE_FUNCTION_OP_UNDEFINED = 0,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_CURRENT_DATE = 1,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_CURRENT_TIME = 2,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_CURRENT_TIME_N = 3,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_CURRENT_TIMESTAMP = 4,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_CURRENT_TIMESTAMP_N = 5,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_LOCALTIME = 6,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_LOCALTIME_N = 7,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_LOCALTIMESTAMP = 8,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_LOCALTIMESTAMP_N = 9,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_CURRENT_ROLE = 10,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_CURRENT_USER = 11,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_USER = 12,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_SESSION_USER = 13,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_CURRENT_CATALOG = 14,
  PG_QUERY__SQLVALUE_FUNCTION_OP__SVFOP_CURRENT_SCHEMA = 15
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__SQLVALUE_FUNCTION_OP)
} PgQuery__SQLValueFunctionOp;
typedef enum _PgQuery__XmlExprOp {
  PG_QUERY__XML_EXPR_OP__XML_EXPR_OP_UNDEFINED = 0,
  PG_QUERY__XML_EXPR_OP__IS_XMLCONCAT = 1,
  PG_QUERY__XML_EXPR_OP__IS_XMLELEMENT = 2,
  PG_QUERY__XML_EXPR_OP__IS_XMLFOREST = 3,
  PG_QUERY__XML_EXPR_OP__IS_XMLPARSE = 4,
  PG_QUERY__XML_EXPR_OP__IS_XMLPI = 5,
  PG_QUERY__XML_EXPR_OP__IS_XMLROOT = 6,
  PG_QUERY__XML_EXPR_OP__IS_XMLSERIALIZE = 7,
  PG_QUERY__XML_EXPR_OP__IS_DOCUMENT = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__XML_EXPR_OP)
} PgQuery__XmlExprOp;
typedef enum _PgQuery__XmlOptionType {
  PG_QUERY__XML_OPTION_TYPE__XML_OPTION_TYPE_UNDEFINED = 0,
  PG_QUERY__XML_OPTION_TYPE__XMLOPTION_DOCUMENT = 1,
  PG_QUERY__XML_OPTION_TYPE__XMLOPTION_CONTENT = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__XML_OPTION_TYPE)
} PgQuery__XmlOptionType;
typedef enum _PgQuery__NullTestType {
  PG_QUERY__NULL_TEST_TYPE__NULL_TEST_TYPE_UNDEFINED = 0,
  PG_QUERY__NULL_TEST_TYPE__IS_NULL = 1,
  PG_QUERY__NULL_TEST_TYPE__IS_NOT_NULL = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__NULL_TEST_TYPE)
} PgQuery__NullTestType;
typedef enum _PgQuery__BoolTestType {
  PG_QUERY__BOOL_TEST_TYPE__BOOL_TEST_TYPE_UNDEFINED = 0,
  PG_QUERY__BOOL_TEST_TYPE__IS_TRUE = 1,
  PG_QUERY__BOOL_TEST_TYPE__IS_NOT_TRUE = 2,
  PG_QUERY__BOOL_TEST_TYPE__IS_FALSE = 3,
  PG_QUERY__BOOL_TEST_TYPE__IS_NOT_FALSE = 4,
  PG_QUERY__BOOL_TEST_TYPE__IS_UNKNOWN = 5,
  PG_QUERY__BOOL_TEST_TYPE__IS_NOT_UNKNOWN = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__BOOL_TEST_TYPE)
} PgQuery__BoolTestType;
typedef enum _PgQuery__CmdType {
  PG_QUERY__CMD_TYPE__CMD_TYPE_UNDEFINED = 0,
  PG_QUERY__CMD_TYPE__CMD_UNKNOWN = 1,
  PG_QUERY__CMD_TYPE__CMD_SELECT = 2,
  PG_QUERY__CMD_TYPE__CMD_UPDATE = 3,
  PG_QUERY__CMD_TYPE__CMD_INSERT = 4,
  PG_QUERY__CMD_TYPE__CMD_DELETE = 5,
  PG_QUERY__CMD_TYPE__CMD_MERGE = 6,
  PG_QUERY__CMD_TYPE__CMD_UTILITY = 7,
  PG_QUERY__CMD_TYPE__CMD_NOTHING = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__CMD_TYPE)
} PgQuery__CmdType;
typedef enum _PgQuery__JoinType {
  PG_QUERY__JOIN_TYPE__JOIN_TYPE_UNDEFINED = 0,
  PG_QUERY__JOIN_TYPE__JOIN_INNER = 1,
  PG_QUERY__JOIN_TYPE__JOIN_LEFT = 2,
  PG_QUERY__JOIN_TYPE__JOIN_FULL = 3,
  PG_QUERY__JOIN_TYPE__JOIN_RIGHT = 4,
  PG_QUERY__JOIN_TYPE__JOIN_SEMI = 5,
  PG_QUERY__JOIN_TYPE__JOIN_ANTI = 6,
  PG_QUERY__JOIN_TYPE__JOIN_UNIQUE_OUTER = 7,
  PG_QUERY__JOIN_TYPE__JOIN_UNIQUE_INNER = 8
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__JOIN_TYPE)
} PgQuery__JoinType;
typedef enum _PgQuery__AggStrategy {
  PG_QUERY__AGG_STRATEGY__AGG_STRATEGY_UNDEFINED = 0,
  PG_QUERY__AGG_STRATEGY__AGG_PLAIN = 1,
  PG_QUERY__AGG_STRATEGY__AGG_SORTED = 2,
  PG_QUERY__AGG_STRATEGY__AGG_HASHED = 3,
  PG_QUERY__AGG_STRATEGY__AGG_MIXED = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__AGG_STRATEGY)
} PgQuery__AggStrategy;
typedef enum _PgQuery__AggSplit {
  PG_QUERY__AGG_SPLIT__AGG_SPLIT_UNDEFINED = 0,
  PG_QUERY__AGG_SPLIT__AGGSPLIT_SIMPLE = 1,
  PG_QUERY__AGG_SPLIT__AGGSPLIT_INITIAL_SERIAL = 2,
  PG_QUERY__AGG_SPLIT__AGGSPLIT_FINAL_DESERIAL = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__AGG_SPLIT)
} PgQuery__AggSplit;
typedef enum _PgQuery__SetOpCmd {
  PG_QUERY__SET_OP_CMD__SET_OP_CMD_UNDEFINED = 0,
  PG_QUERY__SET_OP_CMD__SETOPCMD_INTERSECT = 1,
  PG_QUERY__SET_OP_CMD__SETOPCMD_INTERSECT_ALL = 2,
  PG_QUERY__SET_OP_CMD__SETOPCMD_EXCEPT = 3,
  PG_QUERY__SET_OP_CMD__SETOPCMD_EXCEPT_ALL = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__SET_OP_CMD)
} PgQuery__SetOpCmd;
typedef enum _PgQuery__SetOpStrategy {
  PG_QUERY__SET_OP_STRATEGY__SET_OP_STRATEGY_UNDEFINED = 0,
  PG_QUERY__SET_OP_STRATEGY__SETOP_SORTED = 1,
  PG_QUERY__SET_OP_STRATEGY__SETOP_HASHED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__SET_OP_STRATEGY)
} PgQuery__SetOpStrategy;
typedef enum _PgQuery__OnConflictAction {
  PG_QUERY__ON_CONFLICT_ACTION__ON_CONFLICT_ACTION_UNDEFINED = 0,
  PG_QUERY__ON_CONFLICT_ACTION__ONCONFLICT_NONE = 1,
  PG_QUERY__ON_CONFLICT_ACTION__ONCONFLICT_NOTHING = 2,
  PG_QUERY__ON_CONFLICT_ACTION__ONCONFLICT_UPDATE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__ON_CONFLICT_ACTION)
} PgQuery__OnConflictAction;
typedef enum _PgQuery__LimitOption {
  PG_QUERY__LIMIT_OPTION__LIMIT_OPTION_UNDEFINED = 0,
  PG_QUERY__LIMIT_OPTION__LIMIT_OPTION_DEFAULT = 1,
  PG_QUERY__LIMIT_OPTION__LIMIT_OPTION_COUNT = 2,
  PG_QUERY__LIMIT_OPTION__LIMIT_OPTION_WITH_TIES = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__LIMIT_OPTION)
} PgQuery__LimitOption;
typedef enum _PgQuery__LockClauseStrength {
  PG_QUERY__LOCK_CLAUSE_STRENGTH__LOCK_CLAUSE_STRENGTH_UNDEFINED = 0,
  PG_QUERY__LOCK_CLAUSE_STRENGTH__LCS_NONE = 1,
  PG_QUERY__LOCK_CLAUSE_STRENGTH__LCS_FORKEYSHARE = 2,
  PG_QUERY__LOCK_CLAUSE_STRENGTH__LCS_FORSHARE = 3,
  PG_QUERY__LOCK_CLAUSE_STRENGTH__LCS_FORNOKEYUPDATE = 4,
  PG_QUERY__LOCK_CLAUSE_STRENGTH__LCS_FORUPDATE = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__LOCK_CLAUSE_STRENGTH)
} PgQuery__LockClauseStrength;
typedef enum _PgQuery__LockWaitPolicy {
  PG_QUERY__LOCK_WAIT_POLICY__LOCK_WAIT_POLICY_UNDEFINED = 0,
  PG_QUERY__LOCK_WAIT_POLICY__LockWaitBlock = 1,
  PG_QUERY__LOCK_WAIT_POLICY__LockWaitSkip = 2,
  PG_QUERY__LOCK_WAIT_POLICY__LockWaitError = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__LOCK_WAIT_POLICY)
} PgQuery__LockWaitPolicy;
typedef enum _PgQuery__LockTupleMode {
  PG_QUERY__LOCK_TUPLE_MODE__LOCK_TUPLE_MODE_UNDEFINED = 0,
  PG_QUERY__LOCK_TUPLE_MODE__LockTupleKeyShare = 1,
  PG_QUERY__LOCK_TUPLE_MODE__LockTupleShare = 2,
  PG_QUERY__LOCK_TUPLE_MODE__LockTupleNoKeyExclusive = 3,
  PG_QUERY__LOCK_TUPLE_MODE__LockTupleExclusive = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__LOCK_TUPLE_MODE)
} PgQuery__LockTupleMode;
typedef enum _PgQuery__KeywordKind {
  PG_QUERY__KEYWORD_KIND__NO_KEYWORD = 0,
  PG_QUERY__KEYWORD_KIND__UNRESERVED_KEYWORD = 1,
  PG_QUERY__KEYWORD_KIND__COL_NAME_KEYWORD = 2,
  PG_QUERY__KEYWORD_KIND__TYPE_FUNC_NAME_KEYWORD = 3,
  PG_QUERY__KEYWORD_KIND__RESERVED_KEYWORD = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__KEYWORD_KIND)
} PgQuery__KeywordKind;
typedef enum _PgQuery__Token {
  PG_QUERY__TOKEN__NUL = 0,
  /*
   * Single-character tokens that are returned 1:1 (identical with "self" list in scan.l)
   * Either supporting syntax, or single-character operators (some can be both)
   * Also see https://www.postgresql.org/docs/12/sql-syntax-lexical.html#SQL-SYNTAX-SPECIAL-CHARS
   */
  /*
   * "%"
   */
  PG_QUERY__TOKEN__ASCII_37 = 37,
  /*
   * "("
   */
  PG_QUERY__TOKEN__ASCII_40 = 40,
  /*
   * ")"
   */
  PG_QUERY__TOKEN__ASCII_41 = 41,
  /*
   * "*"
   */
  PG_QUERY__TOKEN__ASCII_42 = 42,
  /*
   * "+"
   */
  PG_QUERY__TOKEN__ASCII_43 = 43,
  /*
   * ","
   */
  PG_QUERY__TOKEN__ASCII_44 = 44,
  /*
   * "-"
   */
  PG_QUERY__TOKEN__ASCII_45 = 45,
  /*
   * "."
   */
  PG_QUERY__TOKEN__ASCII_46 = 46,
  /*
   * "/"
   */
  PG_QUERY__TOKEN__ASCII_47 = 47,
  /*
   * ":"
   */
  PG_QUERY__TOKEN__ASCII_58 = 58,
  /*
   * ";"
   */
  PG_QUERY__TOKEN__ASCII_59 = 59,
  /*
   * "<"
   */
  PG_QUERY__TOKEN__ASCII_60 = 60,
  /*
   * "="
   */
  PG_QUERY__TOKEN__ASCII_61 = 61,
  /*
   * ">"
   */
  PG_QUERY__TOKEN__ASCII_62 = 62,
  /*
   * "?"
   */
  PG_QUERY__TOKEN__ASCII_63 = 63,
  /*
   * "["
   */
  PG_QUERY__TOKEN__ASCII_91 = 91,
  /*
   * "\"
   */
  PG_QUERY__TOKEN__ASCII_92 = 92,
  /*
   * "]"
   */
  PG_QUERY__TOKEN__ASCII_93 = 93,
  /*
   * "^"
   */
  PG_QUERY__TOKEN__ASCII_94 = 94,
  /*
   * Named tokens in scan.l
   */
  PG_QUERY__TOKEN__IDENT = 258,
  PG_QUERY__TOKEN__UIDENT = 259,
  PG_QUERY__TOKEN__FCONST = 260,
  PG_QUERY__TOKEN__SCONST = 261,
  PG_QUERY__TOKEN__USCONST = 262,
  PG_QUERY__TOKEN__BCONST = 263,
  PG_QUERY__TOKEN__XCONST = 264,
  PG_QUERY__TOKEN__Op = 265,
  PG_QUERY__TOKEN__ICONST = 266,
  PG_QUERY__TOKEN__PARAM = 267,
  PG_QUERY__TOKEN__TYPECAST = 268,
  PG_QUERY__TOKEN__DOT_DOT = 269,
  PG_QUERY__TOKEN__COLON_EQUALS = 270,
  PG_QUERY__TOKEN__EQUALS_GREATER = 271,
  PG_QUERY__TOKEN__LESS_EQUALS = 272,
  PG_QUERY__TOKEN__GREATER_EQUALS = 273,
  PG_QUERY__TOKEN__NOT_EQUALS = 274,
  PG_QUERY__TOKEN__SQL_COMMENT = 275,
  PG_QUERY__TOKEN__C_COMMENT = 276,
  PG_QUERY__TOKEN__ABORT_P = 277,
  PG_QUERY__TOKEN__ABSOLUTE_P = 278,
  PG_QUERY__TOKEN__ACCESS = 279,
  PG_QUERY__TOKEN__ACTION = 280,
  PG_QUERY__TOKEN__ADD_P = 281,
  PG_QUERY__TOKEN__ADMIN = 282,
  PG_QUERY__TOKEN__AFTER = 283,
  PG_QUERY__TOKEN__AGGREGATE = 284,
  PG_QUERY__TOKEN__ALL = 285,
  PG_QUERY__TOKEN__ALSO = 286,
  PG_QUERY__TOKEN__ALTER = 287,
  PG_QUERY__TOKEN__ALWAYS = 288,
  PG_QUERY__TOKEN__ANALYSE = 289,
  PG_QUERY__TOKEN__ANALYZE = 290,
  PG_QUERY__TOKEN__AND = 291,
  PG_QUERY__TOKEN__ANY = 292,
  PG_QUERY__TOKEN__ARRAY = 293,
  PG_QUERY__TOKEN__AS = 294,
  PG_QUERY__TOKEN__ASC = 295,
  PG_QUERY__TOKEN__ASENSITIVE = 296,
  PG_QUERY__TOKEN__ASSERTION = 297,
  PG_QUERY__TOKEN__ASSIGNMENT = 298,
  PG_QUERY__TOKEN__ASYMMETRIC = 299,
  PG_QUERY__TOKEN__ATOMIC = 300,
  PG_QUERY__TOKEN__AT = 301,
  PG_QUERY__TOKEN__ATTACH = 302,
  PG_QUERY__TOKEN__ATTRIBUTE = 303,
  PG_QUERY__TOKEN__AUTHORIZATION = 304,
  PG_QUERY__TOKEN__BACKWARD = 305,
  PG_QUERY__TOKEN__BEFORE = 306,
  PG_QUERY__TOKEN__BEGIN_P = 307,
  PG_QUERY__TOKEN__BETWEEN = 308,
  PG_QUERY__TOKEN__BIGINT = 309,
  PG_QUERY__TOKEN__BINARY = 310,
  PG_QUERY__TOKEN__BIT = 311,
  PG_QUERY__TOKEN__BOOLEAN_P = 312,
  PG_QUERY__TOKEN__BOTH = 313,
  PG_QUERY__TOKEN__BREADTH = 314,
  PG_QUERY__TOKEN__BY = 315,
  PG_QUERY__TOKEN__CACHE = 316,
  PG_QUERY__TOKEN__CALL = 317,
  PG_QUERY__TOKEN__CALLED = 318,
  PG_QUERY__TOKEN__CASCADE = 319,
  PG_QUERY__TOKEN__CASCADED = 320,
  PG_QUERY__TOKEN__CASE = 321,
  PG_QUERY__TOKEN__CAST = 322,
  PG_QUERY__TOKEN__CATALOG_P = 323,
  PG_QUERY__TOKEN__CHAIN = 324,
  PG_QUERY__TOKEN__CHAR_P = 325,
  PG_QUERY__TOKEN__CHARACTER = 326,
  PG_QUERY__TOKEN__CHARACTERISTICS = 327,
  PG_QUERY__TOKEN__CHECK = 328,
  PG_QUERY__TOKEN__CHECKPOINT = 329,
  PG_QUERY__TOKEN__CLASS = 330,
  PG_QUERY__TOKEN__CLOSE = 331,
  PG_QUERY__TOKEN__CLUSTER = 332,
  PG_QUERY__TOKEN__COALESCE = 333,
  PG_QUERY__TOKEN__COLLATE = 334,
  PG_QUERY__TOKEN__COLLATION = 335,
  PG_QUERY__TOKEN__COLUMN = 336,
  PG_QUERY__TOKEN__COLUMNS = 337,
  PG_QUERY__TOKEN__COMMENT = 338,
  PG_QUERY__TOKEN__COMMENTS = 339,
  PG_QUERY__TOKEN__COMMIT = 340,
  PG_QUERY__TOKEN__COMMITTED = 341,
  PG_QUERY__TOKEN__COMPRESSION = 342,
  PG_QUERY__TOKEN__CONCURRENTLY = 343,
  PG_QUERY__TOKEN__CONFIGURATION = 344,
  PG_QUERY__TOKEN__CONFLICT = 345,
  PG_QUERY__TOKEN__CONNECTION = 346,
  PG_QUERY__TOKEN__CONSTRAINT = 347,
  PG_QUERY__TOKEN__CONSTRAINTS = 348,
  PG_QUERY__TOKEN__CONTENT_P = 349,
  PG_QUERY__TOKEN__CONTINUE_P = 350,
  PG_QUERY__TOKEN__CONVERSION_P = 351,
  PG_QUERY__TOKEN__COPY = 352,
  PG_QUERY__TOKEN__COST = 353,
  PG_QUERY__TOKEN__CREATE = 354,
  PG_QUERY__TOKEN__CROSS = 355,
  PG_QUERY__TOKEN__CSV = 356,
  PG_QUERY__TOKEN__CUBE = 357,
  PG_QUERY__TOKEN__CURRENT_P = 358,
  PG_QUERY__TOKEN__CURRENT_CATALOG = 359,
  PG_QUERY__TOKEN__CURRENT_DATE = 360,
  PG_QUERY__TOKEN__CURRENT_ROLE = 361,
  PG_QUERY__TOKEN__CURRENT_SCHEMA = 362,
  PG_QUERY__TOKEN__CURRENT_TIME = 363,
  PG_QUERY__TOKEN__CURRENT_TIMESTAMP = 364,
  PG_QUERY__TOKEN__CURRENT_USER = 365,
  PG_QUERY__TOKEN__CURSOR = 366,
  PG_QUERY__TOKEN__CYCLE = 367,
  PG_QUERY__TOKEN__DATA_P = 368,
  PG_QUERY__TOKEN__DATABASE = 369,
  PG_QUERY__TOKEN__DAY_P = 370,
  PG_QUERY__TOKEN__DEALLOCATE = 371,
  PG_QUERY__TOKEN__DEC = 372,
  PG_QUERY__TOKEN__DECIMAL_P = 373,
  PG_QUERY__TOKEN__DECLARE = 374,
  PG_QUERY__TOKEN__DEFAULT = 375,
  PG_QUERY__TOKEN__DEFAULTS = 376,
  PG_QUERY__TOKEN__DEFERRABLE = 377,
  PG_QUERY__TOKEN__DEFERRED = 378,
  PG_QUERY__TOKEN__DEFINER = 379,
  PG_QUERY__TOKEN__DELETE_P = 380,
  PG_QUERY__TOKEN__DELIMITER = 381,
  PG_QUERY__TOKEN__DELIMITERS = 382,
  PG_QUERY__TOKEN__DEPENDS = 383,
  PG_QUERY__TOKEN__DEPTH = 384,
  PG_QUERY__TOKEN__DESC = 385,
  PG_QUERY__TOKEN__DETACH = 386,
  PG_QUERY__TOKEN__DICTIONARY = 387,
  PG_QUERY__TOKEN__DISABLE_P = 388,
  PG_QUERY__TOKEN__DISCARD = 389,
  PG_QUERY__TOKEN__DISTINCT = 390,
  PG_QUERY__TOKEN__DO = 391,
  PG_QUERY__TOKEN__DOCUMENT_P = 392,
  PG_QUERY__TOKEN__DOMAIN_P = 393,
  PG_QUERY__TOKEN__DOUBLE_P = 394,
  PG_QUERY__TOKEN__DROP = 395,
  PG_QUERY__TOKEN__EACH = 396,
  PG_QUERY__TOKEN__ELSE = 397,
  PG_QUERY__TOKEN__ENABLE_P = 398,
  PG_QUERY__TOKEN__ENCODING = 399,
  PG_QUERY__TOKEN__ENCRYPTED = 400,
  PG_QUERY__TOKEN__END_P = 401,
  PG_QUERY__TOKEN__ENUM_P = 402,
  PG_QUERY__TOKEN__ESCAPE = 403,
  PG_QUERY__TOKEN__EVENT = 404,
  PG_QUERY__TOKEN__EXCEPT = 405,
  PG_QUERY__TOKEN__EXCLUDE = 406,
  PG_QUERY__TOKEN__EXCLUDING = 407,
  PG_QUERY__TOKEN__EXCLUSIVE = 408,
  PG_QUERY__TOKEN__EXECUTE = 409,
  PG_QUERY__TOKEN__EXISTS = 410,
  PG_QUERY__TOKEN__EXPLAIN = 411,
  PG_QUERY__TOKEN__EXPRESSION = 412,
  PG_QUERY__TOKEN__EXTENSION = 413,
  PG_QUERY__TOKEN__EXTERNAL = 414,
  PG_QUERY__TOKEN__EXTRACT = 415,
  PG_QUERY__TOKEN__FALSE_P = 416,
  PG_QUERY__TOKEN__FAMILY = 417,
  PG_QUERY__TOKEN__FETCH = 418,
  PG_QUERY__TOKEN__FILTER = 419,
  PG_QUERY__TOKEN__FINALIZE = 420,
  PG_QUERY__TOKEN__FIRST_P = 421,
  PG_QUERY__TOKEN__FLOAT_P = 422,
  PG_QUERY__TOKEN__FOLLOWING = 423,
  PG_QUERY__TOKEN__FOR = 424,
  PG_QUERY__TOKEN__FORCE = 425,
  PG_QUERY__TOKEN__FOREIGN = 426,
  PG_QUERY__TOKEN__FORWARD = 427,
  PG_QUERY__TOKEN__FREEZE = 428,
  PG_QUERY__TOKEN__FROM = 429,
  PG_QUERY__TOKEN__FULL = 430,
  PG_QUERY__TOKEN__FUNCTION = 431,
  PG_QUERY__TOKEN__FUNCTIONS = 432,
  PG_QUERY__TOKEN__GENERATED = 433,
  PG_QUERY__TOKEN__GLOBAL = 434,
  PG_QUERY__TOKEN__GRANT = 435,
  PG_QUERY__TOKEN__GRANTED = 436,
  PG_QUERY__TOKEN__GREATEST = 437,
  PG_QUERY__TOKEN__GROUP_P = 438,
  PG_QUERY__TOKEN__GROUPING = 439,
  PG_QUERY__TOKEN__GROUPS = 440,
  PG_QUERY__TOKEN__HANDLER = 441,
  PG_QUERY__TOKEN__HAVING = 442,
  PG_QUERY__TOKEN__HEADER_P = 443,
  PG_QUERY__TOKEN__HOLD = 444,
  PG_QUERY__TOKEN__HOUR_P = 445,
  PG_QUERY__TOKEN__IDENTITY_P = 446,
  PG_QUERY__TOKEN__IF_P = 447,
  PG_QUERY__TOKEN__ILIKE = 448,
  PG_QUERY__TOKEN__IMMEDIATE = 449,
  PG_QUERY__TOKEN__IMMUTABLE = 450,
  PG_QUERY__TOKEN__IMPLICIT_P = 451,
  PG_QUERY__TOKEN__IMPORT_P = 452,
  PG_QUERY__TOKEN__IN_P = 453,
  PG_QUERY__TOKEN__INCLUDE = 454,
  PG_QUERY__TOKEN__INCLUDING = 455,
  PG_QUERY__TOKEN__INCREMENT = 456,
  PG_QUERY__TOKEN__INDEX = 457,
  PG_QUERY__TOKEN__INDEXES = 458,
  PG_QUERY__TOKEN__INHERIT = 459,
  PG_QUERY__TOKEN__INHERITS = 460,
  PG_QUERY__TOKEN__INITIALLY = 461,
  PG_QUERY__TOKEN__INLINE_P = 462,
  PG_QUERY__TOKEN__INNER_P = 463,
  PG_QUERY__TOKEN__INOUT = 464,
  PG_QUERY__TOKEN__INPUT_P = 465,
  PG_QUERY__TOKEN__INSENSITIVE = 466,
  PG_QUERY__TOKEN__INSERT = 467,
  PG_QUERY__TOKEN__INSTEAD = 468,
  PG_QUERY__TOKEN__INT_P = 469,
  PG_QUERY__TOKEN__INTEGER = 470,
  PG_QUERY__TOKEN__INTERSECT = 471,
  PG_QUERY__TOKEN__INTERVAL = 472,
  PG_QUERY__TOKEN__INTO = 473,
  PG_QUERY__TOKEN__INVOKER = 474,
  PG_QUERY__TOKEN__IS = 475,
  PG_QUERY__TOKEN__ISNULL = 476,
  PG_QUERY__TOKEN__ISOLATION = 477,
  PG_QUERY__TOKEN__JOIN = 478,
  PG_QUERY__TOKEN__KEY = 479,
  PG_QUERY__TOKEN__LABEL = 480,
  PG_QUERY__TOKEN__LANGUAGE = 481,
  PG_QUERY__TOKEN__LARGE_P = 482,
  PG_QUERY__TOKEN__LAST_P = 483,
  PG_QUERY__TOKEN__LATERAL_P = 484,
  PG_QUERY__TOKEN__LEADING = 485,
  PG_QUERY__TOKEN__LEAKPROOF = 486,
  PG_QUERY__TOKEN__LEAST = 487,
  PG_QUERY__TOKEN__LEFT = 488,
  PG_QUERY__TOKEN__LEVEL = 489,
  PG_QUERY__TOKEN__LIKE = 490,
  PG_QUERY__TOKEN__LIMIT = 491,
  PG_QUERY__TOKEN__LISTEN = 492,
  PG_QUERY__TOKEN__LOAD = 493,
  PG_QUERY__TOKEN__LOCAL = 494,
  PG_QUERY__TOKEN__LOCALTIME = 495,
  PG_QUERY__TOKEN__LOCALTIMESTAMP = 496,
  PG_QUERY__TOKEN__LOCATION = 497,
  PG_QUERY__TOKEN__LOCK_P = 498,
  PG_QUERY__TOKEN__LOCKED = 499,
  PG_QUERY__TOKEN__LOGGED = 500,
  PG_QUERY__TOKEN__MAPPING = 501,
  PG_QUERY__TOKEN__MATCH = 502,
  PG_QUERY__TOKEN__MATCHED = 503,
  PG_QUERY__TOKEN__MATERIALIZED = 504,
  PG_QUERY__TOKEN__MAXVALUE = 505,
  PG_QUERY__TOKEN__MERGE = 506,
  PG_QUERY__TOKEN__METHOD = 507,
  PG_QUERY__TOKEN__MINUTE_P = 508,
  PG_QUERY__TOKEN__MINVALUE = 509,
  PG_QUERY__TOKEN__MODE = 510,
  PG_QUERY__TOKEN__MONTH_P = 511,
  PG_QUERY__TOKEN__MOVE = 512,
  PG_QUERY__TOKEN__NAME_P = 513,
  PG_QUERY__TOKEN__NAMES = 514,
  PG_QUERY__TOKEN__NATIONAL = 515,
  PG_QUERY__TOKEN__NATURAL = 516,
  PG_QUERY__TOKEN__NCHAR = 517,
  PG_QUERY__TOKEN__NEW = 518,
  PG_QUERY__TOKEN__NEXT = 519,
  PG_QUERY__TOKEN__NFC = 520,
  PG_QUERY__TOKEN__NFD = 521,
  PG_QUERY__TOKEN__NFKC = 522,
  PG_QUERY__TOKEN__NFKD = 523,
  PG_QUERY__TOKEN__NO = 524,
  PG_QUERY__TOKEN__NONE = 525,
  PG_QUERY__TOKEN__NORMALIZE = 526,
  PG_QUERY__TOKEN__NORMALIZED = 527,
  PG_QUERY__TOKEN__NOT = 528,
  PG_QUERY__TOKEN__NOTHING = 529,
  PG_QUERY__TOKEN__NOTIFY = 530,
  PG_QUERY__TOKEN__NOTNULL = 531,
  PG_QUERY__TOKEN__NOWAIT = 532,
  PG_QUERY__TOKEN__NULL_P = 533,
  PG_QUERY__TOKEN__NULLIF = 534,
  PG_QUERY__TOKEN__NULLS_P = 535,
  PG_QUERY__TOKEN__NUMERIC = 536,
  PG_QUERY__TOKEN__OBJECT_P = 537,
  PG_QUERY__TOKEN__OF = 538,
  PG_QUERY__TOKEN__OFF = 539,
  PG_QUERY__TOKEN__OFFSET = 540,
  PG_QUERY__TOKEN__OIDS = 541,
  PG_QUERY__TOKEN__OLD = 542,
  PG_QUERY__TOKEN__ON = 543,
  PG_QUERY__TOKEN__ONLY = 544,
  PG_QUERY__TOKEN__OPERATOR = 545,
  PG_QUERY__TOKEN__OPTION = 546,
  PG_QUERY__TOKEN__OPTIONS = 547,
  PG_QUERY__TOKEN__OR = 548,
  PG_QUERY__TOKEN__ORDER = 549,
  PG_QUERY__TOKEN__ORDINALITY = 550,
  PG_QUERY__TOKEN__OTHERS = 551,
  PG_QUERY__TOKEN__OUT_P = 552,
  PG_QUERY__TOKEN__OUTER_P = 553,
  PG_QUERY__TOKEN__OVER = 554,
  PG_QUERY__TOKEN__OVERLAPS = 555,
  PG_QUERY__TOKEN__OVERLAY = 556,
  PG_QUERY__TOKEN__OVERRIDING = 557,
  PG_QUERY__TOKEN__OWNED = 558,
  PG_QUERY__TOKEN__OWNER = 559,
  PG_QUERY__TOKEN__PARALLEL = 560,
  PG_QUERY__TOKEN__PARAMETER = 561,
  PG_QUERY__TOKEN__PARSER = 562,
  PG_QUERY__TOKEN__PARTIAL = 563,
  PG_QUERY__TOKEN__PARTITION = 564,
  PG_QUERY__TOKEN__PASSING = 565,
  PG_QUERY__TOKEN__PASSWORD = 566,
  PG_QUERY__TOKEN__PLACING = 567,
  PG_QUERY__TOKEN__PLANS = 568,
  PG_QUERY__TOKEN__POLICY = 569,
  PG_QUERY__TOKEN__POSITION = 570,
  PG_QUERY__TOKEN__PRECEDING = 571,
  PG_QUERY__TOKEN__PRECISION = 572,
  PG_QUERY__TOKEN__PRESERVE = 573,
  PG_QUERY__TOKEN__PREPARE = 574,
  PG_QUERY__TOKEN__PREPARED = 575,
  PG_QUERY__TOKEN__PRIMARY = 576,
  PG_QUERY__TOKEN__PRIOR = 577,
  PG_QUERY__TOKEN__PRIVILEGES = 578,
  PG_QUERY__TOKEN__PROCEDURAL = 579,
  PG_QUERY__TOKEN__PROCEDURE = 580,
  PG_QUERY__TOKEN__PROCEDURES = 581,
  PG_QUERY__TOKEN__PROGRAM = 582,
  PG_QUERY__TOKEN__PUBLICATION = 583,
  PG_QUERY__TOKEN__QUOTE = 584,
  PG_QUERY__TOKEN__RANGE = 585,
  PG_QUERY__TOKEN__READ = 586,
  PG_QUERY__TOKEN__REAL = 587,
  PG_QUERY__TOKEN__REASSIGN = 588,
  PG_QUERY__TOKEN__RECHECK = 589,
  PG_QUERY__TOKEN__RECURSIVE = 590,
  PG_QUERY__TOKEN__REF_P = 591,
  PG_QUERY__TOKEN__REFERENCES = 592,
  PG_QUERY__TOKEN__REFERENCING = 593,
  PG_QUERY__TOKEN__REFRESH = 594,
  PG_QUERY__TOKEN__REINDEX = 595,
  PG_QUERY__TOKEN__RELATIVE_P = 596,
  PG_QUERY__TOKEN__RELEASE = 597,
  PG_QUERY__TOKEN__RENAME = 598,
  PG_QUERY__TOKEN__REPEATABLE = 599,
  PG_QUERY__TOKEN__REPLACE = 600,
  PG_QUERY__TOKEN__REPLICA = 601,
  PG_QUERY__TOKEN__RESET = 602,
  PG_QUERY__TOKEN__RESTART = 603,
  PG_QUERY__TOKEN__RESTRICT = 604,
  PG_QUERY__TOKEN__RETURN = 605,
  PG_QUERY__TOKEN__RETURNING = 606,
  PG_QUERY__TOKEN__RETURNS = 607,
  PG_QUERY__TOKEN__REVOKE = 608,
  PG_QUERY__TOKEN__RIGHT = 609,
  PG_QUERY__TOKEN__ROLE = 610,
  PG_QUERY__TOKEN__ROLLBACK = 611,
  PG_QUERY__TOKEN__ROLLUP = 612,
  PG_QUERY__TOKEN__ROUTINE = 613,
  PG_QUERY__TOKEN__ROUTINES = 614,
  PG_QUERY__TOKEN__ROW = 615,
  PG_QUERY__TOKEN__ROWS = 616,
  PG_QUERY__TOKEN__RULE = 617,
  PG_QUERY__TOKEN__SAVEPOINT = 618,
  PG_QUERY__TOKEN__SCHEMA = 619,
  PG_QUERY__TOKEN__SCHEMAS = 620,
  PG_QUERY__TOKEN__SCROLL = 621,
  PG_QUERY__TOKEN__SEARCH = 622,
  PG_QUERY__TOKEN__SECOND_P = 623,
  PG_QUERY__TOKEN__SECURITY = 624,
  PG_QUERY__TOKEN__SELECT = 625,
  PG_QUERY__TOKEN__SEQUENCE = 626,
  PG_QUERY__TOKEN__SEQUENCES = 627,
  PG_QUERY__TOKEN__SERIALIZABLE = 628,
  PG_QUERY__TOKEN__SERVER = 629,
  PG_QUERY__TOKEN__SESSION = 630,
  PG_QUERY__TOKEN__SESSION_USER = 631,
  PG_QUERY__TOKEN__SET = 632,
  PG_QUERY__TOKEN__SETS = 633,
  PG_QUERY__TOKEN__SETOF = 634,
  PG_QUERY__TOKEN__SHARE = 635,
  PG_QUERY__TOKEN__SHOW = 636,
  PG_QUERY__TOKEN__SIMILAR = 637,
  PG_QUERY__TOKEN__SIMPLE = 638,
  PG_QUERY__TOKEN__SKIP = 639,
  PG_QUERY__TOKEN__SMALLINT = 640,
  PG_QUERY__TOKEN__SNAPSHOT = 641,
  PG_QUERY__TOKEN__SOME = 642,
  PG_QUERY__TOKEN__SQL_P = 643,
  PG_QUERY__TOKEN__STABLE = 644,
  PG_QUERY__TOKEN__STANDALONE_P = 645,
  PG_QUERY__TOKEN__START = 646,
  PG_QUERY__TOKEN__STATEMENT = 647,
  PG_QUERY__TOKEN__STATISTICS = 648,
  PG_QUERY__TOKEN__STDIN = 649,
  PG_QUERY__TOKEN__STDOUT = 650,
  PG_QUERY__TOKEN__STORAGE = 651,
  PG_QUERY__TOKEN__STORED = 652,
  PG_QUERY__TOKEN__STRICT_P = 653,
  PG_QUERY__TOKEN__STRIP_P = 654,
  PG_QUERY__TOKEN__SUBSCRIPTION = 655,
  PG_QUERY__TOKEN__SUBSTRING = 656,
  PG_QUERY__TOKEN__SUPPORT = 657,
  PG_QUERY__TOKEN__SYMMETRIC = 658,
  PG_QUERY__TOKEN__SYSID = 659,
  PG_QUERY__TOKEN__SYSTEM_P = 660,
  PG_QUERY__TOKEN__TABLE = 661,
  PG_QUERY__TOKEN__TABLES = 662,
  PG_QUERY__TOKEN__TABLESAMPLE = 663,
  PG_QUERY__TOKEN__TABLESPACE = 664,
  PG_QUERY__TOKEN__TEMP = 665,
  PG_QUERY__TOKEN__TEMPLATE = 666,
  PG_QUERY__TOKEN__TEMPORARY = 667,
  PG_QUERY__TOKEN__TEXT_P = 668,
  PG_QUERY__TOKEN__THEN = 669,
  PG_QUERY__TOKEN__TIES = 670,
  PG_QUERY__TOKEN__TIME = 671,
  PG_QUERY__TOKEN__TIMESTAMP = 672,
  PG_QUERY__TOKEN__TO = 673,
  PG_QUERY__TOKEN__TRAILING = 674,
  PG_QUERY__TOKEN__TRANSACTION = 675,
  PG_QUERY__TOKEN__TRANSFORM = 676,
  PG_QUERY__TOKEN__TREAT = 677,
  PG_QUERY__TOKEN__TRIGGER = 678,
  PG_QUERY__TOKEN__TRIM = 679,
  PG_QUERY__TOKEN__TRUE_P = 680,
  PG_QUERY__TOKEN__TRUNCATE = 681,
  PG_QUERY__TOKEN__TRUSTED = 682,
  PG_QUERY__TOKEN__TYPE_P = 683,
  PG_QUERY__TOKEN__TYPES_P = 684,
  PG_QUERY__TOKEN__UESCAPE = 685,
  PG_QUERY__TOKEN__UNBOUNDED = 686,
  PG_QUERY__TOKEN__UNCOMMITTED = 687,
  PG_QUERY__TOKEN__UNENCRYPTED = 688,
  PG_QUERY__TOKEN__UNION = 689,
  PG_QUERY__TOKEN__UNIQUE = 690,
  PG_QUERY__TOKEN__UNKNOWN = 691,
  PG_QUERY__TOKEN__UNLISTEN = 692,
  PG_QUERY__TOKEN__UNLOGGED = 693,
  PG_QUERY__TOKEN__UNTIL = 694,
  PG_QUERY__TOKEN__UPDATE = 695,
  PG_QUERY__TOKEN__USER = 696,
  PG_QUERY__TOKEN__USING = 697,
  PG_QUERY__TOKEN__VACUUM = 698,
  PG_QUERY__TOKEN__VALID = 699,
  PG_QUERY__TOKEN__VALIDATE = 700,
  PG_QUERY__TOKEN__VALIDATOR = 701,
  PG_QUERY__TOKEN__VALUE_P = 702,
  PG_QUERY__TOKEN__VALUES = 703,
  PG_QUERY__TOKEN__VARCHAR = 704,
  PG_QUERY__TOKEN__VARIADIC = 705,
  PG_QUERY__TOKEN__VARYING = 706,
  PG_QUERY__TOKEN__VERBOSE = 707,
  PG_QUERY__TOKEN__VERSION_P = 708,
  PG_QUERY__TOKEN__VIEW = 709,
  PG_QUERY__TOKEN__VIEWS = 710,
  PG_QUERY__TOKEN__VOLATILE = 711,
  PG_QUERY__TOKEN__WHEN = 712,
  PG_QUERY__TOKEN__WHERE = 713,
  PG_QUERY__TOKEN__WHITESPACE_P = 714,
  PG_QUERY__TOKEN__WINDOW = 715,
  PG_QUERY__TOKEN__WITH = 716,
  PG_QUERY__TOKEN__WITHIN = 717,
  PG_QUERY__TOKEN__WITHOUT = 718,
  PG_QUERY__TOKEN__WORK = 719,
  PG_QUERY__TOKEN__WRAPPER = 720,
  PG_QUERY__TOKEN__WRITE = 721,
  PG_QUERY__TOKEN__XML_P = 722,
  PG_QUERY__TOKEN__XMLATTRIBUTES = 723,
  PG_QUERY__TOKEN__XMLCONCAT = 724,
  PG_QUERY__TOKEN__XMLELEMENT = 725,
  PG_QUERY__TOKEN__XMLEXISTS = 726,
  PG_QUERY__TOKEN__XMLFOREST = 727,
  PG_QUERY__TOKEN__XMLNAMESPACES = 728,
  PG_QUERY__TOKEN__XMLPARSE = 729,
  PG_QUERY__TOKEN__XMLPI = 730,
  PG_QUERY__TOKEN__XMLROOT = 731,
  PG_QUERY__TOKEN__XMLSERIALIZE = 732,
  PG_QUERY__TOKEN__XMLTABLE = 733,
  PG_QUERY__TOKEN__YEAR_P = 734,
  PG_QUERY__TOKEN__YES_P = 735,
  PG_QUERY__TOKEN__ZONE = 736,
  PG_QUERY__TOKEN__NOT_LA = 737,
  PG_QUERY__TOKEN__NULLS_LA = 738,
  PG_QUERY__TOKEN__WITH_LA = 739,
  PG_QUERY__TOKEN__MODE_TYPE_NAME = 740,
  PG_QUERY__TOKEN__MODE_PLPGSQL_EXPR = 741,
  PG_QUERY__TOKEN__MODE_PLPGSQL_ASSIGN1 = 742,
  PG_QUERY__TOKEN__MODE_PLPGSQL_ASSIGN2 = 743,
  PG_QUERY__TOKEN__MODE_PLPGSQL_ASSIGN3 = 744,
  PG_QUERY__TOKEN__UMINUS = 745
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__TOKEN)
} PgQuery__Token;

/* --- messages --- */

struct  PgQuery__ParseResult
{
  ProtobufCMessage base;
  int32_t version;
  size_t n_stmts;
  PgQuery__RawStmt **stmts;
};
#define PG_QUERY__PARSE_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__parse_result__descriptor) \
    , 0, 0,NULL }


struct  PgQuery__ScanResult
{
  ProtobufCMessage base;
  int32_t version;
  size_t n_tokens;
  PgQuery__ScanToken **tokens;
};
#define PG_QUERY__SCAN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__scan_result__descriptor) \
    , 0, 0,NULL }


typedef enum {
  PG_QUERY__NODE__NODE__NOT_SET = 0,
  PG_QUERY__NODE__NODE_ALIAS = 1,
  PG_QUERY__NODE__NODE_RANGE_VAR = 2,
  PG_QUERY__NODE__NODE_TABLE_FUNC = 3,
  PG_QUERY__NODE__NODE_VAR = 4,
  PG_QUERY__NODE__NODE_PARAM = 5,
  PG_QUERY__NODE__NODE_AGGREF = 6,
  PG_QUERY__NODE__NODE_GROUPING_FUNC = 7,
  PG_QUERY__NODE__NODE_WINDOW_FUNC = 8,
  PG_QUERY__NODE__NODE_SUBSCRIPTING_REF = 9,
  PG_QUERY__NODE__NODE_FUNC_EXPR = 10,
  PG_QUERY__NODE__NODE_NAMED_ARG_EXPR = 11,
  PG_QUERY__NODE__NODE_OP_EXPR = 12,
  PG_QUERY__NODE__NODE_DISTINCT_EXPR = 13,
  PG_QUERY__NODE__NODE_NULL_IF_EXPR = 14,
  PG_QUERY__NODE__NODE_SCALAR_ARRAY_OP_EXPR = 15,
  PG_QUERY__NODE__NODE_BOOL_EXPR = 16,
  PG_QUERY__NODE__NODE_SUB_LINK = 17,
  PG_QUERY__NODE__NODE_SUB_PLAN = 18,
  PG_QUERY__NODE__NODE_ALTERNATIVE_SUB_PLAN = 19,
  PG_QUERY__NODE__NODE_FIELD_SELECT = 20,
  PG_QUERY__NODE__NODE_FIELD_STORE = 21,
  PG_QUERY__NODE__NODE_RELABEL_TYPE = 22,
  PG_QUERY__NODE__NODE_COERCE_VIA_IO = 23,
  PG_QUERY__NODE__NODE_ARRAY_COERCE_EXPR = 24,
  PG_QUERY__NODE__NODE_CONVERT_ROWTYPE_EXPR = 25,
  PG_QUERY__NODE__NODE_COLLATE_EXPR = 26,
  PG_QUERY__NODE__NODE_CASE_EXPR = 27,
  PG_QUERY__NODE__NODE_CASE_WHEN = 28,
  PG_QUERY__NODE__NODE_CASE_TEST_EXPR = 29,
  PG_QUERY__NODE__NODE_ARRAY_EXPR = 30,
  PG_QUERY__NODE__NODE_ROW_EXPR = 31,
  PG_QUERY__NODE__NODE_ROW_COMPARE_EXPR = 32,
  PG_QUERY__NODE__NODE_COALESCE_EXPR = 33,
  PG_QUERY__NODE__NODE_MIN_MAX_EXPR = 34,
  PG_QUERY__NODE__NODE_SQLVALUE_FUNCTION = 35,
  PG_QUERY__NODE__NODE_XML_EXPR = 36,
  PG_QUERY__NODE__NODE_NULL_TEST = 37,
  PG_QUERY__NODE__NODE_BOOLEAN_TEST = 38,
  PG_QUERY__NODE__NODE_COERCE_TO_DOMAIN = 39,
  PG_QUERY__NODE__NODE_COERCE_TO_DOMAIN_VALUE = 40,
  PG_QUERY__NODE__NODE_SET_TO_DEFAULT = 41,
  PG_QUERY__NODE__NODE_CURRENT_OF_EXPR = 42,
  PG_QUERY__NODE__NODE_NEXT_VALUE_EXPR = 43,
  PG_QUERY__NODE__NODE_INFERENCE_ELEM = 44,
  PG_QUERY__NODE__NODE_TARGET_ENTRY = 45,
  PG_QUERY__NODE__NODE_RANGE_TBL_REF = 46,
  PG_QUERY__NODE__NODE_JOIN_EXPR = 47,
  PG_QUERY__NODE__NODE_FROM_EXPR = 48,
  PG_QUERY__NODE__NODE_ON_CONFLICT_EXPR = 49,
  PG_QUERY__NODE__NODE_INTO_CLAUSE = 50,
  PG_QUERY__NODE__NODE_MERGE_ACTION = 51,
  PG_QUERY__NODE__NODE_RAW_STMT = 52,
  PG_QUERY__NODE__NODE_QUERY = 53,
  PG_QUERY__NODE__NODE_INSERT_STMT = 54,
  PG_QUERY__NODE__NODE_DELETE_STMT = 55,
  PG_QUERY__NODE__NODE_UPDATE_STMT = 56,
  PG_QUERY__NODE__NODE_MERGE_STMT = 57,
  PG_QUERY__NODE__NODE_SELECT_STMT = 58,
  PG_QUERY__NODE__NODE_RETURN_STMT = 59,
  PG_QUERY__NODE__NODE_PLASSIGN_STMT = 60,
  PG_QUERY__NODE__NODE_ALTER_TABLE_STMT = 61,
  PG_QUERY__NODE__NODE_ALTER_TABLE_CMD = 62,
  PG_QUERY__NODE__NODE_ALTER_DOMAIN_STMT = 63,
  PG_QUERY__NODE__NODE_SET_OPERATION_STMT = 64,
  PG_QUERY__NODE__NODE_GRANT_STMT = 65,
  PG_QUERY__NODE__NODE_GRANT_ROLE_STMT = 66,
  PG_QUERY__NODE__NODE_ALTER_DEFAULT_PRIVILEGES_STMT = 67,
  PG_QUERY__NODE__NODE_CLOSE_PORTAL_STMT = 68,
  PG_QUERY__NODE__NODE_CLUSTER_STMT = 69,
  PG_QUERY__NODE__NODE_COPY_STMT = 70,
  PG_QUERY__NODE__NODE_CREATE_STMT = 71,
  PG_QUERY__NODE__NODE_DEFINE_STMT = 72,
  PG_QUERY__NODE__NODE_DROP_STMT = 73,
  PG_QUERY__NODE__NODE_TRUNCATE_STMT = 74,
  PG_QUERY__NODE__NODE_COMMENT_STMT = 75,
  PG_QUERY__NODE__NODE_FETCH_STMT = 76,
  PG_QUERY__NODE__NODE_INDEX_STMT = 77,
  PG_QUERY__NODE__NODE_CREATE_FUNCTION_STMT = 78,
  PG_QUERY__NODE__NODE_ALTER_FUNCTION_STMT = 79,
  PG_QUERY__NODE__NODE_DO_STMT = 80,
  PG_QUERY__NODE__NODE_RENAME_STMT = 81,
  PG_QUERY__NODE__NODE_RULE_STMT = 82,
  PG_QUERY__NODE__NODE_NOTIFY_STMT = 83,
  PG_QUERY__NODE__NODE_LISTEN_STMT = 84,
  PG_QUERY__NODE__NODE_UNLISTEN_STMT = 85,
  PG_QUERY__NODE__NODE_TRANSACTION_STMT = 86,
  PG_QUERY__NODE__NODE_VIEW_STMT = 87,
  PG_QUERY__NODE__NODE_LOAD_STMT = 88,
  PG_QUERY__NODE__NODE_CREATE_DOMAIN_STMT = 89,
  PG_QUERY__NODE__NODE_CREATEDB_STMT = 90,
  PG_QUERY__NODE__NODE_DROPDB_STMT = 91,
  PG_QUERY__NODE__NODE_VACUUM_STMT = 92,
  PG_QUERY__NODE__NODE_EXPLAIN_STMT = 93,
  PG_QUERY__NODE__NODE_CREATE_TABLE_AS_STMT = 94,
  PG_QUERY__NODE__NODE_CREATE_SEQ_STMT = 95,
  PG_QUERY__NODE__NODE_ALTER_SEQ_STMT = 96,
  PG_QUERY__NODE__NODE_VARIABLE_SET_STMT = 97,
  PG_QUERY__NODE__NODE_VARIABLE_SHOW_STMT = 98,
  PG_QUERY__NODE__NODE_DISCARD_STMT = 99,
  PG_QUERY__NODE__NODE_CREATE_TRIG_STMT = 100,
  PG_QUERY__NODE__NODE_CREATE_PLANG_STMT = 101,
  PG_QUERY__NODE__NODE_CREATE_ROLE_STMT = 102,
  PG_QUERY__NODE__NODE_ALTER_ROLE_STMT = 103,
  PG_QUERY__NODE__NODE_DROP_ROLE_STMT = 104,
  PG_QUERY__NODE__NODE_LOCK_STMT = 105,
  PG_QUERY__NODE__NODE_CONSTRAINTS_SET_STMT = 106,
  PG_QUERY__NODE__NODE_REINDEX_STMT = 107,
  PG_QUERY__NODE__NODE_CHECK_POINT_STMT = 108,
  PG_QUERY__NODE__NODE_CREATE_SCHEMA_STMT = 109,
  PG_QUERY__NODE__NODE_ALTER_DATABASE_STMT = 110,
  PG_QUERY__NODE__NODE_ALTER_DATABASE_REFRESH_COLL_STMT = 111,
  PG_QUERY__NODE__NODE_ALTER_DATABASE_SET_STMT = 112,
  PG_QUERY__NODE__NODE_ALTER_ROLE_SET_STMT = 113,
  PG_QUERY__NODE__NODE_CREATE_CONVERSION_STMT = 114,
  PG_QUERY__NODE__NODE_CREATE_CAST_STMT = 115,
  PG_QUERY__NODE__NODE_CREATE_OP_CLASS_STMT = 116,
  PG_QUERY__NODE__NODE_CREATE_OP_FAMILY_STMT = 117,
  PG_QUERY__NODE__NODE_ALTER_OP_FAMILY_STMT = 118,
  PG_QUERY__NODE__NODE_PREPARE_STMT = 119,
  PG_QUERY__NODE__NODE_EXECUTE_STMT = 120,
  PG_QUERY__NODE__NODE_DEALLOCATE_STMT = 121,
  PG_QUERY__NODE__NODE_DECLARE_CURSOR_STMT = 122,
  PG_QUERY__NODE__NODE_CREATE_TABLE_SPACE_STMT = 123,
  PG_QUERY__NODE__NODE_DROP_TABLE_SPACE_STMT = 124,
  PG_QUERY__NODE__NODE_ALTER_OBJECT_DEPENDS_STMT = 125,
  PG_QUERY__NODE__NODE_ALTER_OBJECT_SCHEMA_STMT = 126,
  PG_QUERY__NODE__NODE_ALTER_OWNER_STMT = 127,
  PG_QUERY__NODE__NODE_ALTER_OPERATOR_STMT = 128,
  PG_QUERY__NODE__NODE_ALTER_TYPE_STMT = 129,
  PG_QUERY__NODE__NODE_DROP_OWNED_STMT = 130,
  PG_QUERY__NODE__NODE_REASSIGN_OWNED_STMT = 131,
  PG_QUERY__NODE__NODE_COMPOSITE_TYPE_STMT = 132,
  PG_QUERY__NODE__NODE_CREATE_ENUM_STMT = 133,
  PG_QUERY__NODE__NODE_CREATE_RANGE_STMT = 134,
  PG_QUERY__NODE__NODE_ALTER_ENUM_STMT = 135,
  PG_QUERY__NODE__NODE_ALTER_TSDICTIONARY_STMT = 136,
  PG_QUERY__NODE__NODE_ALTER_TSCONFIGURATION_STMT = 137,
  PG_QUERY__NODE__NODE_CREATE_FDW_STMT = 138,
  PG_QUERY__NODE__NODE_ALTER_FDW_STMT = 139,
  PG_QUERY__NODE__NODE_CREATE_FOREIGN_SERVER_STMT = 140,
  PG_QUERY__NODE__NODE_ALTER_FOREIGN_SERVER_STMT = 141,
  PG_QUERY__NODE__NODE_CREATE_USER_MAPPING_STMT = 142,
  PG_QUERY__NODE__NODE_ALTER_USER_MAPPING_STMT = 143,
  PG_QUERY__NODE__NODE_DROP_USER_MAPPING_STMT = 144,
  PG_QUERY__NODE__NODE_ALTER_TABLE_SPACE_OPTIONS_STMT = 145,
  PG_QUERY__NODE__NODE_ALTER_TABLE_MOVE_ALL_STMT = 146,
  PG_QUERY__NODE__NODE_SEC_LABEL_STMT = 147,
  PG_QUERY__NODE__NODE_CREATE_FOREIGN_TABLE_STMT = 148,
  PG_QUERY__NODE__NODE_IMPORT_FOREIGN_SCHEMA_STMT = 149,
  PG_QUERY__NODE__NODE_CREATE_EXTENSION_STMT = 150,
  PG_QUERY__NODE__NODE_ALTER_EXTENSION_STMT = 151,
  PG_QUERY__NODE__NODE_ALTER_EXTENSION_CONTENTS_STMT = 152,
  PG_QUERY__NODE__NODE_CREATE_EVENT_TRIG_STMT = 153,
  PG_QUERY__NODE__NODE_ALTER_EVENT_TRIG_STMT = 154,
  PG_QUERY__NODE__NODE_REFRESH_MAT_VIEW_STMT = 155,
  PG_QUERY__NODE__NODE_REPLICA_IDENTITY_STMT = 156,
  PG_QUERY__NODE__NODE_ALTER_SYSTEM_STMT = 157,
  PG_QUERY__NODE__NODE_CREATE_POLICY_STMT = 158,
  PG_QUERY__NODE__NODE_ALTER_POLICY_STMT = 159,
  PG_QUERY__NODE__NODE_CREATE_TRANSFORM_STMT = 160,
  PG_QUERY__NODE__NODE_CREATE_AM_STMT = 161,
  PG_QUERY__NODE__NODE_CREATE_PUBLICATION_STMT = 162,
  PG_QUERY__NODE__NODE_ALTER_PUBLICATION_STMT = 163,
  PG_QUERY__NODE__NODE_CREATE_SUBSCRIPTION_STMT = 164,
  PG_QUERY__NODE__NODE_ALTER_SUBSCRIPTION_STMT = 165,
  PG_QUERY__NODE__NODE_DROP_SUBSCRIPTION_STMT = 166,
  PG_QUERY__NODE__NODE_CREATE_STATS_STMT = 167,
  PG_QUERY__NODE__NODE_ALTER_COLLATION_STMT = 168,
  PG_QUERY__NODE__NODE_CALL_STMT = 169,
  PG_QUERY__NODE__NODE_ALTER_STATS_STMT = 170,
  PG_QUERY__NODE__NODE_A_EXPR = 171,
  PG_QUERY__NODE__NODE_COLUMN_REF = 172,
  PG_QUERY__NODE__NODE_PARAM_REF = 173,
  PG_QUERY__NODE__NODE_FUNC_CALL = 174,
  PG_QUERY__NODE__NODE_A_STAR = 175,
  PG_QUERY__NODE__NODE_A_INDICES = 176,
  PG_QUERY__NODE__NODE_A_INDIRECTION = 177,
  PG_QUERY__NODE__NODE_A_ARRAY_EXPR = 178,
  PG_QUERY__NODE__NODE_RES_TARGET = 179,
  PG_QUERY__NODE__NODE_MULTI_ASSIGN_REF = 180,
  PG_QUERY__NODE__NODE_TYPE_CAST = 181,
  PG_QUERY__NODE__NODE_COLLATE_CLAUSE = 182,
  PG_QUERY__NODE__NODE_SORT_BY = 183,
  PG_QUERY__NODE__NODE_WINDOW_DEF = 184,
  PG_QUERY__NODE__NODE_RANGE_SUBSELECT = 185,
  PG_QUERY__NODE__NODE_RANGE_FUNCTION = 186,
  PG_QUERY__NODE__NODE_RANGE_TABLE_SAMPLE = 187,
  PG_QUERY__NODE__NODE_RANGE_TABLE_FUNC = 188,
  PG_QUERY__NODE__NODE_RANGE_TABLE_FUNC_COL = 189,
  PG_QUERY__NODE__NODE_TYPE_NAME = 190,
  PG_QUERY__NODE__NODE_COLUMN_DEF = 191,
  PG_QUERY__NODE__NODE_INDEX_ELEM = 192,
  PG_QUERY__NODE__NODE_STATS_ELEM = 193,
  PG_QUERY__NODE__NODE_CONSTRAINT = 194,
  PG_QUERY__NODE__NODE_DEF_ELEM = 195,
  PG_QUERY__NODE__NODE_RANGE_TBL_ENTRY = 196,
  PG_QUERY__NODE__NODE_RANGE_TBL_FUNCTION = 197,
  PG_QUERY__NODE__NODE_TABLE_SAMPLE_CLAUSE = 198,
  PG_QUERY__NODE__NODE_WITH_CHECK_OPTION = 199,
  PG_QUERY__NODE__NODE_SORT_GROUP_CLAUSE = 200,
  PG_QUERY__NODE__NODE_GROUPING_SET = 201,
  PG_QUERY__NODE__NODE_WINDOW_CLAUSE = 202,
  PG_QUERY__NODE__NODE_OBJECT_WITH_ARGS = 203,
  PG_QUERY__NODE__NODE_ACCESS_PRIV = 204,
  PG_QUERY__NODE__NODE_CREATE_OP_CLASS_ITEM = 205,
  PG_QUERY__NODE__NODE_TABLE_LIKE_CLAUSE = 206,
  PG_QUERY__NODE__NODE_FUNCTION_PARAMETER = 207,
  PG_QUERY__NODE__NODE_LOCKING_CLAUSE = 208,
  PG_QUERY__NODE__NODE_ROW_MARK_CLAUSE = 209,
  PG_QUERY__NODE__NODE_XML_SERIALIZE = 210,
  PG_QUERY__NODE__NODE_WITH_CLAUSE = 211,
  PG_QUERY__NODE__NODE_INFER_CLAUSE = 212,
  PG_QUERY__NODE__NODE_ON_CONFLICT_CLAUSE = 213,
  PG_QUERY__NODE__NODE_CTESEARCH_CLAUSE = 214,
  PG_QUERY__NODE__NODE_CTECYCLE_CLAUSE = 215,
  PG_QUERY__NODE__NODE_COMMON_TABLE_EXPR = 216,
  PG_QUERY__NODE__NODE_MERGE_WHEN_CLAUSE = 217,
  PG_QUERY__NODE__NODE_ROLE_SPEC = 218,
  PG_QUERY__NODE__NODE_TRIGGER_TRANSITION = 219,
  PG_QUERY__NODE__NODE_PARTITION_ELEM = 220,
  PG_QUERY__NODE__NODE_PARTITION_SPEC = 221,
  PG_QUERY__NODE__NODE_PARTITION_BOUND_SPEC = 222,
  PG_QUERY__NODE__NODE_PARTITION_RANGE_DATUM = 223,
  PG_QUERY__NODE__NODE_PARTITION_CMD = 224,
  PG_QUERY__NODE__NODE_VACUUM_RELATION = 225,
  PG_QUERY__NODE__NODE_PUBLICATION_OBJ_SPEC = 226,
  PG_QUERY__NODE__NODE_PUBLICATION_TABLE = 227,
  PG_QUERY__NODE__NODE_INLINE_CODE_BLOCK = 228,
  PG_QUERY__NODE__NODE_CALL_CONTEXT = 229,
  PG_QUERY__NODE__NODE_INTEGER = 230,
  PG_QUERY__NODE__NODE_FLOAT = 231,
  PG_QUERY__NODE__NODE_BOOLEAN = 232,
  PG_QUERY__NODE__NODE_STRING = 233,
  PG_QUERY__NODE__NODE_BIT_STRING = 234,
  PG_QUERY__NODE__NODE_LIST = 235,
  PG_QUERY__NODE__NODE_INT_LIST = 236,
  PG_QUERY__NODE__NODE_OID_LIST = 237,
  PG_QUERY__NODE__NODE_A_CONST = 238
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__NODE__NODE__CASE)
} PgQuery__Node__NodeCase;

struct  PgQuery__Node
{
  ProtobufCMessage base;
  PgQuery__Node__NodeCase node_case;
  union {
    PgQuery__Alias *alias;
    PgQuery__RangeVar *range_var;
    PgQuery__TableFunc *table_func;
    PgQuery__Var *var;
    PgQuery__Param *param;
    PgQuery__Aggref *aggref;
    PgQuery__GroupingFunc *grouping_func;
    PgQuery__WindowFunc *window_func;
    PgQuery__SubscriptingRef *subscripting_ref;
    PgQuery__FuncExpr *func_expr;
    PgQuery__NamedArgExpr *named_arg_expr;
    PgQuery__OpExpr *op_expr;
    PgQuery__DistinctExpr *distinct_expr;
    PgQuery__NullIfExpr *null_if_expr;
    PgQuery__ScalarArrayOpExpr *scalar_array_op_expr;
    PgQuery__BoolExpr *bool_expr;
    PgQuery__SubLink *sub_link;
    PgQuery__SubPlan *sub_plan;
    PgQuery__AlternativeSubPlan *alternative_sub_plan;
    PgQuery__FieldSelect *field_select;
    PgQuery__FieldStore *field_store;
    PgQuery__RelabelType *relabel_type;
    PgQuery__CoerceViaIO *coerce_via_io;
    PgQuery__ArrayCoerceExpr *array_coerce_expr;
    PgQuery__ConvertRowtypeExpr *convert_rowtype_expr;
    PgQuery__CollateExpr *collate_expr;
    PgQuery__CaseExpr *case_expr;
    PgQuery__CaseWhen *case_when;
    PgQuery__CaseTestExpr *case_test_expr;
    PgQuery__ArrayExpr *array_expr;
    PgQuery__RowExpr *row_expr;
    PgQuery__RowCompareExpr *row_compare_expr;
    PgQuery__CoalesceExpr *coalesce_expr;
    PgQuery__MinMaxExpr *min_max_expr;
    PgQuery__SQLValueFunction *sqlvalue_function;
    PgQuery__XmlExpr *xml_expr;
    PgQuery__NullTest *null_test;
    PgQuery__BooleanTest *boolean_test;
    PgQuery__CoerceToDomain *coerce_to_domain;
    PgQuery__CoerceToDomainValue *coerce_to_domain_value;
    PgQuery__SetToDefault *set_to_default;
    PgQuery__CurrentOfExpr *current_of_expr;
    PgQuery__NextValueExpr *next_value_expr;
    PgQuery__InferenceElem *inference_elem;
    PgQuery__TargetEntry *target_entry;
    PgQuery__RangeTblRef *range_tbl_ref;
    PgQuery__JoinExpr *join_expr;
    PgQuery__FromExpr *from_expr;
    PgQuery__OnConflictExpr *on_conflict_expr;
    PgQuery__IntoClause *into_clause;
    PgQuery__MergeAction *merge_action;
    PgQuery__RawStmt *raw_stmt;
    PgQuery__Query *query;
    PgQuery__InsertStmt *insert_stmt;
    PgQuery__DeleteStmt *delete_stmt;
    PgQuery__UpdateStmt *update_stmt;
    PgQuery__MergeStmt *merge_stmt;
    PgQuery__SelectStmt *select_stmt;
    PgQuery__ReturnStmt *return_stmt;
    PgQuery__PLAssignStmt *plassign_stmt;
    PgQuery__AlterTableStmt *alter_table_stmt;
    PgQuery__AlterTableCmd *alter_table_cmd;
    PgQuery__AlterDomainStmt *alter_domain_stmt;
    PgQuery__SetOperationStmt *set_operation_stmt;
    PgQuery__GrantStmt *grant_stmt;
    PgQuery__GrantRoleStmt *grant_role_stmt;
    PgQuery__AlterDefaultPrivilegesStmt *alter_default_privileges_stmt;
    PgQuery__ClosePortalStmt *close_portal_stmt;
    PgQuery__ClusterStmt *cluster_stmt;
    PgQuery__CopyStmt *copy_stmt;
    PgQuery__CreateStmt *create_stmt;
    PgQuery__DefineStmt *define_stmt;
    PgQuery__DropStmt *drop_stmt;
    PgQuery__TruncateStmt *truncate_stmt;
    PgQuery__CommentStmt *comment_stmt;
    PgQuery__FetchStmt *fetch_stmt;
    PgQuery__IndexStmt *index_stmt;
    PgQuery__CreateFunctionStmt *create_function_stmt;
    PgQuery__AlterFunctionStmt *alter_function_stmt;
    PgQuery__DoStmt *do_stmt;
    PgQuery__RenameStmt *rename_stmt;
    PgQuery__RuleStmt *rule_stmt;
    PgQuery__NotifyStmt *notify_stmt;
    PgQuery__ListenStmt *listen_stmt;
    PgQuery__UnlistenStmt *unlisten_stmt;
    PgQuery__TransactionStmt *transaction_stmt;
    PgQuery__ViewStmt *view_stmt;
    PgQuery__LoadStmt *load_stmt;
    PgQuery__CreateDomainStmt *create_domain_stmt;
    PgQuery__CreatedbStmt *createdb_stmt;
    PgQuery__DropdbStmt *dropdb_stmt;
    PgQuery__VacuumStmt *vacuum_stmt;
    PgQuery__ExplainStmt *explain_stmt;
    PgQuery__CreateTableAsStmt *create_table_as_stmt;
    PgQuery__CreateSeqStmt *create_seq_stmt;
    PgQuery__AlterSeqStmt *alter_seq_stmt;
    PgQuery__VariableSetStmt *variable_set_stmt;
    PgQuery__VariableShowStmt *variable_show_stmt;
    PgQuery__DiscardStmt *discard_stmt;
    PgQuery__CreateTrigStmt *create_trig_stmt;
    PgQuery__CreatePLangStmt *create_plang_stmt;
    PgQuery__CreateRoleStmt *create_role_stmt;
    PgQuery__AlterRoleStmt *alter_role_stmt;
    PgQuery__DropRoleStmt *drop_role_stmt;
    PgQuery__LockStmt *lock_stmt;
    PgQuery__ConstraintsSetStmt *constraints_set_stmt;
    PgQuery__ReindexStmt *reindex_stmt;
    PgQuery__CheckPointStmt *check_point_stmt;
    PgQuery__CreateSchemaStmt *create_schema_stmt;
    PgQuery__AlterDatabaseStmt *alter_database_stmt;
    PgQuery__AlterDatabaseRefreshCollStmt *alter_database_refresh_coll_stmt;
    PgQuery__AlterDatabaseSetStmt *alter_database_set_stmt;
    PgQuery__AlterRoleSetStmt *alter_role_set_stmt;
    PgQuery__CreateConversionStmt *create_conversion_stmt;
    PgQuery__CreateCastStmt *create_cast_stmt;
    PgQuery__CreateOpClassStmt *create_op_class_stmt;
    PgQuery__CreateOpFamilyStmt *create_op_family_stmt;
    PgQuery__AlterOpFamilyStmt *alter_op_family_stmt;
    PgQuery__PrepareStmt *prepare_stmt;
    PgQuery__ExecuteStmt *execute_stmt;
    PgQuery__DeallocateStmt *deallocate_stmt;
    PgQuery__DeclareCursorStmt *declare_cursor_stmt;
    PgQuery__CreateTableSpaceStmt *create_table_space_stmt;
    PgQuery__DropTableSpaceStmt *drop_table_space_stmt;
    PgQuery__AlterObjectDependsStmt *alter_object_depends_stmt;
    PgQuery__AlterObjectSchemaStmt *alter_object_schema_stmt;
    PgQuery__AlterOwnerStmt *alter_owner_stmt;
    PgQuery__AlterOperatorStmt *alter_operator_stmt;
    PgQuery__AlterTypeStmt *alter_type_stmt;
    PgQuery__DropOwnedStmt *drop_owned_stmt;
    PgQuery__ReassignOwnedStmt *reassign_owned_stmt;
    PgQuery__CompositeTypeStmt *composite_type_stmt;
    PgQuery__CreateEnumStmt *create_enum_stmt;
    PgQuery__CreateRangeStmt *create_range_stmt;
    PgQuery__AlterEnumStmt *alter_enum_stmt;
    PgQuery__AlterTSDictionaryStmt *alter_tsdictionary_stmt;
    PgQuery__AlterTSConfigurationStmt *alter_tsconfiguration_stmt;
    PgQuery__CreateFdwStmt *create_fdw_stmt;
    PgQuery__AlterFdwStmt *alter_fdw_stmt;
    PgQuery__CreateForeignServerStmt *create_foreign_server_stmt;
    PgQuery__AlterForeignServerStmt *alter_foreign_server_stmt;
    PgQuery__CreateUserMappingStmt *create_user_mapping_stmt;
    PgQuery__AlterUserMappingStmt *alter_user_mapping_stmt;
    PgQuery__DropUserMappingStmt *drop_user_mapping_stmt;
    PgQuery__AlterTableSpaceOptionsStmt *alter_table_space_options_stmt;
    PgQuery__AlterTableMoveAllStmt *alter_table_move_all_stmt;
    PgQuery__SecLabelStmt *sec_label_stmt;
    PgQuery__CreateForeignTableStmt *create_foreign_table_stmt;
    PgQuery__ImportForeignSchemaStmt *import_foreign_schema_stmt;
    PgQuery__CreateExtensionStmt *create_extension_stmt;
    PgQuery__AlterExtensionStmt *alter_extension_stmt;
    PgQuery__AlterExtensionContentsStmt *alter_extension_contents_stmt;
    PgQuery__CreateEventTrigStmt *create_event_trig_stmt;
    PgQuery__AlterEventTrigStmt *alter_event_trig_stmt;
    PgQuery__RefreshMatViewStmt *refresh_mat_view_stmt;
    PgQuery__ReplicaIdentityStmt *replica_identity_stmt;
    PgQuery__AlterSystemStmt *alter_system_stmt;
    PgQuery__CreatePolicyStmt *create_policy_stmt;
    PgQuery__AlterPolicyStmt *alter_policy_stmt;
    PgQuery__CreateTransformStmt *create_transform_stmt;
    PgQuery__CreateAmStmt *create_am_stmt;
    PgQuery__CreatePublicationStmt *create_publication_stmt;
    PgQuery__AlterPublicationStmt *alter_publication_stmt;
    PgQuery__CreateSubscriptionStmt *create_subscription_stmt;
    PgQuery__AlterSubscriptionStmt *alter_subscription_stmt;
    PgQuery__DropSubscriptionStmt *drop_subscription_stmt;
    PgQuery__CreateStatsStmt *create_stats_stmt;
    PgQuery__AlterCollationStmt *alter_collation_stmt;
    PgQuery__CallStmt *call_stmt;
    PgQuery__AlterStatsStmt *alter_stats_stmt;
    PgQuery__AExpr *a_expr;
    PgQuery__ColumnRef *column_ref;
    PgQuery__ParamRef *param_ref;
    PgQuery__FuncCall *func_call;
    PgQuery__AStar *a_star;
    PgQuery__AIndices *a_indices;
    PgQuery__AIndirection *a_indirection;
    PgQuery__AArrayExpr *a_array_expr;
    PgQuery__ResTarget *res_target;
    PgQuery__MultiAssignRef *multi_assign_ref;
    PgQuery__TypeCast *type_cast;
    PgQuery__CollateClause *collate_clause;
    PgQuery__SortBy *sort_by;
    PgQuery__WindowDef *window_def;
    PgQuery__RangeSubselect *range_subselect;
    PgQuery__RangeFunction *range_function;
    PgQuery__RangeTableSample *range_table_sample;
    PgQuery__RangeTableFunc *range_table_func;
    PgQuery__RangeTableFuncCol *range_table_func_col;
    PgQuery__TypeName *type_name;
    PgQuery__ColumnDef *column_def;
    PgQuery__IndexElem *index_elem;
    PgQuery__StatsElem *stats_elem;
    PgQuery__Constraint *constraint;
    PgQuery__DefElem *def_elem;
    PgQuery__RangeTblEntry *range_tbl_entry;
    PgQuery__RangeTblFunction *range_tbl_function;
    PgQuery__TableSampleClause *table_sample_clause;
    PgQuery__WithCheckOption *with_check_option;
    PgQuery__SortGroupClause *sort_group_clause;
    PgQuery__GroupingSet *grouping_set;
    PgQuery__WindowClause *window_clause;
    PgQuery__ObjectWithArgs *object_with_args;
    PgQuery__AccessPriv *access_priv;
    PgQuery__CreateOpClassItem *create_op_class_item;
    PgQuery__TableLikeClause *table_like_clause;
    PgQuery__FunctionParameter *function_parameter;
    PgQuery__LockingClause *locking_clause;
    PgQuery__RowMarkClause *row_mark_clause;
    PgQuery__XmlSerialize *xml_serialize;
    PgQuery__WithClause *with_clause;
    PgQuery__InferClause *infer_clause;
    PgQuery__OnConflictClause *on_conflict_clause;
    PgQuery__CTESearchClause *ctesearch_clause;
    PgQuery__CTECycleClause *ctecycle_clause;
    PgQuery__CommonTableExpr *common_table_expr;
    PgQuery__MergeWhenClause *merge_when_clause;
    PgQuery__RoleSpec *role_spec;
    PgQuery__TriggerTransition *trigger_transition;
    PgQuery__PartitionElem *partition_elem;
    PgQuery__PartitionSpec *partition_spec;
    PgQuery__PartitionBoundSpec *partition_bound_spec;
    PgQuery__PartitionRangeDatum *partition_range_datum;
    PgQuery__PartitionCmd *partition_cmd;
    PgQuery__VacuumRelation *vacuum_relation;
    PgQuery__PublicationObjSpec *publication_obj_spec;
    PgQuery__PublicationTable *publication_table;
    PgQuery__InlineCodeBlock *inline_code_block;
    PgQuery__CallContext *call_context;
    PgQuery__Integer *integer;
    PgQuery__Float *float_;
    PgQuery__Boolean *boolean;
    PgQuery__String *string;
    PgQuery__BitString *bit_string;
    PgQuery__List *list;
    PgQuery__IntList *int_list;
    PgQuery__OidList *oid_list;
    PgQuery__AConst *a_const;
  };
};
#define PG_QUERY__NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__node__descriptor) \
    , PG_QUERY__NODE__NODE__NOT_SET, {0} }


struct  PgQuery__Integer
{
  ProtobufCMessage base;
  /*
   * machine integer 
   */
  int32_t ival;
};
#define PG_QUERY__INTEGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__integer__descriptor) \
    , 0 }


struct  PgQuery__Float
{
  ProtobufCMessage base;
  /*
   * string 
   */
  char *fval;
};
#define PG_QUERY__FLOAT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__float__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  PgQuery__Boolean
{
  ProtobufCMessage base;
  protobuf_c_boolean boolval;
};
#define PG_QUERY__BOOLEAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__boolean__descriptor) \
    , 0 }


struct  PgQuery__String
{
  ProtobufCMessage base;
  /*
   * string 
   */
  char *sval;
};
#define PG_QUERY__STRING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__string__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  PgQuery__BitString
{
  ProtobufCMessage base;
  /*
   * string 
   */
  char *bsval;
};
#define PG_QUERY__BIT_STRING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__bit_string__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  PgQuery__List
{
  ProtobufCMessage base;
  size_t n_items;
  PgQuery__Node **items;
};
#define PG_QUERY__LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__list__descriptor) \
    , 0,NULL }


struct  PgQuery__OidList
{
  ProtobufCMessage base;
  size_t n_items;
  PgQuery__Node **items;
};
#define PG_QUERY__OID_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__oid_list__descriptor) \
    , 0,NULL }


struct  PgQuery__IntList
{
  ProtobufCMessage base;
  size_t n_items;
  PgQuery__Node **items;
};
#define PG_QUERY__INT_LIST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__int_list__descriptor) \
    , 0,NULL }


typedef enum {
  PG_QUERY__A__CONST__VAL__NOT_SET = 0,
  PG_QUERY__A__CONST__VAL_IVAL = 1,
  PG_QUERY__A__CONST__VAL_FVAL = 2,
  PG_QUERY__A__CONST__VAL_BOOLVAL = 3,
  PG_QUERY__A__CONST__VAL_SVAL = 4,
  PG_QUERY__A__CONST__VAL_BSVAL = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PG_QUERY__A__CONST__VAL__CASE)
} PgQuery__AConst__ValCase;

struct  PgQuery__AConst
{
  ProtobufCMessage base;
  protobuf_c_boolean isnull;
  int32_t location;
  PgQuery__AConst__ValCase val_case;
  union {
    PgQuery__Integer *ival;
    PgQuery__Float *fval;
    PgQuery__Boolean *boolval;
    PgQuery__String *sval;
    PgQuery__BitString *bsval;
  };
};
#define PG_QUERY__A__CONST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__a__const__descriptor) \
    , 0, 0, PG_QUERY__A__CONST__VAL__NOT_SET, {0} }


struct  PgQuery__Alias
{
  ProtobufCMessage base;
  char *aliasname;
  size_t n_colnames;
  PgQuery__Node **colnames;
};
#define PG_QUERY__ALIAS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alias__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


struct  PgQuery__RangeVar
{
  ProtobufCMessage base;
  char *catalogname;
  char *schemaname;
  char *relname;
  protobuf_c_boolean inh;
  char *relpersistence;
  PgQuery__Alias *alias;
  int32_t location;
};
#define PG_QUERY__RANGE_VAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__range_var__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, NULL, 0 }


struct  PgQuery__TableFunc
{
  ProtobufCMessage base;
  size_t n_ns_uris;
  PgQuery__Node **ns_uris;
  size_t n_ns_names;
  PgQuery__Node **ns_names;
  PgQuery__Node *docexpr;
  PgQuery__Node *rowexpr;
  size_t n_colnames;
  PgQuery__Node **colnames;
  size_t n_coltypes;
  PgQuery__Node **coltypes;
  size_t n_coltypmods;
  PgQuery__Node **coltypmods;
  size_t n_colcollations;
  PgQuery__Node **colcollations;
  size_t n_colexprs;
  PgQuery__Node **colexprs;
  size_t n_coldefexprs;
  PgQuery__Node **coldefexprs;
  size_t n_notnulls;
  uint64_t *notnulls;
  int32_t ordinalitycol;
  int32_t location;
};
#define PG_QUERY__TABLE_FUNC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__table_func__descriptor) \
    , 0,NULL, 0,NULL, NULL, NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0 }


struct  PgQuery__Var
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  int32_t varno;
  int32_t varattno;
  uint32_t vartype;
  int32_t vartypmod;
  uint32_t varcollid;
  uint32_t varlevelsup;
  uint32_t varnosyn;
  int32_t varattnosyn;
  int32_t location;
};
#define PG_QUERY__VAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__var__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  PgQuery__Param
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__ParamKind paramkind;
  int32_t paramid;
  uint32_t paramtype;
  int32_t paramtypmod;
  uint32_t paramcollid;
  int32_t location;
};
#define PG_QUERY__PARAM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__param__descriptor) \
    , NULL, PG_QUERY__PARAM_KIND__PARAM_KIND_UNDEFINED, 0, 0, 0, 0, 0 }


struct  PgQuery__Aggref
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t aggfnoid;
  uint32_t aggtype;
  uint32_t aggcollid;
  uint32_t inputcollid;
  uint32_t aggtranstype;
  size_t n_aggargtypes;
  PgQuery__Node **aggargtypes;
  size_t n_aggdirectargs;
  PgQuery__Node **aggdirectargs;
  size_t n_args;
  PgQuery__Node **args;
  size_t n_aggorder;
  PgQuery__Node **aggorder;
  size_t n_aggdistinct;
  PgQuery__Node **aggdistinct;
  PgQuery__Node *aggfilter;
  protobuf_c_boolean aggstar;
  protobuf_c_boolean aggvariadic;
  char *aggkind;
  uint32_t agglevelsup;
  PgQuery__AggSplit aggsplit;
  int32_t aggno;
  int32_t aggtransno;
  int32_t location;
};
#define PG_QUERY__AGGREF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__aggref__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL, 0, 0, (char *)protobuf_c_empty_string, 0, PG_QUERY__AGG_SPLIT__AGG_SPLIT_UNDEFINED, 0, 0, 0 }


struct  PgQuery__GroupingFunc
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  size_t n_args;
  PgQuery__Node **args;
  size_t n_refs;
  PgQuery__Node **refs;
  size_t n_cols;
  PgQuery__Node **cols;
  uint32_t agglevelsup;
  int32_t location;
};
#define PG_QUERY__GROUPING_FUNC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__grouping_func__descriptor) \
    , NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0 }


struct  PgQuery__WindowFunc
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t winfnoid;
  uint32_t wintype;
  uint32_t wincollid;
  uint32_t inputcollid;
  size_t n_args;
  PgQuery__Node **args;
  PgQuery__Node *aggfilter;
  uint32_t winref;
  protobuf_c_boolean winstar;
  protobuf_c_boolean winagg;
  int32_t location;
};
#define PG_QUERY__WINDOW_FUNC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__window_func__descriptor) \
    , NULL, 0, 0, 0, 0, 0,NULL, NULL, 0, 0, 0, 0 }


struct  PgQuery__SubscriptingRef
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t refcontainertype;
  uint32_t refelemtype;
  uint32_t refrestype;
  int32_t reftypmod;
  uint32_t refcollid;
  size_t n_refupperindexpr;
  PgQuery__Node **refupperindexpr;
  size_t n_reflowerindexpr;
  PgQuery__Node **reflowerindexpr;
  PgQuery__Node *refexpr;
  PgQuery__Node *refassgnexpr;
};
#define PG_QUERY__SUBSCRIPTING_REF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__subscripting_ref__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, NULL, NULL }


struct  PgQuery__FuncExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t funcid;
  uint32_t funcresulttype;
  protobuf_c_boolean funcretset;
  protobuf_c_boolean funcvariadic;
  PgQuery__CoercionForm funcformat;
  uint32_t funccollid;
  uint32_t inputcollid;
  size_t n_args;
  PgQuery__Node **args;
  int32_t location;
};
#define PG_QUERY__FUNC_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__func_expr__descriptor) \
    , NULL, 0, 0, 0, 0, PG_QUERY__COERCION_FORM__COERCION_FORM_UNDEFINED, 0, 0, 0,NULL, 0 }


struct  PgQuery__NamedArgExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *arg;
  char *name;
  int32_t argnumber;
  int32_t location;
};
#define PG_QUERY__NAMED_ARG_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__named_arg_expr__descriptor) \
    , NULL, NULL, (char *)protobuf_c_empty_string, 0, 0 }


struct  PgQuery__OpExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t opno;
  uint32_t opfuncid;
  uint32_t opresulttype;
  protobuf_c_boolean opretset;
  uint32_t opcollid;
  uint32_t inputcollid;
  size_t n_args;
  PgQuery__Node **args;
  int32_t location;
};
#define PG_QUERY__OP_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__op_expr__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0 }


struct  PgQuery__DistinctExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t opno;
  uint32_t opfuncid;
  uint32_t opresulttype;
  protobuf_c_boolean opretset;
  uint32_t opcollid;
  uint32_t inputcollid;
  size_t n_args;
  PgQuery__Node **args;
  int32_t location;
};
#define PG_QUERY__DISTINCT_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__distinct_expr__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0 }


struct  PgQuery__NullIfExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t opno;
  uint32_t opfuncid;
  uint32_t opresulttype;
  protobuf_c_boolean opretset;
  uint32_t opcollid;
  uint32_t inputcollid;
  size_t n_args;
  PgQuery__Node **args;
  int32_t location;
};
#define PG_QUERY__NULL_IF_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__null_if_expr__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0 }


struct  PgQuery__ScalarArrayOpExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t opno;
  uint32_t opfuncid;
  uint32_t hashfuncid;
  uint32_t negfuncid;
  protobuf_c_boolean use_or;
  uint32_t inputcollid;
  size_t n_args;
  PgQuery__Node **args;
  int32_t location;
};
#define PG_QUERY__SCALAR_ARRAY_OP_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__scalar_array_op_expr__descriptor) \
    , NULL, 0, 0, 0, 0, 0, 0, 0,NULL, 0 }


struct  PgQuery__BoolExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__BoolExprType boolop;
  size_t n_args;
  PgQuery__Node **args;
  int32_t location;
};
#define PG_QUERY__BOOL_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__bool_expr__descriptor) \
    , NULL, PG_QUERY__BOOL_EXPR_TYPE__BOOL_EXPR_TYPE_UNDEFINED, 0,NULL, 0 }


struct  PgQuery__SubLink
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__SubLinkType sub_link_type;
  int32_t sub_link_id;
  PgQuery__Node *testexpr;
  size_t n_oper_name;
  PgQuery__Node **oper_name;
  PgQuery__Node *subselect;
  int32_t location;
};
#define PG_QUERY__SUB_LINK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__sub_link__descriptor) \
    , NULL, PG_QUERY__SUB_LINK_TYPE__SUB_LINK_TYPE_UNDEFINED, 0, NULL, 0,NULL, NULL, 0 }


struct  PgQuery__SubPlan
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__SubLinkType sub_link_type;
  PgQuery__Node *testexpr;
  size_t n_param_ids;
  PgQuery__Node **param_ids;
  int32_t plan_id;
  char *plan_name;
  uint32_t first_col_type;
  int32_t first_col_typmod;
  uint32_t first_col_collation;
  protobuf_c_boolean use_hash_table;
  protobuf_c_boolean unknown_eq_false;
  protobuf_c_boolean parallel_safe;
  size_t n_set_param;
  PgQuery__Node **set_param;
  size_t n_par_param;
  PgQuery__Node **par_param;
  size_t n_args;
  PgQuery__Node **args;
  double startup_cost;
  double per_call_cost;
};
#define PG_QUERY__SUB_PLAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__sub_plan__descriptor) \
    , NULL, PG_QUERY__SUB_LINK_TYPE__SUB_LINK_TYPE_UNDEFINED, NULL, 0,NULL, 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0, 0 }


struct  PgQuery__AlternativeSubPlan
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  size_t n_subplans;
  PgQuery__Node **subplans;
};
#define PG_QUERY__ALTERNATIVE_SUB_PLAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alternative_sub_plan__descriptor) \
    , NULL, 0,NULL }


struct  PgQuery__FieldSelect
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *arg;
  int32_t fieldnum;
  uint32_t resulttype;
  int32_t resulttypmod;
  uint32_t resultcollid;
};
#define PG_QUERY__FIELD_SELECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__field_select__descriptor) \
    , NULL, NULL, 0, 0, 0, 0 }


struct  PgQuery__FieldStore
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *arg;
  size_t n_newvals;
  PgQuery__Node **newvals;
  size_t n_fieldnums;
  PgQuery__Node **fieldnums;
  uint32_t resulttype;
};
#define PG_QUERY__FIELD_STORE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__field_store__descriptor) \
    , NULL, NULL, 0,NULL, 0,NULL, 0 }


struct  PgQuery__RelabelType
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *arg;
  uint32_t resulttype;
  int32_t resulttypmod;
  uint32_t resultcollid;
  PgQuery__CoercionForm relabelformat;
  int32_t location;
};
#define PG_QUERY__RELABEL_TYPE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__relabel_type__descriptor) \
    , NULL, NULL, 0, 0, 0, PG_QUERY__COERCION_FORM__COERCION_FORM_UNDEFINED, 0 }


struct  PgQuery__CoerceViaIO
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *arg;
  uint32_t resulttype;
  uint32_t resultcollid;
  PgQuery__CoercionForm coerceformat;
  int32_t location;
};
#define PG_QUERY__COERCE_VIA_IO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__coerce_via_io__descriptor) \
    , NULL, NULL, 0, 0, PG_QUERY__COERCION_FORM__COERCION_FORM_UNDEFINED, 0 }


struct  PgQuery__ArrayCoerceExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *arg;
  PgQuery__Node *elemexpr;
  uint32_t resulttype;
  int32_t resulttypmod;
  uint32_t resultcollid;
  PgQuery__CoercionForm coerceformat;
  int32_t location;
};
#define PG_QUERY__ARRAY_COERCE_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__array_coerce_expr__descriptor) \
    , NULL, NULL, NULL, 0, 0, 0, PG_QUERY__COERCION_FORM__COERCION_FORM_UNDEFINED, 0 }


struct  PgQuery__ConvertRowtypeExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *arg;
  uint32_t resulttype;
  PgQuery__CoercionForm convertformat;
  int32_t location;
};
#define PG_QUERY__CONVERT_ROWTYPE_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__convert_rowtype_expr__descriptor) \
    , NULL, NULL, 0, PG_QUERY__COERCION_FORM__COERCION_FORM_UNDEFINED, 0 }


struct  PgQuery__CollateExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *arg;
  uint32_t coll_oid;
  int32_t location;
};
#define PG_QUERY__COLLATE_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__collate_expr__descriptor) \
    , NULL, NULL, 0, 0 }


struct  PgQuery__CaseExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t casetype;
  uint32_t casecollid;
  PgQuery__Node *arg;
  size_t n_args;
  PgQuery__Node **args;
  PgQuery__Node *defresult;
  int32_t location;
};
#define PG_QUERY__CASE_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__case_expr__descriptor) \
    , NULL, 0, 0, NULL, 0,NULL, NULL, 0 }


struct  PgQuery__CaseWhen
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *expr;
  PgQuery__Node *result;
  int32_t location;
};
#define PG_QUERY__CASE_WHEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__case_when__descriptor) \
    , NULL, NULL, NULL, 0 }


struct  PgQuery__CaseTestExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t type_id;
  int32_t type_mod;
  uint32_t collation;
};
#define PG_QUERY__CASE_TEST_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__case_test_expr__descriptor) \
    , NULL, 0, 0, 0 }


struct  PgQuery__ArrayExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t array_typeid;
  uint32_t array_collid;
  uint32_t element_typeid;
  size_t n_elements;
  PgQuery__Node **elements;
  protobuf_c_boolean multidims;
  int32_t location;
};
#define PG_QUERY__ARRAY_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__array_expr__descriptor) \
    , NULL, 0, 0, 0, 0,NULL, 0, 0 }


struct  PgQuery__RowExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  size_t n_args;
  PgQuery__Node **args;
  uint32_t row_typeid;
  PgQuery__CoercionForm row_format;
  size_t n_colnames;
  PgQuery__Node **colnames;
  int32_t location;
};
#define PG_QUERY__ROW_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__row_expr__descriptor) \
    , NULL, 0,NULL, 0, PG_QUERY__COERCION_FORM__COERCION_FORM_UNDEFINED, 0,NULL, 0 }


struct  PgQuery__RowCompareExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__RowCompareType rctype;
  size_t n_opnos;
  PgQuery__Node **opnos;
  size_t n_opfamilies;
  PgQuery__Node **opfamilies;
  size_t n_inputcollids;
  PgQuery__Node **inputcollids;
  size_t n_largs;
  PgQuery__Node **largs;
  size_t n_rargs;
  PgQuery__Node **rargs;
};
#define PG_QUERY__ROW_COMPARE_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__row_compare_expr__descriptor) \
    , NULL, PG_QUERY__ROW_COMPARE_TYPE__ROW_COMPARE_TYPE_UNDEFINED, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  PgQuery__CoalesceExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t coalescetype;
  uint32_t coalescecollid;
  size_t n_args;
  PgQuery__Node **args;
  int32_t location;
};
#define PG_QUERY__COALESCE_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__coalesce_expr__descriptor) \
    , NULL, 0, 0, 0,NULL, 0 }


struct  PgQuery__MinMaxExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t minmaxtype;
  uint32_t minmaxcollid;
  uint32_t inputcollid;
  PgQuery__MinMaxOp op;
  size_t n_args;
  PgQuery__Node **args;
  int32_t location;
};
#define PG_QUERY__MIN_MAX_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__min_max_expr__descriptor) \
    , NULL, 0, 0, 0, PG_QUERY__MIN_MAX_OP__MIN_MAX_OP_UNDEFINED, 0,NULL, 0 }


struct  PgQuery__SQLValueFunction
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__SQLValueFunctionOp op;
  uint32_t type;
  int32_t typmod;
  int32_t location;
};
#define PG_QUERY__SQLVALUE_FUNCTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__sqlvalue_function__descriptor) \
    , NULL, PG_QUERY__SQLVALUE_FUNCTION_OP__SQLVALUE_FUNCTION_OP_UNDEFINED, 0, 0, 0 }


struct  PgQuery__XmlExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__XmlExprOp op;
  char *name;
  size_t n_named_args;
  PgQuery__Node **named_args;
  size_t n_arg_names;
  PgQuery__Node **arg_names;
  size_t n_args;
  PgQuery__Node **args;
  PgQuery__XmlOptionType xmloption;
  uint32_t type;
  int32_t typmod;
  int32_t location;
};
#define PG_QUERY__XML_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__xml_expr__descriptor) \
    , NULL, PG_QUERY__XML_EXPR_OP__XML_EXPR_OP_UNDEFINED, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, PG_QUERY__XML_OPTION_TYPE__XML_OPTION_TYPE_UNDEFINED, 0, 0, 0 }


struct  PgQuery__NullTest
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *arg;
  PgQuery__NullTestType nulltesttype;
  protobuf_c_boolean argisrow;
  int32_t location;
};
#define PG_QUERY__NULL_TEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__null_test__descriptor) \
    , NULL, NULL, PG_QUERY__NULL_TEST_TYPE__NULL_TEST_TYPE_UNDEFINED, 0, 0 }


struct  PgQuery__BooleanTest
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *arg;
  PgQuery__BoolTestType booltesttype;
  int32_t location;
};
#define PG_QUERY__BOOLEAN_TEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__boolean_test__descriptor) \
    , NULL, NULL, PG_QUERY__BOOL_TEST_TYPE__BOOL_TEST_TYPE_UNDEFINED, 0 }


struct  PgQuery__CoerceToDomain
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *arg;
  uint32_t resulttype;
  int32_t resulttypmod;
  uint32_t resultcollid;
  PgQuery__CoercionForm coercionformat;
  int32_t location;
};
#define PG_QUERY__COERCE_TO_DOMAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__coerce_to_domain__descriptor) \
    , NULL, NULL, 0, 0, 0, PG_QUERY__COERCION_FORM__COERCION_FORM_UNDEFINED, 0 }


struct  PgQuery__CoerceToDomainValue
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t type_id;
  int32_t type_mod;
  uint32_t collation;
  int32_t location;
};
#define PG_QUERY__COERCE_TO_DOMAIN_VALUE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__coerce_to_domain_value__descriptor) \
    , NULL, 0, 0, 0, 0 }


struct  PgQuery__SetToDefault
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t type_id;
  int32_t type_mod;
  uint32_t collation;
  int32_t location;
};
#define PG_QUERY__SET_TO_DEFAULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__set_to_default__descriptor) \
    , NULL, 0, 0, 0, 0 }


struct  PgQuery__CurrentOfExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t cvarno;
  char *cursor_name;
  int32_t cursor_param;
};
#define PG_QUERY__CURRENT_OF_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__current_of_expr__descriptor) \
    , NULL, 0, (char *)protobuf_c_empty_string, 0 }


struct  PgQuery__NextValueExpr
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  uint32_t seqid;
  uint32_t type_id;
};
#define PG_QUERY__NEXT_VALUE_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__next_value_expr__descriptor) \
    , NULL, 0, 0 }


struct  PgQuery__InferenceElem
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *expr;
  uint32_t infercollid;
  uint32_t inferopclass;
};
#define PG_QUERY__INFERENCE_ELEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__inference_elem__descriptor) \
    , NULL, NULL, 0, 0 }


struct  PgQuery__TargetEntry
{
  ProtobufCMessage base;
  PgQuery__Node *xpr;
  PgQuery__Node *expr;
  int32_t resno;
  char *resname;
  uint32_t ressortgroupref;
  uint32_t resorigtbl;
  int32_t resorigcol;
  protobuf_c_boolean resjunk;
};
#define PG_QUERY__TARGET_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__target_entry__descriptor) \
    , NULL, NULL, 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0 }


struct  PgQuery__RangeTblRef
{
  ProtobufCMessage base;
  int32_t rtindex;
};
#define PG_QUERY__RANGE_TBL_REF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__range_tbl_ref__descriptor) \
    , 0 }


struct  PgQuery__JoinExpr
{
  ProtobufCMessage base;
  PgQuery__JoinType jointype;
  protobuf_c_boolean is_natural;
  PgQuery__Node *larg;
  PgQuery__Node *rarg;
  size_t n_using_clause;
  PgQuery__Node **using_clause;
  PgQuery__Alias *join_using_alias;
  PgQuery__Node *quals;
  PgQuery__Alias *alias;
  int32_t rtindex;
};
#define PG_QUERY__JOIN_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__join_expr__descriptor) \
    , PG_QUERY__JOIN_TYPE__JOIN_TYPE_UNDEFINED, 0, NULL, NULL, 0,NULL, NULL, NULL, NULL, 0 }


struct  PgQuery__FromExpr
{
  ProtobufCMessage base;
  size_t n_fromlist;
  PgQuery__Node **fromlist;
  PgQuery__Node *quals;
};
#define PG_QUERY__FROM_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__from_expr__descriptor) \
    , 0,NULL, NULL }


struct  PgQuery__OnConflictExpr
{
  ProtobufCMessage base;
  PgQuery__OnConflictAction action;
  size_t n_arbiter_elems;
  PgQuery__Node **arbiter_elems;
  PgQuery__Node *arbiter_where;
  uint32_t constraint;
  size_t n_on_conflict_set;
  PgQuery__Node **on_conflict_set;
  PgQuery__Node *on_conflict_where;
  int32_t excl_rel_index;
  size_t n_excl_rel_tlist;
  PgQuery__Node **excl_rel_tlist;
};
#define PG_QUERY__ON_CONFLICT_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__on_conflict_expr__descriptor) \
    , PG_QUERY__ON_CONFLICT_ACTION__ON_CONFLICT_ACTION_UNDEFINED, 0,NULL, NULL, 0, 0,NULL, NULL, 0, 0,NULL }


struct  PgQuery__IntoClause
{
  ProtobufCMessage base;
  PgQuery__RangeVar *rel;
  size_t n_col_names;
  PgQuery__Node **col_names;
  char *access_method;
  size_t n_options;
  PgQuery__Node **options;
  PgQuery__OnCommitAction on_commit;
  char *table_space_name;
  PgQuery__Node *view_query;
  protobuf_c_boolean skip_data;
};
#define PG_QUERY__INTO_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__into_clause__descriptor) \
    , NULL, 0,NULL, (char *)protobuf_c_empty_string, 0,NULL, PG_QUERY__ON_COMMIT_ACTION__ON_COMMIT_ACTION_UNDEFINED, (char *)protobuf_c_empty_string, NULL, 0 }


struct  PgQuery__MergeAction
{
  ProtobufCMessage base;
  protobuf_c_boolean matched;
  PgQuery__CmdType command_type;
  PgQuery__OverridingKind override;
  PgQuery__Node *qual;
  size_t n_target_list;
  PgQuery__Node **target_list;
  size_t n_update_colnos;
  PgQuery__Node **update_colnos;
};
#define PG_QUERY__MERGE_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__merge_action__descriptor) \
    , 0, PG_QUERY__CMD_TYPE__CMD_TYPE_UNDEFINED, PG_QUERY__OVERRIDING_KIND__OVERRIDING_KIND_UNDEFINED, NULL, 0,NULL, 0,NULL }


struct  PgQuery__RawStmt
{
  ProtobufCMessage base;
  PgQuery__Node *stmt;
  int32_t stmt_location;
  int32_t stmt_len;
};
#define PG_QUERY__RAW_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__raw_stmt__descriptor) \
    , NULL, 0, 0 }


struct  PgQuery__Query
{
  ProtobufCMessage base;
  PgQuery__CmdType command_type;
  PgQuery__QuerySource query_source;
  protobuf_c_boolean can_set_tag;
  PgQuery__Node *utility_stmt;
  int32_t result_relation;
  protobuf_c_boolean has_aggs;
  protobuf_c_boolean has_window_funcs;
  protobuf_c_boolean has_target_srfs;
  protobuf_c_boolean has_sub_links;
  protobuf_c_boolean has_distinct_on;
  protobuf_c_boolean has_recursive;
  protobuf_c_boolean has_modifying_cte;
  protobuf_c_boolean has_for_update;
  protobuf_c_boolean has_row_security;
  protobuf_c_boolean is_return;
  size_t n_cte_list;
  PgQuery__Node **cte_list;
  size_t n_rtable;
  PgQuery__Node **rtable;
  PgQuery__FromExpr *jointree;
  size_t n_merge_action_list;
  PgQuery__Node **merge_action_list;
  protobuf_c_boolean merge_use_outer_join;
  size_t n_target_list;
  PgQuery__Node **target_list;
  PgQuery__OverridingKind override;
  PgQuery__OnConflictExpr *on_conflict;
  size_t n_returning_list;
  PgQuery__Node **returning_list;
  size_t n_group_clause;
  PgQuery__Node **group_clause;
  protobuf_c_boolean group_distinct;
  size_t n_grouping_sets;
  PgQuery__Node **grouping_sets;
  PgQuery__Node *having_qual;
  size_t n_window_clause;
  PgQuery__Node **window_clause;
  size_t n_distinct_clause;
  PgQuery__Node **distinct_clause;
  size_t n_sort_clause;
  PgQuery__Node **sort_clause;
  PgQuery__Node *limit_offset;
  PgQuery__Node *limit_count;
  PgQuery__LimitOption limit_option;
  size_t n_row_marks;
  PgQuery__Node **row_marks;
  PgQuery__Node *set_operations;
  size_t n_constraint_deps;
  PgQuery__Node **constraint_deps;
  size_t n_with_check_options;
  PgQuery__Node **with_check_options;
  int32_t stmt_location;
  int32_t stmt_len;
};
#define PG_QUERY__QUERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__query__descriptor) \
    , PG_QUERY__CMD_TYPE__CMD_TYPE_UNDEFINED, PG_QUERY__QUERY_SOURCE__QUERY_SOURCE_UNDEFINED, 0, NULL, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, NULL, 0,NULL, 0, 0,NULL, PG_QUERY__OVERRIDING_KIND__OVERRIDING_KIND_UNDEFINED, NULL, 0,NULL, 0,NULL, 0, 0,NULL, NULL, 0,NULL, 0,NULL, 0,NULL, NULL, NULL, PG_QUERY__LIMIT_OPTION__LIMIT_OPTION_UNDEFINED, 0,NULL, NULL, 0,NULL, 0,NULL, 0, 0 }


struct  PgQuery__InsertStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *relation;
  size_t n_cols;
  PgQuery__Node **cols;
  PgQuery__Node *select_stmt;
  PgQuery__OnConflictClause *on_conflict_clause;
  size_t n_returning_list;
  PgQuery__Node **returning_list;
  PgQuery__WithClause *with_clause;
  PgQuery__OverridingKind override;
};
#define PG_QUERY__INSERT_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__insert_stmt__descriptor) \
    , NULL, 0,NULL, NULL, NULL, 0,NULL, NULL, PG_QUERY__OVERRIDING_KIND__OVERRIDING_KIND_UNDEFINED }


struct  PgQuery__DeleteStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *relation;
  size_t n_using_clause;
  PgQuery__Node **using_clause;
  PgQuery__Node *where_clause;
  size_t n_returning_list;
  PgQuery__Node **returning_list;
  PgQuery__WithClause *with_clause;
};
#define PG_QUERY__DELETE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__delete_stmt__descriptor) \
    , NULL, 0,NULL, NULL, 0,NULL, NULL }


struct  PgQuery__UpdateStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *relation;
  size_t n_target_list;
  PgQuery__Node **target_list;
  PgQuery__Node *where_clause;
  size_t n_from_clause;
  PgQuery__Node **from_clause;
  size_t n_returning_list;
  PgQuery__Node **returning_list;
  PgQuery__WithClause *with_clause;
};
#define PG_QUERY__UPDATE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__update_stmt__descriptor) \
    , NULL, 0,NULL, NULL, 0,NULL, 0,NULL, NULL }


struct  PgQuery__MergeStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *relation;
  PgQuery__Node *source_relation;
  PgQuery__Node *join_condition;
  size_t n_merge_when_clauses;
  PgQuery__Node **merge_when_clauses;
  PgQuery__WithClause *with_clause;
};
#define PG_QUERY__MERGE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__merge_stmt__descriptor) \
    , NULL, NULL, NULL, 0,NULL, NULL }


struct  PgQuery__SelectStmt
{
  ProtobufCMessage base;
  size_t n_distinct_clause;
  PgQuery__Node **distinct_clause;
  PgQuery__IntoClause *into_clause;
  size_t n_target_list;
  PgQuery__Node **target_list;
  size_t n_from_clause;
  PgQuery__Node **from_clause;
  PgQuery__Node *where_clause;
  size_t n_group_clause;
  PgQuery__Node **group_clause;
  protobuf_c_boolean group_distinct;
  PgQuery__Node *having_clause;
  size_t n_window_clause;
  PgQuery__Node **window_clause;
  size_t n_values_lists;
  PgQuery__Node **values_lists;
  size_t n_sort_clause;
  PgQuery__Node **sort_clause;
  PgQuery__Node *limit_offset;
  PgQuery__Node *limit_count;
  PgQuery__LimitOption limit_option;
  size_t n_locking_clause;
  PgQuery__Node **locking_clause;
  PgQuery__WithClause *with_clause;
  PgQuery__SetOperation op;
  protobuf_c_boolean all;
  PgQuery__SelectStmt *larg;
  PgQuery__SelectStmt *rarg;
};
#define PG_QUERY__SELECT_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__select_stmt__descriptor) \
    , 0,NULL, NULL, 0,NULL, 0,NULL, NULL, 0,NULL, 0, NULL, 0,NULL, 0,NULL, 0,NULL, NULL, NULL, PG_QUERY__LIMIT_OPTION__LIMIT_OPTION_UNDEFINED, 0,NULL, NULL, PG_QUERY__SET_OPERATION__SET_OPERATION_UNDEFINED, 0, NULL, NULL }


struct  PgQuery__ReturnStmt
{
  ProtobufCMessage base;
  PgQuery__Node *returnval;
};
#define PG_QUERY__RETURN_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__return_stmt__descriptor) \
    , NULL }


struct  PgQuery__PLAssignStmt
{
  ProtobufCMessage base;
  char *name;
  size_t n_indirection;
  PgQuery__Node **indirection;
  int32_t nnames;
  PgQuery__SelectStmt *val;
  int32_t location;
};
#define PG_QUERY__PLASSIGN_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__plassign_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0, NULL, 0 }


struct  PgQuery__AlterTableStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *relation;
  size_t n_cmds;
  PgQuery__Node **cmds;
  PgQuery__ObjectType objtype;
  protobuf_c_boolean missing_ok;
};
#define PG_QUERY__ALTER_TABLE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_table_stmt__descriptor) \
    , NULL, 0,NULL, PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, 0 }


struct  PgQuery__AlterTableCmd
{
  ProtobufCMessage base;
  PgQuery__AlterTableType subtype;
  char *name;
  int32_t num;
  PgQuery__RoleSpec *newowner;
  PgQuery__Node *def;
  PgQuery__DropBehavior behavior;
  protobuf_c_boolean missing_ok;
  protobuf_c_boolean recurse;
};
#define PG_QUERY__ALTER_TABLE_CMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_table_cmd__descriptor) \
    , PG_QUERY__ALTER_TABLE_TYPE__ALTER_TABLE_TYPE_UNDEFINED, (char *)protobuf_c_empty_string, 0, NULL, NULL, PG_QUERY__DROP_BEHAVIOR__DROP_BEHAVIOR_UNDEFINED, 0, 0 }


struct  PgQuery__AlterDomainStmt
{
  ProtobufCMessage base;
  char *subtype;
  size_t n_type_name;
  PgQuery__Node **type_name;
  char *name;
  PgQuery__Node *def;
  PgQuery__DropBehavior behavior;
  protobuf_c_boolean missing_ok;
};
#define PG_QUERY__ALTER_DOMAIN_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_domain_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, NULL, PG_QUERY__DROP_BEHAVIOR__DROP_BEHAVIOR_UNDEFINED, 0 }


struct  PgQuery__SetOperationStmt
{
  ProtobufCMessage base;
  PgQuery__SetOperation op;
  protobuf_c_boolean all;
  PgQuery__Node *larg;
  PgQuery__Node *rarg;
  size_t n_col_types;
  PgQuery__Node **col_types;
  size_t n_col_typmods;
  PgQuery__Node **col_typmods;
  size_t n_col_collations;
  PgQuery__Node **col_collations;
  size_t n_group_clauses;
  PgQuery__Node **group_clauses;
};
#define PG_QUERY__SET_OPERATION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__set_operation_stmt__descriptor) \
    , PG_QUERY__SET_OPERATION__SET_OPERATION_UNDEFINED, 0, NULL, NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  PgQuery__GrantStmt
{
  ProtobufCMessage base;
  protobuf_c_boolean is_grant;
  PgQuery__GrantTargetType targtype;
  PgQuery__ObjectType objtype;
  size_t n_objects;
  PgQuery__Node **objects;
  size_t n_privileges;
  PgQuery__Node **privileges;
  size_t n_grantees;
  PgQuery__Node **grantees;
  protobuf_c_boolean grant_option;
  PgQuery__RoleSpec *grantor;
  PgQuery__DropBehavior behavior;
};
#define PG_QUERY__GRANT_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__grant_stmt__descriptor) \
    , 0, PG_QUERY__GRANT_TARGET_TYPE__GRANT_TARGET_TYPE_UNDEFINED, PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, 0,NULL, 0,NULL, 0,NULL, 0, NULL, PG_QUERY__DROP_BEHAVIOR__DROP_BEHAVIOR_UNDEFINED }


struct  PgQuery__GrantRoleStmt
{
  ProtobufCMessage base;
  size_t n_granted_roles;
  PgQuery__Node **granted_roles;
  size_t n_grantee_roles;
  PgQuery__Node **grantee_roles;
  protobuf_c_boolean is_grant;
  protobuf_c_boolean admin_opt;
  PgQuery__RoleSpec *grantor;
  PgQuery__DropBehavior behavior;
};
#define PG_QUERY__GRANT_ROLE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__grant_role_stmt__descriptor) \
    , 0,NULL, 0,NULL, 0, 0, NULL, PG_QUERY__DROP_BEHAVIOR__DROP_BEHAVIOR_UNDEFINED }


struct  PgQuery__AlterDefaultPrivilegesStmt
{
  ProtobufCMessage base;
  size_t n_options;
  PgQuery__Node **options;
  PgQuery__GrantStmt *action;
};
#define PG_QUERY__ALTER_DEFAULT_PRIVILEGES_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_default_privileges_stmt__descriptor) \
    , 0,NULL, NULL }


struct  PgQuery__ClosePortalStmt
{
  ProtobufCMessage base;
  char *portalname;
};
#define PG_QUERY__CLOSE_PORTAL_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__close_portal_stmt__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  PgQuery__ClusterStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *relation;
  char *indexname;
  size_t n_params;
  PgQuery__Node **params;
};
#define PG_QUERY__CLUSTER_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__cluster_stmt__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, 0,NULL }


struct  PgQuery__CopyStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *relation;
  PgQuery__Node *query;
  size_t n_attlist;
  PgQuery__Node **attlist;
  protobuf_c_boolean is_from;
  protobuf_c_boolean is_program;
  char *filename;
  size_t n_options;
  PgQuery__Node **options;
  PgQuery__Node *where_clause;
};
#define PG_QUERY__COPY_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__copy_stmt__descriptor) \
    , NULL, NULL, 0,NULL, 0, 0, (char *)protobuf_c_empty_string, 0,NULL, NULL }


struct  PgQuery__CreateStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *relation;
  size_t n_table_elts;
  PgQuery__Node **table_elts;
  size_t n_inh_relations;
  PgQuery__Node **inh_relations;
  PgQuery__PartitionBoundSpec *partbound;
  PgQuery__PartitionSpec *partspec;
  PgQuery__TypeName *of_typename;
  size_t n_constraints;
  PgQuery__Node **constraints;
  size_t n_options;
  PgQuery__Node **options;
  PgQuery__OnCommitAction oncommit;
  char *tablespacename;
  char *access_method;
  protobuf_c_boolean if_not_exists;
};
#define PG_QUERY__CREATE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_stmt__descriptor) \
    , NULL, 0,NULL, 0,NULL, NULL, NULL, NULL, 0,NULL, 0,NULL, PG_QUERY__ON_COMMIT_ACTION__ON_COMMIT_ACTION_UNDEFINED, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  PgQuery__DefineStmt
{
  ProtobufCMessage base;
  PgQuery__ObjectType kind;
  protobuf_c_boolean oldstyle;
  size_t n_defnames;
  PgQuery__Node **defnames;
  size_t n_args;
  PgQuery__Node **args;
  size_t n_definition;
  PgQuery__Node **definition;
  protobuf_c_boolean if_not_exists;
  protobuf_c_boolean replace;
};
#define PG_QUERY__DEFINE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__define_stmt__descriptor) \
    , PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, 0, 0,NULL, 0,NULL, 0,NULL, 0, 0 }


struct  PgQuery__DropStmt
{
  ProtobufCMessage base;
  size_t n_objects;
  PgQuery__Node **objects;
  PgQuery__ObjectType remove_type;
  PgQuery__DropBehavior behavior;
  protobuf_c_boolean missing_ok;
  protobuf_c_boolean concurrent;
};
#define PG_QUERY__DROP_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__drop_stmt__descriptor) \
    , 0,NULL, PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, PG_QUERY__DROP_BEHAVIOR__DROP_BEHAVIOR_UNDEFINED, 0, 0 }


struct  PgQuery__TruncateStmt
{
  ProtobufCMessage base;
  size_t n_relations;
  PgQuery__Node **relations;
  protobuf_c_boolean restart_seqs;
  PgQuery__DropBehavior behavior;
};
#define PG_QUERY__TRUNCATE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__truncate_stmt__descriptor) \
    , 0,NULL, 0, PG_QUERY__DROP_BEHAVIOR__DROP_BEHAVIOR_UNDEFINED }


struct  PgQuery__CommentStmt
{
  ProtobufCMessage base;
  PgQuery__ObjectType objtype;
  PgQuery__Node *object;
  char *comment;
};
#define PG_QUERY__COMMENT_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__comment_stmt__descriptor) \
    , PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, NULL, (char *)protobuf_c_empty_string }


struct  PgQuery__FetchStmt
{
  ProtobufCMessage base;
  PgQuery__FetchDirection direction;
  int64_t how_many;
  char *portalname;
  protobuf_c_boolean ismove;
};
#define PG_QUERY__FETCH_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__fetch_stmt__descriptor) \
    , PG_QUERY__FETCH_DIRECTION__FETCH_DIRECTION_UNDEFINED, 0, (char *)protobuf_c_empty_string, 0 }


struct  PgQuery__IndexStmt
{
  ProtobufCMessage base;
  char *idxname;
  PgQuery__RangeVar *relation;
  char *access_method;
  char *table_space;
  size_t n_index_params;
  PgQuery__Node **index_params;
  size_t n_index_including_params;
  PgQuery__Node **index_including_params;
  size_t n_options;
  PgQuery__Node **options;
  PgQuery__Node *where_clause;
  size_t n_exclude_op_names;
  PgQuery__Node **exclude_op_names;
  char *idxcomment;
  uint32_t index_oid;
  uint32_t old_node;
  uint32_t old_create_subid;
  uint32_t old_first_relfilenode_subid;
  protobuf_c_boolean unique;
  protobuf_c_boolean nulls_not_distinct;
  protobuf_c_boolean primary;
  protobuf_c_boolean isconstraint;
  protobuf_c_boolean deferrable;
  protobuf_c_boolean initdeferred;
  protobuf_c_boolean transformed;
  protobuf_c_boolean concurrent;
  protobuf_c_boolean if_not_exists;
  protobuf_c_boolean reset_default_tblspc;
};
#define PG_QUERY__INDEX_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__index_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, NULL, 0,NULL, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  PgQuery__CreateFunctionStmt
{
  ProtobufCMessage base;
  protobuf_c_boolean is_procedure;
  protobuf_c_boolean replace;
  size_t n_funcname;
  PgQuery__Node **funcname;
  size_t n_parameters;
  PgQuery__Node **parameters;
  PgQuery__TypeName *return_type;
  size_t n_options;
  PgQuery__Node **options;
  PgQuery__Node *sql_body;
};
#define PG_QUERY__CREATE_FUNCTION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_function_stmt__descriptor) \
    , 0, 0, 0,NULL, 0,NULL, NULL, 0,NULL, NULL }


struct  PgQuery__AlterFunctionStmt
{
  ProtobufCMessage base;
  PgQuery__ObjectType objtype;
  PgQuery__ObjectWithArgs *func;
  size_t n_actions;
  PgQuery__Node **actions;
};
#define PG_QUERY__ALTER_FUNCTION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_function_stmt__descriptor) \
    , PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, NULL, 0,NULL }


struct  PgQuery__DoStmt
{
  ProtobufCMessage base;
  size_t n_args;
  PgQuery__Node **args;
};
#define PG_QUERY__DO_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__do_stmt__descriptor) \
    , 0,NULL }


struct  PgQuery__RenameStmt
{
  ProtobufCMessage base;
  PgQuery__ObjectType rename_type;
  PgQuery__ObjectType relation_type;
  PgQuery__RangeVar *relation;
  PgQuery__Node *object;
  char *subname;
  char *newname;
  PgQuery__DropBehavior behavior;
  protobuf_c_boolean missing_ok;
};
#define PG_QUERY__RENAME_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__rename_stmt__descriptor) \
    , PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, NULL, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, PG_QUERY__DROP_BEHAVIOR__DROP_BEHAVIOR_UNDEFINED, 0 }


struct  PgQuery__RuleStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *relation;
  char *rulename;
  PgQuery__Node *where_clause;
  PgQuery__CmdType event;
  protobuf_c_boolean instead;
  size_t n_actions;
  PgQuery__Node **actions;
  protobuf_c_boolean replace;
};
#define PG_QUERY__RULE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__rule_stmt__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, NULL, PG_QUERY__CMD_TYPE__CMD_TYPE_UNDEFINED, 0, 0,NULL, 0 }


struct  PgQuery__NotifyStmt
{
  ProtobufCMessage base;
  char *conditionname;
  char *payload;
};
#define PG_QUERY__NOTIFY_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__notify_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  PgQuery__ListenStmt
{
  ProtobufCMessage base;
  char *conditionname;
};
#define PG_QUERY__LISTEN_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__listen_stmt__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  PgQuery__UnlistenStmt
{
  ProtobufCMessage base;
  char *conditionname;
};
#define PG_QUERY__UNLISTEN_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__unlisten_stmt__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  PgQuery__TransactionStmt
{
  ProtobufCMessage base;
  PgQuery__TransactionStmtKind kind;
  size_t n_options;
  PgQuery__Node **options;
  char *savepoint_name;
  char *gid;
  protobuf_c_boolean chain;
};
#define PG_QUERY__TRANSACTION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__transaction_stmt__descriptor) \
    , PG_QUERY__TRANSACTION_STMT_KIND__TRANSACTION_STMT_KIND_UNDEFINED, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  PgQuery__ViewStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *view;
  size_t n_aliases;
  PgQuery__Node **aliases;
  PgQuery__Node *query;
  protobuf_c_boolean replace;
  size_t n_options;
  PgQuery__Node **options;
  PgQuery__ViewCheckOption with_check_option;
};
#define PG_QUERY__VIEW_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__view_stmt__descriptor) \
    , NULL, 0,NULL, NULL, 0, 0,NULL, PG_QUERY__VIEW_CHECK_OPTION__VIEW_CHECK_OPTION_UNDEFINED }


struct  PgQuery__LoadStmt
{
  ProtobufCMessage base;
  char *filename;
};
#define PG_QUERY__LOAD_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__load_stmt__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  PgQuery__CreateDomainStmt
{
  ProtobufCMessage base;
  size_t n_domainname;
  PgQuery__Node **domainname;
  PgQuery__TypeName *type_name;
  PgQuery__CollateClause *coll_clause;
  size_t n_constraints;
  PgQuery__Node **constraints;
};
#define PG_QUERY__CREATE_DOMAIN_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_domain_stmt__descriptor) \
    , 0,NULL, NULL, NULL, 0,NULL }


struct  PgQuery__CreatedbStmt
{
  ProtobufCMessage base;
  char *dbname;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__CREATEDB_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__createdb_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


struct  PgQuery__DropdbStmt
{
  ProtobufCMessage base;
  char *dbname;
  protobuf_c_boolean missing_ok;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__DROPDB_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__dropdb_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0,NULL }


struct  PgQuery__VacuumStmt
{
  ProtobufCMessage base;
  size_t n_options;
  PgQuery__Node **options;
  size_t n_rels;
  PgQuery__Node **rels;
  protobuf_c_boolean is_vacuumcmd;
};
#define PG_QUERY__VACUUM_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__vacuum_stmt__descriptor) \
    , 0,NULL, 0,NULL, 0 }


struct  PgQuery__ExplainStmt
{
  ProtobufCMessage base;
  PgQuery__Node *query;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__EXPLAIN_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__explain_stmt__descriptor) \
    , NULL, 0,NULL }


struct  PgQuery__CreateTableAsStmt
{
  ProtobufCMessage base;
  PgQuery__Node *query;
  PgQuery__IntoClause *into;
  PgQuery__ObjectType objtype;
  protobuf_c_boolean is_select_into;
  protobuf_c_boolean if_not_exists;
};
#define PG_QUERY__CREATE_TABLE_AS_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_table_as_stmt__descriptor) \
    , NULL, NULL, PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, 0, 0 }


struct  PgQuery__CreateSeqStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *sequence;
  size_t n_options;
  PgQuery__Node **options;
  uint32_t owner_id;
  protobuf_c_boolean for_identity;
  protobuf_c_boolean if_not_exists;
};
#define PG_QUERY__CREATE_SEQ_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_seq_stmt__descriptor) \
    , NULL, 0,NULL, 0, 0, 0 }


struct  PgQuery__AlterSeqStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *sequence;
  size_t n_options;
  PgQuery__Node **options;
  protobuf_c_boolean for_identity;
  protobuf_c_boolean missing_ok;
};
#define PG_QUERY__ALTER_SEQ_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_seq_stmt__descriptor) \
    , NULL, 0,NULL, 0, 0 }


struct  PgQuery__VariableSetStmt
{
  ProtobufCMessage base;
  PgQuery__VariableSetKind kind;
  char *name;
  size_t n_args;
  PgQuery__Node **args;
  protobuf_c_boolean is_local;
};
#define PG_QUERY__VARIABLE_SET_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__variable_set_stmt__descriptor) \
    , PG_QUERY__VARIABLE_SET_KIND__VARIABLE_SET_KIND_UNDEFINED, (char *)protobuf_c_empty_string, 0,NULL, 0 }


struct  PgQuery__VariableShowStmt
{
  ProtobufCMessage base;
  char *name;
};
#define PG_QUERY__VARIABLE_SHOW_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__variable_show_stmt__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  PgQuery__DiscardStmt
{
  ProtobufCMessage base;
  PgQuery__DiscardMode target;
};
#define PG_QUERY__DISCARD_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__discard_stmt__descriptor) \
    , PG_QUERY__DISCARD_MODE__DISCARD_MODE_UNDEFINED }


struct  PgQuery__CreateTrigStmt
{
  ProtobufCMessage base;
  protobuf_c_boolean replace;
  protobuf_c_boolean isconstraint;
  char *trigname;
  PgQuery__RangeVar *relation;
  size_t n_funcname;
  PgQuery__Node **funcname;
  size_t n_args;
  PgQuery__Node **args;
  protobuf_c_boolean row;
  int32_t timing;
  int32_t events;
  size_t n_columns;
  PgQuery__Node **columns;
  PgQuery__Node *when_clause;
  size_t n_transition_rels;
  PgQuery__Node **transition_rels;
  protobuf_c_boolean deferrable;
  protobuf_c_boolean initdeferred;
  PgQuery__RangeVar *constrrel;
};
#define PG_QUERY__CREATE_TRIG_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_trig_stmt__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string, NULL, 0,NULL, 0,NULL, 0, 0, 0, 0,NULL, NULL, 0,NULL, 0, 0, NULL }


struct  PgQuery__CreatePLangStmt
{
  ProtobufCMessage base;
  protobuf_c_boolean replace;
  char *plname;
  size_t n_plhandler;
  PgQuery__Node **plhandler;
  size_t n_plinline;
  PgQuery__Node **plinline;
  size_t n_plvalidator;
  PgQuery__Node **plvalidator;
  protobuf_c_boolean pltrusted;
};
#define PG_QUERY__CREATE_PLANG_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_plang_stmt__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, 0 }


struct  PgQuery__CreateRoleStmt
{
  ProtobufCMessage base;
  PgQuery__RoleStmtType stmt_type;
  char *role;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__CREATE_ROLE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_role_stmt__descriptor) \
    , PG_QUERY__ROLE_STMT_TYPE__ROLE_STMT_TYPE_UNDEFINED, (char *)protobuf_c_empty_string, 0,NULL }


struct  PgQuery__AlterRoleStmt
{
  ProtobufCMessage base;
  PgQuery__RoleSpec *role;
  size_t n_options;
  PgQuery__Node **options;
  int32_t action;
};
#define PG_QUERY__ALTER_ROLE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_role_stmt__descriptor) \
    , NULL, 0,NULL, 0 }


struct  PgQuery__DropRoleStmt
{
  ProtobufCMessage base;
  size_t n_roles;
  PgQuery__Node **roles;
  protobuf_c_boolean missing_ok;
};
#define PG_QUERY__DROP_ROLE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__drop_role_stmt__descriptor) \
    , 0,NULL, 0 }


struct  PgQuery__LockStmt
{
  ProtobufCMessage base;
  size_t n_relations;
  PgQuery__Node **relations;
  int32_t mode;
  protobuf_c_boolean nowait;
};
#define PG_QUERY__LOCK_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__lock_stmt__descriptor) \
    , 0,NULL, 0, 0 }


struct  PgQuery__ConstraintsSetStmt
{
  ProtobufCMessage base;
  size_t n_constraints;
  PgQuery__Node **constraints;
  protobuf_c_boolean deferred;
};
#define PG_QUERY__CONSTRAINTS_SET_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__constraints_set_stmt__descriptor) \
    , 0,NULL, 0 }


struct  PgQuery__ReindexStmt
{
  ProtobufCMessage base;
  PgQuery__ReindexObjectType kind;
  PgQuery__RangeVar *relation;
  char *name;
  size_t n_params;
  PgQuery__Node **params;
};
#define PG_QUERY__REINDEX_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__reindex_stmt__descriptor) \
    , PG_QUERY__REINDEX_OBJECT_TYPE__REINDEX_OBJECT_TYPE_UNDEFINED, NULL, (char *)protobuf_c_empty_string, 0,NULL }


struct  PgQuery__CheckPointStmt
{
  ProtobufCMessage base;
};
#define PG_QUERY__CHECK_POINT_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__check_point_stmt__descriptor) \
     }


struct  PgQuery__CreateSchemaStmt
{
  ProtobufCMessage base;
  char *schemaname;
  PgQuery__RoleSpec *authrole;
  size_t n_schema_elts;
  PgQuery__Node **schema_elts;
  protobuf_c_boolean if_not_exists;
};
#define PG_QUERY__CREATE_SCHEMA_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_schema_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, 0,NULL, 0 }


struct  PgQuery__AlterDatabaseStmt
{
  ProtobufCMessage base;
  char *dbname;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__ALTER_DATABASE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_database_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


struct  PgQuery__AlterDatabaseRefreshCollStmt
{
  ProtobufCMessage base;
  char *dbname;
};
#define PG_QUERY__ALTER_DATABASE_REFRESH_COLL_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_database_refresh_coll_stmt__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  PgQuery__AlterDatabaseSetStmt
{
  ProtobufCMessage base;
  char *dbname;
  PgQuery__VariableSetStmt *setstmt;
};
#define PG_QUERY__ALTER_DATABASE_SET_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_database_set_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  PgQuery__AlterRoleSetStmt
{
  ProtobufCMessage base;
  PgQuery__RoleSpec *role;
  char *database;
  PgQuery__VariableSetStmt *setstmt;
};
#define PG_QUERY__ALTER_ROLE_SET_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_role_set_stmt__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, NULL }


struct  PgQuery__CreateConversionStmt
{
  ProtobufCMessage base;
  size_t n_conversion_name;
  PgQuery__Node **conversion_name;
  char *for_encoding_name;
  char *to_encoding_name;
  size_t n_func_name;
  PgQuery__Node **func_name;
  protobuf_c_boolean def;
};
#define PG_QUERY__CREATE_CONVERSION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_conversion_stmt__descriptor) \
    , 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0 }


struct  PgQuery__CreateCastStmt
{
  ProtobufCMessage base;
  PgQuery__TypeName *sourcetype;
  PgQuery__TypeName *targettype;
  PgQuery__ObjectWithArgs *func;
  PgQuery__CoercionContext context;
  protobuf_c_boolean inout;
};
#define PG_QUERY__CREATE_CAST_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_cast_stmt__descriptor) \
    , NULL, NULL, NULL, PG_QUERY__COERCION_CONTEXT__COERCION_CONTEXT_UNDEFINED, 0 }


struct  PgQuery__CreateOpClassStmt
{
  ProtobufCMessage base;
  size_t n_opclassname;
  PgQuery__Node **opclassname;
  size_t n_opfamilyname;
  PgQuery__Node **opfamilyname;
  char *amname;
  PgQuery__TypeName *datatype;
  size_t n_items;
  PgQuery__Node **items;
  protobuf_c_boolean is_default;
};
#define PG_QUERY__CREATE_OP_CLASS_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_op_class_stmt__descriptor) \
    , 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, NULL, 0,NULL, 0 }


struct  PgQuery__CreateOpFamilyStmt
{
  ProtobufCMessage base;
  size_t n_opfamilyname;
  PgQuery__Node **opfamilyname;
  char *amname;
};
#define PG_QUERY__CREATE_OP_FAMILY_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_op_family_stmt__descriptor) \
    , 0,NULL, (char *)protobuf_c_empty_string }


struct  PgQuery__AlterOpFamilyStmt
{
  ProtobufCMessage base;
  size_t n_opfamilyname;
  PgQuery__Node **opfamilyname;
  char *amname;
  protobuf_c_boolean is_drop;
  size_t n_items;
  PgQuery__Node **items;
};
#define PG_QUERY__ALTER_OP_FAMILY_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_op_family_stmt__descriptor) \
    , 0,NULL, (char *)protobuf_c_empty_string, 0, 0,NULL }


struct  PgQuery__PrepareStmt
{
  ProtobufCMessage base;
  char *name;
  size_t n_argtypes;
  PgQuery__Node **argtypes;
  PgQuery__Node *query;
};
#define PG_QUERY__PREPARE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__prepare_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, NULL }


struct  PgQuery__ExecuteStmt
{
  ProtobufCMessage base;
  char *name;
  size_t n_params;
  PgQuery__Node **params;
};
#define PG_QUERY__EXECUTE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__execute_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


struct  PgQuery__DeallocateStmt
{
  ProtobufCMessage base;
  char *name;
};
#define PG_QUERY__DEALLOCATE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__deallocate_stmt__descriptor) \
    , (char *)protobuf_c_empty_string }


struct  PgQuery__DeclareCursorStmt
{
  ProtobufCMessage base;
  char *portalname;
  int32_t options;
  PgQuery__Node *query;
};
#define PG_QUERY__DECLARE_CURSOR_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__declare_cursor_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0, NULL }


struct  PgQuery__CreateTableSpaceStmt
{
  ProtobufCMessage base;
  char *tablespacename;
  PgQuery__RoleSpec *owner;
  char *location;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__CREATE_TABLE_SPACE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_table_space_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string, 0,NULL }


struct  PgQuery__DropTableSpaceStmt
{
  ProtobufCMessage base;
  char *tablespacename;
  protobuf_c_boolean missing_ok;
};
#define PG_QUERY__DROP_TABLE_SPACE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__drop_table_space_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


struct  PgQuery__AlterObjectDependsStmt
{
  ProtobufCMessage base;
  PgQuery__ObjectType object_type;
  PgQuery__RangeVar *relation;
  PgQuery__Node *object;
  PgQuery__String *extname;
  protobuf_c_boolean remove;
};
#define PG_QUERY__ALTER_OBJECT_DEPENDS_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_object_depends_stmt__descriptor) \
    , PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, NULL, NULL, NULL, 0 }


struct  PgQuery__AlterObjectSchemaStmt
{
  ProtobufCMessage base;
  PgQuery__ObjectType object_type;
  PgQuery__RangeVar *relation;
  PgQuery__Node *object;
  char *newschema;
  protobuf_c_boolean missing_ok;
};
#define PG_QUERY__ALTER_OBJECT_SCHEMA_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_object_schema_stmt__descriptor) \
    , PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, NULL, NULL, (char *)protobuf_c_empty_string, 0 }


struct  PgQuery__AlterOwnerStmt
{
  ProtobufCMessage base;
  PgQuery__ObjectType object_type;
  PgQuery__RangeVar *relation;
  PgQuery__Node *object;
  PgQuery__RoleSpec *newowner;
};
#define PG_QUERY__ALTER_OWNER_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_owner_stmt__descriptor) \
    , PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, NULL, NULL, NULL }


struct  PgQuery__AlterOperatorStmt
{
  ProtobufCMessage base;
  PgQuery__ObjectWithArgs *opername;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__ALTER_OPERATOR_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_operator_stmt__descriptor) \
    , NULL, 0,NULL }


struct  PgQuery__AlterTypeStmt
{
  ProtobufCMessage base;
  size_t n_type_name;
  PgQuery__Node **type_name;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__ALTER_TYPE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_type_stmt__descriptor) \
    , 0,NULL, 0,NULL }


struct  PgQuery__DropOwnedStmt
{
  ProtobufCMessage base;
  size_t n_roles;
  PgQuery__Node **roles;
  PgQuery__DropBehavior behavior;
};
#define PG_QUERY__DROP_OWNED_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__drop_owned_stmt__descriptor) \
    , 0,NULL, PG_QUERY__DROP_BEHAVIOR__DROP_BEHAVIOR_UNDEFINED }


struct  PgQuery__ReassignOwnedStmt
{
  ProtobufCMessage base;
  size_t n_roles;
  PgQuery__Node **roles;
  PgQuery__RoleSpec *newrole;
};
#define PG_QUERY__REASSIGN_OWNED_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__reassign_owned_stmt__descriptor) \
    , 0,NULL, NULL }


struct  PgQuery__CompositeTypeStmt
{
  ProtobufCMessage base;
  PgQuery__RangeVar *typevar;
  size_t n_coldeflist;
  PgQuery__Node **coldeflist;
};
#define PG_QUERY__COMPOSITE_TYPE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__composite_type_stmt__descriptor) \
    , NULL, 0,NULL }


struct  PgQuery__CreateEnumStmt
{
  ProtobufCMessage base;
  size_t n_type_name;
  PgQuery__Node **type_name;
  size_t n_vals;
  PgQuery__Node **vals;
};
#define PG_QUERY__CREATE_ENUM_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_enum_stmt__descriptor) \
    , 0,NULL, 0,NULL }


struct  PgQuery__CreateRangeStmt
{
  ProtobufCMessage base;
  size_t n_type_name;
  PgQuery__Node **type_name;
  size_t n_params;
  PgQuery__Node **params;
};
#define PG_QUERY__CREATE_RANGE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_range_stmt__descriptor) \
    , 0,NULL, 0,NULL }


struct  PgQuery__AlterEnumStmt
{
  ProtobufCMessage base;
  size_t n_type_name;
  PgQuery__Node **type_name;
  char *old_val;
  char *new_val;
  char *new_val_neighbor;
  protobuf_c_boolean new_val_is_after;
  protobuf_c_boolean skip_if_new_val_exists;
};
#define PG_QUERY__ALTER_ENUM_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_enum_stmt__descriptor) \
    , 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0 }


struct  PgQuery__AlterTSDictionaryStmt
{
  ProtobufCMessage base;
  size_t n_dictname;
  PgQuery__Node **dictname;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__ALTER_TSDICTIONARY_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_tsdictionary_stmt__descriptor) \
    , 0,NULL, 0,NULL }


struct  PgQuery__AlterTSConfigurationStmt
{
  ProtobufCMessage base;
  PgQuery__AlterTSConfigType kind;
  size_t n_cfgname;
  PgQuery__Node **cfgname;
  size_t n_tokentype;
  PgQuery__Node **tokentype;
  size_t n_dicts;
  PgQuery__Node **dicts;
  protobuf_c_boolean override;
  protobuf_c_boolean replace;
  protobuf_c_boolean missing_ok;
};
#define PG_QUERY__ALTER_TSCONFIGURATION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_tsconfiguration_stmt__descriptor) \
    , PG_QUERY__ALTER_TSCONFIG_TYPE__ALTER_TSCONFIG_TYPE_UNDEFINED, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0 }


struct  PgQuery__CreateFdwStmt
{
  ProtobufCMessage base;
  char *fdwname;
  size_t n_func_options;
  PgQuery__Node **func_options;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__CREATE_FDW_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_fdw_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


struct  PgQuery__AlterFdwStmt
{
  ProtobufCMessage base;
  char *fdwname;
  size_t n_func_options;
  PgQuery__Node **func_options;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__ALTER_FDW_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_fdw_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


struct  PgQuery__CreateForeignServerStmt
{
  ProtobufCMessage base;
  char *servername;
  char *servertype;
  char *version;
  char *fdwname;
  protobuf_c_boolean if_not_exists;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__CREATE_FOREIGN_SERVER_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_foreign_server_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0,NULL }


struct  PgQuery__AlterForeignServerStmt
{
  ProtobufCMessage base;
  char *servername;
  char *version;
  size_t n_options;
  PgQuery__Node **options;
  protobuf_c_boolean has_version;
};
#define PG_QUERY__ALTER_FOREIGN_SERVER_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_foreign_server_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0 }


struct  PgQuery__CreateUserMappingStmt
{
  ProtobufCMessage base;
  PgQuery__RoleSpec *user;
  char *servername;
  protobuf_c_boolean if_not_exists;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__CREATE_USER_MAPPING_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_user_mapping_stmt__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, 0, 0,NULL }


struct  PgQuery__AlterUserMappingStmt
{
  ProtobufCMessage base;
  PgQuery__RoleSpec *user;
  char *servername;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__ALTER_USER_MAPPING_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_user_mapping_stmt__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, 0,NULL }


struct  PgQuery__DropUserMappingStmt
{
  ProtobufCMessage base;
  PgQuery__RoleSpec *user;
  char *servername;
  protobuf_c_boolean missing_ok;
};
#define PG_QUERY__DROP_USER_MAPPING_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__drop_user_mapping_stmt__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, 0 }


struct  PgQuery__AlterTableSpaceOptionsStmt
{
  ProtobufCMessage base;
  char *tablespacename;
  size_t n_options;
  PgQuery__Node **options;
  protobuf_c_boolean is_reset;
};
#define PG_QUERY__ALTER_TABLE_SPACE_OPTIONS_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_table_space_options_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0 }


struct  PgQuery__AlterTableMoveAllStmt
{
  ProtobufCMessage base;
  char *orig_tablespacename;
  PgQuery__ObjectType objtype;
  size_t n_roles;
  PgQuery__Node **roles;
  char *new_tablespacename;
  protobuf_c_boolean nowait;
};
#define PG_QUERY__ALTER_TABLE_MOVE_ALL_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_table_move_all_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, 0,NULL, (char *)protobuf_c_empty_string, 0 }


struct  PgQuery__SecLabelStmt
{
  ProtobufCMessage base;
  PgQuery__ObjectType objtype;
  PgQuery__Node *object;
  char *provider;
  char *label;
};
#define PG_QUERY__SEC_LABEL_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__sec_label_stmt__descriptor) \
    , PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  PgQuery__CreateForeignTableStmt
{
  ProtobufCMessage base;
  PgQuery__CreateStmt *base_stmt;
  char *servername;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__CREATE_FOREIGN_TABLE_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_foreign_table_stmt__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, 0,NULL }


struct  PgQuery__ImportForeignSchemaStmt
{
  ProtobufCMessage base;
  char *server_name;
  char *remote_schema;
  char *local_schema;
  PgQuery__ImportForeignSchemaType list_type;
  size_t n_table_list;
  PgQuery__Node **table_list;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__IMPORT_FOREIGN_SCHEMA_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__import_foreign_schema_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, PG_QUERY__IMPORT_FOREIGN_SCHEMA_TYPE__IMPORT_FOREIGN_SCHEMA_TYPE_UNDEFINED, 0,NULL, 0,NULL }


struct  PgQuery__CreateExtensionStmt
{
  ProtobufCMessage base;
  char *extname;
  protobuf_c_boolean if_not_exists;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__CREATE_EXTENSION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_extension_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0,NULL }


struct  PgQuery__AlterExtensionStmt
{
  ProtobufCMessage base;
  char *extname;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__ALTER_EXTENSION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_extension_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


struct  PgQuery__AlterExtensionContentsStmt
{
  ProtobufCMessage base;
  char *extname;
  int32_t action;
  PgQuery__ObjectType objtype;
  PgQuery__Node *object;
};
#define PG_QUERY__ALTER_EXTENSION_CONTENTS_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_extension_contents_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0, PG_QUERY__OBJECT_TYPE__OBJECT_TYPE_UNDEFINED, NULL }


struct  PgQuery__CreateEventTrigStmt
{
  ProtobufCMessage base;
  char *trigname;
  char *eventname;
  size_t n_whenclause;
  PgQuery__Node **whenclause;
  size_t n_funcname;
  PgQuery__Node **funcname;
};
#define PG_QUERY__CREATE_EVENT_TRIG_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_event_trig_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


struct  PgQuery__AlterEventTrigStmt
{
  ProtobufCMessage base;
  char *trigname;
  char *tgenabled;
};
#define PG_QUERY__ALTER_EVENT_TRIG_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_event_trig_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  PgQuery__RefreshMatViewStmt
{
  ProtobufCMessage base;
  protobuf_c_boolean concurrent;
  protobuf_c_boolean skip_data;
  PgQuery__RangeVar *relation;
};
#define PG_QUERY__REFRESH_MAT_VIEW_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__refresh_mat_view_stmt__descriptor) \
    , 0, 0, NULL }


struct  PgQuery__ReplicaIdentityStmt
{
  ProtobufCMessage base;
  char *identity_type;
  char *name;
};
#define PG_QUERY__REPLICA_IDENTITY_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__replica_identity_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  PgQuery__AlterSystemStmt
{
  ProtobufCMessage base;
  PgQuery__VariableSetStmt *setstmt;
};
#define PG_QUERY__ALTER_SYSTEM_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_system_stmt__descriptor) \
    , NULL }


struct  PgQuery__CreatePolicyStmt
{
  ProtobufCMessage base;
  char *policy_name;
  PgQuery__RangeVar *table;
  char *cmd_name;
  protobuf_c_boolean permissive;
  size_t n_roles;
  PgQuery__Node **roles;
  PgQuery__Node *qual;
  PgQuery__Node *with_check;
};
#define PG_QUERY__CREATE_POLICY_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_policy_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string, 0, 0,NULL, NULL, NULL }


struct  PgQuery__AlterPolicyStmt
{
  ProtobufCMessage base;
  char *policy_name;
  PgQuery__RangeVar *table;
  size_t n_roles;
  PgQuery__Node **roles;
  PgQuery__Node *qual;
  PgQuery__Node *with_check;
};
#define PG_QUERY__ALTER_POLICY_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_policy_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, 0,NULL, NULL, NULL }


struct  PgQuery__CreateTransformStmt
{
  ProtobufCMessage base;
  protobuf_c_boolean replace;
  PgQuery__TypeName *type_name;
  char *lang;
  PgQuery__ObjectWithArgs *fromsql;
  PgQuery__ObjectWithArgs *tosql;
};
#define PG_QUERY__CREATE_TRANSFORM_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_transform_stmt__descriptor) \
    , 0, NULL, (char *)protobuf_c_empty_string, NULL, NULL }


struct  PgQuery__CreateAmStmt
{
  ProtobufCMessage base;
  char *amname;
  size_t n_handler_name;
  PgQuery__Node **handler_name;
  char *amtype;
};
#define PG_QUERY__CREATE_AM_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_am_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string }


struct  PgQuery__CreatePublicationStmt
{
  ProtobufCMessage base;
  char *pubname;
  size_t n_options;
  PgQuery__Node **options;
  size_t n_pubobjects;
  PgQuery__Node **pubobjects;
  protobuf_c_boolean for_all_tables;
};
#define PG_QUERY__CREATE_PUBLICATION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_publication_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0 }


struct  PgQuery__AlterPublicationStmt
{
  ProtobufCMessage base;
  char *pubname;
  size_t n_options;
  PgQuery__Node **options;
  size_t n_pubobjects;
  PgQuery__Node **pubobjects;
  protobuf_c_boolean for_all_tables;
  PgQuery__AlterPublicationAction action;
};
#define PG_QUERY__ALTER_PUBLICATION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_publication_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0, PG_QUERY__ALTER_PUBLICATION_ACTION__ALTER_PUBLICATION_ACTION_UNDEFINED }


struct  PgQuery__CreateSubscriptionStmt
{
  ProtobufCMessage base;
  char *subname;
  char *conninfo;
  size_t n_publication;
  PgQuery__Node **publication;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__CREATE_SUBSCRIPTION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_subscription_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


struct  PgQuery__AlterSubscriptionStmt
{
  ProtobufCMessage base;
  PgQuery__AlterSubscriptionType kind;
  char *subname;
  char *conninfo;
  size_t n_publication;
  PgQuery__Node **publication;
  size_t n_options;
  PgQuery__Node **options;
};
#define PG_QUERY__ALTER_SUBSCRIPTION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_subscription_stmt__descriptor) \
    , PG_QUERY__ALTER_SUBSCRIPTION_TYPE__ALTER_SUBSCRIPTION_TYPE_UNDEFINED, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL }


struct  PgQuery__DropSubscriptionStmt
{
  ProtobufCMessage base;
  char *subname;
  protobuf_c_boolean missing_ok;
  PgQuery__DropBehavior behavior;
};
#define PG_QUERY__DROP_SUBSCRIPTION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__drop_subscription_stmt__descriptor) \
    , (char *)protobuf_c_empty_string, 0, PG_QUERY__DROP_BEHAVIOR__DROP_BEHAVIOR_UNDEFINED }


struct  PgQuery__CreateStatsStmt
{
  ProtobufCMessage base;
  size_t n_defnames;
  PgQuery__Node **defnames;
  size_t n_stat_types;
  PgQuery__Node **stat_types;
  size_t n_exprs;
  PgQuery__Node **exprs;
  size_t n_relations;
  PgQuery__Node **relations;
  char *stxcomment;
  protobuf_c_boolean transformed;
  protobuf_c_boolean if_not_exists;
};
#define PG_QUERY__CREATE_STATS_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_stats_stmt__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, 0, 0 }


struct  PgQuery__AlterCollationStmt
{
  ProtobufCMessage base;
  size_t n_collname;
  PgQuery__Node **collname;
};
#define PG_QUERY__ALTER_COLLATION_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_collation_stmt__descriptor) \
    , 0,NULL }


struct  PgQuery__CallStmt
{
  ProtobufCMessage base;
  PgQuery__FuncCall *funccall;
  PgQuery__FuncExpr *funcexpr;
  size_t n_outargs;
  PgQuery__Node **outargs;
};
#define PG_QUERY__CALL_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__call_stmt__descriptor) \
    , NULL, NULL, 0,NULL }


struct  PgQuery__AlterStatsStmt
{
  ProtobufCMessage base;
  size_t n_defnames;
  PgQuery__Node **defnames;
  int32_t stxstattarget;
  protobuf_c_boolean missing_ok;
};
#define PG_QUERY__ALTER_STATS_STMT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__alter_stats_stmt__descriptor) \
    , 0,NULL, 0, 0 }


struct  PgQuery__AExpr
{
  ProtobufCMessage base;
  PgQuery__AExprKind kind;
  size_t n_name;
  PgQuery__Node **name;
  PgQuery__Node *lexpr;
  PgQuery__Node *rexpr;
  int32_t location;
};
#define PG_QUERY__A__EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__a__expr__descriptor) \
    , PG_QUERY__A__EXPR__KIND__A_EXPR_KIND_UNDEFINED, 0,NULL, NULL, NULL, 0 }


struct  PgQuery__ColumnRef
{
  ProtobufCMessage base;
  size_t n_fields;
  PgQuery__Node **fields;
  int32_t location;
};
#define PG_QUERY__COLUMN_REF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__column_ref__descriptor) \
    , 0,NULL, 0 }


struct  PgQuery__ParamRef
{
  ProtobufCMessage base;
  int32_t number;
  int32_t location;
};
#define PG_QUERY__PARAM_REF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__param_ref__descriptor) \
    , 0, 0 }


struct  PgQuery__FuncCall
{
  ProtobufCMessage base;
  size_t n_funcname;
  PgQuery__Node **funcname;
  size_t n_args;
  PgQuery__Node **args;
  size_t n_agg_order;
  PgQuery__Node **agg_order;
  PgQuery__Node *agg_filter;
  PgQuery__WindowDef *over;
  protobuf_c_boolean agg_within_group;
  protobuf_c_boolean agg_star;
  protobuf_c_boolean agg_distinct;
  protobuf_c_boolean func_variadic;
  PgQuery__CoercionForm funcformat;
  int32_t location;
};
#define PG_QUERY__FUNC_CALL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__func_call__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, NULL, NULL, 0, 0, 0, 0, PG_QUERY__COERCION_FORM__COERCION_FORM_UNDEFINED, 0 }


struct  PgQuery__AStar
{
  ProtobufCMessage base;
};
#define PG_QUERY__A__STAR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__a__star__descriptor) \
     }


struct  PgQuery__AIndices
{
  ProtobufCMessage base;
  protobuf_c_boolean is_slice;
  PgQuery__Node *lidx;
  PgQuery__Node *uidx;
};
#define PG_QUERY__A__INDICES__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__a__indices__descriptor) \
    , 0, NULL, NULL }


struct  PgQuery__AIndirection
{
  ProtobufCMessage base;
  PgQuery__Node *arg;
  size_t n_indirection;
  PgQuery__Node **indirection;
};
#define PG_QUERY__A__INDIRECTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__a__indirection__descriptor) \
    , NULL, 0,NULL }


struct  PgQuery__AArrayExpr
{
  ProtobufCMessage base;
  size_t n_elements;
  PgQuery__Node **elements;
  int32_t location;
};
#define PG_QUERY__A__ARRAY_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__a__array_expr__descriptor) \
    , 0,NULL, 0 }


struct  PgQuery__ResTarget
{
  ProtobufCMessage base;
  char *name;
  size_t n_indirection;
  PgQuery__Node **indirection;
  PgQuery__Node *val;
  int32_t location;
};
#define PG_QUERY__RES_TARGET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__res_target__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, NULL, 0 }


struct  PgQuery__MultiAssignRef
{
  ProtobufCMessage base;
  PgQuery__Node *source;
  int32_t colno;
  int32_t ncolumns;
};
#define PG_QUERY__MULTI_ASSIGN_REF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__multi_assign_ref__descriptor) \
    , NULL, 0, 0 }


struct  PgQuery__TypeCast
{
  ProtobufCMessage base;
  PgQuery__Node *arg;
  PgQuery__TypeName *type_name;
  int32_t location;
};
#define PG_QUERY__TYPE_CAST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__type_cast__descriptor) \
    , NULL, NULL, 0 }


struct  PgQuery__CollateClause
{
  ProtobufCMessage base;
  PgQuery__Node *arg;
  size_t n_collname;
  PgQuery__Node **collname;
  int32_t location;
};
#define PG_QUERY__COLLATE_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__collate_clause__descriptor) \
    , NULL, 0,NULL, 0 }


struct  PgQuery__SortBy
{
  ProtobufCMessage base;
  PgQuery__Node *node;
  PgQuery__SortByDir sortby_dir;
  PgQuery__SortByNulls sortby_nulls;
  size_t n_use_op;
  PgQuery__Node **use_op;
  int32_t location;
};
#define PG_QUERY__SORT_BY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__sort_by__descriptor) \
    , NULL, PG_QUERY__SORT_BY_DIR__SORT_BY_DIR_UNDEFINED, PG_QUERY__SORT_BY_NULLS__SORT_BY_NULLS_UNDEFINED, 0,NULL, 0 }


struct  PgQuery__WindowDef
{
  ProtobufCMessage base;
  char *name;
  char *refname;
  size_t n_partition_clause;
  PgQuery__Node **partition_clause;
  size_t n_order_clause;
  PgQuery__Node **order_clause;
  int32_t frame_options;
  PgQuery__Node *start_offset;
  PgQuery__Node *end_offset;
  int32_t location;
};
#define PG_QUERY__WINDOW_DEF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__window_def__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0, NULL, NULL, 0 }


struct  PgQuery__RangeSubselect
{
  ProtobufCMessage base;
  protobuf_c_boolean lateral;
  PgQuery__Node *subquery;
  PgQuery__Alias *alias;
};
#define PG_QUERY__RANGE_SUBSELECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__range_subselect__descriptor) \
    , 0, NULL, NULL }


struct  PgQuery__RangeFunction
{
  ProtobufCMessage base;
  protobuf_c_boolean lateral;
  protobuf_c_boolean ordinality;
  protobuf_c_boolean is_rowsfrom;
  size_t n_functions;
  PgQuery__Node **functions;
  PgQuery__Alias *alias;
  size_t n_coldeflist;
  PgQuery__Node **coldeflist;
};
#define PG_QUERY__RANGE_FUNCTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__range_function__descriptor) \
    , 0, 0, 0, 0,NULL, NULL, 0,NULL }


struct  PgQuery__RangeTableSample
{
  ProtobufCMessage base;
  PgQuery__Node *relation;
  size_t n_method;
  PgQuery__Node **method;
  size_t n_args;
  PgQuery__Node **args;
  PgQuery__Node *repeatable;
  int32_t location;
};
#define PG_QUERY__RANGE_TABLE_SAMPLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__range_table_sample__descriptor) \
    , NULL, 0,NULL, 0,NULL, NULL, 0 }


struct  PgQuery__RangeTableFunc
{
  ProtobufCMessage base;
  protobuf_c_boolean lateral;
  PgQuery__Node *docexpr;
  PgQuery__Node *rowexpr;
  size_t n_namespaces;
  PgQuery__Node **namespaces;
  size_t n_columns;
  PgQuery__Node **columns;
  PgQuery__Alias *alias;
  int32_t location;
};
#define PG_QUERY__RANGE_TABLE_FUNC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__range_table_func__descriptor) \
    , 0, NULL, NULL, 0,NULL, 0,NULL, NULL, 0 }


struct  PgQuery__RangeTableFuncCol
{
  ProtobufCMessage base;
  char *colname;
  PgQuery__TypeName *type_name;
  protobuf_c_boolean for_ordinality;
  protobuf_c_boolean is_not_null;
  PgQuery__Node *colexpr;
  PgQuery__Node *coldefexpr;
  int32_t location;
};
#define PG_QUERY__RANGE_TABLE_FUNC_COL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__range_table_func_col__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, 0, 0, NULL, NULL, 0 }


struct  PgQuery__TypeName
{
  ProtobufCMessage base;
  size_t n_names;
  PgQuery__Node **names;
  uint32_t type_oid;
  protobuf_c_boolean setof;
  protobuf_c_boolean pct_type;
  size_t n_typmods;
  PgQuery__Node **typmods;
  int32_t typemod;
  size_t n_array_bounds;
  PgQuery__Node **array_bounds;
  int32_t location;
};
#define PG_QUERY__TYPE_NAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__type_name__descriptor) \
    , 0,NULL, 0, 0, 0, 0,NULL, 0, 0,NULL, 0 }


struct  PgQuery__ColumnDef
{
  ProtobufCMessage base;
  char *colname;
  PgQuery__TypeName *type_name;
  char *compression;
  int32_t inhcount;
  protobuf_c_boolean is_local;
  protobuf_c_boolean is_not_null;
  protobuf_c_boolean is_from_type;
  char *storage;
  PgQuery__Node *raw_default;
  PgQuery__Node *cooked_default;
  char *identity;
  PgQuery__RangeVar *identity_sequence;
  char *generated;
  PgQuery__CollateClause *coll_clause;
  uint32_t coll_oid;
  size_t n_constraints;
  PgQuery__Node **constraints;
  size_t n_fdwoptions;
  PgQuery__Node **fdwoptions;
  int32_t location;
};
#define PG_QUERY__COLUMN_DEF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__column_def__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string, 0, 0, 0, 0, (char *)protobuf_c_empty_string, NULL, NULL, (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string, NULL, 0, 0,NULL, 0,NULL, 0 }


struct  PgQuery__IndexElem
{
  ProtobufCMessage base;
  char *name;
  PgQuery__Node *expr;
  char *indexcolname;
  size_t n_collation;
  PgQuery__Node **collation;
  size_t n_opclass;
  PgQuery__Node **opclass;
  size_t n_opclassopts;
  PgQuery__Node **opclassopts;
  PgQuery__SortByDir ordering;
  PgQuery__SortByNulls nulls_ordering;
};
#define PG_QUERY__INDEX_ELEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__index_elem__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, PG_QUERY__SORT_BY_DIR__SORT_BY_DIR_UNDEFINED, PG_QUERY__SORT_BY_NULLS__SORT_BY_NULLS_UNDEFINED }


struct  PgQuery__StatsElem
{
  ProtobufCMessage base;
  char *name;
  PgQuery__Node *expr;
};
#define PG_QUERY__STATS_ELEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__stats_elem__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  PgQuery__Constraint
{
  ProtobufCMessage base;
  PgQuery__ConstrType contype;
  char *conname;
  protobuf_c_boolean deferrable;
  protobuf_c_boolean initdeferred;
  int32_t location;
  protobuf_c_boolean is_no_inherit;
  PgQuery__Node *raw_expr;
  char *cooked_expr;
  char *generated_when;
  protobuf_c_boolean nulls_not_distinct;
  size_t n_keys;
  PgQuery__Node **keys;
  size_t n_including;
  PgQuery__Node **including;
  size_t n_exclusions;
  PgQuery__Node **exclusions;
  size_t n_options;
  PgQuery__Node **options;
  char *indexname;
  char *indexspace;
  protobuf_c_boolean reset_default_tblspc;
  char *access_method;
  PgQuery__Node *where_clause;
  PgQuery__RangeVar *pktable;
  size_t n_fk_attrs;
  PgQuery__Node **fk_attrs;
  size_t n_pk_attrs;
  PgQuery__Node **pk_attrs;
  char *fk_matchtype;
  char *fk_upd_action;
  char *fk_del_action;
  size_t n_fk_del_set_cols;
  PgQuery__Node **fk_del_set_cols;
  size_t n_old_conpfeqop;
  PgQuery__Node **old_conpfeqop;
  uint32_t old_pktable_oid;
  protobuf_c_boolean skip_validation;
  protobuf_c_boolean initially_valid;
};
#define PG_QUERY__CONSTRAINT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__constraint__descriptor) \
    , PG_QUERY__CONSTR_TYPE__CONSTR_TYPE_UNDEFINED, (char *)protobuf_c_empty_string, 0, 0, 0, 0, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, NULL, NULL, 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0, 0, 0 }


struct  PgQuery__DefElem
{
  ProtobufCMessage base;
  char *defnamespace;
  char *defname;
  PgQuery__Node *arg;
  PgQuery__DefElemAction defaction;
  int32_t location;
};
#define PG_QUERY__DEF_ELEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__def_elem__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, PG_QUERY__DEF_ELEM_ACTION__DEF_ELEM_ACTION_UNDEFINED, 0 }


struct  PgQuery__RangeTblEntry
{
  ProtobufCMessage base;
  PgQuery__RTEKind rtekind;
  uint32_t relid;
  char *relkind;
  int32_t rellockmode;
  PgQuery__TableSampleClause *tablesample;
  PgQuery__Query *subquery;
  protobuf_c_boolean security_barrier;
  PgQuery__JoinType jointype;
  int32_t joinmergedcols;
  size_t n_joinaliasvars;
  PgQuery__Node **joinaliasvars;
  size_t n_joinleftcols;
  PgQuery__Node **joinleftcols;
  size_t n_joinrightcols;
  PgQuery__Node **joinrightcols;
  PgQuery__Alias *join_using_alias;
  size_t n_functions;
  PgQuery__Node **functions;
  protobuf_c_boolean funcordinality;
  PgQuery__TableFunc *tablefunc;
  size_t n_values_lists;
  PgQuery__Node **values_lists;
  char *ctename;
  uint32_t ctelevelsup;
  protobuf_c_boolean self_reference;
  size_t n_coltypes;
  PgQuery__Node **coltypes;
  size_t n_coltypmods;
  PgQuery__Node **coltypmods;
  size_t n_colcollations;
  PgQuery__Node **colcollations;
  char *enrname;
  double enrtuples;
  PgQuery__Alias *alias;
  PgQuery__Alias *eref;
  protobuf_c_boolean lateral;
  protobuf_c_boolean inh;
  protobuf_c_boolean in_from_cl;
  uint32_t required_perms;
  uint32_t check_as_user;
  size_t n_selected_cols;
  uint64_t *selected_cols;
  size_t n_inserted_cols;
  uint64_t *inserted_cols;
  size_t n_updated_cols;
  uint64_t *updated_cols;
  size_t n_extra_updated_cols;
  uint64_t *extra_updated_cols;
  size_t n_security_quals;
  PgQuery__Node **security_quals;
};
#define PG_QUERY__RANGE_TBL_ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__range_tbl_entry__descriptor) \
    , PG_QUERY__RTEKIND__RTEKIND_UNDEFINED, 0, (char *)protobuf_c_empty_string, 0, NULL, NULL, 0, PG_QUERY__JOIN_TYPE__JOIN_TYPE_UNDEFINED, 0, 0,NULL, 0,NULL, 0,NULL, NULL, 0,NULL, 0, NULL, 0,NULL, (char *)protobuf_c_empty_string, 0, 0, 0,NULL, 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, 0, NULL, NULL, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  PgQuery__RangeTblFunction
{
  ProtobufCMessage base;
  PgQuery__Node *funcexpr;
  int32_t funccolcount;
  size_t n_funccolnames;
  PgQuery__Node **funccolnames;
  size_t n_funccoltypes;
  PgQuery__Node **funccoltypes;
  size_t n_funccoltypmods;
  PgQuery__Node **funccoltypmods;
  size_t n_funccolcollations;
  PgQuery__Node **funccolcollations;
  size_t n_funcparams;
  uint64_t *funcparams;
};
#define PG_QUERY__RANGE_TBL_FUNCTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__range_tbl_function__descriptor) \
    , NULL, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  PgQuery__TableSampleClause
{
  ProtobufCMessage base;
  uint32_t tsmhandler;
  size_t n_args;
  PgQuery__Node **args;
  PgQuery__Node *repeatable;
};
#define PG_QUERY__TABLE_SAMPLE_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__table_sample_clause__descriptor) \
    , 0, 0,NULL, NULL }


struct  PgQuery__WithCheckOption
{
  ProtobufCMessage base;
  PgQuery__WCOKind kind;
  char *relname;
  char *polname;
  PgQuery__Node *qual;
  protobuf_c_boolean cascaded;
};
#define PG_QUERY__WITH_CHECK_OPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__with_check_option__descriptor) \
    , PG_QUERY__WCOKIND__WCOKIND_UNDEFINED, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0 }


struct  PgQuery__SortGroupClause
{
  ProtobufCMessage base;
  uint32_t tle_sort_group_ref;
  uint32_t eqop;
  uint32_t sortop;
  protobuf_c_boolean nulls_first;
  protobuf_c_boolean hashable;
};
#define PG_QUERY__SORT_GROUP_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__sort_group_clause__descriptor) \
    , 0, 0, 0, 0, 0 }


struct  PgQuery__GroupingSet
{
  ProtobufCMessage base;
  PgQuery__GroupingSetKind kind;
  size_t n_content;
  PgQuery__Node **content;
  int32_t location;
};
#define PG_QUERY__GROUPING_SET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__grouping_set__descriptor) \
    , PG_QUERY__GROUPING_SET_KIND__GROUPING_SET_KIND_UNDEFINED, 0,NULL, 0 }


struct  PgQuery__WindowClause
{
  ProtobufCMessage base;
  char *name;
  char *refname;
  size_t n_partition_clause;
  PgQuery__Node **partition_clause;
  size_t n_order_clause;
  PgQuery__Node **order_clause;
  int32_t frame_options;
  PgQuery__Node *start_offset;
  PgQuery__Node *end_offset;
  size_t n_run_condition;
  PgQuery__Node **run_condition;
  uint32_t start_in_range_func;
  uint32_t end_in_range_func;
  uint32_t in_range_coll;
  protobuf_c_boolean in_range_asc;
  protobuf_c_boolean in_range_nulls_first;
  uint32_t winref;
  protobuf_c_boolean copied_order;
};
#define PG_QUERY__WINDOW_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__window_clause__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0, NULL, NULL, 0,NULL, 0, 0, 0, 0, 0, 0, 0 }


struct  PgQuery__ObjectWithArgs
{
  ProtobufCMessage base;
  size_t n_objname;
  PgQuery__Node **objname;
  size_t n_objargs;
  PgQuery__Node **objargs;
  size_t n_objfuncargs;
  PgQuery__Node **objfuncargs;
  protobuf_c_boolean args_unspecified;
};
#define PG_QUERY__OBJECT_WITH_ARGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__object_with_args__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL, 0 }


struct  PgQuery__AccessPriv
{
  ProtobufCMessage base;
  char *priv_name;
  size_t n_cols;
  PgQuery__Node **cols;
};
#define PG_QUERY__ACCESS_PRIV__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__access_priv__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


struct  PgQuery__CreateOpClassItem
{
  ProtobufCMessage base;
  int32_t itemtype;
  PgQuery__ObjectWithArgs *name;
  int32_t number;
  size_t n_order_family;
  PgQuery__Node **order_family;
  size_t n_class_args;
  PgQuery__Node **class_args;
  PgQuery__TypeName *storedtype;
};
#define PG_QUERY__CREATE_OP_CLASS_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__create_op_class_item__descriptor) \
    , 0, NULL, 0, 0,NULL, 0,NULL, NULL }


struct  PgQuery__TableLikeClause
{
  ProtobufCMessage base;
  PgQuery__RangeVar *relation;
  uint32_t options;
  uint32_t relation_oid;
};
#define PG_QUERY__TABLE_LIKE_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__table_like_clause__descriptor) \
    , NULL, 0, 0 }


struct  PgQuery__FunctionParameter
{
  ProtobufCMessage base;
  char *name;
  PgQuery__TypeName *arg_type;
  PgQuery__FunctionParameterMode mode;
  PgQuery__Node *defexpr;
};
#define PG_QUERY__FUNCTION_PARAMETER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__function_parameter__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, PG_QUERY__FUNCTION_PARAMETER_MODE__FUNCTION_PARAMETER_MODE_UNDEFINED, NULL }


struct  PgQuery__LockingClause
{
  ProtobufCMessage base;
  size_t n_locked_rels;
  PgQuery__Node **locked_rels;
  PgQuery__LockClauseStrength strength;
  PgQuery__LockWaitPolicy wait_policy;
};
#define PG_QUERY__LOCKING_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__locking_clause__descriptor) \
    , 0,NULL, PG_QUERY__LOCK_CLAUSE_STRENGTH__LOCK_CLAUSE_STRENGTH_UNDEFINED, PG_QUERY__LOCK_WAIT_POLICY__LOCK_WAIT_POLICY_UNDEFINED }


struct  PgQuery__RowMarkClause
{
  ProtobufCMessage base;
  uint32_t rti;
  PgQuery__LockClauseStrength strength;
  PgQuery__LockWaitPolicy wait_policy;
  protobuf_c_boolean pushed_down;
};
#define PG_QUERY__ROW_MARK_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__row_mark_clause__descriptor) \
    , 0, PG_QUERY__LOCK_CLAUSE_STRENGTH__LOCK_CLAUSE_STRENGTH_UNDEFINED, PG_QUERY__LOCK_WAIT_POLICY__LOCK_WAIT_POLICY_UNDEFINED, 0 }


struct  PgQuery__XmlSerialize
{
  ProtobufCMessage base;
  PgQuery__XmlOptionType xmloption;
  PgQuery__Node *expr;
  PgQuery__TypeName *type_name;
  int32_t location;
};
#define PG_QUERY__XML_SERIALIZE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__xml_serialize__descriptor) \
    , PG_QUERY__XML_OPTION_TYPE__XML_OPTION_TYPE_UNDEFINED, NULL, NULL, 0 }


struct  PgQuery__WithClause
{
  ProtobufCMessage base;
  size_t n_ctes;
  PgQuery__Node **ctes;
  protobuf_c_boolean recursive;
  int32_t location;
};
#define PG_QUERY__WITH_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__with_clause__descriptor) \
    , 0,NULL, 0, 0 }


struct  PgQuery__InferClause
{
  ProtobufCMessage base;
  size_t n_index_elems;
  PgQuery__Node **index_elems;
  PgQuery__Node *where_clause;
  char *conname;
  int32_t location;
};
#define PG_QUERY__INFER_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__infer_clause__descriptor) \
    , 0,NULL, NULL, (char *)protobuf_c_empty_string, 0 }


struct  PgQuery__OnConflictClause
{
  ProtobufCMessage base;
  PgQuery__OnConflictAction action;
  PgQuery__InferClause *infer;
  size_t n_target_list;
  PgQuery__Node **target_list;
  PgQuery__Node *where_clause;
  int32_t location;
};
#define PG_QUERY__ON_CONFLICT_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__on_conflict_clause__descriptor) \
    , PG_QUERY__ON_CONFLICT_ACTION__ON_CONFLICT_ACTION_UNDEFINED, NULL, 0,NULL, NULL, 0 }


struct  PgQuery__CTESearchClause
{
  ProtobufCMessage base;
  size_t n_search_col_list;
  PgQuery__Node **search_col_list;
  protobuf_c_boolean search_breadth_first;
  char *search_seq_column;
  int32_t location;
};
#define PG_QUERY__CTESEARCH_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__ctesearch_clause__descriptor) \
    , 0,NULL, 0, (char *)protobuf_c_empty_string, 0 }


struct  PgQuery__CTECycleClause
{
  ProtobufCMessage base;
  size_t n_cycle_col_list;
  PgQuery__Node **cycle_col_list;
  char *cycle_mark_column;
  PgQuery__Node *cycle_mark_value;
  PgQuery__Node *cycle_mark_default;
  char *cycle_path_column;
  int32_t location;
  uint32_t cycle_mark_type;
  int32_t cycle_mark_typmod;
  uint32_t cycle_mark_collation;
  uint32_t cycle_mark_neop;
};
#define PG_QUERY__CTECYCLE_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__ctecycle_clause__descriptor) \
    , 0,NULL, (char *)protobuf_c_empty_string, NULL, NULL, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0 }


struct  PgQuery__CommonTableExpr
{
  ProtobufCMessage base;
  char *ctename;
  size_t n_aliascolnames;
  PgQuery__Node **aliascolnames;
  PgQuery__CTEMaterialize ctematerialized;
  PgQuery__Node *ctequery;
  PgQuery__CTESearchClause *search_clause;
  PgQuery__CTECycleClause *cycle_clause;
  int32_t location;
  protobuf_c_boolean cterecursive;
  int32_t cterefcount;
  size_t n_ctecolnames;
  PgQuery__Node **ctecolnames;
  size_t n_ctecoltypes;
  PgQuery__Node **ctecoltypes;
  size_t n_ctecoltypmods;
  PgQuery__Node **ctecoltypmods;
  size_t n_ctecolcollations;
  PgQuery__Node **ctecolcollations;
};
#define PG_QUERY__COMMON_TABLE_EXPR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__common_table_expr__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, PG_QUERY__CTEMATERIALIZE__CTEMATERIALIZE_UNDEFINED, NULL, NULL, NULL, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  PgQuery__MergeWhenClause
{
  ProtobufCMessage base;
  protobuf_c_boolean matched;
  PgQuery__CmdType command_type;
  PgQuery__OverridingKind override;
  PgQuery__Node *condition;
  size_t n_target_list;
  PgQuery__Node **target_list;
  size_t n_values;
  PgQuery__Node **values;
};
#define PG_QUERY__MERGE_WHEN_CLAUSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__merge_when_clause__descriptor) \
    , 0, PG_QUERY__CMD_TYPE__CMD_TYPE_UNDEFINED, PG_QUERY__OVERRIDING_KIND__OVERRIDING_KIND_UNDEFINED, NULL, 0,NULL, 0,NULL }


struct  PgQuery__RoleSpec
{
  ProtobufCMessage base;
  PgQuery__RoleSpecType roletype;
  char *rolename;
  int32_t location;
};
#define PG_QUERY__ROLE_SPEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__role_spec__descriptor) \
    , PG_QUERY__ROLE_SPEC_TYPE__ROLE_SPEC_TYPE_UNDEFINED, (char *)protobuf_c_empty_string, 0 }


struct  PgQuery__TriggerTransition
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean is_new;
  protobuf_c_boolean is_table;
};
#define PG_QUERY__TRIGGER_TRANSITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__trigger_transition__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0 }


struct  PgQuery__PartitionElem
{
  ProtobufCMessage base;
  char *name;
  PgQuery__Node *expr;
  size_t n_collation;
  PgQuery__Node **collation;
  size_t n_opclass;
  PgQuery__Node **opclass;
  int32_t location;
};
#define PG_QUERY__PARTITION_ELEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__partition_elem__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, 0,NULL, 0,NULL, 0 }


struct  PgQuery__PartitionSpec
{
  ProtobufCMessage base;
  char *strategy;
  size_t n_part_params;
  PgQuery__Node **part_params;
  int32_t location;
};
#define PG_QUERY__PARTITION_SPEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__partition_spec__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL, 0 }


struct  PgQuery__PartitionBoundSpec
{
  ProtobufCMessage base;
  char *strategy;
  protobuf_c_boolean is_default;
  int32_t modulus;
  int32_t remainder;
  size_t n_listdatums;
  PgQuery__Node **listdatums;
  size_t n_lowerdatums;
  PgQuery__Node **lowerdatums;
  size_t n_upperdatums;
  PgQuery__Node **upperdatums;
  int32_t location;
};
#define PG_QUERY__PARTITION_BOUND_SPEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__partition_bound_spec__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0, 0,NULL, 0,NULL, 0,NULL, 0 }


struct  PgQuery__PartitionRangeDatum
{
  ProtobufCMessage base;
  PgQuery__PartitionRangeDatumKind kind;
  PgQuery__Node *value;
  int32_t location;
};
#define PG_QUERY__PARTITION_RANGE_DATUM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__partition_range_datum__descriptor) \
    , PG_QUERY__PARTITION_RANGE_DATUM_KIND__PARTITION_RANGE_DATUM_KIND_UNDEFINED, NULL, 0 }


struct  PgQuery__PartitionCmd
{
  ProtobufCMessage base;
  PgQuery__RangeVar *name;
  PgQuery__PartitionBoundSpec *bound;
  protobuf_c_boolean concurrent;
};
#define PG_QUERY__PARTITION_CMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__partition_cmd__descriptor) \
    , NULL, NULL, 0 }


struct  PgQuery__VacuumRelation
{
  ProtobufCMessage base;
  PgQuery__RangeVar *relation;
  uint32_t oid;
  size_t n_va_cols;
  PgQuery__Node **va_cols;
};
#define PG_QUERY__VACUUM_RELATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__vacuum_relation__descriptor) \
    , NULL, 0, 0,NULL }


struct  PgQuery__PublicationObjSpec
{
  ProtobufCMessage base;
  PgQuery__PublicationObjSpecType pubobjtype;
  char *name;
  PgQuery__PublicationTable *pubtable;
  int32_t location;
};
#define PG_QUERY__PUBLICATION_OBJ_SPEC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__publication_obj_spec__descriptor) \
    , PG_QUERY__PUBLICATION_OBJ_SPEC_TYPE__PUBLICATION_OBJ_SPEC_TYPE_UNDEFINED, (char *)protobuf_c_empty_string, NULL, 0 }


struct  PgQuery__PublicationTable
{
  ProtobufCMessage base;
  PgQuery__RangeVar *relation;
  PgQuery__Node *where_clause;
  size_t n_columns;
  PgQuery__Node **columns;
};
#define PG_QUERY__PUBLICATION_TABLE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__publication_table__descriptor) \
    , NULL, NULL, 0,NULL }


struct  PgQuery__InlineCodeBlock
{
  ProtobufCMessage base;
  char *source_text;
  uint32_t lang_oid;
  protobuf_c_boolean lang_is_trusted;
  protobuf_c_boolean atomic;
};
#define PG_QUERY__INLINE_CODE_BLOCK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__inline_code_block__descriptor) \
    , (char *)protobuf_c_empty_string, 0, 0, 0 }


struct  PgQuery__CallContext
{
  ProtobufCMessage base;
  protobuf_c_boolean atomic;
};
#define PG_QUERY__CALL_CONTEXT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__call_context__descriptor) \
    , 0 }


struct  PgQuery__ScanToken
{
  ProtobufCMessage base;
  int32_t start;
  int32_t end;
  PgQuery__Token token;
  PgQuery__KeywordKind keyword_kind;
};
#define PG_QUERY__SCAN_TOKEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pg_query__scan_token__descriptor) \
    , 0, 0, PG_QUERY__TOKEN__NUL, PG_QUERY__KEYWORD_KIND__NO_KEYWORD }


/* PgQuery__ParseResult methods */
void   pg_query__parse_result__init
                     (PgQuery__ParseResult         *message);
size_t pg_query__parse_result__get_packed_size
                     (const PgQuery__ParseResult   *message);
size_t pg_query__parse_result__pack
                     (const PgQuery__ParseResult   *message,
                      uint8_t             *out);
size_t pg_query__parse_result__pack_to_buffer
                     (const PgQuery__ParseResult   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ParseResult *
       pg_query__parse_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__parse_result__free_unpacked
                     (PgQuery__ParseResult *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ScanResult methods */
void   pg_query__scan_result__init
                     (PgQuery__ScanResult         *message);
size_t pg_query__scan_result__get_packed_size
                     (const PgQuery__ScanResult   *message);
size_t pg_query__scan_result__pack
                     (const PgQuery__ScanResult   *message,
                      uint8_t             *out);
size_t pg_query__scan_result__pack_to_buffer
                     (const PgQuery__ScanResult   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ScanResult *
       pg_query__scan_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__scan_result__free_unpacked
                     (PgQuery__ScanResult *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__Node methods */
void   pg_query__node__init
                     (PgQuery__Node         *message);
size_t pg_query__node__get_packed_size
                     (const PgQuery__Node   *message);
size_t pg_query__node__pack
                     (const PgQuery__Node   *message,
                      uint8_t             *out);
size_t pg_query__node__pack_to_buffer
                     (const PgQuery__Node   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__Node *
       pg_query__node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__node__free_unpacked
                     (PgQuery__Node *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__Integer methods */
void   pg_query__integer__init
                     (PgQuery__Integer         *message);
size_t pg_query__integer__get_packed_size
                     (const PgQuery__Integer   *message);
size_t pg_query__integer__pack
                     (const PgQuery__Integer   *message,
                      uint8_t             *out);
size_t pg_query__integer__pack_to_buffer
                     (const PgQuery__Integer   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__Integer *
       pg_query__integer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__integer__free_unpacked
                     (PgQuery__Integer *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__Float methods */
void   pg_query__float__init
                     (PgQuery__Float         *message);
size_t pg_query__float__get_packed_size
                     (const PgQuery__Float   *message);
size_t pg_query__float__pack
                     (const PgQuery__Float   *message,
                      uint8_t             *out);
size_t pg_query__float__pack_to_buffer
                     (const PgQuery__Float   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__Float *
       pg_query__float__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__float__free_unpacked
                     (PgQuery__Float *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__Boolean methods */
void   pg_query__boolean__init
                     (PgQuery__Boolean         *message);
size_t pg_query__boolean__get_packed_size
                     (const PgQuery__Boolean   *message);
size_t pg_query__boolean__pack
                     (const PgQuery__Boolean   *message,
                      uint8_t             *out);
size_t pg_query__boolean__pack_to_buffer
                     (const PgQuery__Boolean   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__Boolean *
       pg_query__boolean__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__boolean__free_unpacked
                     (PgQuery__Boolean *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__String methods */
void   pg_query__string__init
                     (PgQuery__String         *message);
size_t pg_query__string__get_packed_size
                     (const PgQuery__String   *message);
size_t pg_query__string__pack
                     (const PgQuery__String   *message,
                      uint8_t             *out);
size_t pg_query__string__pack_to_buffer
                     (const PgQuery__String   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__String *
       pg_query__string__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__string__free_unpacked
                     (PgQuery__String *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__BitString methods */
void   pg_query__bit_string__init
                     (PgQuery__BitString         *message);
size_t pg_query__bit_string__get_packed_size
                     (const PgQuery__BitString   *message);
size_t pg_query__bit_string__pack
                     (const PgQuery__BitString   *message,
                      uint8_t             *out);
size_t pg_query__bit_string__pack_to_buffer
                     (const PgQuery__BitString   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__BitString *
       pg_query__bit_string__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__bit_string__free_unpacked
                     (PgQuery__BitString *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__List methods */
void   pg_query__list__init
                     (PgQuery__List         *message);
size_t pg_query__list__get_packed_size
                     (const PgQuery__List   *message);
size_t pg_query__list__pack
                     (const PgQuery__List   *message,
                      uint8_t             *out);
size_t pg_query__list__pack_to_buffer
                     (const PgQuery__List   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__List *
       pg_query__list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__list__free_unpacked
                     (PgQuery__List *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__OidList methods */
void   pg_query__oid_list__init
                     (PgQuery__OidList         *message);
size_t pg_query__oid_list__get_packed_size
                     (const PgQuery__OidList   *message);
size_t pg_query__oid_list__pack
                     (const PgQuery__OidList   *message,
                      uint8_t             *out);
size_t pg_query__oid_list__pack_to_buffer
                     (const PgQuery__OidList   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__OidList *
       pg_query__oid_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__oid_list__free_unpacked
                     (PgQuery__OidList *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__IntList methods */
void   pg_query__int_list__init
                     (PgQuery__IntList         *message);
size_t pg_query__int_list__get_packed_size
                     (const PgQuery__IntList   *message);
size_t pg_query__int_list__pack
                     (const PgQuery__IntList   *message,
                      uint8_t             *out);
size_t pg_query__int_list__pack_to_buffer
                     (const PgQuery__IntList   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__IntList *
       pg_query__int_list__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__int_list__free_unpacked
                     (PgQuery__IntList *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AConst methods */
void   pg_query__a__const__init
                     (PgQuery__AConst         *message);
size_t pg_query__a__const__get_packed_size
                     (const PgQuery__AConst   *message);
size_t pg_query__a__const__pack
                     (const PgQuery__AConst   *message,
                      uint8_t             *out);
size_t pg_query__a__const__pack_to_buffer
                     (const PgQuery__AConst   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AConst *
       pg_query__a__const__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__a__const__free_unpacked
                     (PgQuery__AConst *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__Alias methods */
void   pg_query__alias__init
                     (PgQuery__Alias         *message);
size_t pg_query__alias__get_packed_size
                     (const PgQuery__Alias   *message);
size_t pg_query__alias__pack
                     (const PgQuery__Alias   *message,
                      uint8_t             *out);
size_t pg_query__alias__pack_to_buffer
                     (const PgQuery__Alias   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__Alias *
       pg_query__alias__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alias__free_unpacked
                     (PgQuery__Alias *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RangeVar methods */
void   pg_query__range_var__init
                     (PgQuery__RangeVar         *message);
size_t pg_query__range_var__get_packed_size
                     (const PgQuery__RangeVar   *message);
size_t pg_query__range_var__pack
                     (const PgQuery__RangeVar   *message,
                      uint8_t             *out);
size_t pg_query__range_var__pack_to_buffer
                     (const PgQuery__RangeVar   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RangeVar *
       pg_query__range_var__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__range_var__free_unpacked
                     (PgQuery__RangeVar *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__TableFunc methods */
void   pg_query__table_func__init
                     (PgQuery__TableFunc         *message);
size_t pg_query__table_func__get_packed_size
                     (const PgQuery__TableFunc   *message);
size_t pg_query__table_func__pack
                     (const PgQuery__TableFunc   *message,
                      uint8_t             *out);
size_t pg_query__table_func__pack_to_buffer
                     (const PgQuery__TableFunc   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__TableFunc *
       pg_query__table_func__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__table_func__free_unpacked
                     (PgQuery__TableFunc *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__Var methods */
void   pg_query__var__init
                     (PgQuery__Var         *message);
size_t pg_query__var__get_packed_size
                     (const PgQuery__Var   *message);
size_t pg_query__var__pack
                     (const PgQuery__Var   *message,
                      uint8_t             *out);
size_t pg_query__var__pack_to_buffer
                     (const PgQuery__Var   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__Var *
       pg_query__var__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__var__free_unpacked
                     (PgQuery__Var *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__Param methods */
void   pg_query__param__init
                     (PgQuery__Param         *message);
size_t pg_query__param__get_packed_size
                     (const PgQuery__Param   *message);
size_t pg_query__param__pack
                     (const PgQuery__Param   *message,
                      uint8_t             *out);
size_t pg_query__param__pack_to_buffer
                     (const PgQuery__Param   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__Param *
       pg_query__param__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__param__free_unpacked
                     (PgQuery__Param *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__Aggref methods */
void   pg_query__aggref__init
                     (PgQuery__Aggref         *message);
size_t pg_query__aggref__get_packed_size
                     (const PgQuery__Aggref   *message);
size_t pg_query__aggref__pack
                     (const PgQuery__Aggref   *message,
                      uint8_t             *out);
size_t pg_query__aggref__pack_to_buffer
                     (const PgQuery__Aggref   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__Aggref *
       pg_query__aggref__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__aggref__free_unpacked
                     (PgQuery__Aggref *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__GroupingFunc methods */
void   pg_query__grouping_func__init
                     (PgQuery__GroupingFunc         *message);
size_t pg_query__grouping_func__get_packed_size
                     (const PgQuery__GroupingFunc   *message);
size_t pg_query__grouping_func__pack
                     (const PgQuery__GroupingFunc   *message,
                      uint8_t             *out);
size_t pg_query__grouping_func__pack_to_buffer
                     (const PgQuery__GroupingFunc   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__GroupingFunc *
       pg_query__grouping_func__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__grouping_func__free_unpacked
                     (PgQuery__GroupingFunc *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__WindowFunc methods */
void   pg_query__window_func__init
                     (PgQuery__WindowFunc         *message);
size_t pg_query__window_func__get_packed_size
                     (const PgQuery__WindowFunc   *message);
size_t pg_query__window_func__pack
                     (const PgQuery__WindowFunc   *message,
                      uint8_t             *out);
size_t pg_query__window_func__pack_to_buffer
                     (const PgQuery__WindowFunc   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__WindowFunc *
       pg_query__window_func__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__window_func__free_unpacked
                     (PgQuery__WindowFunc *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__SubscriptingRef methods */
void   pg_query__subscripting_ref__init
                     (PgQuery__SubscriptingRef         *message);
size_t pg_query__subscripting_ref__get_packed_size
                     (const PgQuery__SubscriptingRef   *message);
size_t pg_query__subscripting_ref__pack
                     (const PgQuery__SubscriptingRef   *message,
                      uint8_t             *out);
size_t pg_query__subscripting_ref__pack_to_buffer
                     (const PgQuery__SubscriptingRef   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__SubscriptingRef *
       pg_query__subscripting_ref__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__subscripting_ref__free_unpacked
                     (PgQuery__SubscriptingRef *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__FuncExpr methods */
void   pg_query__func_expr__init
                     (PgQuery__FuncExpr         *message);
size_t pg_query__func_expr__get_packed_size
                     (const PgQuery__FuncExpr   *message);
size_t pg_query__func_expr__pack
                     (const PgQuery__FuncExpr   *message,
                      uint8_t             *out);
size_t pg_query__func_expr__pack_to_buffer
                     (const PgQuery__FuncExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__FuncExpr *
       pg_query__func_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__func_expr__free_unpacked
                     (PgQuery__FuncExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__NamedArgExpr methods */
void   pg_query__named_arg_expr__init
                     (PgQuery__NamedArgExpr         *message);
size_t pg_query__named_arg_expr__get_packed_size
                     (const PgQuery__NamedArgExpr   *message);
size_t pg_query__named_arg_expr__pack
                     (const PgQuery__NamedArgExpr   *message,
                      uint8_t             *out);
size_t pg_query__named_arg_expr__pack_to_buffer
                     (const PgQuery__NamedArgExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__NamedArgExpr *
       pg_query__named_arg_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__named_arg_expr__free_unpacked
                     (PgQuery__NamedArgExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__OpExpr methods */
void   pg_query__op_expr__init
                     (PgQuery__OpExpr         *message);
size_t pg_query__op_expr__get_packed_size
                     (const PgQuery__OpExpr   *message);
size_t pg_query__op_expr__pack
                     (const PgQuery__OpExpr   *message,
                      uint8_t             *out);
size_t pg_query__op_expr__pack_to_buffer
                     (const PgQuery__OpExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__OpExpr *
       pg_query__op_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__op_expr__free_unpacked
                     (PgQuery__OpExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DistinctExpr methods */
void   pg_query__distinct_expr__init
                     (PgQuery__DistinctExpr         *message);
size_t pg_query__distinct_expr__get_packed_size
                     (const PgQuery__DistinctExpr   *message);
size_t pg_query__distinct_expr__pack
                     (const PgQuery__DistinctExpr   *message,
                      uint8_t             *out);
size_t pg_query__distinct_expr__pack_to_buffer
                     (const PgQuery__DistinctExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DistinctExpr *
       pg_query__distinct_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__distinct_expr__free_unpacked
                     (PgQuery__DistinctExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__NullIfExpr methods */
void   pg_query__null_if_expr__init
                     (PgQuery__NullIfExpr         *message);
size_t pg_query__null_if_expr__get_packed_size
                     (const PgQuery__NullIfExpr   *message);
size_t pg_query__null_if_expr__pack
                     (const PgQuery__NullIfExpr   *message,
                      uint8_t             *out);
size_t pg_query__null_if_expr__pack_to_buffer
                     (const PgQuery__NullIfExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__NullIfExpr *
       pg_query__null_if_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__null_if_expr__free_unpacked
                     (PgQuery__NullIfExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ScalarArrayOpExpr methods */
void   pg_query__scalar_array_op_expr__init
                     (PgQuery__ScalarArrayOpExpr         *message);
size_t pg_query__scalar_array_op_expr__get_packed_size
                     (const PgQuery__ScalarArrayOpExpr   *message);
size_t pg_query__scalar_array_op_expr__pack
                     (const PgQuery__ScalarArrayOpExpr   *message,
                      uint8_t             *out);
size_t pg_query__scalar_array_op_expr__pack_to_buffer
                     (const PgQuery__ScalarArrayOpExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ScalarArrayOpExpr *
       pg_query__scalar_array_op_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__scalar_array_op_expr__free_unpacked
                     (PgQuery__ScalarArrayOpExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__BoolExpr methods */
void   pg_query__bool_expr__init
                     (PgQuery__BoolExpr         *message);
size_t pg_query__bool_expr__get_packed_size
                     (const PgQuery__BoolExpr   *message);
size_t pg_query__bool_expr__pack
                     (const PgQuery__BoolExpr   *message,
                      uint8_t             *out);
size_t pg_query__bool_expr__pack_to_buffer
                     (const PgQuery__BoolExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__BoolExpr *
       pg_query__bool_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__bool_expr__free_unpacked
                     (PgQuery__BoolExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__SubLink methods */
void   pg_query__sub_link__init
                     (PgQuery__SubLink         *message);
size_t pg_query__sub_link__get_packed_size
                     (const PgQuery__SubLink   *message);
size_t pg_query__sub_link__pack
                     (const PgQuery__SubLink   *message,
                      uint8_t             *out);
size_t pg_query__sub_link__pack_to_buffer
                     (const PgQuery__SubLink   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__SubLink *
       pg_query__sub_link__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__sub_link__free_unpacked
                     (PgQuery__SubLink *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__SubPlan methods */
void   pg_query__sub_plan__init
                     (PgQuery__SubPlan         *message);
size_t pg_query__sub_plan__get_packed_size
                     (const PgQuery__SubPlan   *message);
size_t pg_query__sub_plan__pack
                     (const PgQuery__SubPlan   *message,
                      uint8_t             *out);
size_t pg_query__sub_plan__pack_to_buffer
                     (const PgQuery__SubPlan   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__SubPlan *
       pg_query__sub_plan__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__sub_plan__free_unpacked
                     (PgQuery__SubPlan *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlternativeSubPlan methods */
void   pg_query__alternative_sub_plan__init
                     (PgQuery__AlternativeSubPlan         *message);
size_t pg_query__alternative_sub_plan__get_packed_size
                     (const PgQuery__AlternativeSubPlan   *message);
size_t pg_query__alternative_sub_plan__pack
                     (const PgQuery__AlternativeSubPlan   *message,
                      uint8_t             *out);
size_t pg_query__alternative_sub_plan__pack_to_buffer
                     (const PgQuery__AlternativeSubPlan   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlternativeSubPlan *
       pg_query__alternative_sub_plan__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alternative_sub_plan__free_unpacked
                     (PgQuery__AlternativeSubPlan *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__FieldSelect methods */
void   pg_query__field_select__init
                     (PgQuery__FieldSelect         *message);
size_t pg_query__field_select__get_packed_size
                     (const PgQuery__FieldSelect   *message);
size_t pg_query__field_select__pack
                     (const PgQuery__FieldSelect   *message,
                      uint8_t             *out);
size_t pg_query__field_select__pack_to_buffer
                     (const PgQuery__FieldSelect   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__FieldSelect *
       pg_query__field_select__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__field_select__free_unpacked
                     (PgQuery__FieldSelect *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__FieldStore methods */
void   pg_query__field_store__init
                     (PgQuery__FieldStore         *message);
size_t pg_query__field_store__get_packed_size
                     (const PgQuery__FieldStore   *message);
size_t pg_query__field_store__pack
                     (const PgQuery__FieldStore   *message,
                      uint8_t             *out);
size_t pg_query__field_store__pack_to_buffer
                     (const PgQuery__FieldStore   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__FieldStore *
       pg_query__field_store__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__field_store__free_unpacked
                     (PgQuery__FieldStore *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RelabelType methods */
void   pg_query__relabel_type__init
                     (PgQuery__RelabelType         *message);
size_t pg_query__relabel_type__get_packed_size
                     (const PgQuery__RelabelType   *message);
size_t pg_query__relabel_type__pack
                     (const PgQuery__RelabelType   *message,
                      uint8_t             *out);
size_t pg_query__relabel_type__pack_to_buffer
                     (const PgQuery__RelabelType   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RelabelType *
       pg_query__relabel_type__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__relabel_type__free_unpacked
                     (PgQuery__RelabelType *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CoerceViaIO methods */
void   pg_query__coerce_via_io__init
                     (PgQuery__CoerceViaIO         *message);
size_t pg_query__coerce_via_io__get_packed_size
                     (const PgQuery__CoerceViaIO   *message);
size_t pg_query__coerce_via_io__pack
                     (const PgQuery__CoerceViaIO   *message,
                      uint8_t             *out);
size_t pg_query__coerce_via_io__pack_to_buffer
                     (const PgQuery__CoerceViaIO   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CoerceViaIO *
       pg_query__coerce_via_io__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__coerce_via_io__free_unpacked
                     (PgQuery__CoerceViaIO *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ArrayCoerceExpr methods */
void   pg_query__array_coerce_expr__init
                     (PgQuery__ArrayCoerceExpr         *message);
size_t pg_query__array_coerce_expr__get_packed_size
                     (const PgQuery__ArrayCoerceExpr   *message);
size_t pg_query__array_coerce_expr__pack
                     (const PgQuery__ArrayCoerceExpr   *message,
                      uint8_t             *out);
size_t pg_query__array_coerce_expr__pack_to_buffer
                     (const PgQuery__ArrayCoerceExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ArrayCoerceExpr *
       pg_query__array_coerce_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__array_coerce_expr__free_unpacked
                     (PgQuery__ArrayCoerceExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ConvertRowtypeExpr methods */
void   pg_query__convert_rowtype_expr__init
                     (PgQuery__ConvertRowtypeExpr         *message);
size_t pg_query__convert_rowtype_expr__get_packed_size
                     (const PgQuery__ConvertRowtypeExpr   *message);
size_t pg_query__convert_rowtype_expr__pack
                     (const PgQuery__ConvertRowtypeExpr   *message,
                      uint8_t             *out);
size_t pg_query__convert_rowtype_expr__pack_to_buffer
                     (const PgQuery__ConvertRowtypeExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ConvertRowtypeExpr *
       pg_query__convert_rowtype_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__convert_rowtype_expr__free_unpacked
                     (PgQuery__ConvertRowtypeExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CollateExpr methods */
void   pg_query__collate_expr__init
                     (PgQuery__CollateExpr         *message);
size_t pg_query__collate_expr__get_packed_size
                     (const PgQuery__CollateExpr   *message);
size_t pg_query__collate_expr__pack
                     (const PgQuery__CollateExpr   *message,
                      uint8_t             *out);
size_t pg_query__collate_expr__pack_to_buffer
                     (const PgQuery__CollateExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CollateExpr *
       pg_query__collate_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__collate_expr__free_unpacked
                     (PgQuery__CollateExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CaseExpr methods */
void   pg_query__case_expr__init
                     (PgQuery__CaseExpr         *message);
size_t pg_query__case_expr__get_packed_size
                     (const PgQuery__CaseExpr   *message);
size_t pg_query__case_expr__pack
                     (const PgQuery__CaseExpr   *message,
                      uint8_t             *out);
size_t pg_query__case_expr__pack_to_buffer
                     (const PgQuery__CaseExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CaseExpr *
       pg_query__case_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__case_expr__free_unpacked
                     (PgQuery__CaseExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CaseWhen methods */
void   pg_query__case_when__init
                     (PgQuery__CaseWhen         *message);
size_t pg_query__case_when__get_packed_size
                     (const PgQuery__CaseWhen   *message);
size_t pg_query__case_when__pack
                     (const PgQuery__CaseWhen   *message,
                      uint8_t             *out);
size_t pg_query__case_when__pack_to_buffer
                     (const PgQuery__CaseWhen   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CaseWhen *
       pg_query__case_when__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__case_when__free_unpacked
                     (PgQuery__CaseWhen *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CaseTestExpr methods */
void   pg_query__case_test_expr__init
                     (PgQuery__CaseTestExpr         *message);
size_t pg_query__case_test_expr__get_packed_size
                     (const PgQuery__CaseTestExpr   *message);
size_t pg_query__case_test_expr__pack
                     (const PgQuery__CaseTestExpr   *message,
                      uint8_t             *out);
size_t pg_query__case_test_expr__pack_to_buffer
                     (const PgQuery__CaseTestExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CaseTestExpr *
       pg_query__case_test_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__case_test_expr__free_unpacked
                     (PgQuery__CaseTestExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ArrayExpr methods */
void   pg_query__array_expr__init
                     (PgQuery__ArrayExpr         *message);
size_t pg_query__array_expr__get_packed_size
                     (const PgQuery__ArrayExpr   *message);
size_t pg_query__array_expr__pack
                     (const PgQuery__ArrayExpr   *message,
                      uint8_t             *out);
size_t pg_query__array_expr__pack_to_buffer
                     (const PgQuery__ArrayExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ArrayExpr *
       pg_query__array_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__array_expr__free_unpacked
                     (PgQuery__ArrayExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RowExpr methods */
void   pg_query__row_expr__init
                     (PgQuery__RowExpr         *message);
size_t pg_query__row_expr__get_packed_size
                     (const PgQuery__RowExpr   *message);
size_t pg_query__row_expr__pack
                     (const PgQuery__RowExpr   *message,
                      uint8_t             *out);
size_t pg_query__row_expr__pack_to_buffer
                     (const PgQuery__RowExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RowExpr *
       pg_query__row_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__row_expr__free_unpacked
                     (PgQuery__RowExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RowCompareExpr methods */
void   pg_query__row_compare_expr__init
                     (PgQuery__RowCompareExpr         *message);
size_t pg_query__row_compare_expr__get_packed_size
                     (const PgQuery__RowCompareExpr   *message);
size_t pg_query__row_compare_expr__pack
                     (const PgQuery__RowCompareExpr   *message,
                      uint8_t             *out);
size_t pg_query__row_compare_expr__pack_to_buffer
                     (const PgQuery__RowCompareExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RowCompareExpr *
       pg_query__row_compare_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__row_compare_expr__free_unpacked
                     (PgQuery__RowCompareExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CoalesceExpr methods */
void   pg_query__coalesce_expr__init
                     (PgQuery__CoalesceExpr         *message);
size_t pg_query__coalesce_expr__get_packed_size
                     (const PgQuery__CoalesceExpr   *message);
size_t pg_query__coalesce_expr__pack
                     (const PgQuery__CoalesceExpr   *message,
                      uint8_t             *out);
size_t pg_query__coalesce_expr__pack_to_buffer
                     (const PgQuery__CoalesceExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CoalesceExpr *
       pg_query__coalesce_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__coalesce_expr__free_unpacked
                     (PgQuery__CoalesceExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__MinMaxExpr methods */
void   pg_query__min_max_expr__init
                     (PgQuery__MinMaxExpr         *message);
size_t pg_query__min_max_expr__get_packed_size
                     (const PgQuery__MinMaxExpr   *message);
size_t pg_query__min_max_expr__pack
                     (const PgQuery__MinMaxExpr   *message,
                      uint8_t             *out);
size_t pg_query__min_max_expr__pack_to_buffer
                     (const PgQuery__MinMaxExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__MinMaxExpr *
       pg_query__min_max_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__min_max_expr__free_unpacked
                     (PgQuery__MinMaxExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__SQLValueFunction methods */
void   pg_query__sqlvalue_function__init
                     (PgQuery__SQLValueFunction         *message);
size_t pg_query__sqlvalue_function__get_packed_size
                     (const PgQuery__SQLValueFunction   *message);
size_t pg_query__sqlvalue_function__pack
                     (const PgQuery__SQLValueFunction   *message,
                      uint8_t             *out);
size_t pg_query__sqlvalue_function__pack_to_buffer
                     (const PgQuery__SQLValueFunction   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__SQLValueFunction *
       pg_query__sqlvalue_function__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__sqlvalue_function__free_unpacked
                     (PgQuery__SQLValueFunction *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__XmlExpr methods */
void   pg_query__xml_expr__init
                     (PgQuery__XmlExpr         *message);
size_t pg_query__xml_expr__get_packed_size
                     (const PgQuery__XmlExpr   *message);
size_t pg_query__xml_expr__pack
                     (const PgQuery__XmlExpr   *message,
                      uint8_t             *out);
size_t pg_query__xml_expr__pack_to_buffer
                     (const PgQuery__XmlExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__XmlExpr *
       pg_query__xml_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__xml_expr__free_unpacked
                     (PgQuery__XmlExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__NullTest methods */
void   pg_query__null_test__init
                     (PgQuery__NullTest         *message);
size_t pg_query__null_test__get_packed_size
                     (const PgQuery__NullTest   *message);
size_t pg_query__null_test__pack
                     (const PgQuery__NullTest   *message,
                      uint8_t             *out);
size_t pg_query__null_test__pack_to_buffer
                     (const PgQuery__NullTest   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__NullTest *
       pg_query__null_test__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__null_test__free_unpacked
                     (PgQuery__NullTest *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__BooleanTest methods */
void   pg_query__boolean_test__init
                     (PgQuery__BooleanTest         *message);
size_t pg_query__boolean_test__get_packed_size
                     (const PgQuery__BooleanTest   *message);
size_t pg_query__boolean_test__pack
                     (const PgQuery__BooleanTest   *message,
                      uint8_t             *out);
size_t pg_query__boolean_test__pack_to_buffer
                     (const PgQuery__BooleanTest   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__BooleanTest *
       pg_query__boolean_test__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__boolean_test__free_unpacked
                     (PgQuery__BooleanTest *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CoerceToDomain methods */
void   pg_query__coerce_to_domain__init
                     (PgQuery__CoerceToDomain         *message);
size_t pg_query__coerce_to_domain__get_packed_size
                     (const PgQuery__CoerceToDomain   *message);
size_t pg_query__coerce_to_domain__pack
                     (const PgQuery__CoerceToDomain   *message,
                      uint8_t             *out);
size_t pg_query__coerce_to_domain__pack_to_buffer
                     (const PgQuery__CoerceToDomain   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CoerceToDomain *
       pg_query__coerce_to_domain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__coerce_to_domain__free_unpacked
                     (PgQuery__CoerceToDomain *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CoerceToDomainValue methods */
void   pg_query__coerce_to_domain_value__init
                     (PgQuery__CoerceToDomainValue         *message);
size_t pg_query__coerce_to_domain_value__get_packed_size
                     (const PgQuery__CoerceToDomainValue   *message);
size_t pg_query__coerce_to_domain_value__pack
                     (const PgQuery__CoerceToDomainValue   *message,
                      uint8_t             *out);
size_t pg_query__coerce_to_domain_value__pack_to_buffer
                     (const PgQuery__CoerceToDomainValue   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CoerceToDomainValue *
       pg_query__coerce_to_domain_value__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__coerce_to_domain_value__free_unpacked
                     (PgQuery__CoerceToDomainValue *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__SetToDefault methods */
void   pg_query__set_to_default__init
                     (PgQuery__SetToDefault         *message);
size_t pg_query__set_to_default__get_packed_size
                     (const PgQuery__SetToDefault   *message);
size_t pg_query__set_to_default__pack
                     (const PgQuery__SetToDefault   *message,
                      uint8_t             *out);
size_t pg_query__set_to_default__pack_to_buffer
                     (const PgQuery__SetToDefault   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__SetToDefault *
       pg_query__set_to_default__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__set_to_default__free_unpacked
                     (PgQuery__SetToDefault *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CurrentOfExpr methods */
void   pg_query__current_of_expr__init
                     (PgQuery__CurrentOfExpr         *message);
size_t pg_query__current_of_expr__get_packed_size
                     (const PgQuery__CurrentOfExpr   *message);
size_t pg_query__current_of_expr__pack
                     (const PgQuery__CurrentOfExpr   *message,
                      uint8_t             *out);
size_t pg_query__current_of_expr__pack_to_buffer
                     (const PgQuery__CurrentOfExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CurrentOfExpr *
       pg_query__current_of_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__current_of_expr__free_unpacked
                     (PgQuery__CurrentOfExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__NextValueExpr methods */
void   pg_query__next_value_expr__init
                     (PgQuery__NextValueExpr         *message);
size_t pg_query__next_value_expr__get_packed_size
                     (const PgQuery__NextValueExpr   *message);
size_t pg_query__next_value_expr__pack
                     (const PgQuery__NextValueExpr   *message,
                      uint8_t             *out);
size_t pg_query__next_value_expr__pack_to_buffer
                     (const PgQuery__NextValueExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__NextValueExpr *
       pg_query__next_value_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__next_value_expr__free_unpacked
                     (PgQuery__NextValueExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__InferenceElem methods */
void   pg_query__inference_elem__init
                     (PgQuery__InferenceElem         *message);
size_t pg_query__inference_elem__get_packed_size
                     (const PgQuery__InferenceElem   *message);
size_t pg_query__inference_elem__pack
                     (const PgQuery__InferenceElem   *message,
                      uint8_t             *out);
size_t pg_query__inference_elem__pack_to_buffer
                     (const PgQuery__InferenceElem   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__InferenceElem *
       pg_query__inference_elem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__inference_elem__free_unpacked
                     (PgQuery__InferenceElem *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__TargetEntry methods */
void   pg_query__target_entry__init
                     (PgQuery__TargetEntry         *message);
size_t pg_query__target_entry__get_packed_size
                     (const PgQuery__TargetEntry   *message);
size_t pg_query__target_entry__pack
                     (const PgQuery__TargetEntry   *message,
                      uint8_t             *out);
size_t pg_query__target_entry__pack_to_buffer
                     (const PgQuery__TargetEntry   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__TargetEntry *
       pg_query__target_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__target_entry__free_unpacked
                     (PgQuery__TargetEntry *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RangeTblRef methods */
void   pg_query__range_tbl_ref__init
                     (PgQuery__RangeTblRef         *message);
size_t pg_query__range_tbl_ref__get_packed_size
                     (const PgQuery__RangeTblRef   *message);
size_t pg_query__range_tbl_ref__pack
                     (const PgQuery__RangeTblRef   *message,
                      uint8_t             *out);
size_t pg_query__range_tbl_ref__pack_to_buffer
                     (const PgQuery__RangeTblRef   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RangeTblRef *
       pg_query__range_tbl_ref__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__range_tbl_ref__free_unpacked
                     (PgQuery__RangeTblRef *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__JoinExpr methods */
void   pg_query__join_expr__init
                     (PgQuery__JoinExpr         *message);
size_t pg_query__join_expr__get_packed_size
                     (const PgQuery__JoinExpr   *message);
size_t pg_query__join_expr__pack
                     (const PgQuery__JoinExpr   *message,
                      uint8_t             *out);
size_t pg_query__join_expr__pack_to_buffer
                     (const PgQuery__JoinExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__JoinExpr *
       pg_query__join_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__join_expr__free_unpacked
                     (PgQuery__JoinExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__FromExpr methods */
void   pg_query__from_expr__init
                     (PgQuery__FromExpr         *message);
size_t pg_query__from_expr__get_packed_size
                     (const PgQuery__FromExpr   *message);
size_t pg_query__from_expr__pack
                     (const PgQuery__FromExpr   *message,
                      uint8_t             *out);
size_t pg_query__from_expr__pack_to_buffer
                     (const PgQuery__FromExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__FromExpr *
       pg_query__from_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__from_expr__free_unpacked
                     (PgQuery__FromExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__OnConflictExpr methods */
void   pg_query__on_conflict_expr__init
                     (PgQuery__OnConflictExpr         *message);
size_t pg_query__on_conflict_expr__get_packed_size
                     (const PgQuery__OnConflictExpr   *message);
size_t pg_query__on_conflict_expr__pack
                     (const PgQuery__OnConflictExpr   *message,
                      uint8_t             *out);
size_t pg_query__on_conflict_expr__pack_to_buffer
                     (const PgQuery__OnConflictExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__OnConflictExpr *
       pg_query__on_conflict_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__on_conflict_expr__free_unpacked
                     (PgQuery__OnConflictExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__IntoClause methods */
void   pg_query__into_clause__init
                     (PgQuery__IntoClause         *message);
size_t pg_query__into_clause__get_packed_size
                     (const PgQuery__IntoClause   *message);
size_t pg_query__into_clause__pack
                     (const PgQuery__IntoClause   *message,
                      uint8_t             *out);
size_t pg_query__into_clause__pack_to_buffer
                     (const PgQuery__IntoClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__IntoClause *
       pg_query__into_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__into_clause__free_unpacked
                     (PgQuery__IntoClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__MergeAction methods */
void   pg_query__merge_action__init
                     (PgQuery__MergeAction         *message);
size_t pg_query__merge_action__get_packed_size
                     (const PgQuery__MergeAction   *message);
size_t pg_query__merge_action__pack
                     (const PgQuery__MergeAction   *message,
                      uint8_t             *out);
size_t pg_query__merge_action__pack_to_buffer
                     (const PgQuery__MergeAction   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__MergeAction *
       pg_query__merge_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__merge_action__free_unpacked
                     (PgQuery__MergeAction *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RawStmt methods */
void   pg_query__raw_stmt__init
                     (PgQuery__RawStmt         *message);
size_t pg_query__raw_stmt__get_packed_size
                     (const PgQuery__RawStmt   *message);
size_t pg_query__raw_stmt__pack
                     (const PgQuery__RawStmt   *message,
                      uint8_t             *out);
size_t pg_query__raw_stmt__pack_to_buffer
                     (const PgQuery__RawStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RawStmt *
       pg_query__raw_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__raw_stmt__free_unpacked
                     (PgQuery__RawStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__Query methods */
void   pg_query__query__init
                     (PgQuery__Query         *message);
size_t pg_query__query__get_packed_size
                     (const PgQuery__Query   *message);
size_t pg_query__query__pack
                     (const PgQuery__Query   *message,
                      uint8_t             *out);
size_t pg_query__query__pack_to_buffer
                     (const PgQuery__Query   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__Query *
       pg_query__query__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__query__free_unpacked
                     (PgQuery__Query *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__InsertStmt methods */
void   pg_query__insert_stmt__init
                     (PgQuery__InsertStmt         *message);
size_t pg_query__insert_stmt__get_packed_size
                     (const PgQuery__InsertStmt   *message);
size_t pg_query__insert_stmt__pack
                     (const PgQuery__InsertStmt   *message,
                      uint8_t             *out);
size_t pg_query__insert_stmt__pack_to_buffer
                     (const PgQuery__InsertStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__InsertStmt *
       pg_query__insert_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__insert_stmt__free_unpacked
                     (PgQuery__InsertStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DeleteStmt methods */
void   pg_query__delete_stmt__init
                     (PgQuery__DeleteStmt         *message);
size_t pg_query__delete_stmt__get_packed_size
                     (const PgQuery__DeleteStmt   *message);
size_t pg_query__delete_stmt__pack
                     (const PgQuery__DeleteStmt   *message,
                      uint8_t             *out);
size_t pg_query__delete_stmt__pack_to_buffer
                     (const PgQuery__DeleteStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DeleteStmt *
       pg_query__delete_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__delete_stmt__free_unpacked
                     (PgQuery__DeleteStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__UpdateStmt methods */
void   pg_query__update_stmt__init
                     (PgQuery__UpdateStmt         *message);
size_t pg_query__update_stmt__get_packed_size
                     (const PgQuery__UpdateStmt   *message);
size_t pg_query__update_stmt__pack
                     (const PgQuery__UpdateStmt   *message,
                      uint8_t             *out);
size_t pg_query__update_stmt__pack_to_buffer
                     (const PgQuery__UpdateStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__UpdateStmt *
       pg_query__update_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__update_stmt__free_unpacked
                     (PgQuery__UpdateStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__MergeStmt methods */
void   pg_query__merge_stmt__init
                     (PgQuery__MergeStmt         *message);
size_t pg_query__merge_stmt__get_packed_size
                     (const PgQuery__MergeStmt   *message);
size_t pg_query__merge_stmt__pack
                     (const PgQuery__MergeStmt   *message,
                      uint8_t             *out);
size_t pg_query__merge_stmt__pack_to_buffer
                     (const PgQuery__MergeStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__MergeStmt *
       pg_query__merge_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__merge_stmt__free_unpacked
                     (PgQuery__MergeStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__SelectStmt methods */
void   pg_query__select_stmt__init
                     (PgQuery__SelectStmt         *message);
size_t pg_query__select_stmt__get_packed_size
                     (const PgQuery__SelectStmt   *message);
size_t pg_query__select_stmt__pack
                     (const PgQuery__SelectStmt   *message,
                      uint8_t             *out);
size_t pg_query__select_stmt__pack_to_buffer
                     (const PgQuery__SelectStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__SelectStmt *
       pg_query__select_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__select_stmt__free_unpacked
                     (PgQuery__SelectStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ReturnStmt methods */
void   pg_query__return_stmt__init
                     (PgQuery__ReturnStmt         *message);
size_t pg_query__return_stmt__get_packed_size
                     (const PgQuery__ReturnStmt   *message);
size_t pg_query__return_stmt__pack
                     (const PgQuery__ReturnStmt   *message,
                      uint8_t             *out);
size_t pg_query__return_stmt__pack_to_buffer
                     (const PgQuery__ReturnStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ReturnStmt *
       pg_query__return_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__return_stmt__free_unpacked
                     (PgQuery__ReturnStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__PLAssignStmt methods */
void   pg_query__plassign_stmt__init
                     (PgQuery__PLAssignStmt         *message);
size_t pg_query__plassign_stmt__get_packed_size
                     (const PgQuery__PLAssignStmt   *message);
size_t pg_query__plassign_stmt__pack
                     (const PgQuery__PLAssignStmt   *message,
                      uint8_t             *out);
size_t pg_query__plassign_stmt__pack_to_buffer
                     (const PgQuery__PLAssignStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__PLAssignStmt *
       pg_query__plassign_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__plassign_stmt__free_unpacked
                     (PgQuery__PLAssignStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterTableStmt methods */
void   pg_query__alter_table_stmt__init
                     (PgQuery__AlterTableStmt         *message);
size_t pg_query__alter_table_stmt__get_packed_size
                     (const PgQuery__AlterTableStmt   *message);
size_t pg_query__alter_table_stmt__pack
                     (const PgQuery__AlterTableStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_table_stmt__pack_to_buffer
                     (const PgQuery__AlterTableStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterTableStmt *
       pg_query__alter_table_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_table_stmt__free_unpacked
                     (PgQuery__AlterTableStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterTableCmd methods */
void   pg_query__alter_table_cmd__init
                     (PgQuery__AlterTableCmd         *message);
size_t pg_query__alter_table_cmd__get_packed_size
                     (const PgQuery__AlterTableCmd   *message);
size_t pg_query__alter_table_cmd__pack
                     (const PgQuery__AlterTableCmd   *message,
                      uint8_t             *out);
size_t pg_query__alter_table_cmd__pack_to_buffer
                     (const PgQuery__AlterTableCmd   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterTableCmd *
       pg_query__alter_table_cmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_table_cmd__free_unpacked
                     (PgQuery__AlterTableCmd *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterDomainStmt methods */
void   pg_query__alter_domain_stmt__init
                     (PgQuery__AlterDomainStmt         *message);
size_t pg_query__alter_domain_stmt__get_packed_size
                     (const PgQuery__AlterDomainStmt   *message);
size_t pg_query__alter_domain_stmt__pack
                     (const PgQuery__AlterDomainStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_domain_stmt__pack_to_buffer
                     (const PgQuery__AlterDomainStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterDomainStmt *
       pg_query__alter_domain_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_domain_stmt__free_unpacked
                     (PgQuery__AlterDomainStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__SetOperationStmt methods */
void   pg_query__set_operation_stmt__init
                     (PgQuery__SetOperationStmt         *message);
size_t pg_query__set_operation_stmt__get_packed_size
                     (const PgQuery__SetOperationStmt   *message);
size_t pg_query__set_operation_stmt__pack
                     (const PgQuery__SetOperationStmt   *message,
                      uint8_t             *out);
size_t pg_query__set_operation_stmt__pack_to_buffer
                     (const PgQuery__SetOperationStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__SetOperationStmt *
       pg_query__set_operation_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__set_operation_stmt__free_unpacked
                     (PgQuery__SetOperationStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__GrantStmt methods */
void   pg_query__grant_stmt__init
                     (PgQuery__GrantStmt         *message);
size_t pg_query__grant_stmt__get_packed_size
                     (const PgQuery__GrantStmt   *message);
size_t pg_query__grant_stmt__pack
                     (const PgQuery__GrantStmt   *message,
                      uint8_t             *out);
size_t pg_query__grant_stmt__pack_to_buffer
                     (const PgQuery__GrantStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__GrantStmt *
       pg_query__grant_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__grant_stmt__free_unpacked
                     (PgQuery__GrantStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__GrantRoleStmt methods */
void   pg_query__grant_role_stmt__init
                     (PgQuery__GrantRoleStmt         *message);
size_t pg_query__grant_role_stmt__get_packed_size
                     (const PgQuery__GrantRoleStmt   *message);
size_t pg_query__grant_role_stmt__pack
                     (const PgQuery__GrantRoleStmt   *message,
                      uint8_t             *out);
size_t pg_query__grant_role_stmt__pack_to_buffer
                     (const PgQuery__GrantRoleStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__GrantRoleStmt *
       pg_query__grant_role_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__grant_role_stmt__free_unpacked
                     (PgQuery__GrantRoleStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterDefaultPrivilegesStmt methods */
void   pg_query__alter_default_privileges_stmt__init
                     (PgQuery__AlterDefaultPrivilegesStmt         *message);
size_t pg_query__alter_default_privileges_stmt__get_packed_size
                     (const PgQuery__AlterDefaultPrivilegesStmt   *message);
size_t pg_query__alter_default_privileges_stmt__pack
                     (const PgQuery__AlterDefaultPrivilegesStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_default_privileges_stmt__pack_to_buffer
                     (const PgQuery__AlterDefaultPrivilegesStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterDefaultPrivilegesStmt *
       pg_query__alter_default_privileges_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_default_privileges_stmt__free_unpacked
                     (PgQuery__AlterDefaultPrivilegesStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ClosePortalStmt methods */
void   pg_query__close_portal_stmt__init
                     (PgQuery__ClosePortalStmt         *message);
size_t pg_query__close_portal_stmt__get_packed_size
                     (const PgQuery__ClosePortalStmt   *message);
size_t pg_query__close_portal_stmt__pack
                     (const PgQuery__ClosePortalStmt   *message,
                      uint8_t             *out);
size_t pg_query__close_portal_stmt__pack_to_buffer
                     (const PgQuery__ClosePortalStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ClosePortalStmt *
       pg_query__close_portal_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__close_portal_stmt__free_unpacked
                     (PgQuery__ClosePortalStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ClusterStmt methods */
void   pg_query__cluster_stmt__init
                     (PgQuery__ClusterStmt         *message);
size_t pg_query__cluster_stmt__get_packed_size
                     (const PgQuery__ClusterStmt   *message);
size_t pg_query__cluster_stmt__pack
                     (const PgQuery__ClusterStmt   *message,
                      uint8_t             *out);
size_t pg_query__cluster_stmt__pack_to_buffer
                     (const PgQuery__ClusterStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ClusterStmt *
       pg_query__cluster_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__cluster_stmt__free_unpacked
                     (PgQuery__ClusterStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CopyStmt methods */
void   pg_query__copy_stmt__init
                     (PgQuery__CopyStmt         *message);
size_t pg_query__copy_stmt__get_packed_size
                     (const PgQuery__CopyStmt   *message);
size_t pg_query__copy_stmt__pack
                     (const PgQuery__CopyStmt   *message,
                      uint8_t             *out);
size_t pg_query__copy_stmt__pack_to_buffer
                     (const PgQuery__CopyStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CopyStmt *
       pg_query__copy_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__copy_stmt__free_unpacked
                     (PgQuery__CopyStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateStmt methods */
void   pg_query__create_stmt__init
                     (PgQuery__CreateStmt         *message);
size_t pg_query__create_stmt__get_packed_size
                     (const PgQuery__CreateStmt   *message);
size_t pg_query__create_stmt__pack
                     (const PgQuery__CreateStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_stmt__pack_to_buffer
                     (const PgQuery__CreateStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateStmt *
       pg_query__create_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_stmt__free_unpacked
                     (PgQuery__CreateStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DefineStmt methods */
void   pg_query__define_stmt__init
                     (PgQuery__DefineStmt         *message);
size_t pg_query__define_stmt__get_packed_size
                     (const PgQuery__DefineStmt   *message);
size_t pg_query__define_stmt__pack
                     (const PgQuery__DefineStmt   *message,
                      uint8_t             *out);
size_t pg_query__define_stmt__pack_to_buffer
                     (const PgQuery__DefineStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DefineStmt *
       pg_query__define_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__define_stmt__free_unpacked
                     (PgQuery__DefineStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DropStmt methods */
void   pg_query__drop_stmt__init
                     (PgQuery__DropStmt         *message);
size_t pg_query__drop_stmt__get_packed_size
                     (const PgQuery__DropStmt   *message);
size_t pg_query__drop_stmt__pack
                     (const PgQuery__DropStmt   *message,
                      uint8_t             *out);
size_t pg_query__drop_stmt__pack_to_buffer
                     (const PgQuery__DropStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DropStmt *
       pg_query__drop_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__drop_stmt__free_unpacked
                     (PgQuery__DropStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__TruncateStmt methods */
void   pg_query__truncate_stmt__init
                     (PgQuery__TruncateStmt         *message);
size_t pg_query__truncate_stmt__get_packed_size
                     (const PgQuery__TruncateStmt   *message);
size_t pg_query__truncate_stmt__pack
                     (const PgQuery__TruncateStmt   *message,
                      uint8_t             *out);
size_t pg_query__truncate_stmt__pack_to_buffer
                     (const PgQuery__TruncateStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__TruncateStmt *
       pg_query__truncate_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__truncate_stmt__free_unpacked
                     (PgQuery__TruncateStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CommentStmt methods */
void   pg_query__comment_stmt__init
                     (PgQuery__CommentStmt         *message);
size_t pg_query__comment_stmt__get_packed_size
                     (const PgQuery__CommentStmt   *message);
size_t pg_query__comment_stmt__pack
                     (const PgQuery__CommentStmt   *message,
                      uint8_t             *out);
size_t pg_query__comment_stmt__pack_to_buffer
                     (const PgQuery__CommentStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CommentStmt *
       pg_query__comment_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__comment_stmt__free_unpacked
                     (PgQuery__CommentStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__FetchStmt methods */
void   pg_query__fetch_stmt__init
                     (PgQuery__FetchStmt         *message);
size_t pg_query__fetch_stmt__get_packed_size
                     (const PgQuery__FetchStmt   *message);
size_t pg_query__fetch_stmt__pack
                     (const PgQuery__FetchStmt   *message,
                      uint8_t             *out);
size_t pg_query__fetch_stmt__pack_to_buffer
                     (const PgQuery__FetchStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__FetchStmt *
       pg_query__fetch_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__fetch_stmt__free_unpacked
                     (PgQuery__FetchStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__IndexStmt methods */
void   pg_query__index_stmt__init
                     (PgQuery__IndexStmt         *message);
size_t pg_query__index_stmt__get_packed_size
                     (const PgQuery__IndexStmt   *message);
size_t pg_query__index_stmt__pack
                     (const PgQuery__IndexStmt   *message,
                      uint8_t             *out);
size_t pg_query__index_stmt__pack_to_buffer
                     (const PgQuery__IndexStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__IndexStmt *
       pg_query__index_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__index_stmt__free_unpacked
                     (PgQuery__IndexStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateFunctionStmt methods */
void   pg_query__create_function_stmt__init
                     (PgQuery__CreateFunctionStmt         *message);
size_t pg_query__create_function_stmt__get_packed_size
                     (const PgQuery__CreateFunctionStmt   *message);
size_t pg_query__create_function_stmt__pack
                     (const PgQuery__CreateFunctionStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_function_stmt__pack_to_buffer
                     (const PgQuery__CreateFunctionStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateFunctionStmt *
       pg_query__create_function_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_function_stmt__free_unpacked
                     (PgQuery__CreateFunctionStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterFunctionStmt methods */
void   pg_query__alter_function_stmt__init
                     (PgQuery__AlterFunctionStmt         *message);
size_t pg_query__alter_function_stmt__get_packed_size
                     (const PgQuery__AlterFunctionStmt   *message);
size_t pg_query__alter_function_stmt__pack
                     (const PgQuery__AlterFunctionStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_function_stmt__pack_to_buffer
                     (const PgQuery__AlterFunctionStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterFunctionStmt *
       pg_query__alter_function_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_function_stmt__free_unpacked
                     (PgQuery__AlterFunctionStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DoStmt methods */
void   pg_query__do_stmt__init
                     (PgQuery__DoStmt         *message);
size_t pg_query__do_stmt__get_packed_size
                     (const PgQuery__DoStmt   *message);
size_t pg_query__do_stmt__pack
                     (const PgQuery__DoStmt   *message,
                      uint8_t             *out);
size_t pg_query__do_stmt__pack_to_buffer
                     (const PgQuery__DoStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DoStmt *
       pg_query__do_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__do_stmt__free_unpacked
                     (PgQuery__DoStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RenameStmt methods */
void   pg_query__rename_stmt__init
                     (PgQuery__RenameStmt         *message);
size_t pg_query__rename_stmt__get_packed_size
                     (const PgQuery__RenameStmt   *message);
size_t pg_query__rename_stmt__pack
                     (const PgQuery__RenameStmt   *message,
                      uint8_t             *out);
size_t pg_query__rename_stmt__pack_to_buffer
                     (const PgQuery__RenameStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RenameStmt *
       pg_query__rename_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__rename_stmt__free_unpacked
                     (PgQuery__RenameStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RuleStmt methods */
void   pg_query__rule_stmt__init
                     (PgQuery__RuleStmt         *message);
size_t pg_query__rule_stmt__get_packed_size
                     (const PgQuery__RuleStmt   *message);
size_t pg_query__rule_stmt__pack
                     (const PgQuery__RuleStmt   *message,
                      uint8_t             *out);
size_t pg_query__rule_stmt__pack_to_buffer
                     (const PgQuery__RuleStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RuleStmt *
       pg_query__rule_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__rule_stmt__free_unpacked
                     (PgQuery__RuleStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__NotifyStmt methods */
void   pg_query__notify_stmt__init
                     (PgQuery__NotifyStmt         *message);
size_t pg_query__notify_stmt__get_packed_size
                     (const PgQuery__NotifyStmt   *message);
size_t pg_query__notify_stmt__pack
                     (const PgQuery__NotifyStmt   *message,
                      uint8_t             *out);
size_t pg_query__notify_stmt__pack_to_buffer
                     (const PgQuery__NotifyStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__NotifyStmt *
       pg_query__notify_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__notify_stmt__free_unpacked
                     (PgQuery__NotifyStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ListenStmt methods */
void   pg_query__listen_stmt__init
                     (PgQuery__ListenStmt         *message);
size_t pg_query__listen_stmt__get_packed_size
                     (const PgQuery__ListenStmt   *message);
size_t pg_query__listen_stmt__pack
                     (const PgQuery__ListenStmt   *message,
                      uint8_t             *out);
size_t pg_query__listen_stmt__pack_to_buffer
                     (const PgQuery__ListenStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ListenStmt *
       pg_query__listen_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__listen_stmt__free_unpacked
                     (PgQuery__ListenStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__UnlistenStmt methods */
void   pg_query__unlisten_stmt__init
                     (PgQuery__UnlistenStmt         *message);
size_t pg_query__unlisten_stmt__get_packed_size
                     (const PgQuery__UnlistenStmt   *message);
size_t pg_query__unlisten_stmt__pack
                     (const PgQuery__UnlistenStmt   *message,
                      uint8_t             *out);
size_t pg_query__unlisten_stmt__pack_to_buffer
                     (const PgQuery__UnlistenStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__UnlistenStmt *
       pg_query__unlisten_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__unlisten_stmt__free_unpacked
                     (PgQuery__UnlistenStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__TransactionStmt methods */
void   pg_query__transaction_stmt__init
                     (PgQuery__TransactionStmt         *message);
size_t pg_query__transaction_stmt__get_packed_size
                     (const PgQuery__TransactionStmt   *message);
size_t pg_query__transaction_stmt__pack
                     (const PgQuery__TransactionStmt   *message,
                      uint8_t             *out);
size_t pg_query__transaction_stmt__pack_to_buffer
                     (const PgQuery__TransactionStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__TransactionStmt *
       pg_query__transaction_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__transaction_stmt__free_unpacked
                     (PgQuery__TransactionStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ViewStmt methods */
void   pg_query__view_stmt__init
                     (PgQuery__ViewStmt         *message);
size_t pg_query__view_stmt__get_packed_size
                     (const PgQuery__ViewStmt   *message);
size_t pg_query__view_stmt__pack
                     (const PgQuery__ViewStmt   *message,
                      uint8_t             *out);
size_t pg_query__view_stmt__pack_to_buffer
                     (const PgQuery__ViewStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ViewStmt *
       pg_query__view_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__view_stmt__free_unpacked
                     (PgQuery__ViewStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__LoadStmt methods */
void   pg_query__load_stmt__init
                     (PgQuery__LoadStmt         *message);
size_t pg_query__load_stmt__get_packed_size
                     (const PgQuery__LoadStmt   *message);
size_t pg_query__load_stmt__pack
                     (const PgQuery__LoadStmt   *message,
                      uint8_t             *out);
size_t pg_query__load_stmt__pack_to_buffer
                     (const PgQuery__LoadStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__LoadStmt *
       pg_query__load_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__load_stmt__free_unpacked
                     (PgQuery__LoadStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateDomainStmt methods */
void   pg_query__create_domain_stmt__init
                     (PgQuery__CreateDomainStmt         *message);
size_t pg_query__create_domain_stmt__get_packed_size
                     (const PgQuery__CreateDomainStmt   *message);
size_t pg_query__create_domain_stmt__pack
                     (const PgQuery__CreateDomainStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_domain_stmt__pack_to_buffer
                     (const PgQuery__CreateDomainStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateDomainStmt *
       pg_query__create_domain_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_domain_stmt__free_unpacked
                     (PgQuery__CreateDomainStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreatedbStmt methods */
void   pg_query__createdb_stmt__init
                     (PgQuery__CreatedbStmt         *message);
size_t pg_query__createdb_stmt__get_packed_size
                     (const PgQuery__CreatedbStmt   *message);
size_t pg_query__createdb_stmt__pack
                     (const PgQuery__CreatedbStmt   *message,
                      uint8_t             *out);
size_t pg_query__createdb_stmt__pack_to_buffer
                     (const PgQuery__CreatedbStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreatedbStmt *
       pg_query__createdb_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__createdb_stmt__free_unpacked
                     (PgQuery__CreatedbStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DropdbStmt methods */
void   pg_query__dropdb_stmt__init
                     (PgQuery__DropdbStmt         *message);
size_t pg_query__dropdb_stmt__get_packed_size
                     (const PgQuery__DropdbStmt   *message);
size_t pg_query__dropdb_stmt__pack
                     (const PgQuery__DropdbStmt   *message,
                      uint8_t             *out);
size_t pg_query__dropdb_stmt__pack_to_buffer
                     (const PgQuery__DropdbStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DropdbStmt *
       pg_query__dropdb_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__dropdb_stmt__free_unpacked
                     (PgQuery__DropdbStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__VacuumStmt methods */
void   pg_query__vacuum_stmt__init
                     (PgQuery__VacuumStmt         *message);
size_t pg_query__vacuum_stmt__get_packed_size
                     (const PgQuery__VacuumStmt   *message);
size_t pg_query__vacuum_stmt__pack
                     (const PgQuery__VacuumStmt   *message,
                      uint8_t             *out);
size_t pg_query__vacuum_stmt__pack_to_buffer
                     (const PgQuery__VacuumStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__VacuumStmt *
       pg_query__vacuum_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__vacuum_stmt__free_unpacked
                     (PgQuery__VacuumStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ExplainStmt methods */
void   pg_query__explain_stmt__init
                     (PgQuery__ExplainStmt         *message);
size_t pg_query__explain_stmt__get_packed_size
                     (const PgQuery__ExplainStmt   *message);
size_t pg_query__explain_stmt__pack
                     (const PgQuery__ExplainStmt   *message,
                      uint8_t             *out);
size_t pg_query__explain_stmt__pack_to_buffer
                     (const PgQuery__ExplainStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ExplainStmt *
       pg_query__explain_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__explain_stmt__free_unpacked
                     (PgQuery__ExplainStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateTableAsStmt methods */
void   pg_query__create_table_as_stmt__init
                     (PgQuery__CreateTableAsStmt         *message);
size_t pg_query__create_table_as_stmt__get_packed_size
                     (const PgQuery__CreateTableAsStmt   *message);
size_t pg_query__create_table_as_stmt__pack
                     (const PgQuery__CreateTableAsStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_table_as_stmt__pack_to_buffer
                     (const PgQuery__CreateTableAsStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateTableAsStmt *
       pg_query__create_table_as_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_table_as_stmt__free_unpacked
                     (PgQuery__CreateTableAsStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateSeqStmt methods */
void   pg_query__create_seq_stmt__init
                     (PgQuery__CreateSeqStmt         *message);
size_t pg_query__create_seq_stmt__get_packed_size
                     (const PgQuery__CreateSeqStmt   *message);
size_t pg_query__create_seq_stmt__pack
                     (const PgQuery__CreateSeqStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_seq_stmt__pack_to_buffer
                     (const PgQuery__CreateSeqStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateSeqStmt *
       pg_query__create_seq_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_seq_stmt__free_unpacked
                     (PgQuery__CreateSeqStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterSeqStmt methods */
void   pg_query__alter_seq_stmt__init
                     (PgQuery__AlterSeqStmt         *message);
size_t pg_query__alter_seq_stmt__get_packed_size
                     (const PgQuery__AlterSeqStmt   *message);
size_t pg_query__alter_seq_stmt__pack
                     (const PgQuery__AlterSeqStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_seq_stmt__pack_to_buffer
                     (const PgQuery__AlterSeqStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterSeqStmt *
       pg_query__alter_seq_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_seq_stmt__free_unpacked
                     (PgQuery__AlterSeqStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__VariableSetStmt methods */
void   pg_query__variable_set_stmt__init
                     (PgQuery__VariableSetStmt         *message);
size_t pg_query__variable_set_stmt__get_packed_size
                     (const PgQuery__VariableSetStmt   *message);
size_t pg_query__variable_set_stmt__pack
                     (const PgQuery__VariableSetStmt   *message,
                      uint8_t             *out);
size_t pg_query__variable_set_stmt__pack_to_buffer
                     (const PgQuery__VariableSetStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__VariableSetStmt *
       pg_query__variable_set_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__variable_set_stmt__free_unpacked
                     (PgQuery__VariableSetStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__VariableShowStmt methods */
void   pg_query__variable_show_stmt__init
                     (PgQuery__VariableShowStmt         *message);
size_t pg_query__variable_show_stmt__get_packed_size
                     (const PgQuery__VariableShowStmt   *message);
size_t pg_query__variable_show_stmt__pack
                     (const PgQuery__VariableShowStmt   *message,
                      uint8_t             *out);
size_t pg_query__variable_show_stmt__pack_to_buffer
                     (const PgQuery__VariableShowStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__VariableShowStmt *
       pg_query__variable_show_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__variable_show_stmt__free_unpacked
                     (PgQuery__VariableShowStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DiscardStmt methods */
void   pg_query__discard_stmt__init
                     (PgQuery__DiscardStmt         *message);
size_t pg_query__discard_stmt__get_packed_size
                     (const PgQuery__DiscardStmt   *message);
size_t pg_query__discard_stmt__pack
                     (const PgQuery__DiscardStmt   *message,
                      uint8_t             *out);
size_t pg_query__discard_stmt__pack_to_buffer
                     (const PgQuery__DiscardStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DiscardStmt *
       pg_query__discard_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__discard_stmt__free_unpacked
                     (PgQuery__DiscardStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateTrigStmt methods */
void   pg_query__create_trig_stmt__init
                     (PgQuery__CreateTrigStmt         *message);
size_t pg_query__create_trig_stmt__get_packed_size
                     (const PgQuery__CreateTrigStmt   *message);
size_t pg_query__create_trig_stmt__pack
                     (const PgQuery__CreateTrigStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_trig_stmt__pack_to_buffer
                     (const PgQuery__CreateTrigStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateTrigStmt *
       pg_query__create_trig_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_trig_stmt__free_unpacked
                     (PgQuery__CreateTrigStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreatePLangStmt methods */
void   pg_query__create_plang_stmt__init
                     (PgQuery__CreatePLangStmt         *message);
size_t pg_query__create_plang_stmt__get_packed_size
                     (const PgQuery__CreatePLangStmt   *message);
size_t pg_query__create_plang_stmt__pack
                     (const PgQuery__CreatePLangStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_plang_stmt__pack_to_buffer
                     (const PgQuery__CreatePLangStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreatePLangStmt *
       pg_query__create_plang_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_plang_stmt__free_unpacked
                     (PgQuery__CreatePLangStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateRoleStmt methods */
void   pg_query__create_role_stmt__init
                     (PgQuery__CreateRoleStmt         *message);
size_t pg_query__create_role_stmt__get_packed_size
                     (const PgQuery__CreateRoleStmt   *message);
size_t pg_query__create_role_stmt__pack
                     (const PgQuery__CreateRoleStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_role_stmt__pack_to_buffer
                     (const PgQuery__CreateRoleStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateRoleStmt *
       pg_query__create_role_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_role_stmt__free_unpacked
                     (PgQuery__CreateRoleStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterRoleStmt methods */
void   pg_query__alter_role_stmt__init
                     (PgQuery__AlterRoleStmt         *message);
size_t pg_query__alter_role_stmt__get_packed_size
                     (const PgQuery__AlterRoleStmt   *message);
size_t pg_query__alter_role_stmt__pack
                     (const PgQuery__AlterRoleStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_role_stmt__pack_to_buffer
                     (const PgQuery__AlterRoleStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterRoleStmt *
       pg_query__alter_role_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_role_stmt__free_unpacked
                     (PgQuery__AlterRoleStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DropRoleStmt methods */
void   pg_query__drop_role_stmt__init
                     (PgQuery__DropRoleStmt         *message);
size_t pg_query__drop_role_stmt__get_packed_size
                     (const PgQuery__DropRoleStmt   *message);
size_t pg_query__drop_role_stmt__pack
                     (const PgQuery__DropRoleStmt   *message,
                      uint8_t             *out);
size_t pg_query__drop_role_stmt__pack_to_buffer
                     (const PgQuery__DropRoleStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DropRoleStmt *
       pg_query__drop_role_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__drop_role_stmt__free_unpacked
                     (PgQuery__DropRoleStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__LockStmt methods */
void   pg_query__lock_stmt__init
                     (PgQuery__LockStmt         *message);
size_t pg_query__lock_stmt__get_packed_size
                     (const PgQuery__LockStmt   *message);
size_t pg_query__lock_stmt__pack
                     (const PgQuery__LockStmt   *message,
                      uint8_t             *out);
size_t pg_query__lock_stmt__pack_to_buffer
                     (const PgQuery__LockStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__LockStmt *
       pg_query__lock_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__lock_stmt__free_unpacked
                     (PgQuery__LockStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ConstraintsSetStmt methods */
void   pg_query__constraints_set_stmt__init
                     (PgQuery__ConstraintsSetStmt         *message);
size_t pg_query__constraints_set_stmt__get_packed_size
                     (const PgQuery__ConstraintsSetStmt   *message);
size_t pg_query__constraints_set_stmt__pack
                     (const PgQuery__ConstraintsSetStmt   *message,
                      uint8_t             *out);
size_t pg_query__constraints_set_stmt__pack_to_buffer
                     (const PgQuery__ConstraintsSetStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ConstraintsSetStmt *
       pg_query__constraints_set_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__constraints_set_stmt__free_unpacked
                     (PgQuery__ConstraintsSetStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ReindexStmt methods */
void   pg_query__reindex_stmt__init
                     (PgQuery__ReindexStmt         *message);
size_t pg_query__reindex_stmt__get_packed_size
                     (const PgQuery__ReindexStmt   *message);
size_t pg_query__reindex_stmt__pack
                     (const PgQuery__ReindexStmt   *message,
                      uint8_t             *out);
size_t pg_query__reindex_stmt__pack_to_buffer
                     (const PgQuery__ReindexStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ReindexStmt *
       pg_query__reindex_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__reindex_stmt__free_unpacked
                     (PgQuery__ReindexStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CheckPointStmt methods */
void   pg_query__check_point_stmt__init
                     (PgQuery__CheckPointStmt         *message);
size_t pg_query__check_point_stmt__get_packed_size
                     (const PgQuery__CheckPointStmt   *message);
size_t pg_query__check_point_stmt__pack
                     (const PgQuery__CheckPointStmt   *message,
                      uint8_t             *out);
size_t pg_query__check_point_stmt__pack_to_buffer
                     (const PgQuery__CheckPointStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CheckPointStmt *
       pg_query__check_point_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__check_point_stmt__free_unpacked
                     (PgQuery__CheckPointStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateSchemaStmt methods */
void   pg_query__create_schema_stmt__init
                     (PgQuery__CreateSchemaStmt         *message);
size_t pg_query__create_schema_stmt__get_packed_size
                     (const PgQuery__CreateSchemaStmt   *message);
size_t pg_query__create_schema_stmt__pack
                     (const PgQuery__CreateSchemaStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_schema_stmt__pack_to_buffer
                     (const PgQuery__CreateSchemaStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateSchemaStmt *
       pg_query__create_schema_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_schema_stmt__free_unpacked
                     (PgQuery__CreateSchemaStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterDatabaseStmt methods */
void   pg_query__alter_database_stmt__init
                     (PgQuery__AlterDatabaseStmt         *message);
size_t pg_query__alter_database_stmt__get_packed_size
                     (const PgQuery__AlterDatabaseStmt   *message);
size_t pg_query__alter_database_stmt__pack
                     (const PgQuery__AlterDatabaseStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_database_stmt__pack_to_buffer
                     (const PgQuery__AlterDatabaseStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterDatabaseStmt *
       pg_query__alter_database_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_database_stmt__free_unpacked
                     (PgQuery__AlterDatabaseStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterDatabaseRefreshCollStmt methods */
void   pg_query__alter_database_refresh_coll_stmt__init
                     (PgQuery__AlterDatabaseRefreshCollStmt         *message);
size_t pg_query__alter_database_refresh_coll_stmt__get_packed_size
                     (const PgQuery__AlterDatabaseRefreshCollStmt   *message);
size_t pg_query__alter_database_refresh_coll_stmt__pack
                     (const PgQuery__AlterDatabaseRefreshCollStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_database_refresh_coll_stmt__pack_to_buffer
                     (const PgQuery__AlterDatabaseRefreshCollStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterDatabaseRefreshCollStmt *
       pg_query__alter_database_refresh_coll_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_database_refresh_coll_stmt__free_unpacked
                     (PgQuery__AlterDatabaseRefreshCollStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterDatabaseSetStmt methods */
void   pg_query__alter_database_set_stmt__init
                     (PgQuery__AlterDatabaseSetStmt         *message);
size_t pg_query__alter_database_set_stmt__get_packed_size
                     (const PgQuery__AlterDatabaseSetStmt   *message);
size_t pg_query__alter_database_set_stmt__pack
                     (const PgQuery__AlterDatabaseSetStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_database_set_stmt__pack_to_buffer
                     (const PgQuery__AlterDatabaseSetStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterDatabaseSetStmt *
       pg_query__alter_database_set_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_database_set_stmt__free_unpacked
                     (PgQuery__AlterDatabaseSetStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterRoleSetStmt methods */
void   pg_query__alter_role_set_stmt__init
                     (PgQuery__AlterRoleSetStmt         *message);
size_t pg_query__alter_role_set_stmt__get_packed_size
                     (const PgQuery__AlterRoleSetStmt   *message);
size_t pg_query__alter_role_set_stmt__pack
                     (const PgQuery__AlterRoleSetStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_role_set_stmt__pack_to_buffer
                     (const PgQuery__AlterRoleSetStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterRoleSetStmt *
       pg_query__alter_role_set_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_role_set_stmt__free_unpacked
                     (PgQuery__AlterRoleSetStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateConversionStmt methods */
void   pg_query__create_conversion_stmt__init
                     (PgQuery__CreateConversionStmt         *message);
size_t pg_query__create_conversion_stmt__get_packed_size
                     (const PgQuery__CreateConversionStmt   *message);
size_t pg_query__create_conversion_stmt__pack
                     (const PgQuery__CreateConversionStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_conversion_stmt__pack_to_buffer
                     (const PgQuery__CreateConversionStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateConversionStmt *
       pg_query__create_conversion_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_conversion_stmt__free_unpacked
                     (PgQuery__CreateConversionStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateCastStmt methods */
void   pg_query__create_cast_stmt__init
                     (PgQuery__CreateCastStmt         *message);
size_t pg_query__create_cast_stmt__get_packed_size
                     (const PgQuery__CreateCastStmt   *message);
size_t pg_query__create_cast_stmt__pack
                     (const PgQuery__CreateCastStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_cast_stmt__pack_to_buffer
                     (const PgQuery__CreateCastStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateCastStmt *
       pg_query__create_cast_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_cast_stmt__free_unpacked
                     (PgQuery__CreateCastStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateOpClassStmt methods */
void   pg_query__create_op_class_stmt__init
                     (PgQuery__CreateOpClassStmt         *message);
size_t pg_query__create_op_class_stmt__get_packed_size
                     (const PgQuery__CreateOpClassStmt   *message);
size_t pg_query__create_op_class_stmt__pack
                     (const PgQuery__CreateOpClassStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_op_class_stmt__pack_to_buffer
                     (const PgQuery__CreateOpClassStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateOpClassStmt *
       pg_query__create_op_class_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_op_class_stmt__free_unpacked
                     (PgQuery__CreateOpClassStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateOpFamilyStmt methods */
void   pg_query__create_op_family_stmt__init
                     (PgQuery__CreateOpFamilyStmt         *message);
size_t pg_query__create_op_family_stmt__get_packed_size
                     (const PgQuery__CreateOpFamilyStmt   *message);
size_t pg_query__create_op_family_stmt__pack
                     (const PgQuery__CreateOpFamilyStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_op_family_stmt__pack_to_buffer
                     (const PgQuery__CreateOpFamilyStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateOpFamilyStmt *
       pg_query__create_op_family_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_op_family_stmt__free_unpacked
                     (PgQuery__CreateOpFamilyStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterOpFamilyStmt methods */
void   pg_query__alter_op_family_stmt__init
                     (PgQuery__AlterOpFamilyStmt         *message);
size_t pg_query__alter_op_family_stmt__get_packed_size
                     (const PgQuery__AlterOpFamilyStmt   *message);
size_t pg_query__alter_op_family_stmt__pack
                     (const PgQuery__AlterOpFamilyStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_op_family_stmt__pack_to_buffer
                     (const PgQuery__AlterOpFamilyStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterOpFamilyStmt *
       pg_query__alter_op_family_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_op_family_stmt__free_unpacked
                     (PgQuery__AlterOpFamilyStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__PrepareStmt methods */
void   pg_query__prepare_stmt__init
                     (PgQuery__PrepareStmt         *message);
size_t pg_query__prepare_stmt__get_packed_size
                     (const PgQuery__PrepareStmt   *message);
size_t pg_query__prepare_stmt__pack
                     (const PgQuery__PrepareStmt   *message,
                      uint8_t             *out);
size_t pg_query__prepare_stmt__pack_to_buffer
                     (const PgQuery__PrepareStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__PrepareStmt *
       pg_query__prepare_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__prepare_stmt__free_unpacked
                     (PgQuery__PrepareStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ExecuteStmt methods */
void   pg_query__execute_stmt__init
                     (PgQuery__ExecuteStmt         *message);
size_t pg_query__execute_stmt__get_packed_size
                     (const PgQuery__ExecuteStmt   *message);
size_t pg_query__execute_stmt__pack
                     (const PgQuery__ExecuteStmt   *message,
                      uint8_t             *out);
size_t pg_query__execute_stmt__pack_to_buffer
                     (const PgQuery__ExecuteStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ExecuteStmt *
       pg_query__execute_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__execute_stmt__free_unpacked
                     (PgQuery__ExecuteStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DeallocateStmt methods */
void   pg_query__deallocate_stmt__init
                     (PgQuery__DeallocateStmt         *message);
size_t pg_query__deallocate_stmt__get_packed_size
                     (const PgQuery__DeallocateStmt   *message);
size_t pg_query__deallocate_stmt__pack
                     (const PgQuery__DeallocateStmt   *message,
                      uint8_t             *out);
size_t pg_query__deallocate_stmt__pack_to_buffer
                     (const PgQuery__DeallocateStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DeallocateStmt *
       pg_query__deallocate_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__deallocate_stmt__free_unpacked
                     (PgQuery__DeallocateStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DeclareCursorStmt methods */
void   pg_query__declare_cursor_stmt__init
                     (PgQuery__DeclareCursorStmt         *message);
size_t pg_query__declare_cursor_stmt__get_packed_size
                     (const PgQuery__DeclareCursorStmt   *message);
size_t pg_query__declare_cursor_stmt__pack
                     (const PgQuery__DeclareCursorStmt   *message,
                      uint8_t             *out);
size_t pg_query__declare_cursor_stmt__pack_to_buffer
                     (const PgQuery__DeclareCursorStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DeclareCursorStmt *
       pg_query__declare_cursor_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__declare_cursor_stmt__free_unpacked
                     (PgQuery__DeclareCursorStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateTableSpaceStmt methods */
void   pg_query__create_table_space_stmt__init
                     (PgQuery__CreateTableSpaceStmt         *message);
size_t pg_query__create_table_space_stmt__get_packed_size
                     (const PgQuery__CreateTableSpaceStmt   *message);
size_t pg_query__create_table_space_stmt__pack
                     (const PgQuery__CreateTableSpaceStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_table_space_stmt__pack_to_buffer
                     (const PgQuery__CreateTableSpaceStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateTableSpaceStmt *
       pg_query__create_table_space_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_table_space_stmt__free_unpacked
                     (PgQuery__CreateTableSpaceStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DropTableSpaceStmt methods */
void   pg_query__drop_table_space_stmt__init
                     (PgQuery__DropTableSpaceStmt         *message);
size_t pg_query__drop_table_space_stmt__get_packed_size
                     (const PgQuery__DropTableSpaceStmt   *message);
size_t pg_query__drop_table_space_stmt__pack
                     (const PgQuery__DropTableSpaceStmt   *message,
                      uint8_t             *out);
size_t pg_query__drop_table_space_stmt__pack_to_buffer
                     (const PgQuery__DropTableSpaceStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DropTableSpaceStmt *
       pg_query__drop_table_space_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__drop_table_space_stmt__free_unpacked
                     (PgQuery__DropTableSpaceStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterObjectDependsStmt methods */
void   pg_query__alter_object_depends_stmt__init
                     (PgQuery__AlterObjectDependsStmt         *message);
size_t pg_query__alter_object_depends_stmt__get_packed_size
                     (const PgQuery__AlterObjectDependsStmt   *message);
size_t pg_query__alter_object_depends_stmt__pack
                     (const PgQuery__AlterObjectDependsStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_object_depends_stmt__pack_to_buffer
                     (const PgQuery__AlterObjectDependsStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterObjectDependsStmt *
       pg_query__alter_object_depends_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_object_depends_stmt__free_unpacked
                     (PgQuery__AlterObjectDependsStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterObjectSchemaStmt methods */
void   pg_query__alter_object_schema_stmt__init
                     (PgQuery__AlterObjectSchemaStmt         *message);
size_t pg_query__alter_object_schema_stmt__get_packed_size
                     (const PgQuery__AlterObjectSchemaStmt   *message);
size_t pg_query__alter_object_schema_stmt__pack
                     (const PgQuery__AlterObjectSchemaStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_object_schema_stmt__pack_to_buffer
                     (const PgQuery__AlterObjectSchemaStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterObjectSchemaStmt *
       pg_query__alter_object_schema_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_object_schema_stmt__free_unpacked
                     (PgQuery__AlterObjectSchemaStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterOwnerStmt methods */
void   pg_query__alter_owner_stmt__init
                     (PgQuery__AlterOwnerStmt         *message);
size_t pg_query__alter_owner_stmt__get_packed_size
                     (const PgQuery__AlterOwnerStmt   *message);
size_t pg_query__alter_owner_stmt__pack
                     (const PgQuery__AlterOwnerStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_owner_stmt__pack_to_buffer
                     (const PgQuery__AlterOwnerStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterOwnerStmt *
       pg_query__alter_owner_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_owner_stmt__free_unpacked
                     (PgQuery__AlterOwnerStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterOperatorStmt methods */
void   pg_query__alter_operator_stmt__init
                     (PgQuery__AlterOperatorStmt         *message);
size_t pg_query__alter_operator_stmt__get_packed_size
                     (const PgQuery__AlterOperatorStmt   *message);
size_t pg_query__alter_operator_stmt__pack
                     (const PgQuery__AlterOperatorStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_operator_stmt__pack_to_buffer
                     (const PgQuery__AlterOperatorStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterOperatorStmt *
       pg_query__alter_operator_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_operator_stmt__free_unpacked
                     (PgQuery__AlterOperatorStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterTypeStmt methods */
void   pg_query__alter_type_stmt__init
                     (PgQuery__AlterTypeStmt         *message);
size_t pg_query__alter_type_stmt__get_packed_size
                     (const PgQuery__AlterTypeStmt   *message);
size_t pg_query__alter_type_stmt__pack
                     (const PgQuery__AlterTypeStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_type_stmt__pack_to_buffer
                     (const PgQuery__AlterTypeStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterTypeStmt *
       pg_query__alter_type_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_type_stmt__free_unpacked
                     (PgQuery__AlterTypeStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DropOwnedStmt methods */
void   pg_query__drop_owned_stmt__init
                     (PgQuery__DropOwnedStmt         *message);
size_t pg_query__drop_owned_stmt__get_packed_size
                     (const PgQuery__DropOwnedStmt   *message);
size_t pg_query__drop_owned_stmt__pack
                     (const PgQuery__DropOwnedStmt   *message,
                      uint8_t             *out);
size_t pg_query__drop_owned_stmt__pack_to_buffer
                     (const PgQuery__DropOwnedStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DropOwnedStmt *
       pg_query__drop_owned_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__drop_owned_stmt__free_unpacked
                     (PgQuery__DropOwnedStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ReassignOwnedStmt methods */
void   pg_query__reassign_owned_stmt__init
                     (PgQuery__ReassignOwnedStmt         *message);
size_t pg_query__reassign_owned_stmt__get_packed_size
                     (const PgQuery__ReassignOwnedStmt   *message);
size_t pg_query__reassign_owned_stmt__pack
                     (const PgQuery__ReassignOwnedStmt   *message,
                      uint8_t             *out);
size_t pg_query__reassign_owned_stmt__pack_to_buffer
                     (const PgQuery__ReassignOwnedStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ReassignOwnedStmt *
       pg_query__reassign_owned_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__reassign_owned_stmt__free_unpacked
                     (PgQuery__ReassignOwnedStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CompositeTypeStmt methods */
void   pg_query__composite_type_stmt__init
                     (PgQuery__CompositeTypeStmt         *message);
size_t pg_query__composite_type_stmt__get_packed_size
                     (const PgQuery__CompositeTypeStmt   *message);
size_t pg_query__composite_type_stmt__pack
                     (const PgQuery__CompositeTypeStmt   *message,
                      uint8_t             *out);
size_t pg_query__composite_type_stmt__pack_to_buffer
                     (const PgQuery__CompositeTypeStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CompositeTypeStmt *
       pg_query__composite_type_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__composite_type_stmt__free_unpacked
                     (PgQuery__CompositeTypeStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateEnumStmt methods */
void   pg_query__create_enum_stmt__init
                     (PgQuery__CreateEnumStmt         *message);
size_t pg_query__create_enum_stmt__get_packed_size
                     (const PgQuery__CreateEnumStmt   *message);
size_t pg_query__create_enum_stmt__pack
                     (const PgQuery__CreateEnumStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_enum_stmt__pack_to_buffer
                     (const PgQuery__CreateEnumStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateEnumStmt *
       pg_query__create_enum_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_enum_stmt__free_unpacked
                     (PgQuery__CreateEnumStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateRangeStmt methods */
void   pg_query__create_range_stmt__init
                     (PgQuery__CreateRangeStmt         *message);
size_t pg_query__create_range_stmt__get_packed_size
                     (const PgQuery__CreateRangeStmt   *message);
size_t pg_query__create_range_stmt__pack
                     (const PgQuery__CreateRangeStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_range_stmt__pack_to_buffer
                     (const PgQuery__CreateRangeStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateRangeStmt *
       pg_query__create_range_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_range_stmt__free_unpacked
                     (PgQuery__CreateRangeStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterEnumStmt methods */
void   pg_query__alter_enum_stmt__init
                     (PgQuery__AlterEnumStmt         *message);
size_t pg_query__alter_enum_stmt__get_packed_size
                     (const PgQuery__AlterEnumStmt   *message);
size_t pg_query__alter_enum_stmt__pack
                     (const PgQuery__AlterEnumStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_enum_stmt__pack_to_buffer
                     (const PgQuery__AlterEnumStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterEnumStmt *
       pg_query__alter_enum_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_enum_stmt__free_unpacked
                     (PgQuery__AlterEnumStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterTSDictionaryStmt methods */
void   pg_query__alter_tsdictionary_stmt__init
                     (PgQuery__AlterTSDictionaryStmt         *message);
size_t pg_query__alter_tsdictionary_stmt__get_packed_size
                     (const PgQuery__AlterTSDictionaryStmt   *message);
size_t pg_query__alter_tsdictionary_stmt__pack
                     (const PgQuery__AlterTSDictionaryStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_tsdictionary_stmt__pack_to_buffer
                     (const PgQuery__AlterTSDictionaryStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterTSDictionaryStmt *
       pg_query__alter_tsdictionary_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_tsdictionary_stmt__free_unpacked
                     (PgQuery__AlterTSDictionaryStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterTSConfigurationStmt methods */
void   pg_query__alter_tsconfiguration_stmt__init
                     (PgQuery__AlterTSConfigurationStmt         *message);
size_t pg_query__alter_tsconfiguration_stmt__get_packed_size
                     (const PgQuery__AlterTSConfigurationStmt   *message);
size_t pg_query__alter_tsconfiguration_stmt__pack
                     (const PgQuery__AlterTSConfigurationStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_tsconfiguration_stmt__pack_to_buffer
                     (const PgQuery__AlterTSConfigurationStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterTSConfigurationStmt *
       pg_query__alter_tsconfiguration_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_tsconfiguration_stmt__free_unpacked
                     (PgQuery__AlterTSConfigurationStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateFdwStmt methods */
void   pg_query__create_fdw_stmt__init
                     (PgQuery__CreateFdwStmt         *message);
size_t pg_query__create_fdw_stmt__get_packed_size
                     (const PgQuery__CreateFdwStmt   *message);
size_t pg_query__create_fdw_stmt__pack
                     (const PgQuery__CreateFdwStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_fdw_stmt__pack_to_buffer
                     (const PgQuery__CreateFdwStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateFdwStmt *
       pg_query__create_fdw_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_fdw_stmt__free_unpacked
                     (PgQuery__CreateFdwStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterFdwStmt methods */
void   pg_query__alter_fdw_stmt__init
                     (PgQuery__AlterFdwStmt         *message);
size_t pg_query__alter_fdw_stmt__get_packed_size
                     (const PgQuery__AlterFdwStmt   *message);
size_t pg_query__alter_fdw_stmt__pack
                     (const PgQuery__AlterFdwStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_fdw_stmt__pack_to_buffer
                     (const PgQuery__AlterFdwStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterFdwStmt *
       pg_query__alter_fdw_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_fdw_stmt__free_unpacked
                     (PgQuery__AlterFdwStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateForeignServerStmt methods */
void   pg_query__create_foreign_server_stmt__init
                     (PgQuery__CreateForeignServerStmt         *message);
size_t pg_query__create_foreign_server_stmt__get_packed_size
                     (const PgQuery__CreateForeignServerStmt   *message);
size_t pg_query__create_foreign_server_stmt__pack
                     (const PgQuery__CreateForeignServerStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_foreign_server_stmt__pack_to_buffer
                     (const PgQuery__CreateForeignServerStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateForeignServerStmt *
       pg_query__create_foreign_server_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_foreign_server_stmt__free_unpacked
                     (PgQuery__CreateForeignServerStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterForeignServerStmt methods */
void   pg_query__alter_foreign_server_stmt__init
                     (PgQuery__AlterForeignServerStmt         *message);
size_t pg_query__alter_foreign_server_stmt__get_packed_size
                     (const PgQuery__AlterForeignServerStmt   *message);
size_t pg_query__alter_foreign_server_stmt__pack
                     (const PgQuery__AlterForeignServerStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_foreign_server_stmt__pack_to_buffer
                     (const PgQuery__AlterForeignServerStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterForeignServerStmt *
       pg_query__alter_foreign_server_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_foreign_server_stmt__free_unpacked
                     (PgQuery__AlterForeignServerStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateUserMappingStmt methods */
void   pg_query__create_user_mapping_stmt__init
                     (PgQuery__CreateUserMappingStmt         *message);
size_t pg_query__create_user_mapping_stmt__get_packed_size
                     (const PgQuery__CreateUserMappingStmt   *message);
size_t pg_query__create_user_mapping_stmt__pack
                     (const PgQuery__CreateUserMappingStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_user_mapping_stmt__pack_to_buffer
                     (const PgQuery__CreateUserMappingStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateUserMappingStmt *
       pg_query__create_user_mapping_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_user_mapping_stmt__free_unpacked
                     (PgQuery__CreateUserMappingStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterUserMappingStmt methods */
void   pg_query__alter_user_mapping_stmt__init
                     (PgQuery__AlterUserMappingStmt         *message);
size_t pg_query__alter_user_mapping_stmt__get_packed_size
                     (const PgQuery__AlterUserMappingStmt   *message);
size_t pg_query__alter_user_mapping_stmt__pack
                     (const PgQuery__AlterUserMappingStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_user_mapping_stmt__pack_to_buffer
                     (const PgQuery__AlterUserMappingStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterUserMappingStmt *
       pg_query__alter_user_mapping_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_user_mapping_stmt__free_unpacked
                     (PgQuery__AlterUserMappingStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DropUserMappingStmt methods */
void   pg_query__drop_user_mapping_stmt__init
                     (PgQuery__DropUserMappingStmt         *message);
size_t pg_query__drop_user_mapping_stmt__get_packed_size
                     (const PgQuery__DropUserMappingStmt   *message);
size_t pg_query__drop_user_mapping_stmt__pack
                     (const PgQuery__DropUserMappingStmt   *message,
                      uint8_t             *out);
size_t pg_query__drop_user_mapping_stmt__pack_to_buffer
                     (const PgQuery__DropUserMappingStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DropUserMappingStmt *
       pg_query__drop_user_mapping_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__drop_user_mapping_stmt__free_unpacked
                     (PgQuery__DropUserMappingStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterTableSpaceOptionsStmt methods */
void   pg_query__alter_table_space_options_stmt__init
                     (PgQuery__AlterTableSpaceOptionsStmt         *message);
size_t pg_query__alter_table_space_options_stmt__get_packed_size
                     (const PgQuery__AlterTableSpaceOptionsStmt   *message);
size_t pg_query__alter_table_space_options_stmt__pack
                     (const PgQuery__AlterTableSpaceOptionsStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_table_space_options_stmt__pack_to_buffer
                     (const PgQuery__AlterTableSpaceOptionsStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterTableSpaceOptionsStmt *
       pg_query__alter_table_space_options_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_table_space_options_stmt__free_unpacked
                     (PgQuery__AlterTableSpaceOptionsStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterTableMoveAllStmt methods */
void   pg_query__alter_table_move_all_stmt__init
                     (PgQuery__AlterTableMoveAllStmt         *message);
size_t pg_query__alter_table_move_all_stmt__get_packed_size
                     (const PgQuery__AlterTableMoveAllStmt   *message);
size_t pg_query__alter_table_move_all_stmt__pack
                     (const PgQuery__AlterTableMoveAllStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_table_move_all_stmt__pack_to_buffer
                     (const PgQuery__AlterTableMoveAllStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterTableMoveAllStmt *
       pg_query__alter_table_move_all_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_table_move_all_stmt__free_unpacked
                     (PgQuery__AlterTableMoveAllStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__SecLabelStmt methods */
void   pg_query__sec_label_stmt__init
                     (PgQuery__SecLabelStmt         *message);
size_t pg_query__sec_label_stmt__get_packed_size
                     (const PgQuery__SecLabelStmt   *message);
size_t pg_query__sec_label_stmt__pack
                     (const PgQuery__SecLabelStmt   *message,
                      uint8_t             *out);
size_t pg_query__sec_label_stmt__pack_to_buffer
                     (const PgQuery__SecLabelStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__SecLabelStmt *
       pg_query__sec_label_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__sec_label_stmt__free_unpacked
                     (PgQuery__SecLabelStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateForeignTableStmt methods */
void   pg_query__create_foreign_table_stmt__init
                     (PgQuery__CreateForeignTableStmt         *message);
size_t pg_query__create_foreign_table_stmt__get_packed_size
                     (const PgQuery__CreateForeignTableStmt   *message);
size_t pg_query__create_foreign_table_stmt__pack
                     (const PgQuery__CreateForeignTableStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_foreign_table_stmt__pack_to_buffer
                     (const PgQuery__CreateForeignTableStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateForeignTableStmt *
       pg_query__create_foreign_table_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_foreign_table_stmt__free_unpacked
                     (PgQuery__CreateForeignTableStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ImportForeignSchemaStmt methods */
void   pg_query__import_foreign_schema_stmt__init
                     (PgQuery__ImportForeignSchemaStmt         *message);
size_t pg_query__import_foreign_schema_stmt__get_packed_size
                     (const PgQuery__ImportForeignSchemaStmt   *message);
size_t pg_query__import_foreign_schema_stmt__pack
                     (const PgQuery__ImportForeignSchemaStmt   *message,
                      uint8_t             *out);
size_t pg_query__import_foreign_schema_stmt__pack_to_buffer
                     (const PgQuery__ImportForeignSchemaStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ImportForeignSchemaStmt *
       pg_query__import_foreign_schema_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__import_foreign_schema_stmt__free_unpacked
                     (PgQuery__ImportForeignSchemaStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateExtensionStmt methods */
void   pg_query__create_extension_stmt__init
                     (PgQuery__CreateExtensionStmt         *message);
size_t pg_query__create_extension_stmt__get_packed_size
                     (const PgQuery__CreateExtensionStmt   *message);
size_t pg_query__create_extension_stmt__pack
                     (const PgQuery__CreateExtensionStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_extension_stmt__pack_to_buffer
                     (const PgQuery__CreateExtensionStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateExtensionStmt *
       pg_query__create_extension_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_extension_stmt__free_unpacked
                     (PgQuery__CreateExtensionStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterExtensionStmt methods */
void   pg_query__alter_extension_stmt__init
                     (PgQuery__AlterExtensionStmt         *message);
size_t pg_query__alter_extension_stmt__get_packed_size
                     (const PgQuery__AlterExtensionStmt   *message);
size_t pg_query__alter_extension_stmt__pack
                     (const PgQuery__AlterExtensionStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_extension_stmt__pack_to_buffer
                     (const PgQuery__AlterExtensionStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterExtensionStmt *
       pg_query__alter_extension_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_extension_stmt__free_unpacked
                     (PgQuery__AlterExtensionStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterExtensionContentsStmt methods */
void   pg_query__alter_extension_contents_stmt__init
                     (PgQuery__AlterExtensionContentsStmt         *message);
size_t pg_query__alter_extension_contents_stmt__get_packed_size
                     (const PgQuery__AlterExtensionContentsStmt   *message);
size_t pg_query__alter_extension_contents_stmt__pack
                     (const PgQuery__AlterExtensionContentsStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_extension_contents_stmt__pack_to_buffer
                     (const PgQuery__AlterExtensionContentsStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterExtensionContentsStmt *
       pg_query__alter_extension_contents_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_extension_contents_stmt__free_unpacked
                     (PgQuery__AlterExtensionContentsStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateEventTrigStmt methods */
void   pg_query__create_event_trig_stmt__init
                     (PgQuery__CreateEventTrigStmt         *message);
size_t pg_query__create_event_trig_stmt__get_packed_size
                     (const PgQuery__CreateEventTrigStmt   *message);
size_t pg_query__create_event_trig_stmt__pack
                     (const PgQuery__CreateEventTrigStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_event_trig_stmt__pack_to_buffer
                     (const PgQuery__CreateEventTrigStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateEventTrigStmt *
       pg_query__create_event_trig_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_event_trig_stmt__free_unpacked
                     (PgQuery__CreateEventTrigStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterEventTrigStmt methods */
void   pg_query__alter_event_trig_stmt__init
                     (PgQuery__AlterEventTrigStmt         *message);
size_t pg_query__alter_event_trig_stmt__get_packed_size
                     (const PgQuery__AlterEventTrigStmt   *message);
size_t pg_query__alter_event_trig_stmt__pack
                     (const PgQuery__AlterEventTrigStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_event_trig_stmt__pack_to_buffer
                     (const PgQuery__AlterEventTrigStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterEventTrigStmt *
       pg_query__alter_event_trig_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_event_trig_stmt__free_unpacked
                     (PgQuery__AlterEventTrigStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RefreshMatViewStmt methods */
void   pg_query__refresh_mat_view_stmt__init
                     (PgQuery__RefreshMatViewStmt         *message);
size_t pg_query__refresh_mat_view_stmt__get_packed_size
                     (const PgQuery__RefreshMatViewStmt   *message);
size_t pg_query__refresh_mat_view_stmt__pack
                     (const PgQuery__RefreshMatViewStmt   *message,
                      uint8_t             *out);
size_t pg_query__refresh_mat_view_stmt__pack_to_buffer
                     (const PgQuery__RefreshMatViewStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RefreshMatViewStmt *
       pg_query__refresh_mat_view_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__refresh_mat_view_stmt__free_unpacked
                     (PgQuery__RefreshMatViewStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ReplicaIdentityStmt methods */
void   pg_query__replica_identity_stmt__init
                     (PgQuery__ReplicaIdentityStmt         *message);
size_t pg_query__replica_identity_stmt__get_packed_size
                     (const PgQuery__ReplicaIdentityStmt   *message);
size_t pg_query__replica_identity_stmt__pack
                     (const PgQuery__ReplicaIdentityStmt   *message,
                      uint8_t             *out);
size_t pg_query__replica_identity_stmt__pack_to_buffer
                     (const PgQuery__ReplicaIdentityStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ReplicaIdentityStmt *
       pg_query__replica_identity_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__replica_identity_stmt__free_unpacked
                     (PgQuery__ReplicaIdentityStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterSystemStmt methods */
void   pg_query__alter_system_stmt__init
                     (PgQuery__AlterSystemStmt         *message);
size_t pg_query__alter_system_stmt__get_packed_size
                     (const PgQuery__AlterSystemStmt   *message);
size_t pg_query__alter_system_stmt__pack
                     (const PgQuery__AlterSystemStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_system_stmt__pack_to_buffer
                     (const PgQuery__AlterSystemStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterSystemStmt *
       pg_query__alter_system_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_system_stmt__free_unpacked
                     (PgQuery__AlterSystemStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreatePolicyStmt methods */
void   pg_query__create_policy_stmt__init
                     (PgQuery__CreatePolicyStmt         *message);
size_t pg_query__create_policy_stmt__get_packed_size
                     (const PgQuery__CreatePolicyStmt   *message);
size_t pg_query__create_policy_stmt__pack
                     (const PgQuery__CreatePolicyStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_policy_stmt__pack_to_buffer
                     (const PgQuery__CreatePolicyStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreatePolicyStmt *
       pg_query__create_policy_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_policy_stmt__free_unpacked
                     (PgQuery__CreatePolicyStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterPolicyStmt methods */
void   pg_query__alter_policy_stmt__init
                     (PgQuery__AlterPolicyStmt         *message);
size_t pg_query__alter_policy_stmt__get_packed_size
                     (const PgQuery__AlterPolicyStmt   *message);
size_t pg_query__alter_policy_stmt__pack
                     (const PgQuery__AlterPolicyStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_policy_stmt__pack_to_buffer
                     (const PgQuery__AlterPolicyStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterPolicyStmt *
       pg_query__alter_policy_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_policy_stmt__free_unpacked
                     (PgQuery__AlterPolicyStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateTransformStmt methods */
void   pg_query__create_transform_stmt__init
                     (PgQuery__CreateTransformStmt         *message);
size_t pg_query__create_transform_stmt__get_packed_size
                     (const PgQuery__CreateTransformStmt   *message);
size_t pg_query__create_transform_stmt__pack
                     (const PgQuery__CreateTransformStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_transform_stmt__pack_to_buffer
                     (const PgQuery__CreateTransformStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateTransformStmt *
       pg_query__create_transform_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_transform_stmt__free_unpacked
                     (PgQuery__CreateTransformStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateAmStmt methods */
void   pg_query__create_am_stmt__init
                     (PgQuery__CreateAmStmt         *message);
size_t pg_query__create_am_stmt__get_packed_size
                     (const PgQuery__CreateAmStmt   *message);
size_t pg_query__create_am_stmt__pack
                     (const PgQuery__CreateAmStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_am_stmt__pack_to_buffer
                     (const PgQuery__CreateAmStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateAmStmt *
       pg_query__create_am_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_am_stmt__free_unpacked
                     (PgQuery__CreateAmStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreatePublicationStmt methods */
void   pg_query__create_publication_stmt__init
                     (PgQuery__CreatePublicationStmt         *message);
size_t pg_query__create_publication_stmt__get_packed_size
                     (const PgQuery__CreatePublicationStmt   *message);
size_t pg_query__create_publication_stmt__pack
                     (const PgQuery__CreatePublicationStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_publication_stmt__pack_to_buffer
                     (const PgQuery__CreatePublicationStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreatePublicationStmt *
       pg_query__create_publication_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_publication_stmt__free_unpacked
                     (PgQuery__CreatePublicationStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterPublicationStmt methods */
void   pg_query__alter_publication_stmt__init
                     (PgQuery__AlterPublicationStmt         *message);
size_t pg_query__alter_publication_stmt__get_packed_size
                     (const PgQuery__AlterPublicationStmt   *message);
size_t pg_query__alter_publication_stmt__pack
                     (const PgQuery__AlterPublicationStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_publication_stmt__pack_to_buffer
                     (const PgQuery__AlterPublicationStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterPublicationStmt *
       pg_query__alter_publication_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_publication_stmt__free_unpacked
                     (PgQuery__AlterPublicationStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateSubscriptionStmt methods */
void   pg_query__create_subscription_stmt__init
                     (PgQuery__CreateSubscriptionStmt         *message);
size_t pg_query__create_subscription_stmt__get_packed_size
                     (const PgQuery__CreateSubscriptionStmt   *message);
size_t pg_query__create_subscription_stmt__pack
                     (const PgQuery__CreateSubscriptionStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_subscription_stmt__pack_to_buffer
                     (const PgQuery__CreateSubscriptionStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateSubscriptionStmt *
       pg_query__create_subscription_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_subscription_stmt__free_unpacked
                     (PgQuery__CreateSubscriptionStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterSubscriptionStmt methods */
void   pg_query__alter_subscription_stmt__init
                     (PgQuery__AlterSubscriptionStmt         *message);
size_t pg_query__alter_subscription_stmt__get_packed_size
                     (const PgQuery__AlterSubscriptionStmt   *message);
size_t pg_query__alter_subscription_stmt__pack
                     (const PgQuery__AlterSubscriptionStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_subscription_stmt__pack_to_buffer
                     (const PgQuery__AlterSubscriptionStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterSubscriptionStmt *
       pg_query__alter_subscription_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_subscription_stmt__free_unpacked
                     (PgQuery__AlterSubscriptionStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DropSubscriptionStmt methods */
void   pg_query__drop_subscription_stmt__init
                     (PgQuery__DropSubscriptionStmt         *message);
size_t pg_query__drop_subscription_stmt__get_packed_size
                     (const PgQuery__DropSubscriptionStmt   *message);
size_t pg_query__drop_subscription_stmt__pack
                     (const PgQuery__DropSubscriptionStmt   *message,
                      uint8_t             *out);
size_t pg_query__drop_subscription_stmt__pack_to_buffer
                     (const PgQuery__DropSubscriptionStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DropSubscriptionStmt *
       pg_query__drop_subscription_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__drop_subscription_stmt__free_unpacked
                     (PgQuery__DropSubscriptionStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateStatsStmt methods */
void   pg_query__create_stats_stmt__init
                     (PgQuery__CreateStatsStmt         *message);
size_t pg_query__create_stats_stmt__get_packed_size
                     (const PgQuery__CreateStatsStmt   *message);
size_t pg_query__create_stats_stmt__pack
                     (const PgQuery__CreateStatsStmt   *message,
                      uint8_t             *out);
size_t pg_query__create_stats_stmt__pack_to_buffer
                     (const PgQuery__CreateStatsStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateStatsStmt *
       pg_query__create_stats_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_stats_stmt__free_unpacked
                     (PgQuery__CreateStatsStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterCollationStmt methods */
void   pg_query__alter_collation_stmt__init
                     (PgQuery__AlterCollationStmt         *message);
size_t pg_query__alter_collation_stmt__get_packed_size
                     (const PgQuery__AlterCollationStmt   *message);
size_t pg_query__alter_collation_stmt__pack
                     (const PgQuery__AlterCollationStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_collation_stmt__pack_to_buffer
                     (const PgQuery__AlterCollationStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterCollationStmt *
       pg_query__alter_collation_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_collation_stmt__free_unpacked
                     (PgQuery__AlterCollationStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CallStmt methods */
void   pg_query__call_stmt__init
                     (PgQuery__CallStmt         *message);
size_t pg_query__call_stmt__get_packed_size
                     (const PgQuery__CallStmt   *message);
size_t pg_query__call_stmt__pack
                     (const PgQuery__CallStmt   *message,
                      uint8_t             *out);
size_t pg_query__call_stmt__pack_to_buffer
                     (const PgQuery__CallStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CallStmt *
       pg_query__call_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__call_stmt__free_unpacked
                     (PgQuery__CallStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AlterStatsStmt methods */
void   pg_query__alter_stats_stmt__init
                     (PgQuery__AlterStatsStmt         *message);
size_t pg_query__alter_stats_stmt__get_packed_size
                     (const PgQuery__AlterStatsStmt   *message);
size_t pg_query__alter_stats_stmt__pack
                     (const PgQuery__AlterStatsStmt   *message,
                      uint8_t             *out);
size_t pg_query__alter_stats_stmt__pack_to_buffer
                     (const PgQuery__AlterStatsStmt   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AlterStatsStmt *
       pg_query__alter_stats_stmt__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__alter_stats_stmt__free_unpacked
                     (PgQuery__AlterStatsStmt *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AExpr methods */
void   pg_query__a__expr__init
                     (PgQuery__AExpr         *message);
size_t pg_query__a__expr__get_packed_size
                     (const PgQuery__AExpr   *message);
size_t pg_query__a__expr__pack
                     (const PgQuery__AExpr   *message,
                      uint8_t             *out);
size_t pg_query__a__expr__pack_to_buffer
                     (const PgQuery__AExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AExpr *
       pg_query__a__expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__a__expr__free_unpacked
                     (PgQuery__AExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ColumnRef methods */
void   pg_query__column_ref__init
                     (PgQuery__ColumnRef         *message);
size_t pg_query__column_ref__get_packed_size
                     (const PgQuery__ColumnRef   *message);
size_t pg_query__column_ref__pack
                     (const PgQuery__ColumnRef   *message,
                      uint8_t             *out);
size_t pg_query__column_ref__pack_to_buffer
                     (const PgQuery__ColumnRef   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ColumnRef *
       pg_query__column_ref__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__column_ref__free_unpacked
                     (PgQuery__ColumnRef *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ParamRef methods */
void   pg_query__param_ref__init
                     (PgQuery__ParamRef         *message);
size_t pg_query__param_ref__get_packed_size
                     (const PgQuery__ParamRef   *message);
size_t pg_query__param_ref__pack
                     (const PgQuery__ParamRef   *message,
                      uint8_t             *out);
size_t pg_query__param_ref__pack_to_buffer
                     (const PgQuery__ParamRef   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ParamRef *
       pg_query__param_ref__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__param_ref__free_unpacked
                     (PgQuery__ParamRef *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__FuncCall methods */
void   pg_query__func_call__init
                     (PgQuery__FuncCall         *message);
size_t pg_query__func_call__get_packed_size
                     (const PgQuery__FuncCall   *message);
size_t pg_query__func_call__pack
                     (const PgQuery__FuncCall   *message,
                      uint8_t             *out);
size_t pg_query__func_call__pack_to_buffer
                     (const PgQuery__FuncCall   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__FuncCall *
       pg_query__func_call__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__func_call__free_unpacked
                     (PgQuery__FuncCall *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AStar methods */
void   pg_query__a__star__init
                     (PgQuery__AStar         *message);
size_t pg_query__a__star__get_packed_size
                     (const PgQuery__AStar   *message);
size_t pg_query__a__star__pack
                     (const PgQuery__AStar   *message,
                      uint8_t             *out);
size_t pg_query__a__star__pack_to_buffer
                     (const PgQuery__AStar   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AStar *
       pg_query__a__star__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__a__star__free_unpacked
                     (PgQuery__AStar *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AIndices methods */
void   pg_query__a__indices__init
                     (PgQuery__AIndices         *message);
size_t pg_query__a__indices__get_packed_size
                     (const PgQuery__AIndices   *message);
size_t pg_query__a__indices__pack
                     (const PgQuery__AIndices   *message,
                      uint8_t             *out);
size_t pg_query__a__indices__pack_to_buffer
                     (const PgQuery__AIndices   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AIndices *
       pg_query__a__indices__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__a__indices__free_unpacked
                     (PgQuery__AIndices *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AIndirection methods */
void   pg_query__a__indirection__init
                     (PgQuery__AIndirection         *message);
size_t pg_query__a__indirection__get_packed_size
                     (const PgQuery__AIndirection   *message);
size_t pg_query__a__indirection__pack
                     (const PgQuery__AIndirection   *message,
                      uint8_t             *out);
size_t pg_query__a__indirection__pack_to_buffer
                     (const PgQuery__AIndirection   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AIndirection *
       pg_query__a__indirection__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__a__indirection__free_unpacked
                     (PgQuery__AIndirection *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AArrayExpr methods */
void   pg_query__a__array_expr__init
                     (PgQuery__AArrayExpr         *message);
size_t pg_query__a__array_expr__get_packed_size
                     (const PgQuery__AArrayExpr   *message);
size_t pg_query__a__array_expr__pack
                     (const PgQuery__AArrayExpr   *message,
                      uint8_t             *out);
size_t pg_query__a__array_expr__pack_to_buffer
                     (const PgQuery__AArrayExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AArrayExpr *
       pg_query__a__array_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__a__array_expr__free_unpacked
                     (PgQuery__AArrayExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ResTarget methods */
void   pg_query__res_target__init
                     (PgQuery__ResTarget         *message);
size_t pg_query__res_target__get_packed_size
                     (const PgQuery__ResTarget   *message);
size_t pg_query__res_target__pack
                     (const PgQuery__ResTarget   *message,
                      uint8_t             *out);
size_t pg_query__res_target__pack_to_buffer
                     (const PgQuery__ResTarget   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ResTarget *
       pg_query__res_target__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__res_target__free_unpacked
                     (PgQuery__ResTarget *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__MultiAssignRef methods */
void   pg_query__multi_assign_ref__init
                     (PgQuery__MultiAssignRef         *message);
size_t pg_query__multi_assign_ref__get_packed_size
                     (const PgQuery__MultiAssignRef   *message);
size_t pg_query__multi_assign_ref__pack
                     (const PgQuery__MultiAssignRef   *message,
                      uint8_t             *out);
size_t pg_query__multi_assign_ref__pack_to_buffer
                     (const PgQuery__MultiAssignRef   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__MultiAssignRef *
       pg_query__multi_assign_ref__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__multi_assign_ref__free_unpacked
                     (PgQuery__MultiAssignRef *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__TypeCast methods */
void   pg_query__type_cast__init
                     (PgQuery__TypeCast         *message);
size_t pg_query__type_cast__get_packed_size
                     (const PgQuery__TypeCast   *message);
size_t pg_query__type_cast__pack
                     (const PgQuery__TypeCast   *message,
                      uint8_t             *out);
size_t pg_query__type_cast__pack_to_buffer
                     (const PgQuery__TypeCast   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__TypeCast *
       pg_query__type_cast__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__type_cast__free_unpacked
                     (PgQuery__TypeCast *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CollateClause methods */
void   pg_query__collate_clause__init
                     (PgQuery__CollateClause         *message);
size_t pg_query__collate_clause__get_packed_size
                     (const PgQuery__CollateClause   *message);
size_t pg_query__collate_clause__pack
                     (const PgQuery__CollateClause   *message,
                      uint8_t             *out);
size_t pg_query__collate_clause__pack_to_buffer
                     (const PgQuery__CollateClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CollateClause *
       pg_query__collate_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__collate_clause__free_unpacked
                     (PgQuery__CollateClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__SortBy methods */
void   pg_query__sort_by__init
                     (PgQuery__SortBy         *message);
size_t pg_query__sort_by__get_packed_size
                     (const PgQuery__SortBy   *message);
size_t pg_query__sort_by__pack
                     (const PgQuery__SortBy   *message,
                      uint8_t             *out);
size_t pg_query__sort_by__pack_to_buffer
                     (const PgQuery__SortBy   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__SortBy *
       pg_query__sort_by__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__sort_by__free_unpacked
                     (PgQuery__SortBy *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__WindowDef methods */
void   pg_query__window_def__init
                     (PgQuery__WindowDef         *message);
size_t pg_query__window_def__get_packed_size
                     (const PgQuery__WindowDef   *message);
size_t pg_query__window_def__pack
                     (const PgQuery__WindowDef   *message,
                      uint8_t             *out);
size_t pg_query__window_def__pack_to_buffer
                     (const PgQuery__WindowDef   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__WindowDef *
       pg_query__window_def__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__window_def__free_unpacked
                     (PgQuery__WindowDef *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RangeSubselect methods */
void   pg_query__range_subselect__init
                     (PgQuery__RangeSubselect         *message);
size_t pg_query__range_subselect__get_packed_size
                     (const PgQuery__RangeSubselect   *message);
size_t pg_query__range_subselect__pack
                     (const PgQuery__RangeSubselect   *message,
                      uint8_t             *out);
size_t pg_query__range_subselect__pack_to_buffer
                     (const PgQuery__RangeSubselect   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RangeSubselect *
       pg_query__range_subselect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__range_subselect__free_unpacked
                     (PgQuery__RangeSubselect *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RangeFunction methods */
void   pg_query__range_function__init
                     (PgQuery__RangeFunction         *message);
size_t pg_query__range_function__get_packed_size
                     (const PgQuery__RangeFunction   *message);
size_t pg_query__range_function__pack
                     (const PgQuery__RangeFunction   *message,
                      uint8_t             *out);
size_t pg_query__range_function__pack_to_buffer
                     (const PgQuery__RangeFunction   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RangeFunction *
       pg_query__range_function__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__range_function__free_unpacked
                     (PgQuery__RangeFunction *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RangeTableSample methods */
void   pg_query__range_table_sample__init
                     (PgQuery__RangeTableSample         *message);
size_t pg_query__range_table_sample__get_packed_size
                     (const PgQuery__RangeTableSample   *message);
size_t pg_query__range_table_sample__pack
                     (const PgQuery__RangeTableSample   *message,
                      uint8_t             *out);
size_t pg_query__range_table_sample__pack_to_buffer
                     (const PgQuery__RangeTableSample   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RangeTableSample *
       pg_query__range_table_sample__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__range_table_sample__free_unpacked
                     (PgQuery__RangeTableSample *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RangeTableFunc methods */
void   pg_query__range_table_func__init
                     (PgQuery__RangeTableFunc         *message);
size_t pg_query__range_table_func__get_packed_size
                     (const PgQuery__RangeTableFunc   *message);
size_t pg_query__range_table_func__pack
                     (const PgQuery__RangeTableFunc   *message,
                      uint8_t             *out);
size_t pg_query__range_table_func__pack_to_buffer
                     (const PgQuery__RangeTableFunc   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RangeTableFunc *
       pg_query__range_table_func__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__range_table_func__free_unpacked
                     (PgQuery__RangeTableFunc *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RangeTableFuncCol methods */
void   pg_query__range_table_func_col__init
                     (PgQuery__RangeTableFuncCol         *message);
size_t pg_query__range_table_func_col__get_packed_size
                     (const PgQuery__RangeTableFuncCol   *message);
size_t pg_query__range_table_func_col__pack
                     (const PgQuery__RangeTableFuncCol   *message,
                      uint8_t             *out);
size_t pg_query__range_table_func_col__pack_to_buffer
                     (const PgQuery__RangeTableFuncCol   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RangeTableFuncCol *
       pg_query__range_table_func_col__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__range_table_func_col__free_unpacked
                     (PgQuery__RangeTableFuncCol *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__TypeName methods */
void   pg_query__type_name__init
                     (PgQuery__TypeName         *message);
size_t pg_query__type_name__get_packed_size
                     (const PgQuery__TypeName   *message);
size_t pg_query__type_name__pack
                     (const PgQuery__TypeName   *message,
                      uint8_t             *out);
size_t pg_query__type_name__pack_to_buffer
                     (const PgQuery__TypeName   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__TypeName *
       pg_query__type_name__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__type_name__free_unpacked
                     (PgQuery__TypeName *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ColumnDef methods */
void   pg_query__column_def__init
                     (PgQuery__ColumnDef         *message);
size_t pg_query__column_def__get_packed_size
                     (const PgQuery__ColumnDef   *message);
size_t pg_query__column_def__pack
                     (const PgQuery__ColumnDef   *message,
                      uint8_t             *out);
size_t pg_query__column_def__pack_to_buffer
                     (const PgQuery__ColumnDef   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ColumnDef *
       pg_query__column_def__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__column_def__free_unpacked
                     (PgQuery__ColumnDef *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__IndexElem methods */
void   pg_query__index_elem__init
                     (PgQuery__IndexElem         *message);
size_t pg_query__index_elem__get_packed_size
                     (const PgQuery__IndexElem   *message);
size_t pg_query__index_elem__pack
                     (const PgQuery__IndexElem   *message,
                      uint8_t             *out);
size_t pg_query__index_elem__pack_to_buffer
                     (const PgQuery__IndexElem   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__IndexElem *
       pg_query__index_elem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__index_elem__free_unpacked
                     (PgQuery__IndexElem *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__StatsElem methods */
void   pg_query__stats_elem__init
                     (PgQuery__StatsElem         *message);
size_t pg_query__stats_elem__get_packed_size
                     (const PgQuery__StatsElem   *message);
size_t pg_query__stats_elem__pack
                     (const PgQuery__StatsElem   *message,
                      uint8_t             *out);
size_t pg_query__stats_elem__pack_to_buffer
                     (const PgQuery__StatsElem   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__StatsElem *
       pg_query__stats_elem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__stats_elem__free_unpacked
                     (PgQuery__StatsElem *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__Constraint methods */
void   pg_query__constraint__init
                     (PgQuery__Constraint         *message);
size_t pg_query__constraint__get_packed_size
                     (const PgQuery__Constraint   *message);
size_t pg_query__constraint__pack
                     (const PgQuery__Constraint   *message,
                      uint8_t             *out);
size_t pg_query__constraint__pack_to_buffer
                     (const PgQuery__Constraint   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__Constraint *
       pg_query__constraint__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__constraint__free_unpacked
                     (PgQuery__Constraint *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__DefElem methods */
void   pg_query__def_elem__init
                     (PgQuery__DefElem         *message);
size_t pg_query__def_elem__get_packed_size
                     (const PgQuery__DefElem   *message);
size_t pg_query__def_elem__pack
                     (const PgQuery__DefElem   *message,
                      uint8_t             *out);
size_t pg_query__def_elem__pack_to_buffer
                     (const PgQuery__DefElem   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__DefElem *
       pg_query__def_elem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__def_elem__free_unpacked
                     (PgQuery__DefElem *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RangeTblEntry methods */
void   pg_query__range_tbl_entry__init
                     (PgQuery__RangeTblEntry         *message);
size_t pg_query__range_tbl_entry__get_packed_size
                     (const PgQuery__RangeTblEntry   *message);
size_t pg_query__range_tbl_entry__pack
                     (const PgQuery__RangeTblEntry   *message,
                      uint8_t             *out);
size_t pg_query__range_tbl_entry__pack_to_buffer
                     (const PgQuery__RangeTblEntry   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RangeTblEntry *
       pg_query__range_tbl_entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__range_tbl_entry__free_unpacked
                     (PgQuery__RangeTblEntry *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RangeTblFunction methods */
void   pg_query__range_tbl_function__init
                     (PgQuery__RangeTblFunction         *message);
size_t pg_query__range_tbl_function__get_packed_size
                     (const PgQuery__RangeTblFunction   *message);
size_t pg_query__range_tbl_function__pack
                     (const PgQuery__RangeTblFunction   *message,
                      uint8_t             *out);
size_t pg_query__range_tbl_function__pack_to_buffer
                     (const PgQuery__RangeTblFunction   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RangeTblFunction *
       pg_query__range_tbl_function__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__range_tbl_function__free_unpacked
                     (PgQuery__RangeTblFunction *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__TableSampleClause methods */
void   pg_query__table_sample_clause__init
                     (PgQuery__TableSampleClause         *message);
size_t pg_query__table_sample_clause__get_packed_size
                     (const PgQuery__TableSampleClause   *message);
size_t pg_query__table_sample_clause__pack
                     (const PgQuery__TableSampleClause   *message,
                      uint8_t             *out);
size_t pg_query__table_sample_clause__pack_to_buffer
                     (const PgQuery__TableSampleClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__TableSampleClause *
       pg_query__table_sample_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__table_sample_clause__free_unpacked
                     (PgQuery__TableSampleClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__WithCheckOption methods */
void   pg_query__with_check_option__init
                     (PgQuery__WithCheckOption         *message);
size_t pg_query__with_check_option__get_packed_size
                     (const PgQuery__WithCheckOption   *message);
size_t pg_query__with_check_option__pack
                     (const PgQuery__WithCheckOption   *message,
                      uint8_t             *out);
size_t pg_query__with_check_option__pack_to_buffer
                     (const PgQuery__WithCheckOption   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__WithCheckOption *
       pg_query__with_check_option__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__with_check_option__free_unpacked
                     (PgQuery__WithCheckOption *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__SortGroupClause methods */
void   pg_query__sort_group_clause__init
                     (PgQuery__SortGroupClause         *message);
size_t pg_query__sort_group_clause__get_packed_size
                     (const PgQuery__SortGroupClause   *message);
size_t pg_query__sort_group_clause__pack
                     (const PgQuery__SortGroupClause   *message,
                      uint8_t             *out);
size_t pg_query__sort_group_clause__pack_to_buffer
                     (const PgQuery__SortGroupClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__SortGroupClause *
       pg_query__sort_group_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__sort_group_clause__free_unpacked
                     (PgQuery__SortGroupClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__GroupingSet methods */
void   pg_query__grouping_set__init
                     (PgQuery__GroupingSet         *message);
size_t pg_query__grouping_set__get_packed_size
                     (const PgQuery__GroupingSet   *message);
size_t pg_query__grouping_set__pack
                     (const PgQuery__GroupingSet   *message,
                      uint8_t             *out);
size_t pg_query__grouping_set__pack_to_buffer
                     (const PgQuery__GroupingSet   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__GroupingSet *
       pg_query__grouping_set__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__grouping_set__free_unpacked
                     (PgQuery__GroupingSet *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__WindowClause methods */
void   pg_query__window_clause__init
                     (PgQuery__WindowClause         *message);
size_t pg_query__window_clause__get_packed_size
                     (const PgQuery__WindowClause   *message);
size_t pg_query__window_clause__pack
                     (const PgQuery__WindowClause   *message,
                      uint8_t             *out);
size_t pg_query__window_clause__pack_to_buffer
                     (const PgQuery__WindowClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__WindowClause *
       pg_query__window_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__window_clause__free_unpacked
                     (PgQuery__WindowClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ObjectWithArgs methods */
void   pg_query__object_with_args__init
                     (PgQuery__ObjectWithArgs         *message);
size_t pg_query__object_with_args__get_packed_size
                     (const PgQuery__ObjectWithArgs   *message);
size_t pg_query__object_with_args__pack
                     (const PgQuery__ObjectWithArgs   *message,
                      uint8_t             *out);
size_t pg_query__object_with_args__pack_to_buffer
                     (const PgQuery__ObjectWithArgs   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ObjectWithArgs *
       pg_query__object_with_args__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__object_with_args__free_unpacked
                     (PgQuery__ObjectWithArgs *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__AccessPriv methods */
void   pg_query__access_priv__init
                     (PgQuery__AccessPriv         *message);
size_t pg_query__access_priv__get_packed_size
                     (const PgQuery__AccessPriv   *message);
size_t pg_query__access_priv__pack
                     (const PgQuery__AccessPriv   *message,
                      uint8_t             *out);
size_t pg_query__access_priv__pack_to_buffer
                     (const PgQuery__AccessPriv   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__AccessPriv *
       pg_query__access_priv__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__access_priv__free_unpacked
                     (PgQuery__AccessPriv *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CreateOpClassItem methods */
void   pg_query__create_op_class_item__init
                     (PgQuery__CreateOpClassItem         *message);
size_t pg_query__create_op_class_item__get_packed_size
                     (const PgQuery__CreateOpClassItem   *message);
size_t pg_query__create_op_class_item__pack
                     (const PgQuery__CreateOpClassItem   *message,
                      uint8_t             *out);
size_t pg_query__create_op_class_item__pack_to_buffer
                     (const PgQuery__CreateOpClassItem   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CreateOpClassItem *
       pg_query__create_op_class_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__create_op_class_item__free_unpacked
                     (PgQuery__CreateOpClassItem *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__TableLikeClause methods */
void   pg_query__table_like_clause__init
                     (PgQuery__TableLikeClause         *message);
size_t pg_query__table_like_clause__get_packed_size
                     (const PgQuery__TableLikeClause   *message);
size_t pg_query__table_like_clause__pack
                     (const PgQuery__TableLikeClause   *message,
                      uint8_t             *out);
size_t pg_query__table_like_clause__pack_to_buffer
                     (const PgQuery__TableLikeClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__TableLikeClause *
       pg_query__table_like_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__table_like_clause__free_unpacked
                     (PgQuery__TableLikeClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__FunctionParameter methods */
void   pg_query__function_parameter__init
                     (PgQuery__FunctionParameter         *message);
size_t pg_query__function_parameter__get_packed_size
                     (const PgQuery__FunctionParameter   *message);
size_t pg_query__function_parameter__pack
                     (const PgQuery__FunctionParameter   *message,
                      uint8_t             *out);
size_t pg_query__function_parameter__pack_to_buffer
                     (const PgQuery__FunctionParameter   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__FunctionParameter *
       pg_query__function_parameter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__function_parameter__free_unpacked
                     (PgQuery__FunctionParameter *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__LockingClause methods */
void   pg_query__locking_clause__init
                     (PgQuery__LockingClause         *message);
size_t pg_query__locking_clause__get_packed_size
                     (const PgQuery__LockingClause   *message);
size_t pg_query__locking_clause__pack
                     (const PgQuery__LockingClause   *message,
                      uint8_t             *out);
size_t pg_query__locking_clause__pack_to_buffer
                     (const PgQuery__LockingClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__LockingClause *
       pg_query__locking_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__locking_clause__free_unpacked
                     (PgQuery__LockingClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RowMarkClause methods */
void   pg_query__row_mark_clause__init
                     (PgQuery__RowMarkClause         *message);
size_t pg_query__row_mark_clause__get_packed_size
                     (const PgQuery__RowMarkClause   *message);
size_t pg_query__row_mark_clause__pack
                     (const PgQuery__RowMarkClause   *message,
                      uint8_t             *out);
size_t pg_query__row_mark_clause__pack_to_buffer
                     (const PgQuery__RowMarkClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RowMarkClause *
       pg_query__row_mark_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__row_mark_clause__free_unpacked
                     (PgQuery__RowMarkClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__XmlSerialize methods */
void   pg_query__xml_serialize__init
                     (PgQuery__XmlSerialize         *message);
size_t pg_query__xml_serialize__get_packed_size
                     (const PgQuery__XmlSerialize   *message);
size_t pg_query__xml_serialize__pack
                     (const PgQuery__XmlSerialize   *message,
                      uint8_t             *out);
size_t pg_query__xml_serialize__pack_to_buffer
                     (const PgQuery__XmlSerialize   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__XmlSerialize *
       pg_query__xml_serialize__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__xml_serialize__free_unpacked
                     (PgQuery__XmlSerialize *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__WithClause methods */
void   pg_query__with_clause__init
                     (PgQuery__WithClause         *message);
size_t pg_query__with_clause__get_packed_size
                     (const PgQuery__WithClause   *message);
size_t pg_query__with_clause__pack
                     (const PgQuery__WithClause   *message,
                      uint8_t             *out);
size_t pg_query__with_clause__pack_to_buffer
                     (const PgQuery__WithClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__WithClause *
       pg_query__with_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__with_clause__free_unpacked
                     (PgQuery__WithClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__InferClause methods */
void   pg_query__infer_clause__init
                     (PgQuery__InferClause         *message);
size_t pg_query__infer_clause__get_packed_size
                     (const PgQuery__InferClause   *message);
size_t pg_query__infer_clause__pack
                     (const PgQuery__InferClause   *message,
                      uint8_t             *out);
size_t pg_query__infer_clause__pack_to_buffer
                     (const PgQuery__InferClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__InferClause *
       pg_query__infer_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__infer_clause__free_unpacked
                     (PgQuery__InferClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__OnConflictClause methods */
void   pg_query__on_conflict_clause__init
                     (PgQuery__OnConflictClause         *message);
size_t pg_query__on_conflict_clause__get_packed_size
                     (const PgQuery__OnConflictClause   *message);
size_t pg_query__on_conflict_clause__pack
                     (const PgQuery__OnConflictClause   *message,
                      uint8_t             *out);
size_t pg_query__on_conflict_clause__pack_to_buffer
                     (const PgQuery__OnConflictClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__OnConflictClause *
       pg_query__on_conflict_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__on_conflict_clause__free_unpacked
                     (PgQuery__OnConflictClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CTESearchClause methods */
void   pg_query__ctesearch_clause__init
                     (PgQuery__CTESearchClause         *message);
size_t pg_query__ctesearch_clause__get_packed_size
                     (const PgQuery__CTESearchClause   *message);
size_t pg_query__ctesearch_clause__pack
                     (const PgQuery__CTESearchClause   *message,
                      uint8_t             *out);
size_t pg_query__ctesearch_clause__pack_to_buffer
                     (const PgQuery__CTESearchClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CTESearchClause *
       pg_query__ctesearch_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__ctesearch_clause__free_unpacked
                     (PgQuery__CTESearchClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CTECycleClause methods */
void   pg_query__ctecycle_clause__init
                     (PgQuery__CTECycleClause         *message);
size_t pg_query__ctecycle_clause__get_packed_size
                     (const PgQuery__CTECycleClause   *message);
size_t pg_query__ctecycle_clause__pack
                     (const PgQuery__CTECycleClause   *message,
                      uint8_t             *out);
size_t pg_query__ctecycle_clause__pack_to_buffer
                     (const PgQuery__CTECycleClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CTECycleClause *
       pg_query__ctecycle_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__ctecycle_clause__free_unpacked
                     (PgQuery__CTECycleClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CommonTableExpr methods */
void   pg_query__common_table_expr__init
                     (PgQuery__CommonTableExpr         *message);
size_t pg_query__common_table_expr__get_packed_size
                     (const PgQuery__CommonTableExpr   *message);
size_t pg_query__common_table_expr__pack
                     (const PgQuery__CommonTableExpr   *message,
                      uint8_t             *out);
size_t pg_query__common_table_expr__pack_to_buffer
                     (const PgQuery__CommonTableExpr   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CommonTableExpr *
       pg_query__common_table_expr__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__common_table_expr__free_unpacked
                     (PgQuery__CommonTableExpr *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__MergeWhenClause methods */
void   pg_query__merge_when_clause__init
                     (PgQuery__MergeWhenClause         *message);
size_t pg_query__merge_when_clause__get_packed_size
                     (const PgQuery__MergeWhenClause   *message);
size_t pg_query__merge_when_clause__pack
                     (const PgQuery__MergeWhenClause   *message,
                      uint8_t             *out);
size_t pg_query__merge_when_clause__pack_to_buffer
                     (const PgQuery__MergeWhenClause   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__MergeWhenClause *
       pg_query__merge_when_clause__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__merge_when_clause__free_unpacked
                     (PgQuery__MergeWhenClause *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__RoleSpec methods */
void   pg_query__role_spec__init
                     (PgQuery__RoleSpec         *message);
size_t pg_query__role_spec__get_packed_size
                     (const PgQuery__RoleSpec   *message);
size_t pg_query__role_spec__pack
                     (const PgQuery__RoleSpec   *message,
                      uint8_t             *out);
size_t pg_query__role_spec__pack_to_buffer
                     (const PgQuery__RoleSpec   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__RoleSpec *
       pg_query__role_spec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__role_spec__free_unpacked
                     (PgQuery__RoleSpec *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__TriggerTransition methods */
void   pg_query__trigger_transition__init
                     (PgQuery__TriggerTransition         *message);
size_t pg_query__trigger_transition__get_packed_size
                     (const PgQuery__TriggerTransition   *message);
size_t pg_query__trigger_transition__pack
                     (const PgQuery__TriggerTransition   *message,
                      uint8_t             *out);
size_t pg_query__trigger_transition__pack_to_buffer
                     (const PgQuery__TriggerTransition   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__TriggerTransition *
       pg_query__trigger_transition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__trigger_transition__free_unpacked
                     (PgQuery__TriggerTransition *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__PartitionElem methods */
void   pg_query__partition_elem__init
                     (PgQuery__PartitionElem         *message);
size_t pg_query__partition_elem__get_packed_size
                     (const PgQuery__PartitionElem   *message);
size_t pg_query__partition_elem__pack
                     (const PgQuery__PartitionElem   *message,
                      uint8_t             *out);
size_t pg_query__partition_elem__pack_to_buffer
                     (const PgQuery__PartitionElem   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__PartitionElem *
       pg_query__partition_elem__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__partition_elem__free_unpacked
                     (PgQuery__PartitionElem *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__PartitionSpec methods */
void   pg_query__partition_spec__init
                     (PgQuery__PartitionSpec         *message);
size_t pg_query__partition_spec__get_packed_size
                     (const PgQuery__PartitionSpec   *message);
size_t pg_query__partition_spec__pack
                     (const PgQuery__PartitionSpec   *message,
                      uint8_t             *out);
size_t pg_query__partition_spec__pack_to_buffer
                     (const PgQuery__PartitionSpec   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__PartitionSpec *
       pg_query__partition_spec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__partition_spec__free_unpacked
                     (PgQuery__PartitionSpec *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__PartitionBoundSpec methods */
void   pg_query__partition_bound_spec__init
                     (PgQuery__PartitionBoundSpec         *message);
size_t pg_query__partition_bound_spec__get_packed_size
                     (const PgQuery__PartitionBoundSpec   *message);
size_t pg_query__partition_bound_spec__pack
                     (const PgQuery__PartitionBoundSpec   *message,
                      uint8_t             *out);
size_t pg_query__partition_bound_spec__pack_to_buffer
                     (const PgQuery__PartitionBoundSpec   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__PartitionBoundSpec *
       pg_query__partition_bound_spec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__partition_bound_spec__free_unpacked
                     (PgQuery__PartitionBoundSpec *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__PartitionRangeDatum methods */
void   pg_query__partition_range_datum__init
                     (PgQuery__PartitionRangeDatum         *message);
size_t pg_query__partition_range_datum__get_packed_size
                     (const PgQuery__PartitionRangeDatum   *message);
size_t pg_query__partition_range_datum__pack
                     (const PgQuery__PartitionRangeDatum   *message,
                      uint8_t             *out);
size_t pg_query__partition_range_datum__pack_to_buffer
                     (const PgQuery__PartitionRangeDatum   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__PartitionRangeDatum *
       pg_query__partition_range_datum__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__partition_range_datum__free_unpacked
                     (PgQuery__PartitionRangeDatum *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__PartitionCmd methods */
void   pg_query__partition_cmd__init
                     (PgQuery__PartitionCmd         *message);
size_t pg_query__partition_cmd__get_packed_size
                     (const PgQuery__PartitionCmd   *message);
size_t pg_query__partition_cmd__pack
                     (const PgQuery__PartitionCmd   *message,
                      uint8_t             *out);
size_t pg_query__partition_cmd__pack_to_buffer
                     (const PgQuery__PartitionCmd   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__PartitionCmd *
       pg_query__partition_cmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__partition_cmd__free_unpacked
                     (PgQuery__PartitionCmd *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__VacuumRelation methods */
void   pg_query__vacuum_relation__init
                     (PgQuery__VacuumRelation         *message);
size_t pg_query__vacuum_relation__get_packed_size
                     (const PgQuery__VacuumRelation   *message);
size_t pg_query__vacuum_relation__pack
                     (const PgQuery__VacuumRelation   *message,
                      uint8_t             *out);
size_t pg_query__vacuum_relation__pack_to_buffer
                     (const PgQuery__VacuumRelation   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__VacuumRelation *
       pg_query__vacuum_relation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__vacuum_relation__free_unpacked
                     (PgQuery__VacuumRelation *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__PublicationObjSpec methods */
void   pg_query__publication_obj_spec__init
                     (PgQuery__PublicationObjSpec         *message);
size_t pg_query__publication_obj_spec__get_packed_size
                     (const PgQuery__PublicationObjSpec   *message);
size_t pg_query__publication_obj_spec__pack
                     (const PgQuery__PublicationObjSpec   *message,
                      uint8_t             *out);
size_t pg_query__publication_obj_spec__pack_to_buffer
                     (const PgQuery__PublicationObjSpec   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__PublicationObjSpec *
       pg_query__publication_obj_spec__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__publication_obj_spec__free_unpacked
                     (PgQuery__PublicationObjSpec *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__PublicationTable methods */
void   pg_query__publication_table__init
                     (PgQuery__PublicationTable         *message);
size_t pg_query__publication_table__get_packed_size
                     (const PgQuery__PublicationTable   *message);
size_t pg_query__publication_table__pack
                     (const PgQuery__PublicationTable   *message,
                      uint8_t             *out);
size_t pg_query__publication_table__pack_to_buffer
                     (const PgQuery__PublicationTable   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__PublicationTable *
       pg_query__publication_table__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__publication_table__free_unpacked
                     (PgQuery__PublicationTable *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__InlineCodeBlock methods */
void   pg_query__inline_code_block__init
                     (PgQuery__InlineCodeBlock         *message);
size_t pg_query__inline_code_block__get_packed_size
                     (const PgQuery__InlineCodeBlock   *message);
size_t pg_query__inline_code_block__pack
                     (const PgQuery__InlineCodeBlock   *message,
                      uint8_t             *out);
size_t pg_query__inline_code_block__pack_to_buffer
                     (const PgQuery__InlineCodeBlock   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__InlineCodeBlock *
       pg_query__inline_code_block__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__inline_code_block__free_unpacked
                     (PgQuery__InlineCodeBlock *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__CallContext methods */
void   pg_query__call_context__init
                     (PgQuery__CallContext         *message);
size_t pg_query__call_context__get_packed_size
                     (const PgQuery__CallContext   *message);
size_t pg_query__call_context__pack
                     (const PgQuery__CallContext   *message,
                      uint8_t             *out);
size_t pg_query__call_context__pack_to_buffer
                     (const PgQuery__CallContext   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__CallContext *
       pg_query__call_context__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__call_context__free_unpacked
                     (PgQuery__CallContext *message,
                      ProtobufCAllocator *allocator);
/* PgQuery__ScanToken methods */
void   pg_query__scan_token__init
                     (PgQuery__ScanToken         *message);
size_t pg_query__scan_token__get_packed_size
                     (const PgQuery__ScanToken   *message);
size_t pg_query__scan_token__pack
                     (const PgQuery__ScanToken   *message,
                      uint8_t             *out);
size_t pg_query__scan_token__pack_to_buffer
                     (const PgQuery__ScanToken   *message,
                      ProtobufCBuffer     *buffer);
PgQuery__ScanToken *
       pg_query__scan_token__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pg_query__scan_token__free_unpacked
                     (PgQuery__ScanToken *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*PgQuery__ParseResult_Closure)
                 (const PgQuery__ParseResult *message,
                  void *closure_data);
typedef void (*PgQuery__ScanResult_Closure)
                 (const PgQuery__ScanResult *message,
                  void *closure_data);
typedef void (*PgQuery__Node_Closure)
                 (const PgQuery__Node *message,
                  void *closure_data);
typedef void (*PgQuery__Integer_Closure)
                 (const PgQuery__Integer *message,
                  void *closure_data);
typedef void (*PgQuery__Float_Closure)
                 (const PgQuery__Float *message,
                  void *closure_data);
typedef void (*PgQuery__Boolean_Closure)
                 (const PgQuery__Boolean *message,
                  void *closure_data);
typedef void (*PgQuery__String_Closure)
                 (const PgQuery__String *message,
                  void *closure_data);
typedef void (*PgQuery__BitString_Closure)
                 (const PgQuery__BitString *message,
                  void *closure_data);
typedef void (*PgQuery__List_Closure)
                 (const PgQuery__List *message,
                  void *closure_data);
typedef void (*PgQuery__OidList_Closure)
                 (const PgQuery__OidList *message,
                  void *closure_data);
typedef void (*PgQuery__IntList_Closure)
                 (const PgQuery__IntList *message,
                  void *closure_data);
typedef void (*PgQuery__AConst_Closure)
                 (const PgQuery__AConst *message,
                  void *closure_data);
typedef void (*PgQuery__Alias_Closure)
                 (const PgQuery__Alias *message,
                  void *closure_data);
typedef void (*PgQuery__RangeVar_Closure)
                 (const PgQuery__RangeVar *message,
                  void *closure_data);
typedef void (*PgQuery__TableFunc_Closure)
                 (const PgQuery__TableFunc *message,
                  void *closure_data);
typedef void (*PgQuery__Var_Closure)
                 (const PgQuery__Var *message,
                  void *closure_data);
typedef void (*PgQuery__Param_Closure)
                 (const PgQuery__Param *message,
                  void *closure_data);
typedef void (*PgQuery__Aggref_Closure)
                 (const PgQuery__Aggref *message,
                  void *closure_data);
typedef void (*PgQuery__GroupingFunc_Closure)
                 (const PgQuery__GroupingFunc *message,
                  void *closure_data);
typedef void (*PgQuery__WindowFunc_Closure)
                 (const PgQuery__WindowFunc *message,
                  void *closure_data);
typedef void (*PgQuery__SubscriptingRef_Closure)
                 (const PgQuery__SubscriptingRef *message,
                  void *closure_data);
typedef void (*PgQuery__FuncExpr_Closure)
                 (const PgQuery__FuncExpr *message,
                  void *closure_data);
typedef void (*PgQuery__NamedArgExpr_Closure)
                 (const PgQuery__NamedArgExpr *message,
                  void *closure_data);
typedef void (*PgQuery__OpExpr_Closure)
                 (const PgQuery__OpExpr *message,
                  void *closure_data);
typedef void (*PgQuery__DistinctExpr_Closure)
                 (const PgQuery__DistinctExpr *message,
                  void *closure_data);
typedef void (*PgQuery__NullIfExpr_Closure)
                 (const PgQuery__NullIfExpr *message,
                  void *closure_data);
typedef void (*PgQuery__ScalarArrayOpExpr_Closure)
                 (const PgQuery__ScalarArrayOpExpr *message,
                  void *closure_data);
typedef void (*PgQuery__BoolExpr_Closure)
                 (const PgQuery__BoolExpr *message,
                  void *closure_data);
typedef void (*PgQuery__SubLink_Closure)
                 (const PgQuery__SubLink *message,
                  void *closure_data);
typedef void (*PgQuery__SubPlan_Closure)
                 (const PgQuery__SubPlan *message,
                  void *closure_data);
typedef void (*PgQuery__AlternativeSubPlan_Closure)
                 (const PgQuery__AlternativeSubPlan *message,
                  void *closure_data);
typedef void (*PgQuery__FieldSelect_Closure)
                 (const PgQuery__FieldSelect *message,
                  void *closure_data);
typedef void (*PgQuery__FieldStore_Closure)
                 (const PgQuery__FieldStore *message,
                  void *closure_data);
typedef void (*PgQuery__RelabelType_Closure)
                 (const PgQuery__RelabelType *message,
                  void *closure_data);
typedef void (*PgQuery__CoerceViaIO_Closure)
                 (const PgQuery__CoerceViaIO *message,
                  void *closure_data);
typedef void (*PgQuery__ArrayCoerceExpr_Closure)
                 (const PgQuery__ArrayCoerceExpr *message,
                  void *closure_data);
typedef void (*PgQuery__ConvertRowtypeExpr_Closure)
                 (const PgQuery__ConvertRowtypeExpr *message,
                  void *closure_data);
typedef void (*PgQuery__CollateExpr_Closure)
                 (const PgQuery__CollateExpr *message,
                  void *closure_data);
typedef void (*PgQuery__CaseExpr_Closure)
                 (const PgQuery__CaseExpr *message,
                  void *closure_data);
typedef void (*PgQuery__CaseWhen_Closure)
                 (const PgQuery__CaseWhen *message,
                  void *closure_data);
typedef void (*PgQuery__CaseTestExpr_Closure)
                 (const PgQuery__CaseTestExpr *message,
                  void *closure_data);
typedef void (*PgQuery__ArrayExpr_Closure)
                 (const PgQuery__ArrayExpr *message,
                  void *closure_data);
typedef void (*PgQuery__RowExpr_Closure)
                 (const PgQuery__RowExpr *message,
                  void *closure_data);
typedef void (*PgQuery__RowCompareExpr_Closure)
                 (const PgQuery__RowCompareExpr *message,
                  void *closure_data);
typedef void (*PgQuery__CoalesceExpr_Closure)
                 (const PgQuery__CoalesceExpr *message,
                  void *closure_data);
typedef void (*PgQuery__MinMaxExpr_Closure)
                 (const PgQuery__MinMaxExpr *message,
                  void *closure_data);
typedef void (*PgQuery__SQLValueFunction_Closure)
                 (const PgQuery__SQLValueFunction *message,
                  void *closure_data);
typedef void (*PgQuery__XmlExpr_Closure)
                 (const PgQuery__XmlExpr *message,
                  void *closure_data);
typedef void (*PgQuery__NullTest_Closure)
                 (const PgQuery__NullTest *message,
                  void *closure_data);
typedef void (*PgQuery__BooleanTest_Closure)
                 (const PgQuery__BooleanTest *message,
                  void *closure_data);
typedef void (*PgQuery__CoerceToDomain_Closure)
                 (const PgQuery__CoerceToDomain *message,
                  void *closure_data);
typedef void (*PgQuery__CoerceToDomainValue_Closure)
                 (const PgQuery__CoerceToDomainValue *message,
                  void *closure_data);
typedef void (*PgQuery__SetToDefault_Closure)
                 (const PgQuery__SetToDefault *message,
                  void *closure_data);
typedef void (*PgQuery__CurrentOfExpr_Closure)
                 (const PgQuery__CurrentOfExpr *message,
                  void *closure_data);
typedef void (*PgQuery__NextValueExpr_Closure)
                 (const PgQuery__NextValueExpr *message,
                  void *closure_data);
typedef void (*PgQuery__InferenceElem_Closure)
                 (const PgQuery__InferenceElem *message,
                  void *closure_data);
typedef void (*PgQuery__TargetEntry_Closure)
                 (const PgQuery__TargetEntry *message,
                  void *closure_data);
typedef void (*PgQuery__RangeTblRef_Closure)
                 (const PgQuery__RangeTblRef *message,
                  void *closure_data);
typedef void (*PgQuery__JoinExpr_Closure)
                 (const PgQuery__JoinExpr *message,
                  void *closure_data);
typedef void (*PgQuery__FromExpr_Closure)
                 (const PgQuery__FromExpr *message,
                  void *closure_data);
typedef void (*PgQuery__OnConflictExpr_Closure)
                 (const PgQuery__OnConflictExpr *message,
                  void *closure_data);
typedef void (*PgQuery__IntoClause_Closure)
                 (const PgQuery__IntoClause *message,
                  void *closure_data);
typedef void (*PgQuery__MergeAction_Closure)
                 (const PgQuery__MergeAction *message,
                  void *closure_data);
typedef void (*PgQuery__RawStmt_Closure)
                 (const PgQuery__RawStmt *message,
                  void *closure_data);
typedef void (*PgQuery__Query_Closure)
                 (const PgQuery__Query *message,
                  void *closure_data);
typedef void (*PgQuery__InsertStmt_Closure)
                 (const PgQuery__InsertStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DeleteStmt_Closure)
                 (const PgQuery__DeleteStmt *message,
                  void *closure_data);
typedef void (*PgQuery__UpdateStmt_Closure)
                 (const PgQuery__UpdateStmt *message,
                  void *closure_data);
typedef void (*PgQuery__MergeStmt_Closure)
                 (const PgQuery__MergeStmt *message,
                  void *closure_data);
typedef void (*PgQuery__SelectStmt_Closure)
                 (const PgQuery__SelectStmt *message,
                  void *closure_data);
typedef void (*PgQuery__ReturnStmt_Closure)
                 (const PgQuery__ReturnStmt *message,
                  void *closure_data);
typedef void (*PgQuery__PLAssignStmt_Closure)
                 (const PgQuery__PLAssignStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterTableStmt_Closure)
                 (const PgQuery__AlterTableStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterTableCmd_Closure)
                 (const PgQuery__AlterTableCmd *message,
                  void *closure_data);
typedef void (*PgQuery__AlterDomainStmt_Closure)
                 (const PgQuery__AlterDomainStmt *message,
                  void *closure_data);
typedef void (*PgQuery__SetOperationStmt_Closure)
                 (const PgQuery__SetOperationStmt *message,
                  void *closure_data);
typedef void (*PgQuery__GrantStmt_Closure)
                 (const PgQuery__GrantStmt *message,
                  void *closure_data);
typedef void (*PgQuery__GrantRoleStmt_Closure)
                 (const PgQuery__GrantRoleStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterDefaultPrivilegesStmt_Closure)
                 (const PgQuery__AlterDefaultPrivilegesStmt *message,
                  void *closure_data);
typedef void (*PgQuery__ClosePortalStmt_Closure)
                 (const PgQuery__ClosePortalStmt *message,
                  void *closure_data);
typedef void (*PgQuery__ClusterStmt_Closure)
                 (const PgQuery__ClusterStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CopyStmt_Closure)
                 (const PgQuery__CopyStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateStmt_Closure)
                 (const PgQuery__CreateStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DefineStmt_Closure)
                 (const PgQuery__DefineStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DropStmt_Closure)
                 (const PgQuery__DropStmt *message,
                  void *closure_data);
typedef void (*PgQuery__TruncateStmt_Closure)
                 (const PgQuery__TruncateStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CommentStmt_Closure)
                 (const PgQuery__CommentStmt *message,
                  void *closure_data);
typedef void (*PgQuery__FetchStmt_Closure)
                 (const PgQuery__FetchStmt *message,
                  void *closure_data);
typedef void (*PgQuery__IndexStmt_Closure)
                 (const PgQuery__IndexStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateFunctionStmt_Closure)
                 (const PgQuery__CreateFunctionStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterFunctionStmt_Closure)
                 (const PgQuery__AlterFunctionStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DoStmt_Closure)
                 (const PgQuery__DoStmt *message,
                  void *closure_data);
typedef void (*PgQuery__RenameStmt_Closure)
                 (const PgQuery__RenameStmt *message,
                  void *closure_data);
typedef void (*PgQuery__RuleStmt_Closure)
                 (const PgQuery__RuleStmt *message,
                  void *closure_data);
typedef void (*PgQuery__NotifyStmt_Closure)
                 (const PgQuery__NotifyStmt *message,
                  void *closure_data);
typedef void (*PgQuery__ListenStmt_Closure)
                 (const PgQuery__ListenStmt *message,
                  void *closure_data);
typedef void (*PgQuery__UnlistenStmt_Closure)
                 (const PgQuery__UnlistenStmt *message,
                  void *closure_data);
typedef void (*PgQuery__TransactionStmt_Closure)
                 (const PgQuery__TransactionStmt *message,
                  void *closure_data);
typedef void (*PgQuery__ViewStmt_Closure)
                 (const PgQuery__ViewStmt *message,
                  void *closure_data);
typedef void (*PgQuery__LoadStmt_Closure)
                 (const PgQuery__LoadStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateDomainStmt_Closure)
                 (const PgQuery__CreateDomainStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreatedbStmt_Closure)
                 (const PgQuery__CreatedbStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DropdbStmt_Closure)
                 (const PgQuery__DropdbStmt *message,
                  void *closure_data);
typedef void (*PgQuery__VacuumStmt_Closure)
                 (const PgQuery__VacuumStmt *message,
                  void *closure_data);
typedef void (*PgQuery__ExplainStmt_Closure)
                 (const PgQuery__ExplainStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateTableAsStmt_Closure)
                 (const PgQuery__CreateTableAsStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateSeqStmt_Closure)
                 (const PgQuery__CreateSeqStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterSeqStmt_Closure)
                 (const PgQuery__AlterSeqStmt *message,
                  void *closure_data);
typedef void (*PgQuery__VariableSetStmt_Closure)
                 (const PgQuery__VariableSetStmt *message,
                  void *closure_data);
typedef void (*PgQuery__VariableShowStmt_Closure)
                 (const PgQuery__VariableShowStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DiscardStmt_Closure)
                 (const PgQuery__DiscardStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateTrigStmt_Closure)
                 (const PgQuery__CreateTrigStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreatePLangStmt_Closure)
                 (const PgQuery__CreatePLangStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateRoleStmt_Closure)
                 (const PgQuery__CreateRoleStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterRoleStmt_Closure)
                 (const PgQuery__AlterRoleStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DropRoleStmt_Closure)
                 (const PgQuery__DropRoleStmt *message,
                  void *closure_data);
typedef void (*PgQuery__LockStmt_Closure)
                 (const PgQuery__LockStmt *message,
                  void *closure_data);
typedef void (*PgQuery__ConstraintsSetStmt_Closure)
                 (const PgQuery__ConstraintsSetStmt *message,
                  void *closure_data);
typedef void (*PgQuery__ReindexStmt_Closure)
                 (const PgQuery__ReindexStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CheckPointStmt_Closure)
                 (const PgQuery__CheckPointStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateSchemaStmt_Closure)
                 (const PgQuery__CreateSchemaStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterDatabaseStmt_Closure)
                 (const PgQuery__AlterDatabaseStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterDatabaseRefreshCollStmt_Closure)
                 (const PgQuery__AlterDatabaseRefreshCollStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterDatabaseSetStmt_Closure)
                 (const PgQuery__AlterDatabaseSetStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterRoleSetStmt_Closure)
                 (const PgQuery__AlterRoleSetStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateConversionStmt_Closure)
                 (const PgQuery__CreateConversionStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateCastStmt_Closure)
                 (const PgQuery__CreateCastStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateOpClassStmt_Closure)
                 (const PgQuery__CreateOpClassStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateOpFamilyStmt_Closure)
                 (const PgQuery__CreateOpFamilyStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterOpFamilyStmt_Closure)
                 (const PgQuery__AlterOpFamilyStmt *message,
                  void *closure_data);
typedef void (*PgQuery__PrepareStmt_Closure)
                 (const PgQuery__PrepareStmt *message,
                  void *closure_data);
typedef void (*PgQuery__ExecuteStmt_Closure)
                 (const PgQuery__ExecuteStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DeallocateStmt_Closure)
                 (const PgQuery__DeallocateStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DeclareCursorStmt_Closure)
                 (const PgQuery__DeclareCursorStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateTableSpaceStmt_Closure)
                 (const PgQuery__CreateTableSpaceStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DropTableSpaceStmt_Closure)
                 (const PgQuery__DropTableSpaceStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterObjectDependsStmt_Closure)
                 (const PgQuery__AlterObjectDependsStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterObjectSchemaStmt_Closure)
                 (const PgQuery__AlterObjectSchemaStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterOwnerStmt_Closure)
                 (const PgQuery__AlterOwnerStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterOperatorStmt_Closure)
                 (const PgQuery__AlterOperatorStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterTypeStmt_Closure)
                 (const PgQuery__AlterTypeStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DropOwnedStmt_Closure)
                 (const PgQuery__DropOwnedStmt *message,
                  void *closure_data);
typedef void (*PgQuery__ReassignOwnedStmt_Closure)
                 (const PgQuery__ReassignOwnedStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CompositeTypeStmt_Closure)
                 (const PgQuery__CompositeTypeStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateEnumStmt_Closure)
                 (const PgQuery__CreateEnumStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateRangeStmt_Closure)
                 (const PgQuery__CreateRangeStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterEnumStmt_Closure)
                 (const PgQuery__AlterEnumStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterTSDictionaryStmt_Closure)
                 (const PgQuery__AlterTSDictionaryStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterTSConfigurationStmt_Closure)
                 (const PgQuery__AlterTSConfigurationStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateFdwStmt_Closure)
                 (const PgQuery__CreateFdwStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterFdwStmt_Closure)
                 (const PgQuery__AlterFdwStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateForeignServerStmt_Closure)
                 (const PgQuery__CreateForeignServerStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterForeignServerStmt_Closure)
                 (const PgQuery__AlterForeignServerStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateUserMappingStmt_Closure)
                 (const PgQuery__CreateUserMappingStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterUserMappingStmt_Closure)
                 (const PgQuery__AlterUserMappingStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DropUserMappingStmt_Closure)
                 (const PgQuery__DropUserMappingStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterTableSpaceOptionsStmt_Closure)
                 (const PgQuery__AlterTableSpaceOptionsStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterTableMoveAllStmt_Closure)
                 (const PgQuery__AlterTableMoveAllStmt *message,
                  void *closure_data);
typedef void (*PgQuery__SecLabelStmt_Closure)
                 (const PgQuery__SecLabelStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateForeignTableStmt_Closure)
                 (const PgQuery__CreateForeignTableStmt *message,
                  void *closure_data);
typedef void (*PgQuery__ImportForeignSchemaStmt_Closure)
                 (const PgQuery__ImportForeignSchemaStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateExtensionStmt_Closure)
                 (const PgQuery__CreateExtensionStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterExtensionStmt_Closure)
                 (const PgQuery__AlterExtensionStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterExtensionContentsStmt_Closure)
                 (const PgQuery__AlterExtensionContentsStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateEventTrigStmt_Closure)
                 (const PgQuery__CreateEventTrigStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterEventTrigStmt_Closure)
                 (const PgQuery__AlterEventTrigStmt *message,
                  void *closure_data);
typedef void (*PgQuery__RefreshMatViewStmt_Closure)
                 (const PgQuery__RefreshMatViewStmt *message,
                  void *closure_data);
typedef void (*PgQuery__ReplicaIdentityStmt_Closure)
                 (const PgQuery__ReplicaIdentityStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterSystemStmt_Closure)
                 (const PgQuery__AlterSystemStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreatePolicyStmt_Closure)
                 (const PgQuery__CreatePolicyStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterPolicyStmt_Closure)
                 (const PgQuery__AlterPolicyStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateTransformStmt_Closure)
                 (const PgQuery__CreateTransformStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateAmStmt_Closure)
                 (const PgQuery__CreateAmStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreatePublicationStmt_Closure)
                 (const PgQuery__CreatePublicationStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterPublicationStmt_Closure)
                 (const PgQuery__AlterPublicationStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateSubscriptionStmt_Closure)
                 (const PgQuery__CreateSubscriptionStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterSubscriptionStmt_Closure)
                 (const PgQuery__AlterSubscriptionStmt *message,
                  void *closure_data);
typedef void (*PgQuery__DropSubscriptionStmt_Closure)
                 (const PgQuery__DropSubscriptionStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CreateStatsStmt_Closure)
                 (const PgQuery__CreateStatsStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterCollationStmt_Closure)
                 (const PgQuery__AlterCollationStmt *message,
                  void *closure_data);
typedef void (*PgQuery__CallStmt_Closure)
                 (const PgQuery__CallStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AlterStatsStmt_Closure)
                 (const PgQuery__AlterStatsStmt *message,
                  void *closure_data);
typedef void (*PgQuery__AExpr_Closure)
                 (const PgQuery__AExpr *message,
                  void *closure_data);
typedef void (*PgQuery__ColumnRef_Closure)
                 (const PgQuery__ColumnRef *message,
                  void *closure_data);
typedef void (*PgQuery__ParamRef_Closure)
                 (const PgQuery__ParamRef *message,
                  void *closure_data);
typedef void (*PgQuery__FuncCall_Closure)
                 (const PgQuery__FuncCall *message,
                  void *closure_data);
typedef void (*PgQuery__AStar_Closure)
                 (const PgQuery__AStar *message,
                  void *closure_data);
typedef void (*PgQuery__AIndices_Closure)
                 (const PgQuery__AIndices *message,
                  void *closure_data);
typedef void (*PgQuery__AIndirection_Closure)
                 (const PgQuery__AIndirection *message,
                  void *closure_data);
typedef void (*PgQuery__AArrayExpr_Closure)
                 (const PgQuery__AArrayExpr *message,
                  void *closure_data);
typedef void (*PgQuery__ResTarget_Closure)
                 (const PgQuery__ResTarget *message,
                  void *closure_data);
typedef void (*PgQuery__MultiAssignRef_Closure)
                 (const PgQuery__MultiAssignRef *message,
                  void *closure_data);
typedef void (*PgQuery__TypeCast_Closure)
                 (const PgQuery__TypeCast *message,
                  void *closure_data);
typedef void (*PgQuery__CollateClause_Closure)
                 (const PgQuery__CollateClause *message,
                  void *closure_data);
typedef void (*PgQuery__SortBy_Closure)
                 (const PgQuery__SortBy *message,
                  void *closure_data);
typedef void (*PgQuery__WindowDef_Closure)
                 (const PgQuery__WindowDef *message,
                  void *closure_data);
typedef void (*PgQuery__RangeSubselect_Closure)
                 (const PgQuery__RangeSubselect *message,
                  void *closure_data);
typedef void (*PgQuery__RangeFunction_Closure)
                 (const PgQuery__RangeFunction *message,
                  void *closure_data);
typedef void (*PgQuery__RangeTableSample_Closure)
                 (const PgQuery__RangeTableSample *message,
                  void *closure_data);
typedef void (*PgQuery__RangeTableFunc_Closure)
                 (const PgQuery__RangeTableFunc *message,
                  void *closure_data);
typedef void (*PgQuery__RangeTableFuncCol_Closure)
                 (const PgQuery__RangeTableFuncCol *message,
                  void *closure_data);
typedef void (*PgQuery__TypeName_Closure)
                 (const PgQuery__TypeName *message,
                  void *closure_data);
typedef void (*PgQuery__ColumnDef_Closure)
                 (const PgQuery__ColumnDef *message,
                  void *closure_data);
typedef void (*PgQuery__IndexElem_Closure)
                 (const PgQuery__IndexElem *message,
                  void *closure_data);
typedef void (*PgQuery__StatsElem_Closure)
                 (const PgQuery__StatsElem *message,
                  void *closure_data);
typedef void (*PgQuery__Constraint_Closure)
                 (const PgQuery__Constraint *message,
                  void *closure_data);
typedef void (*PgQuery__DefElem_Closure)
                 (const PgQuery__DefElem *message,
                  void *closure_data);
typedef void (*PgQuery__RangeTblEntry_Closure)
                 (const PgQuery__RangeTblEntry *message,
                  void *closure_data);
typedef void (*PgQuery__RangeTblFunction_Closure)
                 (const PgQuery__RangeTblFunction *message,
                  void *closure_data);
typedef void (*PgQuery__TableSampleClause_Closure)
                 (const PgQuery__TableSampleClause *message,
                  void *closure_data);
typedef void (*PgQuery__WithCheckOption_Closure)
                 (const PgQuery__WithCheckOption *message,
                  void *closure_data);
typedef void (*PgQuery__SortGroupClause_Closure)
                 (const PgQuery__SortGroupClause *message,
                  void *closure_data);
typedef void (*PgQuery__GroupingSet_Closure)
                 (const PgQuery__GroupingSet *message,
                  void *closure_data);
typedef void (*PgQuery__WindowClause_Closure)
                 (const PgQuery__WindowClause *message,
                  void *closure_data);
typedef void (*PgQuery__ObjectWithArgs_Closure)
                 (const PgQuery__ObjectWithArgs *message,
                  void *closure_data);
typedef void (*PgQuery__AccessPriv_Closure)
                 (const PgQuery__AccessPriv *message,
                  void *closure_data);
typedef void (*PgQuery__CreateOpClassItem_Closure)
                 (const PgQuery__CreateOpClassItem *message,
                  void *closure_data);
typedef void (*PgQuery__TableLikeClause_Closure)
                 (const PgQuery__TableLikeClause *message,
                  void *closure_data);
typedef void (*PgQuery__FunctionParameter_Closure)
                 (const PgQuery__FunctionParameter *message,
                  void *closure_data);
typedef void (*PgQuery__LockingClause_Closure)
                 (const PgQuery__LockingClause *message,
                  void *closure_data);
typedef void (*PgQuery__RowMarkClause_Closure)
                 (const PgQuery__RowMarkClause *message,
                  void *closure_data);
typedef void (*PgQuery__XmlSerialize_Closure)
                 (const PgQuery__XmlSerialize *message,
                  void *closure_data);
typedef void (*PgQuery__WithClause_Closure)
                 (const PgQuery__WithClause *message,
                  void *closure_data);
typedef void (*PgQuery__InferClause_Closure)
                 (const PgQuery__InferClause *message,
                  void *closure_data);
typedef void (*PgQuery__OnConflictClause_Closure)
                 (const PgQuery__OnConflictClause *message,
                  void *closure_data);
typedef void (*PgQuery__CTESearchClause_Closure)
                 (const PgQuery__CTESearchClause *message,
                  void *closure_data);
typedef void (*PgQuery__CTECycleClause_Closure)
                 (const PgQuery__CTECycleClause *message,
                  void *closure_data);
typedef void (*PgQuery__CommonTableExpr_Closure)
                 (const PgQuery__CommonTableExpr *message,
                  void *closure_data);
typedef void (*PgQuery__MergeWhenClause_Closure)
                 (const PgQuery__MergeWhenClause *message,
                  void *closure_data);
typedef void (*PgQuery__RoleSpec_Closure)
                 (const PgQuery__RoleSpec *message,
                  void *closure_data);
typedef void (*PgQuery__TriggerTransition_Closure)
                 (const PgQuery__TriggerTransition *message,
                  void *closure_data);
typedef void (*PgQuery__PartitionElem_Closure)
                 (const PgQuery__PartitionElem *message,
                  void *closure_data);
typedef void (*PgQuery__PartitionSpec_Closure)
                 (const PgQuery__PartitionSpec *message,
                  void *closure_data);
typedef void (*PgQuery__PartitionBoundSpec_Closure)
                 (const PgQuery__PartitionBoundSpec *message,
                  void *closure_data);
typedef void (*PgQuery__PartitionRangeDatum_Closure)
                 (const PgQuery__PartitionRangeDatum *message,
                  void *closure_data);
typedef void (*PgQuery__PartitionCmd_Closure)
                 (const PgQuery__PartitionCmd *message,
                  void *closure_data);
typedef void (*PgQuery__VacuumRelation_Closure)
                 (const PgQuery__VacuumRelation *message,
                  void *closure_data);
typedef void (*PgQuery__PublicationObjSpec_Closure)
                 (const PgQuery__PublicationObjSpec *message,
                  void *closure_data);
typedef void (*PgQuery__PublicationTable_Closure)
                 (const PgQuery__PublicationTable *message,
                  void *closure_data);
typedef void (*PgQuery__InlineCodeBlock_Closure)
                 (const PgQuery__InlineCodeBlock *message,
                  void *closure_data);
typedef void (*PgQuery__CallContext_Closure)
                 (const PgQuery__CallContext *message,
                  void *closure_data);
typedef void (*PgQuery__ScanToken_Closure)
                 (const PgQuery__ScanToken *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    pg_query__overriding_kind__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__query_source__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__sort_by_dir__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__sort_by_nulls__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__set_quantifier__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__a__expr__kind__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__role_spec_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__table_like_option__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__def_elem_action__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__partition_range_datum_kind__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__rtekind__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__wcokind__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__grouping_set_kind__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__ctematerialize__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__set_operation__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__object_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__drop_behavior__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__alter_table_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__grant_target_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__variable_set_kind__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__constr_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__import_foreign_schema_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__role_stmt_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__fetch_direction__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__function_parameter_mode__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__transaction_stmt_kind__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__view_check_option__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__discard_mode__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__reindex_object_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__alter_tsconfig_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__publication_obj_spec_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__alter_publication_action__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__alter_subscription_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__on_commit_action__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__param_kind__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__coercion_context__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__coercion_form__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__bool_expr_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__sub_link_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__row_compare_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__min_max_op__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__sqlvalue_function_op__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__xml_expr_op__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__xml_option_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__null_test_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__bool_test_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__cmd_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__join_type__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__agg_strategy__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__agg_split__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__set_op_cmd__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__set_op_strategy__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__on_conflict_action__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__limit_option__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__lock_clause_strength__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__lock_wait_policy__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__lock_tuple_mode__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__keyword_kind__descriptor;
extern const ProtobufCEnumDescriptor    pg_query__token__descriptor;
extern const ProtobufCMessageDescriptor pg_query__parse_result__descriptor;
extern const ProtobufCMessageDescriptor pg_query__scan_result__descriptor;
extern const ProtobufCMessageDescriptor pg_query__node__descriptor;
extern const ProtobufCMessageDescriptor pg_query__integer__descriptor;
extern const ProtobufCMessageDescriptor pg_query__float__descriptor;
extern const ProtobufCMessageDescriptor pg_query__boolean__descriptor;
extern const ProtobufCMessageDescriptor pg_query__string__descriptor;
extern const ProtobufCMessageDescriptor pg_query__bit_string__descriptor;
extern const ProtobufCMessageDescriptor pg_query__list__descriptor;
extern const ProtobufCMessageDescriptor pg_query__oid_list__descriptor;
extern const ProtobufCMessageDescriptor pg_query__int_list__descriptor;
extern const ProtobufCMessageDescriptor pg_query__a__const__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alias__descriptor;
extern const ProtobufCMessageDescriptor pg_query__range_var__descriptor;
extern const ProtobufCMessageDescriptor pg_query__table_func__descriptor;
extern const ProtobufCMessageDescriptor pg_query__var__descriptor;
extern const ProtobufCMessageDescriptor pg_query__param__descriptor;
extern const ProtobufCMessageDescriptor pg_query__aggref__descriptor;
extern const ProtobufCMessageDescriptor pg_query__grouping_func__descriptor;
extern const ProtobufCMessageDescriptor pg_query__window_func__descriptor;
extern const ProtobufCMessageDescriptor pg_query__subscripting_ref__descriptor;
extern const ProtobufCMessageDescriptor pg_query__func_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__named_arg_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__op_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__distinct_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__null_if_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__scalar_array_op_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__bool_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__sub_link__descriptor;
extern const ProtobufCMessageDescriptor pg_query__sub_plan__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alternative_sub_plan__descriptor;
extern const ProtobufCMessageDescriptor pg_query__field_select__descriptor;
extern const ProtobufCMessageDescriptor pg_query__field_store__descriptor;
extern const ProtobufCMessageDescriptor pg_query__relabel_type__descriptor;
extern const ProtobufCMessageDescriptor pg_query__coerce_via_io__descriptor;
extern const ProtobufCMessageDescriptor pg_query__array_coerce_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__convert_rowtype_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__collate_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__case_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__case_when__descriptor;
extern const ProtobufCMessageDescriptor pg_query__case_test_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__array_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__row_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__row_compare_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__coalesce_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__min_max_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__sqlvalue_function__descriptor;
extern const ProtobufCMessageDescriptor pg_query__xml_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__null_test__descriptor;
extern const ProtobufCMessageDescriptor pg_query__boolean_test__descriptor;
extern const ProtobufCMessageDescriptor pg_query__coerce_to_domain__descriptor;
extern const ProtobufCMessageDescriptor pg_query__coerce_to_domain_value__descriptor;
extern const ProtobufCMessageDescriptor pg_query__set_to_default__descriptor;
extern const ProtobufCMessageDescriptor pg_query__current_of_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__next_value_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__inference_elem__descriptor;
extern const ProtobufCMessageDescriptor pg_query__target_entry__descriptor;
extern const ProtobufCMessageDescriptor pg_query__range_tbl_ref__descriptor;
extern const ProtobufCMessageDescriptor pg_query__join_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__from_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__on_conflict_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__into_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__merge_action__descriptor;
extern const ProtobufCMessageDescriptor pg_query__raw_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__query__descriptor;
extern const ProtobufCMessageDescriptor pg_query__insert_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__delete_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__update_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__merge_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__select_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__return_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__plassign_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_table_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_table_cmd__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_domain_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__set_operation_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__grant_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__grant_role_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_default_privileges_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__close_portal_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__cluster_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__copy_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__define_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__drop_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__truncate_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__comment_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__fetch_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__index_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_function_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_function_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__do_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__rename_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__rule_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__notify_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__listen_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__unlisten_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__transaction_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__view_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__load_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_domain_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__createdb_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__dropdb_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__vacuum_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__explain_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_table_as_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_seq_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_seq_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__variable_set_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__variable_show_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__discard_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_trig_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_plang_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_role_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_role_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__drop_role_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__lock_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__constraints_set_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__reindex_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__check_point_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_schema_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_database_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_database_refresh_coll_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_database_set_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_role_set_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_conversion_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_cast_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_op_class_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_op_family_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_op_family_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__prepare_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__execute_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__deallocate_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__declare_cursor_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_table_space_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__drop_table_space_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_object_depends_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_object_schema_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_owner_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_operator_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_type_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__drop_owned_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__reassign_owned_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__composite_type_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_enum_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_range_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_enum_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_tsdictionary_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_tsconfiguration_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_fdw_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_fdw_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_foreign_server_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_foreign_server_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_user_mapping_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_user_mapping_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__drop_user_mapping_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_table_space_options_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_table_move_all_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__sec_label_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_foreign_table_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__import_foreign_schema_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_extension_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_extension_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_extension_contents_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_event_trig_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_event_trig_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__refresh_mat_view_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__replica_identity_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_system_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_policy_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_policy_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_transform_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_am_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_publication_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_publication_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_subscription_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_subscription_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__drop_subscription_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_stats_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_collation_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__call_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__alter_stats_stmt__descriptor;
extern const ProtobufCMessageDescriptor pg_query__a__expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__column_ref__descriptor;
extern const ProtobufCMessageDescriptor pg_query__param_ref__descriptor;
extern const ProtobufCMessageDescriptor pg_query__func_call__descriptor;
extern const ProtobufCMessageDescriptor pg_query__a__star__descriptor;
extern const ProtobufCMessageDescriptor pg_query__a__indices__descriptor;
extern const ProtobufCMessageDescriptor pg_query__a__indirection__descriptor;
extern const ProtobufCMessageDescriptor pg_query__a__array_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__res_target__descriptor;
extern const ProtobufCMessageDescriptor pg_query__multi_assign_ref__descriptor;
extern const ProtobufCMessageDescriptor pg_query__type_cast__descriptor;
extern const ProtobufCMessageDescriptor pg_query__collate_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__sort_by__descriptor;
extern const ProtobufCMessageDescriptor pg_query__window_def__descriptor;
extern const ProtobufCMessageDescriptor pg_query__range_subselect__descriptor;
extern const ProtobufCMessageDescriptor pg_query__range_function__descriptor;
extern const ProtobufCMessageDescriptor pg_query__range_table_sample__descriptor;
extern const ProtobufCMessageDescriptor pg_query__range_table_func__descriptor;
extern const ProtobufCMessageDescriptor pg_query__range_table_func_col__descriptor;
extern const ProtobufCMessageDescriptor pg_query__type_name__descriptor;
extern const ProtobufCMessageDescriptor pg_query__column_def__descriptor;
extern const ProtobufCMessageDescriptor pg_query__index_elem__descriptor;
extern const ProtobufCMessageDescriptor pg_query__stats_elem__descriptor;
extern const ProtobufCMessageDescriptor pg_query__constraint__descriptor;
extern const ProtobufCMessageDescriptor pg_query__def_elem__descriptor;
extern const ProtobufCMessageDescriptor pg_query__range_tbl_entry__descriptor;
extern const ProtobufCMessageDescriptor pg_query__range_tbl_function__descriptor;
extern const ProtobufCMessageDescriptor pg_query__table_sample_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__with_check_option__descriptor;
extern const ProtobufCMessageDescriptor pg_query__sort_group_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__grouping_set__descriptor;
extern const ProtobufCMessageDescriptor pg_query__window_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__object_with_args__descriptor;
extern const ProtobufCMessageDescriptor pg_query__access_priv__descriptor;
extern const ProtobufCMessageDescriptor pg_query__create_op_class_item__descriptor;
extern const ProtobufCMessageDescriptor pg_query__table_like_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__function_parameter__descriptor;
extern const ProtobufCMessageDescriptor pg_query__locking_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__row_mark_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__xml_serialize__descriptor;
extern const ProtobufCMessageDescriptor pg_query__with_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__infer_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__on_conflict_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__ctesearch_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__ctecycle_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__common_table_expr__descriptor;
extern const ProtobufCMessageDescriptor pg_query__merge_when_clause__descriptor;
extern const ProtobufCMessageDescriptor pg_query__role_spec__descriptor;
extern const ProtobufCMessageDescriptor pg_query__trigger_transition__descriptor;
extern const ProtobufCMessageDescriptor pg_query__partition_elem__descriptor;
extern const ProtobufCMessageDescriptor pg_query__partition_spec__descriptor;
extern const ProtobufCMessageDescriptor pg_query__partition_bound_spec__descriptor;
extern const ProtobufCMessageDescriptor pg_query__partition_range_datum__descriptor;
extern const ProtobufCMessageDescriptor pg_query__partition_cmd__descriptor;
extern const ProtobufCMessageDescriptor pg_query__vacuum_relation__descriptor;
extern const ProtobufCMessageDescriptor pg_query__publication_obj_spec__descriptor;
extern const ProtobufCMessageDescriptor pg_query__publication_table__descriptor;
extern const ProtobufCMessageDescriptor pg_query__inline_code_block__descriptor;
extern const ProtobufCMessageDescriptor pg_query__call_context__descriptor;
extern const ProtobufCMessageDescriptor pg_query__scan_token__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_protobuf_2fpg_5fquery_2eproto__INCLUDED */
