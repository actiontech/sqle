// This file is autogenerated by ./scripts/generate_protobuf_and_funcs.rb

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.21.12
// source: pg_query.proto

package pg_query

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type OverridingKind int32

const (
	OverridingKind_OVERRIDING_KIND_UNDEFINED OverridingKind = 0
	OverridingKind_OVERRIDING_NOT_SET        OverridingKind = 1
	OverridingKind_OVERRIDING_USER_VALUE     OverridingKind = 2
	OverridingKind_OVERRIDING_SYSTEM_VALUE   OverridingKind = 3
)

// Enum value maps for OverridingKind.
var (
	OverridingKind_name = map[int32]string{
		0: "OVERRIDING_KIND_UNDEFINED",
		1: "OVERRIDING_NOT_SET",
		2: "OVERRIDING_USER_VALUE",
		3: "OVERRIDING_SYSTEM_VALUE",
	}
	OverridingKind_value = map[string]int32{
		"OVERRIDING_KIND_UNDEFINED": 0,
		"OVERRIDING_NOT_SET":        1,
		"OVERRIDING_USER_VALUE":     2,
		"OVERRIDING_SYSTEM_VALUE":   3,
	}
)

func (x OverridingKind) Enum() *OverridingKind {
	p := new(OverridingKind)
	*p = x
	return p
}

func (x OverridingKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OverridingKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[0].Descriptor()
}

func (OverridingKind) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[0]
}

func (x OverridingKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OverridingKind.Descriptor instead.
func (OverridingKind) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{0}
}

type QuerySource int32

const (
	QuerySource_QUERY_SOURCE_UNDEFINED QuerySource = 0
	QuerySource_QSRC_ORIGINAL          QuerySource = 1
	QuerySource_QSRC_PARSER            QuerySource = 2
	QuerySource_QSRC_INSTEAD_RULE      QuerySource = 3
	QuerySource_QSRC_QUAL_INSTEAD_RULE QuerySource = 4
	QuerySource_QSRC_NON_INSTEAD_RULE  QuerySource = 5
)

// Enum value maps for QuerySource.
var (
	QuerySource_name = map[int32]string{
		0: "QUERY_SOURCE_UNDEFINED",
		1: "QSRC_ORIGINAL",
		2: "QSRC_PARSER",
		3: "QSRC_INSTEAD_RULE",
		4: "QSRC_QUAL_INSTEAD_RULE",
		5: "QSRC_NON_INSTEAD_RULE",
	}
	QuerySource_value = map[string]int32{
		"QUERY_SOURCE_UNDEFINED": 0,
		"QSRC_ORIGINAL":          1,
		"QSRC_PARSER":            2,
		"QSRC_INSTEAD_RULE":      3,
		"QSRC_QUAL_INSTEAD_RULE": 4,
		"QSRC_NON_INSTEAD_RULE":  5,
	}
)

func (x QuerySource) Enum() *QuerySource {
	p := new(QuerySource)
	*p = x
	return p
}

func (x QuerySource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuerySource) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[1].Descriptor()
}

func (QuerySource) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[1]
}

func (x QuerySource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuerySource.Descriptor instead.
func (QuerySource) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{1}
}

type SortByDir int32

const (
	SortByDir_SORT_BY_DIR_UNDEFINED SortByDir = 0
	SortByDir_SORTBY_DEFAULT        SortByDir = 1
	SortByDir_SORTBY_ASC            SortByDir = 2
	SortByDir_SORTBY_DESC           SortByDir = 3
	SortByDir_SORTBY_USING          SortByDir = 4
)

// Enum value maps for SortByDir.
var (
	SortByDir_name = map[int32]string{
		0: "SORT_BY_DIR_UNDEFINED",
		1: "SORTBY_DEFAULT",
		2: "SORTBY_ASC",
		3: "SORTBY_DESC",
		4: "SORTBY_USING",
	}
	SortByDir_value = map[string]int32{
		"SORT_BY_DIR_UNDEFINED": 0,
		"SORTBY_DEFAULT":        1,
		"SORTBY_ASC":            2,
		"SORTBY_DESC":           3,
		"SORTBY_USING":          4,
	}
)

func (x SortByDir) Enum() *SortByDir {
	p := new(SortByDir)
	*p = x
	return p
}

func (x SortByDir) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortByDir) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[2].Descriptor()
}

func (SortByDir) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[2]
}

func (x SortByDir) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortByDir.Descriptor instead.
func (SortByDir) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{2}
}

type SortByNulls int32

const (
	SortByNulls_SORT_BY_NULLS_UNDEFINED SortByNulls = 0
	SortByNulls_SORTBY_NULLS_DEFAULT    SortByNulls = 1
	SortByNulls_SORTBY_NULLS_FIRST      SortByNulls = 2
	SortByNulls_SORTBY_NULLS_LAST       SortByNulls = 3
)

// Enum value maps for SortByNulls.
var (
	SortByNulls_name = map[int32]string{
		0: "SORT_BY_NULLS_UNDEFINED",
		1: "SORTBY_NULLS_DEFAULT",
		2: "SORTBY_NULLS_FIRST",
		3: "SORTBY_NULLS_LAST",
	}
	SortByNulls_value = map[string]int32{
		"SORT_BY_NULLS_UNDEFINED": 0,
		"SORTBY_NULLS_DEFAULT":    1,
		"SORTBY_NULLS_FIRST":      2,
		"SORTBY_NULLS_LAST":       3,
	}
)

func (x SortByNulls) Enum() *SortByNulls {
	p := new(SortByNulls)
	*p = x
	return p
}

func (x SortByNulls) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortByNulls) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[3].Descriptor()
}

func (SortByNulls) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[3]
}

func (x SortByNulls) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortByNulls.Descriptor instead.
func (SortByNulls) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{3}
}

type SetQuantifier int32

const (
	SetQuantifier_SET_QUANTIFIER_UNDEFINED SetQuantifier = 0
	SetQuantifier_SET_QUANTIFIER_DEFAULT   SetQuantifier = 1
	SetQuantifier_SET_QUANTIFIER_ALL       SetQuantifier = 2
	SetQuantifier_SET_QUANTIFIER_DISTINCT  SetQuantifier = 3
)

// Enum value maps for SetQuantifier.
var (
	SetQuantifier_name = map[int32]string{
		0: "SET_QUANTIFIER_UNDEFINED",
		1: "SET_QUANTIFIER_DEFAULT",
		2: "SET_QUANTIFIER_ALL",
		3: "SET_QUANTIFIER_DISTINCT",
	}
	SetQuantifier_value = map[string]int32{
		"SET_QUANTIFIER_UNDEFINED": 0,
		"SET_QUANTIFIER_DEFAULT":   1,
		"SET_QUANTIFIER_ALL":       2,
		"SET_QUANTIFIER_DISTINCT":  3,
	}
)

func (x SetQuantifier) Enum() *SetQuantifier {
	p := new(SetQuantifier)
	*p = x
	return p
}

func (x SetQuantifier) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetQuantifier) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[4].Descriptor()
}

func (SetQuantifier) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[4]
}

func (x SetQuantifier) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetQuantifier.Descriptor instead.
func (SetQuantifier) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{4}
}

type A_Expr_Kind int32

const (
	A_Expr_Kind_A_EXPR_KIND_UNDEFINED A_Expr_Kind = 0
	A_Expr_Kind_AEXPR_OP              A_Expr_Kind = 1
	A_Expr_Kind_AEXPR_OP_ANY          A_Expr_Kind = 2
	A_Expr_Kind_AEXPR_OP_ALL          A_Expr_Kind = 3
	A_Expr_Kind_AEXPR_DISTINCT        A_Expr_Kind = 4
	A_Expr_Kind_AEXPR_NOT_DISTINCT    A_Expr_Kind = 5
	A_Expr_Kind_AEXPR_NULLIF          A_Expr_Kind = 6
	A_Expr_Kind_AEXPR_IN              A_Expr_Kind = 7
	A_Expr_Kind_AEXPR_LIKE            A_Expr_Kind = 8
	A_Expr_Kind_AEXPR_ILIKE           A_Expr_Kind = 9
	A_Expr_Kind_AEXPR_SIMILAR         A_Expr_Kind = 10
	A_Expr_Kind_AEXPR_BETWEEN         A_Expr_Kind = 11
	A_Expr_Kind_AEXPR_NOT_BETWEEN     A_Expr_Kind = 12
	A_Expr_Kind_AEXPR_BETWEEN_SYM     A_Expr_Kind = 13
	A_Expr_Kind_AEXPR_NOT_BETWEEN_SYM A_Expr_Kind = 14
)

// Enum value maps for A_Expr_Kind.
var (
	A_Expr_Kind_name = map[int32]string{
		0:  "A_EXPR_KIND_UNDEFINED",
		1:  "AEXPR_OP",
		2:  "AEXPR_OP_ANY",
		3:  "AEXPR_OP_ALL",
		4:  "AEXPR_DISTINCT",
		5:  "AEXPR_NOT_DISTINCT",
		6:  "AEXPR_NULLIF",
		7:  "AEXPR_IN",
		8:  "AEXPR_LIKE",
		9:  "AEXPR_ILIKE",
		10: "AEXPR_SIMILAR",
		11: "AEXPR_BETWEEN",
		12: "AEXPR_NOT_BETWEEN",
		13: "AEXPR_BETWEEN_SYM",
		14: "AEXPR_NOT_BETWEEN_SYM",
	}
	A_Expr_Kind_value = map[string]int32{
		"A_EXPR_KIND_UNDEFINED": 0,
		"AEXPR_OP":              1,
		"AEXPR_OP_ANY":          2,
		"AEXPR_OP_ALL":          3,
		"AEXPR_DISTINCT":        4,
		"AEXPR_NOT_DISTINCT":    5,
		"AEXPR_NULLIF":          6,
		"AEXPR_IN":              7,
		"AEXPR_LIKE":            8,
		"AEXPR_ILIKE":           9,
		"AEXPR_SIMILAR":         10,
		"AEXPR_BETWEEN":         11,
		"AEXPR_NOT_BETWEEN":     12,
		"AEXPR_BETWEEN_SYM":     13,
		"AEXPR_NOT_BETWEEN_SYM": 14,
	}
)

func (x A_Expr_Kind) Enum() *A_Expr_Kind {
	p := new(A_Expr_Kind)
	*p = x
	return p
}

func (x A_Expr_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (A_Expr_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[5].Descriptor()
}

func (A_Expr_Kind) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[5]
}

func (x A_Expr_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use A_Expr_Kind.Descriptor instead.
func (A_Expr_Kind) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{5}
}

type RoleSpecType int32

const (
	RoleSpecType_ROLE_SPEC_TYPE_UNDEFINED RoleSpecType = 0
	RoleSpecType_ROLESPEC_CSTRING         RoleSpecType = 1
	RoleSpecType_ROLESPEC_CURRENT_ROLE    RoleSpecType = 2
	RoleSpecType_ROLESPEC_CURRENT_USER    RoleSpecType = 3
	RoleSpecType_ROLESPEC_SESSION_USER    RoleSpecType = 4
	RoleSpecType_ROLESPEC_PUBLIC          RoleSpecType = 5
)

// Enum value maps for RoleSpecType.
var (
	RoleSpecType_name = map[int32]string{
		0: "ROLE_SPEC_TYPE_UNDEFINED",
		1: "ROLESPEC_CSTRING",
		2: "ROLESPEC_CURRENT_ROLE",
		3: "ROLESPEC_CURRENT_USER",
		4: "ROLESPEC_SESSION_USER",
		5: "ROLESPEC_PUBLIC",
	}
	RoleSpecType_value = map[string]int32{
		"ROLE_SPEC_TYPE_UNDEFINED": 0,
		"ROLESPEC_CSTRING":         1,
		"ROLESPEC_CURRENT_ROLE":    2,
		"ROLESPEC_CURRENT_USER":    3,
		"ROLESPEC_SESSION_USER":    4,
		"ROLESPEC_PUBLIC":          5,
	}
)

func (x RoleSpecType) Enum() *RoleSpecType {
	p := new(RoleSpecType)
	*p = x
	return p
}

func (x RoleSpecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleSpecType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[6].Descriptor()
}

func (RoleSpecType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[6]
}

func (x RoleSpecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleSpecType.Descriptor instead.
func (RoleSpecType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{6}
}

type TableLikeOption int32

const (
	TableLikeOption_TABLE_LIKE_OPTION_UNDEFINED   TableLikeOption = 0
	TableLikeOption_CREATE_TABLE_LIKE_COMMENTS    TableLikeOption = 1
	TableLikeOption_CREATE_TABLE_LIKE_COMPRESSION TableLikeOption = 2
	TableLikeOption_CREATE_TABLE_LIKE_CONSTRAINTS TableLikeOption = 3
	TableLikeOption_CREATE_TABLE_LIKE_DEFAULTS    TableLikeOption = 4
	TableLikeOption_CREATE_TABLE_LIKE_GENERATED   TableLikeOption = 5
	TableLikeOption_CREATE_TABLE_LIKE_IDENTITY    TableLikeOption = 6
	TableLikeOption_CREATE_TABLE_LIKE_INDEXES     TableLikeOption = 7
	TableLikeOption_CREATE_TABLE_LIKE_STATISTICS  TableLikeOption = 8
	TableLikeOption_CREATE_TABLE_LIKE_STORAGE     TableLikeOption = 9
	TableLikeOption_CREATE_TABLE_LIKE_ALL         TableLikeOption = 10
)

// Enum value maps for TableLikeOption.
var (
	TableLikeOption_name = map[int32]string{
		0:  "TABLE_LIKE_OPTION_UNDEFINED",
		1:  "CREATE_TABLE_LIKE_COMMENTS",
		2:  "CREATE_TABLE_LIKE_COMPRESSION",
		3:  "CREATE_TABLE_LIKE_CONSTRAINTS",
		4:  "CREATE_TABLE_LIKE_DEFAULTS",
		5:  "CREATE_TABLE_LIKE_GENERATED",
		6:  "CREATE_TABLE_LIKE_IDENTITY",
		7:  "CREATE_TABLE_LIKE_INDEXES",
		8:  "CREATE_TABLE_LIKE_STATISTICS",
		9:  "CREATE_TABLE_LIKE_STORAGE",
		10: "CREATE_TABLE_LIKE_ALL",
	}
	TableLikeOption_value = map[string]int32{
		"TABLE_LIKE_OPTION_UNDEFINED":   0,
		"CREATE_TABLE_LIKE_COMMENTS":    1,
		"CREATE_TABLE_LIKE_COMPRESSION": 2,
		"CREATE_TABLE_LIKE_CONSTRAINTS": 3,
		"CREATE_TABLE_LIKE_DEFAULTS":    4,
		"CREATE_TABLE_LIKE_GENERATED":   5,
		"CREATE_TABLE_LIKE_IDENTITY":    6,
		"CREATE_TABLE_LIKE_INDEXES":     7,
		"CREATE_TABLE_LIKE_STATISTICS":  8,
		"CREATE_TABLE_LIKE_STORAGE":     9,
		"CREATE_TABLE_LIKE_ALL":         10,
	}
)

func (x TableLikeOption) Enum() *TableLikeOption {
	p := new(TableLikeOption)
	*p = x
	return p
}

func (x TableLikeOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableLikeOption) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[7].Descriptor()
}

func (TableLikeOption) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[7]
}

func (x TableLikeOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableLikeOption.Descriptor instead.
func (TableLikeOption) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{7}
}

type DefElemAction int32

const (
	DefElemAction_DEF_ELEM_ACTION_UNDEFINED DefElemAction = 0
	DefElemAction_DEFELEM_UNSPEC            DefElemAction = 1
	DefElemAction_DEFELEM_SET               DefElemAction = 2
	DefElemAction_DEFELEM_ADD               DefElemAction = 3
	DefElemAction_DEFELEM_DROP              DefElemAction = 4
)

// Enum value maps for DefElemAction.
var (
	DefElemAction_name = map[int32]string{
		0: "DEF_ELEM_ACTION_UNDEFINED",
		1: "DEFELEM_UNSPEC",
		2: "DEFELEM_SET",
		3: "DEFELEM_ADD",
		4: "DEFELEM_DROP",
	}
	DefElemAction_value = map[string]int32{
		"DEF_ELEM_ACTION_UNDEFINED": 0,
		"DEFELEM_UNSPEC":            1,
		"DEFELEM_SET":               2,
		"DEFELEM_ADD":               3,
		"DEFELEM_DROP":              4,
	}
)

func (x DefElemAction) Enum() *DefElemAction {
	p := new(DefElemAction)
	*p = x
	return p
}

func (x DefElemAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DefElemAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[8].Descriptor()
}

func (DefElemAction) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[8]
}

func (x DefElemAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DefElemAction.Descriptor instead.
func (DefElemAction) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{8}
}

type PartitionRangeDatumKind int32

const (
	PartitionRangeDatumKind_PARTITION_RANGE_DATUM_KIND_UNDEFINED PartitionRangeDatumKind = 0
	PartitionRangeDatumKind_PARTITION_RANGE_DATUM_MINVALUE       PartitionRangeDatumKind = 1
	PartitionRangeDatumKind_PARTITION_RANGE_DATUM_VALUE          PartitionRangeDatumKind = 2
	PartitionRangeDatumKind_PARTITION_RANGE_DATUM_MAXVALUE       PartitionRangeDatumKind = 3
)

// Enum value maps for PartitionRangeDatumKind.
var (
	PartitionRangeDatumKind_name = map[int32]string{
		0: "PARTITION_RANGE_DATUM_KIND_UNDEFINED",
		1: "PARTITION_RANGE_DATUM_MINVALUE",
		2: "PARTITION_RANGE_DATUM_VALUE",
		3: "PARTITION_RANGE_DATUM_MAXVALUE",
	}
	PartitionRangeDatumKind_value = map[string]int32{
		"PARTITION_RANGE_DATUM_KIND_UNDEFINED": 0,
		"PARTITION_RANGE_DATUM_MINVALUE":       1,
		"PARTITION_RANGE_DATUM_VALUE":          2,
		"PARTITION_RANGE_DATUM_MAXVALUE":       3,
	}
)

func (x PartitionRangeDatumKind) Enum() *PartitionRangeDatumKind {
	p := new(PartitionRangeDatumKind)
	*p = x
	return p
}

func (x PartitionRangeDatumKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartitionRangeDatumKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[9].Descriptor()
}

func (PartitionRangeDatumKind) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[9]
}

func (x PartitionRangeDatumKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartitionRangeDatumKind.Descriptor instead.
func (PartitionRangeDatumKind) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{9}
}

type RTEKind int32

const (
	RTEKind_RTEKIND_UNDEFINED   RTEKind = 0
	RTEKind_RTE_RELATION        RTEKind = 1
	RTEKind_RTE_SUBQUERY        RTEKind = 2
	RTEKind_RTE_JOIN            RTEKind = 3
	RTEKind_RTE_FUNCTION        RTEKind = 4
	RTEKind_RTE_TABLEFUNC       RTEKind = 5
	RTEKind_RTE_VALUES          RTEKind = 6
	RTEKind_RTE_CTE             RTEKind = 7
	RTEKind_RTE_NAMEDTUPLESTORE RTEKind = 8
	RTEKind_RTE_RESULT          RTEKind = 9
)

// Enum value maps for RTEKind.
var (
	RTEKind_name = map[int32]string{
		0: "RTEKIND_UNDEFINED",
		1: "RTE_RELATION",
		2: "RTE_SUBQUERY",
		3: "RTE_JOIN",
		4: "RTE_FUNCTION",
		5: "RTE_TABLEFUNC",
		6: "RTE_VALUES",
		7: "RTE_CTE",
		8: "RTE_NAMEDTUPLESTORE",
		9: "RTE_RESULT",
	}
	RTEKind_value = map[string]int32{
		"RTEKIND_UNDEFINED":   0,
		"RTE_RELATION":        1,
		"RTE_SUBQUERY":        2,
		"RTE_JOIN":            3,
		"RTE_FUNCTION":        4,
		"RTE_TABLEFUNC":       5,
		"RTE_VALUES":          6,
		"RTE_CTE":             7,
		"RTE_NAMEDTUPLESTORE": 8,
		"RTE_RESULT":          9,
	}
)

func (x RTEKind) Enum() *RTEKind {
	p := new(RTEKind)
	*p = x
	return p
}

func (x RTEKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RTEKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[10].Descriptor()
}

func (RTEKind) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[10]
}

func (x RTEKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RTEKind.Descriptor instead.
func (RTEKind) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{10}
}

type WCOKind int32

const (
	WCOKind_WCOKIND_UNDEFINED          WCOKind = 0
	WCOKind_WCO_VIEW_CHECK             WCOKind = 1
	WCOKind_WCO_RLS_INSERT_CHECK       WCOKind = 2
	WCOKind_WCO_RLS_UPDATE_CHECK       WCOKind = 3
	WCOKind_WCO_RLS_CONFLICT_CHECK     WCOKind = 4
	WCOKind_WCO_RLS_MERGE_UPDATE_CHECK WCOKind = 5
	WCOKind_WCO_RLS_MERGE_DELETE_CHECK WCOKind = 6
)

// Enum value maps for WCOKind.
var (
	WCOKind_name = map[int32]string{
		0: "WCOKIND_UNDEFINED",
		1: "WCO_VIEW_CHECK",
		2: "WCO_RLS_INSERT_CHECK",
		3: "WCO_RLS_UPDATE_CHECK",
		4: "WCO_RLS_CONFLICT_CHECK",
		5: "WCO_RLS_MERGE_UPDATE_CHECK",
		6: "WCO_RLS_MERGE_DELETE_CHECK",
	}
	WCOKind_value = map[string]int32{
		"WCOKIND_UNDEFINED":          0,
		"WCO_VIEW_CHECK":             1,
		"WCO_RLS_INSERT_CHECK":       2,
		"WCO_RLS_UPDATE_CHECK":       3,
		"WCO_RLS_CONFLICT_CHECK":     4,
		"WCO_RLS_MERGE_UPDATE_CHECK": 5,
		"WCO_RLS_MERGE_DELETE_CHECK": 6,
	}
)

func (x WCOKind) Enum() *WCOKind {
	p := new(WCOKind)
	*p = x
	return p
}

func (x WCOKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WCOKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[11].Descriptor()
}

func (WCOKind) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[11]
}

func (x WCOKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WCOKind.Descriptor instead.
func (WCOKind) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{11}
}

type GroupingSetKind int32

const (
	GroupingSetKind_GROUPING_SET_KIND_UNDEFINED GroupingSetKind = 0
	GroupingSetKind_GROUPING_SET_EMPTY          GroupingSetKind = 1
	GroupingSetKind_GROUPING_SET_SIMPLE         GroupingSetKind = 2
	GroupingSetKind_GROUPING_SET_ROLLUP         GroupingSetKind = 3
	GroupingSetKind_GROUPING_SET_CUBE           GroupingSetKind = 4
	GroupingSetKind_GROUPING_SET_SETS           GroupingSetKind = 5
)

// Enum value maps for GroupingSetKind.
var (
	GroupingSetKind_name = map[int32]string{
		0: "GROUPING_SET_KIND_UNDEFINED",
		1: "GROUPING_SET_EMPTY",
		2: "GROUPING_SET_SIMPLE",
		3: "GROUPING_SET_ROLLUP",
		4: "GROUPING_SET_CUBE",
		5: "GROUPING_SET_SETS",
	}
	GroupingSetKind_value = map[string]int32{
		"GROUPING_SET_KIND_UNDEFINED": 0,
		"GROUPING_SET_EMPTY":          1,
		"GROUPING_SET_SIMPLE":         2,
		"GROUPING_SET_ROLLUP":         3,
		"GROUPING_SET_CUBE":           4,
		"GROUPING_SET_SETS":           5,
	}
)

func (x GroupingSetKind) Enum() *GroupingSetKind {
	p := new(GroupingSetKind)
	*p = x
	return p
}

func (x GroupingSetKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupingSetKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[12].Descriptor()
}

func (GroupingSetKind) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[12]
}

func (x GroupingSetKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupingSetKind.Descriptor instead.
func (GroupingSetKind) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{12}
}

type CTEMaterialize int32

const (
	CTEMaterialize_CTEMATERIALIZE_UNDEFINED CTEMaterialize = 0
	CTEMaterialize_CTEMaterializeDefault    CTEMaterialize = 1
	CTEMaterialize_CTEMaterializeAlways     CTEMaterialize = 2
	CTEMaterialize_CTEMaterializeNever      CTEMaterialize = 3
)

// Enum value maps for CTEMaterialize.
var (
	CTEMaterialize_name = map[int32]string{
		0: "CTEMATERIALIZE_UNDEFINED",
		1: "CTEMaterializeDefault",
		2: "CTEMaterializeAlways",
		3: "CTEMaterializeNever",
	}
	CTEMaterialize_value = map[string]int32{
		"CTEMATERIALIZE_UNDEFINED": 0,
		"CTEMaterializeDefault":    1,
		"CTEMaterializeAlways":     2,
		"CTEMaterializeNever":      3,
	}
)

func (x CTEMaterialize) Enum() *CTEMaterialize {
	p := new(CTEMaterialize)
	*p = x
	return p
}

func (x CTEMaterialize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CTEMaterialize) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[13].Descriptor()
}

func (CTEMaterialize) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[13]
}

func (x CTEMaterialize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CTEMaterialize.Descriptor instead.
func (CTEMaterialize) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{13}
}

type SetOperation int32

const (
	SetOperation_SET_OPERATION_UNDEFINED SetOperation = 0
	SetOperation_SETOP_NONE              SetOperation = 1
	SetOperation_SETOP_UNION             SetOperation = 2
	SetOperation_SETOP_INTERSECT         SetOperation = 3
	SetOperation_SETOP_EXCEPT            SetOperation = 4
)

// Enum value maps for SetOperation.
var (
	SetOperation_name = map[int32]string{
		0: "SET_OPERATION_UNDEFINED",
		1: "SETOP_NONE",
		2: "SETOP_UNION",
		3: "SETOP_INTERSECT",
		4: "SETOP_EXCEPT",
	}
	SetOperation_value = map[string]int32{
		"SET_OPERATION_UNDEFINED": 0,
		"SETOP_NONE":              1,
		"SETOP_UNION":             2,
		"SETOP_INTERSECT":         3,
		"SETOP_EXCEPT":            4,
	}
)

func (x SetOperation) Enum() *SetOperation {
	p := new(SetOperation)
	*p = x
	return p
}

func (x SetOperation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetOperation) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[14].Descriptor()
}

func (SetOperation) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[14]
}

func (x SetOperation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetOperation.Descriptor instead.
func (SetOperation) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{14}
}

type ObjectType int32

const (
	ObjectType_OBJECT_TYPE_UNDEFINED        ObjectType = 0
	ObjectType_OBJECT_ACCESS_METHOD         ObjectType = 1
	ObjectType_OBJECT_AGGREGATE             ObjectType = 2
	ObjectType_OBJECT_AMOP                  ObjectType = 3
	ObjectType_OBJECT_AMPROC                ObjectType = 4
	ObjectType_OBJECT_ATTRIBUTE             ObjectType = 5
	ObjectType_OBJECT_CAST                  ObjectType = 6
	ObjectType_OBJECT_COLUMN                ObjectType = 7
	ObjectType_OBJECT_COLLATION             ObjectType = 8
	ObjectType_OBJECT_CONVERSION            ObjectType = 9
	ObjectType_OBJECT_DATABASE              ObjectType = 10
	ObjectType_OBJECT_DEFAULT               ObjectType = 11
	ObjectType_OBJECT_DEFACL                ObjectType = 12
	ObjectType_OBJECT_DOMAIN                ObjectType = 13
	ObjectType_OBJECT_DOMCONSTRAINT         ObjectType = 14
	ObjectType_OBJECT_EVENT_TRIGGER         ObjectType = 15
	ObjectType_OBJECT_EXTENSION             ObjectType = 16
	ObjectType_OBJECT_FDW                   ObjectType = 17
	ObjectType_OBJECT_FOREIGN_SERVER        ObjectType = 18
	ObjectType_OBJECT_FOREIGN_TABLE         ObjectType = 19
	ObjectType_OBJECT_FUNCTION              ObjectType = 20
	ObjectType_OBJECT_INDEX                 ObjectType = 21
	ObjectType_OBJECT_LANGUAGE              ObjectType = 22
	ObjectType_OBJECT_LARGEOBJECT           ObjectType = 23
	ObjectType_OBJECT_MATVIEW               ObjectType = 24
	ObjectType_OBJECT_OPCLASS               ObjectType = 25
	ObjectType_OBJECT_OPERATOR              ObjectType = 26
	ObjectType_OBJECT_OPFAMILY              ObjectType = 27
	ObjectType_OBJECT_PARAMETER_ACL         ObjectType = 28
	ObjectType_OBJECT_POLICY                ObjectType = 29
	ObjectType_OBJECT_PROCEDURE             ObjectType = 30
	ObjectType_OBJECT_PUBLICATION           ObjectType = 31
	ObjectType_OBJECT_PUBLICATION_NAMESPACE ObjectType = 32
	ObjectType_OBJECT_PUBLICATION_REL       ObjectType = 33
	ObjectType_OBJECT_ROLE                  ObjectType = 34
	ObjectType_OBJECT_ROUTINE               ObjectType = 35
	ObjectType_OBJECT_RULE                  ObjectType = 36
	ObjectType_OBJECT_SCHEMA                ObjectType = 37
	ObjectType_OBJECT_SEQUENCE              ObjectType = 38
	ObjectType_OBJECT_SUBSCRIPTION          ObjectType = 39
	ObjectType_OBJECT_STATISTIC_EXT         ObjectType = 40
	ObjectType_OBJECT_TABCONSTRAINT         ObjectType = 41
	ObjectType_OBJECT_TABLE                 ObjectType = 42
	ObjectType_OBJECT_TABLESPACE            ObjectType = 43
	ObjectType_OBJECT_TRANSFORM             ObjectType = 44
	ObjectType_OBJECT_TRIGGER               ObjectType = 45
	ObjectType_OBJECT_TSCONFIGURATION       ObjectType = 46
	ObjectType_OBJECT_TSDICTIONARY          ObjectType = 47
	ObjectType_OBJECT_TSPARSER              ObjectType = 48
	ObjectType_OBJECT_TSTEMPLATE            ObjectType = 49
	ObjectType_OBJECT_TYPE                  ObjectType = 50
	ObjectType_OBJECT_USER_MAPPING          ObjectType = 51
	ObjectType_OBJECT_VIEW                  ObjectType = 52
)

// Enum value maps for ObjectType.
var (
	ObjectType_name = map[int32]string{
		0:  "OBJECT_TYPE_UNDEFINED",
		1:  "OBJECT_ACCESS_METHOD",
		2:  "OBJECT_AGGREGATE",
		3:  "OBJECT_AMOP",
		4:  "OBJECT_AMPROC",
		5:  "OBJECT_ATTRIBUTE",
		6:  "OBJECT_CAST",
		7:  "OBJECT_COLUMN",
		8:  "OBJECT_COLLATION",
		9:  "OBJECT_CONVERSION",
		10: "OBJECT_DATABASE",
		11: "OBJECT_DEFAULT",
		12: "OBJECT_DEFACL",
		13: "OBJECT_DOMAIN",
		14: "OBJECT_DOMCONSTRAINT",
		15: "OBJECT_EVENT_TRIGGER",
		16: "OBJECT_EXTENSION",
		17: "OBJECT_FDW",
		18: "OBJECT_FOREIGN_SERVER",
		19: "OBJECT_FOREIGN_TABLE",
		20: "OBJECT_FUNCTION",
		21: "OBJECT_INDEX",
		22: "OBJECT_LANGUAGE",
		23: "OBJECT_LARGEOBJECT",
		24: "OBJECT_MATVIEW",
		25: "OBJECT_OPCLASS",
		26: "OBJECT_OPERATOR",
		27: "OBJECT_OPFAMILY",
		28: "OBJECT_PARAMETER_ACL",
		29: "OBJECT_POLICY",
		30: "OBJECT_PROCEDURE",
		31: "OBJECT_PUBLICATION",
		32: "OBJECT_PUBLICATION_NAMESPACE",
		33: "OBJECT_PUBLICATION_REL",
		34: "OBJECT_ROLE",
		35: "OBJECT_ROUTINE",
		36: "OBJECT_RULE",
		37: "OBJECT_SCHEMA",
		38: "OBJECT_SEQUENCE",
		39: "OBJECT_SUBSCRIPTION",
		40: "OBJECT_STATISTIC_EXT",
		41: "OBJECT_TABCONSTRAINT",
		42: "OBJECT_TABLE",
		43: "OBJECT_TABLESPACE",
		44: "OBJECT_TRANSFORM",
		45: "OBJECT_TRIGGER",
		46: "OBJECT_TSCONFIGURATION",
		47: "OBJECT_TSDICTIONARY",
		48: "OBJECT_TSPARSER",
		49: "OBJECT_TSTEMPLATE",
		50: "OBJECT_TYPE",
		51: "OBJECT_USER_MAPPING",
		52: "OBJECT_VIEW",
	}
	ObjectType_value = map[string]int32{
		"OBJECT_TYPE_UNDEFINED":        0,
		"OBJECT_ACCESS_METHOD":         1,
		"OBJECT_AGGREGATE":             2,
		"OBJECT_AMOP":                  3,
		"OBJECT_AMPROC":                4,
		"OBJECT_ATTRIBUTE":             5,
		"OBJECT_CAST":                  6,
		"OBJECT_COLUMN":                7,
		"OBJECT_COLLATION":             8,
		"OBJECT_CONVERSION":            9,
		"OBJECT_DATABASE":              10,
		"OBJECT_DEFAULT":               11,
		"OBJECT_DEFACL":                12,
		"OBJECT_DOMAIN":                13,
		"OBJECT_DOMCONSTRAINT":         14,
		"OBJECT_EVENT_TRIGGER":         15,
		"OBJECT_EXTENSION":             16,
		"OBJECT_FDW":                   17,
		"OBJECT_FOREIGN_SERVER":        18,
		"OBJECT_FOREIGN_TABLE":         19,
		"OBJECT_FUNCTION":              20,
		"OBJECT_INDEX":                 21,
		"OBJECT_LANGUAGE":              22,
		"OBJECT_LARGEOBJECT":           23,
		"OBJECT_MATVIEW":               24,
		"OBJECT_OPCLASS":               25,
		"OBJECT_OPERATOR":              26,
		"OBJECT_OPFAMILY":              27,
		"OBJECT_PARAMETER_ACL":         28,
		"OBJECT_POLICY":                29,
		"OBJECT_PROCEDURE":             30,
		"OBJECT_PUBLICATION":           31,
		"OBJECT_PUBLICATION_NAMESPACE": 32,
		"OBJECT_PUBLICATION_REL":       33,
		"OBJECT_ROLE":                  34,
		"OBJECT_ROUTINE":               35,
		"OBJECT_RULE":                  36,
		"OBJECT_SCHEMA":                37,
		"OBJECT_SEQUENCE":              38,
		"OBJECT_SUBSCRIPTION":          39,
		"OBJECT_STATISTIC_EXT":         40,
		"OBJECT_TABCONSTRAINT":         41,
		"OBJECT_TABLE":                 42,
		"OBJECT_TABLESPACE":            43,
		"OBJECT_TRANSFORM":             44,
		"OBJECT_TRIGGER":               45,
		"OBJECT_TSCONFIGURATION":       46,
		"OBJECT_TSDICTIONARY":          47,
		"OBJECT_TSPARSER":              48,
		"OBJECT_TSTEMPLATE":            49,
		"OBJECT_TYPE":                  50,
		"OBJECT_USER_MAPPING":          51,
		"OBJECT_VIEW":                  52,
	}
)

func (x ObjectType) Enum() *ObjectType {
	p := new(ObjectType)
	*p = x
	return p
}

func (x ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[15].Descriptor()
}

func (ObjectType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[15]
}

func (x ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectType.Descriptor instead.
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{15}
}

type DropBehavior int32

const (
	DropBehavior_DROP_BEHAVIOR_UNDEFINED DropBehavior = 0
	DropBehavior_DROP_RESTRICT           DropBehavior = 1
	DropBehavior_DROP_CASCADE            DropBehavior = 2
)

// Enum value maps for DropBehavior.
var (
	DropBehavior_name = map[int32]string{
		0: "DROP_BEHAVIOR_UNDEFINED",
		1: "DROP_RESTRICT",
		2: "DROP_CASCADE",
	}
	DropBehavior_value = map[string]int32{
		"DROP_BEHAVIOR_UNDEFINED": 0,
		"DROP_RESTRICT":           1,
		"DROP_CASCADE":            2,
	}
)

func (x DropBehavior) Enum() *DropBehavior {
	p := new(DropBehavior)
	*p = x
	return p
}

func (x DropBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DropBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[16].Descriptor()
}

func (DropBehavior) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[16]
}

func (x DropBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DropBehavior.Descriptor instead.
func (DropBehavior) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{16}
}

type AlterTableType int32

const (
	AlterTableType_ALTER_TABLE_TYPE_UNDEFINED   AlterTableType = 0
	AlterTableType_AT_AddColumn                 AlterTableType = 1
	AlterTableType_AT_AddColumnRecurse          AlterTableType = 2
	AlterTableType_AT_AddColumnToView           AlterTableType = 3
	AlterTableType_AT_ColumnDefault             AlterTableType = 4
	AlterTableType_AT_CookedColumnDefault       AlterTableType = 5
	AlterTableType_AT_DropNotNull               AlterTableType = 6
	AlterTableType_AT_SetNotNull                AlterTableType = 7
	AlterTableType_AT_DropExpression            AlterTableType = 8
	AlterTableType_AT_CheckNotNull              AlterTableType = 9
	AlterTableType_AT_SetStatistics             AlterTableType = 10
	AlterTableType_AT_SetOptions                AlterTableType = 11
	AlterTableType_AT_ResetOptions              AlterTableType = 12
	AlterTableType_AT_SetStorage                AlterTableType = 13
	AlterTableType_AT_SetCompression            AlterTableType = 14
	AlterTableType_AT_DropColumn                AlterTableType = 15
	AlterTableType_AT_DropColumnRecurse         AlterTableType = 16
	AlterTableType_AT_AddIndex                  AlterTableType = 17
	AlterTableType_AT_ReAddIndex                AlterTableType = 18
	AlterTableType_AT_AddConstraint             AlterTableType = 19
	AlterTableType_AT_AddConstraintRecurse      AlterTableType = 20
	AlterTableType_AT_ReAddConstraint           AlterTableType = 21
	AlterTableType_AT_ReAddDomainConstraint     AlterTableType = 22
	AlterTableType_AT_AlterConstraint           AlterTableType = 23
	AlterTableType_AT_ValidateConstraint        AlterTableType = 24
	AlterTableType_AT_ValidateConstraintRecurse AlterTableType = 25
	AlterTableType_AT_AddIndexConstraint        AlterTableType = 26
	AlterTableType_AT_DropConstraint            AlterTableType = 27
	AlterTableType_AT_DropConstraintRecurse     AlterTableType = 28
	AlterTableType_AT_ReAddComment              AlterTableType = 29
	AlterTableType_AT_AlterColumnType           AlterTableType = 30
	AlterTableType_AT_AlterColumnGenericOptions AlterTableType = 31
	AlterTableType_AT_ChangeOwner               AlterTableType = 32
	AlterTableType_AT_ClusterOn                 AlterTableType = 33
	AlterTableType_AT_DropCluster               AlterTableType = 34
	AlterTableType_AT_SetLogged                 AlterTableType = 35
	AlterTableType_AT_SetUnLogged               AlterTableType = 36
	AlterTableType_AT_DropOids                  AlterTableType = 37
	AlterTableType_AT_SetAccessMethod           AlterTableType = 38
	AlterTableType_AT_SetTableSpace             AlterTableType = 39
	AlterTableType_AT_SetRelOptions             AlterTableType = 40
	AlterTableType_AT_ResetRelOptions           AlterTableType = 41
	AlterTableType_AT_ReplaceRelOptions         AlterTableType = 42
	AlterTableType_AT_EnableTrig                AlterTableType = 43
	AlterTableType_AT_EnableAlwaysTrig          AlterTableType = 44
	AlterTableType_AT_EnableReplicaTrig         AlterTableType = 45
	AlterTableType_AT_DisableTrig               AlterTableType = 46
	AlterTableType_AT_EnableTrigAll             AlterTableType = 47
	AlterTableType_AT_DisableTrigAll            AlterTableType = 48
	AlterTableType_AT_EnableTrigUser            AlterTableType = 49
	AlterTableType_AT_DisableTrigUser           AlterTableType = 50
	AlterTableType_AT_EnableRule                AlterTableType = 51
	AlterTableType_AT_EnableAlwaysRule          AlterTableType = 52
	AlterTableType_AT_EnableReplicaRule         AlterTableType = 53
	AlterTableType_AT_DisableRule               AlterTableType = 54
	AlterTableType_AT_AddInherit                AlterTableType = 55
	AlterTableType_AT_DropInherit               AlterTableType = 56
	AlterTableType_AT_AddOf                     AlterTableType = 57
	AlterTableType_AT_DropOf                    AlterTableType = 58
	AlterTableType_AT_ReplicaIdentity           AlterTableType = 59
	AlterTableType_AT_EnableRowSecurity         AlterTableType = 60
	AlterTableType_AT_DisableRowSecurity        AlterTableType = 61
	AlterTableType_AT_ForceRowSecurity          AlterTableType = 62
	AlterTableType_AT_NoForceRowSecurity        AlterTableType = 63
	AlterTableType_AT_GenericOptions            AlterTableType = 64
	AlterTableType_AT_AttachPartition           AlterTableType = 65
	AlterTableType_AT_DetachPartition           AlterTableType = 66
	AlterTableType_AT_DetachPartitionFinalize   AlterTableType = 67
	AlterTableType_AT_AddIdentity               AlterTableType = 68
	AlterTableType_AT_SetIdentity               AlterTableType = 69
	AlterTableType_AT_DropIdentity              AlterTableType = 70
	AlterTableType_AT_ReAddStatistics           AlterTableType = 71
)

// Enum value maps for AlterTableType.
var (
	AlterTableType_name = map[int32]string{
		0:  "ALTER_TABLE_TYPE_UNDEFINED",
		1:  "AT_AddColumn",
		2:  "AT_AddColumnRecurse",
		3:  "AT_AddColumnToView",
		4:  "AT_ColumnDefault",
		5:  "AT_CookedColumnDefault",
		6:  "AT_DropNotNull",
		7:  "AT_SetNotNull",
		8:  "AT_DropExpression",
		9:  "AT_CheckNotNull",
		10: "AT_SetStatistics",
		11: "AT_SetOptions",
		12: "AT_ResetOptions",
		13: "AT_SetStorage",
		14: "AT_SetCompression",
		15: "AT_DropColumn",
		16: "AT_DropColumnRecurse",
		17: "AT_AddIndex",
		18: "AT_ReAddIndex",
		19: "AT_AddConstraint",
		20: "AT_AddConstraintRecurse",
		21: "AT_ReAddConstraint",
		22: "AT_ReAddDomainConstraint",
		23: "AT_AlterConstraint",
		24: "AT_ValidateConstraint",
		25: "AT_ValidateConstraintRecurse",
		26: "AT_AddIndexConstraint",
		27: "AT_DropConstraint",
		28: "AT_DropConstraintRecurse",
		29: "AT_ReAddComment",
		30: "AT_AlterColumnType",
		31: "AT_AlterColumnGenericOptions",
		32: "AT_ChangeOwner",
		33: "AT_ClusterOn",
		34: "AT_DropCluster",
		35: "AT_SetLogged",
		36: "AT_SetUnLogged",
		37: "AT_DropOids",
		38: "AT_SetAccessMethod",
		39: "AT_SetTableSpace",
		40: "AT_SetRelOptions",
		41: "AT_ResetRelOptions",
		42: "AT_ReplaceRelOptions",
		43: "AT_EnableTrig",
		44: "AT_EnableAlwaysTrig",
		45: "AT_EnableReplicaTrig",
		46: "AT_DisableTrig",
		47: "AT_EnableTrigAll",
		48: "AT_DisableTrigAll",
		49: "AT_EnableTrigUser",
		50: "AT_DisableTrigUser",
		51: "AT_EnableRule",
		52: "AT_EnableAlwaysRule",
		53: "AT_EnableReplicaRule",
		54: "AT_DisableRule",
		55: "AT_AddInherit",
		56: "AT_DropInherit",
		57: "AT_AddOf",
		58: "AT_DropOf",
		59: "AT_ReplicaIdentity",
		60: "AT_EnableRowSecurity",
		61: "AT_DisableRowSecurity",
		62: "AT_ForceRowSecurity",
		63: "AT_NoForceRowSecurity",
		64: "AT_GenericOptions",
		65: "AT_AttachPartition",
		66: "AT_DetachPartition",
		67: "AT_DetachPartitionFinalize",
		68: "AT_AddIdentity",
		69: "AT_SetIdentity",
		70: "AT_DropIdentity",
		71: "AT_ReAddStatistics",
	}
	AlterTableType_value = map[string]int32{
		"ALTER_TABLE_TYPE_UNDEFINED":   0,
		"AT_AddColumn":                 1,
		"AT_AddColumnRecurse":          2,
		"AT_AddColumnToView":           3,
		"AT_ColumnDefault":             4,
		"AT_CookedColumnDefault":       5,
		"AT_DropNotNull":               6,
		"AT_SetNotNull":                7,
		"AT_DropExpression":            8,
		"AT_CheckNotNull":              9,
		"AT_SetStatistics":             10,
		"AT_SetOptions":                11,
		"AT_ResetOptions":              12,
		"AT_SetStorage":                13,
		"AT_SetCompression":            14,
		"AT_DropColumn":                15,
		"AT_DropColumnRecurse":         16,
		"AT_AddIndex":                  17,
		"AT_ReAddIndex":                18,
		"AT_AddConstraint":             19,
		"AT_AddConstraintRecurse":      20,
		"AT_ReAddConstraint":           21,
		"AT_ReAddDomainConstraint":     22,
		"AT_AlterConstraint":           23,
		"AT_ValidateConstraint":        24,
		"AT_ValidateConstraintRecurse": 25,
		"AT_AddIndexConstraint":        26,
		"AT_DropConstraint":            27,
		"AT_DropConstraintRecurse":     28,
		"AT_ReAddComment":              29,
		"AT_AlterColumnType":           30,
		"AT_AlterColumnGenericOptions": 31,
		"AT_ChangeOwner":               32,
		"AT_ClusterOn":                 33,
		"AT_DropCluster":               34,
		"AT_SetLogged":                 35,
		"AT_SetUnLogged":               36,
		"AT_DropOids":                  37,
		"AT_SetAccessMethod":           38,
		"AT_SetTableSpace":             39,
		"AT_SetRelOptions":             40,
		"AT_ResetRelOptions":           41,
		"AT_ReplaceRelOptions":         42,
		"AT_EnableTrig":                43,
		"AT_EnableAlwaysTrig":          44,
		"AT_EnableReplicaTrig":         45,
		"AT_DisableTrig":               46,
		"AT_EnableTrigAll":             47,
		"AT_DisableTrigAll":            48,
		"AT_EnableTrigUser":            49,
		"AT_DisableTrigUser":           50,
		"AT_EnableRule":                51,
		"AT_EnableAlwaysRule":          52,
		"AT_EnableReplicaRule":         53,
		"AT_DisableRule":               54,
		"AT_AddInherit":                55,
		"AT_DropInherit":               56,
		"AT_AddOf":                     57,
		"AT_DropOf":                    58,
		"AT_ReplicaIdentity":           59,
		"AT_EnableRowSecurity":         60,
		"AT_DisableRowSecurity":        61,
		"AT_ForceRowSecurity":          62,
		"AT_NoForceRowSecurity":        63,
		"AT_GenericOptions":            64,
		"AT_AttachPartition":           65,
		"AT_DetachPartition":           66,
		"AT_DetachPartitionFinalize":   67,
		"AT_AddIdentity":               68,
		"AT_SetIdentity":               69,
		"AT_DropIdentity":              70,
		"AT_ReAddStatistics":           71,
	}
)

func (x AlterTableType) Enum() *AlterTableType {
	p := new(AlterTableType)
	*p = x
	return p
}

func (x AlterTableType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlterTableType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[17].Descriptor()
}

func (AlterTableType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[17]
}

func (x AlterTableType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlterTableType.Descriptor instead.
func (AlterTableType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{17}
}

type GrantTargetType int32

const (
	GrantTargetType_GRANT_TARGET_TYPE_UNDEFINED GrantTargetType = 0
	GrantTargetType_ACL_TARGET_OBJECT           GrantTargetType = 1
	GrantTargetType_ACL_TARGET_ALL_IN_SCHEMA    GrantTargetType = 2
	GrantTargetType_ACL_TARGET_DEFAULTS         GrantTargetType = 3
)

// Enum value maps for GrantTargetType.
var (
	GrantTargetType_name = map[int32]string{
		0: "GRANT_TARGET_TYPE_UNDEFINED",
		1: "ACL_TARGET_OBJECT",
		2: "ACL_TARGET_ALL_IN_SCHEMA",
		3: "ACL_TARGET_DEFAULTS",
	}
	GrantTargetType_value = map[string]int32{
		"GRANT_TARGET_TYPE_UNDEFINED": 0,
		"ACL_TARGET_OBJECT":           1,
		"ACL_TARGET_ALL_IN_SCHEMA":    2,
		"ACL_TARGET_DEFAULTS":         3,
	}
)

func (x GrantTargetType) Enum() *GrantTargetType {
	p := new(GrantTargetType)
	*p = x
	return p
}

func (x GrantTargetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GrantTargetType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[18].Descriptor()
}

func (GrantTargetType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[18]
}

func (x GrantTargetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GrantTargetType.Descriptor instead.
func (GrantTargetType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{18}
}

type VariableSetKind int32

const (
	VariableSetKind_VARIABLE_SET_KIND_UNDEFINED VariableSetKind = 0
	VariableSetKind_VAR_SET_VALUE               VariableSetKind = 1
	VariableSetKind_VAR_SET_DEFAULT             VariableSetKind = 2
	VariableSetKind_VAR_SET_CURRENT             VariableSetKind = 3
	VariableSetKind_VAR_SET_MULTI               VariableSetKind = 4
	VariableSetKind_VAR_RESET                   VariableSetKind = 5
	VariableSetKind_VAR_RESET_ALL               VariableSetKind = 6
)

// Enum value maps for VariableSetKind.
var (
	VariableSetKind_name = map[int32]string{
		0: "VARIABLE_SET_KIND_UNDEFINED",
		1: "VAR_SET_VALUE",
		2: "VAR_SET_DEFAULT",
		3: "VAR_SET_CURRENT",
		4: "VAR_SET_MULTI",
		5: "VAR_RESET",
		6: "VAR_RESET_ALL",
	}
	VariableSetKind_value = map[string]int32{
		"VARIABLE_SET_KIND_UNDEFINED": 0,
		"VAR_SET_VALUE":               1,
		"VAR_SET_DEFAULT":             2,
		"VAR_SET_CURRENT":             3,
		"VAR_SET_MULTI":               4,
		"VAR_RESET":                   5,
		"VAR_RESET_ALL":               6,
	}
)

func (x VariableSetKind) Enum() *VariableSetKind {
	p := new(VariableSetKind)
	*p = x
	return p
}

func (x VariableSetKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VariableSetKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[19].Descriptor()
}

func (VariableSetKind) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[19]
}

func (x VariableSetKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VariableSetKind.Descriptor instead.
func (VariableSetKind) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{19}
}

type ConstrType int32

const (
	ConstrType_CONSTR_TYPE_UNDEFINED      ConstrType = 0
	ConstrType_CONSTR_NULL                ConstrType = 1
	ConstrType_CONSTR_NOTNULL             ConstrType = 2
	ConstrType_CONSTR_DEFAULT             ConstrType = 3
	ConstrType_CONSTR_IDENTITY            ConstrType = 4
	ConstrType_CONSTR_GENERATED           ConstrType = 5
	ConstrType_CONSTR_CHECK               ConstrType = 6
	ConstrType_CONSTR_PRIMARY             ConstrType = 7
	ConstrType_CONSTR_UNIQUE              ConstrType = 8
	ConstrType_CONSTR_EXCLUSION           ConstrType = 9
	ConstrType_CONSTR_FOREIGN             ConstrType = 10
	ConstrType_CONSTR_ATTR_DEFERRABLE     ConstrType = 11
	ConstrType_CONSTR_ATTR_NOT_DEFERRABLE ConstrType = 12
	ConstrType_CONSTR_ATTR_DEFERRED       ConstrType = 13
	ConstrType_CONSTR_ATTR_IMMEDIATE      ConstrType = 14
)

// Enum value maps for ConstrType.
var (
	ConstrType_name = map[int32]string{
		0:  "CONSTR_TYPE_UNDEFINED",
		1:  "CONSTR_NULL",
		2:  "CONSTR_NOTNULL",
		3:  "CONSTR_DEFAULT",
		4:  "CONSTR_IDENTITY",
		5:  "CONSTR_GENERATED",
		6:  "CONSTR_CHECK",
		7:  "CONSTR_PRIMARY",
		8:  "CONSTR_UNIQUE",
		9:  "CONSTR_EXCLUSION",
		10: "CONSTR_FOREIGN",
		11: "CONSTR_ATTR_DEFERRABLE",
		12: "CONSTR_ATTR_NOT_DEFERRABLE",
		13: "CONSTR_ATTR_DEFERRED",
		14: "CONSTR_ATTR_IMMEDIATE",
	}
	ConstrType_value = map[string]int32{
		"CONSTR_TYPE_UNDEFINED":      0,
		"CONSTR_NULL":                1,
		"CONSTR_NOTNULL":             2,
		"CONSTR_DEFAULT":             3,
		"CONSTR_IDENTITY":            4,
		"CONSTR_GENERATED":           5,
		"CONSTR_CHECK":               6,
		"CONSTR_PRIMARY":             7,
		"CONSTR_UNIQUE":              8,
		"CONSTR_EXCLUSION":           9,
		"CONSTR_FOREIGN":             10,
		"CONSTR_ATTR_DEFERRABLE":     11,
		"CONSTR_ATTR_NOT_DEFERRABLE": 12,
		"CONSTR_ATTR_DEFERRED":       13,
		"CONSTR_ATTR_IMMEDIATE":      14,
	}
)

func (x ConstrType) Enum() *ConstrType {
	p := new(ConstrType)
	*p = x
	return p
}

func (x ConstrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstrType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[20].Descriptor()
}

func (ConstrType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[20]
}

func (x ConstrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstrType.Descriptor instead.
func (ConstrType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{20}
}

type ImportForeignSchemaType int32

const (
	ImportForeignSchemaType_IMPORT_FOREIGN_SCHEMA_TYPE_UNDEFINED ImportForeignSchemaType = 0
	ImportForeignSchemaType_FDW_IMPORT_SCHEMA_ALL                ImportForeignSchemaType = 1
	ImportForeignSchemaType_FDW_IMPORT_SCHEMA_LIMIT_TO           ImportForeignSchemaType = 2
	ImportForeignSchemaType_FDW_IMPORT_SCHEMA_EXCEPT             ImportForeignSchemaType = 3
)

// Enum value maps for ImportForeignSchemaType.
var (
	ImportForeignSchemaType_name = map[int32]string{
		0: "IMPORT_FOREIGN_SCHEMA_TYPE_UNDEFINED",
		1: "FDW_IMPORT_SCHEMA_ALL",
		2: "FDW_IMPORT_SCHEMA_LIMIT_TO",
		3: "FDW_IMPORT_SCHEMA_EXCEPT",
	}
	ImportForeignSchemaType_value = map[string]int32{
		"IMPORT_FOREIGN_SCHEMA_TYPE_UNDEFINED": 0,
		"FDW_IMPORT_SCHEMA_ALL":                1,
		"FDW_IMPORT_SCHEMA_LIMIT_TO":           2,
		"FDW_IMPORT_SCHEMA_EXCEPT":             3,
	}
)

func (x ImportForeignSchemaType) Enum() *ImportForeignSchemaType {
	p := new(ImportForeignSchemaType)
	*p = x
	return p
}

func (x ImportForeignSchemaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImportForeignSchemaType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[21].Descriptor()
}

func (ImportForeignSchemaType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[21]
}

func (x ImportForeignSchemaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImportForeignSchemaType.Descriptor instead.
func (ImportForeignSchemaType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{21}
}

type RoleStmtType int32

const (
	RoleStmtType_ROLE_STMT_TYPE_UNDEFINED RoleStmtType = 0
	RoleStmtType_ROLESTMT_ROLE            RoleStmtType = 1
	RoleStmtType_ROLESTMT_USER            RoleStmtType = 2
	RoleStmtType_ROLESTMT_GROUP           RoleStmtType = 3
)

// Enum value maps for RoleStmtType.
var (
	RoleStmtType_name = map[int32]string{
		0: "ROLE_STMT_TYPE_UNDEFINED",
		1: "ROLESTMT_ROLE",
		2: "ROLESTMT_USER",
		3: "ROLESTMT_GROUP",
	}
	RoleStmtType_value = map[string]int32{
		"ROLE_STMT_TYPE_UNDEFINED": 0,
		"ROLESTMT_ROLE":            1,
		"ROLESTMT_USER":            2,
		"ROLESTMT_GROUP":           3,
	}
)

func (x RoleStmtType) Enum() *RoleStmtType {
	p := new(RoleStmtType)
	*p = x
	return p
}

func (x RoleStmtType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleStmtType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[22].Descriptor()
}

func (RoleStmtType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[22]
}

func (x RoleStmtType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleStmtType.Descriptor instead.
func (RoleStmtType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{22}
}

type FetchDirection int32

const (
	FetchDirection_FETCH_DIRECTION_UNDEFINED FetchDirection = 0
	FetchDirection_FETCH_FORWARD             FetchDirection = 1
	FetchDirection_FETCH_BACKWARD            FetchDirection = 2
	FetchDirection_FETCH_ABSOLUTE            FetchDirection = 3
	FetchDirection_FETCH_RELATIVE            FetchDirection = 4
)

// Enum value maps for FetchDirection.
var (
	FetchDirection_name = map[int32]string{
		0: "FETCH_DIRECTION_UNDEFINED",
		1: "FETCH_FORWARD",
		2: "FETCH_BACKWARD",
		3: "FETCH_ABSOLUTE",
		4: "FETCH_RELATIVE",
	}
	FetchDirection_value = map[string]int32{
		"FETCH_DIRECTION_UNDEFINED": 0,
		"FETCH_FORWARD":             1,
		"FETCH_BACKWARD":            2,
		"FETCH_ABSOLUTE":            3,
		"FETCH_RELATIVE":            4,
	}
)

func (x FetchDirection) Enum() *FetchDirection {
	p := new(FetchDirection)
	*p = x
	return p
}

func (x FetchDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FetchDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[23].Descriptor()
}

func (FetchDirection) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[23]
}

func (x FetchDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FetchDirection.Descriptor instead.
func (FetchDirection) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{23}
}

type FunctionParameterMode int32

const (
	FunctionParameterMode_FUNCTION_PARAMETER_MODE_UNDEFINED FunctionParameterMode = 0
	FunctionParameterMode_FUNC_PARAM_IN                     FunctionParameterMode = 1
	FunctionParameterMode_FUNC_PARAM_OUT                    FunctionParameterMode = 2
	FunctionParameterMode_FUNC_PARAM_INOUT                  FunctionParameterMode = 3
	FunctionParameterMode_FUNC_PARAM_VARIADIC               FunctionParameterMode = 4
	FunctionParameterMode_FUNC_PARAM_TABLE                  FunctionParameterMode = 5
	FunctionParameterMode_FUNC_PARAM_DEFAULT                FunctionParameterMode = 6
)

// Enum value maps for FunctionParameterMode.
var (
	FunctionParameterMode_name = map[int32]string{
		0: "FUNCTION_PARAMETER_MODE_UNDEFINED",
		1: "FUNC_PARAM_IN",
		2: "FUNC_PARAM_OUT",
		3: "FUNC_PARAM_INOUT",
		4: "FUNC_PARAM_VARIADIC",
		5: "FUNC_PARAM_TABLE",
		6: "FUNC_PARAM_DEFAULT",
	}
	FunctionParameterMode_value = map[string]int32{
		"FUNCTION_PARAMETER_MODE_UNDEFINED": 0,
		"FUNC_PARAM_IN":                     1,
		"FUNC_PARAM_OUT":                    2,
		"FUNC_PARAM_INOUT":                  3,
		"FUNC_PARAM_VARIADIC":               4,
		"FUNC_PARAM_TABLE":                  5,
		"FUNC_PARAM_DEFAULT":                6,
	}
)

func (x FunctionParameterMode) Enum() *FunctionParameterMode {
	p := new(FunctionParameterMode)
	*p = x
	return p
}

func (x FunctionParameterMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FunctionParameterMode) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[24].Descriptor()
}

func (FunctionParameterMode) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[24]
}

func (x FunctionParameterMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FunctionParameterMode.Descriptor instead.
func (FunctionParameterMode) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{24}
}

type TransactionStmtKind int32

const (
	TransactionStmtKind_TRANSACTION_STMT_KIND_UNDEFINED TransactionStmtKind = 0
	TransactionStmtKind_TRANS_STMT_BEGIN                TransactionStmtKind = 1
	TransactionStmtKind_TRANS_STMT_START                TransactionStmtKind = 2
	TransactionStmtKind_TRANS_STMT_COMMIT               TransactionStmtKind = 3
	TransactionStmtKind_TRANS_STMT_ROLLBACK             TransactionStmtKind = 4
	TransactionStmtKind_TRANS_STMT_SAVEPOINT            TransactionStmtKind = 5
	TransactionStmtKind_TRANS_STMT_RELEASE              TransactionStmtKind = 6
	TransactionStmtKind_TRANS_STMT_ROLLBACK_TO          TransactionStmtKind = 7
	TransactionStmtKind_TRANS_STMT_PREPARE              TransactionStmtKind = 8
	TransactionStmtKind_TRANS_STMT_COMMIT_PREPARED      TransactionStmtKind = 9
	TransactionStmtKind_TRANS_STMT_ROLLBACK_PREPARED    TransactionStmtKind = 10
)

// Enum value maps for TransactionStmtKind.
var (
	TransactionStmtKind_name = map[int32]string{
		0:  "TRANSACTION_STMT_KIND_UNDEFINED",
		1:  "TRANS_STMT_BEGIN",
		2:  "TRANS_STMT_START",
		3:  "TRANS_STMT_COMMIT",
		4:  "TRANS_STMT_ROLLBACK",
		5:  "TRANS_STMT_SAVEPOINT",
		6:  "TRANS_STMT_RELEASE",
		7:  "TRANS_STMT_ROLLBACK_TO",
		8:  "TRANS_STMT_PREPARE",
		9:  "TRANS_STMT_COMMIT_PREPARED",
		10: "TRANS_STMT_ROLLBACK_PREPARED",
	}
	TransactionStmtKind_value = map[string]int32{
		"TRANSACTION_STMT_KIND_UNDEFINED": 0,
		"TRANS_STMT_BEGIN":                1,
		"TRANS_STMT_START":                2,
		"TRANS_STMT_COMMIT":               3,
		"TRANS_STMT_ROLLBACK":             4,
		"TRANS_STMT_SAVEPOINT":            5,
		"TRANS_STMT_RELEASE":              6,
		"TRANS_STMT_ROLLBACK_TO":          7,
		"TRANS_STMT_PREPARE":              8,
		"TRANS_STMT_COMMIT_PREPARED":      9,
		"TRANS_STMT_ROLLBACK_PREPARED":    10,
	}
)

func (x TransactionStmtKind) Enum() *TransactionStmtKind {
	p := new(TransactionStmtKind)
	*p = x
	return p
}

func (x TransactionStmtKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStmtKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[25].Descriptor()
}

func (TransactionStmtKind) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[25]
}

func (x TransactionStmtKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStmtKind.Descriptor instead.
func (TransactionStmtKind) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{25}
}

type ViewCheckOption int32

const (
	ViewCheckOption_VIEW_CHECK_OPTION_UNDEFINED ViewCheckOption = 0
	ViewCheckOption_NO_CHECK_OPTION             ViewCheckOption = 1
	ViewCheckOption_LOCAL_CHECK_OPTION          ViewCheckOption = 2
	ViewCheckOption_CASCADED_CHECK_OPTION       ViewCheckOption = 3
)

// Enum value maps for ViewCheckOption.
var (
	ViewCheckOption_name = map[int32]string{
		0: "VIEW_CHECK_OPTION_UNDEFINED",
		1: "NO_CHECK_OPTION",
		2: "LOCAL_CHECK_OPTION",
		3: "CASCADED_CHECK_OPTION",
	}
	ViewCheckOption_value = map[string]int32{
		"VIEW_CHECK_OPTION_UNDEFINED": 0,
		"NO_CHECK_OPTION":             1,
		"LOCAL_CHECK_OPTION":          2,
		"CASCADED_CHECK_OPTION":       3,
	}
)

func (x ViewCheckOption) Enum() *ViewCheckOption {
	p := new(ViewCheckOption)
	*p = x
	return p
}

func (x ViewCheckOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ViewCheckOption) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[26].Descriptor()
}

func (ViewCheckOption) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[26]
}

func (x ViewCheckOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ViewCheckOption.Descriptor instead.
func (ViewCheckOption) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{26}
}

type DiscardMode int32

const (
	DiscardMode_DISCARD_MODE_UNDEFINED DiscardMode = 0
	DiscardMode_DISCARD_ALL            DiscardMode = 1
	DiscardMode_DISCARD_PLANS          DiscardMode = 2
	DiscardMode_DISCARD_SEQUENCES      DiscardMode = 3
	DiscardMode_DISCARD_TEMP           DiscardMode = 4
)

// Enum value maps for DiscardMode.
var (
	DiscardMode_name = map[int32]string{
		0: "DISCARD_MODE_UNDEFINED",
		1: "DISCARD_ALL",
		2: "DISCARD_PLANS",
		3: "DISCARD_SEQUENCES",
		4: "DISCARD_TEMP",
	}
	DiscardMode_value = map[string]int32{
		"DISCARD_MODE_UNDEFINED": 0,
		"DISCARD_ALL":            1,
		"DISCARD_PLANS":          2,
		"DISCARD_SEQUENCES":      3,
		"DISCARD_TEMP":           4,
	}
)

func (x DiscardMode) Enum() *DiscardMode {
	p := new(DiscardMode)
	*p = x
	return p
}

func (x DiscardMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscardMode) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[27].Descriptor()
}

func (DiscardMode) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[27]
}

func (x DiscardMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscardMode.Descriptor instead.
func (DiscardMode) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{27}
}

type ReindexObjectType int32

const (
	ReindexObjectType_REINDEX_OBJECT_TYPE_UNDEFINED ReindexObjectType = 0
	ReindexObjectType_REINDEX_OBJECT_INDEX          ReindexObjectType = 1
	ReindexObjectType_REINDEX_OBJECT_TABLE          ReindexObjectType = 2
	ReindexObjectType_REINDEX_OBJECT_SCHEMA         ReindexObjectType = 3
	ReindexObjectType_REINDEX_OBJECT_SYSTEM         ReindexObjectType = 4
	ReindexObjectType_REINDEX_OBJECT_DATABASE       ReindexObjectType = 5
)

// Enum value maps for ReindexObjectType.
var (
	ReindexObjectType_name = map[int32]string{
		0: "REINDEX_OBJECT_TYPE_UNDEFINED",
		1: "REINDEX_OBJECT_INDEX",
		2: "REINDEX_OBJECT_TABLE",
		3: "REINDEX_OBJECT_SCHEMA",
		4: "REINDEX_OBJECT_SYSTEM",
		5: "REINDEX_OBJECT_DATABASE",
	}
	ReindexObjectType_value = map[string]int32{
		"REINDEX_OBJECT_TYPE_UNDEFINED": 0,
		"REINDEX_OBJECT_INDEX":          1,
		"REINDEX_OBJECT_TABLE":          2,
		"REINDEX_OBJECT_SCHEMA":         3,
		"REINDEX_OBJECT_SYSTEM":         4,
		"REINDEX_OBJECT_DATABASE":       5,
	}
)

func (x ReindexObjectType) Enum() *ReindexObjectType {
	p := new(ReindexObjectType)
	*p = x
	return p
}

func (x ReindexObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReindexObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[28].Descriptor()
}

func (ReindexObjectType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[28]
}

func (x ReindexObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReindexObjectType.Descriptor instead.
func (ReindexObjectType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{28}
}

type AlterTSConfigType int32

const (
	AlterTSConfigType_ALTER_TSCONFIG_TYPE_UNDEFINED          AlterTSConfigType = 0
	AlterTSConfigType_ALTER_TSCONFIG_ADD_MAPPING             AlterTSConfigType = 1
	AlterTSConfigType_ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN AlterTSConfigType = 2
	AlterTSConfigType_ALTER_TSCONFIG_REPLACE_DICT            AlterTSConfigType = 3
	AlterTSConfigType_ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN  AlterTSConfigType = 4
	AlterTSConfigType_ALTER_TSCONFIG_DROP_MAPPING            AlterTSConfigType = 5
)

// Enum value maps for AlterTSConfigType.
var (
	AlterTSConfigType_name = map[int32]string{
		0: "ALTER_TSCONFIG_TYPE_UNDEFINED",
		1: "ALTER_TSCONFIG_ADD_MAPPING",
		2: "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN",
		3: "ALTER_TSCONFIG_REPLACE_DICT",
		4: "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN",
		5: "ALTER_TSCONFIG_DROP_MAPPING",
	}
	AlterTSConfigType_value = map[string]int32{
		"ALTER_TSCONFIG_TYPE_UNDEFINED":          0,
		"ALTER_TSCONFIG_ADD_MAPPING":             1,
		"ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN": 2,
		"ALTER_TSCONFIG_REPLACE_DICT":            3,
		"ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN":  4,
		"ALTER_TSCONFIG_DROP_MAPPING":            5,
	}
)

func (x AlterTSConfigType) Enum() *AlterTSConfigType {
	p := new(AlterTSConfigType)
	*p = x
	return p
}

func (x AlterTSConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlterTSConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[29].Descriptor()
}

func (AlterTSConfigType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[29]
}

func (x AlterTSConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlterTSConfigType.Descriptor instead.
func (AlterTSConfigType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{29}
}

type PublicationObjSpecType int32

const (
	PublicationObjSpecType_PUBLICATION_OBJ_SPEC_TYPE_UNDEFINED PublicationObjSpecType = 0
	PublicationObjSpecType_PUBLICATIONOBJ_TABLE                PublicationObjSpecType = 1
	PublicationObjSpecType_PUBLICATIONOBJ_TABLES_IN_SCHEMA     PublicationObjSpecType = 2
	PublicationObjSpecType_PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA PublicationObjSpecType = 3
	PublicationObjSpecType_PUBLICATIONOBJ_CONTINUATION         PublicationObjSpecType = 4
)

// Enum value maps for PublicationObjSpecType.
var (
	PublicationObjSpecType_name = map[int32]string{
		0: "PUBLICATION_OBJ_SPEC_TYPE_UNDEFINED",
		1: "PUBLICATIONOBJ_TABLE",
		2: "PUBLICATIONOBJ_TABLES_IN_SCHEMA",
		3: "PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA",
		4: "PUBLICATIONOBJ_CONTINUATION",
	}
	PublicationObjSpecType_value = map[string]int32{
		"PUBLICATION_OBJ_SPEC_TYPE_UNDEFINED": 0,
		"PUBLICATIONOBJ_TABLE":                1,
		"PUBLICATIONOBJ_TABLES_IN_SCHEMA":     2,
		"PUBLICATIONOBJ_TABLES_IN_CUR_SCHEMA": 3,
		"PUBLICATIONOBJ_CONTINUATION":         4,
	}
)

func (x PublicationObjSpecType) Enum() *PublicationObjSpecType {
	p := new(PublicationObjSpecType)
	*p = x
	return p
}

func (x PublicationObjSpecType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicationObjSpecType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[30].Descriptor()
}

func (PublicationObjSpecType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[30]
}

func (x PublicationObjSpecType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicationObjSpecType.Descriptor instead.
func (PublicationObjSpecType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{30}
}

type AlterPublicationAction int32

const (
	AlterPublicationAction_ALTER_PUBLICATION_ACTION_UNDEFINED AlterPublicationAction = 0
	AlterPublicationAction_AP_AddObjects                      AlterPublicationAction = 1
	AlterPublicationAction_AP_DropObjects                     AlterPublicationAction = 2
	AlterPublicationAction_AP_SetObjects                      AlterPublicationAction = 3
)

// Enum value maps for AlterPublicationAction.
var (
	AlterPublicationAction_name = map[int32]string{
		0: "ALTER_PUBLICATION_ACTION_UNDEFINED",
		1: "AP_AddObjects",
		2: "AP_DropObjects",
		3: "AP_SetObjects",
	}
	AlterPublicationAction_value = map[string]int32{
		"ALTER_PUBLICATION_ACTION_UNDEFINED": 0,
		"AP_AddObjects":                      1,
		"AP_DropObjects":                     2,
		"AP_SetObjects":                      3,
	}
)

func (x AlterPublicationAction) Enum() *AlterPublicationAction {
	p := new(AlterPublicationAction)
	*p = x
	return p
}

func (x AlterPublicationAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlterPublicationAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[31].Descriptor()
}

func (AlterPublicationAction) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[31]
}

func (x AlterPublicationAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlterPublicationAction.Descriptor instead.
func (AlterPublicationAction) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{31}
}

type AlterSubscriptionType int32

const (
	AlterSubscriptionType_ALTER_SUBSCRIPTION_TYPE_UNDEFINED   AlterSubscriptionType = 0
	AlterSubscriptionType_ALTER_SUBSCRIPTION_OPTIONS          AlterSubscriptionType = 1
	AlterSubscriptionType_ALTER_SUBSCRIPTION_CONNECTION       AlterSubscriptionType = 2
	AlterSubscriptionType_ALTER_SUBSCRIPTION_SET_PUBLICATION  AlterSubscriptionType = 3
	AlterSubscriptionType_ALTER_SUBSCRIPTION_ADD_PUBLICATION  AlterSubscriptionType = 4
	AlterSubscriptionType_ALTER_SUBSCRIPTION_DROP_PUBLICATION AlterSubscriptionType = 5
	AlterSubscriptionType_ALTER_SUBSCRIPTION_REFRESH          AlterSubscriptionType = 6
	AlterSubscriptionType_ALTER_SUBSCRIPTION_ENABLED          AlterSubscriptionType = 7
	AlterSubscriptionType_ALTER_SUBSCRIPTION_SKIP             AlterSubscriptionType = 8
)

// Enum value maps for AlterSubscriptionType.
var (
	AlterSubscriptionType_name = map[int32]string{
		0: "ALTER_SUBSCRIPTION_TYPE_UNDEFINED",
		1: "ALTER_SUBSCRIPTION_OPTIONS",
		2: "ALTER_SUBSCRIPTION_CONNECTION",
		3: "ALTER_SUBSCRIPTION_SET_PUBLICATION",
		4: "ALTER_SUBSCRIPTION_ADD_PUBLICATION",
		5: "ALTER_SUBSCRIPTION_DROP_PUBLICATION",
		6: "ALTER_SUBSCRIPTION_REFRESH",
		7: "ALTER_SUBSCRIPTION_ENABLED",
		8: "ALTER_SUBSCRIPTION_SKIP",
	}
	AlterSubscriptionType_value = map[string]int32{
		"ALTER_SUBSCRIPTION_TYPE_UNDEFINED":   0,
		"ALTER_SUBSCRIPTION_OPTIONS":          1,
		"ALTER_SUBSCRIPTION_CONNECTION":       2,
		"ALTER_SUBSCRIPTION_SET_PUBLICATION":  3,
		"ALTER_SUBSCRIPTION_ADD_PUBLICATION":  4,
		"ALTER_SUBSCRIPTION_DROP_PUBLICATION": 5,
		"ALTER_SUBSCRIPTION_REFRESH":          6,
		"ALTER_SUBSCRIPTION_ENABLED":          7,
		"ALTER_SUBSCRIPTION_SKIP":             8,
	}
)

func (x AlterSubscriptionType) Enum() *AlterSubscriptionType {
	p := new(AlterSubscriptionType)
	*p = x
	return p
}

func (x AlterSubscriptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlterSubscriptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[32].Descriptor()
}

func (AlterSubscriptionType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[32]
}

func (x AlterSubscriptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlterSubscriptionType.Descriptor instead.
func (AlterSubscriptionType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{32}
}

type OnCommitAction int32

const (
	OnCommitAction_ON_COMMIT_ACTION_UNDEFINED OnCommitAction = 0
	OnCommitAction_ONCOMMIT_NOOP              OnCommitAction = 1
	OnCommitAction_ONCOMMIT_PRESERVE_ROWS     OnCommitAction = 2
	OnCommitAction_ONCOMMIT_DELETE_ROWS       OnCommitAction = 3
	OnCommitAction_ONCOMMIT_DROP              OnCommitAction = 4
)

// Enum value maps for OnCommitAction.
var (
	OnCommitAction_name = map[int32]string{
		0: "ON_COMMIT_ACTION_UNDEFINED",
		1: "ONCOMMIT_NOOP",
		2: "ONCOMMIT_PRESERVE_ROWS",
		3: "ONCOMMIT_DELETE_ROWS",
		4: "ONCOMMIT_DROP",
	}
	OnCommitAction_value = map[string]int32{
		"ON_COMMIT_ACTION_UNDEFINED": 0,
		"ONCOMMIT_NOOP":              1,
		"ONCOMMIT_PRESERVE_ROWS":     2,
		"ONCOMMIT_DELETE_ROWS":       3,
		"ONCOMMIT_DROP":              4,
	}
)

func (x OnCommitAction) Enum() *OnCommitAction {
	p := new(OnCommitAction)
	*p = x
	return p
}

func (x OnCommitAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnCommitAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[33].Descriptor()
}

func (OnCommitAction) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[33]
}

func (x OnCommitAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnCommitAction.Descriptor instead.
func (OnCommitAction) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{33}
}

type ParamKind int32

const (
	ParamKind_PARAM_KIND_UNDEFINED ParamKind = 0
	ParamKind_PARAM_EXTERN         ParamKind = 1
	ParamKind_PARAM_EXEC           ParamKind = 2
	ParamKind_PARAM_SUBLINK        ParamKind = 3
	ParamKind_PARAM_MULTIEXPR      ParamKind = 4
)

// Enum value maps for ParamKind.
var (
	ParamKind_name = map[int32]string{
		0: "PARAM_KIND_UNDEFINED",
		1: "PARAM_EXTERN",
		2: "PARAM_EXEC",
		3: "PARAM_SUBLINK",
		4: "PARAM_MULTIEXPR",
	}
	ParamKind_value = map[string]int32{
		"PARAM_KIND_UNDEFINED": 0,
		"PARAM_EXTERN":         1,
		"PARAM_EXEC":           2,
		"PARAM_SUBLINK":        3,
		"PARAM_MULTIEXPR":      4,
	}
)

func (x ParamKind) Enum() *ParamKind {
	p := new(ParamKind)
	*p = x
	return p
}

func (x ParamKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParamKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[34].Descriptor()
}

func (ParamKind) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[34]
}

func (x ParamKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParamKind.Descriptor instead.
func (ParamKind) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{34}
}

type CoercionContext int32

const (
	CoercionContext_COERCION_CONTEXT_UNDEFINED CoercionContext = 0
	CoercionContext_COERCION_IMPLICIT          CoercionContext = 1
	CoercionContext_COERCION_ASSIGNMENT        CoercionContext = 2
	CoercionContext_COERCION_PLPGSQL           CoercionContext = 3
	CoercionContext_COERCION_EXPLICIT          CoercionContext = 4
)

// Enum value maps for CoercionContext.
var (
	CoercionContext_name = map[int32]string{
		0: "COERCION_CONTEXT_UNDEFINED",
		1: "COERCION_IMPLICIT",
		2: "COERCION_ASSIGNMENT",
		3: "COERCION_PLPGSQL",
		4: "COERCION_EXPLICIT",
	}
	CoercionContext_value = map[string]int32{
		"COERCION_CONTEXT_UNDEFINED": 0,
		"COERCION_IMPLICIT":          1,
		"COERCION_ASSIGNMENT":        2,
		"COERCION_PLPGSQL":           3,
		"COERCION_EXPLICIT":          4,
	}
)

func (x CoercionContext) Enum() *CoercionContext {
	p := new(CoercionContext)
	*p = x
	return p
}

func (x CoercionContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoercionContext) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[35].Descriptor()
}

func (CoercionContext) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[35]
}

func (x CoercionContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoercionContext.Descriptor instead.
func (CoercionContext) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{35}
}

type CoercionForm int32

const (
	CoercionForm_COERCION_FORM_UNDEFINED CoercionForm = 0
	CoercionForm_COERCE_EXPLICIT_CALL    CoercionForm = 1
	CoercionForm_COERCE_EXPLICIT_CAST    CoercionForm = 2
	CoercionForm_COERCE_IMPLICIT_CAST    CoercionForm = 3
	CoercionForm_COERCE_SQL_SYNTAX       CoercionForm = 4
)

// Enum value maps for CoercionForm.
var (
	CoercionForm_name = map[int32]string{
		0: "COERCION_FORM_UNDEFINED",
		1: "COERCE_EXPLICIT_CALL",
		2: "COERCE_EXPLICIT_CAST",
		3: "COERCE_IMPLICIT_CAST",
		4: "COERCE_SQL_SYNTAX",
	}
	CoercionForm_value = map[string]int32{
		"COERCION_FORM_UNDEFINED": 0,
		"COERCE_EXPLICIT_CALL":    1,
		"COERCE_EXPLICIT_CAST":    2,
		"COERCE_IMPLICIT_CAST":    3,
		"COERCE_SQL_SYNTAX":       4,
	}
)

func (x CoercionForm) Enum() *CoercionForm {
	p := new(CoercionForm)
	*p = x
	return p
}

func (x CoercionForm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoercionForm) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[36].Descriptor()
}

func (CoercionForm) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[36]
}

func (x CoercionForm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoercionForm.Descriptor instead.
func (CoercionForm) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{36}
}

type BoolExprType int32

const (
	BoolExprType_BOOL_EXPR_TYPE_UNDEFINED BoolExprType = 0
	BoolExprType_AND_EXPR                 BoolExprType = 1
	BoolExprType_OR_EXPR                  BoolExprType = 2
	BoolExprType_NOT_EXPR                 BoolExprType = 3
)

// Enum value maps for BoolExprType.
var (
	BoolExprType_name = map[int32]string{
		0: "BOOL_EXPR_TYPE_UNDEFINED",
		1: "AND_EXPR",
		2: "OR_EXPR",
		3: "NOT_EXPR",
	}
	BoolExprType_value = map[string]int32{
		"BOOL_EXPR_TYPE_UNDEFINED": 0,
		"AND_EXPR":                 1,
		"OR_EXPR":                  2,
		"NOT_EXPR":                 3,
	}
)

func (x BoolExprType) Enum() *BoolExprType {
	p := new(BoolExprType)
	*p = x
	return p
}

func (x BoolExprType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoolExprType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[37].Descriptor()
}

func (BoolExprType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[37]
}

func (x BoolExprType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoolExprType.Descriptor instead.
func (BoolExprType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{37}
}

type SubLinkType int32

const (
	SubLinkType_SUB_LINK_TYPE_UNDEFINED SubLinkType = 0
	SubLinkType_EXISTS_SUBLINK          SubLinkType = 1
	SubLinkType_ALL_SUBLINK             SubLinkType = 2
	SubLinkType_ANY_SUBLINK             SubLinkType = 3
	SubLinkType_ROWCOMPARE_SUBLINK      SubLinkType = 4
	SubLinkType_EXPR_SUBLINK            SubLinkType = 5
	SubLinkType_MULTIEXPR_SUBLINK       SubLinkType = 6
	SubLinkType_ARRAY_SUBLINK           SubLinkType = 7
	SubLinkType_CTE_SUBLINK             SubLinkType = 8
)

// Enum value maps for SubLinkType.
var (
	SubLinkType_name = map[int32]string{
		0: "SUB_LINK_TYPE_UNDEFINED",
		1: "EXISTS_SUBLINK",
		2: "ALL_SUBLINK",
		3: "ANY_SUBLINK",
		4: "ROWCOMPARE_SUBLINK",
		5: "EXPR_SUBLINK",
		6: "MULTIEXPR_SUBLINK",
		7: "ARRAY_SUBLINK",
		8: "CTE_SUBLINK",
	}
	SubLinkType_value = map[string]int32{
		"SUB_LINK_TYPE_UNDEFINED": 0,
		"EXISTS_SUBLINK":          1,
		"ALL_SUBLINK":             2,
		"ANY_SUBLINK":             3,
		"ROWCOMPARE_SUBLINK":      4,
		"EXPR_SUBLINK":            5,
		"MULTIEXPR_SUBLINK":       6,
		"ARRAY_SUBLINK":           7,
		"CTE_SUBLINK":             8,
	}
)

func (x SubLinkType) Enum() *SubLinkType {
	p := new(SubLinkType)
	*p = x
	return p
}

func (x SubLinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubLinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[38].Descriptor()
}

func (SubLinkType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[38]
}

func (x SubLinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubLinkType.Descriptor instead.
func (SubLinkType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{38}
}

type RowCompareType int32

const (
	RowCompareType_ROW_COMPARE_TYPE_UNDEFINED RowCompareType = 0
	RowCompareType_ROWCOMPARE_LT              RowCompareType = 1
	RowCompareType_ROWCOMPARE_LE              RowCompareType = 2
	RowCompareType_ROWCOMPARE_EQ              RowCompareType = 3
	RowCompareType_ROWCOMPARE_GE              RowCompareType = 4
	RowCompareType_ROWCOMPARE_GT              RowCompareType = 5
	RowCompareType_ROWCOMPARE_NE              RowCompareType = 6
)

// Enum value maps for RowCompareType.
var (
	RowCompareType_name = map[int32]string{
		0: "ROW_COMPARE_TYPE_UNDEFINED",
		1: "ROWCOMPARE_LT",
		2: "ROWCOMPARE_LE",
		3: "ROWCOMPARE_EQ",
		4: "ROWCOMPARE_GE",
		5: "ROWCOMPARE_GT",
		6: "ROWCOMPARE_NE",
	}
	RowCompareType_value = map[string]int32{
		"ROW_COMPARE_TYPE_UNDEFINED": 0,
		"ROWCOMPARE_LT":              1,
		"ROWCOMPARE_LE":              2,
		"ROWCOMPARE_EQ":              3,
		"ROWCOMPARE_GE":              4,
		"ROWCOMPARE_GT":              5,
		"ROWCOMPARE_NE":              6,
	}
)

func (x RowCompareType) Enum() *RowCompareType {
	p := new(RowCompareType)
	*p = x
	return p
}

func (x RowCompareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RowCompareType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[39].Descriptor()
}

func (RowCompareType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[39]
}

func (x RowCompareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RowCompareType.Descriptor instead.
func (RowCompareType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{39}
}

type MinMaxOp int32

const (
	MinMaxOp_MIN_MAX_OP_UNDEFINED MinMaxOp = 0
	MinMaxOp_IS_GREATEST          MinMaxOp = 1
	MinMaxOp_IS_LEAST             MinMaxOp = 2
)

// Enum value maps for MinMaxOp.
var (
	MinMaxOp_name = map[int32]string{
		0: "MIN_MAX_OP_UNDEFINED",
		1: "IS_GREATEST",
		2: "IS_LEAST",
	}
	MinMaxOp_value = map[string]int32{
		"MIN_MAX_OP_UNDEFINED": 0,
		"IS_GREATEST":          1,
		"IS_LEAST":             2,
	}
)

func (x MinMaxOp) Enum() *MinMaxOp {
	p := new(MinMaxOp)
	*p = x
	return p
}

func (x MinMaxOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MinMaxOp) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[40].Descriptor()
}

func (MinMaxOp) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[40]
}

func (x MinMaxOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MinMaxOp.Descriptor instead.
func (MinMaxOp) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{40}
}

type SQLValueFunctionOp int32

const (
	SQLValueFunctionOp_SQLVALUE_FUNCTION_OP_UNDEFINED SQLValueFunctionOp = 0
	SQLValueFunctionOp_SVFOP_CURRENT_DATE             SQLValueFunctionOp = 1
	SQLValueFunctionOp_SVFOP_CURRENT_TIME             SQLValueFunctionOp = 2
	SQLValueFunctionOp_SVFOP_CURRENT_TIME_N           SQLValueFunctionOp = 3
	SQLValueFunctionOp_SVFOP_CURRENT_TIMESTAMP        SQLValueFunctionOp = 4
	SQLValueFunctionOp_SVFOP_CURRENT_TIMESTAMP_N      SQLValueFunctionOp = 5
	SQLValueFunctionOp_SVFOP_LOCALTIME                SQLValueFunctionOp = 6
	SQLValueFunctionOp_SVFOP_LOCALTIME_N              SQLValueFunctionOp = 7
	SQLValueFunctionOp_SVFOP_LOCALTIMESTAMP           SQLValueFunctionOp = 8
	SQLValueFunctionOp_SVFOP_LOCALTIMESTAMP_N         SQLValueFunctionOp = 9
	SQLValueFunctionOp_SVFOP_CURRENT_ROLE             SQLValueFunctionOp = 10
	SQLValueFunctionOp_SVFOP_CURRENT_USER             SQLValueFunctionOp = 11
	SQLValueFunctionOp_SVFOP_USER                     SQLValueFunctionOp = 12
	SQLValueFunctionOp_SVFOP_SESSION_USER             SQLValueFunctionOp = 13
	SQLValueFunctionOp_SVFOP_CURRENT_CATALOG          SQLValueFunctionOp = 14
	SQLValueFunctionOp_SVFOP_CURRENT_SCHEMA           SQLValueFunctionOp = 15
)

// Enum value maps for SQLValueFunctionOp.
var (
	SQLValueFunctionOp_name = map[int32]string{
		0:  "SQLVALUE_FUNCTION_OP_UNDEFINED",
		1:  "SVFOP_CURRENT_DATE",
		2:  "SVFOP_CURRENT_TIME",
		3:  "SVFOP_CURRENT_TIME_N",
		4:  "SVFOP_CURRENT_TIMESTAMP",
		5:  "SVFOP_CURRENT_TIMESTAMP_N",
		6:  "SVFOP_LOCALTIME",
		7:  "SVFOP_LOCALTIME_N",
		8:  "SVFOP_LOCALTIMESTAMP",
		9:  "SVFOP_LOCALTIMESTAMP_N",
		10: "SVFOP_CURRENT_ROLE",
		11: "SVFOP_CURRENT_USER",
		12: "SVFOP_USER",
		13: "SVFOP_SESSION_USER",
		14: "SVFOP_CURRENT_CATALOG",
		15: "SVFOP_CURRENT_SCHEMA",
	}
	SQLValueFunctionOp_value = map[string]int32{
		"SQLVALUE_FUNCTION_OP_UNDEFINED": 0,
		"SVFOP_CURRENT_DATE":             1,
		"SVFOP_CURRENT_TIME":             2,
		"SVFOP_CURRENT_TIME_N":           3,
		"SVFOP_CURRENT_TIMESTAMP":        4,
		"SVFOP_CURRENT_TIMESTAMP_N":      5,
		"SVFOP_LOCALTIME":                6,
		"SVFOP_LOCALTIME_N":              7,
		"SVFOP_LOCALTIMESTAMP":           8,
		"SVFOP_LOCALTIMESTAMP_N":         9,
		"SVFOP_CURRENT_ROLE":             10,
		"SVFOP_CURRENT_USER":             11,
		"SVFOP_USER":                     12,
		"SVFOP_SESSION_USER":             13,
		"SVFOP_CURRENT_CATALOG":          14,
		"SVFOP_CURRENT_SCHEMA":           15,
	}
)

func (x SQLValueFunctionOp) Enum() *SQLValueFunctionOp {
	p := new(SQLValueFunctionOp)
	*p = x
	return p
}

func (x SQLValueFunctionOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SQLValueFunctionOp) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[41].Descriptor()
}

func (SQLValueFunctionOp) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[41]
}

func (x SQLValueFunctionOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SQLValueFunctionOp.Descriptor instead.
func (SQLValueFunctionOp) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{41}
}

type XmlExprOp int32

const (
	XmlExprOp_XML_EXPR_OP_UNDEFINED XmlExprOp = 0
	XmlExprOp_IS_XMLCONCAT          XmlExprOp = 1
	XmlExprOp_IS_XMLELEMENT         XmlExprOp = 2
	XmlExprOp_IS_XMLFOREST          XmlExprOp = 3
	XmlExprOp_IS_XMLPARSE           XmlExprOp = 4
	XmlExprOp_IS_XMLPI              XmlExprOp = 5
	XmlExprOp_IS_XMLROOT            XmlExprOp = 6
	XmlExprOp_IS_XMLSERIALIZE       XmlExprOp = 7
	XmlExprOp_IS_DOCUMENT           XmlExprOp = 8
)

// Enum value maps for XmlExprOp.
var (
	XmlExprOp_name = map[int32]string{
		0: "XML_EXPR_OP_UNDEFINED",
		1: "IS_XMLCONCAT",
		2: "IS_XMLELEMENT",
		3: "IS_XMLFOREST",
		4: "IS_XMLPARSE",
		5: "IS_XMLPI",
		6: "IS_XMLROOT",
		7: "IS_XMLSERIALIZE",
		8: "IS_DOCUMENT",
	}
	XmlExprOp_value = map[string]int32{
		"XML_EXPR_OP_UNDEFINED": 0,
		"IS_XMLCONCAT":          1,
		"IS_XMLELEMENT":         2,
		"IS_XMLFOREST":          3,
		"IS_XMLPARSE":           4,
		"IS_XMLPI":              5,
		"IS_XMLROOT":            6,
		"IS_XMLSERIALIZE":       7,
		"IS_DOCUMENT":           8,
	}
)

func (x XmlExprOp) Enum() *XmlExprOp {
	p := new(XmlExprOp)
	*p = x
	return p
}

func (x XmlExprOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XmlExprOp) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[42].Descriptor()
}

func (XmlExprOp) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[42]
}

func (x XmlExprOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XmlExprOp.Descriptor instead.
func (XmlExprOp) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{42}
}

type XmlOptionType int32

const (
	XmlOptionType_XML_OPTION_TYPE_UNDEFINED XmlOptionType = 0
	XmlOptionType_XMLOPTION_DOCUMENT        XmlOptionType = 1
	XmlOptionType_XMLOPTION_CONTENT         XmlOptionType = 2
)

// Enum value maps for XmlOptionType.
var (
	XmlOptionType_name = map[int32]string{
		0: "XML_OPTION_TYPE_UNDEFINED",
		1: "XMLOPTION_DOCUMENT",
		2: "XMLOPTION_CONTENT",
	}
	XmlOptionType_value = map[string]int32{
		"XML_OPTION_TYPE_UNDEFINED": 0,
		"XMLOPTION_DOCUMENT":        1,
		"XMLOPTION_CONTENT":         2,
	}
)

func (x XmlOptionType) Enum() *XmlOptionType {
	p := new(XmlOptionType)
	*p = x
	return p
}

func (x XmlOptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XmlOptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[43].Descriptor()
}

func (XmlOptionType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[43]
}

func (x XmlOptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XmlOptionType.Descriptor instead.
func (XmlOptionType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{43}
}

type NullTestType int32

const (
	NullTestType_NULL_TEST_TYPE_UNDEFINED NullTestType = 0
	NullTestType_IS_NULL                  NullTestType = 1
	NullTestType_IS_NOT_NULL              NullTestType = 2
)

// Enum value maps for NullTestType.
var (
	NullTestType_name = map[int32]string{
		0: "NULL_TEST_TYPE_UNDEFINED",
		1: "IS_NULL",
		2: "IS_NOT_NULL",
	}
	NullTestType_value = map[string]int32{
		"NULL_TEST_TYPE_UNDEFINED": 0,
		"IS_NULL":                  1,
		"IS_NOT_NULL":              2,
	}
)

func (x NullTestType) Enum() *NullTestType {
	p := new(NullTestType)
	*p = x
	return p
}

func (x NullTestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NullTestType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[44].Descriptor()
}

func (NullTestType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[44]
}

func (x NullTestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NullTestType.Descriptor instead.
func (NullTestType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{44}
}

type BoolTestType int32

const (
	BoolTestType_BOOL_TEST_TYPE_UNDEFINED BoolTestType = 0
	BoolTestType_IS_TRUE                  BoolTestType = 1
	BoolTestType_IS_NOT_TRUE              BoolTestType = 2
	BoolTestType_IS_FALSE                 BoolTestType = 3
	BoolTestType_IS_NOT_FALSE             BoolTestType = 4
	BoolTestType_IS_UNKNOWN               BoolTestType = 5
	BoolTestType_IS_NOT_UNKNOWN           BoolTestType = 6
)

// Enum value maps for BoolTestType.
var (
	BoolTestType_name = map[int32]string{
		0: "BOOL_TEST_TYPE_UNDEFINED",
		1: "IS_TRUE",
		2: "IS_NOT_TRUE",
		3: "IS_FALSE",
		4: "IS_NOT_FALSE",
		5: "IS_UNKNOWN",
		6: "IS_NOT_UNKNOWN",
	}
	BoolTestType_value = map[string]int32{
		"BOOL_TEST_TYPE_UNDEFINED": 0,
		"IS_TRUE":                  1,
		"IS_NOT_TRUE":              2,
		"IS_FALSE":                 3,
		"IS_NOT_FALSE":             4,
		"IS_UNKNOWN":               5,
		"IS_NOT_UNKNOWN":           6,
	}
)

func (x BoolTestType) Enum() *BoolTestType {
	p := new(BoolTestType)
	*p = x
	return p
}

func (x BoolTestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BoolTestType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[45].Descriptor()
}

func (BoolTestType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[45]
}

func (x BoolTestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BoolTestType.Descriptor instead.
func (BoolTestType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{45}
}

type CmdType int32

const (
	CmdType_CMD_TYPE_UNDEFINED CmdType = 0
	CmdType_CMD_UNKNOWN        CmdType = 1
	CmdType_CMD_SELECT         CmdType = 2
	CmdType_CMD_UPDATE         CmdType = 3
	CmdType_CMD_INSERT         CmdType = 4
	CmdType_CMD_DELETE         CmdType = 5
	CmdType_CMD_MERGE          CmdType = 6
	CmdType_CMD_UTILITY        CmdType = 7
	CmdType_CMD_NOTHING        CmdType = 8
)

// Enum value maps for CmdType.
var (
	CmdType_name = map[int32]string{
		0: "CMD_TYPE_UNDEFINED",
		1: "CMD_UNKNOWN",
		2: "CMD_SELECT",
		3: "CMD_UPDATE",
		4: "CMD_INSERT",
		5: "CMD_DELETE",
		6: "CMD_MERGE",
		7: "CMD_UTILITY",
		8: "CMD_NOTHING",
	}
	CmdType_value = map[string]int32{
		"CMD_TYPE_UNDEFINED": 0,
		"CMD_UNKNOWN":        1,
		"CMD_SELECT":         2,
		"CMD_UPDATE":         3,
		"CMD_INSERT":         4,
		"CMD_DELETE":         5,
		"CMD_MERGE":          6,
		"CMD_UTILITY":        7,
		"CMD_NOTHING":        8,
	}
)

func (x CmdType) Enum() *CmdType {
	p := new(CmdType)
	*p = x
	return p
}

func (x CmdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CmdType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[46].Descriptor()
}

func (CmdType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[46]
}

func (x CmdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CmdType.Descriptor instead.
func (CmdType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{46}
}

type JoinType int32

const (
	JoinType_JOIN_TYPE_UNDEFINED JoinType = 0
	JoinType_JOIN_INNER          JoinType = 1
	JoinType_JOIN_LEFT           JoinType = 2
	JoinType_JOIN_FULL           JoinType = 3
	JoinType_JOIN_RIGHT          JoinType = 4
	JoinType_JOIN_SEMI           JoinType = 5
	JoinType_JOIN_ANTI           JoinType = 6
	JoinType_JOIN_UNIQUE_OUTER   JoinType = 7
	JoinType_JOIN_UNIQUE_INNER   JoinType = 8
)

// Enum value maps for JoinType.
var (
	JoinType_name = map[int32]string{
		0: "JOIN_TYPE_UNDEFINED",
		1: "JOIN_INNER",
		2: "JOIN_LEFT",
		3: "JOIN_FULL",
		4: "JOIN_RIGHT",
		5: "JOIN_SEMI",
		6: "JOIN_ANTI",
		7: "JOIN_UNIQUE_OUTER",
		8: "JOIN_UNIQUE_INNER",
	}
	JoinType_value = map[string]int32{
		"JOIN_TYPE_UNDEFINED": 0,
		"JOIN_INNER":          1,
		"JOIN_LEFT":           2,
		"JOIN_FULL":           3,
		"JOIN_RIGHT":          4,
		"JOIN_SEMI":           5,
		"JOIN_ANTI":           6,
		"JOIN_UNIQUE_OUTER":   7,
		"JOIN_UNIQUE_INNER":   8,
	}
)

func (x JoinType) Enum() *JoinType {
	p := new(JoinType)
	*p = x
	return p
}

func (x JoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[47].Descriptor()
}

func (JoinType) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[47]
}

func (x JoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JoinType.Descriptor instead.
func (JoinType) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{47}
}

type AggStrategy int32

const (
	AggStrategy_AGG_STRATEGY_UNDEFINED AggStrategy = 0
	AggStrategy_AGG_PLAIN              AggStrategy = 1
	AggStrategy_AGG_SORTED             AggStrategy = 2
	AggStrategy_AGG_HASHED             AggStrategy = 3
	AggStrategy_AGG_MIXED              AggStrategy = 4
)

// Enum value maps for AggStrategy.
var (
	AggStrategy_name = map[int32]string{
		0: "AGG_STRATEGY_UNDEFINED",
		1: "AGG_PLAIN",
		2: "AGG_SORTED",
		3: "AGG_HASHED",
		4: "AGG_MIXED",
	}
	AggStrategy_value = map[string]int32{
		"AGG_STRATEGY_UNDEFINED": 0,
		"AGG_PLAIN":              1,
		"AGG_SORTED":             2,
		"AGG_HASHED":             3,
		"AGG_MIXED":              4,
	}
)

func (x AggStrategy) Enum() *AggStrategy {
	p := new(AggStrategy)
	*p = x
	return p
}

func (x AggStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[48].Descriptor()
}

func (AggStrategy) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[48]
}

func (x AggStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggStrategy.Descriptor instead.
func (AggStrategy) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{48}
}

type AggSplit int32

const (
	AggSplit_AGG_SPLIT_UNDEFINED     AggSplit = 0
	AggSplit_AGGSPLIT_SIMPLE         AggSplit = 1
	AggSplit_AGGSPLIT_INITIAL_SERIAL AggSplit = 2
	AggSplit_AGGSPLIT_FINAL_DESERIAL AggSplit = 3
)

// Enum value maps for AggSplit.
var (
	AggSplit_name = map[int32]string{
		0: "AGG_SPLIT_UNDEFINED",
		1: "AGGSPLIT_SIMPLE",
		2: "AGGSPLIT_INITIAL_SERIAL",
		3: "AGGSPLIT_FINAL_DESERIAL",
	}
	AggSplit_value = map[string]int32{
		"AGG_SPLIT_UNDEFINED":     0,
		"AGGSPLIT_SIMPLE":         1,
		"AGGSPLIT_INITIAL_SERIAL": 2,
		"AGGSPLIT_FINAL_DESERIAL": 3,
	}
)

func (x AggSplit) Enum() *AggSplit {
	p := new(AggSplit)
	*p = x
	return p
}

func (x AggSplit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggSplit) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[49].Descriptor()
}

func (AggSplit) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[49]
}

func (x AggSplit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggSplit.Descriptor instead.
func (AggSplit) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{49}
}

type SetOpCmd int32

const (
	SetOpCmd_SET_OP_CMD_UNDEFINED   SetOpCmd = 0
	SetOpCmd_SETOPCMD_INTERSECT     SetOpCmd = 1
	SetOpCmd_SETOPCMD_INTERSECT_ALL SetOpCmd = 2
	SetOpCmd_SETOPCMD_EXCEPT        SetOpCmd = 3
	SetOpCmd_SETOPCMD_EXCEPT_ALL    SetOpCmd = 4
)

// Enum value maps for SetOpCmd.
var (
	SetOpCmd_name = map[int32]string{
		0: "SET_OP_CMD_UNDEFINED",
		1: "SETOPCMD_INTERSECT",
		2: "SETOPCMD_INTERSECT_ALL",
		3: "SETOPCMD_EXCEPT",
		4: "SETOPCMD_EXCEPT_ALL",
	}
	SetOpCmd_value = map[string]int32{
		"SET_OP_CMD_UNDEFINED":   0,
		"SETOPCMD_INTERSECT":     1,
		"SETOPCMD_INTERSECT_ALL": 2,
		"SETOPCMD_EXCEPT":        3,
		"SETOPCMD_EXCEPT_ALL":    4,
	}
)

func (x SetOpCmd) Enum() *SetOpCmd {
	p := new(SetOpCmd)
	*p = x
	return p
}

func (x SetOpCmd) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetOpCmd) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[50].Descriptor()
}

func (SetOpCmd) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[50]
}

func (x SetOpCmd) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetOpCmd.Descriptor instead.
func (SetOpCmd) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{50}
}

type SetOpStrategy int32

const (
	SetOpStrategy_SET_OP_STRATEGY_UNDEFINED SetOpStrategy = 0
	SetOpStrategy_SETOP_SORTED              SetOpStrategy = 1
	SetOpStrategy_SETOP_HASHED              SetOpStrategy = 2
)

// Enum value maps for SetOpStrategy.
var (
	SetOpStrategy_name = map[int32]string{
		0: "SET_OP_STRATEGY_UNDEFINED",
		1: "SETOP_SORTED",
		2: "SETOP_HASHED",
	}
	SetOpStrategy_value = map[string]int32{
		"SET_OP_STRATEGY_UNDEFINED": 0,
		"SETOP_SORTED":              1,
		"SETOP_HASHED":              2,
	}
)

func (x SetOpStrategy) Enum() *SetOpStrategy {
	p := new(SetOpStrategy)
	*p = x
	return p
}

func (x SetOpStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetOpStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[51].Descriptor()
}

func (SetOpStrategy) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[51]
}

func (x SetOpStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetOpStrategy.Descriptor instead.
func (SetOpStrategy) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{51}
}

type OnConflictAction int32

const (
	OnConflictAction_ON_CONFLICT_ACTION_UNDEFINED OnConflictAction = 0
	OnConflictAction_ONCONFLICT_NONE              OnConflictAction = 1
	OnConflictAction_ONCONFLICT_NOTHING           OnConflictAction = 2
	OnConflictAction_ONCONFLICT_UPDATE            OnConflictAction = 3
)

// Enum value maps for OnConflictAction.
var (
	OnConflictAction_name = map[int32]string{
		0: "ON_CONFLICT_ACTION_UNDEFINED",
		1: "ONCONFLICT_NONE",
		2: "ONCONFLICT_NOTHING",
		3: "ONCONFLICT_UPDATE",
	}
	OnConflictAction_value = map[string]int32{
		"ON_CONFLICT_ACTION_UNDEFINED": 0,
		"ONCONFLICT_NONE":              1,
		"ONCONFLICT_NOTHING":           2,
		"ONCONFLICT_UPDATE":            3,
	}
)

func (x OnConflictAction) Enum() *OnConflictAction {
	p := new(OnConflictAction)
	*p = x
	return p
}

func (x OnConflictAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnConflictAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[52].Descriptor()
}

func (OnConflictAction) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[52]
}

func (x OnConflictAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnConflictAction.Descriptor instead.
func (OnConflictAction) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{52}
}

type LimitOption int32

const (
	LimitOption_LIMIT_OPTION_UNDEFINED LimitOption = 0
	LimitOption_LIMIT_OPTION_DEFAULT   LimitOption = 1
	LimitOption_LIMIT_OPTION_COUNT     LimitOption = 2
	LimitOption_LIMIT_OPTION_WITH_TIES LimitOption = 3
)

// Enum value maps for LimitOption.
var (
	LimitOption_name = map[int32]string{
		0: "LIMIT_OPTION_UNDEFINED",
		1: "LIMIT_OPTION_DEFAULT",
		2: "LIMIT_OPTION_COUNT",
		3: "LIMIT_OPTION_WITH_TIES",
	}
	LimitOption_value = map[string]int32{
		"LIMIT_OPTION_UNDEFINED": 0,
		"LIMIT_OPTION_DEFAULT":   1,
		"LIMIT_OPTION_COUNT":     2,
		"LIMIT_OPTION_WITH_TIES": 3,
	}
)

func (x LimitOption) Enum() *LimitOption {
	p := new(LimitOption)
	*p = x
	return p
}

func (x LimitOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimitOption) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[53].Descriptor()
}

func (LimitOption) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[53]
}

func (x LimitOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LimitOption.Descriptor instead.
func (LimitOption) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{53}
}

type LockClauseStrength int32

const (
	LockClauseStrength_LOCK_CLAUSE_STRENGTH_UNDEFINED LockClauseStrength = 0
	LockClauseStrength_LCS_NONE                       LockClauseStrength = 1
	LockClauseStrength_LCS_FORKEYSHARE                LockClauseStrength = 2
	LockClauseStrength_LCS_FORSHARE                   LockClauseStrength = 3
	LockClauseStrength_LCS_FORNOKEYUPDATE             LockClauseStrength = 4
	LockClauseStrength_LCS_FORUPDATE                  LockClauseStrength = 5
)

// Enum value maps for LockClauseStrength.
var (
	LockClauseStrength_name = map[int32]string{
		0: "LOCK_CLAUSE_STRENGTH_UNDEFINED",
		1: "LCS_NONE",
		2: "LCS_FORKEYSHARE",
		3: "LCS_FORSHARE",
		4: "LCS_FORNOKEYUPDATE",
		5: "LCS_FORUPDATE",
	}
	LockClauseStrength_value = map[string]int32{
		"LOCK_CLAUSE_STRENGTH_UNDEFINED": 0,
		"LCS_NONE":                       1,
		"LCS_FORKEYSHARE":                2,
		"LCS_FORSHARE":                   3,
		"LCS_FORNOKEYUPDATE":             4,
		"LCS_FORUPDATE":                  5,
	}
)

func (x LockClauseStrength) Enum() *LockClauseStrength {
	p := new(LockClauseStrength)
	*p = x
	return p
}

func (x LockClauseStrength) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LockClauseStrength) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[54].Descriptor()
}

func (LockClauseStrength) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[54]
}

func (x LockClauseStrength) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LockClauseStrength.Descriptor instead.
func (LockClauseStrength) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{54}
}

type LockWaitPolicy int32

const (
	LockWaitPolicy_LOCK_WAIT_POLICY_UNDEFINED LockWaitPolicy = 0
	LockWaitPolicy_LockWaitBlock              LockWaitPolicy = 1
	LockWaitPolicy_LockWaitSkip               LockWaitPolicy = 2
	LockWaitPolicy_LockWaitError              LockWaitPolicy = 3
)

// Enum value maps for LockWaitPolicy.
var (
	LockWaitPolicy_name = map[int32]string{
		0: "LOCK_WAIT_POLICY_UNDEFINED",
		1: "LockWaitBlock",
		2: "LockWaitSkip",
		3: "LockWaitError",
	}
	LockWaitPolicy_value = map[string]int32{
		"LOCK_WAIT_POLICY_UNDEFINED": 0,
		"LockWaitBlock":              1,
		"LockWaitSkip":               2,
		"LockWaitError":              3,
	}
)

func (x LockWaitPolicy) Enum() *LockWaitPolicy {
	p := new(LockWaitPolicy)
	*p = x
	return p
}

func (x LockWaitPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LockWaitPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[55].Descriptor()
}

func (LockWaitPolicy) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[55]
}

func (x LockWaitPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LockWaitPolicy.Descriptor instead.
func (LockWaitPolicy) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{55}
}

type LockTupleMode int32

const (
	LockTupleMode_LOCK_TUPLE_MODE_UNDEFINED LockTupleMode = 0
	LockTupleMode_LockTupleKeyShare         LockTupleMode = 1
	LockTupleMode_LockTupleShare            LockTupleMode = 2
	LockTupleMode_LockTupleNoKeyExclusive   LockTupleMode = 3
	LockTupleMode_LockTupleExclusive        LockTupleMode = 4
)

// Enum value maps for LockTupleMode.
var (
	LockTupleMode_name = map[int32]string{
		0: "LOCK_TUPLE_MODE_UNDEFINED",
		1: "LockTupleKeyShare",
		2: "LockTupleShare",
		3: "LockTupleNoKeyExclusive",
		4: "LockTupleExclusive",
	}
	LockTupleMode_value = map[string]int32{
		"LOCK_TUPLE_MODE_UNDEFINED": 0,
		"LockTupleKeyShare":         1,
		"LockTupleShare":            2,
		"LockTupleNoKeyExclusive":   3,
		"LockTupleExclusive":        4,
	}
)

func (x LockTupleMode) Enum() *LockTupleMode {
	p := new(LockTupleMode)
	*p = x
	return p
}

func (x LockTupleMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LockTupleMode) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[56].Descriptor()
}

func (LockTupleMode) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[56]
}

func (x LockTupleMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LockTupleMode.Descriptor instead.
func (LockTupleMode) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{56}
}

type KeywordKind int32

const (
	KeywordKind_NO_KEYWORD             KeywordKind = 0
	KeywordKind_UNRESERVED_KEYWORD     KeywordKind = 1
	KeywordKind_COL_NAME_KEYWORD       KeywordKind = 2
	KeywordKind_TYPE_FUNC_NAME_KEYWORD KeywordKind = 3
	KeywordKind_RESERVED_KEYWORD       KeywordKind = 4
)

// Enum value maps for KeywordKind.
var (
	KeywordKind_name = map[int32]string{
		0: "NO_KEYWORD",
		1: "UNRESERVED_KEYWORD",
		2: "COL_NAME_KEYWORD",
		3: "TYPE_FUNC_NAME_KEYWORD",
		4: "RESERVED_KEYWORD",
	}
	KeywordKind_value = map[string]int32{
		"NO_KEYWORD":             0,
		"UNRESERVED_KEYWORD":     1,
		"COL_NAME_KEYWORD":       2,
		"TYPE_FUNC_NAME_KEYWORD": 3,
		"RESERVED_KEYWORD":       4,
	}
)

func (x KeywordKind) Enum() *KeywordKind {
	p := new(KeywordKind)
	*p = x
	return p
}

func (x KeywordKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeywordKind) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[57].Descriptor()
}

func (KeywordKind) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[57]
}

func (x KeywordKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeywordKind.Descriptor instead.
func (KeywordKind) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{57}
}

type Token int32

const (
	Token_NUL Token = 0
	// Single-character tokens that are returned 1:1 (identical with "self" list in scan.l)
	// Either supporting syntax, or single-character operators (some can be both)
	// Also see https://www.postgresql.org/docs/12/sql-syntax-lexical.html#SQL-SYNTAX-SPECIAL-CHARS
	Token_ASCII_37 Token = 37 // "%"
	Token_ASCII_40 Token = 40 // "("
	Token_ASCII_41 Token = 41 // ")"
	Token_ASCII_42 Token = 42 // "*"
	Token_ASCII_43 Token = 43 // "+"
	Token_ASCII_44 Token = 44 // ","
	Token_ASCII_45 Token = 45 // "-"
	Token_ASCII_46 Token = 46 // "."
	Token_ASCII_47 Token = 47 // "/"
	Token_ASCII_58 Token = 58 // ":"
	Token_ASCII_59 Token = 59 // ";"
	Token_ASCII_60 Token = 60 // "<"
	Token_ASCII_61 Token = 61 // "="
	Token_ASCII_62 Token = 62 // ">"
	Token_ASCII_63 Token = 63 // "?"
	Token_ASCII_91 Token = 91 // "["
	Token_ASCII_92 Token = 92 // "\"
	Token_ASCII_93 Token = 93 // "]"
	Token_ASCII_94 Token = 94 // "^"
	// Named tokens in scan.l
	Token_IDENT                Token = 258
	Token_UIDENT               Token = 259
	Token_FCONST               Token = 260
	Token_SCONST               Token = 261
	Token_USCONST              Token = 262
	Token_BCONST               Token = 263
	Token_XCONST               Token = 264
	Token_Op                   Token = 265
	Token_ICONST               Token = 266
	Token_PARAM                Token = 267
	Token_TYPECAST             Token = 268
	Token_DOT_DOT              Token = 269
	Token_COLON_EQUALS         Token = 270
	Token_EQUALS_GREATER       Token = 271
	Token_LESS_EQUALS          Token = 272
	Token_GREATER_EQUALS       Token = 273
	Token_NOT_EQUALS           Token = 274
	Token_SQL_COMMENT          Token = 275
	Token_C_COMMENT            Token = 276
	Token_ABORT_P              Token = 277
	Token_ABSOLUTE_P           Token = 278
	Token_ACCESS               Token = 279
	Token_ACTION               Token = 280
	Token_ADD_P                Token = 281
	Token_ADMIN                Token = 282
	Token_AFTER                Token = 283
	Token_AGGREGATE            Token = 284
	Token_ALL                  Token = 285
	Token_ALSO                 Token = 286
	Token_ALTER                Token = 287
	Token_ALWAYS               Token = 288
	Token_ANALYSE              Token = 289
	Token_ANALYZE              Token = 290
	Token_AND                  Token = 291
	Token_ANY                  Token = 292
	Token_ARRAY                Token = 293
	Token_AS                   Token = 294
	Token_ASC                  Token = 295
	Token_ASENSITIVE           Token = 296
	Token_ASSERTION            Token = 297
	Token_ASSIGNMENT           Token = 298
	Token_ASYMMETRIC           Token = 299
	Token_ATOMIC               Token = 300
	Token_AT                   Token = 301
	Token_ATTACH               Token = 302
	Token_ATTRIBUTE            Token = 303
	Token_AUTHORIZATION        Token = 304
	Token_BACKWARD             Token = 305
	Token_BEFORE               Token = 306
	Token_BEGIN_P              Token = 307
	Token_BETWEEN              Token = 308
	Token_BIGINT               Token = 309
	Token_BINARY               Token = 310
	Token_BIT                  Token = 311
	Token_BOOLEAN_P            Token = 312
	Token_BOTH                 Token = 313
	Token_BREADTH              Token = 314
	Token_BY                   Token = 315
	Token_CACHE                Token = 316
	Token_CALL                 Token = 317
	Token_CALLED               Token = 318
	Token_CASCADE              Token = 319
	Token_CASCADED             Token = 320
	Token_CASE                 Token = 321
	Token_CAST                 Token = 322
	Token_CATALOG_P            Token = 323
	Token_CHAIN                Token = 324
	Token_CHAR_P               Token = 325
	Token_CHARACTER            Token = 326
	Token_CHARACTERISTICS      Token = 327
	Token_CHECK                Token = 328
	Token_CHECKPOINT           Token = 329
	Token_CLASS                Token = 330
	Token_CLOSE                Token = 331
	Token_CLUSTER              Token = 332
	Token_COALESCE             Token = 333
	Token_COLLATE              Token = 334
	Token_COLLATION            Token = 335
	Token_COLUMN               Token = 336
	Token_COLUMNS              Token = 337
	Token_COMMENT              Token = 338
	Token_COMMENTS             Token = 339
	Token_COMMIT               Token = 340
	Token_COMMITTED            Token = 341
	Token_COMPRESSION          Token = 342
	Token_CONCURRENTLY         Token = 343
	Token_CONFIGURATION        Token = 344
	Token_CONFLICT             Token = 345
	Token_CONNECTION           Token = 346
	Token_CONSTRAINT           Token = 347
	Token_CONSTRAINTS          Token = 348
	Token_CONTENT_P            Token = 349
	Token_CONTINUE_P           Token = 350
	Token_CONVERSION_P         Token = 351
	Token_COPY                 Token = 352
	Token_COST                 Token = 353
	Token_CREATE               Token = 354
	Token_CROSS                Token = 355
	Token_CSV                  Token = 356
	Token_CUBE                 Token = 357
	Token_CURRENT_P            Token = 358
	Token_CURRENT_CATALOG      Token = 359
	Token_CURRENT_DATE         Token = 360
	Token_CURRENT_ROLE         Token = 361
	Token_CURRENT_SCHEMA       Token = 362
	Token_CURRENT_TIME         Token = 363
	Token_CURRENT_TIMESTAMP    Token = 364
	Token_CURRENT_USER         Token = 365
	Token_CURSOR               Token = 366
	Token_CYCLE                Token = 367
	Token_DATA_P               Token = 368
	Token_DATABASE             Token = 369
	Token_DAY_P                Token = 370
	Token_DEALLOCATE           Token = 371
	Token_DEC                  Token = 372
	Token_DECIMAL_P            Token = 373
	Token_DECLARE              Token = 374
	Token_DEFAULT              Token = 375
	Token_DEFAULTS             Token = 376
	Token_DEFERRABLE           Token = 377
	Token_DEFERRED             Token = 378
	Token_DEFINER              Token = 379
	Token_DELETE_P             Token = 380
	Token_DELIMITER            Token = 381
	Token_DELIMITERS           Token = 382
	Token_DEPENDS              Token = 383
	Token_DEPTH                Token = 384
	Token_DESC                 Token = 385
	Token_DETACH               Token = 386
	Token_DICTIONARY           Token = 387
	Token_DISABLE_P            Token = 388
	Token_DISCARD              Token = 389
	Token_DISTINCT             Token = 390
	Token_DO                   Token = 391
	Token_DOCUMENT_P           Token = 392
	Token_DOMAIN_P             Token = 393
	Token_DOUBLE_P             Token = 394
	Token_DROP                 Token = 395
	Token_EACH                 Token = 396
	Token_ELSE                 Token = 397
	Token_ENABLE_P             Token = 398
	Token_ENCODING             Token = 399
	Token_ENCRYPTED            Token = 400
	Token_END_P                Token = 401
	Token_ENUM_P               Token = 402
	Token_ESCAPE               Token = 403
	Token_EVENT                Token = 404
	Token_EXCEPT               Token = 405
	Token_EXCLUDE              Token = 406
	Token_EXCLUDING            Token = 407
	Token_EXCLUSIVE            Token = 408
	Token_EXECUTE              Token = 409
	Token_EXISTS               Token = 410
	Token_EXPLAIN              Token = 411
	Token_EXPRESSION           Token = 412
	Token_EXTENSION            Token = 413
	Token_EXTERNAL             Token = 414
	Token_EXTRACT              Token = 415
	Token_FALSE_P              Token = 416
	Token_FAMILY               Token = 417
	Token_FETCH                Token = 418
	Token_FILTER               Token = 419
	Token_FINALIZE             Token = 420
	Token_FIRST_P              Token = 421
	Token_FLOAT_P              Token = 422
	Token_FOLLOWING            Token = 423
	Token_FOR                  Token = 424
	Token_FORCE                Token = 425
	Token_FOREIGN              Token = 426
	Token_FORWARD              Token = 427
	Token_FREEZE               Token = 428
	Token_FROM                 Token = 429
	Token_FULL                 Token = 430
	Token_FUNCTION             Token = 431
	Token_FUNCTIONS            Token = 432
	Token_GENERATED            Token = 433
	Token_GLOBAL               Token = 434
	Token_GRANT                Token = 435
	Token_GRANTED              Token = 436
	Token_GREATEST             Token = 437
	Token_GROUP_P              Token = 438
	Token_GROUPING             Token = 439
	Token_GROUPS               Token = 440
	Token_HANDLER              Token = 441
	Token_HAVING               Token = 442
	Token_HEADER_P             Token = 443
	Token_HOLD                 Token = 444
	Token_HOUR_P               Token = 445
	Token_IDENTITY_P           Token = 446
	Token_IF_P                 Token = 447
	Token_ILIKE                Token = 448
	Token_IMMEDIATE            Token = 449
	Token_IMMUTABLE            Token = 450
	Token_IMPLICIT_P           Token = 451
	Token_IMPORT_P             Token = 452
	Token_IN_P                 Token = 453
	Token_INCLUDE              Token = 454
	Token_INCLUDING            Token = 455
	Token_INCREMENT            Token = 456
	Token_INDEX                Token = 457
	Token_INDEXES              Token = 458
	Token_INHERIT              Token = 459
	Token_INHERITS             Token = 460
	Token_INITIALLY            Token = 461
	Token_INLINE_P             Token = 462
	Token_INNER_P              Token = 463
	Token_INOUT                Token = 464
	Token_INPUT_P              Token = 465
	Token_INSENSITIVE          Token = 466
	Token_INSERT               Token = 467
	Token_INSTEAD              Token = 468
	Token_INT_P                Token = 469
	Token_INTEGER              Token = 470
	Token_INTERSECT            Token = 471
	Token_INTERVAL             Token = 472
	Token_INTO                 Token = 473
	Token_INVOKER              Token = 474
	Token_IS                   Token = 475
	Token_ISNULL               Token = 476
	Token_ISOLATION            Token = 477
	Token_JOIN                 Token = 478
	Token_KEY                  Token = 479
	Token_LABEL                Token = 480
	Token_LANGUAGE             Token = 481
	Token_LARGE_P              Token = 482
	Token_LAST_P               Token = 483
	Token_LATERAL_P            Token = 484
	Token_LEADING              Token = 485
	Token_LEAKPROOF            Token = 486
	Token_LEAST                Token = 487
	Token_LEFT                 Token = 488
	Token_LEVEL                Token = 489
	Token_LIKE                 Token = 490
	Token_LIMIT                Token = 491
	Token_LISTEN               Token = 492
	Token_LOAD                 Token = 493
	Token_LOCAL                Token = 494
	Token_LOCALTIME            Token = 495
	Token_LOCALTIMESTAMP       Token = 496
	Token_LOCATION             Token = 497
	Token_LOCK_P               Token = 498
	Token_LOCKED               Token = 499
	Token_LOGGED               Token = 500
	Token_MAPPING              Token = 501
	Token_MATCH                Token = 502
	Token_MATCHED              Token = 503
	Token_MATERIALIZED         Token = 504
	Token_MAXVALUE             Token = 505
	Token_MERGE                Token = 506
	Token_METHOD               Token = 507
	Token_MINUTE_P             Token = 508
	Token_MINVALUE             Token = 509
	Token_MODE                 Token = 510
	Token_MONTH_P              Token = 511
	Token_MOVE                 Token = 512
	Token_NAME_P               Token = 513
	Token_NAMES                Token = 514
	Token_NATIONAL             Token = 515
	Token_NATURAL              Token = 516
	Token_NCHAR                Token = 517
	Token_NEW                  Token = 518
	Token_NEXT                 Token = 519
	Token_NFC                  Token = 520
	Token_NFD                  Token = 521
	Token_NFKC                 Token = 522
	Token_NFKD                 Token = 523
	Token_NO                   Token = 524
	Token_NONE                 Token = 525
	Token_NORMALIZE            Token = 526
	Token_NORMALIZED           Token = 527
	Token_NOT                  Token = 528
	Token_NOTHING              Token = 529
	Token_NOTIFY               Token = 530
	Token_NOTNULL              Token = 531
	Token_NOWAIT               Token = 532
	Token_NULL_P               Token = 533
	Token_NULLIF               Token = 534
	Token_NULLS_P              Token = 535
	Token_NUMERIC              Token = 536
	Token_OBJECT_P             Token = 537
	Token_OF                   Token = 538
	Token_OFF                  Token = 539
	Token_OFFSET               Token = 540
	Token_OIDS                 Token = 541
	Token_OLD                  Token = 542
	Token_ON                   Token = 543
	Token_ONLY                 Token = 544
	Token_OPERATOR             Token = 545
	Token_OPTION               Token = 546
	Token_OPTIONS              Token = 547
	Token_OR                   Token = 548
	Token_ORDER                Token = 549
	Token_ORDINALITY           Token = 550
	Token_OTHERS               Token = 551
	Token_OUT_P                Token = 552
	Token_OUTER_P              Token = 553
	Token_OVER                 Token = 554
	Token_OVERLAPS             Token = 555
	Token_OVERLAY              Token = 556
	Token_OVERRIDING           Token = 557
	Token_OWNED                Token = 558
	Token_OWNER                Token = 559
	Token_PARALLEL             Token = 560
	Token_PARAMETER            Token = 561
	Token_PARSER               Token = 562
	Token_PARTIAL              Token = 563
	Token_PARTITION            Token = 564
	Token_PASSING              Token = 565
	Token_PASSWORD             Token = 566
	Token_PLACING              Token = 567
	Token_PLANS                Token = 568
	Token_POLICY               Token = 569
	Token_POSITION             Token = 570
	Token_PRECEDING            Token = 571
	Token_PRECISION            Token = 572
	Token_PRESERVE             Token = 573
	Token_PREPARE              Token = 574
	Token_PREPARED             Token = 575
	Token_PRIMARY              Token = 576
	Token_PRIOR                Token = 577
	Token_PRIVILEGES           Token = 578
	Token_PROCEDURAL           Token = 579
	Token_PROCEDURE            Token = 580
	Token_PROCEDURES           Token = 581
	Token_PROGRAM              Token = 582
	Token_PUBLICATION          Token = 583
	Token_QUOTE                Token = 584
	Token_RANGE                Token = 585
	Token_READ                 Token = 586
	Token_REAL                 Token = 587
	Token_REASSIGN             Token = 588
	Token_RECHECK              Token = 589
	Token_RECURSIVE            Token = 590
	Token_REF_P                Token = 591
	Token_REFERENCES           Token = 592
	Token_REFERENCING          Token = 593
	Token_REFRESH              Token = 594
	Token_REINDEX              Token = 595
	Token_RELATIVE_P           Token = 596
	Token_RELEASE              Token = 597
	Token_RENAME               Token = 598
	Token_REPEATABLE           Token = 599
	Token_REPLACE              Token = 600
	Token_REPLICA              Token = 601
	Token_RESET                Token = 602
	Token_RESTART              Token = 603
	Token_RESTRICT             Token = 604
	Token_RETURN               Token = 605
	Token_RETURNING            Token = 606
	Token_RETURNS              Token = 607
	Token_REVOKE               Token = 608
	Token_RIGHT                Token = 609
	Token_ROLE                 Token = 610
	Token_ROLLBACK             Token = 611
	Token_ROLLUP               Token = 612
	Token_ROUTINE              Token = 613
	Token_ROUTINES             Token = 614
	Token_ROW                  Token = 615
	Token_ROWS                 Token = 616
	Token_RULE                 Token = 617
	Token_SAVEPOINT            Token = 618
	Token_SCHEMA               Token = 619
	Token_SCHEMAS              Token = 620
	Token_SCROLL               Token = 621
	Token_SEARCH               Token = 622
	Token_SECOND_P             Token = 623
	Token_SECURITY             Token = 624
	Token_SELECT               Token = 625
	Token_SEQUENCE             Token = 626
	Token_SEQUENCES            Token = 627
	Token_SERIALIZABLE         Token = 628
	Token_SERVER               Token = 629
	Token_SESSION              Token = 630
	Token_SESSION_USER         Token = 631
	Token_SET                  Token = 632
	Token_SETS                 Token = 633
	Token_SETOF                Token = 634
	Token_SHARE                Token = 635
	Token_SHOW                 Token = 636
	Token_SIMILAR              Token = 637
	Token_SIMPLE               Token = 638
	Token_SKIP                 Token = 639
	Token_SMALLINT             Token = 640
	Token_SNAPSHOT             Token = 641
	Token_SOME                 Token = 642
	Token_SQL_P                Token = 643
	Token_STABLE               Token = 644
	Token_STANDALONE_P         Token = 645
	Token_START                Token = 646
	Token_STATEMENT            Token = 647
	Token_STATISTICS           Token = 648
	Token_STDIN                Token = 649
	Token_STDOUT               Token = 650
	Token_STORAGE              Token = 651
	Token_STORED               Token = 652
	Token_STRICT_P             Token = 653
	Token_STRIP_P              Token = 654
	Token_SUBSCRIPTION         Token = 655
	Token_SUBSTRING            Token = 656
	Token_SUPPORT              Token = 657
	Token_SYMMETRIC            Token = 658
	Token_SYSID                Token = 659
	Token_SYSTEM_P             Token = 660
	Token_TABLE                Token = 661
	Token_TABLES               Token = 662
	Token_TABLESAMPLE          Token = 663
	Token_TABLESPACE           Token = 664
	Token_TEMP                 Token = 665
	Token_TEMPLATE             Token = 666
	Token_TEMPORARY            Token = 667
	Token_TEXT_P               Token = 668
	Token_THEN                 Token = 669
	Token_TIES                 Token = 670
	Token_TIME                 Token = 671
	Token_TIMESTAMP            Token = 672
	Token_TO                   Token = 673
	Token_TRAILING             Token = 674
	Token_TRANSACTION          Token = 675
	Token_TRANSFORM            Token = 676
	Token_TREAT                Token = 677
	Token_TRIGGER              Token = 678
	Token_TRIM                 Token = 679
	Token_TRUE_P               Token = 680
	Token_TRUNCATE             Token = 681
	Token_TRUSTED              Token = 682
	Token_TYPE_P               Token = 683
	Token_TYPES_P              Token = 684
	Token_UESCAPE              Token = 685
	Token_UNBOUNDED            Token = 686
	Token_UNCOMMITTED          Token = 687
	Token_UNENCRYPTED          Token = 688
	Token_UNION                Token = 689
	Token_UNIQUE               Token = 690
	Token_UNKNOWN              Token = 691
	Token_UNLISTEN             Token = 692
	Token_UNLOGGED             Token = 693
	Token_UNTIL                Token = 694
	Token_UPDATE               Token = 695
	Token_USER                 Token = 696
	Token_USING                Token = 697
	Token_VACUUM               Token = 698
	Token_VALID                Token = 699
	Token_VALIDATE             Token = 700
	Token_VALIDATOR            Token = 701
	Token_VALUE_P              Token = 702
	Token_VALUES               Token = 703
	Token_VARCHAR              Token = 704
	Token_VARIADIC             Token = 705
	Token_VARYING              Token = 706
	Token_VERBOSE              Token = 707
	Token_VERSION_P            Token = 708
	Token_VIEW                 Token = 709
	Token_VIEWS                Token = 710
	Token_VOLATILE             Token = 711
	Token_WHEN                 Token = 712
	Token_WHERE                Token = 713
	Token_WHITESPACE_P         Token = 714
	Token_WINDOW               Token = 715
	Token_WITH                 Token = 716
	Token_WITHIN               Token = 717
	Token_WITHOUT              Token = 718
	Token_WORK                 Token = 719
	Token_WRAPPER              Token = 720
	Token_WRITE                Token = 721
	Token_XML_P                Token = 722
	Token_XMLATTRIBUTES        Token = 723
	Token_XMLCONCAT            Token = 724
	Token_XMLELEMENT           Token = 725
	Token_XMLEXISTS            Token = 726
	Token_XMLFOREST            Token = 727
	Token_XMLNAMESPACES        Token = 728
	Token_XMLPARSE             Token = 729
	Token_XMLPI                Token = 730
	Token_XMLROOT              Token = 731
	Token_XMLSERIALIZE         Token = 732
	Token_XMLTABLE             Token = 733
	Token_YEAR_P               Token = 734
	Token_YES_P                Token = 735
	Token_ZONE                 Token = 736
	Token_NOT_LA               Token = 737
	Token_NULLS_LA             Token = 738
	Token_WITH_LA              Token = 739
	Token_MODE_TYPE_NAME       Token = 740
	Token_MODE_PLPGSQL_EXPR    Token = 741
	Token_MODE_PLPGSQL_ASSIGN1 Token = 742
	Token_MODE_PLPGSQL_ASSIGN2 Token = 743
	Token_MODE_PLPGSQL_ASSIGN3 Token = 744
	Token_UMINUS               Token = 745
)

// Enum value maps for Token.
var (
	Token_name = map[int32]string{
		0:   "NUL",
		37:  "ASCII_37",
		40:  "ASCII_40",
		41:  "ASCII_41",
		42:  "ASCII_42",
		43:  "ASCII_43",
		44:  "ASCII_44",
		45:  "ASCII_45",
		46:  "ASCII_46",
		47:  "ASCII_47",
		58:  "ASCII_58",
		59:  "ASCII_59",
		60:  "ASCII_60",
		61:  "ASCII_61",
		62:  "ASCII_62",
		63:  "ASCII_63",
		91:  "ASCII_91",
		92:  "ASCII_92",
		93:  "ASCII_93",
		94:  "ASCII_94",
		258: "IDENT",
		259: "UIDENT",
		260: "FCONST",
		261: "SCONST",
		262: "USCONST",
		263: "BCONST",
		264: "XCONST",
		265: "Op",
		266: "ICONST",
		267: "PARAM",
		268: "TYPECAST",
		269: "DOT_DOT",
		270: "COLON_EQUALS",
		271: "EQUALS_GREATER",
		272: "LESS_EQUALS",
		273: "GREATER_EQUALS",
		274: "NOT_EQUALS",
		275: "SQL_COMMENT",
		276: "C_COMMENT",
		277: "ABORT_P",
		278: "ABSOLUTE_P",
		279: "ACCESS",
		280: "ACTION",
		281: "ADD_P",
		282: "ADMIN",
		283: "AFTER",
		284: "AGGREGATE",
		285: "ALL",
		286: "ALSO",
		287: "ALTER",
		288: "ALWAYS",
		289: "ANALYSE",
		290: "ANALYZE",
		291: "AND",
		292: "ANY",
		293: "ARRAY",
		294: "AS",
		295: "ASC",
		296: "ASENSITIVE",
		297: "ASSERTION",
		298: "ASSIGNMENT",
		299: "ASYMMETRIC",
		300: "ATOMIC",
		301: "AT",
		302: "ATTACH",
		303: "ATTRIBUTE",
		304: "AUTHORIZATION",
		305: "BACKWARD",
		306: "BEFORE",
		307: "BEGIN_P",
		308: "BETWEEN",
		309: "BIGINT",
		310: "BINARY",
		311: "BIT",
		312: "BOOLEAN_P",
		313: "BOTH",
		314: "BREADTH",
		315: "BY",
		316: "CACHE",
		317: "CALL",
		318: "CALLED",
		319: "CASCADE",
		320: "CASCADED",
		321: "CASE",
		322: "CAST",
		323: "CATALOG_P",
		324: "CHAIN",
		325: "CHAR_P",
		326: "CHARACTER",
		327: "CHARACTERISTICS",
		328: "CHECK",
		329: "CHECKPOINT",
		330: "CLASS",
		331: "CLOSE",
		332: "CLUSTER",
		333: "COALESCE",
		334: "COLLATE",
		335: "COLLATION",
		336: "COLUMN",
		337: "COLUMNS",
		338: "COMMENT",
		339: "COMMENTS",
		340: "COMMIT",
		341: "COMMITTED",
		342: "COMPRESSION",
		343: "CONCURRENTLY",
		344: "CONFIGURATION",
		345: "CONFLICT",
		346: "CONNECTION",
		347: "CONSTRAINT",
		348: "CONSTRAINTS",
		349: "CONTENT_P",
		350: "CONTINUE_P",
		351: "CONVERSION_P",
		352: "COPY",
		353: "COST",
		354: "CREATE",
		355: "CROSS",
		356: "CSV",
		357: "CUBE",
		358: "CURRENT_P",
		359: "CURRENT_CATALOG",
		360: "CURRENT_DATE",
		361: "CURRENT_ROLE",
		362: "CURRENT_SCHEMA",
		363: "CURRENT_TIME",
		364: "CURRENT_TIMESTAMP",
		365: "CURRENT_USER",
		366: "CURSOR",
		367: "CYCLE",
		368: "DATA_P",
		369: "DATABASE",
		370: "DAY_P",
		371: "DEALLOCATE",
		372: "DEC",
		373: "DECIMAL_P",
		374: "DECLARE",
		375: "DEFAULT",
		376: "DEFAULTS",
		377: "DEFERRABLE",
		378: "DEFERRED",
		379: "DEFINER",
		380: "DELETE_P",
		381: "DELIMITER",
		382: "DELIMITERS",
		383: "DEPENDS",
		384: "DEPTH",
		385: "DESC",
		386: "DETACH",
		387: "DICTIONARY",
		388: "DISABLE_P",
		389: "DISCARD",
		390: "DISTINCT",
		391: "DO",
		392: "DOCUMENT_P",
		393: "DOMAIN_P",
		394: "DOUBLE_P",
		395: "DROP",
		396: "EACH",
		397: "ELSE",
		398: "ENABLE_P",
		399: "ENCODING",
		400: "ENCRYPTED",
		401: "END_P",
		402: "ENUM_P",
		403: "ESCAPE",
		404: "EVENT",
		405: "EXCEPT",
		406: "EXCLUDE",
		407: "EXCLUDING",
		408: "EXCLUSIVE",
		409: "EXECUTE",
		410: "EXISTS",
		411: "EXPLAIN",
		412: "EXPRESSION",
		413: "EXTENSION",
		414: "EXTERNAL",
		415: "EXTRACT",
		416: "FALSE_P",
		417: "FAMILY",
		418: "FETCH",
		419: "FILTER",
		420: "FINALIZE",
		421: "FIRST_P",
		422: "FLOAT_P",
		423: "FOLLOWING",
		424: "FOR",
		425: "FORCE",
		426: "FOREIGN",
		427: "FORWARD",
		428: "FREEZE",
		429: "FROM",
		430: "FULL",
		431: "FUNCTION",
		432: "FUNCTIONS",
		433: "GENERATED",
		434: "GLOBAL",
		435: "GRANT",
		436: "GRANTED",
		437: "GREATEST",
		438: "GROUP_P",
		439: "GROUPING",
		440: "GROUPS",
		441: "HANDLER",
		442: "HAVING",
		443: "HEADER_P",
		444: "HOLD",
		445: "HOUR_P",
		446: "IDENTITY_P",
		447: "IF_P",
		448: "ILIKE",
		449: "IMMEDIATE",
		450: "IMMUTABLE",
		451: "IMPLICIT_P",
		452: "IMPORT_P",
		453: "IN_P",
		454: "INCLUDE",
		455: "INCLUDING",
		456: "INCREMENT",
		457: "INDEX",
		458: "INDEXES",
		459: "INHERIT",
		460: "INHERITS",
		461: "INITIALLY",
		462: "INLINE_P",
		463: "INNER_P",
		464: "INOUT",
		465: "INPUT_P",
		466: "INSENSITIVE",
		467: "INSERT",
		468: "INSTEAD",
		469: "INT_P",
		470: "INTEGER",
		471: "INTERSECT",
		472: "INTERVAL",
		473: "INTO",
		474: "INVOKER",
		475: "IS",
		476: "ISNULL",
		477: "ISOLATION",
		478: "JOIN",
		479: "KEY",
		480: "LABEL",
		481: "LANGUAGE",
		482: "LARGE_P",
		483: "LAST_P",
		484: "LATERAL_P",
		485: "LEADING",
		486: "LEAKPROOF",
		487: "LEAST",
		488: "LEFT",
		489: "LEVEL",
		490: "LIKE",
		491: "LIMIT",
		492: "LISTEN",
		493: "LOAD",
		494: "LOCAL",
		495: "LOCALTIME",
		496: "LOCALTIMESTAMP",
		497: "LOCATION",
		498: "LOCK_P",
		499: "LOCKED",
		500: "LOGGED",
		501: "MAPPING",
		502: "MATCH",
		503: "MATCHED",
		504: "MATERIALIZED",
		505: "MAXVALUE",
		506: "MERGE",
		507: "METHOD",
		508: "MINUTE_P",
		509: "MINVALUE",
		510: "MODE",
		511: "MONTH_P",
		512: "MOVE",
		513: "NAME_P",
		514: "NAMES",
		515: "NATIONAL",
		516: "NATURAL",
		517: "NCHAR",
		518: "NEW",
		519: "NEXT",
		520: "NFC",
		521: "NFD",
		522: "NFKC",
		523: "NFKD",
		524: "NO",
		525: "NONE",
		526: "NORMALIZE",
		527: "NORMALIZED",
		528: "NOT",
		529: "NOTHING",
		530: "NOTIFY",
		531: "NOTNULL",
		532: "NOWAIT",
		533: "NULL_P",
		534: "NULLIF",
		535: "NULLS_P",
		536: "NUMERIC",
		537: "OBJECT_P",
		538: "OF",
		539: "OFF",
		540: "OFFSET",
		541: "OIDS",
		542: "OLD",
		543: "ON",
		544: "ONLY",
		545: "OPERATOR",
		546: "OPTION",
		547: "OPTIONS",
		548: "OR",
		549: "ORDER",
		550: "ORDINALITY",
		551: "OTHERS",
		552: "OUT_P",
		553: "OUTER_P",
		554: "OVER",
		555: "OVERLAPS",
		556: "OVERLAY",
		557: "OVERRIDING",
		558: "OWNED",
		559: "OWNER",
		560: "PARALLEL",
		561: "PARAMETER",
		562: "PARSER",
		563: "PARTIAL",
		564: "PARTITION",
		565: "PASSING",
		566: "PASSWORD",
		567: "PLACING",
		568: "PLANS",
		569: "POLICY",
		570: "POSITION",
		571: "PRECEDING",
		572: "PRECISION",
		573: "PRESERVE",
		574: "PREPARE",
		575: "PREPARED",
		576: "PRIMARY",
		577: "PRIOR",
		578: "PRIVILEGES",
		579: "PROCEDURAL",
		580: "PROCEDURE",
		581: "PROCEDURES",
		582: "PROGRAM",
		583: "PUBLICATION",
		584: "QUOTE",
		585: "RANGE",
		586: "READ",
		587: "REAL",
		588: "REASSIGN",
		589: "RECHECK",
		590: "RECURSIVE",
		591: "REF_P",
		592: "REFERENCES",
		593: "REFERENCING",
		594: "REFRESH",
		595: "REINDEX",
		596: "RELATIVE_P",
		597: "RELEASE",
		598: "RENAME",
		599: "REPEATABLE",
		600: "REPLACE",
		601: "REPLICA",
		602: "RESET",
		603: "RESTART",
		604: "RESTRICT",
		605: "RETURN",
		606: "RETURNING",
		607: "RETURNS",
		608: "REVOKE",
		609: "RIGHT",
		610: "ROLE",
		611: "ROLLBACK",
		612: "ROLLUP",
		613: "ROUTINE",
		614: "ROUTINES",
		615: "ROW",
		616: "ROWS",
		617: "RULE",
		618: "SAVEPOINT",
		619: "SCHEMA",
		620: "SCHEMAS",
		621: "SCROLL",
		622: "SEARCH",
		623: "SECOND_P",
		624: "SECURITY",
		625: "SELECT",
		626: "SEQUENCE",
		627: "SEQUENCES",
		628: "SERIALIZABLE",
		629: "SERVER",
		630: "SESSION",
		631: "SESSION_USER",
		632: "SET",
		633: "SETS",
		634: "SETOF",
		635: "SHARE",
		636: "SHOW",
		637: "SIMILAR",
		638: "SIMPLE",
		639: "SKIP",
		640: "SMALLINT",
		641: "SNAPSHOT",
		642: "SOME",
		643: "SQL_P",
		644: "STABLE",
		645: "STANDALONE_P",
		646: "START",
		647: "STATEMENT",
		648: "STATISTICS",
		649: "STDIN",
		650: "STDOUT",
		651: "STORAGE",
		652: "STORED",
		653: "STRICT_P",
		654: "STRIP_P",
		655: "SUBSCRIPTION",
		656: "SUBSTRING",
		657: "SUPPORT",
		658: "SYMMETRIC",
		659: "SYSID",
		660: "SYSTEM_P",
		661: "TABLE",
		662: "TABLES",
		663: "TABLESAMPLE",
		664: "TABLESPACE",
		665: "TEMP",
		666: "TEMPLATE",
		667: "TEMPORARY",
		668: "TEXT_P",
		669: "THEN",
		670: "TIES",
		671: "TIME",
		672: "TIMESTAMP",
		673: "TO",
		674: "TRAILING",
		675: "TRANSACTION",
		676: "TRANSFORM",
		677: "TREAT",
		678: "TRIGGER",
		679: "TRIM",
		680: "TRUE_P",
		681: "TRUNCATE",
		682: "TRUSTED",
		683: "TYPE_P",
		684: "TYPES_P",
		685: "UESCAPE",
		686: "UNBOUNDED",
		687: "UNCOMMITTED",
		688: "UNENCRYPTED",
		689: "UNION",
		690: "UNIQUE",
		691: "UNKNOWN",
		692: "UNLISTEN",
		693: "UNLOGGED",
		694: "UNTIL",
		695: "UPDATE",
		696: "USER",
		697: "USING",
		698: "VACUUM",
		699: "VALID",
		700: "VALIDATE",
		701: "VALIDATOR",
		702: "VALUE_P",
		703: "VALUES",
		704: "VARCHAR",
		705: "VARIADIC",
		706: "VARYING",
		707: "VERBOSE",
		708: "VERSION_P",
		709: "VIEW",
		710: "VIEWS",
		711: "VOLATILE",
		712: "WHEN",
		713: "WHERE",
		714: "WHITESPACE_P",
		715: "WINDOW",
		716: "WITH",
		717: "WITHIN",
		718: "WITHOUT",
		719: "WORK",
		720: "WRAPPER",
		721: "WRITE",
		722: "XML_P",
		723: "XMLATTRIBUTES",
		724: "XMLCONCAT",
		725: "XMLELEMENT",
		726: "XMLEXISTS",
		727: "XMLFOREST",
		728: "XMLNAMESPACES",
		729: "XMLPARSE",
		730: "XMLPI",
		731: "XMLROOT",
		732: "XMLSERIALIZE",
		733: "XMLTABLE",
		734: "YEAR_P",
		735: "YES_P",
		736: "ZONE",
		737: "NOT_LA",
		738: "NULLS_LA",
		739: "WITH_LA",
		740: "MODE_TYPE_NAME",
		741: "MODE_PLPGSQL_EXPR",
		742: "MODE_PLPGSQL_ASSIGN1",
		743: "MODE_PLPGSQL_ASSIGN2",
		744: "MODE_PLPGSQL_ASSIGN3",
		745: "UMINUS",
	}
	Token_value = map[string]int32{
		"NUL":                  0,
		"ASCII_37":             37,
		"ASCII_40":             40,
		"ASCII_41":             41,
		"ASCII_42":             42,
		"ASCII_43":             43,
		"ASCII_44":             44,
		"ASCII_45":             45,
		"ASCII_46":             46,
		"ASCII_47":             47,
		"ASCII_58":             58,
		"ASCII_59":             59,
		"ASCII_60":             60,
		"ASCII_61":             61,
		"ASCII_62":             62,
		"ASCII_63":             63,
		"ASCII_91":             91,
		"ASCII_92":             92,
		"ASCII_93":             93,
		"ASCII_94":             94,
		"IDENT":                258,
		"UIDENT":               259,
		"FCONST":               260,
		"SCONST":               261,
		"USCONST":              262,
		"BCONST":               263,
		"XCONST":               264,
		"Op":                   265,
		"ICONST":               266,
		"PARAM":                267,
		"TYPECAST":             268,
		"DOT_DOT":              269,
		"COLON_EQUALS":         270,
		"EQUALS_GREATER":       271,
		"LESS_EQUALS":          272,
		"GREATER_EQUALS":       273,
		"NOT_EQUALS":           274,
		"SQL_COMMENT":          275,
		"C_COMMENT":            276,
		"ABORT_P":              277,
		"ABSOLUTE_P":           278,
		"ACCESS":               279,
		"ACTION":               280,
		"ADD_P":                281,
		"ADMIN":                282,
		"AFTER":                283,
		"AGGREGATE":            284,
		"ALL":                  285,
		"ALSO":                 286,
		"ALTER":                287,
		"ALWAYS":               288,
		"ANALYSE":              289,
		"ANALYZE":              290,
		"AND":                  291,
		"ANY":                  292,
		"ARRAY":                293,
		"AS":                   294,
		"ASC":                  295,
		"ASENSITIVE":           296,
		"ASSERTION":            297,
		"ASSIGNMENT":           298,
		"ASYMMETRIC":           299,
		"ATOMIC":               300,
		"AT":                   301,
		"ATTACH":               302,
		"ATTRIBUTE":            303,
		"AUTHORIZATION":        304,
		"BACKWARD":             305,
		"BEFORE":               306,
		"BEGIN_P":              307,
		"BETWEEN":              308,
		"BIGINT":               309,
		"BINARY":               310,
		"BIT":                  311,
		"BOOLEAN_P":            312,
		"BOTH":                 313,
		"BREADTH":              314,
		"BY":                   315,
		"CACHE":                316,
		"CALL":                 317,
		"CALLED":               318,
		"CASCADE":              319,
		"CASCADED":             320,
		"CASE":                 321,
		"CAST":                 322,
		"CATALOG_P":            323,
		"CHAIN":                324,
		"CHAR_P":               325,
		"CHARACTER":            326,
		"CHARACTERISTICS":      327,
		"CHECK":                328,
		"CHECKPOINT":           329,
		"CLASS":                330,
		"CLOSE":                331,
		"CLUSTER":              332,
		"COALESCE":             333,
		"COLLATE":              334,
		"COLLATION":            335,
		"COLUMN":               336,
		"COLUMNS":              337,
		"COMMENT":              338,
		"COMMENTS":             339,
		"COMMIT":               340,
		"COMMITTED":            341,
		"COMPRESSION":          342,
		"CONCURRENTLY":         343,
		"CONFIGURATION":        344,
		"CONFLICT":             345,
		"CONNECTION":           346,
		"CONSTRAINT":           347,
		"CONSTRAINTS":          348,
		"CONTENT_P":            349,
		"CONTINUE_P":           350,
		"CONVERSION_P":         351,
		"COPY":                 352,
		"COST":                 353,
		"CREATE":               354,
		"CROSS":                355,
		"CSV":                  356,
		"CUBE":                 357,
		"CURRENT_P":            358,
		"CURRENT_CATALOG":      359,
		"CURRENT_DATE":         360,
		"CURRENT_ROLE":         361,
		"CURRENT_SCHEMA":       362,
		"CURRENT_TIME":         363,
		"CURRENT_TIMESTAMP":    364,
		"CURRENT_USER":         365,
		"CURSOR":               366,
		"CYCLE":                367,
		"DATA_P":               368,
		"DATABASE":             369,
		"DAY_P":                370,
		"DEALLOCATE":           371,
		"DEC":                  372,
		"DECIMAL_P":            373,
		"DECLARE":              374,
		"DEFAULT":              375,
		"DEFAULTS":             376,
		"DEFERRABLE":           377,
		"DEFERRED":             378,
		"DEFINER":              379,
		"DELETE_P":             380,
		"DELIMITER":            381,
		"DELIMITERS":           382,
		"DEPENDS":              383,
		"DEPTH":                384,
		"DESC":                 385,
		"DETACH":               386,
		"DICTIONARY":           387,
		"DISABLE_P":            388,
		"DISCARD":              389,
		"DISTINCT":             390,
		"DO":                   391,
		"DOCUMENT_P":           392,
		"DOMAIN_P":             393,
		"DOUBLE_P":             394,
		"DROP":                 395,
		"EACH":                 396,
		"ELSE":                 397,
		"ENABLE_P":             398,
		"ENCODING":             399,
		"ENCRYPTED":            400,
		"END_P":                401,
		"ENUM_P":               402,
		"ESCAPE":               403,
		"EVENT":                404,
		"EXCEPT":               405,
		"EXCLUDE":              406,
		"EXCLUDING":            407,
		"EXCLUSIVE":            408,
		"EXECUTE":              409,
		"EXISTS":               410,
		"EXPLAIN":              411,
		"EXPRESSION":           412,
		"EXTENSION":            413,
		"EXTERNAL":             414,
		"EXTRACT":              415,
		"FALSE_P":              416,
		"FAMILY":               417,
		"FETCH":                418,
		"FILTER":               419,
		"FINALIZE":             420,
		"FIRST_P":              421,
		"FLOAT_P":              422,
		"FOLLOWING":            423,
		"FOR":                  424,
		"FORCE":                425,
		"FOREIGN":              426,
		"FORWARD":              427,
		"FREEZE":               428,
		"FROM":                 429,
		"FULL":                 430,
		"FUNCTION":             431,
		"FUNCTIONS":            432,
		"GENERATED":            433,
		"GLOBAL":               434,
		"GRANT":                435,
		"GRANTED":              436,
		"GREATEST":             437,
		"GROUP_P":              438,
		"GROUPING":             439,
		"GROUPS":               440,
		"HANDLER":              441,
		"HAVING":               442,
		"HEADER_P":             443,
		"HOLD":                 444,
		"HOUR_P":               445,
		"IDENTITY_P":           446,
		"IF_P":                 447,
		"ILIKE":                448,
		"IMMEDIATE":            449,
		"IMMUTABLE":            450,
		"IMPLICIT_P":           451,
		"IMPORT_P":             452,
		"IN_P":                 453,
		"INCLUDE":              454,
		"INCLUDING":            455,
		"INCREMENT":            456,
		"INDEX":                457,
		"INDEXES":              458,
		"INHERIT":              459,
		"INHERITS":             460,
		"INITIALLY":            461,
		"INLINE_P":             462,
		"INNER_P":              463,
		"INOUT":                464,
		"INPUT_P":              465,
		"INSENSITIVE":          466,
		"INSERT":               467,
		"INSTEAD":              468,
		"INT_P":                469,
		"INTEGER":              470,
		"INTERSECT":            471,
		"INTERVAL":             472,
		"INTO":                 473,
		"INVOKER":              474,
		"IS":                   475,
		"ISNULL":               476,
		"ISOLATION":            477,
		"JOIN":                 478,
		"KEY":                  479,
		"LABEL":                480,
		"LANGUAGE":             481,
		"LARGE_P":              482,
		"LAST_P":               483,
		"LATERAL_P":            484,
		"LEADING":              485,
		"LEAKPROOF":            486,
		"LEAST":                487,
		"LEFT":                 488,
		"LEVEL":                489,
		"LIKE":                 490,
		"LIMIT":                491,
		"LISTEN":               492,
		"LOAD":                 493,
		"LOCAL":                494,
		"LOCALTIME":            495,
		"LOCALTIMESTAMP":       496,
		"LOCATION":             497,
		"LOCK_P":               498,
		"LOCKED":               499,
		"LOGGED":               500,
		"MAPPING":              501,
		"MATCH":                502,
		"MATCHED":              503,
		"MATERIALIZED":         504,
		"MAXVALUE":             505,
		"MERGE":                506,
		"METHOD":               507,
		"MINUTE_P":             508,
		"MINVALUE":             509,
		"MODE":                 510,
		"MONTH_P":              511,
		"MOVE":                 512,
		"NAME_P":               513,
		"NAMES":                514,
		"NATIONAL":             515,
		"NATURAL":              516,
		"NCHAR":                517,
		"NEW":                  518,
		"NEXT":                 519,
		"NFC":                  520,
		"NFD":                  521,
		"NFKC":                 522,
		"NFKD":                 523,
		"NO":                   524,
		"NONE":                 525,
		"NORMALIZE":            526,
		"NORMALIZED":           527,
		"NOT":                  528,
		"NOTHING":              529,
		"NOTIFY":               530,
		"NOTNULL":              531,
		"NOWAIT":               532,
		"NULL_P":               533,
		"NULLIF":               534,
		"NULLS_P":              535,
		"NUMERIC":              536,
		"OBJECT_P":             537,
		"OF":                   538,
		"OFF":                  539,
		"OFFSET":               540,
		"OIDS":                 541,
		"OLD":                  542,
		"ON":                   543,
		"ONLY":                 544,
		"OPERATOR":             545,
		"OPTION":               546,
		"OPTIONS":              547,
		"OR":                   548,
		"ORDER":                549,
		"ORDINALITY":           550,
		"OTHERS":               551,
		"OUT_P":                552,
		"OUTER_P":              553,
		"OVER":                 554,
		"OVERLAPS":             555,
		"OVERLAY":              556,
		"OVERRIDING":           557,
		"OWNED":                558,
		"OWNER":                559,
		"PARALLEL":             560,
		"PARAMETER":            561,
		"PARSER":               562,
		"PARTIAL":              563,
		"PARTITION":            564,
		"PASSING":              565,
		"PASSWORD":             566,
		"PLACING":              567,
		"PLANS":                568,
		"POLICY":               569,
		"POSITION":             570,
		"PRECEDING":            571,
		"PRECISION":            572,
		"PRESERVE":             573,
		"PREPARE":              574,
		"PREPARED":             575,
		"PRIMARY":              576,
		"PRIOR":                577,
		"PRIVILEGES":           578,
		"PROCEDURAL":           579,
		"PROCEDURE":            580,
		"PROCEDURES":           581,
		"PROGRAM":              582,
		"PUBLICATION":          583,
		"QUOTE":                584,
		"RANGE":                585,
		"READ":                 586,
		"REAL":                 587,
		"REASSIGN":             588,
		"RECHECK":              589,
		"RECURSIVE":            590,
		"REF_P":                591,
		"REFERENCES":           592,
		"REFERENCING":          593,
		"REFRESH":              594,
		"REINDEX":              595,
		"RELATIVE_P":           596,
		"RELEASE":              597,
		"RENAME":               598,
		"REPEATABLE":           599,
		"REPLACE":              600,
		"REPLICA":              601,
		"RESET":                602,
		"RESTART":              603,
		"RESTRICT":             604,
		"RETURN":               605,
		"RETURNING":            606,
		"RETURNS":              607,
		"REVOKE":               608,
		"RIGHT":                609,
		"ROLE":                 610,
		"ROLLBACK":             611,
		"ROLLUP":               612,
		"ROUTINE":              613,
		"ROUTINES":             614,
		"ROW":                  615,
		"ROWS":                 616,
		"RULE":                 617,
		"SAVEPOINT":            618,
		"SCHEMA":               619,
		"SCHEMAS":              620,
		"SCROLL":               621,
		"SEARCH":               622,
		"SECOND_P":             623,
		"SECURITY":             624,
		"SELECT":               625,
		"SEQUENCE":             626,
		"SEQUENCES":            627,
		"SERIALIZABLE":         628,
		"SERVER":               629,
		"SESSION":              630,
		"SESSION_USER":         631,
		"SET":                  632,
		"SETS":                 633,
		"SETOF":                634,
		"SHARE":                635,
		"SHOW":                 636,
		"SIMILAR":              637,
		"SIMPLE":               638,
		"SKIP":                 639,
		"SMALLINT":             640,
		"SNAPSHOT":             641,
		"SOME":                 642,
		"SQL_P":                643,
		"STABLE":               644,
		"STANDALONE_P":         645,
		"START":                646,
		"STATEMENT":            647,
		"STATISTICS":           648,
		"STDIN":                649,
		"STDOUT":               650,
		"STORAGE":              651,
		"STORED":               652,
		"STRICT_P":             653,
		"STRIP_P":              654,
		"SUBSCRIPTION":         655,
		"SUBSTRING":            656,
		"SUPPORT":              657,
		"SYMMETRIC":            658,
		"SYSID":                659,
		"SYSTEM_P":             660,
		"TABLE":                661,
		"TABLES":               662,
		"TABLESAMPLE":          663,
		"TABLESPACE":           664,
		"TEMP":                 665,
		"TEMPLATE":             666,
		"TEMPORARY":            667,
		"TEXT_P":               668,
		"THEN":                 669,
		"TIES":                 670,
		"TIME":                 671,
		"TIMESTAMP":            672,
		"TO":                   673,
		"TRAILING":             674,
		"TRANSACTION":          675,
		"TRANSFORM":            676,
		"TREAT":                677,
		"TRIGGER":              678,
		"TRIM":                 679,
		"TRUE_P":               680,
		"TRUNCATE":             681,
		"TRUSTED":              682,
		"TYPE_P":               683,
		"TYPES_P":              684,
		"UESCAPE":              685,
		"UNBOUNDED":            686,
		"UNCOMMITTED":          687,
		"UNENCRYPTED":          688,
		"UNION":                689,
		"UNIQUE":               690,
		"UNKNOWN":              691,
		"UNLISTEN":             692,
		"UNLOGGED":             693,
		"UNTIL":                694,
		"UPDATE":               695,
		"USER":                 696,
		"USING":                697,
		"VACUUM":               698,
		"VALID":                699,
		"VALIDATE":             700,
		"VALIDATOR":            701,
		"VALUE_P":              702,
		"VALUES":               703,
		"VARCHAR":              704,
		"VARIADIC":             705,
		"VARYING":              706,
		"VERBOSE":              707,
		"VERSION_P":            708,
		"VIEW":                 709,
		"VIEWS":                710,
		"VOLATILE":             711,
		"WHEN":                 712,
		"WHERE":                713,
		"WHITESPACE_P":         714,
		"WINDOW":               715,
		"WITH":                 716,
		"WITHIN":               717,
		"WITHOUT":              718,
		"WORK":                 719,
		"WRAPPER":              720,
		"WRITE":                721,
		"XML_P":                722,
		"XMLATTRIBUTES":        723,
		"XMLCONCAT":            724,
		"XMLELEMENT":           725,
		"XMLEXISTS":            726,
		"XMLFOREST":            727,
		"XMLNAMESPACES":        728,
		"XMLPARSE":             729,
		"XMLPI":                730,
		"XMLROOT":              731,
		"XMLSERIALIZE":         732,
		"XMLTABLE":             733,
		"YEAR_P":               734,
		"YES_P":                735,
		"ZONE":                 736,
		"NOT_LA":               737,
		"NULLS_LA":             738,
		"WITH_LA":              739,
		"MODE_TYPE_NAME":       740,
		"MODE_PLPGSQL_EXPR":    741,
		"MODE_PLPGSQL_ASSIGN1": 742,
		"MODE_PLPGSQL_ASSIGN2": 743,
		"MODE_PLPGSQL_ASSIGN3": 744,
		"UMINUS":               745,
	}
)

func (x Token) Enum() *Token {
	p := new(Token)
	*p = x
	return p
}

func (x Token) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Token) Descriptor() protoreflect.EnumDescriptor {
	return file_pg_query_proto_enumTypes[58].Descriptor()
}

func (Token) Type() protoreflect.EnumType {
	return &file_pg_query_proto_enumTypes[58]
}

func (x Token) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Token.Descriptor instead.
func (Token) EnumDescriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{58}
}

type ParseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32      `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Stmts   []*RawStmt `protobuf:"bytes,2,rep,name=stmts,proto3" json:"stmts,omitempty"`
}

func (x *ParseResult) Reset() {
	*x = ParseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParseResult) ProtoMessage() {}

func (x *ParseResult) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParseResult.ProtoReflect.Descriptor instead.
func (*ParseResult) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{0}
}

func (x *ParseResult) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ParseResult) GetStmts() []*RawStmt {
	if x != nil {
		return x.Stmts
	}
	return nil
}

type ScanResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int32        `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Tokens  []*ScanToken `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *ScanResult) Reset() {
	*x = ScanResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanResult) ProtoMessage() {}

func (x *ScanResult) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanResult.ProtoReflect.Descriptor instead.
func (*ScanResult) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{1}
}

func (x *ScanResult) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ScanResult) GetTokens() []*ScanToken {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Node:
	//
	//	*Node_Alias
	//	*Node_RangeVar
	//	*Node_TableFunc
	//	*Node_Var
	//	*Node_Param
	//	*Node_Aggref
	//	*Node_GroupingFunc
	//	*Node_WindowFunc
	//	*Node_SubscriptingRef
	//	*Node_FuncExpr
	//	*Node_NamedArgExpr
	//	*Node_OpExpr
	//	*Node_DistinctExpr
	//	*Node_NullIfExpr
	//	*Node_ScalarArrayOpExpr
	//	*Node_BoolExpr
	//	*Node_SubLink
	//	*Node_SubPlan
	//	*Node_AlternativeSubPlan
	//	*Node_FieldSelect
	//	*Node_FieldStore
	//	*Node_RelabelType
	//	*Node_CoerceViaIo
	//	*Node_ArrayCoerceExpr
	//	*Node_ConvertRowtypeExpr
	//	*Node_CollateExpr
	//	*Node_CaseExpr
	//	*Node_CaseWhen
	//	*Node_CaseTestExpr
	//	*Node_ArrayExpr
	//	*Node_RowExpr
	//	*Node_RowCompareExpr
	//	*Node_CoalesceExpr
	//	*Node_MinMaxExpr
	//	*Node_SqlvalueFunction
	//	*Node_XmlExpr
	//	*Node_NullTest
	//	*Node_BooleanTest
	//	*Node_CoerceToDomain
	//	*Node_CoerceToDomainValue
	//	*Node_SetToDefault
	//	*Node_CurrentOfExpr
	//	*Node_NextValueExpr
	//	*Node_InferenceElem
	//	*Node_TargetEntry
	//	*Node_RangeTblRef
	//	*Node_JoinExpr
	//	*Node_FromExpr
	//	*Node_OnConflictExpr
	//	*Node_IntoClause
	//	*Node_MergeAction
	//	*Node_RawStmt
	//	*Node_Query
	//	*Node_InsertStmt
	//	*Node_DeleteStmt
	//	*Node_UpdateStmt
	//	*Node_MergeStmt
	//	*Node_SelectStmt
	//	*Node_ReturnStmt
	//	*Node_PlassignStmt
	//	*Node_AlterTableStmt
	//	*Node_AlterTableCmd
	//	*Node_AlterDomainStmt
	//	*Node_SetOperationStmt
	//	*Node_GrantStmt
	//	*Node_GrantRoleStmt
	//	*Node_AlterDefaultPrivilegesStmt
	//	*Node_ClosePortalStmt
	//	*Node_ClusterStmt
	//	*Node_CopyStmt
	//	*Node_CreateStmt
	//	*Node_DefineStmt
	//	*Node_DropStmt
	//	*Node_TruncateStmt
	//	*Node_CommentStmt
	//	*Node_FetchStmt
	//	*Node_IndexStmt
	//	*Node_CreateFunctionStmt
	//	*Node_AlterFunctionStmt
	//	*Node_DoStmt
	//	*Node_RenameStmt
	//	*Node_RuleStmt
	//	*Node_NotifyStmt
	//	*Node_ListenStmt
	//	*Node_UnlistenStmt
	//	*Node_TransactionStmt
	//	*Node_ViewStmt
	//	*Node_LoadStmt
	//	*Node_CreateDomainStmt
	//	*Node_CreatedbStmt
	//	*Node_DropdbStmt
	//	*Node_VacuumStmt
	//	*Node_ExplainStmt
	//	*Node_CreateTableAsStmt
	//	*Node_CreateSeqStmt
	//	*Node_AlterSeqStmt
	//	*Node_VariableSetStmt
	//	*Node_VariableShowStmt
	//	*Node_DiscardStmt
	//	*Node_CreateTrigStmt
	//	*Node_CreatePlangStmt
	//	*Node_CreateRoleStmt
	//	*Node_AlterRoleStmt
	//	*Node_DropRoleStmt
	//	*Node_LockStmt
	//	*Node_ConstraintsSetStmt
	//	*Node_ReindexStmt
	//	*Node_CheckPointStmt
	//	*Node_CreateSchemaStmt
	//	*Node_AlterDatabaseStmt
	//	*Node_AlterDatabaseRefreshCollStmt
	//	*Node_AlterDatabaseSetStmt
	//	*Node_AlterRoleSetStmt
	//	*Node_CreateConversionStmt
	//	*Node_CreateCastStmt
	//	*Node_CreateOpClassStmt
	//	*Node_CreateOpFamilyStmt
	//	*Node_AlterOpFamilyStmt
	//	*Node_PrepareStmt
	//	*Node_ExecuteStmt
	//	*Node_DeallocateStmt
	//	*Node_DeclareCursorStmt
	//	*Node_CreateTableSpaceStmt
	//	*Node_DropTableSpaceStmt
	//	*Node_AlterObjectDependsStmt
	//	*Node_AlterObjectSchemaStmt
	//	*Node_AlterOwnerStmt
	//	*Node_AlterOperatorStmt
	//	*Node_AlterTypeStmt
	//	*Node_DropOwnedStmt
	//	*Node_ReassignOwnedStmt
	//	*Node_CompositeTypeStmt
	//	*Node_CreateEnumStmt
	//	*Node_CreateRangeStmt
	//	*Node_AlterEnumStmt
	//	*Node_AlterTsdictionaryStmt
	//	*Node_AlterTsconfigurationStmt
	//	*Node_CreateFdwStmt
	//	*Node_AlterFdwStmt
	//	*Node_CreateForeignServerStmt
	//	*Node_AlterForeignServerStmt
	//	*Node_CreateUserMappingStmt
	//	*Node_AlterUserMappingStmt
	//	*Node_DropUserMappingStmt
	//	*Node_AlterTableSpaceOptionsStmt
	//	*Node_AlterTableMoveAllStmt
	//	*Node_SecLabelStmt
	//	*Node_CreateForeignTableStmt
	//	*Node_ImportForeignSchemaStmt
	//	*Node_CreateExtensionStmt
	//	*Node_AlterExtensionStmt
	//	*Node_AlterExtensionContentsStmt
	//	*Node_CreateEventTrigStmt
	//	*Node_AlterEventTrigStmt
	//	*Node_RefreshMatViewStmt
	//	*Node_ReplicaIdentityStmt
	//	*Node_AlterSystemStmt
	//	*Node_CreatePolicyStmt
	//	*Node_AlterPolicyStmt
	//	*Node_CreateTransformStmt
	//	*Node_CreateAmStmt
	//	*Node_CreatePublicationStmt
	//	*Node_AlterPublicationStmt
	//	*Node_CreateSubscriptionStmt
	//	*Node_AlterSubscriptionStmt
	//	*Node_DropSubscriptionStmt
	//	*Node_CreateStatsStmt
	//	*Node_AlterCollationStmt
	//	*Node_CallStmt
	//	*Node_AlterStatsStmt
	//	*Node_AExpr
	//	*Node_ColumnRef
	//	*Node_ParamRef
	//	*Node_FuncCall
	//	*Node_AStar
	//	*Node_AIndices
	//	*Node_AIndirection
	//	*Node_AArrayExpr
	//	*Node_ResTarget
	//	*Node_MultiAssignRef
	//	*Node_TypeCast
	//	*Node_CollateClause
	//	*Node_SortBy
	//	*Node_WindowDef
	//	*Node_RangeSubselect
	//	*Node_RangeFunction
	//	*Node_RangeTableSample
	//	*Node_RangeTableFunc
	//	*Node_RangeTableFuncCol
	//	*Node_TypeName
	//	*Node_ColumnDef
	//	*Node_IndexElem
	//	*Node_StatsElem
	//	*Node_Constraint
	//	*Node_DefElem
	//	*Node_RangeTblEntry
	//	*Node_RangeTblFunction
	//	*Node_TableSampleClause
	//	*Node_WithCheckOption
	//	*Node_SortGroupClause
	//	*Node_GroupingSet
	//	*Node_WindowClause
	//	*Node_ObjectWithArgs
	//	*Node_AccessPriv
	//	*Node_CreateOpClassItem
	//	*Node_TableLikeClause
	//	*Node_FunctionParameter
	//	*Node_LockingClause
	//	*Node_RowMarkClause
	//	*Node_XmlSerialize
	//	*Node_WithClause
	//	*Node_InferClause
	//	*Node_OnConflictClause
	//	*Node_CtesearchClause
	//	*Node_CtecycleClause
	//	*Node_CommonTableExpr
	//	*Node_MergeWhenClause
	//	*Node_RoleSpec
	//	*Node_TriggerTransition
	//	*Node_PartitionElem
	//	*Node_PartitionSpec
	//	*Node_PartitionBoundSpec
	//	*Node_PartitionRangeDatum
	//	*Node_PartitionCmd
	//	*Node_VacuumRelation
	//	*Node_PublicationObjSpec
	//	*Node_PublicationTable
	//	*Node_InlineCodeBlock
	//	*Node_CallContext
	//	*Node_Integer
	//	*Node_Float
	//	*Node_Boolean
	//	*Node_String_
	//	*Node_BitString
	//	*Node_List
	//	*Node_IntList
	//	*Node_OidList
	//	*Node_AConst
	Node isNode_Node `protobuf_oneof:"node"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{2}
}

func (m *Node) GetNode() isNode_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *Node) GetAlias() *Alias {
	if x, ok := x.GetNode().(*Node_Alias); ok {
		return x.Alias
	}
	return nil
}

func (x *Node) GetRangeVar() *RangeVar {
	if x, ok := x.GetNode().(*Node_RangeVar); ok {
		return x.RangeVar
	}
	return nil
}

func (x *Node) GetTableFunc() *TableFunc {
	if x, ok := x.GetNode().(*Node_TableFunc); ok {
		return x.TableFunc
	}
	return nil
}

func (x *Node) GetVar() *Var {
	if x, ok := x.GetNode().(*Node_Var); ok {
		return x.Var
	}
	return nil
}

func (x *Node) GetParam() *Param {
	if x, ok := x.GetNode().(*Node_Param); ok {
		return x.Param
	}
	return nil
}

func (x *Node) GetAggref() *Aggref {
	if x, ok := x.GetNode().(*Node_Aggref); ok {
		return x.Aggref
	}
	return nil
}

func (x *Node) GetGroupingFunc() *GroupingFunc {
	if x, ok := x.GetNode().(*Node_GroupingFunc); ok {
		return x.GroupingFunc
	}
	return nil
}

func (x *Node) GetWindowFunc() *WindowFunc {
	if x, ok := x.GetNode().(*Node_WindowFunc); ok {
		return x.WindowFunc
	}
	return nil
}

func (x *Node) GetSubscriptingRef() *SubscriptingRef {
	if x, ok := x.GetNode().(*Node_SubscriptingRef); ok {
		return x.SubscriptingRef
	}
	return nil
}

func (x *Node) GetFuncExpr() *FuncExpr {
	if x, ok := x.GetNode().(*Node_FuncExpr); ok {
		return x.FuncExpr
	}
	return nil
}

func (x *Node) GetNamedArgExpr() *NamedArgExpr {
	if x, ok := x.GetNode().(*Node_NamedArgExpr); ok {
		return x.NamedArgExpr
	}
	return nil
}

func (x *Node) GetOpExpr() *OpExpr {
	if x, ok := x.GetNode().(*Node_OpExpr); ok {
		return x.OpExpr
	}
	return nil
}

func (x *Node) GetDistinctExpr() *DistinctExpr {
	if x, ok := x.GetNode().(*Node_DistinctExpr); ok {
		return x.DistinctExpr
	}
	return nil
}

func (x *Node) GetNullIfExpr() *NullIfExpr {
	if x, ok := x.GetNode().(*Node_NullIfExpr); ok {
		return x.NullIfExpr
	}
	return nil
}

func (x *Node) GetScalarArrayOpExpr() *ScalarArrayOpExpr {
	if x, ok := x.GetNode().(*Node_ScalarArrayOpExpr); ok {
		return x.ScalarArrayOpExpr
	}
	return nil
}

func (x *Node) GetBoolExpr() *BoolExpr {
	if x, ok := x.GetNode().(*Node_BoolExpr); ok {
		return x.BoolExpr
	}
	return nil
}

func (x *Node) GetSubLink() *SubLink {
	if x, ok := x.GetNode().(*Node_SubLink); ok {
		return x.SubLink
	}
	return nil
}

func (x *Node) GetSubPlan() *SubPlan {
	if x, ok := x.GetNode().(*Node_SubPlan); ok {
		return x.SubPlan
	}
	return nil
}

func (x *Node) GetAlternativeSubPlan() *AlternativeSubPlan {
	if x, ok := x.GetNode().(*Node_AlternativeSubPlan); ok {
		return x.AlternativeSubPlan
	}
	return nil
}

func (x *Node) GetFieldSelect() *FieldSelect {
	if x, ok := x.GetNode().(*Node_FieldSelect); ok {
		return x.FieldSelect
	}
	return nil
}

func (x *Node) GetFieldStore() *FieldStore {
	if x, ok := x.GetNode().(*Node_FieldStore); ok {
		return x.FieldStore
	}
	return nil
}

func (x *Node) GetRelabelType() *RelabelType {
	if x, ok := x.GetNode().(*Node_RelabelType); ok {
		return x.RelabelType
	}
	return nil
}

func (x *Node) GetCoerceViaIo() *CoerceViaIO {
	if x, ok := x.GetNode().(*Node_CoerceViaIo); ok {
		return x.CoerceViaIo
	}
	return nil
}

func (x *Node) GetArrayCoerceExpr() *ArrayCoerceExpr {
	if x, ok := x.GetNode().(*Node_ArrayCoerceExpr); ok {
		return x.ArrayCoerceExpr
	}
	return nil
}

func (x *Node) GetConvertRowtypeExpr() *ConvertRowtypeExpr {
	if x, ok := x.GetNode().(*Node_ConvertRowtypeExpr); ok {
		return x.ConvertRowtypeExpr
	}
	return nil
}

func (x *Node) GetCollateExpr() *CollateExpr {
	if x, ok := x.GetNode().(*Node_CollateExpr); ok {
		return x.CollateExpr
	}
	return nil
}

func (x *Node) GetCaseExpr() *CaseExpr {
	if x, ok := x.GetNode().(*Node_CaseExpr); ok {
		return x.CaseExpr
	}
	return nil
}

func (x *Node) GetCaseWhen() *CaseWhen {
	if x, ok := x.GetNode().(*Node_CaseWhen); ok {
		return x.CaseWhen
	}
	return nil
}

func (x *Node) GetCaseTestExpr() *CaseTestExpr {
	if x, ok := x.GetNode().(*Node_CaseTestExpr); ok {
		return x.CaseTestExpr
	}
	return nil
}

func (x *Node) GetArrayExpr() *ArrayExpr {
	if x, ok := x.GetNode().(*Node_ArrayExpr); ok {
		return x.ArrayExpr
	}
	return nil
}

func (x *Node) GetRowExpr() *RowExpr {
	if x, ok := x.GetNode().(*Node_RowExpr); ok {
		return x.RowExpr
	}
	return nil
}

func (x *Node) GetRowCompareExpr() *RowCompareExpr {
	if x, ok := x.GetNode().(*Node_RowCompareExpr); ok {
		return x.RowCompareExpr
	}
	return nil
}

func (x *Node) GetCoalesceExpr() *CoalesceExpr {
	if x, ok := x.GetNode().(*Node_CoalesceExpr); ok {
		return x.CoalesceExpr
	}
	return nil
}

func (x *Node) GetMinMaxExpr() *MinMaxExpr {
	if x, ok := x.GetNode().(*Node_MinMaxExpr); ok {
		return x.MinMaxExpr
	}
	return nil
}

func (x *Node) GetSqlvalueFunction() *SQLValueFunction {
	if x, ok := x.GetNode().(*Node_SqlvalueFunction); ok {
		return x.SqlvalueFunction
	}
	return nil
}

func (x *Node) GetXmlExpr() *XmlExpr {
	if x, ok := x.GetNode().(*Node_XmlExpr); ok {
		return x.XmlExpr
	}
	return nil
}

func (x *Node) GetNullTest() *NullTest {
	if x, ok := x.GetNode().(*Node_NullTest); ok {
		return x.NullTest
	}
	return nil
}

func (x *Node) GetBooleanTest() *BooleanTest {
	if x, ok := x.GetNode().(*Node_BooleanTest); ok {
		return x.BooleanTest
	}
	return nil
}

func (x *Node) GetCoerceToDomain() *CoerceToDomain {
	if x, ok := x.GetNode().(*Node_CoerceToDomain); ok {
		return x.CoerceToDomain
	}
	return nil
}

func (x *Node) GetCoerceToDomainValue() *CoerceToDomainValue {
	if x, ok := x.GetNode().(*Node_CoerceToDomainValue); ok {
		return x.CoerceToDomainValue
	}
	return nil
}

func (x *Node) GetSetToDefault() *SetToDefault {
	if x, ok := x.GetNode().(*Node_SetToDefault); ok {
		return x.SetToDefault
	}
	return nil
}

func (x *Node) GetCurrentOfExpr() *CurrentOfExpr {
	if x, ok := x.GetNode().(*Node_CurrentOfExpr); ok {
		return x.CurrentOfExpr
	}
	return nil
}

func (x *Node) GetNextValueExpr() *NextValueExpr {
	if x, ok := x.GetNode().(*Node_NextValueExpr); ok {
		return x.NextValueExpr
	}
	return nil
}

func (x *Node) GetInferenceElem() *InferenceElem {
	if x, ok := x.GetNode().(*Node_InferenceElem); ok {
		return x.InferenceElem
	}
	return nil
}

func (x *Node) GetTargetEntry() *TargetEntry {
	if x, ok := x.GetNode().(*Node_TargetEntry); ok {
		return x.TargetEntry
	}
	return nil
}

func (x *Node) GetRangeTblRef() *RangeTblRef {
	if x, ok := x.GetNode().(*Node_RangeTblRef); ok {
		return x.RangeTblRef
	}
	return nil
}

func (x *Node) GetJoinExpr() *JoinExpr {
	if x, ok := x.GetNode().(*Node_JoinExpr); ok {
		return x.JoinExpr
	}
	return nil
}

func (x *Node) GetFromExpr() *FromExpr {
	if x, ok := x.GetNode().(*Node_FromExpr); ok {
		return x.FromExpr
	}
	return nil
}

func (x *Node) GetOnConflictExpr() *OnConflictExpr {
	if x, ok := x.GetNode().(*Node_OnConflictExpr); ok {
		return x.OnConflictExpr
	}
	return nil
}

func (x *Node) GetIntoClause() *IntoClause {
	if x, ok := x.GetNode().(*Node_IntoClause); ok {
		return x.IntoClause
	}
	return nil
}

func (x *Node) GetMergeAction() *MergeAction {
	if x, ok := x.GetNode().(*Node_MergeAction); ok {
		return x.MergeAction
	}
	return nil
}

func (x *Node) GetRawStmt() *RawStmt {
	if x, ok := x.GetNode().(*Node_RawStmt); ok {
		return x.RawStmt
	}
	return nil
}

func (x *Node) GetQuery() *Query {
	if x, ok := x.GetNode().(*Node_Query); ok {
		return x.Query
	}
	return nil
}

func (x *Node) GetInsertStmt() *InsertStmt {
	if x, ok := x.GetNode().(*Node_InsertStmt); ok {
		return x.InsertStmt
	}
	return nil
}

func (x *Node) GetDeleteStmt() *DeleteStmt {
	if x, ok := x.GetNode().(*Node_DeleteStmt); ok {
		return x.DeleteStmt
	}
	return nil
}

func (x *Node) GetUpdateStmt() *UpdateStmt {
	if x, ok := x.GetNode().(*Node_UpdateStmt); ok {
		return x.UpdateStmt
	}
	return nil
}

func (x *Node) GetMergeStmt() *MergeStmt {
	if x, ok := x.GetNode().(*Node_MergeStmt); ok {
		return x.MergeStmt
	}
	return nil
}

func (x *Node) GetSelectStmt() *SelectStmt {
	if x, ok := x.GetNode().(*Node_SelectStmt); ok {
		return x.SelectStmt
	}
	return nil
}

func (x *Node) GetReturnStmt() *ReturnStmt {
	if x, ok := x.GetNode().(*Node_ReturnStmt); ok {
		return x.ReturnStmt
	}
	return nil
}

func (x *Node) GetPlassignStmt() *PLAssignStmt {
	if x, ok := x.GetNode().(*Node_PlassignStmt); ok {
		return x.PlassignStmt
	}
	return nil
}

func (x *Node) GetAlterTableStmt() *AlterTableStmt {
	if x, ok := x.GetNode().(*Node_AlterTableStmt); ok {
		return x.AlterTableStmt
	}
	return nil
}

func (x *Node) GetAlterTableCmd() *AlterTableCmd {
	if x, ok := x.GetNode().(*Node_AlterTableCmd); ok {
		return x.AlterTableCmd
	}
	return nil
}

func (x *Node) GetAlterDomainStmt() *AlterDomainStmt {
	if x, ok := x.GetNode().(*Node_AlterDomainStmt); ok {
		return x.AlterDomainStmt
	}
	return nil
}

func (x *Node) GetSetOperationStmt() *SetOperationStmt {
	if x, ok := x.GetNode().(*Node_SetOperationStmt); ok {
		return x.SetOperationStmt
	}
	return nil
}

func (x *Node) GetGrantStmt() *GrantStmt {
	if x, ok := x.GetNode().(*Node_GrantStmt); ok {
		return x.GrantStmt
	}
	return nil
}

func (x *Node) GetGrantRoleStmt() *GrantRoleStmt {
	if x, ok := x.GetNode().(*Node_GrantRoleStmt); ok {
		return x.GrantRoleStmt
	}
	return nil
}

func (x *Node) GetAlterDefaultPrivilegesStmt() *AlterDefaultPrivilegesStmt {
	if x, ok := x.GetNode().(*Node_AlterDefaultPrivilegesStmt); ok {
		return x.AlterDefaultPrivilegesStmt
	}
	return nil
}

func (x *Node) GetClosePortalStmt() *ClosePortalStmt {
	if x, ok := x.GetNode().(*Node_ClosePortalStmt); ok {
		return x.ClosePortalStmt
	}
	return nil
}

func (x *Node) GetClusterStmt() *ClusterStmt {
	if x, ok := x.GetNode().(*Node_ClusterStmt); ok {
		return x.ClusterStmt
	}
	return nil
}

func (x *Node) GetCopyStmt() *CopyStmt {
	if x, ok := x.GetNode().(*Node_CopyStmt); ok {
		return x.CopyStmt
	}
	return nil
}

func (x *Node) GetCreateStmt() *CreateStmt {
	if x, ok := x.GetNode().(*Node_CreateStmt); ok {
		return x.CreateStmt
	}
	return nil
}

func (x *Node) GetDefineStmt() *DefineStmt {
	if x, ok := x.GetNode().(*Node_DefineStmt); ok {
		return x.DefineStmt
	}
	return nil
}

func (x *Node) GetDropStmt() *DropStmt {
	if x, ok := x.GetNode().(*Node_DropStmt); ok {
		return x.DropStmt
	}
	return nil
}

func (x *Node) GetTruncateStmt() *TruncateStmt {
	if x, ok := x.GetNode().(*Node_TruncateStmt); ok {
		return x.TruncateStmt
	}
	return nil
}

func (x *Node) GetCommentStmt() *CommentStmt {
	if x, ok := x.GetNode().(*Node_CommentStmt); ok {
		return x.CommentStmt
	}
	return nil
}

func (x *Node) GetFetchStmt() *FetchStmt {
	if x, ok := x.GetNode().(*Node_FetchStmt); ok {
		return x.FetchStmt
	}
	return nil
}

func (x *Node) GetIndexStmt() *IndexStmt {
	if x, ok := x.GetNode().(*Node_IndexStmt); ok {
		return x.IndexStmt
	}
	return nil
}

func (x *Node) GetCreateFunctionStmt() *CreateFunctionStmt {
	if x, ok := x.GetNode().(*Node_CreateFunctionStmt); ok {
		return x.CreateFunctionStmt
	}
	return nil
}

func (x *Node) GetAlterFunctionStmt() *AlterFunctionStmt {
	if x, ok := x.GetNode().(*Node_AlterFunctionStmt); ok {
		return x.AlterFunctionStmt
	}
	return nil
}

func (x *Node) GetDoStmt() *DoStmt {
	if x, ok := x.GetNode().(*Node_DoStmt); ok {
		return x.DoStmt
	}
	return nil
}

func (x *Node) GetRenameStmt() *RenameStmt {
	if x, ok := x.GetNode().(*Node_RenameStmt); ok {
		return x.RenameStmt
	}
	return nil
}

func (x *Node) GetRuleStmt() *RuleStmt {
	if x, ok := x.GetNode().(*Node_RuleStmt); ok {
		return x.RuleStmt
	}
	return nil
}

func (x *Node) GetNotifyStmt() *NotifyStmt {
	if x, ok := x.GetNode().(*Node_NotifyStmt); ok {
		return x.NotifyStmt
	}
	return nil
}

func (x *Node) GetListenStmt() *ListenStmt {
	if x, ok := x.GetNode().(*Node_ListenStmt); ok {
		return x.ListenStmt
	}
	return nil
}

func (x *Node) GetUnlistenStmt() *UnlistenStmt {
	if x, ok := x.GetNode().(*Node_UnlistenStmt); ok {
		return x.UnlistenStmt
	}
	return nil
}

func (x *Node) GetTransactionStmt() *TransactionStmt {
	if x, ok := x.GetNode().(*Node_TransactionStmt); ok {
		return x.TransactionStmt
	}
	return nil
}

func (x *Node) GetViewStmt() *ViewStmt {
	if x, ok := x.GetNode().(*Node_ViewStmt); ok {
		return x.ViewStmt
	}
	return nil
}

func (x *Node) GetLoadStmt() *LoadStmt {
	if x, ok := x.GetNode().(*Node_LoadStmt); ok {
		return x.LoadStmt
	}
	return nil
}

func (x *Node) GetCreateDomainStmt() *CreateDomainStmt {
	if x, ok := x.GetNode().(*Node_CreateDomainStmt); ok {
		return x.CreateDomainStmt
	}
	return nil
}

func (x *Node) GetCreatedbStmt() *CreatedbStmt {
	if x, ok := x.GetNode().(*Node_CreatedbStmt); ok {
		return x.CreatedbStmt
	}
	return nil
}

func (x *Node) GetDropdbStmt() *DropdbStmt {
	if x, ok := x.GetNode().(*Node_DropdbStmt); ok {
		return x.DropdbStmt
	}
	return nil
}

func (x *Node) GetVacuumStmt() *VacuumStmt {
	if x, ok := x.GetNode().(*Node_VacuumStmt); ok {
		return x.VacuumStmt
	}
	return nil
}

func (x *Node) GetExplainStmt() *ExplainStmt {
	if x, ok := x.GetNode().(*Node_ExplainStmt); ok {
		return x.ExplainStmt
	}
	return nil
}

func (x *Node) GetCreateTableAsStmt() *CreateTableAsStmt {
	if x, ok := x.GetNode().(*Node_CreateTableAsStmt); ok {
		return x.CreateTableAsStmt
	}
	return nil
}

func (x *Node) GetCreateSeqStmt() *CreateSeqStmt {
	if x, ok := x.GetNode().(*Node_CreateSeqStmt); ok {
		return x.CreateSeqStmt
	}
	return nil
}

func (x *Node) GetAlterSeqStmt() *AlterSeqStmt {
	if x, ok := x.GetNode().(*Node_AlterSeqStmt); ok {
		return x.AlterSeqStmt
	}
	return nil
}

func (x *Node) GetVariableSetStmt() *VariableSetStmt {
	if x, ok := x.GetNode().(*Node_VariableSetStmt); ok {
		return x.VariableSetStmt
	}
	return nil
}

func (x *Node) GetVariableShowStmt() *VariableShowStmt {
	if x, ok := x.GetNode().(*Node_VariableShowStmt); ok {
		return x.VariableShowStmt
	}
	return nil
}

func (x *Node) GetDiscardStmt() *DiscardStmt {
	if x, ok := x.GetNode().(*Node_DiscardStmt); ok {
		return x.DiscardStmt
	}
	return nil
}

func (x *Node) GetCreateTrigStmt() *CreateTrigStmt {
	if x, ok := x.GetNode().(*Node_CreateTrigStmt); ok {
		return x.CreateTrigStmt
	}
	return nil
}

func (x *Node) GetCreatePlangStmt() *CreatePLangStmt {
	if x, ok := x.GetNode().(*Node_CreatePlangStmt); ok {
		return x.CreatePlangStmt
	}
	return nil
}

func (x *Node) GetCreateRoleStmt() *CreateRoleStmt {
	if x, ok := x.GetNode().(*Node_CreateRoleStmt); ok {
		return x.CreateRoleStmt
	}
	return nil
}

func (x *Node) GetAlterRoleStmt() *AlterRoleStmt {
	if x, ok := x.GetNode().(*Node_AlterRoleStmt); ok {
		return x.AlterRoleStmt
	}
	return nil
}

func (x *Node) GetDropRoleStmt() *DropRoleStmt {
	if x, ok := x.GetNode().(*Node_DropRoleStmt); ok {
		return x.DropRoleStmt
	}
	return nil
}

func (x *Node) GetLockStmt() *LockStmt {
	if x, ok := x.GetNode().(*Node_LockStmt); ok {
		return x.LockStmt
	}
	return nil
}

func (x *Node) GetConstraintsSetStmt() *ConstraintsSetStmt {
	if x, ok := x.GetNode().(*Node_ConstraintsSetStmt); ok {
		return x.ConstraintsSetStmt
	}
	return nil
}

func (x *Node) GetReindexStmt() *ReindexStmt {
	if x, ok := x.GetNode().(*Node_ReindexStmt); ok {
		return x.ReindexStmt
	}
	return nil
}

func (x *Node) GetCheckPointStmt() *CheckPointStmt {
	if x, ok := x.GetNode().(*Node_CheckPointStmt); ok {
		return x.CheckPointStmt
	}
	return nil
}

func (x *Node) GetCreateSchemaStmt() *CreateSchemaStmt {
	if x, ok := x.GetNode().(*Node_CreateSchemaStmt); ok {
		return x.CreateSchemaStmt
	}
	return nil
}

func (x *Node) GetAlterDatabaseStmt() *AlterDatabaseStmt {
	if x, ok := x.GetNode().(*Node_AlterDatabaseStmt); ok {
		return x.AlterDatabaseStmt
	}
	return nil
}

func (x *Node) GetAlterDatabaseRefreshCollStmt() *AlterDatabaseRefreshCollStmt {
	if x, ok := x.GetNode().(*Node_AlterDatabaseRefreshCollStmt); ok {
		return x.AlterDatabaseRefreshCollStmt
	}
	return nil
}

func (x *Node) GetAlterDatabaseSetStmt() *AlterDatabaseSetStmt {
	if x, ok := x.GetNode().(*Node_AlterDatabaseSetStmt); ok {
		return x.AlterDatabaseSetStmt
	}
	return nil
}

func (x *Node) GetAlterRoleSetStmt() *AlterRoleSetStmt {
	if x, ok := x.GetNode().(*Node_AlterRoleSetStmt); ok {
		return x.AlterRoleSetStmt
	}
	return nil
}

func (x *Node) GetCreateConversionStmt() *CreateConversionStmt {
	if x, ok := x.GetNode().(*Node_CreateConversionStmt); ok {
		return x.CreateConversionStmt
	}
	return nil
}

func (x *Node) GetCreateCastStmt() *CreateCastStmt {
	if x, ok := x.GetNode().(*Node_CreateCastStmt); ok {
		return x.CreateCastStmt
	}
	return nil
}

func (x *Node) GetCreateOpClassStmt() *CreateOpClassStmt {
	if x, ok := x.GetNode().(*Node_CreateOpClassStmt); ok {
		return x.CreateOpClassStmt
	}
	return nil
}

func (x *Node) GetCreateOpFamilyStmt() *CreateOpFamilyStmt {
	if x, ok := x.GetNode().(*Node_CreateOpFamilyStmt); ok {
		return x.CreateOpFamilyStmt
	}
	return nil
}

func (x *Node) GetAlterOpFamilyStmt() *AlterOpFamilyStmt {
	if x, ok := x.GetNode().(*Node_AlterOpFamilyStmt); ok {
		return x.AlterOpFamilyStmt
	}
	return nil
}

func (x *Node) GetPrepareStmt() *PrepareStmt {
	if x, ok := x.GetNode().(*Node_PrepareStmt); ok {
		return x.PrepareStmt
	}
	return nil
}

func (x *Node) GetExecuteStmt() *ExecuteStmt {
	if x, ok := x.GetNode().(*Node_ExecuteStmt); ok {
		return x.ExecuteStmt
	}
	return nil
}

func (x *Node) GetDeallocateStmt() *DeallocateStmt {
	if x, ok := x.GetNode().(*Node_DeallocateStmt); ok {
		return x.DeallocateStmt
	}
	return nil
}

func (x *Node) GetDeclareCursorStmt() *DeclareCursorStmt {
	if x, ok := x.GetNode().(*Node_DeclareCursorStmt); ok {
		return x.DeclareCursorStmt
	}
	return nil
}

func (x *Node) GetCreateTableSpaceStmt() *CreateTableSpaceStmt {
	if x, ok := x.GetNode().(*Node_CreateTableSpaceStmt); ok {
		return x.CreateTableSpaceStmt
	}
	return nil
}

func (x *Node) GetDropTableSpaceStmt() *DropTableSpaceStmt {
	if x, ok := x.GetNode().(*Node_DropTableSpaceStmt); ok {
		return x.DropTableSpaceStmt
	}
	return nil
}

func (x *Node) GetAlterObjectDependsStmt() *AlterObjectDependsStmt {
	if x, ok := x.GetNode().(*Node_AlterObjectDependsStmt); ok {
		return x.AlterObjectDependsStmt
	}
	return nil
}

func (x *Node) GetAlterObjectSchemaStmt() *AlterObjectSchemaStmt {
	if x, ok := x.GetNode().(*Node_AlterObjectSchemaStmt); ok {
		return x.AlterObjectSchemaStmt
	}
	return nil
}

func (x *Node) GetAlterOwnerStmt() *AlterOwnerStmt {
	if x, ok := x.GetNode().(*Node_AlterOwnerStmt); ok {
		return x.AlterOwnerStmt
	}
	return nil
}

func (x *Node) GetAlterOperatorStmt() *AlterOperatorStmt {
	if x, ok := x.GetNode().(*Node_AlterOperatorStmt); ok {
		return x.AlterOperatorStmt
	}
	return nil
}

func (x *Node) GetAlterTypeStmt() *AlterTypeStmt {
	if x, ok := x.GetNode().(*Node_AlterTypeStmt); ok {
		return x.AlterTypeStmt
	}
	return nil
}

func (x *Node) GetDropOwnedStmt() *DropOwnedStmt {
	if x, ok := x.GetNode().(*Node_DropOwnedStmt); ok {
		return x.DropOwnedStmt
	}
	return nil
}

func (x *Node) GetReassignOwnedStmt() *ReassignOwnedStmt {
	if x, ok := x.GetNode().(*Node_ReassignOwnedStmt); ok {
		return x.ReassignOwnedStmt
	}
	return nil
}

func (x *Node) GetCompositeTypeStmt() *CompositeTypeStmt {
	if x, ok := x.GetNode().(*Node_CompositeTypeStmt); ok {
		return x.CompositeTypeStmt
	}
	return nil
}

func (x *Node) GetCreateEnumStmt() *CreateEnumStmt {
	if x, ok := x.GetNode().(*Node_CreateEnumStmt); ok {
		return x.CreateEnumStmt
	}
	return nil
}

func (x *Node) GetCreateRangeStmt() *CreateRangeStmt {
	if x, ok := x.GetNode().(*Node_CreateRangeStmt); ok {
		return x.CreateRangeStmt
	}
	return nil
}

func (x *Node) GetAlterEnumStmt() *AlterEnumStmt {
	if x, ok := x.GetNode().(*Node_AlterEnumStmt); ok {
		return x.AlterEnumStmt
	}
	return nil
}

func (x *Node) GetAlterTsdictionaryStmt() *AlterTSDictionaryStmt {
	if x, ok := x.GetNode().(*Node_AlterTsdictionaryStmt); ok {
		return x.AlterTsdictionaryStmt
	}
	return nil
}

func (x *Node) GetAlterTsconfigurationStmt() *AlterTSConfigurationStmt {
	if x, ok := x.GetNode().(*Node_AlterTsconfigurationStmt); ok {
		return x.AlterTsconfigurationStmt
	}
	return nil
}

func (x *Node) GetCreateFdwStmt() *CreateFdwStmt {
	if x, ok := x.GetNode().(*Node_CreateFdwStmt); ok {
		return x.CreateFdwStmt
	}
	return nil
}

func (x *Node) GetAlterFdwStmt() *AlterFdwStmt {
	if x, ok := x.GetNode().(*Node_AlterFdwStmt); ok {
		return x.AlterFdwStmt
	}
	return nil
}

func (x *Node) GetCreateForeignServerStmt() *CreateForeignServerStmt {
	if x, ok := x.GetNode().(*Node_CreateForeignServerStmt); ok {
		return x.CreateForeignServerStmt
	}
	return nil
}

func (x *Node) GetAlterForeignServerStmt() *AlterForeignServerStmt {
	if x, ok := x.GetNode().(*Node_AlterForeignServerStmt); ok {
		return x.AlterForeignServerStmt
	}
	return nil
}

func (x *Node) GetCreateUserMappingStmt() *CreateUserMappingStmt {
	if x, ok := x.GetNode().(*Node_CreateUserMappingStmt); ok {
		return x.CreateUserMappingStmt
	}
	return nil
}

func (x *Node) GetAlterUserMappingStmt() *AlterUserMappingStmt {
	if x, ok := x.GetNode().(*Node_AlterUserMappingStmt); ok {
		return x.AlterUserMappingStmt
	}
	return nil
}

func (x *Node) GetDropUserMappingStmt() *DropUserMappingStmt {
	if x, ok := x.GetNode().(*Node_DropUserMappingStmt); ok {
		return x.DropUserMappingStmt
	}
	return nil
}

func (x *Node) GetAlterTableSpaceOptionsStmt() *AlterTableSpaceOptionsStmt {
	if x, ok := x.GetNode().(*Node_AlterTableSpaceOptionsStmt); ok {
		return x.AlterTableSpaceOptionsStmt
	}
	return nil
}

func (x *Node) GetAlterTableMoveAllStmt() *AlterTableMoveAllStmt {
	if x, ok := x.GetNode().(*Node_AlterTableMoveAllStmt); ok {
		return x.AlterTableMoveAllStmt
	}
	return nil
}

func (x *Node) GetSecLabelStmt() *SecLabelStmt {
	if x, ok := x.GetNode().(*Node_SecLabelStmt); ok {
		return x.SecLabelStmt
	}
	return nil
}

func (x *Node) GetCreateForeignTableStmt() *CreateForeignTableStmt {
	if x, ok := x.GetNode().(*Node_CreateForeignTableStmt); ok {
		return x.CreateForeignTableStmt
	}
	return nil
}

func (x *Node) GetImportForeignSchemaStmt() *ImportForeignSchemaStmt {
	if x, ok := x.GetNode().(*Node_ImportForeignSchemaStmt); ok {
		return x.ImportForeignSchemaStmt
	}
	return nil
}

func (x *Node) GetCreateExtensionStmt() *CreateExtensionStmt {
	if x, ok := x.GetNode().(*Node_CreateExtensionStmt); ok {
		return x.CreateExtensionStmt
	}
	return nil
}

func (x *Node) GetAlterExtensionStmt() *AlterExtensionStmt {
	if x, ok := x.GetNode().(*Node_AlterExtensionStmt); ok {
		return x.AlterExtensionStmt
	}
	return nil
}

func (x *Node) GetAlterExtensionContentsStmt() *AlterExtensionContentsStmt {
	if x, ok := x.GetNode().(*Node_AlterExtensionContentsStmt); ok {
		return x.AlterExtensionContentsStmt
	}
	return nil
}

func (x *Node) GetCreateEventTrigStmt() *CreateEventTrigStmt {
	if x, ok := x.GetNode().(*Node_CreateEventTrigStmt); ok {
		return x.CreateEventTrigStmt
	}
	return nil
}

func (x *Node) GetAlterEventTrigStmt() *AlterEventTrigStmt {
	if x, ok := x.GetNode().(*Node_AlterEventTrigStmt); ok {
		return x.AlterEventTrigStmt
	}
	return nil
}

func (x *Node) GetRefreshMatViewStmt() *RefreshMatViewStmt {
	if x, ok := x.GetNode().(*Node_RefreshMatViewStmt); ok {
		return x.RefreshMatViewStmt
	}
	return nil
}

func (x *Node) GetReplicaIdentityStmt() *ReplicaIdentityStmt {
	if x, ok := x.GetNode().(*Node_ReplicaIdentityStmt); ok {
		return x.ReplicaIdentityStmt
	}
	return nil
}

func (x *Node) GetAlterSystemStmt() *AlterSystemStmt {
	if x, ok := x.GetNode().(*Node_AlterSystemStmt); ok {
		return x.AlterSystemStmt
	}
	return nil
}

func (x *Node) GetCreatePolicyStmt() *CreatePolicyStmt {
	if x, ok := x.GetNode().(*Node_CreatePolicyStmt); ok {
		return x.CreatePolicyStmt
	}
	return nil
}

func (x *Node) GetAlterPolicyStmt() *AlterPolicyStmt {
	if x, ok := x.GetNode().(*Node_AlterPolicyStmt); ok {
		return x.AlterPolicyStmt
	}
	return nil
}

func (x *Node) GetCreateTransformStmt() *CreateTransformStmt {
	if x, ok := x.GetNode().(*Node_CreateTransformStmt); ok {
		return x.CreateTransformStmt
	}
	return nil
}

func (x *Node) GetCreateAmStmt() *CreateAmStmt {
	if x, ok := x.GetNode().(*Node_CreateAmStmt); ok {
		return x.CreateAmStmt
	}
	return nil
}

func (x *Node) GetCreatePublicationStmt() *CreatePublicationStmt {
	if x, ok := x.GetNode().(*Node_CreatePublicationStmt); ok {
		return x.CreatePublicationStmt
	}
	return nil
}

func (x *Node) GetAlterPublicationStmt() *AlterPublicationStmt {
	if x, ok := x.GetNode().(*Node_AlterPublicationStmt); ok {
		return x.AlterPublicationStmt
	}
	return nil
}

func (x *Node) GetCreateSubscriptionStmt() *CreateSubscriptionStmt {
	if x, ok := x.GetNode().(*Node_CreateSubscriptionStmt); ok {
		return x.CreateSubscriptionStmt
	}
	return nil
}

func (x *Node) GetAlterSubscriptionStmt() *AlterSubscriptionStmt {
	if x, ok := x.GetNode().(*Node_AlterSubscriptionStmt); ok {
		return x.AlterSubscriptionStmt
	}
	return nil
}

func (x *Node) GetDropSubscriptionStmt() *DropSubscriptionStmt {
	if x, ok := x.GetNode().(*Node_DropSubscriptionStmt); ok {
		return x.DropSubscriptionStmt
	}
	return nil
}

func (x *Node) GetCreateStatsStmt() *CreateStatsStmt {
	if x, ok := x.GetNode().(*Node_CreateStatsStmt); ok {
		return x.CreateStatsStmt
	}
	return nil
}

func (x *Node) GetAlterCollationStmt() *AlterCollationStmt {
	if x, ok := x.GetNode().(*Node_AlterCollationStmt); ok {
		return x.AlterCollationStmt
	}
	return nil
}

func (x *Node) GetCallStmt() *CallStmt {
	if x, ok := x.GetNode().(*Node_CallStmt); ok {
		return x.CallStmt
	}
	return nil
}

func (x *Node) GetAlterStatsStmt() *AlterStatsStmt {
	if x, ok := x.GetNode().(*Node_AlterStatsStmt); ok {
		return x.AlterStatsStmt
	}
	return nil
}

func (x *Node) GetAExpr() *A_Expr {
	if x, ok := x.GetNode().(*Node_AExpr); ok {
		return x.AExpr
	}
	return nil
}

func (x *Node) GetColumnRef() *ColumnRef {
	if x, ok := x.GetNode().(*Node_ColumnRef); ok {
		return x.ColumnRef
	}
	return nil
}

func (x *Node) GetParamRef() *ParamRef {
	if x, ok := x.GetNode().(*Node_ParamRef); ok {
		return x.ParamRef
	}
	return nil
}

func (x *Node) GetFuncCall() *FuncCall {
	if x, ok := x.GetNode().(*Node_FuncCall); ok {
		return x.FuncCall
	}
	return nil
}

func (x *Node) GetAStar() *A_Star {
	if x, ok := x.GetNode().(*Node_AStar); ok {
		return x.AStar
	}
	return nil
}

func (x *Node) GetAIndices() *A_Indices {
	if x, ok := x.GetNode().(*Node_AIndices); ok {
		return x.AIndices
	}
	return nil
}

func (x *Node) GetAIndirection() *A_Indirection {
	if x, ok := x.GetNode().(*Node_AIndirection); ok {
		return x.AIndirection
	}
	return nil
}

func (x *Node) GetAArrayExpr() *A_ArrayExpr {
	if x, ok := x.GetNode().(*Node_AArrayExpr); ok {
		return x.AArrayExpr
	}
	return nil
}

func (x *Node) GetResTarget() *ResTarget {
	if x, ok := x.GetNode().(*Node_ResTarget); ok {
		return x.ResTarget
	}
	return nil
}

func (x *Node) GetMultiAssignRef() *MultiAssignRef {
	if x, ok := x.GetNode().(*Node_MultiAssignRef); ok {
		return x.MultiAssignRef
	}
	return nil
}

func (x *Node) GetTypeCast() *TypeCast {
	if x, ok := x.GetNode().(*Node_TypeCast); ok {
		return x.TypeCast
	}
	return nil
}

func (x *Node) GetCollateClause() *CollateClause {
	if x, ok := x.GetNode().(*Node_CollateClause); ok {
		return x.CollateClause
	}
	return nil
}

func (x *Node) GetSortBy() *SortBy {
	if x, ok := x.GetNode().(*Node_SortBy); ok {
		return x.SortBy
	}
	return nil
}

func (x *Node) GetWindowDef() *WindowDef {
	if x, ok := x.GetNode().(*Node_WindowDef); ok {
		return x.WindowDef
	}
	return nil
}

func (x *Node) GetRangeSubselect() *RangeSubselect {
	if x, ok := x.GetNode().(*Node_RangeSubselect); ok {
		return x.RangeSubselect
	}
	return nil
}

func (x *Node) GetRangeFunction() *RangeFunction {
	if x, ok := x.GetNode().(*Node_RangeFunction); ok {
		return x.RangeFunction
	}
	return nil
}

func (x *Node) GetRangeTableSample() *RangeTableSample {
	if x, ok := x.GetNode().(*Node_RangeTableSample); ok {
		return x.RangeTableSample
	}
	return nil
}

func (x *Node) GetRangeTableFunc() *RangeTableFunc {
	if x, ok := x.GetNode().(*Node_RangeTableFunc); ok {
		return x.RangeTableFunc
	}
	return nil
}

func (x *Node) GetRangeTableFuncCol() *RangeTableFuncCol {
	if x, ok := x.GetNode().(*Node_RangeTableFuncCol); ok {
		return x.RangeTableFuncCol
	}
	return nil
}

func (x *Node) GetTypeName() *TypeName {
	if x, ok := x.GetNode().(*Node_TypeName); ok {
		return x.TypeName
	}
	return nil
}

func (x *Node) GetColumnDef() *ColumnDef {
	if x, ok := x.GetNode().(*Node_ColumnDef); ok {
		return x.ColumnDef
	}
	return nil
}

func (x *Node) GetIndexElem() *IndexElem {
	if x, ok := x.GetNode().(*Node_IndexElem); ok {
		return x.IndexElem
	}
	return nil
}

func (x *Node) GetStatsElem() *StatsElem {
	if x, ok := x.GetNode().(*Node_StatsElem); ok {
		return x.StatsElem
	}
	return nil
}

func (x *Node) GetConstraint() *Constraint {
	if x, ok := x.GetNode().(*Node_Constraint); ok {
		return x.Constraint
	}
	return nil
}

func (x *Node) GetDefElem() *DefElem {
	if x, ok := x.GetNode().(*Node_DefElem); ok {
		return x.DefElem
	}
	return nil
}

func (x *Node) GetRangeTblEntry() *RangeTblEntry {
	if x, ok := x.GetNode().(*Node_RangeTblEntry); ok {
		return x.RangeTblEntry
	}
	return nil
}

func (x *Node) GetRangeTblFunction() *RangeTblFunction {
	if x, ok := x.GetNode().(*Node_RangeTblFunction); ok {
		return x.RangeTblFunction
	}
	return nil
}

func (x *Node) GetTableSampleClause() *TableSampleClause {
	if x, ok := x.GetNode().(*Node_TableSampleClause); ok {
		return x.TableSampleClause
	}
	return nil
}

func (x *Node) GetWithCheckOption() *WithCheckOption {
	if x, ok := x.GetNode().(*Node_WithCheckOption); ok {
		return x.WithCheckOption
	}
	return nil
}

func (x *Node) GetSortGroupClause() *SortGroupClause {
	if x, ok := x.GetNode().(*Node_SortGroupClause); ok {
		return x.SortGroupClause
	}
	return nil
}

func (x *Node) GetGroupingSet() *GroupingSet {
	if x, ok := x.GetNode().(*Node_GroupingSet); ok {
		return x.GroupingSet
	}
	return nil
}

func (x *Node) GetWindowClause() *WindowClause {
	if x, ok := x.GetNode().(*Node_WindowClause); ok {
		return x.WindowClause
	}
	return nil
}

func (x *Node) GetObjectWithArgs() *ObjectWithArgs {
	if x, ok := x.GetNode().(*Node_ObjectWithArgs); ok {
		return x.ObjectWithArgs
	}
	return nil
}

func (x *Node) GetAccessPriv() *AccessPriv {
	if x, ok := x.GetNode().(*Node_AccessPriv); ok {
		return x.AccessPriv
	}
	return nil
}

func (x *Node) GetCreateOpClassItem() *CreateOpClassItem {
	if x, ok := x.GetNode().(*Node_CreateOpClassItem); ok {
		return x.CreateOpClassItem
	}
	return nil
}

func (x *Node) GetTableLikeClause() *TableLikeClause {
	if x, ok := x.GetNode().(*Node_TableLikeClause); ok {
		return x.TableLikeClause
	}
	return nil
}

func (x *Node) GetFunctionParameter() *FunctionParameter {
	if x, ok := x.GetNode().(*Node_FunctionParameter); ok {
		return x.FunctionParameter
	}
	return nil
}

func (x *Node) GetLockingClause() *LockingClause {
	if x, ok := x.GetNode().(*Node_LockingClause); ok {
		return x.LockingClause
	}
	return nil
}

func (x *Node) GetRowMarkClause() *RowMarkClause {
	if x, ok := x.GetNode().(*Node_RowMarkClause); ok {
		return x.RowMarkClause
	}
	return nil
}

func (x *Node) GetXmlSerialize() *XmlSerialize {
	if x, ok := x.GetNode().(*Node_XmlSerialize); ok {
		return x.XmlSerialize
	}
	return nil
}

func (x *Node) GetWithClause() *WithClause {
	if x, ok := x.GetNode().(*Node_WithClause); ok {
		return x.WithClause
	}
	return nil
}

func (x *Node) GetInferClause() *InferClause {
	if x, ok := x.GetNode().(*Node_InferClause); ok {
		return x.InferClause
	}
	return nil
}

func (x *Node) GetOnConflictClause() *OnConflictClause {
	if x, ok := x.GetNode().(*Node_OnConflictClause); ok {
		return x.OnConflictClause
	}
	return nil
}

func (x *Node) GetCtesearchClause() *CTESearchClause {
	if x, ok := x.GetNode().(*Node_CtesearchClause); ok {
		return x.CtesearchClause
	}
	return nil
}

func (x *Node) GetCtecycleClause() *CTECycleClause {
	if x, ok := x.GetNode().(*Node_CtecycleClause); ok {
		return x.CtecycleClause
	}
	return nil
}

func (x *Node) GetCommonTableExpr() *CommonTableExpr {
	if x, ok := x.GetNode().(*Node_CommonTableExpr); ok {
		return x.CommonTableExpr
	}
	return nil
}

func (x *Node) GetMergeWhenClause() *MergeWhenClause {
	if x, ok := x.GetNode().(*Node_MergeWhenClause); ok {
		return x.MergeWhenClause
	}
	return nil
}

func (x *Node) GetRoleSpec() *RoleSpec {
	if x, ok := x.GetNode().(*Node_RoleSpec); ok {
		return x.RoleSpec
	}
	return nil
}

func (x *Node) GetTriggerTransition() *TriggerTransition {
	if x, ok := x.GetNode().(*Node_TriggerTransition); ok {
		return x.TriggerTransition
	}
	return nil
}

func (x *Node) GetPartitionElem() *PartitionElem {
	if x, ok := x.GetNode().(*Node_PartitionElem); ok {
		return x.PartitionElem
	}
	return nil
}

func (x *Node) GetPartitionSpec() *PartitionSpec {
	if x, ok := x.GetNode().(*Node_PartitionSpec); ok {
		return x.PartitionSpec
	}
	return nil
}

func (x *Node) GetPartitionBoundSpec() *PartitionBoundSpec {
	if x, ok := x.GetNode().(*Node_PartitionBoundSpec); ok {
		return x.PartitionBoundSpec
	}
	return nil
}

func (x *Node) GetPartitionRangeDatum() *PartitionRangeDatum {
	if x, ok := x.GetNode().(*Node_PartitionRangeDatum); ok {
		return x.PartitionRangeDatum
	}
	return nil
}

func (x *Node) GetPartitionCmd() *PartitionCmd {
	if x, ok := x.GetNode().(*Node_PartitionCmd); ok {
		return x.PartitionCmd
	}
	return nil
}

func (x *Node) GetVacuumRelation() *VacuumRelation {
	if x, ok := x.GetNode().(*Node_VacuumRelation); ok {
		return x.VacuumRelation
	}
	return nil
}

func (x *Node) GetPublicationObjSpec() *PublicationObjSpec {
	if x, ok := x.GetNode().(*Node_PublicationObjSpec); ok {
		return x.PublicationObjSpec
	}
	return nil
}

func (x *Node) GetPublicationTable() *PublicationTable {
	if x, ok := x.GetNode().(*Node_PublicationTable); ok {
		return x.PublicationTable
	}
	return nil
}

func (x *Node) GetInlineCodeBlock() *InlineCodeBlock {
	if x, ok := x.GetNode().(*Node_InlineCodeBlock); ok {
		return x.InlineCodeBlock
	}
	return nil
}

func (x *Node) GetCallContext() *CallContext {
	if x, ok := x.GetNode().(*Node_CallContext); ok {
		return x.CallContext
	}
	return nil
}

func (x *Node) GetInteger() *Integer {
	if x, ok := x.GetNode().(*Node_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Node) GetFloat() *Float {
	if x, ok := x.GetNode().(*Node_Float); ok {
		return x.Float
	}
	return nil
}

func (x *Node) GetBoolean() *Boolean {
	if x, ok := x.GetNode().(*Node_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Node) GetString_() *String {
	if x, ok := x.GetNode().(*Node_String_); ok {
		return x.String_
	}
	return nil
}

func (x *Node) GetBitString() *BitString {
	if x, ok := x.GetNode().(*Node_BitString); ok {
		return x.BitString
	}
	return nil
}

func (x *Node) GetList() *List {
	if x, ok := x.GetNode().(*Node_List); ok {
		return x.List
	}
	return nil
}

func (x *Node) GetIntList() *IntList {
	if x, ok := x.GetNode().(*Node_IntList); ok {
		return x.IntList
	}
	return nil
}

func (x *Node) GetOidList() *OidList {
	if x, ok := x.GetNode().(*Node_OidList); ok {
		return x.OidList
	}
	return nil
}

func (x *Node) GetAConst() *A_Const {
	if x, ok := x.GetNode().(*Node_AConst); ok {
		return x.AConst
	}
	return nil
}

type isNode_Node interface {
	isNode_Node()
}

type Node_Alias struct {
	Alias *Alias `protobuf:"bytes,1,opt,name=alias,json=Alias,proto3,oneof"`
}

type Node_RangeVar struct {
	RangeVar *RangeVar `protobuf:"bytes,2,opt,name=range_var,json=RangeVar,proto3,oneof"`
}

type Node_TableFunc struct {
	TableFunc *TableFunc `protobuf:"bytes,3,opt,name=table_func,json=TableFunc,proto3,oneof"`
}

type Node_Var struct {
	Var *Var `protobuf:"bytes,4,opt,name=var,json=Var,proto3,oneof"`
}

type Node_Param struct {
	Param *Param `protobuf:"bytes,5,opt,name=param,json=Param,proto3,oneof"`
}

type Node_Aggref struct {
	Aggref *Aggref `protobuf:"bytes,6,opt,name=aggref,json=Aggref,proto3,oneof"`
}

type Node_GroupingFunc struct {
	GroupingFunc *GroupingFunc `protobuf:"bytes,7,opt,name=grouping_func,json=GroupingFunc,proto3,oneof"`
}

type Node_WindowFunc struct {
	WindowFunc *WindowFunc `protobuf:"bytes,8,opt,name=window_func,json=WindowFunc,proto3,oneof"`
}

type Node_SubscriptingRef struct {
	SubscriptingRef *SubscriptingRef `protobuf:"bytes,9,opt,name=subscripting_ref,json=SubscriptingRef,proto3,oneof"`
}

type Node_FuncExpr struct {
	FuncExpr *FuncExpr `protobuf:"bytes,10,opt,name=func_expr,json=FuncExpr,proto3,oneof"`
}

type Node_NamedArgExpr struct {
	NamedArgExpr *NamedArgExpr `protobuf:"bytes,11,opt,name=named_arg_expr,json=NamedArgExpr,proto3,oneof"`
}

type Node_OpExpr struct {
	OpExpr *OpExpr `protobuf:"bytes,12,opt,name=op_expr,json=OpExpr,proto3,oneof"`
}

type Node_DistinctExpr struct {
	DistinctExpr *DistinctExpr `protobuf:"bytes,13,opt,name=distinct_expr,json=DistinctExpr,proto3,oneof"`
}

type Node_NullIfExpr struct {
	NullIfExpr *NullIfExpr `protobuf:"bytes,14,opt,name=null_if_expr,json=NullIfExpr,proto3,oneof"`
}

type Node_ScalarArrayOpExpr struct {
	ScalarArrayOpExpr *ScalarArrayOpExpr `protobuf:"bytes,15,opt,name=scalar_array_op_expr,json=ScalarArrayOpExpr,proto3,oneof"`
}

type Node_BoolExpr struct {
	BoolExpr *BoolExpr `protobuf:"bytes,16,opt,name=bool_expr,json=BoolExpr,proto3,oneof"`
}

type Node_SubLink struct {
	SubLink *SubLink `protobuf:"bytes,17,opt,name=sub_link,json=SubLink,proto3,oneof"`
}

type Node_SubPlan struct {
	SubPlan *SubPlan `protobuf:"bytes,18,opt,name=sub_plan,json=SubPlan,proto3,oneof"`
}

type Node_AlternativeSubPlan struct {
	AlternativeSubPlan *AlternativeSubPlan `protobuf:"bytes,19,opt,name=alternative_sub_plan,json=AlternativeSubPlan,proto3,oneof"`
}

type Node_FieldSelect struct {
	FieldSelect *FieldSelect `protobuf:"bytes,20,opt,name=field_select,json=FieldSelect,proto3,oneof"`
}

type Node_FieldStore struct {
	FieldStore *FieldStore `protobuf:"bytes,21,opt,name=field_store,json=FieldStore,proto3,oneof"`
}

type Node_RelabelType struct {
	RelabelType *RelabelType `protobuf:"bytes,22,opt,name=relabel_type,json=RelabelType,proto3,oneof"`
}

type Node_CoerceViaIo struct {
	CoerceViaIo *CoerceViaIO `protobuf:"bytes,23,opt,name=coerce_via_io,json=CoerceViaIO,proto3,oneof"`
}

type Node_ArrayCoerceExpr struct {
	ArrayCoerceExpr *ArrayCoerceExpr `protobuf:"bytes,24,opt,name=array_coerce_expr,json=ArrayCoerceExpr,proto3,oneof"`
}

type Node_ConvertRowtypeExpr struct {
	ConvertRowtypeExpr *ConvertRowtypeExpr `protobuf:"bytes,25,opt,name=convert_rowtype_expr,json=ConvertRowtypeExpr,proto3,oneof"`
}

type Node_CollateExpr struct {
	CollateExpr *CollateExpr `protobuf:"bytes,26,opt,name=collate_expr,json=CollateExpr,proto3,oneof"`
}

type Node_CaseExpr struct {
	CaseExpr *CaseExpr `protobuf:"bytes,27,opt,name=case_expr,json=CaseExpr,proto3,oneof"`
}

type Node_CaseWhen struct {
	CaseWhen *CaseWhen `protobuf:"bytes,28,opt,name=case_when,json=CaseWhen,proto3,oneof"`
}

type Node_CaseTestExpr struct {
	CaseTestExpr *CaseTestExpr `protobuf:"bytes,29,opt,name=case_test_expr,json=CaseTestExpr,proto3,oneof"`
}

type Node_ArrayExpr struct {
	ArrayExpr *ArrayExpr `protobuf:"bytes,30,opt,name=array_expr,json=ArrayExpr,proto3,oneof"`
}

type Node_RowExpr struct {
	RowExpr *RowExpr `protobuf:"bytes,31,opt,name=row_expr,json=RowExpr,proto3,oneof"`
}

type Node_RowCompareExpr struct {
	RowCompareExpr *RowCompareExpr `protobuf:"bytes,32,opt,name=row_compare_expr,json=RowCompareExpr,proto3,oneof"`
}

type Node_CoalesceExpr struct {
	CoalesceExpr *CoalesceExpr `protobuf:"bytes,33,opt,name=coalesce_expr,json=CoalesceExpr,proto3,oneof"`
}

type Node_MinMaxExpr struct {
	MinMaxExpr *MinMaxExpr `protobuf:"bytes,34,opt,name=min_max_expr,json=MinMaxExpr,proto3,oneof"`
}

type Node_SqlvalueFunction struct {
	SqlvalueFunction *SQLValueFunction `protobuf:"bytes,35,opt,name=sqlvalue_function,json=SQLValueFunction,proto3,oneof"`
}

type Node_XmlExpr struct {
	XmlExpr *XmlExpr `protobuf:"bytes,36,opt,name=xml_expr,json=XmlExpr,proto3,oneof"`
}

type Node_NullTest struct {
	NullTest *NullTest `protobuf:"bytes,37,opt,name=null_test,json=NullTest,proto3,oneof"`
}

type Node_BooleanTest struct {
	BooleanTest *BooleanTest `protobuf:"bytes,38,opt,name=boolean_test,json=BooleanTest,proto3,oneof"`
}

type Node_CoerceToDomain struct {
	CoerceToDomain *CoerceToDomain `protobuf:"bytes,39,opt,name=coerce_to_domain,json=CoerceToDomain,proto3,oneof"`
}

type Node_CoerceToDomainValue struct {
	CoerceToDomainValue *CoerceToDomainValue `protobuf:"bytes,40,opt,name=coerce_to_domain_value,json=CoerceToDomainValue,proto3,oneof"`
}

type Node_SetToDefault struct {
	SetToDefault *SetToDefault `protobuf:"bytes,41,opt,name=set_to_default,json=SetToDefault,proto3,oneof"`
}

type Node_CurrentOfExpr struct {
	CurrentOfExpr *CurrentOfExpr `protobuf:"bytes,42,opt,name=current_of_expr,json=CurrentOfExpr,proto3,oneof"`
}

type Node_NextValueExpr struct {
	NextValueExpr *NextValueExpr `protobuf:"bytes,43,opt,name=next_value_expr,json=NextValueExpr,proto3,oneof"`
}

type Node_InferenceElem struct {
	InferenceElem *InferenceElem `protobuf:"bytes,44,opt,name=inference_elem,json=InferenceElem,proto3,oneof"`
}

type Node_TargetEntry struct {
	TargetEntry *TargetEntry `protobuf:"bytes,45,opt,name=target_entry,json=TargetEntry,proto3,oneof"`
}

type Node_RangeTblRef struct {
	RangeTblRef *RangeTblRef `protobuf:"bytes,46,opt,name=range_tbl_ref,json=RangeTblRef,proto3,oneof"`
}

type Node_JoinExpr struct {
	JoinExpr *JoinExpr `protobuf:"bytes,47,opt,name=join_expr,json=JoinExpr,proto3,oneof"`
}

type Node_FromExpr struct {
	FromExpr *FromExpr `protobuf:"bytes,48,opt,name=from_expr,json=FromExpr,proto3,oneof"`
}

type Node_OnConflictExpr struct {
	OnConflictExpr *OnConflictExpr `protobuf:"bytes,49,opt,name=on_conflict_expr,json=OnConflictExpr,proto3,oneof"`
}

type Node_IntoClause struct {
	IntoClause *IntoClause `protobuf:"bytes,50,opt,name=into_clause,json=IntoClause,proto3,oneof"`
}

type Node_MergeAction struct {
	MergeAction *MergeAction `protobuf:"bytes,51,opt,name=merge_action,json=MergeAction,proto3,oneof"`
}

type Node_RawStmt struct {
	RawStmt *RawStmt `protobuf:"bytes,52,opt,name=raw_stmt,json=RawStmt,proto3,oneof"`
}

type Node_Query struct {
	Query *Query `protobuf:"bytes,53,opt,name=query,json=Query,proto3,oneof"`
}

type Node_InsertStmt struct {
	InsertStmt *InsertStmt `protobuf:"bytes,54,opt,name=insert_stmt,json=InsertStmt,proto3,oneof"`
}

type Node_DeleteStmt struct {
	DeleteStmt *DeleteStmt `protobuf:"bytes,55,opt,name=delete_stmt,json=DeleteStmt,proto3,oneof"`
}

type Node_UpdateStmt struct {
	UpdateStmt *UpdateStmt `protobuf:"bytes,56,opt,name=update_stmt,json=UpdateStmt,proto3,oneof"`
}

type Node_MergeStmt struct {
	MergeStmt *MergeStmt `protobuf:"bytes,57,opt,name=merge_stmt,json=MergeStmt,proto3,oneof"`
}

type Node_SelectStmt struct {
	SelectStmt *SelectStmt `protobuf:"bytes,58,opt,name=select_stmt,json=SelectStmt,proto3,oneof"`
}

type Node_ReturnStmt struct {
	ReturnStmt *ReturnStmt `protobuf:"bytes,59,opt,name=return_stmt,json=ReturnStmt,proto3,oneof"`
}

type Node_PlassignStmt struct {
	PlassignStmt *PLAssignStmt `protobuf:"bytes,60,opt,name=plassign_stmt,json=PLAssignStmt,proto3,oneof"`
}

type Node_AlterTableStmt struct {
	AlterTableStmt *AlterTableStmt `protobuf:"bytes,61,opt,name=alter_table_stmt,json=AlterTableStmt,proto3,oneof"`
}

type Node_AlterTableCmd struct {
	AlterTableCmd *AlterTableCmd `protobuf:"bytes,62,opt,name=alter_table_cmd,json=AlterTableCmd,proto3,oneof"`
}

type Node_AlterDomainStmt struct {
	AlterDomainStmt *AlterDomainStmt `protobuf:"bytes,63,opt,name=alter_domain_stmt,json=AlterDomainStmt,proto3,oneof"`
}

type Node_SetOperationStmt struct {
	SetOperationStmt *SetOperationStmt `protobuf:"bytes,64,opt,name=set_operation_stmt,json=SetOperationStmt,proto3,oneof"`
}

type Node_GrantStmt struct {
	GrantStmt *GrantStmt `protobuf:"bytes,65,opt,name=grant_stmt,json=GrantStmt,proto3,oneof"`
}

type Node_GrantRoleStmt struct {
	GrantRoleStmt *GrantRoleStmt `protobuf:"bytes,66,opt,name=grant_role_stmt,json=GrantRoleStmt,proto3,oneof"`
}

type Node_AlterDefaultPrivilegesStmt struct {
	AlterDefaultPrivilegesStmt *AlterDefaultPrivilegesStmt `protobuf:"bytes,67,opt,name=alter_default_privileges_stmt,json=AlterDefaultPrivilegesStmt,proto3,oneof"`
}

type Node_ClosePortalStmt struct {
	ClosePortalStmt *ClosePortalStmt `protobuf:"bytes,68,opt,name=close_portal_stmt,json=ClosePortalStmt,proto3,oneof"`
}

type Node_ClusterStmt struct {
	ClusterStmt *ClusterStmt `protobuf:"bytes,69,opt,name=cluster_stmt,json=ClusterStmt,proto3,oneof"`
}

type Node_CopyStmt struct {
	CopyStmt *CopyStmt `protobuf:"bytes,70,opt,name=copy_stmt,json=CopyStmt,proto3,oneof"`
}

type Node_CreateStmt struct {
	CreateStmt *CreateStmt `protobuf:"bytes,71,opt,name=create_stmt,json=CreateStmt,proto3,oneof"`
}

type Node_DefineStmt struct {
	DefineStmt *DefineStmt `protobuf:"bytes,72,opt,name=define_stmt,json=DefineStmt,proto3,oneof"`
}

type Node_DropStmt struct {
	DropStmt *DropStmt `protobuf:"bytes,73,opt,name=drop_stmt,json=DropStmt,proto3,oneof"`
}

type Node_TruncateStmt struct {
	TruncateStmt *TruncateStmt `protobuf:"bytes,74,opt,name=truncate_stmt,json=TruncateStmt,proto3,oneof"`
}

type Node_CommentStmt struct {
	CommentStmt *CommentStmt `protobuf:"bytes,75,opt,name=comment_stmt,json=CommentStmt,proto3,oneof"`
}

type Node_FetchStmt struct {
	FetchStmt *FetchStmt `protobuf:"bytes,76,opt,name=fetch_stmt,json=FetchStmt,proto3,oneof"`
}

type Node_IndexStmt struct {
	IndexStmt *IndexStmt `protobuf:"bytes,77,opt,name=index_stmt,json=IndexStmt,proto3,oneof"`
}

type Node_CreateFunctionStmt struct {
	CreateFunctionStmt *CreateFunctionStmt `protobuf:"bytes,78,opt,name=create_function_stmt,json=CreateFunctionStmt,proto3,oneof"`
}

type Node_AlterFunctionStmt struct {
	AlterFunctionStmt *AlterFunctionStmt `protobuf:"bytes,79,opt,name=alter_function_stmt,json=AlterFunctionStmt,proto3,oneof"`
}

type Node_DoStmt struct {
	DoStmt *DoStmt `protobuf:"bytes,80,opt,name=do_stmt,json=DoStmt,proto3,oneof"`
}

type Node_RenameStmt struct {
	RenameStmt *RenameStmt `protobuf:"bytes,81,opt,name=rename_stmt,json=RenameStmt,proto3,oneof"`
}

type Node_RuleStmt struct {
	RuleStmt *RuleStmt `protobuf:"bytes,82,opt,name=rule_stmt,json=RuleStmt,proto3,oneof"`
}

type Node_NotifyStmt struct {
	NotifyStmt *NotifyStmt `protobuf:"bytes,83,opt,name=notify_stmt,json=NotifyStmt,proto3,oneof"`
}

type Node_ListenStmt struct {
	ListenStmt *ListenStmt `protobuf:"bytes,84,opt,name=listen_stmt,json=ListenStmt,proto3,oneof"`
}

type Node_UnlistenStmt struct {
	UnlistenStmt *UnlistenStmt `protobuf:"bytes,85,opt,name=unlisten_stmt,json=UnlistenStmt,proto3,oneof"`
}

type Node_TransactionStmt struct {
	TransactionStmt *TransactionStmt `protobuf:"bytes,86,opt,name=transaction_stmt,json=TransactionStmt,proto3,oneof"`
}

type Node_ViewStmt struct {
	ViewStmt *ViewStmt `protobuf:"bytes,87,opt,name=view_stmt,json=ViewStmt,proto3,oneof"`
}

type Node_LoadStmt struct {
	LoadStmt *LoadStmt `protobuf:"bytes,88,opt,name=load_stmt,json=LoadStmt,proto3,oneof"`
}

type Node_CreateDomainStmt struct {
	CreateDomainStmt *CreateDomainStmt `protobuf:"bytes,89,opt,name=create_domain_stmt,json=CreateDomainStmt,proto3,oneof"`
}

type Node_CreatedbStmt struct {
	CreatedbStmt *CreatedbStmt `protobuf:"bytes,90,opt,name=createdb_stmt,json=CreatedbStmt,proto3,oneof"`
}

type Node_DropdbStmt struct {
	DropdbStmt *DropdbStmt `protobuf:"bytes,91,opt,name=dropdb_stmt,json=DropdbStmt,proto3,oneof"`
}

type Node_VacuumStmt struct {
	VacuumStmt *VacuumStmt `protobuf:"bytes,92,opt,name=vacuum_stmt,json=VacuumStmt,proto3,oneof"`
}

type Node_ExplainStmt struct {
	ExplainStmt *ExplainStmt `protobuf:"bytes,93,opt,name=explain_stmt,json=ExplainStmt,proto3,oneof"`
}

type Node_CreateTableAsStmt struct {
	CreateTableAsStmt *CreateTableAsStmt `protobuf:"bytes,94,opt,name=create_table_as_stmt,json=CreateTableAsStmt,proto3,oneof"`
}

type Node_CreateSeqStmt struct {
	CreateSeqStmt *CreateSeqStmt `protobuf:"bytes,95,opt,name=create_seq_stmt,json=CreateSeqStmt,proto3,oneof"`
}

type Node_AlterSeqStmt struct {
	AlterSeqStmt *AlterSeqStmt `protobuf:"bytes,96,opt,name=alter_seq_stmt,json=AlterSeqStmt,proto3,oneof"`
}

type Node_VariableSetStmt struct {
	VariableSetStmt *VariableSetStmt `protobuf:"bytes,97,opt,name=variable_set_stmt,json=VariableSetStmt,proto3,oneof"`
}

type Node_VariableShowStmt struct {
	VariableShowStmt *VariableShowStmt `protobuf:"bytes,98,opt,name=variable_show_stmt,json=VariableShowStmt,proto3,oneof"`
}

type Node_DiscardStmt struct {
	DiscardStmt *DiscardStmt `protobuf:"bytes,99,opt,name=discard_stmt,json=DiscardStmt,proto3,oneof"`
}

type Node_CreateTrigStmt struct {
	CreateTrigStmt *CreateTrigStmt `protobuf:"bytes,100,opt,name=create_trig_stmt,json=CreateTrigStmt,proto3,oneof"`
}

type Node_CreatePlangStmt struct {
	CreatePlangStmt *CreatePLangStmt `protobuf:"bytes,101,opt,name=create_plang_stmt,json=CreatePLangStmt,proto3,oneof"`
}

type Node_CreateRoleStmt struct {
	CreateRoleStmt *CreateRoleStmt `protobuf:"bytes,102,opt,name=create_role_stmt,json=CreateRoleStmt,proto3,oneof"`
}

type Node_AlterRoleStmt struct {
	AlterRoleStmt *AlterRoleStmt `protobuf:"bytes,103,opt,name=alter_role_stmt,json=AlterRoleStmt,proto3,oneof"`
}

type Node_DropRoleStmt struct {
	DropRoleStmt *DropRoleStmt `protobuf:"bytes,104,opt,name=drop_role_stmt,json=DropRoleStmt,proto3,oneof"`
}

type Node_LockStmt struct {
	LockStmt *LockStmt `protobuf:"bytes,105,opt,name=lock_stmt,json=LockStmt,proto3,oneof"`
}

type Node_ConstraintsSetStmt struct {
	ConstraintsSetStmt *ConstraintsSetStmt `protobuf:"bytes,106,opt,name=constraints_set_stmt,json=ConstraintsSetStmt,proto3,oneof"`
}

type Node_ReindexStmt struct {
	ReindexStmt *ReindexStmt `protobuf:"bytes,107,opt,name=reindex_stmt,json=ReindexStmt,proto3,oneof"`
}

type Node_CheckPointStmt struct {
	CheckPointStmt *CheckPointStmt `protobuf:"bytes,108,opt,name=check_point_stmt,json=CheckPointStmt,proto3,oneof"`
}

type Node_CreateSchemaStmt struct {
	CreateSchemaStmt *CreateSchemaStmt `protobuf:"bytes,109,opt,name=create_schema_stmt,json=CreateSchemaStmt,proto3,oneof"`
}

type Node_AlterDatabaseStmt struct {
	AlterDatabaseStmt *AlterDatabaseStmt `protobuf:"bytes,110,opt,name=alter_database_stmt,json=AlterDatabaseStmt,proto3,oneof"`
}

type Node_AlterDatabaseRefreshCollStmt struct {
	AlterDatabaseRefreshCollStmt *AlterDatabaseRefreshCollStmt `protobuf:"bytes,111,opt,name=alter_database_refresh_coll_stmt,json=AlterDatabaseRefreshCollStmt,proto3,oneof"`
}

type Node_AlterDatabaseSetStmt struct {
	AlterDatabaseSetStmt *AlterDatabaseSetStmt `protobuf:"bytes,112,opt,name=alter_database_set_stmt,json=AlterDatabaseSetStmt,proto3,oneof"`
}

type Node_AlterRoleSetStmt struct {
	AlterRoleSetStmt *AlterRoleSetStmt `protobuf:"bytes,113,opt,name=alter_role_set_stmt,json=AlterRoleSetStmt,proto3,oneof"`
}

type Node_CreateConversionStmt struct {
	CreateConversionStmt *CreateConversionStmt `protobuf:"bytes,114,opt,name=create_conversion_stmt,json=CreateConversionStmt,proto3,oneof"`
}

type Node_CreateCastStmt struct {
	CreateCastStmt *CreateCastStmt `protobuf:"bytes,115,opt,name=create_cast_stmt,json=CreateCastStmt,proto3,oneof"`
}

type Node_CreateOpClassStmt struct {
	CreateOpClassStmt *CreateOpClassStmt `protobuf:"bytes,116,opt,name=create_op_class_stmt,json=CreateOpClassStmt,proto3,oneof"`
}

type Node_CreateOpFamilyStmt struct {
	CreateOpFamilyStmt *CreateOpFamilyStmt `protobuf:"bytes,117,opt,name=create_op_family_stmt,json=CreateOpFamilyStmt,proto3,oneof"`
}

type Node_AlterOpFamilyStmt struct {
	AlterOpFamilyStmt *AlterOpFamilyStmt `protobuf:"bytes,118,opt,name=alter_op_family_stmt,json=AlterOpFamilyStmt,proto3,oneof"`
}

type Node_PrepareStmt struct {
	PrepareStmt *PrepareStmt `protobuf:"bytes,119,opt,name=prepare_stmt,json=PrepareStmt,proto3,oneof"`
}

type Node_ExecuteStmt struct {
	ExecuteStmt *ExecuteStmt `protobuf:"bytes,120,opt,name=execute_stmt,json=ExecuteStmt,proto3,oneof"`
}

type Node_DeallocateStmt struct {
	DeallocateStmt *DeallocateStmt `protobuf:"bytes,121,opt,name=deallocate_stmt,json=DeallocateStmt,proto3,oneof"`
}

type Node_DeclareCursorStmt struct {
	DeclareCursorStmt *DeclareCursorStmt `protobuf:"bytes,122,opt,name=declare_cursor_stmt,json=DeclareCursorStmt,proto3,oneof"`
}

type Node_CreateTableSpaceStmt struct {
	CreateTableSpaceStmt *CreateTableSpaceStmt `protobuf:"bytes,123,opt,name=create_table_space_stmt,json=CreateTableSpaceStmt,proto3,oneof"`
}

type Node_DropTableSpaceStmt struct {
	DropTableSpaceStmt *DropTableSpaceStmt `protobuf:"bytes,124,opt,name=drop_table_space_stmt,json=DropTableSpaceStmt,proto3,oneof"`
}

type Node_AlterObjectDependsStmt struct {
	AlterObjectDependsStmt *AlterObjectDependsStmt `protobuf:"bytes,125,opt,name=alter_object_depends_stmt,json=AlterObjectDependsStmt,proto3,oneof"`
}

type Node_AlterObjectSchemaStmt struct {
	AlterObjectSchemaStmt *AlterObjectSchemaStmt `protobuf:"bytes,126,opt,name=alter_object_schema_stmt,json=AlterObjectSchemaStmt,proto3,oneof"`
}

type Node_AlterOwnerStmt struct {
	AlterOwnerStmt *AlterOwnerStmt `protobuf:"bytes,127,opt,name=alter_owner_stmt,json=AlterOwnerStmt,proto3,oneof"`
}

type Node_AlterOperatorStmt struct {
	AlterOperatorStmt *AlterOperatorStmt `protobuf:"bytes,128,opt,name=alter_operator_stmt,json=AlterOperatorStmt,proto3,oneof"`
}

type Node_AlterTypeStmt struct {
	AlterTypeStmt *AlterTypeStmt `protobuf:"bytes,129,opt,name=alter_type_stmt,json=AlterTypeStmt,proto3,oneof"`
}

type Node_DropOwnedStmt struct {
	DropOwnedStmt *DropOwnedStmt `protobuf:"bytes,130,opt,name=drop_owned_stmt,json=DropOwnedStmt,proto3,oneof"`
}

type Node_ReassignOwnedStmt struct {
	ReassignOwnedStmt *ReassignOwnedStmt `protobuf:"bytes,131,opt,name=reassign_owned_stmt,json=ReassignOwnedStmt,proto3,oneof"`
}

type Node_CompositeTypeStmt struct {
	CompositeTypeStmt *CompositeTypeStmt `protobuf:"bytes,132,opt,name=composite_type_stmt,json=CompositeTypeStmt,proto3,oneof"`
}

type Node_CreateEnumStmt struct {
	CreateEnumStmt *CreateEnumStmt `protobuf:"bytes,133,opt,name=create_enum_stmt,json=CreateEnumStmt,proto3,oneof"`
}

type Node_CreateRangeStmt struct {
	CreateRangeStmt *CreateRangeStmt `protobuf:"bytes,134,opt,name=create_range_stmt,json=CreateRangeStmt,proto3,oneof"`
}

type Node_AlterEnumStmt struct {
	AlterEnumStmt *AlterEnumStmt `protobuf:"bytes,135,opt,name=alter_enum_stmt,json=AlterEnumStmt,proto3,oneof"`
}

type Node_AlterTsdictionaryStmt struct {
	AlterTsdictionaryStmt *AlterTSDictionaryStmt `protobuf:"bytes,136,opt,name=alter_tsdictionary_stmt,json=AlterTSDictionaryStmt,proto3,oneof"`
}

type Node_AlterTsconfigurationStmt struct {
	AlterTsconfigurationStmt *AlterTSConfigurationStmt `protobuf:"bytes,137,opt,name=alter_tsconfiguration_stmt,json=AlterTSConfigurationStmt,proto3,oneof"`
}

type Node_CreateFdwStmt struct {
	CreateFdwStmt *CreateFdwStmt `protobuf:"bytes,138,opt,name=create_fdw_stmt,json=CreateFdwStmt,proto3,oneof"`
}

type Node_AlterFdwStmt struct {
	AlterFdwStmt *AlterFdwStmt `protobuf:"bytes,139,opt,name=alter_fdw_stmt,json=AlterFdwStmt,proto3,oneof"`
}

type Node_CreateForeignServerStmt struct {
	CreateForeignServerStmt *CreateForeignServerStmt `protobuf:"bytes,140,opt,name=create_foreign_server_stmt,json=CreateForeignServerStmt,proto3,oneof"`
}

type Node_AlterForeignServerStmt struct {
	AlterForeignServerStmt *AlterForeignServerStmt `protobuf:"bytes,141,opt,name=alter_foreign_server_stmt,json=AlterForeignServerStmt,proto3,oneof"`
}

type Node_CreateUserMappingStmt struct {
	CreateUserMappingStmt *CreateUserMappingStmt `protobuf:"bytes,142,opt,name=create_user_mapping_stmt,json=CreateUserMappingStmt,proto3,oneof"`
}

type Node_AlterUserMappingStmt struct {
	AlterUserMappingStmt *AlterUserMappingStmt `protobuf:"bytes,143,opt,name=alter_user_mapping_stmt,json=AlterUserMappingStmt,proto3,oneof"`
}

type Node_DropUserMappingStmt struct {
	DropUserMappingStmt *DropUserMappingStmt `protobuf:"bytes,144,opt,name=drop_user_mapping_stmt,json=DropUserMappingStmt,proto3,oneof"`
}

type Node_AlterTableSpaceOptionsStmt struct {
	AlterTableSpaceOptionsStmt *AlterTableSpaceOptionsStmt `protobuf:"bytes,145,opt,name=alter_table_space_options_stmt,json=AlterTableSpaceOptionsStmt,proto3,oneof"`
}

type Node_AlterTableMoveAllStmt struct {
	AlterTableMoveAllStmt *AlterTableMoveAllStmt `protobuf:"bytes,146,opt,name=alter_table_move_all_stmt,json=AlterTableMoveAllStmt,proto3,oneof"`
}

type Node_SecLabelStmt struct {
	SecLabelStmt *SecLabelStmt `protobuf:"bytes,147,opt,name=sec_label_stmt,json=SecLabelStmt,proto3,oneof"`
}

type Node_CreateForeignTableStmt struct {
	CreateForeignTableStmt *CreateForeignTableStmt `protobuf:"bytes,148,opt,name=create_foreign_table_stmt,json=CreateForeignTableStmt,proto3,oneof"`
}

type Node_ImportForeignSchemaStmt struct {
	ImportForeignSchemaStmt *ImportForeignSchemaStmt `protobuf:"bytes,149,opt,name=import_foreign_schema_stmt,json=ImportForeignSchemaStmt,proto3,oneof"`
}

type Node_CreateExtensionStmt struct {
	CreateExtensionStmt *CreateExtensionStmt `protobuf:"bytes,150,opt,name=create_extension_stmt,json=CreateExtensionStmt,proto3,oneof"`
}

type Node_AlterExtensionStmt struct {
	AlterExtensionStmt *AlterExtensionStmt `protobuf:"bytes,151,opt,name=alter_extension_stmt,json=AlterExtensionStmt,proto3,oneof"`
}

type Node_AlterExtensionContentsStmt struct {
	AlterExtensionContentsStmt *AlterExtensionContentsStmt `protobuf:"bytes,152,opt,name=alter_extension_contents_stmt,json=AlterExtensionContentsStmt,proto3,oneof"`
}

type Node_CreateEventTrigStmt struct {
	CreateEventTrigStmt *CreateEventTrigStmt `protobuf:"bytes,153,opt,name=create_event_trig_stmt,json=CreateEventTrigStmt,proto3,oneof"`
}

type Node_AlterEventTrigStmt struct {
	AlterEventTrigStmt *AlterEventTrigStmt `protobuf:"bytes,154,opt,name=alter_event_trig_stmt,json=AlterEventTrigStmt,proto3,oneof"`
}

type Node_RefreshMatViewStmt struct {
	RefreshMatViewStmt *RefreshMatViewStmt `protobuf:"bytes,155,opt,name=refresh_mat_view_stmt,json=RefreshMatViewStmt,proto3,oneof"`
}

type Node_ReplicaIdentityStmt struct {
	ReplicaIdentityStmt *ReplicaIdentityStmt `protobuf:"bytes,156,opt,name=replica_identity_stmt,json=ReplicaIdentityStmt,proto3,oneof"`
}

type Node_AlterSystemStmt struct {
	AlterSystemStmt *AlterSystemStmt `protobuf:"bytes,157,opt,name=alter_system_stmt,json=AlterSystemStmt,proto3,oneof"`
}

type Node_CreatePolicyStmt struct {
	CreatePolicyStmt *CreatePolicyStmt `protobuf:"bytes,158,opt,name=create_policy_stmt,json=CreatePolicyStmt,proto3,oneof"`
}

type Node_AlterPolicyStmt struct {
	AlterPolicyStmt *AlterPolicyStmt `protobuf:"bytes,159,opt,name=alter_policy_stmt,json=AlterPolicyStmt,proto3,oneof"`
}

type Node_CreateTransformStmt struct {
	CreateTransformStmt *CreateTransformStmt `protobuf:"bytes,160,opt,name=create_transform_stmt,json=CreateTransformStmt,proto3,oneof"`
}

type Node_CreateAmStmt struct {
	CreateAmStmt *CreateAmStmt `protobuf:"bytes,161,opt,name=create_am_stmt,json=CreateAmStmt,proto3,oneof"`
}

type Node_CreatePublicationStmt struct {
	CreatePublicationStmt *CreatePublicationStmt `protobuf:"bytes,162,opt,name=create_publication_stmt,json=CreatePublicationStmt,proto3,oneof"`
}

type Node_AlterPublicationStmt struct {
	AlterPublicationStmt *AlterPublicationStmt `protobuf:"bytes,163,opt,name=alter_publication_stmt,json=AlterPublicationStmt,proto3,oneof"`
}

type Node_CreateSubscriptionStmt struct {
	CreateSubscriptionStmt *CreateSubscriptionStmt `protobuf:"bytes,164,opt,name=create_subscription_stmt,json=CreateSubscriptionStmt,proto3,oneof"`
}

type Node_AlterSubscriptionStmt struct {
	AlterSubscriptionStmt *AlterSubscriptionStmt `protobuf:"bytes,165,opt,name=alter_subscription_stmt,json=AlterSubscriptionStmt,proto3,oneof"`
}

type Node_DropSubscriptionStmt struct {
	DropSubscriptionStmt *DropSubscriptionStmt `protobuf:"bytes,166,opt,name=drop_subscription_stmt,json=DropSubscriptionStmt,proto3,oneof"`
}

type Node_CreateStatsStmt struct {
	CreateStatsStmt *CreateStatsStmt `protobuf:"bytes,167,opt,name=create_stats_stmt,json=CreateStatsStmt,proto3,oneof"`
}

type Node_AlterCollationStmt struct {
	AlterCollationStmt *AlterCollationStmt `protobuf:"bytes,168,opt,name=alter_collation_stmt,json=AlterCollationStmt,proto3,oneof"`
}

type Node_CallStmt struct {
	CallStmt *CallStmt `protobuf:"bytes,169,opt,name=call_stmt,json=CallStmt,proto3,oneof"`
}

type Node_AlterStatsStmt struct {
	AlterStatsStmt *AlterStatsStmt `protobuf:"bytes,170,opt,name=alter_stats_stmt,json=AlterStatsStmt,proto3,oneof"`
}

type Node_AExpr struct {
	AExpr *A_Expr `protobuf:"bytes,171,opt,name=a_expr,json=A_Expr,proto3,oneof"`
}

type Node_ColumnRef struct {
	ColumnRef *ColumnRef `protobuf:"bytes,172,opt,name=column_ref,json=ColumnRef,proto3,oneof"`
}

type Node_ParamRef struct {
	ParamRef *ParamRef `protobuf:"bytes,173,opt,name=param_ref,json=ParamRef,proto3,oneof"`
}

type Node_FuncCall struct {
	FuncCall *FuncCall `protobuf:"bytes,174,opt,name=func_call,json=FuncCall,proto3,oneof"`
}

type Node_AStar struct {
	AStar *A_Star `protobuf:"bytes,175,opt,name=a_star,json=A_Star,proto3,oneof"`
}

type Node_AIndices struct {
	AIndices *A_Indices `protobuf:"bytes,176,opt,name=a_indices,json=A_Indices,proto3,oneof"`
}

type Node_AIndirection struct {
	AIndirection *A_Indirection `protobuf:"bytes,177,opt,name=a_indirection,json=A_Indirection,proto3,oneof"`
}

type Node_AArrayExpr struct {
	AArrayExpr *A_ArrayExpr `protobuf:"bytes,178,opt,name=a_array_expr,json=A_ArrayExpr,proto3,oneof"`
}

type Node_ResTarget struct {
	ResTarget *ResTarget `protobuf:"bytes,179,opt,name=res_target,json=ResTarget,proto3,oneof"`
}

type Node_MultiAssignRef struct {
	MultiAssignRef *MultiAssignRef `protobuf:"bytes,180,opt,name=multi_assign_ref,json=MultiAssignRef,proto3,oneof"`
}

type Node_TypeCast struct {
	TypeCast *TypeCast `protobuf:"bytes,181,opt,name=type_cast,json=TypeCast,proto3,oneof"`
}

type Node_CollateClause struct {
	CollateClause *CollateClause `protobuf:"bytes,182,opt,name=collate_clause,json=CollateClause,proto3,oneof"`
}

type Node_SortBy struct {
	SortBy *SortBy `protobuf:"bytes,183,opt,name=sort_by,json=SortBy,proto3,oneof"`
}

type Node_WindowDef struct {
	WindowDef *WindowDef `protobuf:"bytes,184,opt,name=window_def,json=WindowDef,proto3,oneof"`
}

type Node_RangeSubselect struct {
	RangeSubselect *RangeSubselect `protobuf:"bytes,185,opt,name=range_subselect,json=RangeSubselect,proto3,oneof"`
}

type Node_RangeFunction struct {
	RangeFunction *RangeFunction `protobuf:"bytes,186,opt,name=range_function,json=RangeFunction,proto3,oneof"`
}

type Node_RangeTableSample struct {
	RangeTableSample *RangeTableSample `protobuf:"bytes,187,opt,name=range_table_sample,json=RangeTableSample,proto3,oneof"`
}

type Node_RangeTableFunc struct {
	RangeTableFunc *RangeTableFunc `protobuf:"bytes,188,opt,name=range_table_func,json=RangeTableFunc,proto3,oneof"`
}

type Node_RangeTableFuncCol struct {
	RangeTableFuncCol *RangeTableFuncCol `protobuf:"bytes,189,opt,name=range_table_func_col,json=RangeTableFuncCol,proto3,oneof"`
}

type Node_TypeName struct {
	TypeName *TypeName `protobuf:"bytes,190,opt,name=type_name,json=TypeName,proto3,oneof"`
}

type Node_ColumnDef struct {
	ColumnDef *ColumnDef `protobuf:"bytes,191,opt,name=column_def,json=ColumnDef,proto3,oneof"`
}

type Node_IndexElem struct {
	IndexElem *IndexElem `protobuf:"bytes,192,opt,name=index_elem,json=IndexElem,proto3,oneof"`
}

type Node_StatsElem struct {
	StatsElem *StatsElem `protobuf:"bytes,193,opt,name=stats_elem,json=StatsElem,proto3,oneof"`
}

type Node_Constraint struct {
	Constraint *Constraint `protobuf:"bytes,194,opt,name=constraint,json=Constraint,proto3,oneof"`
}

type Node_DefElem struct {
	DefElem *DefElem `protobuf:"bytes,195,opt,name=def_elem,json=DefElem,proto3,oneof"`
}

type Node_RangeTblEntry struct {
	RangeTblEntry *RangeTblEntry `protobuf:"bytes,196,opt,name=range_tbl_entry,json=RangeTblEntry,proto3,oneof"`
}

type Node_RangeTblFunction struct {
	RangeTblFunction *RangeTblFunction `protobuf:"bytes,197,opt,name=range_tbl_function,json=RangeTblFunction,proto3,oneof"`
}

type Node_TableSampleClause struct {
	TableSampleClause *TableSampleClause `protobuf:"bytes,198,opt,name=table_sample_clause,json=TableSampleClause,proto3,oneof"`
}

type Node_WithCheckOption struct {
	WithCheckOption *WithCheckOption `protobuf:"bytes,199,opt,name=with_check_option,json=WithCheckOption,proto3,oneof"`
}

type Node_SortGroupClause struct {
	SortGroupClause *SortGroupClause `protobuf:"bytes,200,opt,name=sort_group_clause,json=SortGroupClause,proto3,oneof"`
}

type Node_GroupingSet struct {
	GroupingSet *GroupingSet `protobuf:"bytes,201,opt,name=grouping_set,json=GroupingSet,proto3,oneof"`
}

type Node_WindowClause struct {
	WindowClause *WindowClause `protobuf:"bytes,202,opt,name=window_clause,json=WindowClause,proto3,oneof"`
}

type Node_ObjectWithArgs struct {
	ObjectWithArgs *ObjectWithArgs `protobuf:"bytes,203,opt,name=object_with_args,json=ObjectWithArgs,proto3,oneof"`
}

type Node_AccessPriv struct {
	AccessPriv *AccessPriv `protobuf:"bytes,204,opt,name=access_priv,json=AccessPriv,proto3,oneof"`
}

type Node_CreateOpClassItem struct {
	CreateOpClassItem *CreateOpClassItem `protobuf:"bytes,205,opt,name=create_op_class_item,json=CreateOpClassItem,proto3,oneof"`
}

type Node_TableLikeClause struct {
	TableLikeClause *TableLikeClause `protobuf:"bytes,206,opt,name=table_like_clause,json=TableLikeClause,proto3,oneof"`
}

type Node_FunctionParameter struct {
	FunctionParameter *FunctionParameter `protobuf:"bytes,207,opt,name=function_parameter,json=FunctionParameter,proto3,oneof"`
}

type Node_LockingClause struct {
	LockingClause *LockingClause `protobuf:"bytes,208,opt,name=locking_clause,json=LockingClause,proto3,oneof"`
}

type Node_RowMarkClause struct {
	RowMarkClause *RowMarkClause `protobuf:"bytes,209,opt,name=row_mark_clause,json=RowMarkClause,proto3,oneof"`
}

type Node_XmlSerialize struct {
	XmlSerialize *XmlSerialize `protobuf:"bytes,210,opt,name=xml_serialize,json=XmlSerialize,proto3,oneof"`
}

type Node_WithClause struct {
	WithClause *WithClause `protobuf:"bytes,211,opt,name=with_clause,json=WithClause,proto3,oneof"`
}

type Node_InferClause struct {
	InferClause *InferClause `protobuf:"bytes,212,opt,name=infer_clause,json=InferClause,proto3,oneof"`
}

type Node_OnConflictClause struct {
	OnConflictClause *OnConflictClause `protobuf:"bytes,213,opt,name=on_conflict_clause,json=OnConflictClause,proto3,oneof"`
}

type Node_CtesearchClause struct {
	CtesearchClause *CTESearchClause `protobuf:"bytes,214,opt,name=ctesearch_clause,json=CTESearchClause,proto3,oneof"`
}

type Node_CtecycleClause struct {
	CtecycleClause *CTECycleClause `protobuf:"bytes,215,opt,name=ctecycle_clause,json=CTECycleClause,proto3,oneof"`
}

type Node_CommonTableExpr struct {
	CommonTableExpr *CommonTableExpr `protobuf:"bytes,216,opt,name=common_table_expr,json=CommonTableExpr,proto3,oneof"`
}

type Node_MergeWhenClause struct {
	MergeWhenClause *MergeWhenClause `protobuf:"bytes,217,opt,name=merge_when_clause,json=MergeWhenClause,proto3,oneof"`
}

type Node_RoleSpec struct {
	RoleSpec *RoleSpec `protobuf:"bytes,218,opt,name=role_spec,json=RoleSpec,proto3,oneof"`
}

type Node_TriggerTransition struct {
	TriggerTransition *TriggerTransition `protobuf:"bytes,219,opt,name=trigger_transition,json=TriggerTransition,proto3,oneof"`
}

type Node_PartitionElem struct {
	PartitionElem *PartitionElem `protobuf:"bytes,220,opt,name=partition_elem,json=PartitionElem,proto3,oneof"`
}

type Node_PartitionSpec struct {
	PartitionSpec *PartitionSpec `protobuf:"bytes,221,opt,name=partition_spec,json=PartitionSpec,proto3,oneof"`
}

type Node_PartitionBoundSpec struct {
	PartitionBoundSpec *PartitionBoundSpec `protobuf:"bytes,222,opt,name=partition_bound_spec,json=PartitionBoundSpec,proto3,oneof"`
}

type Node_PartitionRangeDatum struct {
	PartitionRangeDatum *PartitionRangeDatum `protobuf:"bytes,223,opt,name=partition_range_datum,json=PartitionRangeDatum,proto3,oneof"`
}

type Node_PartitionCmd struct {
	PartitionCmd *PartitionCmd `protobuf:"bytes,224,opt,name=partition_cmd,json=PartitionCmd,proto3,oneof"`
}

type Node_VacuumRelation struct {
	VacuumRelation *VacuumRelation `protobuf:"bytes,225,opt,name=vacuum_relation,json=VacuumRelation,proto3,oneof"`
}

type Node_PublicationObjSpec struct {
	PublicationObjSpec *PublicationObjSpec `protobuf:"bytes,226,opt,name=publication_obj_spec,json=PublicationObjSpec,proto3,oneof"`
}

type Node_PublicationTable struct {
	PublicationTable *PublicationTable `protobuf:"bytes,227,opt,name=publication_table,json=PublicationTable,proto3,oneof"`
}

type Node_InlineCodeBlock struct {
	InlineCodeBlock *InlineCodeBlock `protobuf:"bytes,228,opt,name=inline_code_block,json=InlineCodeBlock,proto3,oneof"`
}

type Node_CallContext struct {
	CallContext *CallContext `protobuf:"bytes,229,opt,name=call_context,json=CallContext,proto3,oneof"`
}

type Node_Integer struct {
	Integer *Integer `protobuf:"bytes,230,opt,name=integer,json=Integer,proto3,oneof"`
}

type Node_Float struct {
	Float *Float `protobuf:"bytes,231,opt,name=float,json=Float,proto3,oneof"`
}

type Node_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,232,opt,name=boolean,json=Boolean,proto3,oneof"`
}

type Node_String_ struct {
	String_ *String `protobuf:"bytes,233,opt,name=string,json=String,proto3,oneof"`
}

type Node_BitString struct {
	BitString *BitString `protobuf:"bytes,234,opt,name=bit_string,json=BitString,proto3,oneof"`
}

type Node_List struct {
	List *List `protobuf:"bytes,235,opt,name=list,json=List,proto3,oneof"`
}

type Node_IntList struct {
	IntList *IntList `protobuf:"bytes,236,opt,name=int_list,json=IntList,proto3,oneof"`
}

type Node_OidList struct {
	OidList *OidList `protobuf:"bytes,237,opt,name=oid_list,json=OidList,proto3,oneof"`
}

type Node_AConst struct {
	AConst *A_Const `protobuf:"bytes,238,opt,name=a_const,json=A_Const,proto3,oneof"`
}

func (*Node_Alias) isNode_Node() {}

func (*Node_RangeVar) isNode_Node() {}

func (*Node_TableFunc) isNode_Node() {}

func (*Node_Var) isNode_Node() {}

func (*Node_Param) isNode_Node() {}

func (*Node_Aggref) isNode_Node() {}

func (*Node_GroupingFunc) isNode_Node() {}

func (*Node_WindowFunc) isNode_Node() {}

func (*Node_SubscriptingRef) isNode_Node() {}

func (*Node_FuncExpr) isNode_Node() {}

func (*Node_NamedArgExpr) isNode_Node() {}

func (*Node_OpExpr) isNode_Node() {}

func (*Node_DistinctExpr) isNode_Node() {}

func (*Node_NullIfExpr) isNode_Node() {}

func (*Node_ScalarArrayOpExpr) isNode_Node() {}

func (*Node_BoolExpr) isNode_Node() {}

func (*Node_SubLink) isNode_Node() {}

func (*Node_SubPlan) isNode_Node() {}

func (*Node_AlternativeSubPlan) isNode_Node() {}

func (*Node_FieldSelect) isNode_Node() {}

func (*Node_FieldStore) isNode_Node() {}

func (*Node_RelabelType) isNode_Node() {}

func (*Node_CoerceViaIo) isNode_Node() {}

func (*Node_ArrayCoerceExpr) isNode_Node() {}

func (*Node_ConvertRowtypeExpr) isNode_Node() {}

func (*Node_CollateExpr) isNode_Node() {}

func (*Node_CaseExpr) isNode_Node() {}

func (*Node_CaseWhen) isNode_Node() {}

func (*Node_CaseTestExpr) isNode_Node() {}

func (*Node_ArrayExpr) isNode_Node() {}

func (*Node_RowExpr) isNode_Node() {}

func (*Node_RowCompareExpr) isNode_Node() {}

func (*Node_CoalesceExpr) isNode_Node() {}

func (*Node_MinMaxExpr) isNode_Node() {}

func (*Node_SqlvalueFunction) isNode_Node() {}

func (*Node_XmlExpr) isNode_Node() {}

func (*Node_NullTest) isNode_Node() {}

func (*Node_BooleanTest) isNode_Node() {}

func (*Node_CoerceToDomain) isNode_Node() {}

func (*Node_CoerceToDomainValue) isNode_Node() {}

func (*Node_SetToDefault) isNode_Node() {}

func (*Node_CurrentOfExpr) isNode_Node() {}

func (*Node_NextValueExpr) isNode_Node() {}

func (*Node_InferenceElem) isNode_Node() {}

func (*Node_TargetEntry) isNode_Node() {}

func (*Node_RangeTblRef) isNode_Node() {}

func (*Node_JoinExpr) isNode_Node() {}

func (*Node_FromExpr) isNode_Node() {}

func (*Node_OnConflictExpr) isNode_Node() {}

func (*Node_IntoClause) isNode_Node() {}

func (*Node_MergeAction) isNode_Node() {}

func (*Node_RawStmt) isNode_Node() {}

func (*Node_Query) isNode_Node() {}

func (*Node_InsertStmt) isNode_Node() {}

func (*Node_DeleteStmt) isNode_Node() {}

func (*Node_UpdateStmt) isNode_Node() {}

func (*Node_MergeStmt) isNode_Node() {}

func (*Node_SelectStmt) isNode_Node() {}

func (*Node_ReturnStmt) isNode_Node() {}

func (*Node_PlassignStmt) isNode_Node() {}

func (*Node_AlterTableStmt) isNode_Node() {}

func (*Node_AlterTableCmd) isNode_Node() {}

func (*Node_AlterDomainStmt) isNode_Node() {}

func (*Node_SetOperationStmt) isNode_Node() {}

func (*Node_GrantStmt) isNode_Node() {}

func (*Node_GrantRoleStmt) isNode_Node() {}

func (*Node_AlterDefaultPrivilegesStmt) isNode_Node() {}

func (*Node_ClosePortalStmt) isNode_Node() {}

func (*Node_ClusterStmt) isNode_Node() {}

func (*Node_CopyStmt) isNode_Node() {}

func (*Node_CreateStmt) isNode_Node() {}

func (*Node_DefineStmt) isNode_Node() {}

func (*Node_DropStmt) isNode_Node() {}

func (*Node_TruncateStmt) isNode_Node() {}

func (*Node_CommentStmt) isNode_Node() {}

func (*Node_FetchStmt) isNode_Node() {}

func (*Node_IndexStmt) isNode_Node() {}

func (*Node_CreateFunctionStmt) isNode_Node() {}

func (*Node_AlterFunctionStmt) isNode_Node() {}

func (*Node_DoStmt) isNode_Node() {}

func (*Node_RenameStmt) isNode_Node() {}

func (*Node_RuleStmt) isNode_Node() {}

func (*Node_NotifyStmt) isNode_Node() {}

func (*Node_ListenStmt) isNode_Node() {}

func (*Node_UnlistenStmt) isNode_Node() {}

func (*Node_TransactionStmt) isNode_Node() {}

func (*Node_ViewStmt) isNode_Node() {}

func (*Node_LoadStmt) isNode_Node() {}

func (*Node_CreateDomainStmt) isNode_Node() {}

func (*Node_CreatedbStmt) isNode_Node() {}

func (*Node_DropdbStmt) isNode_Node() {}

func (*Node_VacuumStmt) isNode_Node() {}

func (*Node_ExplainStmt) isNode_Node() {}

func (*Node_CreateTableAsStmt) isNode_Node() {}

func (*Node_CreateSeqStmt) isNode_Node() {}

func (*Node_AlterSeqStmt) isNode_Node() {}

func (*Node_VariableSetStmt) isNode_Node() {}

func (*Node_VariableShowStmt) isNode_Node() {}

func (*Node_DiscardStmt) isNode_Node() {}

func (*Node_CreateTrigStmt) isNode_Node() {}

func (*Node_CreatePlangStmt) isNode_Node() {}

func (*Node_CreateRoleStmt) isNode_Node() {}

func (*Node_AlterRoleStmt) isNode_Node() {}

func (*Node_DropRoleStmt) isNode_Node() {}

func (*Node_LockStmt) isNode_Node() {}

func (*Node_ConstraintsSetStmt) isNode_Node() {}

func (*Node_ReindexStmt) isNode_Node() {}

func (*Node_CheckPointStmt) isNode_Node() {}

func (*Node_CreateSchemaStmt) isNode_Node() {}

func (*Node_AlterDatabaseStmt) isNode_Node() {}

func (*Node_AlterDatabaseRefreshCollStmt) isNode_Node() {}

func (*Node_AlterDatabaseSetStmt) isNode_Node() {}

func (*Node_AlterRoleSetStmt) isNode_Node() {}

func (*Node_CreateConversionStmt) isNode_Node() {}

func (*Node_CreateCastStmt) isNode_Node() {}

func (*Node_CreateOpClassStmt) isNode_Node() {}

func (*Node_CreateOpFamilyStmt) isNode_Node() {}

func (*Node_AlterOpFamilyStmt) isNode_Node() {}

func (*Node_PrepareStmt) isNode_Node() {}

func (*Node_ExecuteStmt) isNode_Node() {}

func (*Node_DeallocateStmt) isNode_Node() {}

func (*Node_DeclareCursorStmt) isNode_Node() {}

func (*Node_CreateTableSpaceStmt) isNode_Node() {}

func (*Node_DropTableSpaceStmt) isNode_Node() {}

func (*Node_AlterObjectDependsStmt) isNode_Node() {}

func (*Node_AlterObjectSchemaStmt) isNode_Node() {}

func (*Node_AlterOwnerStmt) isNode_Node() {}

func (*Node_AlterOperatorStmt) isNode_Node() {}

func (*Node_AlterTypeStmt) isNode_Node() {}

func (*Node_DropOwnedStmt) isNode_Node() {}

func (*Node_ReassignOwnedStmt) isNode_Node() {}

func (*Node_CompositeTypeStmt) isNode_Node() {}

func (*Node_CreateEnumStmt) isNode_Node() {}

func (*Node_CreateRangeStmt) isNode_Node() {}

func (*Node_AlterEnumStmt) isNode_Node() {}

func (*Node_AlterTsdictionaryStmt) isNode_Node() {}

func (*Node_AlterTsconfigurationStmt) isNode_Node() {}

func (*Node_CreateFdwStmt) isNode_Node() {}

func (*Node_AlterFdwStmt) isNode_Node() {}

func (*Node_CreateForeignServerStmt) isNode_Node() {}

func (*Node_AlterForeignServerStmt) isNode_Node() {}

func (*Node_CreateUserMappingStmt) isNode_Node() {}

func (*Node_AlterUserMappingStmt) isNode_Node() {}

func (*Node_DropUserMappingStmt) isNode_Node() {}

func (*Node_AlterTableSpaceOptionsStmt) isNode_Node() {}

func (*Node_AlterTableMoveAllStmt) isNode_Node() {}

func (*Node_SecLabelStmt) isNode_Node() {}

func (*Node_CreateForeignTableStmt) isNode_Node() {}

func (*Node_ImportForeignSchemaStmt) isNode_Node() {}

func (*Node_CreateExtensionStmt) isNode_Node() {}

func (*Node_AlterExtensionStmt) isNode_Node() {}

func (*Node_AlterExtensionContentsStmt) isNode_Node() {}

func (*Node_CreateEventTrigStmt) isNode_Node() {}

func (*Node_AlterEventTrigStmt) isNode_Node() {}

func (*Node_RefreshMatViewStmt) isNode_Node() {}

func (*Node_ReplicaIdentityStmt) isNode_Node() {}

func (*Node_AlterSystemStmt) isNode_Node() {}

func (*Node_CreatePolicyStmt) isNode_Node() {}

func (*Node_AlterPolicyStmt) isNode_Node() {}

func (*Node_CreateTransformStmt) isNode_Node() {}

func (*Node_CreateAmStmt) isNode_Node() {}

func (*Node_CreatePublicationStmt) isNode_Node() {}

func (*Node_AlterPublicationStmt) isNode_Node() {}

func (*Node_CreateSubscriptionStmt) isNode_Node() {}

func (*Node_AlterSubscriptionStmt) isNode_Node() {}

func (*Node_DropSubscriptionStmt) isNode_Node() {}

func (*Node_CreateStatsStmt) isNode_Node() {}

func (*Node_AlterCollationStmt) isNode_Node() {}

func (*Node_CallStmt) isNode_Node() {}

func (*Node_AlterStatsStmt) isNode_Node() {}

func (*Node_AExpr) isNode_Node() {}

func (*Node_ColumnRef) isNode_Node() {}

func (*Node_ParamRef) isNode_Node() {}

func (*Node_FuncCall) isNode_Node() {}

func (*Node_AStar) isNode_Node() {}

func (*Node_AIndices) isNode_Node() {}

func (*Node_AIndirection) isNode_Node() {}

func (*Node_AArrayExpr) isNode_Node() {}

func (*Node_ResTarget) isNode_Node() {}

func (*Node_MultiAssignRef) isNode_Node() {}

func (*Node_TypeCast) isNode_Node() {}

func (*Node_CollateClause) isNode_Node() {}

func (*Node_SortBy) isNode_Node() {}

func (*Node_WindowDef) isNode_Node() {}

func (*Node_RangeSubselect) isNode_Node() {}

func (*Node_RangeFunction) isNode_Node() {}

func (*Node_RangeTableSample) isNode_Node() {}

func (*Node_RangeTableFunc) isNode_Node() {}

func (*Node_RangeTableFuncCol) isNode_Node() {}

func (*Node_TypeName) isNode_Node() {}

func (*Node_ColumnDef) isNode_Node() {}

func (*Node_IndexElem) isNode_Node() {}

func (*Node_StatsElem) isNode_Node() {}

func (*Node_Constraint) isNode_Node() {}

func (*Node_DefElem) isNode_Node() {}

func (*Node_RangeTblEntry) isNode_Node() {}

func (*Node_RangeTblFunction) isNode_Node() {}

func (*Node_TableSampleClause) isNode_Node() {}

func (*Node_WithCheckOption) isNode_Node() {}

func (*Node_SortGroupClause) isNode_Node() {}

func (*Node_GroupingSet) isNode_Node() {}

func (*Node_WindowClause) isNode_Node() {}

func (*Node_ObjectWithArgs) isNode_Node() {}

func (*Node_AccessPriv) isNode_Node() {}

func (*Node_CreateOpClassItem) isNode_Node() {}

func (*Node_TableLikeClause) isNode_Node() {}

func (*Node_FunctionParameter) isNode_Node() {}

func (*Node_LockingClause) isNode_Node() {}

func (*Node_RowMarkClause) isNode_Node() {}

func (*Node_XmlSerialize) isNode_Node() {}

func (*Node_WithClause) isNode_Node() {}

func (*Node_InferClause) isNode_Node() {}

func (*Node_OnConflictClause) isNode_Node() {}

func (*Node_CtesearchClause) isNode_Node() {}

func (*Node_CtecycleClause) isNode_Node() {}

func (*Node_CommonTableExpr) isNode_Node() {}

func (*Node_MergeWhenClause) isNode_Node() {}

func (*Node_RoleSpec) isNode_Node() {}

func (*Node_TriggerTransition) isNode_Node() {}

func (*Node_PartitionElem) isNode_Node() {}

func (*Node_PartitionSpec) isNode_Node() {}

func (*Node_PartitionBoundSpec) isNode_Node() {}

func (*Node_PartitionRangeDatum) isNode_Node() {}

func (*Node_PartitionCmd) isNode_Node() {}

func (*Node_VacuumRelation) isNode_Node() {}

func (*Node_PublicationObjSpec) isNode_Node() {}

func (*Node_PublicationTable) isNode_Node() {}

func (*Node_InlineCodeBlock) isNode_Node() {}

func (*Node_CallContext) isNode_Node() {}

func (*Node_Integer) isNode_Node() {}

func (*Node_Float) isNode_Node() {}

func (*Node_Boolean) isNode_Node() {}

func (*Node_String_) isNode_Node() {}

func (*Node_BitString) isNode_Node() {}

func (*Node_List) isNode_Node() {}

func (*Node_IntList) isNode_Node() {}

func (*Node_OidList) isNode_Node() {}

func (*Node_AConst) isNode_Node() {}

type Integer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ival int32 `protobuf:"varint,1,opt,name=ival,proto3" json:"ival,omitempty"` // machine integer
}

func (x *Integer) Reset() {
	*x = Integer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integer) ProtoMessage() {}

func (x *Integer) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integer.ProtoReflect.Descriptor instead.
func (*Integer) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{3}
}

func (x *Integer) GetIval() int32 {
	if x != nil {
		return x.Ival
	}
	return 0
}

type Float struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fval string `protobuf:"bytes,1,opt,name=fval,proto3" json:"fval,omitempty"` // string
}

func (x *Float) Reset() {
	*x = Float{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Float) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Float) ProtoMessage() {}

func (x *Float) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Float.ProtoReflect.Descriptor instead.
func (*Float) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{4}
}

func (x *Float) GetFval() string {
	if x != nil {
		return x.Fval
	}
	return ""
}

type Boolean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Boolval bool `protobuf:"varint,1,opt,name=boolval,proto3" json:"boolval,omitempty"`
}

func (x *Boolean) Reset() {
	*x = Boolean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Boolean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Boolean) ProtoMessage() {}

func (x *Boolean) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Boolean.ProtoReflect.Descriptor instead.
func (*Boolean) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{5}
}

func (x *Boolean) GetBoolval() bool {
	if x != nil {
		return x.Boolval
	}
	return false
}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sval string `protobuf:"bytes,1,opt,name=sval,proto3" json:"sval,omitempty"` // string
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{6}
}

func (x *String) GetSval() string {
	if x != nil {
		return x.Sval
	}
	return ""
}

type BitString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bsval string `protobuf:"bytes,1,opt,name=bsval,proto3" json:"bsval,omitempty"` // string
}

func (x *BitString) Reset() {
	*x = BitString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BitString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BitString) ProtoMessage() {}

func (x *BitString) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BitString.ProtoReflect.Descriptor instead.
func (*BitString) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{7}
}

func (x *BitString) GetBsval() string {
	if x != nil {
		return x.Bsval
	}
	return ""
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Node `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{8}
}

func (x *List) GetItems() []*Node {
	if x != nil {
		return x.Items
	}
	return nil
}

type OidList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Node `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *OidList) Reset() {
	*x = OidList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OidList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OidList) ProtoMessage() {}

func (x *OidList) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OidList.ProtoReflect.Descriptor instead.
func (*OidList) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{9}
}

func (x *OidList) GetItems() []*Node {
	if x != nil {
		return x.Items
	}
	return nil
}

type IntList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Node `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *IntList) Reset() {
	*x = IntList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntList) ProtoMessage() {}

func (x *IntList) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntList.ProtoReflect.Descriptor instead.
func (*IntList) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{10}
}

func (x *IntList) GetItems() []*Node {
	if x != nil {
		return x.Items
	}
	return nil
}

type A_Const struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Val:
	//
	//	*A_Const_Ival
	//	*A_Const_Fval
	//	*A_Const_Boolval
	//	*A_Const_Sval
	//	*A_Const_Bsval
	Val      isA_Const_Val `protobuf_oneof:"val"`
	Isnull   bool          `protobuf:"varint,10,opt,name=isnull,proto3" json:"isnull,omitempty"`
	Location int32         `protobuf:"varint,11,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *A_Const) Reset() {
	*x = A_Const{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A_Const) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A_Const) ProtoMessage() {}

func (x *A_Const) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A_Const.ProtoReflect.Descriptor instead.
func (*A_Const) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{11}
}

func (m *A_Const) GetVal() isA_Const_Val {
	if m != nil {
		return m.Val
	}
	return nil
}

func (x *A_Const) GetIval() *Integer {
	if x, ok := x.GetVal().(*A_Const_Ival); ok {
		return x.Ival
	}
	return nil
}

func (x *A_Const) GetFval() *Float {
	if x, ok := x.GetVal().(*A_Const_Fval); ok {
		return x.Fval
	}
	return nil
}

func (x *A_Const) GetBoolval() *Boolean {
	if x, ok := x.GetVal().(*A_Const_Boolval); ok {
		return x.Boolval
	}
	return nil
}

func (x *A_Const) GetSval() *String {
	if x, ok := x.GetVal().(*A_Const_Sval); ok {
		return x.Sval
	}
	return nil
}

func (x *A_Const) GetBsval() *BitString {
	if x, ok := x.GetVal().(*A_Const_Bsval); ok {
		return x.Bsval
	}
	return nil
}

func (x *A_Const) GetIsnull() bool {
	if x != nil {
		return x.Isnull
	}
	return false
}

func (x *A_Const) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type isA_Const_Val interface {
	isA_Const_Val()
}

type A_Const_Ival struct {
	Ival *Integer `protobuf:"bytes,1,opt,name=ival,proto3,oneof"`
}

type A_Const_Fval struct {
	Fval *Float `protobuf:"bytes,2,opt,name=fval,proto3,oneof"`
}

type A_Const_Boolval struct {
	Boolval *Boolean `protobuf:"bytes,3,opt,name=boolval,proto3,oneof"`
}

type A_Const_Sval struct {
	Sval *String `protobuf:"bytes,4,opt,name=sval,proto3,oneof"`
}

type A_Const_Bsval struct {
	Bsval *BitString `protobuf:"bytes,5,opt,name=bsval,proto3,oneof"`
}

func (*A_Const_Ival) isA_Const_Val() {}

func (*A_Const_Fval) isA_Const_Val() {}

func (*A_Const_Boolval) isA_Const_Val() {}

func (*A_Const_Sval) isA_Const_Val() {}

func (*A_Const_Bsval) isA_Const_Val() {}

type Alias struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Aliasname string  `protobuf:"bytes,1,opt,name=aliasname,proto3" json:"aliasname,omitempty"`
	Colnames  []*Node `protobuf:"bytes,2,rep,name=colnames,proto3" json:"colnames,omitempty"`
}

func (x *Alias) Reset() {
	*x = Alias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Alias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alias) ProtoMessage() {}

func (x *Alias) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alias.ProtoReflect.Descriptor instead.
func (*Alias) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{12}
}

func (x *Alias) GetAliasname() string {
	if x != nil {
		return x.Aliasname
	}
	return ""
}

func (x *Alias) GetColnames() []*Node {
	if x != nil {
		return x.Colnames
	}
	return nil
}

type RangeVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Catalogname    string `protobuf:"bytes,1,opt,name=catalogname,proto3" json:"catalogname,omitempty"`
	Schemaname     string `protobuf:"bytes,2,opt,name=schemaname,proto3" json:"schemaname,omitempty"`
	Relname        string `protobuf:"bytes,3,opt,name=relname,proto3" json:"relname,omitempty"`
	Inh            bool   `protobuf:"varint,4,opt,name=inh,proto3" json:"inh,omitempty"`
	Relpersistence string `protobuf:"bytes,5,opt,name=relpersistence,proto3" json:"relpersistence,omitempty"`
	Alias          *Alias `protobuf:"bytes,6,opt,name=alias,proto3" json:"alias,omitempty"`
	Location       int32  `protobuf:"varint,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *RangeVar) Reset() {
	*x = RangeVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeVar) ProtoMessage() {}

func (x *RangeVar) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeVar.ProtoReflect.Descriptor instead.
func (*RangeVar) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{13}
}

func (x *RangeVar) GetCatalogname() string {
	if x != nil {
		return x.Catalogname
	}
	return ""
}

func (x *RangeVar) GetSchemaname() string {
	if x != nil {
		return x.Schemaname
	}
	return ""
}

func (x *RangeVar) GetRelname() string {
	if x != nil {
		return x.Relname
	}
	return ""
}

func (x *RangeVar) GetInh() bool {
	if x != nil {
		return x.Inh
	}
	return false
}

func (x *RangeVar) GetRelpersistence() string {
	if x != nil {
		return x.Relpersistence
	}
	return ""
}

func (x *RangeVar) GetAlias() *Alias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *RangeVar) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type TableFunc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NsUris        []*Node  `protobuf:"bytes,1,rep,name=ns_uris,proto3" json:"ns_uris,omitempty"`
	NsNames       []*Node  `protobuf:"bytes,2,rep,name=ns_names,proto3" json:"ns_names,omitempty"`
	Docexpr       *Node    `protobuf:"bytes,3,opt,name=docexpr,proto3" json:"docexpr,omitempty"`
	Rowexpr       *Node    `protobuf:"bytes,4,opt,name=rowexpr,proto3" json:"rowexpr,omitempty"`
	Colnames      []*Node  `protobuf:"bytes,5,rep,name=colnames,proto3" json:"colnames,omitempty"`
	Coltypes      []*Node  `protobuf:"bytes,6,rep,name=coltypes,proto3" json:"coltypes,omitempty"`
	Coltypmods    []*Node  `protobuf:"bytes,7,rep,name=coltypmods,proto3" json:"coltypmods,omitempty"`
	Colcollations []*Node  `protobuf:"bytes,8,rep,name=colcollations,proto3" json:"colcollations,omitempty"`
	Colexprs      []*Node  `protobuf:"bytes,9,rep,name=colexprs,proto3" json:"colexprs,omitempty"`
	Coldefexprs   []*Node  `protobuf:"bytes,10,rep,name=coldefexprs,proto3" json:"coldefexprs,omitempty"`
	Notnulls      []uint64 `protobuf:"varint,11,rep,packed,name=notnulls,proto3" json:"notnulls,omitempty"`
	Ordinalitycol int32    `protobuf:"varint,12,opt,name=ordinalitycol,proto3" json:"ordinalitycol,omitempty"`
	Location      int32    `protobuf:"varint,13,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *TableFunc) Reset() {
	*x = TableFunc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableFunc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFunc) ProtoMessage() {}

func (x *TableFunc) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFunc.ProtoReflect.Descriptor instead.
func (*TableFunc) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{14}
}

func (x *TableFunc) GetNsUris() []*Node {
	if x != nil {
		return x.NsUris
	}
	return nil
}

func (x *TableFunc) GetNsNames() []*Node {
	if x != nil {
		return x.NsNames
	}
	return nil
}

func (x *TableFunc) GetDocexpr() *Node {
	if x != nil {
		return x.Docexpr
	}
	return nil
}

func (x *TableFunc) GetRowexpr() *Node {
	if x != nil {
		return x.Rowexpr
	}
	return nil
}

func (x *TableFunc) GetColnames() []*Node {
	if x != nil {
		return x.Colnames
	}
	return nil
}

func (x *TableFunc) GetColtypes() []*Node {
	if x != nil {
		return x.Coltypes
	}
	return nil
}

func (x *TableFunc) GetColtypmods() []*Node {
	if x != nil {
		return x.Coltypmods
	}
	return nil
}

func (x *TableFunc) GetColcollations() []*Node {
	if x != nil {
		return x.Colcollations
	}
	return nil
}

func (x *TableFunc) GetColexprs() []*Node {
	if x != nil {
		return x.Colexprs
	}
	return nil
}

func (x *TableFunc) GetColdefexprs() []*Node {
	if x != nil {
		return x.Coldefexprs
	}
	return nil
}

func (x *TableFunc) GetNotnulls() []uint64 {
	if x != nil {
		return x.Notnulls
	}
	return nil
}

func (x *TableFunc) GetOrdinalitycol() int32 {
	if x != nil {
		return x.Ordinalitycol
	}
	return 0
}

func (x *TableFunc) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type Var struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr         *Node  `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Varno       int32  `protobuf:"varint,2,opt,name=varno,proto3" json:"varno,omitempty"`
	Varattno    int32  `protobuf:"varint,3,opt,name=varattno,proto3" json:"varattno,omitempty"`
	Vartype     uint32 `protobuf:"varint,4,opt,name=vartype,proto3" json:"vartype,omitempty"`
	Vartypmod   int32  `protobuf:"varint,5,opt,name=vartypmod,proto3" json:"vartypmod,omitempty"`
	Varcollid   uint32 `protobuf:"varint,6,opt,name=varcollid,proto3" json:"varcollid,omitempty"`
	Varlevelsup uint32 `protobuf:"varint,7,opt,name=varlevelsup,proto3" json:"varlevelsup,omitempty"`
	Varnosyn    uint32 `protobuf:"varint,8,opt,name=varnosyn,proto3" json:"varnosyn,omitempty"`
	Varattnosyn int32  `protobuf:"varint,9,opt,name=varattnosyn,proto3" json:"varattnosyn,omitempty"`
	Location    int32  `protobuf:"varint,10,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *Var) Reset() {
	*x = Var{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Var) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Var) ProtoMessage() {}

func (x *Var) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Var.ProtoReflect.Descriptor instead.
func (*Var) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{15}
}

func (x *Var) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *Var) GetVarno() int32 {
	if x != nil {
		return x.Varno
	}
	return 0
}

func (x *Var) GetVarattno() int32 {
	if x != nil {
		return x.Varattno
	}
	return 0
}

func (x *Var) GetVartype() uint32 {
	if x != nil {
		return x.Vartype
	}
	return 0
}

func (x *Var) GetVartypmod() int32 {
	if x != nil {
		return x.Vartypmod
	}
	return 0
}

func (x *Var) GetVarcollid() uint32 {
	if x != nil {
		return x.Varcollid
	}
	return 0
}

func (x *Var) GetVarlevelsup() uint32 {
	if x != nil {
		return x.Varlevelsup
	}
	return 0
}

func (x *Var) GetVarnosyn() uint32 {
	if x != nil {
		return x.Varnosyn
	}
	return 0
}

func (x *Var) GetVarattnosyn() int32 {
	if x != nil {
		return x.Varattnosyn
	}
	return 0
}

func (x *Var) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type Param struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr         *Node     `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Paramkind   ParamKind `protobuf:"varint,2,opt,name=paramkind,proto3,enum=pg_query.ParamKind" json:"paramkind,omitempty"`
	Paramid     int32     `protobuf:"varint,3,opt,name=paramid,proto3" json:"paramid,omitempty"`
	Paramtype   uint32    `protobuf:"varint,4,opt,name=paramtype,proto3" json:"paramtype,omitempty"`
	Paramtypmod int32     `protobuf:"varint,5,opt,name=paramtypmod,proto3" json:"paramtypmod,omitempty"`
	Paramcollid uint32    `protobuf:"varint,6,opt,name=paramcollid,proto3" json:"paramcollid,omitempty"`
	Location    int32     `protobuf:"varint,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *Param) Reset() {
	*x = Param{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Param) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Param) ProtoMessage() {}

func (x *Param) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Param.ProtoReflect.Descriptor instead.
func (*Param) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{16}
}

func (x *Param) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *Param) GetParamkind() ParamKind {
	if x != nil {
		return x.Paramkind
	}
	return ParamKind_PARAM_KIND_UNDEFINED
}

func (x *Param) GetParamid() int32 {
	if x != nil {
		return x.Paramid
	}
	return 0
}

func (x *Param) GetParamtype() uint32 {
	if x != nil {
		return x.Paramtype
	}
	return 0
}

func (x *Param) GetParamtypmod() int32 {
	if x != nil {
		return x.Paramtypmod
	}
	return 0
}

func (x *Param) GetParamcollid() uint32 {
	if x != nil {
		return x.Paramcollid
	}
	return 0
}

func (x *Param) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type Aggref struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr           *Node    `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Aggfnoid      uint32   `protobuf:"varint,2,opt,name=aggfnoid,proto3" json:"aggfnoid,omitempty"`
	Aggtype       uint32   `protobuf:"varint,3,opt,name=aggtype,proto3" json:"aggtype,omitempty"`
	Aggcollid     uint32   `protobuf:"varint,4,opt,name=aggcollid,proto3" json:"aggcollid,omitempty"`
	Inputcollid   uint32   `protobuf:"varint,5,opt,name=inputcollid,proto3" json:"inputcollid,omitempty"`
	Aggtranstype  uint32   `protobuf:"varint,6,opt,name=aggtranstype,proto3" json:"aggtranstype,omitempty"`
	Aggargtypes   []*Node  `protobuf:"bytes,7,rep,name=aggargtypes,proto3" json:"aggargtypes,omitempty"`
	Aggdirectargs []*Node  `protobuf:"bytes,8,rep,name=aggdirectargs,proto3" json:"aggdirectargs,omitempty"`
	Args          []*Node  `protobuf:"bytes,9,rep,name=args,proto3" json:"args,omitempty"`
	Aggorder      []*Node  `protobuf:"bytes,10,rep,name=aggorder,proto3" json:"aggorder,omitempty"`
	Aggdistinct   []*Node  `protobuf:"bytes,11,rep,name=aggdistinct,proto3" json:"aggdistinct,omitempty"`
	Aggfilter     *Node    `protobuf:"bytes,12,opt,name=aggfilter,proto3" json:"aggfilter,omitempty"`
	Aggstar       bool     `protobuf:"varint,13,opt,name=aggstar,proto3" json:"aggstar,omitempty"`
	Aggvariadic   bool     `protobuf:"varint,14,opt,name=aggvariadic,proto3" json:"aggvariadic,omitempty"`
	Aggkind       string   `protobuf:"bytes,15,opt,name=aggkind,proto3" json:"aggkind,omitempty"`
	Agglevelsup   uint32   `protobuf:"varint,16,opt,name=agglevelsup,proto3" json:"agglevelsup,omitempty"`
	Aggsplit      AggSplit `protobuf:"varint,17,opt,name=aggsplit,proto3,enum=pg_query.AggSplit" json:"aggsplit,omitempty"`
	Aggno         int32    `protobuf:"varint,18,opt,name=aggno,proto3" json:"aggno,omitempty"`
	Aggtransno    int32    `protobuf:"varint,19,opt,name=aggtransno,proto3" json:"aggtransno,omitempty"`
	Location      int32    `protobuf:"varint,20,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *Aggref) Reset() {
	*x = Aggref{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aggref) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aggref) ProtoMessage() {}

func (x *Aggref) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aggref.ProtoReflect.Descriptor instead.
func (*Aggref) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{17}
}

func (x *Aggref) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *Aggref) GetAggfnoid() uint32 {
	if x != nil {
		return x.Aggfnoid
	}
	return 0
}

func (x *Aggref) GetAggtype() uint32 {
	if x != nil {
		return x.Aggtype
	}
	return 0
}

func (x *Aggref) GetAggcollid() uint32 {
	if x != nil {
		return x.Aggcollid
	}
	return 0
}

func (x *Aggref) GetInputcollid() uint32 {
	if x != nil {
		return x.Inputcollid
	}
	return 0
}

func (x *Aggref) GetAggtranstype() uint32 {
	if x != nil {
		return x.Aggtranstype
	}
	return 0
}

func (x *Aggref) GetAggargtypes() []*Node {
	if x != nil {
		return x.Aggargtypes
	}
	return nil
}

func (x *Aggref) GetAggdirectargs() []*Node {
	if x != nil {
		return x.Aggdirectargs
	}
	return nil
}

func (x *Aggref) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Aggref) GetAggorder() []*Node {
	if x != nil {
		return x.Aggorder
	}
	return nil
}

func (x *Aggref) GetAggdistinct() []*Node {
	if x != nil {
		return x.Aggdistinct
	}
	return nil
}

func (x *Aggref) GetAggfilter() *Node {
	if x != nil {
		return x.Aggfilter
	}
	return nil
}

func (x *Aggref) GetAggstar() bool {
	if x != nil {
		return x.Aggstar
	}
	return false
}

func (x *Aggref) GetAggvariadic() bool {
	if x != nil {
		return x.Aggvariadic
	}
	return false
}

func (x *Aggref) GetAggkind() string {
	if x != nil {
		return x.Aggkind
	}
	return ""
}

func (x *Aggref) GetAgglevelsup() uint32 {
	if x != nil {
		return x.Agglevelsup
	}
	return 0
}

func (x *Aggref) GetAggsplit() AggSplit {
	if x != nil {
		return x.Aggsplit
	}
	return AggSplit_AGG_SPLIT_UNDEFINED
}

func (x *Aggref) GetAggno() int32 {
	if x != nil {
		return x.Aggno
	}
	return 0
}

func (x *Aggref) GetAggtransno() int32 {
	if x != nil {
		return x.Aggtransno
	}
	return 0
}

func (x *Aggref) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type GroupingFunc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr         *Node   `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Args        []*Node `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Refs        []*Node `protobuf:"bytes,3,rep,name=refs,proto3" json:"refs,omitempty"`
	Cols        []*Node `protobuf:"bytes,4,rep,name=cols,proto3" json:"cols,omitempty"`
	Agglevelsup uint32  `protobuf:"varint,5,opt,name=agglevelsup,proto3" json:"agglevelsup,omitempty"`
	Location    int32   `protobuf:"varint,6,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *GroupingFunc) Reset() {
	*x = GroupingFunc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupingFunc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupingFunc) ProtoMessage() {}

func (x *GroupingFunc) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupingFunc.ProtoReflect.Descriptor instead.
func (*GroupingFunc) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{18}
}

func (x *GroupingFunc) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *GroupingFunc) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *GroupingFunc) GetRefs() []*Node {
	if x != nil {
		return x.Refs
	}
	return nil
}

func (x *GroupingFunc) GetCols() []*Node {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *GroupingFunc) GetAgglevelsup() uint32 {
	if x != nil {
		return x.Agglevelsup
	}
	return 0
}

func (x *GroupingFunc) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type WindowFunc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr         *Node   `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Winfnoid    uint32  `protobuf:"varint,2,opt,name=winfnoid,proto3" json:"winfnoid,omitempty"`
	Wintype     uint32  `protobuf:"varint,3,opt,name=wintype,proto3" json:"wintype,omitempty"`
	Wincollid   uint32  `protobuf:"varint,4,opt,name=wincollid,proto3" json:"wincollid,omitempty"`
	Inputcollid uint32  `protobuf:"varint,5,opt,name=inputcollid,proto3" json:"inputcollid,omitempty"`
	Args        []*Node `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
	Aggfilter   *Node   `protobuf:"bytes,7,opt,name=aggfilter,proto3" json:"aggfilter,omitempty"`
	Winref      uint32  `protobuf:"varint,8,opt,name=winref,proto3" json:"winref,omitempty"`
	Winstar     bool    `protobuf:"varint,9,opt,name=winstar,proto3" json:"winstar,omitempty"`
	Winagg      bool    `protobuf:"varint,10,opt,name=winagg,proto3" json:"winagg,omitempty"`
	Location    int32   `protobuf:"varint,11,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *WindowFunc) Reset() {
	*x = WindowFunc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowFunc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowFunc) ProtoMessage() {}

func (x *WindowFunc) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowFunc.ProtoReflect.Descriptor instead.
func (*WindowFunc) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{19}
}

func (x *WindowFunc) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *WindowFunc) GetWinfnoid() uint32 {
	if x != nil {
		return x.Winfnoid
	}
	return 0
}

func (x *WindowFunc) GetWintype() uint32 {
	if x != nil {
		return x.Wintype
	}
	return 0
}

func (x *WindowFunc) GetWincollid() uint32 {
	if x != nil {
		return x.Wincollid
	}
	return 0
}

func (x *WindowFunc) GetInputcollid() uint32 {
	if x != nil {
		return x.Inputcollid
	}
	return 0
}

func (x *WindowFunc) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *WindowFunc) GetAggfilter() *Node {
	if x != nil {
		return x.Aggfilter
	}
	return nil
}

func (x *WindowFunc) GetWinref() uint32 {
	if x != nil {
		return x.Winref
	}
	return 0
}

func (x *WindowFunc) GetWinstar() bool {
	if x != nil {
		return x.Winstar
	}
	return false
}

func (x *WindowFunc) GetWinagg() bool {
	if x != nil {
		return x.Winagg
	}
	return false
}

func (x *WindowFunc) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type SubscriptingRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr              *Node   `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Refcontainertype uint32  `protobuf:"varint,2,opt,name=refcontainertype,proto3" json:"refcontainertype,omitempty"`
	Refelemtype      uint32  `protobuf:"varint,3,opt,name=refelemtype,proto3" json:"refelemtype,omitempty"`
	Refrestype       uint32  `protobuf:"varint,4,opt,name=refrestype,proto3" json:"refrestype,omitempty"`
	Reftypmod        int32   `protobuf:"varint,5,opt,name=reftypmod,proto3" json:"reftypmod,omitempty"`
	Refcollid        uint32  `protobuf:"varint,6,opt,name=refcollid,proto3" json:"refcollid,omitempty"`
	Refupperindexpr  []*Node `protobuf:"bytes,7,rep,name=refupperindexpr,proto3" json:"refupperindexpr,omitempty"`
	Reflowerindexpr  []*Node `protobuf:"bytes,8,rep,name=reflowerindexpr,proto3" json:"reflowerindexpr,omitempty"`
	Refexpr          *Node   `protobuf:"bytes,9,opt,name=refexpr,proto3" json:"refexpr,omitempty"`
	Refassgnexpr     *Node   `protobuf:"bytes,10,opt,name=refassgnexpr,proto3" json:"refassgnexpr,omitempty"`
}

func (x *SubscriptingRef) Reset() {
	*x = SubscriptingRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptingRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptingRef) ProtoMessage() {}

func (x *SubscriptingRef) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptingRef.ProtoReflect.Descriptor instead.
func (*SubscriptingRef) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{20}
}

func (x *SubscriptingRef) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *SubscriptingRef) GetRefcontainertype() uint32 {
	if x != nil {
		return x.Refcontainertype
	}
	return 0
}

func (x *SubscriptingRef) GetRefelemtype() uint32 {
	if x != nil {
		return x.Refelemtype
	}
	return 0
}

func (x *SubscriptingRef) GetRefrestype() uint32 {
	if x != nil {
		return x.Refrestype
	}
	return 0
}

func (x *SubscriptingRef) GetReftypmod() int32 {
	if x != nil {
		return x.Reftypmod
	}
	return 0
}

func (x *SubscriptingRef) GetRefcollid() uint32 {
	if x != nil {
		return x.Refcollid
	}
	return 0
}

func (x *SubscriptingRef) GetRefupperindexpr() []*Node {
	if x != nil {
		return x.Refupperindexpr
	}
	return nil
}

func (x *SubscriptingRef) GetReflowerindexpr() []*Node {
	if x != nil {
		return x.Reflowerindexpr
	}
	return nil
}

func (x *SubscriptingRef) GetRefexpr() *Node {
	if x != nil {
		return x.Refexpr
	}
	return nil
}

func (x *SubscriptingRef) GetRefassgnexpr() *Node {
	if x != nil {
		return x.Refassgnexpr
	}
	return nil
}

type FuncExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr            *Node        `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Funcid         uint32       `protobuf:"varint,2,opt,name=funcid,proto3" json:"funcid,omitempty"`
	Funcresulttype uint32       `protobuf:"varint,3,opt,name=funcresulttype,proto3" json:"funcresulttype,omitempty"`
	Funcretset     bool         `protobuf:"varint,4,opt,name=funcretset,proto3" json:"funcretset,omitempty"`
	Funcvariadic   bool         `protobuf:"varint,5,opt,name=funcvariadic,proto3" json:"funcvariadic,omitempty"`
	Funcformat     CoercionForm `protobuf:"varint,6,opt,name=funcformat,proto3,enum=pg_query.CoercionForm" json:"funcformat,omitempty"`
	Funccollid     uint32       `protobuf:"varint,7,opt,name=funccollid,proto3" json:"funccollid,omitempty"`
	Inputcollid    uint32       `protobuf:"varint,8,opt,name=inputcollid,proto3" json:"inputcollid,omitempty"`
	Args           []*Node      `protobuf:"bytes,9,rep,name=args,proto3" json:"args,omitempty"`
	Location       int32        `protobuf:"varint,10,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *FuncExpr) Reset() {
	*x = FuncExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuncExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuncExpr) ProtoMessage() {}

func (x *FuncExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuncExpr.ProtoReflect.Descriptor instead.
func (*FuncExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{21}
}

func (x *FuncExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *FuncExpr) GetFuncid() uint32 {
	if x != nil {
		return x.Funcid
	}
	return 0
}

func (x *FuncExpr) GetFuncresulttype() uint32 {
	if x != nil {
		return x.Funcresulttype
	}
	return 0
}

func (x *FuncExpr) GetFuncretset() bool {
	if x != nil {
		return x.Funcretset
	}
	return false
}

func (x *FuncExpr) GetFuncvariadic() bool {
	if x != nil {
		return x.Funcvariadic
	}
	return false
}

func (x *FuncExpr) GetFuncformat() CoercionForm {
	if x != nil {
		return x.Funcformat
	}
	return CoercionForm_COERCION_FORM_UNDEFINED
}

func (x *FuncExpr) GetFunccollid() uint32 {
	if x != nil {
		return x.Funccollid
	}
	return 0
}

func (x *FuncExpr) GetInputcollid() uint32 {
	if x != nil {
		return x.Inputcollid
	}
	return 0
}

func (x *FuncExpr) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *FuncExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type NamedArgExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr       *Node  `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Arg       *Node  `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Argnumber int32  `protobuf:"varint,4,opt,name=argnumber,proto3" json:"argnumber,omitempty"`
	Location  int32  `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *NamedArgExpr) Reset() {
	*x = NamedArgExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedArgExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedArgExpr) ProtoMessage() {}

func (x *NamedArgExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedArgExpr.ProtoReflect.Descriptor instead.
func (*NamedArgExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{22}
}

func (x *NamedArgExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *NamedArgExpr) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *NamedArgExpr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NamedArgExpr) GetArgnumber() int32 {
	if x != nil {
		return x.Argnumber
	}
	return 0
}

func (x *NamedArgExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type OpExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr          *Node   `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Opno         uint32  `protobuf:"varint,2,opt,name=opno,proto3" json:"opno,omitempty"`
	Opfuncid     uint32  `protobuf:"varint,3,opt,name=opfuncid,proto3" json:"opfuncid,omitempty"`
	Opresulttype uint32  `protobuf:"varint,4,opt,name=opresulttype,proto3" json:"opresulttype,omitempty"`
	Opretset     bool    `protobuf:"varint,5,opt,name=opretset,proto3" json:"opretset,omitempty"`
	Opcollid     uint32  `protobuf:"varint,6,opt,name=opcollid,proto3" json:"opcollid,omitempty"`
	Inputcollid  uint32  `protobuf:"varint,7,opt,name=inputcollid,proto3" json:"inputcollid,omitempty"`
	Args         []*Node `protobuf:"bytes,8,rep,name=args,proto3" json:"args,omitempty"`
	Location     int32   `protobuf:"varint,9,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *OpExpr) Reset() {
	*x = OpExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpExpr) ProtoMessage() {}

func (x *OpExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpExpr.ProtoReflect.Descriptor instead.
func (*OpExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{23}
}

func (x *OpExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *OpExpr) GetOpno() uint32 {
	if x != nil {
		return x.Opno
	}
	return 0
}

func (x *OpExpr) GetOpfuncid() uint32 {
	if x != nil {
		return x.Opfuncid
	}
	return 0
}

func (x *OpExpr) GetOpresulttype() uint32 {
	if x != nil {
		return x.Opresulttype
	}
	return 0
}

func (x *OpExpr) GetOpretset() bool {
	if x != nil {
		return x.Opretset
	}
	return false
}

func (x *OpExpr) GetOpcollid() uint32 {
	if x != nil {
		return x.Opcollid
	}
	return 0
}

func (x *OpExpr) GetInputcollid() uint32 {
	if x != nil {
		return x.Inputcollid
	}
	return 0
}

func (x *OpExpr) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *OpExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type DistinctExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr          *Node   `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Opno         uint32  `protobuf:"varint,2,opt,name=opno,proto3" json:"opno,omitempty"`
	Opfuncid     uint32  `protobuf:"varint,3,opt,name=opfuncid,proto3" json:"opfuncid,omitempty"`
	Opresulttype uint32  `protobuf:"varint,4,opt,name=opresulttype,proto3" json:"opresulttype,omitempty"`
	Opretset     bool    `protobuf:"varint,5,opt,name=opretset,proto3" json:"opretset,omitempty"`
	Opcollid     uint32  `protobuf:"varint,6,opt,name=opcollid,proto3" json:"opcollid,omitempty"`
	Inputcollid  uint32  `protobuf:"varint,7,opt,name=inputcollid,proto3" json:"inputcollid,omitempty"`
	Args         []*Node `protobuf:"bytes,8,rep,name=args,proto3" json:"args,omitempty"`
	Location     int32   `protobuf:"varint,9,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *DistinctExpr) Reset() {
	*x = DistinctExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DistinctExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DistinctExpr) ProtoMessage() {}

func (x *DistinctExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DistinctExpr.ProtoReflect.Descriptor instead.
func (*DistinctExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{24}
}

func (x *DistinctExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *DistinctExpr) GetOpno() uint32 {
	if x != nil {
		return x.Opno
	}
	return 0
}

func (x *DistinctExpr) GetOpfuncid() uint32 {
	if x != nil {
		return x.Opfuncid
	}
	return 0
}

func (x *DistinctExpr) GetOpresulttype() uint32 {
	if x != nil {
		return x.Opresulttype
	}
	return 0
}

func (x *DistinctExpr) GetOpretset() bool {
	if x != nil {
		return x.Opretset
	}
	return false
}

func (x *DistinctExpr) GetOpcollid() uint32 {
	if x != nil {
		return x.Opcollid
	}
	return 0
}

func (x *DistinctExpr) GetInputcollid() uint32 {
	if x != nil {
		return x.Inputcollid
	}
	return 0
}

func (x *DistinctExpr) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *DistinctExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type NullIfExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr          *Node   `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Opno         uint32  `protobuf:"varint,2,opt,name=opno,proto3" json:"opno,omitempty"`
	Opfuncid     uint32  `protobuf:"varint,3,opt,name=opfuncid,proto3" json:"opfuncid,omitempty"`
	Opresulttype uint32  `protobuf:"varint,4,opt,name=opresulttype,proto3" json:"opresulttype,omitempty"`
	Opretset     bool    `protobuf:"varint,5,opt,name=opretset,proto3" json:"opretset,omitempty"`
	Opcollid     uint32  `protobuf:"varint,6,opt,name=opcollid,proto3" json:"opcollid,omitempty"`
	Inputcollid  uint32  `protobuf:"varint,7,opt,name=inputcollid,proto3" json:"inputcollid,omitempty"`
	Args         []*Node `protobuf:"bytes,8,rep,name=args,proto3" json:"args,omitempty"`
	Location     int32   `protobuf:"varint,9,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *NullIfExpr) Reset() {
	*x = NullIfExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullIfExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullIfExpr) ProtoMessage() {}

func (x *NullIfExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullIfExpr.ProtoReflect.Descriptor instead.
func (*NullIfExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{25}
}

func (x *NullIfExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *NullIfExpr) GetOpno() uint32 {
	if x != nil {
		return x.Opno
	}
	return 0
}

func (x *NullIfExpr) GetOpfuncid() uint32 {
	if x != nil {
		return x.Opfuncid
	}
	return 0
}

func (x *NullIfExpr) GetOpresulttype() uint32 {
	if x != nil {
		return x.Opresulttype
	}
	return 0
}

func (x *NullIfExpr) GetOpretset() bool {
	if x != nil {
		return x.Opretset
	}
	return false
}

func (x *NullIfExpr) GetOpcollid() uint32 {
	if x != nil {
		return x.Opcollid
	}
	return 0
}

func (x *NullIfExpr) GetInputcollid() uint32 {
	if x != nil {
		return x.Inputcollid
	}
	return 0
}

func (x *NullIfExpr) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *NullIfExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type ScalarArrayOpExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr         *Node   `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Opno        uint32  `protobuf:"varint,2,opt,name=opno,proto3" json:"opno,omitempty"`
	Opfuncid    uint32  `protobuf:"varint,3,opt,name=opfuncid,proto3" json:"opfuncid,omitempty"`
	Hashfuncid  uint32  `protobuf:"varint,4,opt,name=hashfuncid,proto3" json:"hashfuncid,omitempty"`
	Negfuncid   uint32  `protobuf:"varint,5,opt,name=negfuncid,proto3" json:"negfuncid,omitempty"`
	UseOr       bool    `protobuf:"varint,6,opt,name=use_or,json=useOr,proto3" json:"use_or,omitempty"`
	Inputcollid uint32  `protobuf:"varint,7,opt,name=inputcollid,proto3" json:"inputcollid,omitempty"`
	Args        []*Node `protobuf:"bytes,8,rep,name=args,proto3" json:"args,omitempty"`
	Location    int32   `protobuf:"varint,9,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ScalarArrayOpExpr) Reset() {
	*x = ScalarArrayOpExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarArrayOpExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarArrayOpExpr) ProtoMessage() {}

func (x *ScalarArrayOpExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarArrayOpExpr.ProtoReflect.Descriptor instead.
func (*ScalarArrayOpExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{26}
}

func (x *ScalarArrayOpExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *ScalarArrayOpExpr) GetOpno() uint32 {
	if x != nil {
		return x.Opno
	}
	return 0
}

func (x *ScalarArrayOpExpr) GetOpfuncid() uint32 {
	if x != nil {
		return x.Opfuncid
	}
	return 0
}

func (x *ScalarArrayOpExpr) GetHashfuncid() uint32 {
	if x != nil {
		return x.Hashfuncid
	}
	return 0
}

func (x *ScalarArrayOpExpr) GetNegfuncid() uint32 {
	if x != nil {
		return x.Negfuncid
	}
	return 0
}

func (x *ScalarArrayOpExpr) GetUseOr() bool {
	if x != nil {
		return x.UseOr
	}
	return false
}

func (x *ScalarArrayOpExpr) GetInputcollid() uint32 {
	if x != nil {
		return x.Inputcollid
	}
	return 0
}

func (x *ScalarArrayOpExpr) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ScalarArrayOpExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type BoolExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr      *Node        `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Boolop   BoolExprType `protobuf:"varint,2,opt,name=boolop,proto3,enum=pg_query.BoolExprType" json:"boolop,omitempty"`
	Args     []*Node      `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Location int32        `protobuf:"varint,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *BoolExpr) Reset() {
	*x = BoolExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolExpr) ProtoMessage() {}

func (x *BoolExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolExpr.ProtoReflect.Descriptor instead.
func (*BoolExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{27}
}

func (x *BoolExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *BoolExpr) GetBoolop() BoolExprType {
	if x != nil {
		return x.Boolop
	}
	return BoolExprType_BOOL_EXPR_TYPE_UNDEFINED
}

func (x *BoolExpr) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *BoolExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type SubLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr         *Node       `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	SubLinkType SubLinkType `protobuf:"varint,2,opt,name=sub_link_type,json=subLinkType,proto3,enum=pg_query.SubLinkType" json:"sub_link_type,omitempty"`
	SubLinkId   int32       `protobuf:"varint,3,opt,name=sub_link_id,json=subLinkId,proto3" json:"sub_link_id,omitempty"`
	Testexpr    *Node       `protobuf:"bytes,4,opt,name=testexpr,proto3" json:"testexpr,omitempty"`
	OperName    []*Node     `protobuf:"bytes,5,rep,name=oper_name,json=operName,proto3" json:"oper_name,omitempty"`
	Subselect   *Node       `protobuf:"bytes,6,opt,name=subselect,proto3" json:"subselect,omitempty"`
	Location    int32       `protobuf:"varint,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *SubLink) Reset() {
	*x = SubLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubLink) ProtoMessage() {}

func (x *SubLink) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubLink.ProtoReflect.Descriptor instead.
func (*SubLink) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{28}
}

func (x *SubLink) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *SubLink) GetSubLinkType() SubLinkType {
	if x != nil {
		return x.SubLinkType
	}
	return SubLinkType_SUB_LINK_TYPE_UNDEFINED
}

func (x *SubLink) GetSubLinkId() int32 {
	if x != nil {
		return x.SubLinkId
	}
	return 0
}

func (x *SubLink) GetTestexpr() *Node {
	if x != nil {
		return x.Testexpr
	}
	return nil
}

func (x *SubLink) GetOperName() []*Node {
	if x != nil {
		return x.OperName
	}
	return nil
}

func (x *SubLink) GetSubselect() *Node {
	if x != nil {
		return x.Subselect
	}
	return nil
}

func (x *SubLink) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type SubPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr               *Node       `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	SubLinkType       SubLinkType `protobuf:"varint,2,opt,name=sub_link_type,json=subLinkType,proto3,enum=pg_query.SubLinkType" json:"sub_link_type,omitempty"`
	Testexpr          *Node       `protobuf:"bytes,3,opt,name=testexpr,proto3" json:"testexpr,omitempty"`
	ParamIds          []*Node     `protobuf:"bytes,4,rep,name=param_ids,json=paramIds,proto3" json:"param_ids,omitempty"`
	PlanId            int32       `protobuf:"varint,5,opt,name=plan_id,proto3" json:"plan_id,omitempty"`
	PlanName          string      `protobuf:"bytes,6,opt,name=plan_name,proto3" json:"plan_name,omitempty"`
	FirstColType      uint32      `protobuf:"varint,7,opt,name=first_col_type,json=firstColType,proto3" json:"first_col_type,omitempty"`
	FirstColTypmod    int32       `protobuf:"varint,8,opt,name=first_col_typmod,json=firstColTypmod,proto3" json:"first_col_typmod,omitempty"`
	FirstColCollation uint32      `protobuf:"varint,9,opt,name=first_col_collation,json=firstColCollation,proto3" json:"first_col_collation,omitempty"`
	UseHashTable      bool        `protobuf:"varint,10,opt,name=use_hash_table,json=useHashTable,proto3" json:"use_hash_table,omitempty"`
	UnknownEqFalse    bool        `protobuf:"varint,11,opt,name=unknown_eq_false,json=unknownEqFalse,proto3" json:"unknown_eq_false,omitempty"`
	ParallelSafe      bool        `protobuf:"varint,12,opt,name=parallel_safe,proto3" json:"parallel_safe,omitempty"`
	SetParam          []*Node     `protobuf:"bytes,13,rep,name=set_param,json=setParam,proto3" json:"set_param,omitempty"`
	ParParam          []*Node     `protobuf:"bytes,14,rep,name=par_param,json=parParam,proto3" json:"par_param,omitempty"`
	Args              []*Node     `protobuf:"bytes,15,rep,name=args,proto3" json:"args,omitempty"`
	StartupCost       float64     `protobuf:"fixed64,16,opt,name=startup_cost,proto3" json:"startup_cost,omitempty"`
	PerCallCost       float64     `protobuf:"fixed64,17,opt,name=per_call_cost,proto3" json:"per_call_cost,omitempty"`
}

func (x *SubPlan) Reset() {
	*x = SubPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubPlan) ProtoMessage() {}

func (x *SubPlan) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubPlan.ProtoReflect.Descriptor instead.
func (*SubPlan) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{29}
}

func (x *SubPlan) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *SubPlan) GetSubLinkType() SubLinkType {
	if x != nil {
		return x.SubLinkType
	}
	return SubLinkType_SUB_LINK_TYPE_UNDEFINED
}

func (x *SubPlan) GetTestexpr() *Node {
	if x != nil {
		return x.Testexpr
	}
	return nil
}

func (x *SubPlan) GetParamIds() []*Node {
	if x != nil {
		return x.ParamIds
	}
	return nil
}

func (x *SubPlan) GetPlanId() int32 {
	if x != nil {
		return x.PlanId
	}
	return 0
}

func (x *SubPlan) GetPlanName() string {
	if x != nil {
		return x.PlanName
	}
	return ""
}

func (x *SubPlan) GetFirstColType() uint32 {
	if x != nil {
		return x.FirstColType
	}
	return 0
}

func (x *SubPlan) GetFirstColTypmod() int32 {
	if x != nil {
		return x.FirstColTypmod
	}
	return 0
}

func (x *SubPlan) GetFirstColCollation() uint32 {
	if x != nil {
		return x.FirstColCollation
	}
	return 0
}

func (x *SubPlan) GetUseHashTable() bool {
	if x != nil {
		return x.UseHashTable
	}
	return false
}

func (x *SubPlan) GetUnknownEqFalse() bool {
	if x != nil {
		return x.UnknownEqFalse
	}
	return false
}

func (x *SubPlan) GetParallelSafe() bool {
	if x != nil {
		return x.ParallelSafe
	}
	return false
}

func (x *SubPlan) GetSetParam() []*Node {
	if x != nil {
		return x.SetParam
	}
	return nil
}

func (x *SubPlan) GetParParam() []*Node {
	if x != nil {
		return x.ParParam
	}
	return nil
}

func (x *SubPlan) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *SubPlan) GetStartupCost() float64 {
	if x != nil {
		return x.StartupCost
	}
	return 0
}

func (x *SubPlan) GetPerCallCost() float64 {
	if x != nil {
		return x.PerCallCost
	}
	return 0
}

type AlternativeSubPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr      *Node   `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Subplans []*Node `protobuf:"bytes,2,rep,name=subplans,proto3" json:"subplans,omitempty"`
}

func (x *AlternativeSubPlan) Reset() {
	*x = AlternativeSubPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlternativeSubPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlternativeSubPlan) ProtoMessage() {}

func (x *AlternativeSubPlan) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlternativeSubPlan.ProtoReflect.Descriptor instead.
func (*AlternativeSubPlan) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{30}
}

func (x *AlternativeSubPlan) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *AlternativeSubPlan) GetSubplans() []*Node {
	if x != nil {
		return x.Subplans
	}
	return nil
}

type FieldSelect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr          *Node  `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Arg          *Node  `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	Fieldnum     int32  `protobuf:"varint,3,opt,name=fieldnum,proto3" json:"fieldnum,omitempty"`
	Resulttype   uint32 `protobuf:"varint,4,opt,name=resulttype,proto3" json:"resulttype,omitempty"`
	Resulttypmod int32  `protobuf:"varint,5,opt,name=resulttypmod,proto3" json:"resulttypmod,omitempty"`
	Resultcollid uint32 `protobuf:"varint,6,opt,name=resultcollid,proto3" json:"resultcollid,omitempty"`
}

func (x *FieldSelect) Reset() {
	*x = FieldSelect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldSelect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldSelect) ProtoMessage() {}

func (x *FieldSelect) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldSelect.ProtoReflect.Descriptor instead.
func (*FieldSelect) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{31}
}

func (x *FieldSelect) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *FieldSelect) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *FieldSelect) GetFieldnum() int32 {
	if x != nil {
		return x.Fieldnum
	}
	return 0
}

func (x *FieldSelect) GetResulttype() uint32 {
	if x != nil {
		return x.Resulttype
	}
	return 0
}

func (x *FieldSelect) GetResulttypmod() int32 {
	if x != nil {
		return x.Resulttypmod
	}
	return 0
}

func (x *FieldSelect) GetResultcollid() uint32 {
	if x != nil {
		return x.Resultcollid
	}
	return 0
}

type FieldStore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr        *Node   `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Arg        *Node   `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	Newvals    []*Node `protobuf:"bytes,3,rep,name=newvals,proto3" json:"newvals,omitempty"`
	Fieldnums  []*Node `protobuf:"bytes,4,rep,name=fieldnums,proto3" json:"fieldnums,omitempty"`
	Resulttype uint32  `protobuf:"varint,5,opt,name=resulttype,proto3" json:"resulttype,omitempty"`
}

func (x *FieldStore) Reset() {
	*x = FieldStore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldStore) ProtoMessage() {}

func (x *FieldStore) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldStore.ProtoReflect.Descriptor instead.
func (*FieldStore) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{32}
}

func (x *FieldStore) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *FieldStore) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *FieldStore) GetNewvals() []*Node {
	if x != nil {
		return x.Newvals
	}
	return nil
}

func (x *FieldStore) GetFieldnums() []*Node {
	if x != nil {
		return x.Fieldnums
	}
	return nil
}

func (x *FieldStore) GetResulttype() uint32 {
	if x != nil {
		return x.Resulttype
	}
	return 0
}

type RelabelType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr           *Node        `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Arg           *Node        `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	Resulttype    uint32       `protobuf:"varint,3,opt,name=resulttype,proto3" json:"resulttype,omitempty"`
	Resulttypmod  int32        `protobuf:"varint,4,opt,name=resulttypmod,proto3" json:"resulttypmod,omitempty"`
	Resultcollid  uint32       `protobuf:"varint,5,opt,name=resultcollid,proto3" json:"resultcollid,omitempty"`
	Relabelformat CoercionForm `protobuf:"varint,6,opt,name=relabelformat,proto3,enum=pg_query.CoercionForm" json:"relabelformat,omitempty"`
	Location      int32        `protobuf:"varint,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *RelabelType) Reset() {
	*x = RelabelType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelabelType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelabelType) ProtoMessage() {}

func (x *RelabelType) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelabelType.ProtoReflect.Descriptor instead.
func (*RelabelType) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{33}
}

func (x *RelabelType) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *RelabelType) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *RelabelType) GetResulttype() uint32 {
	if x != nil {
		return x.Resulttype
	}
	return 0
}

func (x *RelabelType) GetResulttypmod() int32 {
	if x != nil {
		return x.Resulttypmod
	}
	return 0
}

func (x *RelabelType) GetResultcollid() uint32 {
	if x != nil {
		return x.Resultcollid
	}
	return 0
}

func (x *RelabelType) GetRelabelformat() CoercionForm {
	if x != nil {
		return x.Relabelformat
	}
	return CoercionForm_COERCION_FORM_UNDEFINED
}

func (x *RelabelType) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type CoerceViaIO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr          *Node        `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Arg          *Node        `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	Resulttype   uint32       `protobuf:"varint,3,opt,name=resulttype,proto3" json:"resulttype,omitempty"`
	Resultcollid uint32       `protobuf:"varint,4,opt,name=resultcollid,proto3" json:"resultcollid,omitempty"`
	Coerceformat CoercionForm `protobuf:"varint,5,opt,name=coerceformat,proto3,enum=pg_query.CoercionForm" json:"coerceformat,omitempty"`
	Location     int32        `protobuf:"varint,6,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CoerceViaIO) Reset() {
	*x = CoerceViaIO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoerceViaIO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoerceViaIO) ProtoMessage() {}

func (x *CoerceViaIO) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoerceViaIO.ProtoReflect.Descriptor instead.
func (*CoerceViaIO) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{34}
}

func (x *CoerceViaIO) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *CoerceViaIO) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *CoerceViaIO) GetResulttype() uint32 {
	if x != nil {
		return x.Resulttype
	}
	return 0
}

func (x *CoerceViaIO) GetResultcollid() uint32 {
	if x != nil {
		return x.Resultcollid
	}
	return 0
}

func (x *CoerceViaIO) GetCoerceformat() CoercionForm {
	if x != nil {
		return x.Coerceformat
	}
	return CoercionForm_COERCION_FORM_UNDEFINED
}

func (x *CoerceViaIO) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type ArrayCoerceExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr          *Node        `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Arg          *Node        `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	Elemexpr     *Node        `protobuf:"bytes,3,opt,name=elemexpr,proto3" json:"elemexpr,omitempty"`
	Resulttype   uint32       `protobuf:"varint,4,opt,name=resulttype,proto3" json:"resulttype,omitempty"`
	Resulttypmod int32        `protobuf:"varint,5,opt,name=resulttypmod,proto3" json:"resulttypmod,omitempty"`
	Resultcollid uint32       `protobuf:"varint,6,opt,name=resultcollid,proto3" json:"resultcollid,omitempty"`
	Coerceformat CoercionForm `protobuf:"varint,7,opt,name=coerceformat,proto3,enum=pg_query.CoercionForm" json:"coerceformat,omitempty"`
	Location     int32        `protobuf:"varint,8,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ArrayCoerceExpr) Reset() {
	*x = ArrayCoerceExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayCoerceExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayCoerceExpr) ProtoMessage() {}

func (x *ArrayCoerceExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayCoerceExpr.ProtoReflect.Descriptor instead.
func (*ArrayCoerceExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{35}
}

func (x *ArrayCoerceExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *ArrayCoerceExpr) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *ArrayCoerceExpr) GetElemexpr() *Node {
	if x != nil {
		return x.Elemexpr
	}
	return nil
}

func (x *ArrayCoerceExpr) GetResulttype() uint32 {
	if x != nil {
		return x.Resulttype
	}
	return 0
}

func (x *ArrayCoerceExpr) GetResulttypmod() int32 {
	if x != nil {
		return x.Resulttypmod
	}
	return 0
}

func (x *ArrayCoerceExpr) GetResultcollid() uint32 {
	if x != nil {
		return x.Resultcollid
	}
	return 0
}

func (x *ArrayCoerceExpr) GetCoerceformat() CoercionForm {
	if x != nil {
		return x.Coerceformat
	}
	return CoercionForm_COERCION_FORM_UNDEFINED
}

func (x *ArrayCoerceExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type ConvertRowtypeExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr           *Node        `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Arg           *Node        `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	Resulttype    uint32       `protobuf:"varint,3,opt,name=resulttype,proto3" json:"resulttype,omitempty"`
	Convertformat CoercionForm `protobuf:"varint,4,opt,name=convertformat,proto3,enum=pg_query.CoercionForm" json:"convertformat,omitempty"`
	Location      int32        `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ConvertRowtypeExpr) Reset() {
	*x = ConvertRowtypeExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertRowtypeExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertRowtypeExpr) ProtoMessage() {}

func (x *ConvertRowtypeExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertRowtypeExpr.ProtoReflect.Descriptor instead.
func (*ConvertRowtypeExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{36}
}

func (x *ConvertRowtypeExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *ConvertRowtypeExpr) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *ConvertRowtypeExpr) GetResulttype() uint32 {
	if x != nil {
		return x.Resulttype
	}
	return 0
}

func (x *ConvertRowtypeExpr) GetConvertformat() CoercionForm {
	if x != nil {
		return x.Convertformat
	}
	return CoercionForm_COERCION_FORM_UNDEFINED
}

func (x *ConvertRowtypeExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type CollateExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr      *Node  `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Arg      *Node  `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	CollOid  uint32 `protobuf:"varint,3,opt,name=coll_oid,json=collOid,proto3" json:"coll_oid,omitempty"`
	Location int32  `protobuf:"varint,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CollateExpr) Reset() {
	*x = CollateExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollateExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollateExpr) ProtoMessage() {}

func (x *CollateExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollateExpr.ProtoReflect.Descriptor instead.
func (*CollateExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{37}
}

func (x *CollateExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *CollateExpr) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *CollateExpr) GetCollOid() uint32 {
	if x != nil {
		return x.CollOid
	}
	return 0
}

func (x *CollateExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type CaseExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr        *Node   `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Casetype   uint32  `protobuf:"varint,2,opt,name=casetype,proto3" json:"casetype,omitempty"`
	Casecollid uint32  `protobuf:"varint,3,opt,name=casecollid,proto3" json:"casecollid,omitempty"`
	Arg        *Node   `protobuf:"bytes,4,opt,name=arg,proto3" json:"arg,omitempty"`
	Args       []*Node `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
	Defresult  *Node   `protobuf:"bytes,6,opt,name=defresult,proto3" json:"defresult,omitempty"`
	Location   int32   `protobuf:"varint,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CaseExpr) Reset() {
	*x = CaseExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseExpr) ProtoMessage() {}

func (x *CaseExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseExpr.ProtoReflect.Descriptor instead.
func (*CaseExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{38}
}

func (x *CaseExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *CaseExpr) GetCasetype() uint32 {
	if x != nil {
		return x.Casetype
	}
	return 0
}

func (x *CaseExpr) GetCasecollid() uint32 {
	if x != nil {
		return x.Casecollid
	}
	return 0
}

func (x *CaseExpr) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *CaseExpr) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CaseExpr) GetDefresult() *Node {
	if x != nil {
		return x.Defresult
	}
	return nil
}

func (x *CaseExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type CaseWhen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr      *Node `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Expr     *Node `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	Result   *Node `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Location int32 `protobuf:"varint,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CaseWhen) Reset() {
	*x = CaseWhen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseWhen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseWhen) ProtoMessage() {}

func (x *CaseWhen) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseWhen.ProtoReflect.Descriptor instead.
func (*CaseWhen) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{39}
}

func (x *CaseWhen) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *CaseWhen) GetExpr() *Node {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *CaseWhen) GetResult() *Node {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CaseWhen) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type CaseTestExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr       *Node  `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	TypeId    uint32 `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	TypeMod   int32  `protobuf:"varint,3,opt,name=type_mod,json=typeMod,proto3" json:"type_mod,omitempty"`
	Collation uint32 `protobuf:"varint,4,opt,name=collation,proto3" json:"collation,omitempty"`
}

func (x *CaseTestExpr) Reset() {
	*x = CaseTestExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseTestExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseTestExpr) ProtoMessage() {}

func (x *CaseTestExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseTestExpr.ProtoReflect.Descriptor instead.
func (*CaseTestExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{40}
}

func (x *CaseTestExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *CaseTestExpr) GetTypeId() uint32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *CaseTestExpr) GetTypeMod() int32 {
	if x != nil {
		return x.TypeMod
	}
	return 0
}

func (x *CaseTestExpr) GetCollation() uint32 {
	if x != nil {
		return x.Collation
	}
	return 0
}

type ArrayExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr           *Node   `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	ArrayTypeid   uint32  `protobuf:"varint,2,opt,name=array_typeid,proto3" json:"array_typeid,omitempty"`
	ArrayCollid   uint32  `protobuf:"varint,3,opt,name=array_collid,proto3" json:"array_collid,omitempty"`
	ElementTypeid uint32  `protobuf:"varint,4,opt,name=element_typeid,proto3" json:"element_typeid,omitempty"`
	Elements      []*Node `protobuf:"bytes,5,rep,name=elements,proto3" json:"elements,omitempty"`
	Multidims     bool    `protobuf:"varint,6,opt,name=multidims,proto3" json:"multidims,omitempty"`
	Location      int32   `protobuf:"varint,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ArrayExpr) Reset() {
	*x = ArrayExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayExpr) ProtoMessage() {}

func (x *ArrayExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayExpr.ProtoReflect.Descriptor instead.
func (*ArrayExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{41}
}

func (x *ArrayExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *ArrayExpr) GetArrayTypeid() uint32 {
	if x != nil {
		return x.ArrayTypeid
	}
	return 0
}

func (x *ArrayExpr) GetArrayCollid() uint32 {
	if x != nil {
		return x.ArrayCollid
	}
	return 0
}

func (x *ArrayExpr) GetElementTypeid() uint32 {
	if x != nil {
		return x.ElementTypeid
	}
	return 0
}

func (x *ArrayExpr) GetElements() []*Node {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *ArrayExpr) GetMultidims() bool {
	if x != nil {
		return x.Multidims
	}
	return false
}

func (x *ArrayExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type RowExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr       *Node        `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Args      []*Node      `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	RowTypeid uint32       `protobuf:"varint,3,opt,name=row_typeid,proto3" json:"row_typeid,omitempty"`
	RowFormat CoercionForm `protobuf:"varint,4,opt,name=row_format,proto3,enum=pg_query.CoercionForm" json:"row_format,omitempty"`
	Colnames  []*Node      `protobuf:"bytes,5,rep,name=colnames,proto3" json:"colnames,omitempty"`
	Location  int32        `protobuf:"varint,6,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *RowExpr) Reset() {
	*x = RowExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowExpr) ProtoMessage() {}

func (x *RowExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowExpr.ProtoReflect.Descriptor instead.
func (*RowExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{42}
}

func (x *RowExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *RowExpr) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RowExpr) GetRowTypeid() uint32 {
	if x != nil {
		return x.RowTypeid
	}
	return 0
}

func (x *RowExpr) GetRowFormat() CoercionForm {
	if x != nil {
		return x.RowFormat
	}
	return CoercionForm_COERCION_FORM_UNDEFINED
}

func (x *RowExpr) GetColnames() []*Node {
	if x != nil {
		return x.Colnames
	}
	return nil
}

func (x *RowExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type RowCompareExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr          *Node          `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Rctype       RowCompareType `protobuf:"varint,2,opt,name=rctype,proto3,enum=pg_query.RowCompareType" json:"rctype,omitempty"`
	Opnos        []*Node        `protobuf:"bytes,3,rep,name=opnos,proto3" json:"opnos,omitempty"`
	Opfamilies   []*Node        `protobuf:"bytes,4,rep,name=opfamilies,proto3" json:"opfamilies,omitempty"`
	Inputcollids []*Node        `protobuf:"bytes,5,rep,name=inputcollids,proto3" json:"inputcollids,omitempty"`
	Largs        []*Node        `protobuf:"bytes,6,rep,name=largs,proto3" json:"largs,omitempty"`
	Rargs        []*Node        `protobuf:"bytes,7,rep,name=rargs,proto3" json:"rargs,omitempty"`
}

func (x *RowCompareExpr) Reset() {
	*x = RowCompareExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowCompareExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowCompareExpr) ProtoMessage() {}

func (x *RowCompareExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowCompareExpr.ProtoReflect.Descriptor instead.
func (*RowCompareExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{43}
}

func (x *RowCompareExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *RowCompareExpr) GetRctype() RowCompareType {
	if x != nil {
		return x.Rctype
	}
	return RowCompareType_ROW_COMPARE_TYPE_UNDEFINED
}

func (x *RowCompareExpr) GetOpnos() []*Node {
	if x != nil {
		return x.Opnos
	}
	return nil
}

func (x *RowCompareExpr) GetOpfamilies() []*Node {
	if x != nil {
		return x.Opfamilies
	}
	return nil
}

func (x *RowCompareExpr) GetInputcollids() []*Node {
	if x != nil {
		return x.Inputcollids
	}
	return nil
}

func (x *RowCompareExpr) GetLargs() []*Node {
	if x != nil {
		return x.Largs
	}
	return nil
}

func (x *RowCompareExpr) GetRargs() []*Node {
	if x != nil {
		return x.Rargs
	}
	return nil
}

type CoalesceExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr            *Node   `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Coalescetype   uint32  `protobuf:"varint,2,opt,name=coalescetype,proto3" json:"coalescetype,omitempty"`
	Coalescecollid uint32  `protobuf:"varint,3,opt,name=coalescecollid,proto3" json:"coalescecollid,omitempty"`
	Args           []*Node `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	Location       int32   `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CoalesceExpr) Reset() {
	*x = CoalesceExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoalesceExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoalesceExpr) ProtoMessage() {}

func (x *CoalesceExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoalesceExpr.ProtoReflect.Descriptor instead.
func (*CoalesceExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{44}
}

func (x *CoalesceExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *CoalesceExpr) GetCoalescetype() uint32 {
	if x != nil {
		return x.Coalescetype
	}
	return 0
}

func (x *CoalesceExpr) GetCoalescecollid() uint32 {
	if x != nil {
		return x.Coalescecollid
	}
	return 0
}

func (x *CoalesceExpr) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CoalesceExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type MinMaxExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr          *Node    `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Minmaxtype   uint32   `protobuf:"varint,2,opt,name=minmaxtype,proto3" json:"minmaxtype,omitempty"`
	Minmaxcollid uint32   `protobuf:"varint,3,opt,name=minmaxcollid,proto3" json:"minmaxcollid,omitempty"`
	Inputcollid  uint32   `protobuf:"varint,4,opt,name=inputcollid,proto3" json:"inputcollid,omitempty"`
	Op           MinMaxOp `protobuf:"varint,5,opt,name=op,proto3,enum=pg_query.MinMaxOp" json:"op,omitempty"`
	Args         []*Node  `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
	Location     int32    `protobuf:"varint,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *MinMaxExpr) Reset() {
	*x = MinMaxExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinMaxExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinMaxExpr) ProtoMessage() {}

func (x *MinMaxExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinMaxExpr.ProtoReflect.Descriptor instead.
func (*MinMaxExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{45}
}

func (x *MinMaxExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *MinMaxExpr) GetMinmaxtype() uint32 {
	if x != nil {
		return x.Minmaxtype
	}
	return 0
}

func (x *MinMaxExpr) GetMinmaxcollid() uint32 {
	if x != nil {
		return x.Minmaxcollid
	}
	return 0
}

func (x *MinMaxExpr) GetInputcollid() uint32 {
	if x != nil {
		return x.Inputcollid
	}
	return 0
}

func (x *MinMaxExpr) GetOp() MinMaxOp {
	if x != nil {
		return x.Op
	}
	return MinMaxOp_MIN_MAX_OP_UNDEFINED
}

func (x *MinMaxExpr) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *MinMaxExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type SQLValueFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr      *Node              `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Op       SQLValueFunctionOp `protobuf:"varint,2,opt,name=op,proto3,enum=pg_query.SQLValueFunctionOp" json:"op,omitempty"`
	Type     uint32             `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Typmod   int32              `protobuf:"varint,4,opt,name=typmod,proto3" json:"typmod,omitempty"`
	Location int32              `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *SQLValueFunction) Reset() {
	*x = SQLValueFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLValueFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLValueFunction) ProtoMessage() {}

func (x *SQLValueFunction) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLValueFunction.ProtoReflect.Descriptor instead.
func (*SQLValueFunction) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{46}
}

func (x *SQLValueFunction) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *SQLValueFunction) GetOp() SQLValueFunctionOp {
	if x != nil {
		return x.Op
	}
	return SQLValueFunctionOp_SQLVALUE_FUNCTION_OP_UNDEFINED
}

func (x *SQLValueFunction) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SQLValueFunction) GetTypmod() int32 {
	if x != nil {
		return x.Typmod
	}
	return 0
}

func (x *SQLValueFunction) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type XmlExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr       *Node         `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Op        XmlExprOp     `protobuf:"varint,2,opt,name=op,proto3,enum=pg_query.XmlExprOp" json:"op,omitempty"`
	Name      string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	NamedArgs []*Node       `protobuf:"bytes,4,rep,name=named_args,proto3" json:"named_args,omitempty"`
	ArgNames  []*Node       `protobuf:"bytes,5,rep,name=arg_names,proto3" json:"arg_names,omitempty"`
	Args      []*Node       `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
	Xmloption XmlOptionType `protobuf:"varint,7,opt,name=xmloption,proto3,enum=pg_query.XmlOptionType" json:"xmloption,omitempty"`
	Type      uint32        `protobuf:"varint,8,opt,name=type,proto3" json:"type,omitempty"`
	Typmod    int32         `protobuf:"varint,9,opt,name=typmod,proto3" json:"typmod,omitempty"`
	Location  int32         `protobuf:"varint,10,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *XmlExpr) Reset() {
	*x = XmlExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XmlExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XmlExpr) ProtoMessage() {}

func (x *XmlExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XmlExpr.ProtoReflect.Descriptor instead.
func (*XmlExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{47}
}

func (x *XmlExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *XmlExpr) GetOp() XmlExprOp {
	if x != nil {
		return x.Op
	}
	return XmlExprOp_XML_EXPR_OP_UNDEFINED
}

func (x *XmlExpr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *XmlExpr) GetNamedArgs() []*Node {
	if x != nil {
		return x.NamedArgs
	}
	return nil
}

func (x *XmlExpr) GetArgNames() []*Node {
	if x != nil {
		return x.ArgNames
	}
	return nil
}

func (x *XmlExpr) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *XmlExpr) GetXmloption() XmlOptionType {
	if x != nil {
		return x.Xmloption
	}
	return XmlOptionType_XML_OPTION_TYPE_UNDEFINED
}

func (x *XmlExpr) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *XmlExpr) GetTypmod() int32 {
	if x != nil {
		return x.Typmod
	}
	return 0
}

func (x *XmlExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type NullTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr          *Node        `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Arg          *Node        `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	Nulltesttype NullTestType `protobuf:"varint,3,opt,name=nulltesttype,proto3,enum=pg_query.NullTestType" json:"nulltesttype,omitempty"`
	Argisrow     bool         `protobuf:"varint,4,opt,name=argisrow,proto3" json:"argisrow,omitempty"`
	Location     int32        `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *NullTest) Reset() {
	*x = NullTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullTest) ProtoMessage() {}

func (x *NullTest) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullTest.ProtoReflect.Descriptor instead.
func (*NullTest) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{48}
}

func (x *NullTest) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *NullTest) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *NullTest) GetNulltesttype() NullTestType {
	if x != nil {
		return x.Nulltesttype
	}
	return NullTestType_NULL_TEST_TYPE_UNDEFINED
}

func (x *NullTest) GetArgisrow() bool {
	if x != nil {
		return x.Argisrow
	}
	return false
}

func (x *NullTest) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type BooleanTest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr          *Node        `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Arg          *Node        `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	Booltesttype BoolTestType `protobuf:"varint,3,opt,name=booltesttype,proto3,enum=pg_query.BoolTestType" json:"booltesttype,omitempty"`
	Location     int32        `protobuf:"varint,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *BooleanTest) Reset() {
	*x = BooleanTest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanTest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanTest) ProtoMessage() {}

func (x *BooleanTest) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanTest.ProtoReflect.Descriptor instead.
func (*BooleanTest) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{49}
}

func (x *BooleanTest) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *BooleanTest) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *BooleanTest) GetBooltesttype() BoolTestType {
	if x != nil {
		return x.Booltesttype
	}
	return BoolTestType_BOOL_TEST_TYPE_UNDEFINED
}

func (x *BooleanTest) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type CoerceToDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr            *Node        `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Arg            *Node        `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
	Resulttype     uint32       `protobuf:"varint,3,opt,name=resulttype,proto3" json:"resulttype,omitempty"`
	Resulttypmod   int32        `protobuf:"varint,4,opt,name=resulttypmod,proto3" json:"resulttypmod,omitempty"`
	Resultcollid   uint32       `protobuf:"varint,5,opt,name=resultcollid,proto3" json:"resultcollid,omitempty"`
	Coercionformat CoercionForm `protobuf:"varint,6,opt,name=coercionformat,proto3,enum=pg_query.CoercionForm" json:"coercionformat,omitempty"`
	Location       int32        `protobuf:"varint,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CoerceToDomain) Reset() {
	*x = CoerceToDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoerceToDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoerceToDomain) ProtoMessage() {}

func (x *CoerceToDomain) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoerceToDomain.ProtoReflect.Descriptor instead.
func (*CoerceToDomain) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{50}
}

func (x *CoerceToDomain) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *CoerceToDomain) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *CoerceToDomain) GetResulttype() uint32 {
	if x != nil {
		return x.Resulttype
	}
	return 0
}

func (x *CoerceToDomain) GetResulttypmod() int32 {
	if x != nil {
		return x.Resulttypmod
	}
	return 0
}

func (x *CoerceToDomain) GetResultcollid() uint32 {
	if x != nil {
		return x.Resultcollid
	}
	return 0
}

func (x *CoerceToDomain) GetCoercionformat() CoercionForm {
	if x != nil {
		return x.Coercionformat
	}
	return CoercionForm_COERCION_FORM_UNDEFINED
}

func (x *CoerceToDomain) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type CoerceToDomainValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr       *Node  `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	TypeId    uint32 `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	TypeMod   int32  `protobuf:"varint,3,opt,name=type_mod,json=typeMod,proto3" json:"type_mod,omitempty"`
	Collation uint32 `protobuf:"varint,4,opt,name=collation,proto3" json:"collation,omitempty"`
	Location  int32  `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CoerceToDomainValue) Reset() {
	*x = CoerceToDomainValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoerceToDomainValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoerceToDomainValue) ProtoMessage() {}

func (x *CoerceToDomainValue) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoerceToDomainValue.ProtoReflect.Descriptor instead.
func (*CoerceToDomainValue) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{51}
}

func (x *CoerceToDomainValue) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *CoerceToDomainValue) GetTypeId() uint32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *CoerceToDomainValue) GetTypeMod() int32 {
	if x != nil {
		return x.TypeMod
	}
	return 0
}

func (x *CoerceToDomainValue) GetCollation() uint32 {
	if x != nil {
		return x.Collation
	}
	return 0
}

func (x *CoerceToDomainValue) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type SetToDefault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr       *Node  `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	TypeId    uint32 `protobuf:"varint,2,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	TypeMod   int32  `protobuf:"varint,3,opt,name=type_mod,json=typeMod,proto3" json:"type_mod,omitempty"`
	Collation uint32 `protobuf:"varint,4,opt,name=collation,proto3" json:"collation,omitempty"`
	Location  int32  `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *SetToDefault) Reset() {
	*x = SetToDefault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetToDefault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetToDefault) ProtoMessage() {}

func (x *SetToDefault) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetToDefault.ProtoReflect.Descriptor instead.
func (*SetToDefault) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{52}
}

func (x *SetToDefault) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *SetToDefault) GetTypeId() uint32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

func (x *SetToDefault) GetTypeMod() int32 {
	if x != nil {
		return x.TypeMod
	}
	return 0
}

func (x *SetToDefault) GetCollation() uint32 {
	if x != nil {
		return x.Collation
	}
	return 0
}

func (x *SetToDefault) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type CurrentOfExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr         *Node  `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Cvarno      uint32 `protobuf:"varint,2,opt,name=cvarno,proto3" json:"cvarno,omitempty"`
	CursorName  string `protobuf:"bytes,3,opt,name=cursor_name,proto3" json:"cursor_name,omitempty"`
	CursorParam int32  `protobuf:"varint,4,opt,name=cursor_param,proto3" json:"cursor_param,omitempty"`
}

func (x *CurrentOfExpr) Reset() {
	*x = CurrentOfExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrentOfExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrentOfExpr) ProtoMessage() {}

func (x *CurrentOfExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrentOfExpr.ProtoReflect.Descriptor instead.
func (*CurrentOfExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{53}
}

func (x *CurrentOfExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *CurrentOfExpr) GetCvarno() uint32 {
	if x != nil {
		return x.Cvarno
	}
	return 0
}

func (x *CurrentOfExpr) GetCursorName() string {
	if x != nil {
		return x.CursorName
	}
	return ""
}

func (x *CurrentOfExpr) GetCursorParam() int32 {
	if x != nil {
		return x.CursorParam
	}
	return 0
}

type NextValueExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr    *Node  `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Seqid  uint32 `protobuf:"varint,2,opt,name=seqid,proto3" json:"seqid,omitempty"`
	TypeId uint32 `protobuf:"varint,3,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
}

func (x *NextValueExpr) Reset() {
	*x = NextValueExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextValueExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextValueExpr) ProtoMessage() {}

func (x *NextValueExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextValueExpr.ProtoReflect.Descriptor instead.
func (*NextValueExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{54}
}

func (x *NextValueExpr) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *NextValueExpr) GetSeqid() uint32 {
	if x != nil {
		return x.Seqid
	}
	return 0
}

func (x *NextValueExpr) GetTypeId() uint32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

type InferenceElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr          *Node  `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Expr         *Node  `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	Infercollid  uint32 `protobuf:"varint,3,opt,name=infercollid,proto3" json:"infercollid,omitempty"`
	Inferopclass uint32 `protobuf:"varint,4,opt,name=inferopclass,proto3" json:"inferopclass,omitempty"`
}

func (x *InferenceElem) Reset() {
	*x = InferenceElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferenceElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferenceElem) ProtoMessage() {}

func (x *InferenceElem) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferenceElem.ProtoReflect.Descriptor instead.
func (*InferenceElem) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{55}
}

func (x *InferenceElem) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *InferenceElem) GetExpr() *Node {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *InferenceElem) GetInfercollid() uint32 {
	if x != nil {
		return x.Infercollid
	}
	return 0
}

func (x *InferenceElem) GetInferopclass() uint32 {
	if x != nil {
		return x.Inferopclass
	}
	return 0
}

type TargetEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpr             *Node  `protobuf:"bytes,1,opt,name=xpr,proto3" json:"xpr,omitempty"`
	Expr            *Node  `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	Resno           int32  `protobuf:"varint,3,opt,name=resno,proto3" json:"resno,omitempty"`
	Resname         string `protobuf:"bytes,4,opt,name=resname,proto3" json:"resname,omitempty"`
	Ressortgroupref uint32 `protobuf:"varint,5,opt,name=ressortgroupref,proto3" json:"ressortgroupref,omitempty"`
	Resorigtbl      uint32 `protobuf:"varint,6,opt,name=resorigtbl,proto3" json:"resorigtbl,omitempty"`
	Resorigcol      int32  `protobuf:"varint,7,opt,name=resorigcol,proto3" json:"resorigcol,omitempty"`
	Resjunk         bool   `protobuf:"varint,8,opt,name=resjunk,proto3" json:"resjunk,omitempty"`
}

func (x *TargetEntry) Reset() {
	*x = TargetEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetEntry) ProtoMessage() {}

func (x *TargetEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetEntry.ProtoReflect.Descriptor instead.
func (*TargetEntry) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{56}
}

func (x *TargetEntry) GetXpr() *Node {
	if x != nil {
		return x.Xpr
	}
	return nil
}

func (x *TargetEntry) GetExpr() *Node {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *TargetEntry) GetResno() int32 {
	if x != nil {
		return x.Resno
	}
	return 0
}

func (x *TargetEntry) GetResname() string {
	if x != nil {
		return x.Resname
	}
	return ""
}

func (x *TargetEntry) GetRessortgroupref() uint32 {
	if x != nil {
		return x.Ressortgroupref
	}
	return 0
}

func (x *TargetEntry) GetResorigtbl() uint32 {
	if x != nil {
		return x.Resorigtbl
	}
	return 0
}

func (x *TargetEntry) GetResorigcol() int32 {
	if x != nil {
		return x.Resorigcol
	}
	return 0
}

func (x *TargetEntry) GetResjunk() bool {
	if x != nil {
		return x.Resjunk
	}
	return false
}

type RangeTblRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rtindex int32 `protobuf:"varint,1,opt,name=rtindex,proto3" json:"rtindex,omitempty"`
}

func (x *RangeTblRef) Reset() {
	*x = RangeTblRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeTblRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeTblRef) ProtoMessage() {}

func (x *RangeTblRef) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeTblRef.ProtoReflect.Descriptor instead.
func (*RangeTblRef) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{57}
}

func (x *RangeTblRef) GetRtindex() int32 {
	if x != nil {
		return x.Rtindex
	}
	return 0
}

type JoinExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jointype       JoinType `protobuf:"varint,1,opt,name=jointype,proto3,enum=pg_query.JoinType" json:"jointype,omitempty"`
	IsNatural      bool     `protobuf:"varint,2,opt,name=is_natural,json=isNatural,proto3" json:"is_natural,omitempty"`
	Larg           *Node    `protobuf:"bytes,3,opt,name=larg,proto3" json:"larg,omitempty"`
	Rarg           *Node    `protobuf:"bytes,4,opt,name=rarg,proto3" json:"rarg,omitempty"`
	UsingClause    []*Node  `protobuf:"bytes,5,rep,name=using_clause,json=usingClause,proto3" json:"using_clause,omitempty"`
	JoinUsingAlias *Alias   `protobuf:"bytes,6,opt,name=join_using_alias,proto3" json:"join_using_alias,omitempty"`
	Quals          *Node    `protobuf:"bytes,7,opt,name=quals,proto3" json:"quals,omitempty"`
	Alias          *Alias   `protobuf:"bytes,8,opt,name=alias,proto3" json:"alias,omitempty"`
	Rtindex        int32    `protobuf:"varint,9,opt,name=rtindex,proto3" json:"rtindex,omitempty"`
}

func (x *JoinExpr) Reset() {
	*x = JoinExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinExpr) ProtoMessage() {}

func (x *JoinExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinExpr.ProtoReflect.Descriptor instead.
func (*JoinExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{58}
}

func (x *JoinExpr) GetJointype() JoinType {
	if x != nil {
		return x.Jointype
	}
	return JoinType_JOIN_TYPE_UNDEFINED
}

func (x *JoinExpr) GetIsNatural() bool {
	if x != nil {
		return x.IsNatural
	}
	return false
}

func (x *JoinExpr) GetLarg() *Node {
	if x != nil {
		return x.Larg
	}
	return nil
}

func (x *JoinExpr) GetRarg() *Node {
	if x != nil {
		return x.Rarg
	}
	return nil
}

func (x *JoinExpr) GetUsingClause() []*Node {
	if x != nil {
		return x.UsingClause
	}
	return nil
}

func (x *JoinExpr) GetJoinUsingAlias() *Alias {
	if x != nil {
		return x.JoinUsingAlias
	}
	return nil
}

func (x *JoinExpr) GetQuals() *Node {
	if x != nil {
		return x.Quals
	}
	return nil
}

func (x *JoinExpr) GetAlias() *Alias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *JoinExpr) GetRtindex() int32 {
	if x != nil {
		return x.Rtindex
	}
	return 0
}

type FromExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fromlist []*Node `protobuf:"bytes,1,rep,name=fromlist,proto3" json:"fromlist,omitempty"`
	Quals    *Node   `protobuf:"bytes,2,opt,name=quals,proto3" json:"quals,omitempty"`
}

func (x *FromExpr) Reset() {
	*x = FromExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FromExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromExpr) ProtoMessage() {}

func (x *FromExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromExpr.ProtoReflect.Descriptor instead.
func (*FromExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{59}
}

func (x *FromExpr) GetFromlist() []*Node {
	if x != nil {
		return x.Fromlist
	}
	return nil
}

func (x *FromExpr) GetQuals() *Node {
	if x != nil {
		return x.Quals
	}
	return nil
}

type OnConflictExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action          OnConflictAction `protobuf:"varint,1,opt,name=action,proto3,enum=pg_query.OnConflictAction" json:"action,omitempty"`
	ArbiterElems    []*Node          `protobuf:"bytes,2,rep,name=arbiter_elems,json=arbiterElems,proto3" json:"arbiter_elems,omitempty"`
	ArbiterWhere    *Node            `protobuf:"bytes,3,opt,name=arbiter_where,json=arbiterWhere,proto3" json:"arbiter_where,omitempty"`
	Constraint      uint32           `protobuf:"varint,4,opt,name=constraint,proto3" json:"constraint,omitempty"`
	OnConflictSet   []*Node          `protobuf:"bytes,5,rep,name=on_conflict_set,json=onConflictSet,proto3" json:"on_conflict_set,omitempty"`
	OnConflictWhere *Node            `protobuf:"bytes,6,opt,name=on_conflict_where,json=onConflictWhere,proto3" json:"on_conflict_where,omitempty"`
	ExclRelIndex    int32            `protobuf:"varint,7,opt,name=excl_rel_index,json=exclRelIndex,proto3" json:"excl_rel_index,omitempty"`
	ExclRelTlist    []*Node          `protobuf:"bytes,8,rep,name=excl_rel_tlist,json=exclRelTlist,proto3" json:"excl_rel_tlist,omitempty"`
}

func (x *OnConflictExpr) Reset() {
	*x = OnConflictExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnConflictExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnConflictExpr) ProtoMessage() {}

func (x *OnConflictExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnConflictExpr.ProtoReflect.Descriptor instead.
func (*OnConflictExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{60}
}

func (x *OnConflictExpr) GetAction() OnConflictAction {
	if x != nil {
		return x.Action
	}
	return OnConflictAction_ON_CONFLICT_ACTION_UNDEFINED
}

func (x *OnConflictExpr) GetArbiterElems() []*Node {
	if x != nil {
		return x.ArbiterElems
	}
	return nil
}

func (x *OnConflictExpr) GetArbiterWhere() *Node {
	if x != nil {
		return x.ArbiterWhere
	}
	return nil
}

func (x *OnConflictExpr) GetConstraint() uint32 {
	if x != nil {
		return x.Constraint
	}
	return 0
}

func (x *OnConflictExpr) GetOnConflictSet() []*Node {
	if x != nil {
		return x.OnConflictSet
	}
	return nil
}

func (x *OnConflictExpr) GetOnConflictWhere() *Node {
	if x != nil {
		return x.OnConflictWhere
	}
	return nil
}

func (x *OnConflictExpr) GetExclRelIndex() int32 {
	if x != nil {
		return x.ExclRelIndex
	}
	return 0
}

func (x *OnConflictExpr) GetExclRelTlist() []*Node {
	if x != nil {
		return x.ExclRelTlist
	}
	return nil
}

type IntoClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rel            *RangeVar      `protobuf:"bytes,1,opt,name=rel,proto3" json:"rel,omitempty"`
	ColNames       []*Node        `protobuf:"bytes,2,rep,name=col_names,json=colNames,proto3" json:"col_names,omitempty"`
	AccessMethod   string         `protobuf:"bytes,3,opt,name=access_method,json=accessMethod,proto3" json:"access_method,omitempty"`
	Options        []*Node        `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	OnCommit       OnCommitAction `protobuf:"varint,5,opt,name=on_commit,json=onCommit,proto3,enum=pg_query.OnCommitAction" json:"on_commit,omitempty"`
	TableSpaceName string         `protobuf:"bytes,6,opt,name=table_space_name,json=tableSpaceName,proto3" json:"table_space_name,omitempty"`
	ViewQuery      *Node          `protobuf:"bytes,7,opt,name=view_query,json=viewQuery,proto3" json:"view_query,omitempty"`
	SkipData       bool           `protobuf:"varint,8,opt,name=skip_data,json=skipData,proto3" json:"skip_data,omitempty"`
}

func (x *IntoClause) Reset() {
	*x = IntoClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntoClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntoClause) ProtoMessage() {}

func (x *IntoClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntoClause.ProtoReflect.Descriptor instead.
func (*IntoClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{61}
}

func (x *IntoClause) GetRel() *RangeVar {
	if x != nil {
		return x.Rel
	}
	return nil
}

func (x *IntoClause) GetColNames() []*Node {
	if x != nil {
		return x.ColNames
	}
	return nil
}

func (x *IntoClause) GetAccessMethod() string {
	if x != nil {
		return x.AccessMethod
	}
	return ""
}

func (x *IntoClause) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *IntoClause) GetOnCommit() OnCommitAction {
	if x != nil {
		return x.OnCommit
	}
	return OnCommitAction_ON_COMMIT_ACTION_UNDEFINED
}

func (x *IntoClause) GetTableSpaceName() string {
	if x != nil {
		return x.TableSpaceName
	}
	return ""
}

func (x *IntoClause) GetViewQuery() *Node {
	if x != nil {
		return x.ViewQuery
	}
	return nil
}

func (x *IntoClause) GetSkipData() bool {
	if x != nil {
		return x.SkipData
	}
	return false
}

type MergeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matched      bool           `protobuf:"varint,1,opt,name=matched,proto3" json:"matched,omitempty"`
	CommandType  CmdType        `protobuf:"varint,2,opt,name=command_type,json=commandType,proto3,enum=pg_query.CmdType" json:"command_type,omitempty"`
	Override     OverridingKind `protobuf:"varint,3,opt,name=override,proto3,enum=pg_query.OverridingKind" json:"override,omitempty"`
	Qual         *Node          `protobuf:"bytes,4,opt,name=qual,proto3" json:"qual,omitempty"`
	TargetList   []*Node        `protobuf:"bytes,5,rep,name=target_list,json=targetList,proto3" json:"target_list,omitempty"`
	UpdateColnos []*Node        `protobuf:"bytes,6,rep,name=update_colnos,json=updateColnos,proto3" json:"update_colnos,omitempty"`
}

func (x *MergeAction) Reset() {
	*x = MergeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeAction) ProtoMessage() {}

func (x *MergeAction) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeAction.ProtoReflect.Descriptor instead.
func (*MergeAction) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{62}
}

func (x *MergeAction) GetMatched() bool {
	if x != nil {
		return x.Matched
	}
	return false
}

func (x *MergeAction) GetCommandType() CmdType {
	if x != nil {
		return x.CommandType
	}
	return CmdType_CMD_TYPE_UNDEFINED
}

func (x *MergeAction) GetOverride() OverridingKind {
	if x != nil {
		return x.Override
	}
	return OverridingKind_OVERRIDING_KIND_UNDEFINED
}

func (x *MergeAction) GetQual() *Node {
	if x != nil {
		return x.Qual
	}
	return nil
}

func (x *MergeAction) GetTargetList() []*Node {
	if x != nil {
		return x.TargetList
	}
	return nil
}

func (x *MergeAction) GetUpdateColnos() []*Node {
	if x != nil {
		return x.UpdateColnos
	}
	return nil
}

type RawStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stmt         *Node `protobuf:"bytes,1,opt,name=stmt,proto3" json:"stmt,omitempty"`
	StmtLocation int32 `protobuf:"varint,2,opt,name=stmt_location,proto3" json:"stmt_location,omitempty"`
	StmtLen      int32 `protobuf:"varint,3,opt,name=stmt_len,proto3" json:"stmt_len,omitempty"`
}

func (x *RawStmt) Reset() {
	*x = RawStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawStmt) ProtoMessage() {}

func (x *RawStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawStmt.ProtoReflect.Descriptor instead.
func (*RawStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{63}
}

func (x *RawStmt) GetStmt() *Node {
	if x != nil {
		return x.Stmt
	}
	return nil
}

func (x *RawStmt) GetStmtLocation() int32 {
	if x != nil {
		return x.StmtLocation
	}
	return 0
}

func (x *RawStmt) GetStmtLen() int32 {
	if x != nil {
		return x.StmtLen
	}
	return 0
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandType       CmdType         `protobuf:"varint,1,opt,name=command_type,json=commandType,proto3,enum=pg_query.CmdType" json:"command_type,omitempty"`
	QuerySource       QuerySource     `protobuf:"varint,2,opt,name=query_source,json=querySource,proto3,enum=pg_query.QuerySource" json:"query_source,omitempty"`
	CanSetTag         bool            `protobuf:"varint,3,opt,name=can_set_tag,json=canSetTag,proto3" json:"can_set_tag,omitempty"`
	UtilityStmt       *Node           `protobuf:"bytes,4,opt,name=utility_stmt,json=utilityStmt,proto3" json:"utility_stmt,omitempty"`
	ResultRelation    int32           `protobuf:"varint,5,opt,name=result_relation,json=resultRelation,proto3" json:"result_relation,omitempty"`
	HasAggs           bool            `protobuf:"varint,6,opt,name=has_aggs,json=hasAggs,proto3" json:"has_aggs,omitempty"`
	HasWindowFuncs    bool            `protobuf:"varint,7,opt,name=has_window_funcs,json=hasWindowFuncs,proto3" json:"has_window_funcs,omitempty"`
	HasTargetSrfs     bool            `protobuf:"varint,8,opt,name=has_target_srfs,json=hasTargetSRFs,proto3" json:"has_target_srfs,omitempty"`
	HasSubLinks       bool            `protobuf:"varint,9,opt,name=has_sub_links,json=hasSubLinks,proto3" json:"has_sub_links,omitempty"`
	HasDistinctOn     bool            `protobuf:"varint,10,opt,name=has_distinct_on,json=hasDistinctOn,proto3" json:"has_distinct_on,omitempty"`
	HasRecursive      bool            `protobuf:"varint,11,opt,name=has_recursive,json=hasRecursive,proto3" json:"has_recursive,omitempty"`
	HasModifyingCte   bool            `protobuf:"varint,12,opt,name=has_modifying_cte,json=hasModifyingCTE,proto3" json:"has_modifying_cte,omitempty"`
	HasForUpdate      bool            `protobuf:"varint,13,opt,name=has_for_update,json=hasForUpdate,proto3" json:"has_for_update,omitempty"`
	HasRowSecurity    bool            `protobuf:"varint,14,opt,name=has_row_security,json=hasRowSecurity,proto3" json:"has_row_security,omitempty"`
	IsReturn          bool            `protobuf:"varint,15,opt,name=is_return,json=isReturn,proto3" json:"is_return,omitempty"`
	CteList           []*Node         `protobuf:"bytes,16,rep,name=cte_list,json=cteList,proto3" json:"cte_list,omitempty"`
	Rtable            []*Node         `protobuf:"bytes,17,rep,name=rtable,proto3" json:"rtable,omitempty"`
	Jointree          *FromExpr       `protobuf:"bytes,18,opt,name=jointree,proto3" json:"jointree,omitempty"`
	MergeActionList   []*Node         `protobuf:"bytes,19,rep,name=merge_action_list,json=mergeActionList,proto3" json:"merge_action_list,omitempty"`
	MergeUseOuterJoin bool            `protobuf:"varint,20,opt,name=merge_use_outer_join,json=mergeUseOuterJoin,proto3" json:"merge_use_outer_join,omitempty"`
	TargetList        []*Node         `protobuf:"bytes,21,rep,name=target_list,json=targetList,proto3" json:"target_list,omitempty"`
	Override          OverridingKind  `protobuf:"varint,22,opt,name=override,proto3,enum=pg_query.OverridingKind" json:"override,omitempty"`
	OnConflict        *OnConflictExpr `protobuf:"bytes,23,opt,name=on_conflict,json=onConflict,proto3" json:"on_conflict,omitempty"`
	ReturningList     []*Node         `protobuf:"bytes,24,rep,name=returning_list,json=returningList,proto3" json:"returning_list,omitempty"`
	GroupClause       []*Node         `protobuf:"bytes,25,rep,name=group_clause,json=groupClause,proto3" json:"group_clause,omitempty"`
	GroupDistinct     bool            `protobuf:"varint,26,opt,name=group_distinct,json=groupDistinct,proto3" json:"group_distinct,omitempty"`
	GroupingSets      []*Node         `protobuf:"bytes,27,rep,name=grouping_sets,json=groupingSets,proto3" json:"grouping_sets,omitempty"`
	HavingQual        *Node           `protobuf:"bytes,28,opt,name=having_qual,json=havingQual,proto3" json:"having_qual,omitempty"`
	WindowClause      []*Node         `protobuf:"bytes,29,rep,name=window_clause,json=windowClause,proto3" json:"window_clause,omitempty"`
	DistinctClause    []*Node         `protobuf:"bytes,30,rep,name=distinct_clause,json=distinctClause,proto3" json:"distinct_clause,omitempty"`
	SortClause        []*Node         `protobuf:"bytes,31,rep,name=sort_clause,json=sortClause,proto3" json:"sort_clause,omitempty"`
	LimitOffset       *Node           `protobuf:"bytes,32,opt,name=limit_offset,json=limitOffset,proto3" json:"limit_offset,omitempty"`
	LimitCount        *Node           `protobuf:"bytes,33,opt,name=limit_count,json=limitCount,proto3" json:"limit_count,omitempty"`
	LimitOption       LimitOption     `protobuf:"varint,34,opt,name=limit_option,json=limitOption,proto3,enum=pg_query.LimitOption" json:"limit_option,omitempty"`
	RowMarks          []*Node         `protobuf:"bytes,35,rep,name=row_marks,json=rowMarks,proto3" json:"row_marks,omitempty"`
	SetOperations     *Node           `protobuf:"bytes,36,opt,name=set_operations,json=setOperations,proto3" json:"set_operations,omitempty"`
	ConstraintDeps    []*Node         `protobuf:"bytes,37,rep,name=constraint_deps,json=constraintDeps,proto3" json:"constraint_deps,omitempty"`
	WithCheckOptions  []*Node         `protobuf:"bytes,38,rep,name=with_check_options,json=withCheckOptions,proto3" json:"with_check_options,omitempty"`
	StmtLocation      int32           `protobuf:"varint,39,opt,name=stmt_location,proto3" json:"stmt_location,omitempty"`
	StmtLen           int32           `protobuf:"varint,40,opt,name=stmt_len,proto3" json:"stmt_len,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{64}
}

func (x *Query) GetCommandType() CmdType {
	if x != nil {
		return x.CommandType
	}
	return CmdType_CMD_TYPE_UNDEFINED
}

func (x *Query) GetQuerySource() QuerySource {
	if x != nil {
		return x.QuerySource
	}
	return QuerySource_QUERY_SOURCE_UNDEFINED
}

func (x *Query) GetCanSetTag() bool {
	if x != nil {
		return x.CanSetTag
	}
	return false
}

func (x *Query) GetUtilityStmt() *Node {
	if x != nil {
		return x.UtilityStmt
	}
	return nil
}

func (x *Query) GetResultRelation() int32 {
	if x != nil {
		return x.ResultRelation
	}
	return 0
}

func (x *Query) GetHasAggs() bool {
	if x != nil {
		return x.HasAggs
	}
	return false
}

func (x *Query) GetHasWindowFuncs() bool {
	if x != nil {
		return x.HasWindowFuncs
	}
	return false
}

func (x *Query) GetHasTargetSrfs() bool {
	if x != nil {
		return x.HasTargetSrfs
	}
	return false
}

func (x *Query) GetHasSubLinks() bool {
	if x != nil {
		return x.HasSubLinks
	}
	return false
}

func (x *Query) GetHasDistinctOn() bool {
	if x != nil {
		return x.HasDistinctOn
	}
	return false
}

func (x *Query) GetHasRecursive() bool {
	if x != nil {
		return x.HasRecursive
	}
	return false
}

func (x *Query) GetHasModifyingCte() bool {
	if x != nil {
		return x.HasModifyingCte
	}
	return false
}

func (x *Query) GetHasForUpdate() bool {
	if x != nil {
		return x.HasForUpdate
	}
	return false
}

func (x *Query) GetHasRowSecurity() bool {
	if x != nil {
		return x.HasRowSecurity
	}
	return false
}

func (x *Query) GetIsReturn() bool {
	if x != nil {
		return x.IsReturn
	}
	return false
}

func (x *Query) GetCteList() []*Node {
	if x != nil {
		return x.CteList
	}
	return nil
}

func (x *Query) GetRtable() []*Node {
	if x != nil {
		return x.Rtable
	}
	return nil
}

func (x *Query) GetJointree() *FromExpr {
	if x != nil {
		return x.Jointree
	}
	return nil
}

func (x *Query) GetMergeActionList() []*Node {
	if x != nil {
		return x.MergeActionList
	}
	return nil
}

func (x *Query) GetMergeUseOuterJoin() bool {
	if x != nil {
		return x.MergeUseOuterJoin
	}
	return false
}

func (x *Query) GetTargetList() []*Node {
	if x != nil {
		return x.TargetList
	}
	return nil
}

func (x *Query) GetOverride() OverridingKind {
	if x != nil {
		return x.Override
	}
	return OverridingKind_OVERRIDING_KIND_UNDEFINED
}

func (x *Query) GetOnConflict() *OnConflictExpr {
	if x != nil {
		return x.OnConflict
	}
	return nil
}

func (x *Query) GetReturningList() []*Node {
	if x != nil {
		return x.ReturningList
	}
	return nil
}

func (x *Query) GetGroupClause() []*Node {
	if x != nil {
		return x.GroupClause
	}
	return nil
}

func (x *Query) GetGroupDistinct() bool {
	if x != nil {
		return x.GroupDistinct
	}
	return false
}

func (x *Query) GetGroupingSets() []*Node {
	if x != nil {
		return x.GroupingSets
	}
	return nil
}

func (x *Query) GetHavingQual() *Node {
	if x != nil {
		return x.HavingQual
	}
	return nil
}

func (x *Query) GetWindowClause() []*Node {
	if x != nil {
		return x.WindowClause
	}
	return nil
}

func (x *Query) GetDistinctClause() []*Node {
	if x != nil {
		return x.DistinctClause
	}
	return nil
}

func (x *Query) GetSortClause() []*Node {
	if x != nil {
		return x.SortClause
	}
	return nil
}

func (x *Query) GetLimitOffset() *Node {
	if x != nil {
		return x.LimitOffset
	}
	return nil
}

func (x *Query) GetLimitCount() *Node {
	if x != nil {
		return x.LimitCount
	}
	return nil
}

func (x *Query) GetLimitOption() LimitOption {
	if x != nil {
		return x.LimitOption
	}
	return LimitOption_LIMIT_OPTION_UNDEFINED
}

func (x *Query) GetRowMarks() []*Node {
	if x != nil {
		return x.RowMarks
	}
	return nil
}

func (x *Query) GetSetOperations() *Node {
	if x != nil {
		return x.SetOperations
	}
	return nil
}

func (x *Query) GetConstraintDeps() []*Node {
	if x != nil {
		return x.ConstraintDeps
	}
	return nil
}

func (x *Query) GetWithCheckOptions() []*Node {
	if x != nil {
		return x.WithCheckOptions
	}
	return nil
}

func (x *Query) GetStmtLocation() int32 {
	if x != nil {
		return x.StmtLocation
	}
	return 0
}

func (x *Query) GetStmtLen() int32 {
	if x != nil {
		return x.StmtLen
	}
	return 0
}

type InsertStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation         *RangeVar         `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	Cols             []*Node           `protobuf:"bytes,2,rep,name=cols,proto3" json:"cols,omitempty"`
	SelectStmt       *Node             `protobuf:"bytes,3,opt,name=select_stmt,json=selectStmt,proto3" json:"select_stmt,omitempty"`
	OnConflictClause *OnConflictClause `protobuf:"bytes,4,opt,name=on_conflict_clause,json=onConflictClause,proto3" json:"on_conflict_clause,omitempty"`
	ReturningList    []*Node           `protobuf:"bytes,5,rep,name=returning_list,json=returningList,proto3" json:"returning_list,omitempty"`
	WithClause       *WithClause       `protobuf:"bytes,6,opt,name=with_clause,json=withClause,proto3" json:"with_clause,omitempty"`
	Override         OverridingKind    `protobuf:"varint,7,opt,name=override,proto3,enum=pg_query.OverridingKind" json:"override,omitempty"`
}

func (x *InsertStmt) Reset() {
	*x = InsertStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertStmt) ProtoMessage() {}

func (x *InsertStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertStmt.ProtoReflect.Descriptor instead.
func (*InsertStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{65}
}

func (x *InsertStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *InsertStmt) GetCols() []*Node {
	if x != nil {
		return x.Cols
	}
	return nil
}

func (x *InsertStmt) GetSelectStmt() *Node {
	if x != nil {
		return x.SelectStmt
	}
	return nil
}

func (x *InsertStmt) GetOnConflictClause() *OnConflictClause {
	if x != nil {
		return x.OnConflictClause
	}
	return nil
}

func (x *InsertStmt) GetReturningList() []*Node {
	if x != nil {
		return x.ReturningList
	}
	return nil
}

func (x *InsertStmt) GetWithClause() *WithClause {
	if x != nil {
		return x.WithClause
	}
	return nil
}

func (x *InsertStmt) GetOverride() OverridingKind {
	if x != nil {
		return x.Override
	}
	return OverridingKind_OVERRIDING_KIND_UNDEFINED
}

type DeleteStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation      *RangeVar   `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	UsingClause   []*Node     `protobuf:"bytes,2,rep,name=using_clause,json=usingClause,proto3" json:"using_clause,omitempty"`
	WhereClause   *Node       `protobuf:"bytes,3,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"`
	ReturningList []*Node     `protobuf:"bytes,4,rep,name=returning_list,json=returningList,proto3" json:"returning_list,omitempty"`
	WithClause    *WithClause `protobuf:"bytes,5,opt,name=with_clause,json=withClause,proto3" json:"with_clause,omitempty"`
}

func (x *DeleteStmt) Reset() {
	*x = DeleteStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStmt) ProtoMessage() {}

func (x *DeleteStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStmt.ProtoReflect.Descriptor instead.
func (*DeleteStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{66}
}

func (x *DeleteStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *DeleteStmt) GetUsingClause() []*Node {
	if x != nil {
		return x.UsingClause
	}
	return nil
}

func (x *DeleteStmt) GetWhereClause() *Node {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

func (x *DeleteStmt) GetReturningList() []*Node {
	if x != nil {
		return x.ReturningList
	}
	return nil
}

func (x *DeleteStmt) GetWithClause() *WithClause {
	if x != nil {
		return x.WithClause
	}
	return nil
}

type UpdateStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation      *RangeVar   `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	TargetList    []*Node     `protobuf:"bytes,2,rep,name=target_list,json=targetList,proto3" json:"target_list,omitempty"`
	WhereClause   *Node       `protobuf:"bytes,3,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"`
	FromClause    []*Node     `protobuf:"bytes,4,rep,name=from_clause,json=fromClause,proto3" json:"from_clause,omitempty"`
	ReturningList []*Node     `protobuf:"bytes,5,rep,name=returning_list,json=returningList,proto3" json:"returning_list,omitempty"`
	WithClause    *WithClause `protobuf:"bytes,6,opt,name=with_clause,json=withClause,proto3" json:"with_clause,omitempty"`
}

func (x *UpdateStmt) Reset() {
	*x = UpdateStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStmt) ProtoMessage() {}

func (x *UpdateStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStmt.ProtoReflect.Descriptor instead.
func (*UpdateStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *UpdateStmt) GetTargetList() []*Node {
	if x != nil {
		return x.TargetList
	}
	return nil
}

func (x *UpdateStmt) GetWhereClause() *Node {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

func (x *UpdateStmt) GetFromClause() []*Node {
	if x != nil {
		return x.FromClause
	}
	return nil
}

func (x *UpdateStmt) GetReturningList() []*Node {
	if x != nil {
		return x.ReturningList
	}
	return nil
}

func (x *UpdateStmt) GetWithClause() *WithClause {
	if x != nil {
		return x.WithClause
	}
	return nil
}

type MergeStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation         *RangeVar   `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	SourceRelation   *Node       `protobuf:"bytes,2,opt,name=source_relation,json=sourceRelation,proto3" json:"source_relation,omitempty"`
	JoinCondition    *Node       `protobuf:"bytes,3,opt,name=join_condition,json=joinCondition,proto3" json:"join_condition,omitempty"`
	MergeWhenClauses []*Node     `protobuf:"bytes,4,rep,name=merge_when_clauses,json=mergeWhenClauses,proto3" json:"merge_when_clauses,omitempty"`
	WithClause       *WithClause `protobuf:"bytes,5,opt,name=with_clause,json=withClause,proto3" json:"with_clause,omitempty"`
}

func (x *MergeStmt) Reset() {
	*x = MergeStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeStmt) ProtoMessage() {}

func (x *MergeStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeStmt.ProtoReflect.Descriptor instead.
func (*MergeStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{68}
}

func (x *MergeStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *MergeStmt) GetSourceRelation() *Node {
	if x != nil {
		return x.SourceRelation
	}
	return nil
}

func (x *MergeStmt) GetJoinCondition() *Node {
	if x != nil {
		return x.JoinCondition
	}
	return nil
}

func (x *MergeStmt) GetMergeWhenClauses() []*Node {
	if x != nil {
		return x.MergeWhenClauses
	}
	return nil
}

func (x *MergeStmt) GetWithClause() *WithClause {
	if x != nil {
		return x.WithClause
	}
	return nil
}

type SelectStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DistinctClause []*Node      `protobuf:"bytes,1,rep,name=distinct_clause,json=distinctClause,proto3" json:"distinct_clause,omitempty"`
	IntoClause     *IntoClause  `protobuf:"bytes,2,opt,name=into_clause,json=intoClause,proto3" json:"into_clause,omitempty"`
	TargetList     []*Node      `protobuf:"bytes,3,rep,name=target_list,json=targetList,proto3" json:"target_list,omitempty"`
	FromClause     []*Node      `protobuf:"bytes,4,rep,name=from_clause,json=fromClause,proto3" json:"from_clause,omitempty"`
	WhereClause    *Node        `protobuf:"bytes,5,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"`
	GroupClause    []*Node      `protobuf:"bytes,6,rep,name=group_clause,json=groupClause,proto3" json:"group_clause,omitempty"`
	GroupDistinct  bool         `protobuf:"varint,7,opt,name=group_distinct,json=groupDistinct,proto3" json:"group_distinct,omitempty"`
	HavingClause   *Node        `protobuf:"bytes,8,opt,name=having_clause,json=havingClause,proto3" json:"having_clause,omitempty"`
	WindowClause   []*Node      `protobuf:"bytes,9,rep,name=window_clause,json=windowClause,proto3" json:"window_clause,omitempty"`
	ValuesLists    []*Node      `protobuf:"bytes,10,rep,name=values_lists,json=valuesLists,proto3" json:"values_lists,omitempty"`
	SortClause     []*Node      `protobuf:"bytes,11,rep,name=sort_clause,json=sortClause,proto3" json:"sort_clause,omitempty"`
	LimitOffset    *Node        `protobuf:"bytes,12,opt,name=limit_offset,json=limitOffset,proto3" json:"limit_offset,omitempty"`
	LimitCount     *Node        `protobuf:"bytes,13,opt,name=limit_count,json=limitCount,proto3" json:"limit_count,omitempty"`
	LimitOption    LimitOption  `protobuf:"varint,14,opt,name=limit_option,json=limitOption,proto3,enum=pg_query.LimitOption" json:"limit_option,omitempty"`
	LockingClause  []*Node      `protobuf:"bytes,15,rep,name=locking_clause,json=lockingClause,proto3" json:"locking_clause,omitempty"`
	WithClause     *WithClause  `protobuf:"bytes,16,opt,name=with_clause,json=withClause,proto3" json:"with_clause,omitempty"`
	Op             SetOperation `protobuf:"varint,17,opt,name=op,proto3,enum=pg_query.SetOperation" json:"op,omitempty"`
	All            bool         `protobuf:"varint,18,opt,name=all,proto3" json:"all,omitempty"`
	Larg           *SelectStmt  `protobuf:"bytes,19,opt,name=larg,proto3" json:"larg,omitempty"`
	Rarg           *SelectStmt  `protobuf:"bytes,20,opt,name=rarg,proto3" json:"rarg,omitempty"`
}

func (x *SelectStmt) Reset() {
	*x = SelectStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelectStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelectStmt) ProtoMessage() {}

func (x *SelectStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelectStmt.ProtoReflect.Descriptor instead.
func (*SelectStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{69}
}

func (x *SelectStmt) GetDistinctClause() []*Node {
	if x != nil {
		return x.DistinctClause
	}
	return nil
}

func (x *SelectStmt) GetIntoClause() *IntoClause {
	if x != nil {
		return x.IntoClause
	}
	return nil
}

func (x *SelectStmt) GetTargetList() []*Node {
	if x != nil {
		return x.TargetList
	}
	return nil
}

func (x *SelectStmt) GetFromClause() []*Node {
	if x != nil {
		return x.FromClause
	}
	return nil
}

func (x *SelectStmt) GetWhereClause() *Node {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

func (x *SelectStmt) GetGroupClause() []*Node {
	if x != nil {
		return x.GroupClause
	}
	return nil
}

func (x *SelectStmt) GetGroupDistinct() bool {
	if x != nil {
		return x.GroupDistinct
	}
	return false
}

func (x *SelectStmt) GetHavingClause() *Node {
	if x != nil {
		return x.HavingClause
	}
	return nil
}

func (x *SelectStmt) GetWindowClause() []*Node {
	if x != nil {
		return x.WindowClause
	}
	return nil
}

func (x *SelectStmt) GetValuesLists() []*Node {
	if x != nil {
		return x.ValuesLists
	}
	return nil
}

func (x *SelectStmt) GetSortClause() []*Node {
	if x != nil {
		return x.SortClause
	}
	return nil
}

func (x *SelectStmt) GetLimitOffset() *Node {
	if x != nil {
		return x.LimitOffset
	}
	return nil
}

func (x *SelectStmt) GetLimitCount() *Node {
	if x != nil {
		return x.LimitCount
	}
	return nil
}

func (x *SelectStmt) GetLimitOption() LimitOption {
	if x != nil {
		return x.LimitOption
	}
	return LimitOption_LIMIT_OPTION_UNDEFINED
}

func (x *SelectStmt) GetLockingClause() []*Node {
	if x != nil {
		return x.LockingClause
	}
	return nil
}

func (x *SelectStmt) GetWithClause() *WithClause {
	if x != nil {
		return x.WithClause
	}
	return nil
}

func (x *SelectStmt) GetOp() SetOperation {
	if x != nil {
		return x.Op
	}
	return SetOperation_SET_OPERATION_UNDEFINED
}

func (x *SelectStmt) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *SelectStmt) GetLarg() *SelectStmt {
	if x != nil {
		return x.Larg
	}
	return nil
}

func (x *SelectStmt) GetRarg() *SelectStmt {
	if x != nil {
		return x.Rarg
	}
	return nil
}

type ReturnStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Returnval *Node `protobuf:"bytes,1,opt,name=returnval,proto3" json:"returnval,omitempty"`
}

func (x *ReturnStmt) Reset() {
	*x = ReturnStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnStmt) ProtoMessage() {}

func (x *ReturnStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnStmt.ProtoReflect.Descriptor instead.
func (*ReturnStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{70}
}

func (x *ReturnStmt) GetReturnval() *Node {
	if x != nil {
		return x.Returnval
	}
	return nil
}

type PLAssignStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Indirection []*Node     `protobuf:"bytes,2,rep,name=indirection,proto3" json:"indirection,omitempty"`
	Nnames      int32       `protobuf:"varint,3,opt,name=nnames,proto3" json:"nnames,omitempty"`
	Val         *SelectStmt `protobuf:"bytes,4,opt,name=val,proto3" json:"val,omitempty"`
	Location    int32       `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *PLAssignStmt) Reset() {
	*x = PLAssignStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PLAssignStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PLAssignStmt) ProtoMessage() {}

func (x *PLAssignStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PLAssignStmt.ProtoReflect.Descriptor instead.
func (*PLAssignStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{71}
}

func (x *PLAssignStmt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PLAssignStmt) GetIndirection() []*Node {
	if x != nil {
		return x.Indirection
	}
	return nil
}

func (x *PLAssignStmt) GetNnames() int32 {
	if x != nil {
		return x.Nnames
	}
	return 0
}

func (x *PLAssignStmt) GetVal() *SelectStmt {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *PLAssignStmt) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type AlterTableStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation  *RangeVar  `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	Cmds      []*Node    `protobuf:"bytes,2,rep,name=cmds,proto3" json:"cmds,omitempty"`
	Objtype   ObjectType `protobuf:"varint,3,opt,name=objtype,proto3,enum=pg_query.ObjectType" json:"objtype,omitempty"`
	MissingOk bool       `protobuf:"varint,4,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
}

func (x *AlterTableStmt) Reset() {
	*x = AlterTableStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableStmt) ProtoMessage() {}

func (x *AlterTableStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableStmt.ProtoReflect.Descriptor instead.
func (*AlterTableStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{72}
}

func (x *AlterTableStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *AlterTableStmt) GetCmds() []*Node {
	if x != nil {
		return x.Cmds
	}
	return nil
}

func (x *AlterTableStmt) GetObjtype() ObjectType {
	if x != nil {
		return x.Objtype
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *AlterTableStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

type AlterTableCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtype   AlterTableType `protobuf:"varint,1,opt,name=subtype,proto3,enum=pg_query.AlterTableType" json:"subtype,omitempty"`
	Name      string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Num       int32          `protobuf:"varint,3,opt,name=num,proto3" json:"num,omitempty"`
	Newowner  *RoleSpec      `protobuf:"bytes,4,opt,name=newowner,proto3" json:"newowner,omitempty"`
	Def       *Node          `protobuf:"bytes,5,opt,name=def,proto3" json:"def,omitempty"`
	Behavior  DropBehavior   `protobuf:"varint,6,opt,name=behavior,proto3,enum=pg_query.DropBehavior" json:"behavior,omitempty"`
	MissingOk bool           `protobuf:"varint,7,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
	Recurse   bool           `protobuf:"varint,8,opt,name=recurse,proto3" json:"recurse,omitempty"`
}

func (x *AlterTableCmd) Reset() {
	*x = AlterTableCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableCmd) ProtoMessage() {}

func (x *AlterTableCmd) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableCmd.ProtoReflect.Descriptor instead.
func (*AlterTableCmd) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{73}
}

func (x *AlterTableCmd) GetSubtype() AlterTableType {
	if x != nil {
		return x.Subtype
	}
	return AlterTableType_ALTER_TABLE_TYPE_UNDEFINED
}

func (x *AlterTableCmd) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlterTableCmd) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *AlterTableCmd) GetNewowner() *RoleSpec {
	if x != nil {
		return x.Newowner
	}
	return nil
}

func (x *AlterTableCmd) GetDef() *Node {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *AlterTableCmd) GetBehavior() DropBehavior {
	if x != nil {
		return x.Behavior
	}
	return DropBehavior_DROP_BEHAVIOR_UNDEFINED
}

func (x *AlterTableCmd) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

func (x *AlterTableCmd) GetRecurse() bool {
	if x != nil {
		return x.Recurse
	}
	return false
}

type AlterDomainStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subtype   string       `protobuf:"bytes,1,opt,name=subtype,proto3" json:"subtype,omitempty"`
	TypeName  []*Node      `protobuf:"bytes,2,rep,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Name      string       `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Def       *Node        `protobuf:"bytes,4,opt,name=def,proto3" json:"def,omitempty"`
	Behavior  DropBehavior `protobuf:"varint,5,opt,name=behavior,proto3,enum=pg_query.DropBehavior" json:"behavior,omitempty"`
	MissingOk bool         `protobuf:"varint,6,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
}

func (x *AlterDomainStmt) Reset() {
	*x = AlterDomainStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterDomainStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterDomainStmt) ProtoMessage() {}

func (x *AlterDomainStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterDomainStmt.ProtoReflect.Descriptor instead.
func (*AlterDomainStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{74}
}

func (x *AlterDomainStmt) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *AlterDomainStmt) GetTypeName() []*Node {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *AlterDomainStmt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlterDomainStmt) GetDef() *Node {
	if x != nil {
		return x.Def
	}
	return nil
}

func (x *AlterDomainStmt) GetBehavior() DropBehavior {
	if x != nil {
		return x.Behavior
	}
	return DropBehavior_DROP_BEHAVIOR_UNDEFINED
}

func (x *AlterDomainStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

type SetOperationStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op            SetOperation `protobuf:"varint,1,opt,name=op,proto3,enum=pg_query.SetOperation" json:"op,omitempty"`
	All           bool         `protobuf:"varint,2,opt,name=all,proto3" json:"all,omitempty"`
	Larg          *Node        `protobuf:"bytes,3,opt,name=larg,proto3" json:"larg,omitempty"`
	Rarg          *Node        `protobuf:"bytes,4,opt,name=rarg,proto3" json:"rarg,omitempty"`
	ColTypes      []*Node      `protobuf:"bytes,5,rep,name=col_types,json=colTypes,proto3" json:"col_types,omitempty"`
	ColTypmods    []*Node      `protobuf:"bytes,6,rep,name=col_typmods,json=colTypmods,proto3" json:"col_typmods,omitempty"`
	ColCollations []*Node      `protobuf:"bytes,7,rep,name=col_collations,json=colCollations,proto3" json:"col_collations,omitempty"`
	GroupClauses  []*Node      `protobuf:"bytes,8,rep,name=group_clauses,json=groupClauses,proto3" json:"group_clauses,omitempty"`
}

func (x *SetOperationStmt) Reset() {
	*x = SetOperationStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOperationStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperationStmt) ProtoMessage() {}

func (x *SetOperationStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperationStmt.ProtoReflect.Descriptor instead.
func (*SetOperationStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{75}
}

func (x *SetOperationStmt) GetOp() SetOperation {
	if x != nil {
		return x.Op
	}
	return SetOperation_SET_OPERATION_UNDEFINED
}

func (x *SetOperationStmt) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *SetOperationStmt) GetLarg() *Node {
	if x != nil {
		return x.Larg
	}
	return nil
}

func (x *SetOperationStmt) GetRarg() *Node {
	if x != nil {
		return x.Rarg
	}
	return nil
}

func (x *SetOperationStmt) GetColTypes() []*Node {
	if x != nil {
		return x.ColTypes
	}
	return nil
}

func (x *SetOperationStmt) GetColTypmods() []*Node {
	if x != nil {
		return x.ColTypmods
	}
	return nil
}

func (x *SetOperationStmt) GetColCollations() []*Node {
	if x != nil {
		return x.ColCollations
	}
	return nil
}

func (x *SetOperationStmt) GetGroupClauses() []*Node {
	if x != nil {
		return x.GroupClauses
	}
	return nil
}

type GrantStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsGrant     bool            `protobuf:"varint,1,opt,name=is_grant,proto3" json:"is_grant,omitempty"`
	Targtype    GrantTargetType `protobuf:"varint,2,opt,name=targtype,proto3,enum=pg_query.GrantTargetType" json:"targtype,omitempty"`
	Objtype     ObjectType      `protobuf:"varint,3,opt,name=objtype,proto3,enum=pg_query.ObjectType" json:"objtype,omitempty"`
	Objects     []*Node         `protobuf:"bytes,4,rep,name=objects,proto3" json:"objects,omitempty"`
	Privileges  []*Node         `protobuf:"bytes,5,rep,name=privileges,proto3" json:"privileges,omitempty"`
	Grantees    []*Node         `protobuf:"bytes,6,rep,name=grantees,proto3" json:"grantees,omitempty"`
	GrantOption bool            `protobuf:"varint,7,opt,name=grant_option,proto3" json:"grant_option,omitempty"`
	Grantor     *RoleSpec       `protobuf:"bytes,8,opt,name=grantor,proto3" json:"grantor,omitempty"`
	Behavior    DropBehavior    `protobuf:"varint,9,opt,name=behavior,proto3,enum=pg_query.DropBehavior" json:"behavior,omitempty"`
}

func (x *GrantStmt) Reset() {
	*x = GrantStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantStmt) ProtoMessage() {}

func (x *GrantStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantStmt.ProtoReflect.Descriptor instead.
func (*GrantStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{76}
}

func (x *GrantStmt) GetIsGrant() bool {
	if x != nil {
		return x.IsGrant
	}
	return false
}

func (x *GrantStmt) GetTargtype() GrantTargetType {
	if x != nil {
		return x.Targtype
	}
	return GrantTargetType_GRANT_TARGET_TYPE_UNDEFINED
}

func (x *GrantStmt) GetObjtype() ObjectType {
	if x != nil {
		return x.Objtype
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *GrantStmt) GetObjects() []*Node {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *GrantStmt) GetPrivileges() []*Node {
	if x != nil {
		return x.Privileges
	}
	return nil
}

func (x *GrantStmt) GetGrantees() []*Node {
	if x != nil {
		return x.Grantees
	}
	return nil
}

func (x *GrantStmt) GetGrantOption() bool {
	if x != nil {
		return x.GrantOption
	}
	return false
}

func (x *GrantStmt) GetGrantor() *RoleSpec {
	if x != nil {
		return x.Grantor
	}
	return nil
}

func (x *GrantStmt) GetBehavior() DropBehavior {
	if x != nil {
		return x.Behavior
	}
	return DropBehavior_DROP_BEHAVIOR_UNDEFINED
}

type GrantRoleStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GrantedRoles []*Node      `protobuf:"bytes,1,rep,name=granted_roles,proto3" json:"granted_roles,omitempty"`
	GranteeRoles []*Node      `protobuf:"bytes,2,rep,name=grantee_roles,proto3" json:"grantee_roles,omitempty"`
	IsGrant      bool         `protobuf:"varint,3,opt,name=is_grant,proto3" json:"is_grant,omitempty"`
	AdminOpt     bool         `protobuf:"varint,4,opt,name=admin_opt,proto3" json:"admin_opt,omitempty"`
	Grantor      *RoleSpec    `protobuf:"bytes,5,opt,name=grantor,proto3" json:"grantor,omitempty"`
	Behavior     DropBehavior `protobuf:"varint,6,opt,name=behavior,proto3,enum=pg_query.DropBehavior" json:"behavior,omitempty"`
}

func (x *GrantRoleStmt) Reset() {
	*x = GrantRoleStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrantRoleStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrantRoleStmt) ProtoMessage() {}

func (x *GrantRoleStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrantRoleStmt.ProtoReflect.Descriptor instead.
func (*GrantRoleStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{77}
}

func (x *GrantRoleStmt) GetGrantedRoles() []*Node {
	if x != nil {
		return x.GrantedRoles
	}
	return nil
}

func (x *GrantRoleStmt) GetGranteeRoles() []*Node {
	if x != nil {
		return x.GranteeRoles
	}
	return nil
}

func (x *GrantRoleStmt) GetIsGrant() bool {
	if x != nil {
		return x.IsGrant
	}
	return false
}

func (x *GrantRoleStmt) GetAdminOpt() bool {
	if x != nil {
		return x.AdminOpt
	}
	return false
}

func (x *GrantRoleStmt) GetGrantor() *RoleSpec {
	if x != nil {
		return x.Grantor
	}
	return nil
}

func (x *GrantRoleStmt) GetBehavior() DropBehavior {
	if x != nil {
		return x.Behavior
	}
	return DropBehavior_DROP_BEHAVIOR_UNDEFINED
}

type AlterDefaultPrivilegesStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options []*Node    `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
	Action  *GrantStmt `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *AlterDefaultPrivilegesStmt) Reset() {
	*x = AlterDefaultPrivilegesStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterDefaultPrivilegesStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterDefaultPrivilegesStmt) ProtoMessage() {}

func (x *AlterDefaultPrivilegesStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterDefaultPrivilegesStmt.ProtoReflect.Descriptor instead.
func (*AlterDefaultPrivilegesStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{78}
}

func (x *AlterDefaultPrivilegesStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AlterDefaultPrivilegesStmt) GetAction() *GrantStmt {
	if x != nil {
		return x.Action
	}
	return nil
}

type ClosePortalStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Portalname string `protobuf:"bytes,1,opt,name=portalname,proto3" json:"portalname,omitempty"`
}

func (x *ClosePortalStmt) Reset() {
	*x = ClosePortalStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosePortalStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosePortalStmt) ProtoMessage() {}

func (x *ClosePortalStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosePortalStmt.ProtoReflect.Descriptor instead.
func (*ClosePortalStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{79}
}

func (x *ClosePortalStmt) GetPortalname() string {
	if x != nil {
		return x.Portalname
	}
	return ""
}

type ClusterStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation  *RangeVar `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	Indexname string    `protobuf:"bytes,2,opt,name=indexname,proto3" json:"indexname,omitempty"`
	Params    []*Node   `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *ClusterStmt) Reset() {
	*x = ClusterStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterStmt) ProtoMessage() {}

func (x *ClusterStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterStmt.ProtoReflect.Descriptor instead.
func (*ClusterStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{80}
}

func (x *ClusterStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *ClusterStmt) GetIndexname() string {
	if x != nil {
		return x.Indexname
	}
	return ""
}

func (x *ClusterStmt) GetParams() []*Node {
	if x != nil {
		return x.Params
	}
	return nil
}

type CopyStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation    *RangeVar `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	Query       *Node     `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Attlist     []*Node   `protobuf:"bytes,3,rep,name=attlist,proto3" json:"attlist,omitempty"`
	IsFrom      bool      `protobuf:"varint,4,opt,name=is_from,proto3" json:"is_from,omitempty"`
	IsProgram   bool      `protobuf:"varint,5,opt,name=is_program,proto3" json:"is_program,omitempty"`
	Filename    string    `protobuf:"bytes,6,opt,name=filename,proto3" json:"filename,omitempty"`
	Options     []*Node   `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty"`
	WhereClause *Node     `protobuf:"bytes,8,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"`
}

func (x *CopyStmt) Reset() {
	*x = CopyStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyStmt) ProtoMessage() {}

func (x *CopyStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyStmt.ProtoReflect.Descriptor instead.
func (*CopyStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{81}
}

func (x *CopyStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *CopyStmt) GetQuery() *Node {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CopyStmt) GetAttlist() []*Node {
	if x != nil {
		return x.Attlist
	}
	return nil
}

func (x *CopyStmt) GetIsFrom() bool {
	if x != nil {
		return x.IsFrom
	}
	return false
}

func (x *CopyStmt) GetIsProgram() bool {
	if x != nil {
		return x.IsProgram
	}
	return false
}

func (x *CopyStmt) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *CopyStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CopyStmt) GetWhereClause() *Node {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

type CreateStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation       *RangeVar           `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	TableElts      []*Node             `protobuf:"bytes,2,rep,name=table_elts,json=tableElts,proto3" json:"table_elts,omitempty"`
	InhRelations   []*Node             `protobuf:"bytes,3,rep,name=inh_relations,json=inhRelations,proto3" json:"inh_relations,omitempty"`
	Partbound      *PartitionBoundSpec `protobuf:"bytes,4,opt,name=partbound,proto3" json:"partbound,omitempty"`
	Partspec       *PartitionSpec      `protobuf:"bytes,5,opt,name=partspec,proto3" json:"partspec,omitempty"`
	OfTypename     *TypeName           `protobuf:"bytes,6,opt,name=of_typename,json=ofTypename,proto3" json:"of_typename,omitempty"`
	Constraints    []*Node             `protobuf:"bytes,7,rep,name=constraints,proto3" json:"constraints,omitempty"`
	Options        []*Node             `protobuf:"bytes,8,rep,name=options,proto3" json:"options,omitempty"`
	Oncommit       OnCommitAction      `protobuf:"varint,9,opt,name=oncommit,proto3,enum=pg_query.OnCommitAction" json:"oncommit,omitempty"`
	Tablespacename string              `protobuf:"bytes,10,opt,name=tablespacename,proto3" json:"tablespacename,omitempty"`
	AccessMethod   string              `protobuf:"bytes,11,opt,name=access_method,json=accessMethod,proto3" json:"access_method,omitempty"`
	IfNotExists    bool                `protobuf:"varint,12,opt,name=if_not_exists,proto3" json:"if_not_exists,omitempty"`
}

func (x *CreateStmt) Reset() {
	*x = CreateStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStmt) ProtoMessage() {}

func (x *CreateStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStmt.ProtoReflect.Descriptor instead.
func (*CreateStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{82}
}

func (x *CreateStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *CreateStmt) GetTableElts() []*Node {
	if x != nil {
		return x.TableElts
	}
	return nil
}

func (x *CreateStmt) GetInhRelations() []*Node {
	if x != nil {
		return x.InhRelations
	}
	return nil
}

func (x *CreateStmt) GetPartbound() *PartitionBoundSpec {
	if x != nil {
		return x.Partbound
	}
	return nil
}

func (x *CreateStmt) GetPartspec() *PartitionSpec {
	if x != nil {
		return x.Partspec
	}
	return nil
}

func (x *CreateStmt) GetOfTypename() *TypeName {
	if x != nil {
		return x.OfTypename
	}
	return nil
}

func (x *CreateStmt) GetConstraints() []*Node {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *CreateStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateStmt) GetOncommit() OnCommitAction {
	if x != nil {
		return x.Oncommit
	}
	return OnCommitAction_ON_COMMIT_ACTION_UNDEFINED
}

func (x *CreateStmt) GetTablespacename() string {
	if x != nil {
		return x.Tablespacename
	}
	return ""
}

func (x *CreateStmt) GetAccessMethod() string {
	if x != nil {
		return x.AccessMethod
	}
	return ""
}

func (x *CreateStmt) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

type DefineStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind        ObjectType `protobuf:"varint,1,opt,name=kind,proto3,enum=pg_query.ObjectType" json:"kind,omitempty"`
	Oldstyle    bool       `protobuf:"varint,2,opt,name=oldstyle,proto3" json:"oldstyle,omitempty"`
	Defnames    []*Node    `protobuf:"bytes,3,rep,name=defnames,proto3" json:"defnames,omitempty"`
	Args        []*Node    `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	Definition  []*Node    `protobuf:"bytes,5,rep,name=definition,proto3" json:"definition,omitempty"`
	IfNotExists bool       `protobuf:"varint,6,opt,name=if_not_exists,proto3" json:"if_not_exists,omitempty"`
	Replace     bool       `protobuf:"varint,7,opt,name=replace,proto3" json:"replace,omitempty"`
}

func (x *DefineStmt) Reset() {
	*x = DefineStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefineStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefineStmt) ProtoMessage() {}

func (x *DefineStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefineStmt.ProtoReflect.Descriptor instead.
func (*DefineStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{83}
}

func (x *DefineStmt) GetKind() ObjectType {
	if x != nil {
		return x.Kind
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *DefineStmt) GetOldstyle() bool {
	if x != nil {
		return x.Oldstyle
	}
	return false
}

func (x *DefineStmt) GetDefnames() []*Node {
	if x != nil {
		return x.Defnames
	}
	return nil
}

func (x *DefineStmt) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *DefineStmt) GetDefinition() []*Node {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *DefineStmt) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *DefineStmt) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

type DropStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects    []*Node      `protobuf:"bytes,1,rep,name=objects,proto3" json:"objects,omitempty"`
	RemoveType ObjectType   `protobuf:"varint,2,opt,name=remove_type,json=removeType,proto3,enum=pg_query.ObjectType" json:"remove_type,omitempty"`
	Behavior   DropBehavior `protobuf:"varint,3,opt,name=behavior,proto3,enum=pg_query.DropBehavior" json:"behavior,omitempty"`
	MissingOk  bool         `protobuf:"varint,4,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
	Concurrent bool         `protobuf:"varint,5,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
}

func (x *DropStmt) Reset() {
	*x = DropStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropStmt) ProtoMessage() {}

func (x *DropStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropStmt.ProtoReflect.Descriptor instead.
func (*DropStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{84}
}

func (x *DropStmt) GetObjects() []*Node {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *DropStmt) GetRemoveType() ObjectType {
	if x != nil {
		return x.RemoveType
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *DropStmt) GetBehavior() DropBehavior {
	if x != nil {
		return x.Behavior
	}
	return DropBehavior_DROP_BEHAVIOR_UNDEFINED
}

func (x *DropStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

func (x *DropStmt) GetConcurrent() bool {
	if x != nil {
		return x.Concurrent
	}
	return false
}

type TruncateStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relations   []*Node      `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
	RestartSeqs bool         `protobuf:"varint,2,opt,name=restart_seqs,proto3" json:"restart_seqs,omitempty"`
	Behavior    DropBehavior `protobuf:"varint,3,opt,name=behavior,proto3,enum=pg_query.DropBehavior" json:"behavior,omitempty"`
}

func (x *TruncateStmt) Reset() {
	*x = TruncateStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateStmt) ProtoMessage() {}

func (x *TruncateStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateStmt.ProtoReflect.Descriptor instead.
func (*TruncateStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{85}
}

func (x *TruncateStmt) GetRelations() []*Node {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *TruncateStmt) GetRestartSeqs() bool {
	if x != nil {
		return x.RestartSeqs
	}
	return false
}

func (x *TruncateStmt) GetBehavior() DropBehavior {
	if x != nil {
		return x.Behavior
	}
	return DropBehavior_DROP_BEHAVIOR_UNDEFINED
}

type CommentStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objtype ObjectType `protobuf:"varint,1,opt,name=objtype,proto3,enum=pg_query.ObjectType" json:"objtype,omitempty"`
	Object  *Node      `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Comment string     `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *CommentStmt) Reset() {
	*x = CommentStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommentStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommentStmt) ProtoMessage() {}

func (x *CommentStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommentStmt.ProtoReflect.Descriptor instead.
func (*CommentStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{86}
}

func (x *CommentStmt) GetObjtype() ObjectType {
	if x != nil {
		return x.Objtype
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *CommentStmt) GetObject() *Node {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *CommentStmt) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type FetchStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction  FetchDirection `protobuf:"varint,1,opt,name=direction,proto3,enum=pg_query.FetchDirection" json:"direction,omitempty"`
	HowMany    int64          `protobuf:"varint,2,opt,name=how_many,json=howMany,proto3" json:"how_many,omitempty"`
	Portalname string         `protobuf:"bytes,3,opt,name=portalname,proto3" json:"portalname,omitempty"`
	Ismove     bool           `protobuf:"varint,4,opt,name=ismove,proto3" json:"ismove,omitempty"`
}

func (x *FetchStmt) Reset() {
	*x = FetchStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchStmt) ProtoMessage() {}

func (x *FetchStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchStmt.ProtoReflect.Descriptor instead.
func (*FetchStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{87}
}

func (x *FetchStmt) GetDirection() FetchDirection {
	if x != nil {
		return x.Direction
	}
	return FetchDirection_FETCH_DIRECTION_UNDEFINED
}

func (x *FetchStmt) GetHowMany() int64 {
	if x != nil {
		return x.HowMany
	}
	return 0
}

func (x *FetchStmt) GetPortalname() string {
	if x != nil {
		return x.Portalname
	}
	return ""
}

func (x *FetchStmt) GetIsmove() bool {
	if x != nil {
		return x.Ismove
	}
	return false
}

type IndexStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Idxname                  string    `protobuf:"bytes,1,opt,name=idxname,proto3" json:"idxname,omitempty"`
	Relation                 *RangeVar `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	AccessMethod             string    `protobuf:"bytes,3,opt,name=access_method,json=accessMethod,proto3" json:"access_method,omitempty"`
	TableSpace               string    `protobuf:"bytes,4,opt,name=table_space,json=tableSpace,proto3" json:"table_space,omitempty"`
	IndexParams              []*Node   `protobuf:"bytes,5,rep,name=index_params,json=indexParams,proto3" json:"index_params,omitempty"`
	IndexIncludingParams     []*Node   `protobuf:"bytes,6,rep,name=index_including_params,json=indexIncludingParams,proto3" json:"index_including_params,omitempty"`
	Options                  []*Node   `protobuf:"bytes,7,rep,name=options,proto3" json:"options,omitempty"`
	WhereClause              *Node     `protobuf:"bytes,8,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"`
	ExcludeOpNames           []*Node   `protobuf:"bytes,9,rep,name=exclude_op_names,json=excludeOpNames,proto3" json:"exclude_op_names,omitempty"`
	Idxcomment               string    `protobuf:"bytes,10,opt,name=idxcomment,proto3" json:"idxcomment,omitempty"`
	IndexOid                 uint32    `protobuf:"varint,11,opt,name=index_oid,json=indexOid,proto3" json:"index_oid,omitempty"`
	OldNode                  uint32    `protobuf:"varint,12,opt,name=old_node,json=oldNode,proto3" json:"old_node,omitempty"`
	OldCreateSubid           uint32    `protobuf:"varint,13,opt,name=old_create_subid,json=oldCreateSubid,proto3" json:"old_create_subid,omitempty"`
	OldFirstRelfilenodeSubid uint32    `protobuf:"varint,14,opt,name=old_first_relfilenode_subid,json=oldFirstRelfilenodeSubid,proto3" json:"old_first_relfilenode_subid,omitempty"`
	Unique                   bool      `protobuf:"varint,15,opt,name=unique,proto3" json:"unique,omitempty"`
	NullsNotDistinct         bool      `protobuf:"varint,16,opt,name=nulls_not_distinct,proto3" json:"nulls_not_distinct,omitempty"`
	Primary                  bool      `protobuf:"varint,17,opt,name=primary,proto3" json:"primary,omitempty"`
	Isconstraint             bool      `protobuf:"varint,18,opt,name=isconstraint,proto3" json:"isconstraint,omitempty"`
	Deferrable               bool      `protobuf:"varint,19,opt,name=deferrable,proto3" json:"deferrable,omitempty"`
	Initdeferred             bool      `protobuf:"varint,20,opt,name=initdeferred,proto3" json:"initdeferred,omitempty"`
	Transformed              bool      `protobuf:"varint,21,opt,name=transformed,proto3" json:"transformed,omitempty"`
	Concurrent               bool      `protobuf:"varint,22,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	IfNotExists              bool      `protobuf:"varint,23,opt,name=if_not_exists,proto3" json:"if_not_exists,omitempty"`
	ResetDefaultTblspc       bool      `protobuf:"varint,24,opt,name=reset_default_tblspc,proto3" json:"reset_default_tblspc,omitempty"`
}

func (x *IndexStmt) Reset() {
	*x = IndexStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexStmt) ProtoMessage() {}

func (x *IndexStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexStmt.ProtoReflect.Descriptor instead.
func (*IndexStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{88}
}

func (x *IndexStmt) GetIdxname() string {
	if x != nil {
		return x.Idxname
	}
	return ""
}

func (x *IndexStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *IndexStmt) GetAccessMethod() string {
	if x != nil {
		return x.AccessMethod
	}
	return ""
}

func (x *IndexStmt) GetTableSpace() string {
	if x != nil {
		return x.TableSpace
	}
	return ""
}

func (x *IndexStmt) GetIndexParams() []*Node {
	if x != nil {
		return x.IndexParams
	}
	return nil
}

func (x *IndexStmt) GetIndexIncludingParams() []*Node {
	if x != nil {
		return x.IndexIncludingParams
	}
	return nil
}

func (x *IndexStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *IndexStmt) GetWhereClause() *Node {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

func (x *IndexStmt) GetExcludeOpNames() []*Node {
	if x != nil {
		return x.ExcludeOpNames
	}
	return nil
}

func (x *IndexStmt) GetIdxcomment() string {
	if x != nil {
		return x.Idxcomment
	}
	return ""
}

func (x *IndexStmt) GetIndexOid() uint32 {
	if x != nil {
		return x.IndexOid
	}
	return 0
}

func (x *IndexStmt) GetOldNode() uint32 {
	if x != nil {
		return x.OldNode
	}
	return 0
}

func (x *IndexStmt) GetOldCreateSubid() uint32 {
	if x != nil {
		return x.OldCreateSubid
	}
	return 0
}

func (x *IndexStmt) GetOldFirstRelfilenodeSubid() uint32 {
	if x != nil {
		return x.OldFirstRelfilenodeSubid
	}
	return 0
}

func (x *IndexStmt) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *IndexStmt) GetNullsNotDistinct() bool {
	if x != nil {
		return x.NullsNotDistinct
	}
	return false
}

func (x *IndexStmt) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *IndexStmt) GetIsconstraint() bool {
	if x != nil {
		return x.Isconstraint
	}
	return false
}

func (x *IndexStmt) GetDeferrable() bool {
	if x != nil {
		return x.Deferrable
	}
	return false
}

func (x *IndexStmt) GetInitdeferred() bool {
	if x != nil {
		return x.Initdeferred
	}
	return false
}

func (x *IndexStmt) GetTransformed() bool {
	if x != nil {
		return x.Transformed
	}
	return false
}

func (x *IndexStmt) GetConcurrent() bool {
	if x != nil {
		return x.Concurrent
	}
	return false
}

func (x *IndexStmt) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *IndexStmt) GetResetDefaultTblspc() bool {
	if x != nil {
		return x.ResetDefaultTblspc
	}
	return false
}

type CreateFunctionStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsProcedure bool      `protobuf:"varint,1,opt,name=is_procedure,proto3" json:"is_procedure,omitempty"`
	Replace     bool      `protobuf:"varint,2,opt,name=replace,proto3" json:"replace,omitempty"`
	Funcname    []*Node   `protobuf:"bytes,3,rep,name=funcname,proto3" json:"funcname,omitempty"`
	Parameters  []*Node   `protobuf:"bytes,4,rep,name=parameters,proto3" json:"parameters,omitempty"`
	ReturnType  *TypeName `protobuf:"bytes,5,opt,name=return_type,json=returnType,proto3" json:"return_type,omitempty"`
	Options     []*Node   `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty"`
	SqlBody     *Node     `protobuf:"bytes,7,opt,name=sql_body,proto3" json:"sql_body,omitempty"`
}

func (x *CreateFunctionStmt) Reset() {
	*x = CreateFunctionStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFunctionStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFunctionStmt) ProtoMessage() {}

func (x *CreateFunctionStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFunctionStmt.ProtoReflect.Descriptor instead.
func (*CreateFunctionStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{89}
}

func (x *CreateFunctionStmt) GetIsProcedure() bool {
	if x != nil {
		return x.IsProcedure
	}
	return false
}

func (x *CreateFunctionStmt) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *CreateFunctionStmt) GetFuncname() []*Node {
	if x != nil {
		return x.Funcname
	}
	return nil
}

func (x *CreateFunctionStmt) GetParameters() []*Node {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *CreateFunctionStmt) GetReturnType() *TypeName {
	if x != nil {
		return x.ReturnType
	}
	return nil
}

func (x *CreateFunctionStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateFunctionStmt) GetSqlBody() *Node {
	if x != nil {
		return x.SqlBody
	}
	return nil
}

type AlterFunctionStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objtype ObjectType      `protobuf:"varint,1,opt,name=objtype,proto3,enum=pg_query.ObjectType" json:"objtype,omitempty"`
	Func    *ObjectWithArgs `protobuf:"bytes,2,opt,name=func,proto3" json:"func,omitempty"`
	Actions []*Node         `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`
}

func (x *AlterFunctionStmt) Reset() {
	*x = AlterFunctionStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterFunctionStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterFunctionStmt) ProtoMessage() {}

func (x *AlterFunctionStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterFunctionStmt.ProtoReflect.Descriptor instead.
func (*AlterFunctionStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{90}
}

func (x *AlterFunctionStmt) GetObjtype() ObjectType {
	if x != nil {
		return x.Objtype
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *AlterFunctionStmt) GetFunc() *ObjectWithArgs {
	if x != nil {
		return x.Func
	}
	return nil
}

func (x *AlterFunctionStmt) GetActions() []*Node {
	if x != nil {
		return x.Actions
	}
	return nil
}

type DoStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args []*Node `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *DoStmt) Reset() {
	*x = DoStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoStmt) ProtoMessage() {}

func (x *DoStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoStmt.ProtoReflect.Descriptor instead.
func (*DoStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{91}
}

func (x *DoStmt) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

type RenameStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RenameType   ObjectType   `protobuf:"varint,1,opt,name=rename_type,json=renameType,proto3,enum=pg_query.ObjectType" json:"rename_type,omitempty"`
	RelationType ObjectType   `protobuf:"varint,2,opt,name=relation_type,json=relationType,proto3,enum=pg_query.ObjectType" json:"relation_type,omitempty"`
	Relation     *RangeVar    `protobuf:"bytes,3,opt,name=relation,proto3" json:"relation,omitempty"`
	Object       *Node        `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
	Subname      string       `protobuf:"bytes,5,opt,name=subname,proto3" json:"subname,omitempty"`
	Newname      string       `protobuf:"bytes,6,opt,name=newname,proto3" json:"newname,omitempty"`
	Behavior     DropBehavior `protobuf:"varint,7,opt,name=behavior,proto3,enum=pg_query.DropBehavior" json:"behavior,omitempty"`
	MissingOk    bool         `protobuf:"varint,8,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
}

func (x *RenameStmt) Reset() {
	*x = RenameStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameStmt) ProtoMessage() {}

func (x *RenameStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameStmt.ProtoReflect.Descriptor instead.
func (*RenameStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{92}
}

func (x *RenameStmt) GetRenameType() ObjectType {
	if x != nil {
		return x.RenameType
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *RenameStmt) GetRelationType() ObjectType {
	if x != nil {
		return x.RelationType
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *RenameStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *RenameStmt) GetObject() *Node {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *RenameStmt) GetSubname() string {
	if x != nil {
		return x.Subname
	}
	return ""
}

func (x *RenameStmt) GetNewname() string {
	if x != nil {
		return x.Newname
	}
	return ""
}

func (x *RenameStmt) GetBehavior() DropBehavior {
	if x != nil {
		return x.Behavior
	}
	return DropBehavior_DROP_BEHAVIOR_UNDEFINED
}

func (x *RenameStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

type RuleStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation    *RangeVar `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	Rulename    string    `protobuf:"bytes,2,opt,name=rulename,proto3" json:"rulename,omitempty"`
	WhereClause *Node     `protobuf:"bytes,3,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"`
	Event       CmdType   `protobuf:"varint,4,opt,name=event,proto3,enum=pg_query.CmdType" json:"event,omitempty"`
	Instead     bool      `protobuf:"varint,5,opt,name=instead,proto3" json:"instead,omitempty"`
	Actions     []*Node   `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions,omitempty"`
	Replace     bool      `protobuf:"varint,7,opt,name=replace,proto3" json:"replace,omitempty"`
}

func (x *RuleStmt) Reset() {
	*x = RuleStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleStmt) ProtoMessage() {}

func (x *RuleStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleStmt.ProtoReflect.Descriptor instead.
func (*RuleStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{93}
}

func (x *RuleStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *RuleStmt) GetRulename() string {
	if x != nil {
		return x.Rulename
	}
	return ""
}

func (x *RuleStmt) GetWhereClause() *Node {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

func (x *RuleStmt) GetEvent() CmdType {
	if x != nil {
		return x.Event
	}
	return CmdType_CMD_TYPE_UNDEFINED
}

func (x *RuleStmt) GetInstead() bool {
	if x != nil {
		return x.Instead
	}
	return false
}

func (x *RuleStmt) GetActions() []*Node {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *RuleStmt) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

type NotifyStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditionname string `protobuf:"bytes,1,opt,name=conditionname,proto3" json:"conditionname,omitempty"`
	Payload       string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *NotifyStmt) Reset() {
	*x = NotifyStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyStmt) ProtoMessage() {}

func (x *NotifyStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyStmt.ProtoReflect.Descriptor instead.
func (*NotifyStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{94}
}

func (x *NotifyStmt) GetConditionname() string {
	if x != nil {
		return x.Conditionname
	}
	return ""
}

func (x *NotifyStmt) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type ListenStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditionname string `protobuf:"bytes,1,opt,name=conditionname,proto3" json:"conditionname,omitempty"`
}

func (x *ListenStmt) Reset() {
	*x = ListenStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenStmt) ProtoMessage() {}

func (x *ListenStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenStmt.ProtoReflect.Descriptor instead.
func (*ListenStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{95}
}

func (x *ListenStmt) GetConditionname() string {
	if x != nil {
		return x.Conditionname
	}
	return ""
}

type UnlistenStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conditionname string `protobuf:"bytes,1,opt,name=conditionname,proto3" json:"conditionname,omitempty"`
}

func (x *UnlistenStmt) Reset() {
	*x = UnlistenStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlistenStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlistenStmt) ProtoMessage() {}

func (x *UnlistenStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlistenStmt.ProtoReflect.Descriptor instead.
func (*UnlistenStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{96}
}

func (x *UnlistenStmt) GetConditionname() string {
	if x != nil {
		return x.Conditionname
	}
	return ""
}

type TransactionStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind          TransactionStmtKind `protobuf:"varint,1,opt,name=kind,proto3,enum=pg_query.TransactionStmtKind" json:"kind,omitempty"`
	Options       []*Node             `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	SavepointName string              `protobuf:"bytes,3,opt,name=savepoint_name,proto3" json:"savepoint_name,omitempty"`
	Gid           string              `protobuf:"bytes,4,opt,name=gid,proto3" json:"gid,omitempty"`
	Chain         bool                `protobuf:"varint,5,opt,name=chain,proto3" json:"chain,omitempty"`
}

func (x *TransactionStmt) Reset() {
	*x = TransactionStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStmt) ProtoMessage() {}

func (x *TransactionStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStmt.ProtoReflect.Descriptor instead.
func (*TransactionStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{97}
}

func (x *TransactionStmt) GetKind() TransactionStmtKind {
	if x != nil {
		return x.Kind
	}
	return TransactionStmtKind_TRANSACTION_STMT_KIND_UNDEFINED
}

func (x *TransactionStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *TransactionStmt) GetSavepointName() string {
	if x != nil {
		return x.SavepointName
	}
	return ""
}

func (x *TransactionStmt) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *TransactionStmt) GetChain() bool {
	if x != nil {
		return x.Chain
	}
	return false
}

type ViewStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	View            *RangeVar       `protobuf:"bytes,1,opt,name=view,proto3" json:"view,omitempty"`
	Aliases         []*Node         `protobuf:"bytes,2,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Query           *Node           `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Replace         bool            `protobuf:"varint,4,opt,name=replace,proto3" json:"replace,omitempty"`
	Options         []*Node         `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
	WithCheckOption ViewCheckOption `protobuf:"varint,6,opt,name=with_check_option,json=withCheckOption,proto3,enum=pg_query.ViewCheckOption" json:"with_check_option,omitempty"`
}

func (x *ViewStmt) Reset() {
	*x = ViewStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewStmt) ProtoMessage() {}

func (x *ViewStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewStmt.ProtoReflect.Descriptor instead.
func (*ViewStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{98}
}

func (x *ViewStmt) GetView() *RangeVar {
	if x != nil {
		return x.View
	}
	return nil
}

func (x *ViewStmt) GetAliases() []*Node {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *ViewStmt) GetQuery() *Node {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ViewStmt) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *ViewStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ViewStmt) GetWithCheckOption() ViewCheckOption {
	if x != nil {
		return x.WithCheckOption
	}
	return ViewCheckOption_VIEW_CHECK_OPTION_UNDEFINED
}

type LoadStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *LoadStmt) Reset() {
	*x = LoadStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadStmt) ProtoMessage() {}

func (x *LoadStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadStmt.ProtoReflect.Descriptor instead.
func (*LoadStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{99}
}

func (x *LoadStmt) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

type CreateDomainStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domainname  []*Node        `protobuf:"bytes,1,rep,name=domainname,proto3" json:"domainname,omitempty"`
	TypeName    *TypeName      `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	CollClause  *CollateClause `protobuf:"bytes,3,opt,name=coll_clause,json=collClause,proto3" json:"coll_clause,omitempty"`
	Constraints []*Node        `protobuf:"bytes,4,rep,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *CreateDomainStmt) Reset() {
	*x = CreateDomainStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDomainStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDomainStmt) ProtoMessage() {}

func (x *CreateDomainStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDomainStmt.ProtoReflect.Descriptor instead.
func (*CreateDomainStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{100}
}

func (x *CreateDomainStmt) GetDomainname() []*Node {
	if x != nil {
		return x.Domainname
	}
	return nil
}

func (x *CreateDomainStmt) GetTypeName() *TypeName {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *CreateDomainStmt) GetCollClause() *CollateClause {
	if x != nil {
		return x.CollClause
	}
	return nil
}

func (x *CreateDomainStmt) GetConstraints() []*Node {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type CreatedbStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dbname  string  `protobuf:"bytes,1,opt,name=dbname,proto3" json:"dbname,omitempty"`
	Options []*Node `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CreatedbStmt) Reset() {
	*x = CreatedbStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedbStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedbStmt) ProtoMessage() {}

func (x *CreatedbStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedbStmt.ProtoReflect.Descriptor instead.
func (*CreatedbStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{101}
}

func (x *CreatedbStmt) GetDbname() string {
	if x != nil {
		return x.Dbname
	}
	return ""
}

func (x *CreatedbStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type DropdbStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dbname    string  `protobuf:"bytes,1,opt,name=dbname,proto3" json:"dbname,omitempty"`
	MissingOk bool    `protobuf:"varint,2,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
	Options   []*Node `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *DropdbStmt) Reset() {
	*x = DropdbStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropdbStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropdbStmt) ProtoMessage() {}

func (x *DropdbStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropdbStmt.ProtoReflect.Descriptor instead.
func (*DropdbStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{102}
}

func (x *DropdbStmt) GetDbname() string {
	if x != nil {
		return x.Dbname
	}
	return ""
}

func (x *DropdbStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

func (x *DropdbStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type VacuumStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options     []*Node `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty"`
	Rels        []*Node `protobuf:"bytes,2,rep,name=rels,proto3" json:"rels,omitempty"`
	IsVacuumcmd bool    `protobuf:"varint,3,opt,name=is_vacuumcmd,proto3" json:"is_vacuumcmd,omitempty"`
}

func (x *VacuumStmt) Reset() {
	*x = VacuumStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VacuumStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VacuumStmt) ProtoMessage() {}

func (x *VacuumStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VacuumStmt.ProtoReflect.Descriptor instead.
func (*VacuumStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{103}
}

func (x *VacuumStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *VacuumStmt) GetRels() []*Node {
	if x != nil {
		return x.Rels
	}
	return nil
}

func (x *VacuumStmt) GetIsVacuumcmd() bool {
	if x != nil {
		return x.IsVacuumcmd
	}
	return false
}

type ExplainStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query   *Node   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Options []*Node `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *ExplainStmt) Reset() {
	*x = ExplainStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplainStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplainStmt) ProtoMessage() {}

func (x *ExplainStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplainStmt.ProtoReflect.Descriptor instead.
func (*ExplainStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{104}
}

func (x *ExplainStmt) GetQuery() *Node {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ExplainStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreateTableAsStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query        *Node       `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Into         *IntoClause `protobuf:"bytes,2,opt,name=into,proto3" json:"into,omitempty"`
	Objtype      ObjectType  `protobuf:"varint,3,opt,name=objtype,proto3,enum=pg_query.ObjectType" json:"objtype,omitempty"`
	IsSelectInto bool        `protobuf:"varint,4,opt,name=is_select_into,proto3" json:"is_select_into,omitempty"`
	IfNotExists  bool        `protobuf:"varint,5,opt,name=if_not_exists,proto3" json:"if_not_exists,omitempty"`
}

func (x *CreateTableAsStmt) Reset() {
	*x = CreateTableAsStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableAsStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableAsStmt) ProtoMessage() {}

func (x *CreateTableAsStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableAsStmt.ProtoReflect.Descriptor instead.
func (*CreateTableAsStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{105}
}

func (x *CreateTableAsStmt) GetQuery() *Node {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *CreateTableAsStmt) GetInto() *IntoClause {
	if x != nil {
		return x.Into
	}
	return nil
}

func (x *CreateTableAsStmt) GetObjtype() ObjectType {
	if x != nil {
		return x.Objtype
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *CreateTableAsStmt) GetIsSelectInto() bool {
	if x != nil {
		return x.IsSelectInto
	}
	return false
}

func (x *CreateTableAsStmt) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

type CreateSeqStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence    *RangeVar `protobuf:"bytes,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Options     []*Node   `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	OwnerId     uint32    `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	ForIdentity bool      `protobuf:"varint,4,opt,name=for_identity,proto3" json:"for_identity,omitempty"`
	IfNotExists bool      `protobuf:"varint,5,opt,name=if_not_exists,proto3" json:"if_not_exists,omitempty"`
}

func (x *CreateSeqStmt) Reset() {
	*x = CreateSeqStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSeqStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSeqStmt) ProtoMessage() {}

func (x *CreateSeqStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSeqStmt.ProtoReflect.Descriptor instead.
func (*CreateSeqStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{106}
}

func (x *CreateSeqStmt) GetSequence() *RangeVar {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *CreateSeqStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreateSeqStmt) GetOwnerId() uint32 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *CreateSeqStmt) GetForIdentity() bool {
	if x != nil {
		return x.ForIdentity
	}
	return false
}

func (x *CreateSeqStmt) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

type AlterSeqStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence    *RangeVar `protobuf:"bytes,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Options     []*Node   `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	ForIdentity bool      `protobuf:"varint,3,opt,name=for_identity,proto3" json:"for_identity,omitempty"`
	MissingOk   bool      `protobuf:"varint,4,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
}

func (x *AlterSeqStmt) Reset() {
	*x = AlterSeqStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterSeqStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterSeqStmt) ProtoMessage() {}

func (x *AlterSeqStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterSeqStmt.ProtoReflect.Descriptor instead.
func (*AlterSeqStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{107}
}

func (x *AlterSeqStmt) GetSequence() *RangeVar {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *AlterSeqStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AlterSeqStmt) GetForIdentity() bool {
	if x != nil {
		return x.ForIdentity
	}
	return false
}

func (x *AlterSeqStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

type VariableSetStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind    VariableSetKind `protobuf:"varint,1,opt,name=kind,proto3,enum=pg_query.VariableSetKind" json:"kind,omitempty"`
	Name    string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Args    []*Node         `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	IsLocal bool            `protobuf:"varint,4,opt,name=is_local,proto3" json:"is_local,omitempty"`
}

func (x *VariableSetStmt) Reset() {
	*x = VariableSetStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableSetStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableSetStmt) ProtoMessage() {}

func (x *VariableSetStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableSetStmt.ProtoReflect.Descriptor instead.
func (*VariableSetStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{108}
}

func (x *VariableSetStmt) GetKind() VariableSetKind {
	if x != nil {
		return x.Kind
	}
	return VariableSetKind_VARIABLE_SET_KIND_UNDEFINED
}

func (x *VariableSetStmt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VariableSetStmt) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *VariableSetStmt) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

type VariableShowStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VariableShowStmt) Reset() {
	*x = VariableShowStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VariableShowStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VariableShowStmt) ProtoMessage() {}

func (x *VariableShowStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VariableShowStmt.ProtoReflect.Descriptor instead.
func (*VariableShowStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{109}
}

func (x *VariableShowStmt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DiscardStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Target DiscardMode `protobuf:"varint,1,opt,name=target,proto3,enum=pg_query.DiscardMode" json:"target,omitempty"`
}

func (x *DiscardStmt) Reset() {
	*x = DiscardStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscardStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardStmt) ProtoMessage() {}

func (x *DiscardStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardStmt.ProtoReflect.Descriptor instead.
func (*DiscardStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{110}
}

func (x *DiscardStmt) GetTarget() DiscardMode {
	if x != nil {
		return x.Target
	}
	return DiscardMode_DISCARD_MODE_UNDEFINED
}

type CreateTrigStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replace        bool      `protobuf:"varint,1,opt,name=replace,proto3" json:"replace,omitempty"`
	Isconstraint   bool      `protobuf:"varint,2,opt,name=isconstraint,proto3" json:"isconstraint,omitempty"`
	Trigname       string    `protobuf:"bytes,3,opt,name=trigname,proto3" json:"trigname,omitempty"`
	Relation       *RangeVar `protobuf:"bytes,4,opt,name=relation,proto3" json:"relation,omitempty"`
	Funcname       []*Node   `protobuf:"bytes,5,rep,name=funcname,proto3" json:"funcname,omitempty"`
	Args           []*Node   `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
	Row            bool      `protobuf:"varint,7,opt,name=row,proto3" json:"row,omitempty"`
	Timing         int32     `protobuf:"varint,8,opt,name=timing,proto3" json:"timing,omitempty"`
	Events         int32     `protobuf:"varint,9,opt,name=events,proto3" json:"events,omitempty"`
	Columns        []*Node   `protobuf:"bytes,10,rep,name=columns,proto3" json:"columns,omitempty"`
	WhenClause     *Node     `protobuf:"bytes,11,opt,name=when_clause,json=whenClause,proto3" json:"when_clause,omitempty"`
	TransitionRels []*Node   `protobuf:"bytes,12,rep,name=transition_rels,json=transitionRels,proto3" json:"transition_rels,omitempty"`
	Deferrable     bool      `protobuf:"varint,13,opt,name=deferrable,proto3" json:"deferrable,omitempty"`
	Initdeferred   bool      `protobuf:"varint,14,opt,name=initdeferred,proto3" json:"initdeferred,omitempty"`
	Constrrel      *RangeVar `protobuf:"bytes,15,opt,name=constrrel,proto3" json:"constrrel,omitempty"`
}

func (x *CreateTrigStmt) Reset() {
	*x = CreateTrigStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrigStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrigStmt) ProtoMessage() {}

func (x *CreateTrigStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrigStmt.ProtoReflect.Descriptor instead.
func (*CreateTrigStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{111}
}

func (x *CreateTrigStmt) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *CreateTrigStmt) GetIsconstraint() bool {
	if x != nil {
		return x.Isconstraint
	}
	return false
}

func (x *CreateTrigStmt) GetTrigname() string {
	if x != nil {
		return x.Trigname
	}
	return ""
}

func (x *CreateTrigStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *CreateTrigStmt) GetFuncname() []*Node {
	if x != nil {
		return x.Funcname
	}
	return nil
}

func (x *CreateTrigStmt) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *CreateTrigStmt) GetRow() bool {
	if x != nil {
		return x.Row
	}
	return false
}

func (x *CreateTrigStmt) GetTiming() int32 {
	if x != nil {
		return x.Timing
	}
	return 0
}

func (x *CreateTrigStmt) GetEvents() int32 {
	if x != nil {
		return x.Events
	}
	return 0
}

func (x *CreateTrigStmt) GetColumns() []*Node {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *CreateTrigStmt) GetWhenClause() *Node {
	if x != nil {
		return x.WhenClause
	}
	return nil
}

func (x *CreateTrigStmt) GetTransitionRels() []*Node {
	if x != nil {
		return x.TransitionRels
	}
	return nil
}

func (x *CreateTrigStmt) GetDeferrable() bool {
	if x != nil {
		return x.Deferrable
	}
	return false
}

func (x *CreateTrigStmt) GetInitdeferred() bool {
	if x != nil {
		return x.Initdeferred
	}
	return false
}

func (x *CreateTrigStmt) GetConstrrel() *RangeVar {
	if x != nil {
		return x.Constrrel
	}
	return nil
}

type CreatePLangStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replace     bool    `protobuf:"varint,1,opt,name=replace,proto3" json:"replace,omitempty"`
	Plname      string  `protobuf:"bytes,2,opt,name=plname,proto3" json:"plname,omitempty"`
	Plhandler   []*Node `protobuf:"bytes,3,rep,name=plhandler,proto3" json:"plhandler,omitempty"`
	Plinline    []*Node `protobuf:"bytes,4,rep,name=plinline,proto3" json:"plinline,omitempty"`
	Plvalidator []*Node `protobuf:"bytes,5,rep,name=plvalidator,proto3" json:"plvalidator,omitempty"`
	Pltrusted   bool    `protobuf:"varint,6,opt,name=pltrusted,proto3" json:"pltrusted,omitempty"`
}

func (x *CreatePLangStmt) Reset() {
	*x = CreatePLangStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePLangStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePLangStmt) ProtoMessage() {}

func (x *CreatePLangStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePLangStmt.ProtoReflect.Descriptor instead.
func (*CreatePLangStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{112}
}

func (x *CreatePLangStmt) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *CreatePLangStmt) GetPlname() string {
	if x != nil {
		return x.Plname
	}
	return ""
}

func (x *CreatePLangStmt) GetPlhandler() []*Node {
	if x != nil {
		return x.Plhandler
	}
	return nil
}

func (x *CreatePLangStmt) GetPlinline() []*Node {
	if x != nil {
		return x.Plinline
	}
	return nil
}

func (x *CreatePLangStmt) GetPlvalidator() []*Node {
	if x != nil {
		return x.Plvalidator
	}
	return nil
}

func (x *CreatePLangStmt) GetPltrusted() bool {
	if x != nil {
		return x.Pltrusted
	}
	return false
}

type CreateRoleStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StmtType RoleStmtType `protobuf:"varint,1,opt,name=stmt_type,proto3,enum=pg_query.RoleStmtType" json:"stmt_type,omitempty"`
	Role     string       `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Options  []*Node      `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateRoleStmt) Reset() {
	*x = CreateRoleStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoleStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoleStmt) ProtoMessage() {}

func (x *CreateRoleStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoleStmt.ProtoReflect.Descriptor instead.
func (*CreateRoleStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{113}
}

func (x *CreateRoleStmt) GetStmtType() RoleStmtType {
	if x != nil {
		return x.StmtType
	}
	return RoleStmtType_ROLE_STMT_TYPE_UNDEFINED
}

func (x *CreateRoleStmt) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CreateRoleStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type AlterRoleStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role    *RoleSpec `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Options []*Node   `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	Action  int32     `protobuf:"varint,3,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *AlterRoleStmt) Reset() {
	*x = AlterRoleStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterRoleStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterRoleStmt) ProtoMessage() {}

func (x *AlterRoleStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterRoleStmt.ProtoReflect.Descriptor instead.
func (*AlterRoleStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{114}
}

func (x *AlterRoleStmt) GetRole() *RoleSpec {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *AlterRoleStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AlterRoleStmt) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

type DropRoleStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles     []*Node `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	MissingOk bool    `protobuf:"varint,2,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
}

func (x *DropRoleStmt) Reset() {
	*x = DropRoleStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropRoleStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropRoleStmt) ProtoMessage() {}

func (x *DropRoleStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropRoleStmt.ProtoReflect.Descriptor instead.
func (*DropRoleStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{115}
}

func (x *DropRoleStmt) GetRoles() []*Node {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *DropRoleStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

type LockStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relations []*Node `protobuf:"bytes,1,rep,name=relations,proto3" json:"relations,omitempty"`
	Mode      int32   `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Nowait    bool    `protobuf:"varint,3,opt,name=nowait,proto3" json:"nowait,omitempty"`
}

func (x *LockStmt) Reset() {
	*x = LockStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockStmt) ProtoMessage() {}

func (x *LockStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockStmt.ProtoReflect.Descriptor instead.
func (*LockStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{116}
}

func (x *LockStmt) GetRelations() []*Node {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *LockStmt) GetMode() int32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *LockStmt) GetNowait() bool {
	if x != nil {
		return x.Nowait
	}
	return false
}

type ConstraintsSetStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constraints []*Node `protobuf:"bytes,1,rep,name=constraints,proto3" json:"constraints,omitempty"`
	Deferred    bool    `protobuf:"varint,2,opt,name=deferred,proto3" json:"deferred,omitempty"`
}

func (x *ConstraintsSetStmt) Reset() {
	*x = ConstraintsSetStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintsSetStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintsSetStmt) ProtoMessage() {}

func (x *ConstraintsSetStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintsSetStmt.ProtoReflect.Descriptor instead.
func (*ConstraintsSetStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{117}
}

func (x *ConstraintsSetStmt) GetConstraints() []*Node {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *ConstraintsSetStmt) GetDeferred() bool {
	if x != nil {
		return x.Deferred
	}
	return false
}

type ReindexStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     ReindexObjectType `protobuf:"varint,1,opt,name=kind,proto3,enum=pg_query.ReindexObjectType" json:"kind,omitempty"`
	Relation *RangeVar         `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	Name     string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Params   []*Node           `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *ReindexStmt) Reset() {
	*x = ReindexStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReindexStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReindexStmt) ProtoMessage() {}

func (x *ReindexStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReindexStmt.ProtoReflect.Descriptor instead.
func (*ReindexStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{118}
}

func (x *ReindexStmt) GetKind() ReindexObjectType {
	if x != nil {
		return x.Kind
	}
	return ReindexObjectType_REINDEX_OBJECT_TYPE_UNDEFINED
}

func (x *ReindexStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *ReindexStmt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReindexStmt) GetParams() []*Node {
	if x != nil {
		return x.Params
	}
	return nil
}

type CheckPointStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckPointStmt) Reset() {
	*x = CheckPointStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckPointStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckPointStmt) ProtoMessage() {}

func (x *CheckPointStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckPointStmt.ProtoReflect.Descriptor instead.
func (*CheckPointStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{119}
}

type CreateSchemaStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schemaname  string    `protobuf:"bytes,1,opt,name=schemaname,proto3" json:"schemaname,omitempty"`
	Authrole    *RoleSpec `protobuf:"bytes,2,opt,name=authrole,proto3" json:"authrole,omitempty"`
	SchemaElts  []*Node   `protobuf:"bytes,3,rep,name=schema_elts,json=schemaElts,proto3" json:"schema_elts,omitempty"`
	IfNotExists bool      `protobuf:"varint,4,opt,name=if_not_exists,proto3" json:"if_not_exists,omitempty"`
}

func (x *CreateSchemaStmt) Reset() {
	*x = CreateSchemaStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchemaStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchemaStmt) ProtoMessage() {}

func (x *CreateSchemaStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchemaStmt.ProtoReflect.Descriptor instead.
func (*CreateSchemaStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{120}
}

func (x *CreateSchemaStmt) GetSchemaname() string {
	if x != nil {
		return x.Schemaname
	}
	return ""
}

func (x *CreateSchemaStmt) GetAuthrole() *RoleSpec {
	if x != nil {
		return x.Authrole
	}
	return nil
}

func (x *CreateSchemaStmt) GetSchemaElts() []*Node {
	if x != nil {
		return x.SchemaElts
	}
	return nil
}

func (x *CreateSchemaStmt) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

type AlterDatabaseStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dbname  string  `protobuf:"bytes,1,opt,name=dbname,proto3" json:"dbname,omitempty"`
	Options []*Node `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *AlterDatabaseStmt) Reset() {
	*x = AlterDatabaseStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterDatabaseStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterDatabaseStmt) ProtoMessage() {}

func (x *AlterDatabaseStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterDatabaseStmt.ProtoReflect.Descriptor instead.
func (*AlterDatabaseStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{121}
}

func (x *AlterDatabaseStmt) GetDbname() string {
	if x != nil {
		return x.Dbname
	}
	return ""
}

func (x *AlterDatabaseStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type AlterDatabaseRefreshCollStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dbname string `protobuf:"bytes,1,opt,name=dbname,proto3" json:"dbname,omitempty"`
}

func (x *AlterDatabaseRefreshCollStmt) Reset() {
	*x = AlterDatabaseRefreshCollStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterDatabaseRefreshCollStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterDatabaseRefreshCollStmt) ProtoMessage() {}

func (x *AlterDatabaseRefreshCollStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterDatabaseRefreshCollStmt.ProtoReflect.Descriptor instead.
func (*AlterDatabaseRefreshCollStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{122}
}

func (x *AlterDatabaseRefreshCollStmt) GetDbname() string {
	if x != nil {
		return x.Dbname
	}
	return ""
}

type AlterDatabaseSetStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dbname  string           `protobuf:"bytes,1,opt,name=dbname,proto3" json:"dbname,omitempty"`
	Setstmt *VariableSetStmt `protobuf:"bytes,2,opt,name=setstmt,proto3" json:"setstmt,omitempty"`
}

func (x *AlterDatabaseSetStmt) Reset() {
	*x = AlterDatabaseSetStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterDatabaseSetStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterDatabaseSetStmt) ProtoMessage() {}

func (x *AlterDatabaseSetStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterDatabaseSetStmt.ProtoReflect.Descriptor instead.
func (*AlterDatabaseSetStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{123}
}

func (x *AlterDatabaseSetStmt) GetDbname() string {
	if x != nil {
		return x.Dbname
	}
	return ""
}

func (x *AlterDatabaseSetStmt) GetSetstmt() *VariableSetStmt {
	if x != nil {
		return x.Setstmt
	}
	return nil
}

type AlterRoleSetStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role     *RoleSpec        `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Database string           `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	Setstmt  *VariableSetStmt `protobuf:"bytes,3,opt,name=setstmt,proto3" json:"setstmt,omitempty"`
}

func (x *AlterRoleSetStmt) Reset() {
	*x = AlterRoleSetStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterRoleSetStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterRoleSetStmt) ProtoMessage() {}

func (x *AlterRoleSetStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterRoleSetStmt.ProtoReflect.Descriptor instead.
func (*AlterRoleSetStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{124}
}

func (x *AlterRoleSetStmt) GetRole() *RoleSpec {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *AlterRoleSetStmt) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *AlterRoleSetStmt) GetSetstmt() *VariableSetStmt {
	if x != nil {
		return x.Setstmt
	}
	return nil
}

type CreateConversionStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConversionName  []*Node `protobuf:"bytes,1,rep,name=conversion_name,proto3" json:"conversion_name,omitempty"`
	ForEncodingName string  `protobuf:"bytes,2,opt,name=for_encoding_name,proto3" json:"for_encoding_name,omitempty"`
	ToEncodingName  string  `protobuf:"bytes,3,opt,name=to_encoding_name,proto3" json:"to_encoding_name,omitempty"`
	FuncName        []*Node `protobuf:"bytes,4,rep,name=func_name,proto3" json:"func_name,omitempty"`
	Def             bool    `protobuf:"varint,5,opt,name=def,proto3" json:"def,omitempty"`
}

func (x *CreateConversionStmt) Reset() {
	*x = CreateConversionStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConversionStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversionStmt) ProtoMessage() {}

func (x *CreateConversionStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversionStmt.ProtoReflect.Descriptor instead.
func (*CreateConversionStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{125}
}

func (x *CreateConversionStmt) GetConversionName() []*Node {
	if x != nil {
		return x.ConversionName
	}
	return nil
}

func (x *CreateConversionStmt) GetForEncodingName() string {
	if x != nil {
		return x.ForEncodingName
	}
	return ""
}

func (x *CreateConversionStmt) GetToEncodingName() string {
	if x != nil {
		return x.ToEncodingName
	}
	return ""
}

func (x *CreateConversionStmt) GetFuncName() []*Node {
	if x != nil {
		return x.FuncName
	}
	return nil
}

func (x *CreateConversionStmt) GetDef() bool {
	if x != nil {
		return x.Def
	}
	return false
}

type CreateCastStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sourcetype *TypeName       `protobuf:"bytes,1,opt,name=sourcetype,proto3" json:"sourcetype,omitempty"`
	Targettype *TypeName       `protobuf:"bytes,2,opt,name=targettype,proto3" json:"targettype,omitempty"`
	Func       *ObjectWithArgs `protobuf:"bytes,3,opt,name=func,proto3" json:"func,omitempty"`
	Context    CoercionContext `protobuf:"varint,4,opt,name=context,proto3,enum=pg_query.CoercionContext" json:"context,omitempty"`
	Inout      bool            `protobuf:"varint,5,opt,name=inout,proto3" json:"inout,omitempty"`
}

func (x *CreateCastStmt) Reset() {
	*x = CreateCastStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCastStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCastStmt) ProtoMessage() {}

func (x *CreateCastStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCastStmt.ProtoReflect.Descriptor instead.
func (*CreateCastStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{126}
}

func (x *CreateCastStmt) GetSourcetype() *TypeName {
	if x != nil {
		return x.Sourcetype
	}
	return nil
}

func (x *CreateCastStmt) GetTargettype() *TypeName {
	if x != nil {
		return x.Targettype
	}
	return nil
}

func (x *CreateCastStmt) GetFunc() *ObjectWithArgs {
	if x != nil {
		return x.Func
	}
	return nil
}

func (x *CreateCastStmt) GetContext() CoercionContext {
	if x != nil {
		return x.Context
	}
	return CoercionContext_COERCION_CONTEXT_UNDEFINED
}

func (x *CreateCastStmt) GetInout() bool {
	if x != nil {
		return x.Inout
	}
	return false
}

type CreateOpClassStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opclassname  []*Node   `protobuf:"bytes,1,rep,name=opclassname,proto3" json:"opclassname,omitempty"`
	Opfamilyname []*Node   `protobuf:"bytes,2,rep,name=opfamilyname,proto3" json:"opfamilyname,omitempty"`
	Amname       string    `protobuf:"bytes,3,opt,name=amname,proto3" json:"amname,omitempty"`
	Datatype     *TypeName `protobuf:"bytes,4,opt,name=datatype,proto3" json:"datatype,omitempty"`
	Items        []*Node   `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty"`
	IsDefault    bool      `protobuf:"varint,6,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *CreateOpClassStmt) Reset() {
	*x = CreateOpClassStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpClassStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpClassStmt) ProtoMessage() {}

func (x *CreateOpClassStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpClassStmt.ProtoReflect.Descriptor instead.
func (*CreateOpClassStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{127}
}

func (x *CreateOpClassStmt) GetOpclassname() []*Node {
	if x != nil {
		return x.Opclassname
	}
	return nil
}

func (x *CreateOpClassStmt) GetOpfamilyname() []*Node {
	if x != nil {
		return x.Opfamilyname
	}
	return nil
}

func (x *CreateOpClassStmt) GetAmname() string {
	if x != nil {
		return x.Amname
	}
	return ""
}

func (x *CreateOpClassStmt) GetDatatype() *TypeName {
	if x != nil {
		return x.Datatype
	}
	return nil
}

func (x *CreateOpClassStmt) GetItems() []*Node {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *CreateOpClassStmt) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type CreateOpFamilyStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opfamilyname []*Node `protobuf:"bytes,1,rep,name=opfamilyname,proto3" json:"opfamilyname,omitempty"`
	Amname       string  `protobuf:"bytes,2,opt,name=amname,proto3" json:"amname,omitempty"`
}

func (x *CreateOpFamilyStmt) Reset() {
	*x = CreateOpFamilyStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpFamilyStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpFamilyStmt) ProtoMessage() {}

func (x *CreateOpFamilyStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpFamilyStmt.ProtoReflect.Descriptor instead.
func (*CreateOpFamilyStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{128}
}

func (x *CreateOpFamilyStmt) GetOpfamilyname() []*Node {
	if x != nil {
		return x.Opfamilyname
	}
	return nil
}

func (x *CreateOpFamilyStmt) GetAmname() string {
	if x != nil {
		return x.Amname
	}
	return ""
}

type AlterOpFamilyStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opfamilyname []*Node `protobuf:"bytes,1,rep,name=opfamilyname,proto3" json:"opfamilyname,omitempty"`
	Amname       string  `protobuf:"bytes,2,opt,name=amname,proto3" json:"amname,omitempty"`
	IsDrop       bool    `protobuf:"varint,3,opt,name=is_drop,json=isDrop,proto3" json:"is_drop,omitempty"`
	Items        []*Node `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *AlterOpFamilyStmt) Reset() {
	*x = AlterOpFamilyStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterOpFamilyStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterOpFamilyStmt) ProtoMessage() {}

func (x *AlterOpFamilyStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterOpFamilyStmt.ProtoReflect.Descriptor instead.
func (*AlterOpFamilyStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{129}
}

func (x *AlterOpFamilyStmt) GetOpfamilyname() []*Node {
	if x != nil {
		return x.Opfamilyname
	}
	return nil
}

func (x *AlterOpFamilyStmt) GetAmname() string {
	if x != nil {
		return x.Amname
	}
	return ""
}

func (x *AlterOpFamilyStmt) GetIsDrop() bool {
	if x != nil {
		return x.IsDrop
	}
	return false
}

func (x *AlterOpFamilyStmt) GetItems() []*Node {
	if x != nil {
		return x.Items
	}
	return nil
}

type PrepareStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Argtypes []*Node `protobuf:"bytes,2,rep,name=argtypes,proto3" json:"argtypes,omitempty"`
	Query    *Node   `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *PrepareStmt) Reset() {
	*x = PrepareStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareStmt) ProtoMessage() {}

func (x *PrepareStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareStmt.ProtoReflect.Descriptor instead.
func (*PrepareStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{130}
}

func (x *PrepareStmt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrepareStmt) GetArgtypes() []*Node {
	if x != nil {
		return x.Argtypes
	}
	return nil
}

func (x *PrepareStmt) GetQuery() *Node {
	if x != nil {
		return x.Query
	}
	return nil
}

type ExecuteStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Params []*Node `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *ExecuteStmt) Reset() {
	*x = ExecuteStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteStmt) ProtoMessage() {}

func (x *ExecuteStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteStmt.ProtoReflect.Descriptor instead.
func (*ExecuteStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{131}
}

func (x *ExecuteStmt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecuteStmt) GetParams() []*Node {
	if x != nil {
		return x.Params
	}
	return nil
}

type DeallocateStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeallocateStmt) Reset() {
	*x = DeallocateStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeallocateStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeallocateStmt) ProtoMessage() {}

func (x *DeallocateStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeallocateStmt.ProtoReflect.Descriptor instead.
func (*DeallocateStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{132}
}

func (x *DeallocateStmt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeclareCursorStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Portalname string `protobuf:"bytes,1,opt,name=portalname,proto3" json:"portalname,omitempty"`
	Options    int32  `protobuf:"varint,2,opt,name=options,proto3" json:"options,omitempty"`
	Query      *Node  `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *DeclareCursorStmt) Reset() {
	*x = DeclareCursorStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeclareCursorStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeclareCursorStmt) ProtoMessage() {}

func (x *DeclareCursorStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeclareCursorStmt.ProtoReflect.Descriptor instead.
func (*DeclareCursorStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{133}
}

func (x *DeclareCursorStmt) GetPortalname() string {
	if x != nil {
		return x.Portalname
	}
	return ""
}

func (x *DeclareCursorStmt) GetOptions() int32 {
	if x != nil {
		return x.Options
	}
	return 0
}

func (x *DeclareCursorStmt) GetQuery() *Node {
	if x != nil {
		return x.Query
	}
	return nil
}

type CreateTableSpaceStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tablespacename string    `protobuf:"bytes,1,opt,name=tablespacename,proto3" json:"tablespacename,omitempty"`
	Owner          *RoleSpec `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	Location       string    `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Options        []*Node   `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateTableSpaceStmt) Reset() {
	*x = CreateTableSpaceStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableSpaceStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableSpaceStmt) ProtoMessage() {}

func (x *CreateTableSpaceStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableSpaceStmt.ProtoReflect.Descriptor instead.
func (*CreateTableSpaceStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{134}
}

func (x *CreateTableSpaceStmt) GetTablespacename() string {
	if x != nil {
		return x.Tablespacename
	}
	return ""
}

func (x *CreateTableSpaceStmt) GetOwner() *RoleSpec {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *CreateTableSpaceStmt) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *CreateTableSpaceStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type DropTableSpaceStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tablespacename string `protobuf:"bytes,1,opt,name=tablespacename,proto3" json:"tablespacename,omitempty"`
	MissingOk      bool   `protobuf:"varint,2,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
}

func (x *DropTableSpaceStmt) Reset() {
	*x = DropTableSpaceStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTableSpaceStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTableSpaceStmt) ProtoMessage() {}

func (x *DropTableSpaceStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTableSpaceStmt.ProtoReflect.Descriptor instead.
func (*DropTableSpaceStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{135}
}

func (x *DropTableSpaceStmt) GetTablespacename() string {
	if x != nil {
		return x.Tablespacename
	}
	return ""
}

func (x *DropTableSpaceStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

type AlterObjectDependsStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectType ObjectType `protobuf:"varint,1,opt,name=object_type,json=objectType,proto3,enum=pg_query.ObjectType" json:"object_type,omitempty"`
	Relation   *RangeVar  `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	Object     *Node      `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Extname    *String    `protobuf:"bytes,4,opt,name=extname,proto3" json:"extname,omitempty"`
	Remove     bool       `protobuf:"varint,5,opt,name=remove,proto3" json:"remove,omitempty"`
}

func (x *AlterObjectDependsStmt) Reset() {
	*x = AlterObjectDependsStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterObjectDependsStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterObjectDependsStmt) ProtoMessage() {}

func (x *AlterObjectDependsStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterObjectDependsStmt.ProtoReflect.Descriptor instead.
func (*AlterObjectDependsStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{136}
}

func (x *AlterObjectDependsStmt) GetObjectType() ObjectType {
	if x != nil {
		return x.ObjectType
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *AlterObjectDependsStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *AlterObjectDependsStmt) GetObject() *Node {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *AlterObjectDependsStmt) GetExtname() *String {
	if x != nil {
		return x.Extname
	}
	return nil
}

func (x *AlterObjectDependsStmt) GetRemove() bool {
	if x != nil {
		return x.Remove
	}
	return false
}

type AlterObjectSchemaStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectType ObjectType `protobuf:"varint,1,opt,name=object_type,json=objectType,proto3,enum=pg_query.ObjectType" json:"object_type,omitempty"`
	Relation   *RangeVar  `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	Object     *Node      `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Newschema  string     `protobuf:"bytes,4,opt,name=newschema,proto3" json:"newschema,omitempty"`
	MissingOk  bool       `protobuf:"varint,5,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
}

func (x *AlterObjectSchemaStmt) Reset() {
	*x = AlterObjectSchemaStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterObjectSchemaStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterObjectSchemaStmt) ProtoMessage() {}

func (x *AlterObjectSchemaStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterObjectSchemaStmt.ProtoReflect.Descriptor instead.
func (*AlterObjectSchemaStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{137}
}

func (x *AlterObjectSchemaStmt) GetObjectType() ObjectType {
	if x != nil {
		return x.ObjectType
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *AlterObjectSchemaStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *AlterObjectSchemaStmt) GetObject() *Node {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *AlterObjectSchemaStmt) GetNewschema() string {
	if x != nil {
		return x.Newschema
	}
	return ""
}

func (x *AlterObjectSchemaStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

type AlterOwnerStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObjectType ObjectType `protobuf:"varint,1,opt,name=object_type,json=objectType,proto3,enum=pg_query.ObjectType" json:"object_type,omitempty"`
	Relation   *RangeVar  `protobuf:"bytes,2,opt,name=relation,proto3" json:"relation,omitempty"`
	Object     *Node      `protobuf:"bytes,3,opt,name=object,proto3" json:"object,omitempty"`
	Newowner   *RoleSpec  `protobuf:"bytes,4,opt,name=newowner,proto3" json:"newowner,omitempty"`
}

func (x *AlterOwnerStmt) Reset() {
	*x = AlterOwnerStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterOwnerStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterOwnerStmt) ProtoMessage() {}

func (x *AlterOwnerStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterOwnerStmt.ProtoReflect.Descriptor instead.
func (*AlterOwnerStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{138}
}

func (x *AlterOwnerStmt) GetObjectType() ObjectType {
	if x != nil {
		return x.ObjectType
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *AlterOwnerStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *AlterOwnerStmt) GetObject() *Node {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *AlterOwnerStmt) GetNewowner() *RoleSpec {
	if x != nil {
		return x.Newowner
	}
	return nil
}

type AlterOperatorStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opername *ObjectWithArgs `protobuf:"bytes,1,opt,name=opername,proto3" json:"opername,omitempty"`
	Options  []*Node         `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *AlterOperatorStmt) Reset() {
	*x = AlterOperatorStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterOperatorStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterOperatorStmt) ProtoMessage() {}

func (x *AlterOperatorStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterOperatorStmt.ProtoReflect.Descriptor instead.
func (*AlterOperatorStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{139}
}

func (x *AlterOperatorStmt) GetOpername() *ObjectWithArgs {
	if x != nil {
		return x.Opername
	}
	return nil
}

func (x *AlterOperatorStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type AlterTypeStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName []*Node `protobuf:"bytes,1,rep,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Options  []*Node `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *AlterTypeStmt) Reset() {
	*x = AlterTypeStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTypeStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTypeStmt) ProtoMessage() {}

func (x *AlterTypeStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTypeStmt.ProtoReflect.Descriptor instead.
func (*AlterTypeStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{140}
}

func (x *AlterTypeStmt) GetTypeName() []*Node {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *AlterTypeStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type DropOwnedStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles    []*Node      `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	Behavior DropBehavior `protobuf:"varint,2,opt,name=behavior,proto3,enum=pg_query.DropBehavior" json:"behavior,omitempty"`
}

func (x *DropOwnedStmt) Reset() {
	*x = DropOwnedStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropOwnedStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropOwnedStmt) ProtoMessage() {}

func (x *DropOwnedStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropOwnedStmt.ProtoReflect.Descriptor instead.
func (*DropOwnedStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{141}
}

func (x *DropOwnedStmt) GetRoles() []*Node {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *DropOwnedStmt) GetBehavior() DropBehavior {
	if x != nil {
		return x.Behavior
	}
	return DropBehavior_DROP_BEHAVIOR_UNDEFINED
}

type ReassignOwnedStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roles   []*Node   `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	Newrole *RoleSpec `protobuf:"bytes,2,opt,name=newrole,proto3" json:"newrole,omitempty"`
}

func (x *ReassignOwnedStmt) Reset() {
	*x = ReassignOwnedStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReassignOwnedStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReassignOwnedStmt) ProtoMessage() {}

func (x *ReassignOwnedStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReassignOwnedStmt.ProtoReflect.Descriptor instead.
func (*ReassignOwnedStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{142}
}

func (x *ReassignOwnedStmt) GetRoles() []*Node {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ReassignOwnedStmt) GetNewrole() *RoleSpec {
	if x != nil {
		return x.Newrole
	}
	return nil
}

type CompositeTypeStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Typevar    *RangeVar `protobuf:"bytes,1,opt,name=typevar,proto3" json:"typevar,omitempty"`
	Coldeflist []*Node   `protobuf:"bytes,2,rep,name=coldeflist,proto3" json:"coldeflist,omitempty"`
}

func (x *CompositeTypeStmt) Reset() {
	*x = CompositeTypeStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositeTypeStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositeTypeStmt) ProtoMessage() {}

func (x *CompositeTypeStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositeTypeStmt.ProtoReflect.Descriptor instead.
func (*CompositeTypeStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{143}
}

func (x *CompositeTypeStmt) GetTypevar() *RangeVar {
	if x != nil {
		return x.Typevar
	}
	return nil
}

func (x *CompositeTypeStmt) GetColdeflist() []*Node {
	if x != nil {
		return x.Coldeflist
	}
	return nil
}

type CreateEnumStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName []*Node `protobuf:"bytes,1,rep,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Vals     []*Node `protobuf:"bytes,2,rep,name=vals,proto3" json:"vals,omitempty"`
}

func (x *CreateEnumStmt) Reset() {
	*x = CreateEnumStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnumStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnumStmt) ProtoMessage() {}

func (x *CreateEnumStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnumStmt.ProtoReflect.Descriptor instead.
func (*CreateEnumStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{144}
}

func (x *CreateEnumStmt) GetTypeName() []*Node {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *CreateEnumStmt) GetVals() []*Node {
	if x != nil {
		return x.Vals
	}
	return nil
}

type CreateRangeStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName []*Node `protobuf:"bytes,1,rep,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Params   []*Node `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
}

func (x *CreateRangeStmt) Reset() {
	*x = CreateRangeStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRangeStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRangeStmt) ProtoMessage() {}

func (x *CreateRangeStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRangeStmt.ProtoReflect.Descriptor instead.
func (*CreateRangeStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{145}
}

func (x *CreateRangeStmt) GetTypeName() []*Node {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *CreateRangeStmt) GetParams() []*Node {
	if x != nil {
		return x.Params
	}
	return nil
}

type AlterEnumStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName           []*Node `protobuf:"bytes,1,rep,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	OldVal             string  `protobuf:"bytes,2,opt,name=old_val,json=oldVal,proto3" json:"old_val,omitempty"`
	NewVal             string  `protobuf:"bytes,3,opt,name=new_val,json=newVal,proto3" json:"new_val,omitempty"`
	NewValNeighbor     string  `protobuf:"bytes,4,opt,name=new_val_neighbor,json=newValNeighbor,proto3" json:"new_val_neighbor,omitempty"`
	NewValIsAfter      bool    `protobuf:"varint,5,opt,name=new_val_is_after,json=newValIsAfter,proto3" json:"new_val_is_after,omitempty"`
	SkipIfNewValExists bool    `protobuf:"varint,6,opt,name=skip_if_new_val_exists,json=skipIfNewValExists,proto3" json:"skip_if_new_val_exists,omitempty"`
}

func (x *AlterEnumStmt) Reset() {
	*x = AlterEnumStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterEnumStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterEnumStmt) ProtoMessage() {}

func (x *AlterEnumStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterEnumStmt.ProtoReflect.Descriptor instead.
func (*AlterEnumStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{146}
}

func (x *AlterEnumStmt) GetTypeName() []*Node {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *AlterEnumStmt) GetOldVal() string {
	if x != nil {
		return x.OldVal
	}
	return ""
}

func (x *AlterEnumStmt) GetNewVal() string {
	if x != nil {
		return x.NewVal
	}
	return ""
}

func (x *AlterEnumStmt) GetNewValNeighbor() string {
	if x != nil {
		return x.NewValNeighbor
	}
	return ""
}

func (x *AlterEnumStmt) GetNewValIsAfter() bool {
	if x != nil {
		return x.NewValIsAfter
	}
	return false
}

func (x *AlterEnumStmt) GetSkipIfNewValExists() bool {
	if x != nil {
		return x.SkipIfNewValExists
	}
	return false
}

type AlterTSDictionaryStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dictname []*Node `protobuf:"bytes,1,rep,name=dictname,proto3" json:"dictname,omitempty"`
	Options  []*Node `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *AlterTSDictionaryStmt) Reset() {
	*x = AlterTSDictionaryStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTSDictionaryStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTSDictionaryStmt) ProtoMessage() {}

func (x *AlterTSDictionaryStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTSDictionaryStmt.ProtoReflect.Descriptor instead.
func (*AlterTSDictionaryStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{147}
}

func (x *AlterTSDictionaryStmt) GetDictname() []*Node {
	if x != nil {
		return x.Dictname
	}
	return nil
}

func (x *AlterTSDictionaryStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type AlterTSConfigurationStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind      AlterTSConfigType `protobuf:"varint,1,opt,name=kind,proto3,enum=pg_query.AlterTSConfigType" json:"kind,omitempty"`
	Cfgname   []*Node           `protobuf:"bytes,2,rep,name=cfgname,proto3" json:"cfgname,omitempty"`
	Tokentype []*Node           `protobuf:"bytes,3,rep,name=tokentype,proto3" json:"tokentype,omitempty"`
	Dicts     []*Node           `protobuf:"bytes,4,rep,name=dicts,proto3" json:"dicts,omitempty"`
	Override  bool              `protobuf:"varint,5,opt,name=override,proto3" json:"override,omitempty"`
	Replace   bool              `protobuf:"varint,6,opt,name=replace,proto3" json:"replace,omitempty"`
	MissingOk bool              `protobuf:"varint,7,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
}

func (x *AlterTSConfigurationStmt) Reset() {
	*x = AlterTSConfigurationStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTSConfigurationStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTSConfigurationStmt) ProtoMessage() {}

func (x *AlterTSConfigurationStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTSConfigurationStmt.ProtoReflect.Descriptor instead.
func (*AlterTSConfigurationStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{148}
}

func (x *AlterTSConfigurationStmt) GetKind() AlterTSConfigType {
	if x != nil {
		return x.Kind
	}
	return AlterTSConfigType_ALTER_TSCONFIG_TYPE_UNDEFINED
}

func (x *AlterTSConfigurationStmt) GetCfgname() []*Node {
	if x != nil {
		return x.Cfgname
	}
	return nil
}

func (x *AlterTSConfigurationStmt) GetTokentype() []*Node {
	if x != nil {
		return x.Tokentype
	}
	return nil
}

func (x *AlterTSConfigurationStmt) GetDicts() []*Node {
	if x != nil {
		return x.Dicts
	}
	return nil
}

func (x *AlterTSConfigurationStmt) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

func (x *AlterTSConfigurationStmt) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *AlterTSConfigurationStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

type CreateFdwStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fdwname     string  `protobuf:"bytes,1,opt,name=fdwname,proto3" json:"fdwname,omitempty"`
	FuncOptions []*Node `protobuf:"bytes,2,rep,name=func_options,proto3" json:"func_options,omitempty"`
	Options     []*Node `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateFdwStmt) Reset() {
	*x = CreateFdwStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFdwStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFdwStmt) ProtoMessage() {}

func (x *CreateFdwStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFdwStmt.ProtoReflect.Descriptor instead.
func (*CreateFdwStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{149}
}

func (x *CreateFdwStmt) GetFdwname() string {
	if x != nil {
		return x.Fdwname
	}
	return ""
}

func (x *CreateFdwStmt) GetFuncOptions() []*Node {
	if x != nil {
		return x.FuncOptions
	}
	return nil
}

func (x *CreateFdwStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type AlterFdwStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fdwname     string  `protobuf:"bytes,1,opt,name=fdwname,proto3" json:"fdwname,omitempty"`
	FuncOptions []*Node `protobuf:"bytes,2,rep,name=func_options,proto3" json:"func_options,omitempty"`
	Options     []*Node `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *AlterFdwStmt) Reset() {
	*x = AlterFdwStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterFdwStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterFdwStmt) ProtoMessage() {}

func (x *AlterFdwStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterFdwStmt.ProtoReflect.Descriptor instead.
func (*AlterFdwStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{150}
}

func (x *AlterFdwStmt) GetFdwname() string {
	if x != nil {
		return x.Fdwname
	}
	return ""
}

func (x *AlterFdwStmt) GetFuncOptions() []*Node {
	if x != nil {
		return x.FuncOptions
	}
	return nil
}

func (x *AlterFdwStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreateForeignServerStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servername  string  `protobuf:"bytes,1,opt,name=servername,proto3" json:"servername,omitempty"`
	Servertype  string  `protobuf:"bytes,2,opt,name=servertype,proto3" json:"servertype,omitempty"`
	Version     string  `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Fdwname     string  `protobuf:"bytes,4,opt,name=fdwname,proto3" json:"fdwname,omitempty"`
	IfNotExists bool    `protobuf:"varint,5,opt,name=if_not_exists,proto3" json:"if_not_exists,omitempty"`
	Options     []*Node `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateForeignServerStmt) Reset() {
	*x = CreateForeignServerStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateForeignServerStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateForeignServerStmt) ProtoMessage() {}

func (x *CreateForeignServerStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateForeignServerStmt.ProtoReflect.Descriptor instead.
func (*CreateForeignServerStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{151}
}

func (x *CreateForeignServerStmt) GetServername() string {
	if x != nil {
		return x.Servername
	}
	return ""
}

func (x *CreateForeignServerStmt) GetServertype() string {
	if x != nil {
		return x.Servertype
	}
	return ""
}

func (x *CreateForeignServerStmt) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CreateForeignServerStmt) GetFdwname() string {
	if x != nil {
		return x.Fdwname
	}
	return ""
}

func (x *CreateForeignServerStmt) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *CreateForeignServerStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type AlterForeignServerStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Servername string  `protobuf:"bytes,1,opt,name=servername,proto3" json:"servername,omitempty"`
	Version    string  `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Options    []*Node `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
	HasVersion bool    `protobuf:"varint,4,opt,name=has_version,proto3" json:"has_version,omitempty"`
}

func (x *AlterForeignServerStmt) Reset() {
	*x = AlterForeignServerStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterForeignServerStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterForeignServerStmt) ProtoMessage() {}

func (x *AlterForeignServerStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterForeignServerStmt.ProtoReflect.Descriptor instead.
func (*AlterForeignServerStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{152}
}

func (x *AlterForeignServerStmt) GetServername() string {
	if x != nil {
		return x.Servername
	}
	return ""
}

func (x *AlterForeignServerStmt) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AlterForeignServerStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AlterForeignServerStmt) GetHasVersion() bool {
	if x != nil {
		return x.HasVersion
	}
	return false
}

type CreateUserMappingStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User        *RoleSpec `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Servername  string    `protobuf:"bytes,2,opt,name=servername,proto3" json:"servername,omitempty"`
	IfNotExists bool      `protobuf:"varint,3,opt,name=if_not_exists,proto3" json:"if_not_exists,omitempty"`
	Options     []*Node   `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateUserMappingStmt) Reset() {
	*x = CreateUserMappingStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserMappingStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserMappingStmt) ProtoMessage() {}

func (x *CreateUserMappingStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserMappingStmt.ProtoReflect.Descriptor instead.
func (*CreateUserMappingStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{153}
}

func (x *CreateUserMappingStmt) GetUser() *RoleSpec {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CreateUserMappingStmt) GetServername() string {
	if x != nil {
		return x.Servername
	}
	return ""
}

func (x *CreateUserMappingStmt) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *CreateUserMappingStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type AlterUserMappingStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User       *RoleSpec `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Servername string    `protobuf:"bytes,2,opt,name=servername,proto3" json:"servername,omitempty"`
	Options    []*Node   `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *AlterUserMappingStmt) Reset() {
	*x = AlterUserMappingStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterUserMappingStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterUserMappingStmt) ProtoMessage() {}

func (x *AlterUserMappingStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterUserMappingStmt.ProtoReflect.Descriptor instead.
func (*AlterUserMappingStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{154}
}

func (x *AlterUserMappingStmt) GetUser() *RoleSpec {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *AlterUserMappingStmt) GetServername() string {
	if x != nil {
		return x.Servername
	}
	return ""
}

func (x *AlterUserMappingStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type DropUserMappingStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User       *RoleSpec `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Servername string    `protobuf:"bytes,2,opt,name=servername,proto3" json:"servername,omitempty"`
	MissingOk  bool      `protobuf:"varint,3,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
}

func (x *DropUserMappingStmt) Reset() {
	*x = DropUserMappingStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropUserMappingStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropUserMappingStmt) ProtoMessage() {}

func (x *DropUserMappingStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropUserMappingStmt.ProtoReflect.Descriptor instead.
func (*DropUserMappingStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{155}
}

func (x *DropUserMappingStmt) GetUser() *RoleSpec {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *DropUserMappingStmt) GetServername() string {
	if x != nil {
		return x.Servername
	}
	return ""
}

func (x *DropUserMappingStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

type AlterTableSpaceOptionsStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tablespacename string  `protobuf:"bytes,1,opt,name=tablespacename,proto3" json:"tablespacename,omitempty"`
	Options        []*Node `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	IsReset        bool    `protobuf:"varint,3,opt,name=is_reset,json=isReset,proto3" json:"is_reset,omitempty"`
}

func (x *AlterTableSpaceOptionsStmt) Reset() {
	*x = AlterTableSpaceOptionsStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableSpaceOptionsStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableSpaceOptionsStmt) ProtoMessage() {}

func (x *AlterTableSpaceOptionsStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableSpaceOptionsStmt.ProtoReflect.Descriptor instead.
func (*AlterTableSpaceOptionsStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{156}
}

func (x *AlterTableSpaceOptionsStmt) GetTablespacename() string {
	if x != nil {
		return x.Tablespacename
	}
	return ""
}

func (x *AlterTableSpaceOptionsStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AlterTableSpaceOptionsStmt) GetIsReset() bool {
	if x != nil {
		return x.IsReset
	}
	return false
}

type AlterTableMoveAllStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrigTablespacename string     `protobuf:"bytes,1,opt,name=orig_tablespacename,proto3" json:"orig_tablespacename,omitempty"`
	Objtype            ObjectType `protobuf:"varint,2,opt,name=objtype,proto3,enum=pg_query.ObjectType" json:"objtype,omitempty"`
	Roles              []*Node    `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	NewTablespacename  string     `protobuf:"bytes,4,opt,name=new_tablespacename,proto3" json:"new_tablespacename,omitempty"`
	Nowait             bool       `protobuf:"varint,5,opt,name=nowait,proto3" json:"nowait,omitempty"`
}

func (x *AlterTableMoveAllStmt) Reset() {
	*x = AlterTableMoveAllStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableMoveAllStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableMoveAllStmt) ProtoMessage() {}

func (x *AlterTableMoveAllStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableMoveAllStmt.ProtoReflect.Descriptor instead.
func (*AlterTableMoveAllStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{157}
}

func (x *AlterTableMoveAllStmt) GetOrigTablespacename() string {
	if x != nil {
		return x.OrigTablespacename
	}
	return ""
}

func (x *AlterTableMoveAllStmt) GetObjtype() ObjectType {
	if x != nil {
		return x.Objtype
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *AlterTableMoveAllStmt) GetRoles() []*Node {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *AlterTableMoveAllStmt) GetNewTablespacename() string {
	if x != nil {
		return x.NewTablespacename
	}
	return ""
}

func (x *AlterTableMoveAllStmt) GetNowait() bool {
	if x != nil {
		return x.Nowait
	}
	return false
}

type SecLabelStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objtype  ObjectType `protobuf:"varint,1,opt,name=objtype,proto3,enum=pg_query.ObjectType" json:"objtype,omitempty"`
	Object   *Node      `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	Provider string     `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Label    string     `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *SecLabelStmt) Reset() {
	*x = SecLabelStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecLabelStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecLabelStmt) ProtoMessage() {}

func (x *SecLabelStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecLabelStmt.ProtoReflect.Descriptor instead.
func (*SecLabelStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{158}
}

func (x *SecLabelStmt) GetObjtype() ObjectType {
	if x != nil {
		return x.Objtype
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *SecLabelStmt) GetObject() *Node {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *SecLabelStmt) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *SecLabelStmt) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type CreateForeignTableStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseStmt   *CreateStmt `protobuf:"bytes,1,opt,name=base_stmt,json=base,proto3" json:"base_stmt,omitempty"`
	Servername string      `protobuf:"bytes,2,opt,name=servername,proto3" json:"servername,omitempty"`
	Options    []*Node     `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateForeignTableStmt) Reset() {
	*x = CreateForeignTableStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateForeignTableStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateForeignTableStmt) ProtoMessage() {}

func (x *CreateForeignTableStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateForeignTableStmt.ProtoReflect.Descriptor instead.
func (*CreateForeignTableStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{159}
}

func (x *CreateForeignTableStmt) GetBaseStmt() *CreateStmt {
	if x != nil {
		return x.BaseStmt
	}
	return nil
}

func (x *CreateForeignTableStmt) GetServername() string {
	if x != nil {
		return x.Servername
	}
	return ""
}

func (x *CreateForeignTableStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type ImportForeignSchemaStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName   string                  `protobuf:"bytes,1,opt,name=server_name,proto3" json:"server_name,omitempty"`
	RemoteSchema string                  `protobuf:"bytes,2,opt,name=remote_schema,proto3" json:"remote_schema,omitempty"`
	LocalSchema  string                  `protobuf:"bytes,3,opt,name=local_schema,proto3" json:"local_schema,omitempty"`
	ListType     ImportForeignSchemaType `protobuf:"varint,4,opt,name=list_type,proto3,enum=pg_query.ImportForeignSchemaType" json:"list_type,omitempty"`
	TableList    []*Node                 `protobuf:"bytes,5,rep,name=table_list,proto3" json:"table_list,omitempty"`
	Options      []*Node                 `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *ImportForeignSchemaStmt) Reset() {
	*x = ImportForeignSchemaStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImportForeignSchemaStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImportForeignSchemaStmt) ProtoMessage() {}

func (x *ImportForeignSchemaStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImportForeignSchemaStmt.ProtoReflect.Descriptor instead.
func (*ImportForeignSchemaStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{160}
}

func (x *ImportForeignSchemaStmt) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *ImportForeignSchemaStmt) GetRemoteSchema() string {
	if x != nil {
		return x.RemoteSchema
	}
	return ""
}

func (x *ImportForeignSchemaStmt) GetLocalSchema() string {
	if x != nil {
		return x.LocalSchema
	}
	return ""
}

func (x *ImportForeignSchemaStmt) GetListType() ImportForeignSchemaType {
	if x != nil {
		return x.ListType
	}
	return ImportForeignSchemaType_IMPORT_FOREIGN_SCHEMA_TYPE_UNDEFINED
}

func (x *ImportForeignSchemaStmt) GetTableList() []*Node {
	if x != nil {
		return x.TableList
	}
	return nil
}

func (x *ImportForeignSchemaStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreateExtensionStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extname     string  `protobuf:"bytes,1,opt,name=extname,proto3" json:"extname,omitempty"`
	IfNotExists bool    `protobuf:"varint,2,opt,name=if_not_exists,proto3" json:"if_not_exists,omitempty"`
	Options     []*Node `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateExtensionStmt) Reset() {
	*x = CreateExtensionStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExtensionStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExtensionStmt) ProtoMessage() {}

func (x *CreateExtensionStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExtensionStmt.ProtoReflect.Descriptor instead.
func (*CreateExtensionStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{161}
}

func (x *CreateExtensionStmt) GetExtname() string {
	if x != nil {
		return x.Extname
	}
	return ""
}

func (x *CreateExtensionStmt) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *CreateExtensionStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type AlterExtensionStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extname string  `protobuf:"bytes,1,opt,name=extname,proto3" json:"extname,omitempty"`
	Options []*Node `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *AlterExtensionStmt) Reset() {
	*x = AlterExtensionStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterExtensionStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterExtensionStmt) ProtoMessage() {}

func (x *AlterExtensionStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterExtensionStmt.ProtoReflect.Descriptor instead.
func (*AlterExtensionStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{162}
}

func (x *AlterExtensionStmt) GetExtname() string {
	if x != nil {
		return x.Extname
	}
	return ""
}

func (x *AlterExtensionStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type AlterExtensionContentsStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Extname string     `protobuf:"bytes,1,opt,name=extname,proto3" json:"extname,omitempty"`
	Action  int32      `protobuf:"varint,2,opt,name=action,proto3" json:"action,omitempty"`
	Objtype ObjectType `protobuf:"varint,3,opt,name=objtype,proto3,enum=pg_query.ObjectType" json:"objtype,omitempty"`
	Object  *Node      `protobuf:"bytes,4,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *AlterExtensionContentsStmt) Reset() {
	*x = AlterExtensionContentsStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterExtensionContentsStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterExtensionContentsStmt) ProtoMessage() {}

func (x *AlterExtensionContentsStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterExtensionContentsStmt.ProtoReflect.Descriptor instead.
func (*AlterExtensionContentsStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{163}
}

func (x *AlterExtensionContentsStmt) GetExtname() string {
	if x != nil {
		return x.Extname
	}
	return ""
}

func (x *AlterExtensionContentsStmt) GetAction() int32 {
	if x != nil {
		return x.Action
	}
	return 0
}

func (x *AlterExtensionContentsStmt) GetObjtype() ObjectType {
	if x != nil {
		return x.Objtype
	}
	return ObjectType_OBJECT_TYPE_UNDEFINED
}

func (x *AlterExtensionContentsStmt) GetObject() *Node {
	if x != nil {
		return x.Object
	}
	return nil
}

type CreateEventTrigStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigname   string  `protobuf:"bytes,1,opt,name=trigname,proto3" json:"trigname,omitempty"`
	Eventname  string  `protobuf:"bytes,2,opt,name=eventname,proto3" json:"eventname,omitempty"`
	Whenclause []*Node `protobuf:"bytes,3,rep,name=whenclause,proto3" json:"whenclause,omitempty"`
	Funcname   []*Node `protobuf:"bytes,4,rep,name=funcname,proto3" json:"funcname,omitempty"`
}

func (x *CreateEventTrigStmt) Reset() {
	*x = CreateEventTrigStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEventTrigStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEventTrigStmt) ProtoMessage() {}

func (x *CreateEventTrigStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEventTrigStmt.ProtoReflect.Descriptor instead.
func (*CreateEventTrigStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{164}
}

func (x *CreateEventTrigStmt) GetTrigname() string {
	if x != nil {
		return x.Trigname
	}
	return ""
}

func (x *CreateEventTrigStmt) GetEventname() string {
	if x != nil {
		return x.Eventname
	}
	return ""
}

func (x *CreateEventTrigStmt) GetWhenclause() []*Node {
	if x != nil {
		return x.Whenclause
	}
	return nil
}

func (x *CreateEventTrigStmt) GetFuncname() []*Node {
	if x != nil {
		return x.Funcname
	}
	return nil
}

type AlterEventTrigStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Trigname  string `protobuf:"bytes,1,opt,name=trigname,proto3" json:"trigname,omitempty"`
	Tgenabled string `protobuf:"bytes,2,opt,name=tgenabled,proto3" json:"tgenabled,omitempty"`
}

func (x *AlterEventTrigStmt) Reset() {
	*x = AlterEventTrigStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterEventTrigStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterEventTrigStmt) ProtoMessage() {}

func (x *AlterEventTrigStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterEventTrigStmt.ProtoReflect.Descriptor instead.
func (*AlterEventTrigStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{165}
}

func (x *AlterEventTrigStmt) GetTrigname() string {
	if x != nil {
		return x.Trigname
	}
	return ""
}

func (x *AlterEventTrigStmt) GetTgenabled() string {
	if x != nil {
		return x.Tgenabled
	}
	return ""
}

type RefreshMatViewStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Concurrent bool      `protobuf:"varint,1,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
	SkipData   bool      `protobuf:"varint,2,opt,name=skip_data,json=skipData,proto3" json:"skip_data,omitempty"`
	Relation   *RangeVar `protobuf:"bytes,3,opt,name=relation,proto3" json:"relation,omitempty"`
}

func (x *RefreshMatViewStmt) Reset() {
	*x = RefreshMatViewStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshMatViewStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshMatViewStmt) ProtoMessage() {}

func (x *RefreshMatViewStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshMatViewStmt.ProtoReflect.Descriptor instead.
func (*RefreshMatViewStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{166}
}

func (x *RefreshMatViewStmt) GetConcurrent() bool {
	if x != nil {
		return x.Concurrent
	}
	return false
}

func (x *RefreshMatViewStmt) GetSkipData() bool {
	if x != nil {
		return x.SkipData
	}
	return false
}

func (x *RefreshMatViewStmt) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

type ReplicaIdentityStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityType string `protobuf:"bytes,1,opt,name=identity_type,proto3" json:"identity_type,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ReplicaIdentityStmt) Reset() {
	*x = ReplicaIdentityStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaIdentityStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaIdentityStmt) ProtoMessage() {}

func (x *ReplicaIdentityStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaIdentityStmt.ProtoReflect.Descriptor instead.
func (*ReplicaIdentityStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{167}
}

func (x *ReplicaIdentityStmt) GetIdentityType() string {
	if x != nil {
		return x.IdentityType
	}
	return ""
}

func (x *ReplicaIdentityStmt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AlterSystemStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setstmt *VariableSetStmt `protobuf:"bytes,1,opt,name=setstmt,proto3" json:"setstmt,omitempty"`
}

func (x *AlterSystemStmt) Reset() {
	*x = AlterSystemStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterSystemStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterSystemStmt) ProtoMessage() {}

func (x *AlterSystemStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterSystemStmt.ProtoReflect.Descriptor instead.
func (*AlterSystemStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{168}
}

func (x *AlterSystemStmt) GetSetstmt() *VariableSetStmt {
	if x != nil {
		return x.Setstmt
	}
	return nil
}

type CreatePolicyStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName string    `protobuf:"bytes,1,opt,name=policy_name,proto3" json:"policy_name,omitempty"`
	Table      *RangeVar `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	CmdName    string    `protobuf:"bytes,3,opt,name=cmd_name,proto3" json:"cmd_name,omitempty"`
	Permissive bool      `protobuf:"varint,4,opt,name=permissive,proto3" json:"permissive,omitempty"`
	Roles      []*Node   `protobuf:"bytes,5,rep,name=roles,proto3" json:"roles,omitempty"`
	Qual       *Node     `protobuf:"bytes,6,opt,name=qual,proto3" json:"qual,omitempty"`
	WithCheck  *Node     `protobuf:"bytes,7,opt,name=with_check,proto3" json:"with_check,omitempty"`
}

func (x *CreatePolicyStmt) Reset() {
	*x = CreatePolicyStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyStmt) ProtoMessage() {}

func (x *CreatePolicyStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyStmt.ProtoReflect.Descriptor instead.
func (*CreatePolicyStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{169}
}

func (x *CreatePolicyStmt) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *CreatePolicyStmt) GetTable() *RangeVar {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *CreatePolicyStmt) GetCmdName() string {
	if x != nil {
		return x.CmdName
	}
	return ""
}

func (x *CreatePolicyStmt) GetPermissive() bool {
	if x != nil {
		return x.Permissive
	}
	return false
}

func (x *CreatePolicyStmt) GetRoles() []*Node {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *CreatePolicyStmt) GetQual() *Node {
	if x != nil {
		return x.Qual
	}
	return nil
}

func (x *CreatePolicyStmt) GetWithCheck() *Node {
	if x != nil {
		return x.WithCheck
	}
	return nil
}

type AlterPolicyStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName string    `protobuf:"bytes,1,opt,name=policy_name,proto3" json:"policy_name,omitempty"`
	Table      *RangeVar `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Roles      []*Node   `protobuf:"bytes,3,rep,name=roles,proto3" json:"roles,omitempty"`
	Qual       *Node     `protobuf:"bytes,4,opt,name=qual,proto3" json:"qual,omitempty"`
	WithCheck  *Node     `protobuf:"bytes,5,opt,name=with_check,proto3" json:"with_check,omitempty"`
}

func (x *AlterPolicyStmt) Reset() {
	*x = AlterPolicyStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterPolicyStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterPolicyStmt) ProtoMessage() {}

func (x *AlterPolicyStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterPolicyStmt.ProtoReflect.Descriptor instead.
func (*AlterPolicyStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{170}
}

func (x *AlterPolicyStmt) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *AlterPolicyStmt) GetTable() *RangeVar {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *AlterPolicyStmt) GetRoles() []*Node {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *AlterPolicyStmt) GetQual() *Node {
	if x != nil {
		return x.Qual
	}
	return nil
}

func (x *AlterPolicyStmt) GetWithCheck() *Node {
	if x != nil {
		return x.WithCheck
	}
	return nil
}

type CreateTransformStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Replace  bool            `protobuf:"varint,1,opt,name=replace,proto3" json:"replace,omitempty"`
	TypeName *TypeName       `protobuf:"bytes,2,opt,name=type_name,proto3" json:"type_name,omitempty"`
	Lang     string          `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	Fromsql  *ObjectWithArgs `protobuf:"bytes,4,opt,name=fromsql,proto3" json:"fromsql,omitempty"`
	Tosql    *ObjectWithArgs `protobuf:"bytes,5,opt,name=tosql,proto3" json:"tosql,omitempty"`
}

func (x *CreateTransformStmt) Reset() {
	*x = CreateTransformStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransformStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransformStmt) ProtoMessage() {}

func (x *CreateTransformStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransformStmt.ProtoReflect.Descriptor instead.
func (*CreateTransformStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{171}
}

func (x *CreateTransformStmt) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *CreateTransformStmt) GetTypeName() *TypeName {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *CreateTransformStmt) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *CreateTransformStmt) GetFromsql() *ObjectWithArgs {
	if x != nil {
		return x.Fromsql
	}
	return nil
}

func (x *CreateTransformStmt) GetTosql() *ObjectWithArgs {
	if x != nil {
		return x.Tosql
	}
	return nil
}

type CreateAmStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amname      string  `protobuf:"bytes,1,opt,name=amname,proto3" json:"amname,omitempty"`
	HandlerName []*Node `protobuf:"bytes,2,rep,name=handler_name,proto3" json:"handler_name,omitempty"`
	Amtype      string  `protobuf:"bytes,3,opt,name=amtype,proto3" json:"amtype,omitempty"`
}

func (x *CreateAmStmt) Reset() {
	*x = CreateAmStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAmStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAmStmt) ProtoMessage() {}

func (x *CreateAmStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAmStmt.ProtoReflect.Descriptor instead.
func (*CreateAmStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{172}
}

func (x *CreateAmStmt) GetAmname() string {
	if x != nil {
		return x.Amname
	}
	return ""
}

func (x *CreateAmStmt) GetHandlerName() []*Node {
	if x != nil {
		return x.HandlerName
	}
	return nil
}

func (x *CreateAmStmt) GetAmtype() string {
	if x != nil {
		return x.Amtype
	}
	return ""
}

type CreatePublicationStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubname      string  `protobuf:"bytes,1,opt,name=pubname,proto3" json:"pubname,omitempty"`
	Options      []*Node `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	Pubobjects   []*Node `protobuf:"bytes,3,rep,name=pubobjects,proto3" json:"pubobjects,omitempty"`
	ForAllTables bool    `protobuf:"varint,4,opt,name=for_all_tables,proto3" json:"for_all_tables,omitempty"`
}

func (x *CreatePublicationStmt) Reset() {
	*x = CreatePublicationStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePublicationStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePublicationStmt) ProtoMessage() {}

func (x *CreatePublicationStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePublicationStmt.ProtoReflect.Descriptor instead.
func (*CreatePublicationStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{173}
}

func (x *CreatePublicationStmt) GetPubname() string {
	if x != nil {
		return x.Pubname
	}
	return ""
}

func (x *CreatePublicationStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *CreatePublicationStmt) GetPubobjects() []*Node {
	if x != nil {
		return x.Pubobjects
	}
	return nil
}

func (x *CreatePublicationStmt) GetForAllTables() bool {
	if x != nil {
		return x.ForAllTables
	}
	return false
}

type AlterPublicationStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubname      string                 `protobuf:"bytes,1,opt,name=pubname,proto3" json:"pubname,omitempty"`
	Options      []*Node                `protobuf:"bytes,2,rep,name=options,proto3" json:"options,omitempty"`
	Pubobjects   []*Node                `protobuf:"bytes,3,rep,name=pubobjects,proto3" json:"pubobjects,omitempty"`
	ForAllTables bool                   `protobuf:"varint,4,opt,name=for_all_tables,proto3" json:"for_all_tables,omitempty"`
	Action       AlterPublicationAction `protobuf:"varint,5,opt,name=action,proto3,enum=pg_query.AlterPublicationAction" json:"action,omitempty"`
}

func (x *AlterPublicationStmt) Reset() {
	*x = AlterPublicationStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterPublicationStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterPublicationStmt) ProtoMessage() {}

func (x *AlterPublicationStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterPublicationStmt.ProtoReflect.Descriptor instead.
func (*AlterPublicationStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{174}
}

func (x *AlterPublicationStmt) GetPubname() string {
	if x != nil {
		return x.Pubname
	}
	return ""
}

func (x *AlterPublicationStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *AlterPublicationStmt) GetPubobjects() []*Node {
	if x != nil {
		return x.Pubobjects
	}
	return nil
}

func (x *AlterPublicationStmt) GetForAllTables() bool {
	if x != nil {
		return x.ForAllTables
	}
	return false
}

func (x *AlterPublicationStmt) GetAction() AlterPublicationAction {
	if x != nil {
		return x.Action
	}
	return AlterPublicationAction_ALTER_PUBLICATION_ACTION_UNDEFINED
}

type CreateSubscriptionStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subname     string  `protobuf:"bytes,1,opt,name=subname,proto3" json:"subname,omitempty"`
	Conninfo    string  `protobuf:"bytes,2,opt,name=conninfo,proto3" json:"conninfo,omitempty"`
	Publication []*Node `protobuf:"bytes,3,rep,name=publication,proto3" json:"publication,omitempty"`
	Options     []*Node `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *CreateSubscriptionStmt) Reset() {
	*x = CreateSubscriptionStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubscriptionStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubscriptionStmt) ProtoMessage() {}

func (x *CreateSubscriptionStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubscriptionStmt.ProtoReflect.Descriptor instead.
func (*CreateSubscriptionStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{175}
}

func (x *CreateSubscriptionStmt) GetSubname() string {
	if x != nil {
		return x.Subname
	}
	return ""
}

func (x *CreateSubscriptionStmt) GetConninfo() string {
	if x != nil {
		return x.Conninfo
	}
	return ""
}

func (x *CreateSubscriptionStmt) GetPublication() []*Node {
	if x != nil {
		return x.Publication
	}
	return nil
}

func (x *CreateSubscriptionStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type AlterSubscriptionStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind        AlterSubscriptionType `protobuf:"varint,1,opt,name=kind,proto3,enum=pg_query.AlterSubscriptionType" json:"kind,omitempty"`
	Subname     string                `protobuf:"bytes,2,opt,name=subname,proto3" json:"subname,omitempty"`
	Conninfo    string                `protobuf:"bytes,3,opt,name=conninfo,proto3" json:"conninfo,omitempty"`
	Publication []*Node               `protobuf:"bytes,4,rep,name=publication,proto3" json:"publication,omitempty"`
	Options     []*Node               `protobuf:"bytes,5,rep,name=options,proto3" json:"options,omitempty"`
}

func (x *AlterSubscriptionStmt) Reset() {
	*x = AlterSubscriptionStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterSubscriptionStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterSubscriptionStmt) ProtoMessage() {}

func (x *AlterSubscriptionStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterSubscriptionStmt.ProtoReflect.Descriptor instead.
func (*AlterSubscriptionStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{176}
}

func (x *AlterSubscriptionStmt) GetKind() AlterSubscriptionType {
	if x != nil {
		return x.Kind
	}
	return AlterSubscriptionType_ALTER_SUBSCRIPTION_TYPE_UNDEFINED
}

func (x *AlterSubscriptionStmt) GetSubname() string {
	if x != nil {
		return x.Subname
	}
	return ""
}

func (x *AlterSubscriptionStmt) GetConninfo() string {
	if x != nil {
		return x.Conninfo
	}
	return ""
}

func (x *AlterSubscriptionStmt) GetPublication() []*Node {
	if x != nil {
		return x.Publication
	}
	return nil
}

func (x *AlterSubscriptionStmt) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

type DropSubscriptionStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subname   string       `protobuf:"bytes,1,opt,name=subname,proto3" json:"subname,omitempty"`
	MissingOk bool         `protobuf:"varint,2,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
	Behavior  DropBehavior `protobuf:"varint,3,opt,name=behavior,proto3,enum=pg_query.DropBehavior" json:"behavior,omitempty"`
}

func (x *DropSubscriptionStmt) Reset() {
	*x = DropSubscriptionStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropSubscriptionStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropSubscriptionStmt) ProtoMessage() {}

func (x *DropSubscriptionStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropSubscriptionStmt.ProtoReflect.Descriptor instead.
func (*DropSubscriptionStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{177}
}

func (x *DropSubscriptionStmt) GetSubname() string {
	if x != nil {
		return x.Subname
	}
	return ""
}

func (x *DropSubscriptionStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

func (x *DropSubscriptionStmt) GetBehavior() DropBehavior {
	if x != nil {
		return x.Behavior
	}
	return DropBehavior_DROP_BEHAVIOR_UNDEFINED
}

type CreateStatsStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defnames    []*Node `protobuf:"bytes,1,rep,name=defnames,proto3" json:"defnames,omitempty"`
	StatTypes   []*Node `protobuf:"bytes,2,rep,name=stat_types,proto3" json:"stat_types,omitempty"`
	Exprs       []*Node `protobuf:"bytes,3,rep,name=exprs,proto3" json:"exprs,omitempty"`
	Relations   []*Node `protobuf:"bytes,4,rep,name=relations,proto3" json:"relations,omitempty"`
	Stxcomment  string  `protobuf:"bytes,5,opt,name=stxcomment,proto3" json:"stxcomment,omitempty"`
	Transformed bool    `protobuf:"varint,6,opt,name=transformed,proto3" json:"transformed,omitempty"`
	IfNotExists bool    `protobuf:"varint,7,opt,name=if_not_exists,proto3" json:"if_not_exists,omitempty"`
}

func (x *CreateStatsStmt) Reset() {
	*x = CreateStatsStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStatsStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStatsStmt) ProtoMessage() {}

func (x *CreateStatsStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStatsStmt.ProtoReflect.Descriptor instead.
func (*CreateStatsStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{178}
}

func (x *CreateStatsStmt) GetDefnames() []*Node {
	if x != nil {
		return x.Defnames
	}
	return nil
}

func (x *CreateStatsStmt) GetStatTypes() []*Node {
	if x != nil {
		return x.StatTypes
	}
	return nil
}

func (x *CreateStatsStmt) GetExprs() []*Node {
	if x != nil {
		return x.Exprs
	}
	return nil
}

func (x *CreateStatsStmt) GetRelations() []*Node {
	if x != nil {
		return x.Relations
	}
	return nil
}

func (x *CreateStatsStmt) GetStxcomment() string {
	if x != nil {
		return x.Stxcomment
	}
	return ""
}

func (x *CreateStatsStmt) GetTransformed() bool {
	if x != nil {
		return x.Transformed
	}
	return false
}

func (x *CreateStatsStmt) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

type AlterCollationStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collname []*Node `protobuf:"bytes,1,rep,name=collname,proto3" json:"collname,omitempty"`
}

func (x *AlterCollationStmt) Reset() {
	*x = AlterCollationStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterCollationStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterCollationStmt) ProtoMessage() {}

func (x *AlterCollationStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterCollationStmt.ProtoReflect.Descriptor instead.
func (*AlterCollationStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{179}
}

func (x *AlterCollationStmt) GetCollname() []*Node {
	if x != nil {
		return x.Collname
	}
	return nil
}

type CallStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Funccall *FuncCall `protobuf:"bytes,1,opt,name=funccall,proto3" json:"funccall,omitempty"`
	Funcexpr *FuncExpr `protobuf:"bytes,2,opt,name=funcexpr,proto3" json:"funcexpr,omitempty"`
	Outargs  []*Node   `protobuf:"bytes,3,rep,name=outargs,proto3" json:"outargs,omitempty"`
}

func (x *CallStmt) Reset() {
	*x = CallStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallStmt) ProtoMessage() {}

func (x *CallStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallStmt.ProtoReflect.Descriptor instead.
func (*CallStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{180}
}

func (x *CallStmt) GetFunccall() *FuncCall {
	if x != nil {
		return x.Funccall
	}
	return nil
}

func (x *CallStmt) GetFuncexpr() *FuncExpr {
	if x != nil {
		return x.Funcexpr
	}
	return nil
}

func (x *CallStmt) GetOutargs() []*Node {
	if x != nil {
		return x.Outargs
	}
	return nil
}

type AlterStatsStmt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defnames      []*Node `protobuf:"bytes,1,rep,name=defnames,proto3" json:"defnames,omitempty"`
	Stxstattarget int32   `protobuf:"varint,2,opt,name=stxstattarget,proto3" json:"stxstattarget,omitempty"`
	MissingOk     bool    `protobuf:"varint,3,opt,name=missing_ok,proto3" json:"missing_ok,omitempty"`
}

func (x *AlterStatsStmt) Reset() {
	*x = AlterStatsStmt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterStatsStmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterStatsStmt) ProtoMessage() {}

func (x *AlterStatsStmt) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterStatsStmt.ProtoReflect.Descriptor instead.
func (*AlterStatsStmt) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{181}
}

func (x *AlterStatsStmt) GetDefnames() []*Node {
	if x != nil {
		return x.Defnames
	}
	return nil
}

func (x *AlterStatsStmt) GetStxstattarget() int32 {
	if x != nil {
		return x.Stxstattarget
	}
	return 0
}

func (x *AlterStatsStmt) GetMissingOk() bool {
	if x != nil {
		return x.MissingOk
	}
	return false
}

type A_Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     A_Expr_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=pg_query.A_Expr_Kind" json:"kind,omitempty"`
	Name     []*Node     `protobuf:"bytes,2,rep,name=name,proto3" json:"name,omitempty"`
	Lexpr    *Node       `protobuf:"bytes,3,opt,name=lexpr,proto3" json:"lexpr,omitempty"`
	Rexpr    *Node       `protobuf:"bytes,4,opt,name=rexpr,proto3" json:"rexpr,omitempty"`
	Location int32       `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *A_Expr) Reset() {
	*x = A_Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A_Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A_Expr) ProtoMessage() {}

func (x *A_Expr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A_Expr.ProtoReflect.Descriptor instead.
func (*A_Expr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{182}
}

func (x *A_Expr) GetKind() A_Expr_Kind {
	if x != nil {
		return x.Kind
	}
	return A_Expr_Kind_A_EXPR_KIND_UNDEFINED
}

func (x *A_Expr) GetName() []*Node {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *A_Expr) GetLexpr() *Node {
	if x != nil {
		return x.Lexpr
	}
	return nil
}

func (x *A_Expr) GetRexpr() *Node {
	if x != nil {
		return x.Rexpr
	}
	return nil
}

func (x *A_Expr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type ColumnRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields   []*Node `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Location int32   `protobuf:"varint,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ColumnRef) Reset() {
	*x = ColumnRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnRef) ProtoMessage() {}

func (x *ColumnRef) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnRef.ProtoReflect.Descriptor instead.
func (*ColumnRef) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{183}
}

func (x *ColumnRef) GetFields() []*Node {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ColumnRef) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type ParamRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number   int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Location int32 `protobuf:"varint,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ParamRef) Reset() {
	*x = ParamRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParamRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParamRef) ProtoMessage() {}

func (x *ParamRef) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParamRef.ProtoReflect.Descriptor instead.
func (*ParamRef) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{184}
}

func (x *ParamRef) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ParamRef) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type FuncCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Funcname       []*Node      `protobuf:"bytes,1,rep,name=funcname,proto3" json:"funcname,omitempty"`
	Args           []*Node      `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	AggOrder       []*Node      `protobuf:"bytes,3,rep,name=agg_order,proto3" json:"agg_order,omitempty"`
	AggFilter      *Node        `protobuf:"bytes,4,opt,name=agg_filter,proto3" json:"agg_filter,omitempty"`
	Over           *WindowDef   `protobuf:"bytes,5,opt,name=over,proto3" json:"over,omitempty"`
	AggWithinGroup bool         `protobuf:"varint,6,opt,name=agg_within_group,proto3" json:"agg_within_group,omitempty"`
	AggStar        bool         `protobuf:"varint,7,opt,name=agg_star,proto3" json:"agg_star,omitempty"`
	AggDistinct    bool         `protobuf:"varint,8,opt,name=agg_distinct,proto3" json:"agg_distinct,omitempty"`
	FuncVariadic   bool         `protobuf:"varint,9,opt,name=func_variadic,proto3" json:"func_variadic,omitempty"`
	Funcformat     CoercionForm `protobuf:"varint,10,opt,name=funcformat,proto3,enum=pg_query.CoercionForm" json:"funcformat,omitempty"`
	Location       int32        `protobuf:"varint,11,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *FuncCall) Reset() {
	*x = FuncCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuncCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuncCall) ProtoMessage() {}

func (x *FuncCall) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuncCall.ProtoReflect.Descriptor instead.
func (*FuncCall) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{185}
}

func (x *FuncCall) GetFuncname() []*Node {
	if x != nil {
		return x.Funcname
	}
	return nil
}

func (x *FuncCall) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *FuncCall) GetAggOrder() []*Node {
	if x != nil {
		return x.AggOrder
	}
	return nil
}

func (x *FuncCall) GetAggFilter() *Node {
	if x != nil {
		return x.AggFilter
	}
	return nil
}

func (x *FuncCall) GetOver() *WindowDef {
	if x != nil {
		return x.Over
	}
	return nil
}

func (x *FuncCall) GetAggWithinGroup() bool {
	if x != nil {
		return x.AggWithinGroup
	}
	return false
}

func (x *FuncCall) GetAggStar() bool {
	if x != nil {
		return x.AggStar
	}
	return false
}

func (x *FuncCall) GetAggDistinct() bool {
	if x != nil {
		return x.AggDistinct
	}
	return false
}

func (x *FuncCall) GetFuncVariadic() bool {
	if x != nil {
		return x.FuncVariadic
	}
	return false
}

func (x *FuncCall) GetFuncformat() CoercionForm {
	if x != nil {
		return x.Funcformat
	}
	return CoercionForm_COERCION_FORM_UNDEFINED
}

func (x *FuncCall) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type A_Star struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *A_Star) Reset() {
	*x = A_Star{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A_Star) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A_Star) ProtoMessage() {}

func (x *A_Star) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A_Star.ProtoReflect.Descriptor instead.
func (*A_Star) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{186}
}

type A_Indices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSlice bool  `protobuf:"varint,1,opt,name=is_slice,proto3" json:"is_slice,omitempty"`
	Lidx    *Node `protobuf:"bytes,2,opt,name=lidx,proto3" json:"lidx,omitempty"`
	Uidx    *Node `protobuf:"bytes,3,opt,name=uidx,proto3" json:"uidx,omitempty"`
}

func (x *A_Indices) Reset() {
	*x = A_Indices{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A_Indices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A_Indices) ProtoMessage() {}

func (x *A_Indices) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A_Indices.ProtoReflect.Descriptor instead.
func (*A_Indices) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{187}
}

func (x *A_Indices) GetIsSlice() bool {
	if x != nil {
		return x.IsSlice
	}
	return false
}

func (x *A_Indices) GetLidx() *Node {
	if x != nil {
		return x.Lidx
	}
	return nil
}

func (x *A_Indices) GetUidx() *Node {
	if x != nil {
		return x.Uidx
	}
	return nil
}

type A_Indirection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arg         *Node   `protobuf:"bytes,1,opt,name=arg,proto3" json:"arg,omitempty"`
	Indirection []*Node `protobuf:"bytes,2,rep,name=indirection,proto3" json:"indirection,omitempty"`
}

func (x *A_Indirection) Reset() {
	*x = A_Indirection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A_Indirection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A_Indirection) ProtoMessage() {}

func (x *A_Indirection) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A_Indirection.ProtoReflect.Descriptor instead.
func (*A_Indirection) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{188}
}

func (x *A_Indirection) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *A_Indirection) GetIndirection() []*Node {
	if x != nil {
		return x.Indirection
	}
	return nil
}

type A_ArrayExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*Node `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
	Location int32   `protobuf:"varint,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *A_ArrayExpr) Reset() {
	*x = A_ArrayExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *A_ArrayExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*A_ArrayExpr) ProtoMessage() {}

func (x *A_ArrayExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use A_ArrayExpr.ProtoReflect.Descriptor instead.
func (*A_ArrayExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{189}
}

func (x *A_ArrayExpr) GetElements() []*Node {
	if x != nil {
		return x.Elements
	}
	return nil
}

func (x *A_ArrayExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type ResTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Indirection []*Node `protobuf:"bytes,2,rep,name=indirection,proto3" json:"indirection,omitempty"`
	Val         *Node   `protobuf:"bytes,3,opt,name=val,proto3" json:"val,omitempty"`
	Location    int32   `protobuf:"varint,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ResTarget) Reset() {
	*x = ResTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResTarget) ProtoMessage() {}

func (x *ResTarget) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResTarget.ProtoReflect.Descriptor instead.
func (*ResTarget) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{190}
}

func (x *ResTarget) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResTarget) GetIndirection() []*Node {
	if x != nil {
		return x.Indirection
	}
	return nil
}

func (x *ResTarget) GetVal() *Node {
	if x != nil {
		return x.Val
	}
	return nil
}

func (x *ResTarget) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type MultiAssignRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source   *Node `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Colno    int32 `protobuf:"varint,2,opt,name=colno,proto3" json:"colno,omitempty"`
	Ncolumns int32 `protobuf:"varint,3,opt,name=ncolumns,proto3" json:"ncolumns,omitempty"`
}

func (x *MultiAssignRef) Reset() {
	*x = MultiAssignRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiAssignRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiAssignRef) ProtoMessage() {}

func (x *MultiAssignRef) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiAssignRef.ProtoReflect.Descriptor instead.
func (*MultiAssignRef) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{191}
}

func (x *MultiAssignRef) GetSource() *Node {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *MultiAssignRef) GetColno() int32 {
	if x != nil {
		return x.Colno
	}
	return 0
}

func (x *MultiAssignRef) GetNcolumns() int32 {
	if x != nil {
		return x.Ncolumns
	}
	return 0
}

type TypeCast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arg      *Node     `protobuf:"bytes,1,opt,name=arg,proto3" json:"arg,omitempty"`
	TypeName *TypeName `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Location int32     `protobuf:"varint,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *TypeCast) Reset() {
	*x = TypeCast{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeCast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeCast) ProtoMessage() {}

func (x *TypeCast) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeCast.ProtoReflect.Descriptor instead.
func (*TypeCast) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{192}
}

func (x *TypeCast) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *TypeCast) GetTypeName() *TypeName {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *TypeCast) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type CollateClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arg      *Node   `protobuf:"bytes,1,opt,name=arg,proto3" json:"arg,omitempty"`
	Collname []*Node `protobuf:"bytes,2,rep,name=collname,proto3" json:"collname,omitempty"`
	Location int32   `protobuf:"varint,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CollateClause) Reset() {
	*x = CollateClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollateClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollateClause) ProtoMessage() {}

func (x *CollateClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollateClause.ProtoReflect.Descriptor instead.
func (*CollateClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{193}
}

func (x *CollateClause) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *CollateClause) GetCollname() []*Node {
	if x != nil {
		return x.Collname
	}
	return nil
}

func (x *CollateClause) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type SortBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node        *Node       `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	SortbyDir   SortByDir   `protobuf:"varint,2,opt,name=sortby_dir,proto3,enum=pg_query.SortByDir" json:"sortby_dir,omitempty"`
	SortbyNulls SortByNulls `protobuf:"varint,3,opt,name=sortby_nulls,proto3,enum=pg_query.SortByNulls" json:"sortby_nulls,omitempty"`
	UseOp       []*Node     `protobuf:"bytes,4,rep,name=use_op,json=useOp,proto3" json:"use_op,omitempty"`
	Location    int32       `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *SortBy) Reset() {
	*x = SortBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortBy) ProtoMessage() {}

func (x *SortBy) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortBy.ProtoReflect.Descriptor instead.
func (*SortBy) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{194}
}

func (x *SortBy) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *SortBy) GetSortbyDir() SortByDir {
	if x != nil {
		return x.SortbyDir
	}
	return SortByDir_SORT_BY_DIR_UNDEFINED
}

func (x *SortBy) GetSortbyNulls() SortByNulls {
	if x != nil {
		return x.SortbyNulls
	}
	return SortByNulls_SORT_BY_NULLS_UNDEFINED
}

func (x *SortBy) GetUseOp() []*Node {
	if x != nil {
		return x.UseOp
	}
	return nil
}

func (x *SortBy) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type WindowDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Refname         string  `protobuf:"bytes,2,opt,name=refname,proto3" json:"refname,omitempty"`
	PartitionClause []*Node `protobuf:"bytes,3,rep,name=partition_clause,json=partitionClause,proto3" json:"partition_clause,omitempty"`
	OrderClause     []*Node `protobuf:"bytes,4,rep,name=order_clause,json=orderClause,proto3" json:"order_clause,omitempty"`
	FrameOptions    int32   `protobuf:"varint,5,opt,name=frame_options,json=frameOptions,proto3" json:"frame_options,omitempty"`
	StartOffset     *Node   `protobuf:"bytes,6,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset       *Node   `protobuf:"bytes,7,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	Location        int32   `protobuf:"varint,8,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *WindowDef) Reset() {
	*x = WindowDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowDef) ProtoMessage() {}

func (x *WindowDef) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowDef.ProtoReflect.Descriptor instead.
func (*WindowDef) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{195}
}

func (x *WindowDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WindowDef) GetRefname() string {
	if x != nil {
		return x.Refname
	}
	return ""
}

func (x *WindowDef) GetPartitionClause() []*Node {
	if x != nil {
		return x.PartitionClause
	}
	return nil
}

func (x *WindowDef) GetOrderClause() []*Node {
	if x != nil {
		return x.OrderClause
	}
	return nil
}

func (x *WindowDef) GetFrameOptions() int32 {
	if x != nil {
		return x.FrameOptions
	}
	return 0
}

func (x *WindowDef) GetStartOffset() *Node {
	if x != nil {
		return x.StartOffset
	}
	return nil
}

func (x *WindowDef) GetEndOffset() *Node {
	if x != nil {
		return x.EndOffset
	}
	return nil
}

func (x *WindowDef) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type RangeSubselect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lateral  bool   `protobuf:"varint,1,opt,name=lateral,proto3" json:"lateral,omitempty"`
	Subquery *Node  `protobuf:"bytes,2,opt,name=subquery,proto3" json:"subquery,omitempty"`
	Alias    *Alias `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
}

func (x *RangeSubselect) Reset() {
	*x = RangeSubselect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeSubselect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeSubselect) ProtoMessage() {}

func (x *RangeSubselect) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeSubselect.ProtoReflect.Descriptor instead.
func (*RangeSubselect) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{196}
}

func (x *RangeSubselect) GetLateral() bool {
	if x != nil {
		return x.Lateral
	}
	return false
}

func (x *RangeSubselect) GetSubquery() *Node {
	if x != nil {
		return x.Subquery
	}
	return nil
}

func (x *RangeSubselect) GetAlias() *Alias {
	if x != nil {
		return x.Alias
	}
	return nil
}

type RangeFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lateral    bool    `protobuf:"varint,1,opt,name=lateral,proto3" json:"lateral,omitempty"`
	Ordinality bool    `protobuf:"varint,2,opt,name=ordinality,proto3" json:"ordinality,omitempty"`
	IsRowsfrom bool    `protobuf:"varint,3,opt,name=is_rowsfrom,proto3" json:"is_rowsfrom,omitempty"`
	Functions  []*Node `protobuf:"bytes,4,rep,name=functions,proto3" json:"functions,omitempty"`
	Alias      *Alias  `protobuf:"bytes,5,opt,name=alias,proto3" json:"alias,omitempty"`
	Coldeflist []*Node `protobuf:"bytes,6,rep,name=coldeflist,proto3" json:"coldeflist,omitempty"`
}

func (x *RangeFunction) Reset() {
	*x = RangeFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeFunction) ProtoMessage() {}

func (x *RangeFunction) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeFunction.ProtoReflect.Descriptor instead.
func (*RangeFunction) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{197}
}

func (x *RangeFunction) GetLateral() bool {
	if x != nil {
		return x.Lateral
	}
	return false
}

func (x *RangeFunction) GetOrdinality() bool {
	if x != nil {
		return x.Ordinality
	}
	return false
}

func (x *RangeFunction) GetIsRowsfrom() bool {
	if x != nil {
		return x.IsRowsfrom
	}
	return false
}

func (x *RangeFunction) GetFunctions() []*Node {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *RangeFunction) GetAlias() *Alias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *RangeFunction) GetColdeflist() []*Node {
	if x != nil {
		return x.Coldeflist
	}
	return nil
}

type RangeTableSample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation   *Node   `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	Method     []*Node `protobuf:"bytes,2,rep,name=method,proto3" json:"method,omitempty"`
	Args       []*Node `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	Repeatable *Node   `protobuf:"bytes,4,opt,name=repeatable,proto3" json:"repeatable,omitempty"`
	Location   int32   `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *RangeTableSample) Reset() {
	*x = RangeTableSample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeTableSample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeTableSample) ProtoMessage() {}

func (x *RangeTableSample) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeTableSample.ProtoReflect.Descriptor instead.
func (*RangeTableSample) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{198}
}

func (x *RangeTableSample) GetRelation() *Node {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *RangeTableSample) GetMethod() []*Node {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *RangeTableSample) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RangeTableSample) GetRepeatable() *Node {
	if x != nil {
		return x.Repeatable
	}
	return nil
}

func (x *RangeTableSample) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type RangeTableFunc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lateral    bool    `protobuf:"varint,1,opt,name=lateral,proto3" json:"lateral,omitempty"`
	Docexpr    *Node   `protobuf:"bytes,2,opt,name=docexpr,proto3" json:"docexpr,omitempty"`
	Rowexpr    *Node   `protobuf:"bytes,3,opt,name=rowexpr,proto3" json:"rowexpr,omitempty"`
	Namespaces []*Node `protobuf:"bytes,4,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	Columns    []*Node `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
	Alias      *Alias  `protobuf:"bytes,6,opt,name=alias,proto3" json:"alias,omitempty"`
	Location   int32   `protobuf:"varint,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *RangeTableFunc) Reset() {
	*x = RangeTableFunc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeTableFunc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeTableFunc) ProtoMessage() {}

func (x *RangeTableFunc) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeTableFunc.ProtoReflect.Descriptor instead.
func (*RangeTableFunc) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{199}
}

func (x *RangeTableFunc) GetLateral() bool {
	if x != nil {
		return x.Lateral
	}
	return false
}

func (x *RangeTableFunc) GetDocexpr() *Node {
	if x != nil {
		return x.Docexpr
	}
	return nil
}

func (x *RangeTableFunc) GetRowexpr() *Node {
	if x != nil {
		return x.Rowexpr
	}
	return nil
}

func (x *RangeTableFunc) GetNamespaces() []*Node {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *RangeTableFunc) GetColumns() []*Node {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *RangeTableFunc) GetAlias() *Alias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *RangeTableFunc) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type RangeTableFuncCol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Colname       string    `protobuf:"bytes,1,opt,name=colname,proto3" json:"colname,omitempty"`
	TypeName      *TypeName `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	ForOrdinality bool      `protobuf:"varint,3,opt,name=for_ordinality,proto3" json:"for_ordinality,omitempty"`
	IsNotNull     bool      `protobuf:"varint,4,opt,name=is_not_null,proto3" json:"is_not_null,omitempty"`
	Colexpr       *Node     `protobuf:"bytes,5,opt,name=colexpr,proto3" json:"colexpr,omitempty"`
	Coldefexpr    *Node     `protobuf:"bytes,6,opt,name=coldefexpr,proto3" json:"coldefexpr,omitempty"`
	Location      int32     `protobuf:"varint,7,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *RangeTableFuncCol) Reset() {
	*x = RangeTableFuncCol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeTableFuncCol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeTableFuncCol) ProtoMessage() {}

func (x *RangeTableFuncCol) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeTableFuncCol.ProtoReflect.Descriptor instead.
func (*RangeTableFuncCol) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{200}
}

func (x *RangeTableFuncCol) GetColname() string {
	if x != nil {
		return x.Colname
	}
	return ""
}

func (x *RangeTableFuncCol) GetTypeName() *TypeName {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *RangeTableFuncCol) GetForOrdinality() bool {
	if x != nil {
		return x.ForOrdinality
	}
	return false
}

func (x *RangeTableFuncCol) GetIsNotNull() bool {
	if x != nil {
		return x.IsNotNull
	}
	return false
}

func (x *RangeTableFuncCol) GetColexpr() *Node {
	if x != nil {
		return x.Colexpr
	}
	return nil
}

func (x *RangeTableFuncCol) GetColdefexpr() *Node {
	if x != nil {
		return x.Coldefexpr
	}
	return nil
}

func (x *RangeTableFuncCol) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type TypeName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names       []*Node `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	TypeOid     uint32  `protobuf:"varint,2,opt,name=type_oid,json=typeOid,proto3" json:"type_oid,omitempty"`
	Setof       bool    `protobuf:"varint,3,opt,name=setof,proto3" json:"setof,omitempty"`
	PctType     bool    `protobuf:"varint,4,opt,name=pct_type,proto3" json:"pct_type,omitempty"`
	Typmods     []*Node `protobuf:"bytes,5,rep,name=typmods,proto3" json:"typmods,omitempty"`
	Typemod     int32   `protobuf:"varint,6,opt,name=typemod,proto3" json:"typemod,omitempty"`
	ArrayBounds []*Node `protobuf:"bytes,7,rep,name=array_bounds,json=arrayBounds,proto3" json:"array_bounds,omitempty"`
	Location    int32   `protobuf:"varint,8,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *TypeName) Reset() {
	*x = TypeName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeName) ProtoMessage() {}

func (x *TypeName) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeName.ProtoReflect.Descriptor instead.
func (*TypeName) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{201}
}

func (x *TypeName) GetNames() []*Node {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *TypeName) GetTypeOid() uint32 {
	if x != nil {
		return x.TypeOid
	}
	return 0
}

func (x *TypeName) GetSetof() bool {
	if x != nil {
		return x.Setof
	}
	return false
}

func (x *TypeName) GetPctType() bool {
	if x != nil {
		return x.PctType
	}
	return false
}

func (x *TypeName) GetTypmods() []*Node {
	if x != nil {
		return x.Typmods
	}
	return nil
}

func (x *TypeName) GetTypemod() int32 {
	if x != nil {
		return x.Typemod
	}
	return 0
}

func (x *TypeName) GetArrayBounds() []*Node {
	if x != nil {
		return x.ArrayBounds
	}
	return nil
}

func (x *TypeName) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type ColumnDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Colname          string         `protobuf:"bytes,1,opt,name=colname,proto3" json:"colname,omitempty"`
	TypeName         *TypeName      `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Compression      string         `protobuf:"bytes,3,opt,name=compression,proto3" json:"compression,omitempty"`
	Inhcount         int32          `protobuf:"varint,4,opt,name=inhcount,proto3" json:"inhcount,omitempty"`
	IsLocal          bool           `protobuf:"varint,5,opt,name=is_local,proto3" json:"is_local,omitempty"`
	IsNotNull        bool           `protobuf:"varint,6,opt,name=is_not_null,proto3" json:"is_not_null,omitempty"`
	IsFromType       bool           `protobuf:"varint,7,opt,name=is_from_type,proto3" json:"is_from_type,omitempty"`
	Storage          string         `protobuf:"bytes,8,opt,name=storage,proto3" json:"storage,omitempty"`
	RawDefault       *Node          `protobuf:"bytes,9,opt,name=raw_default,proto3" json:"raw_default,omitempty"`
	CookedDefault    *Node          `protobuf:"bytes,10,opt,name=cooked_default,proto3" json:"cooked_default,omitempty"`
	Identity         string         `protobuf:"bytes,11,opt,name=identity,proto3" json:"identity,omitempty"`
	IdentitySequence *RangeVar      `protobuf:"bytes,12,opt,name=identity_sequence,json=identitySequence,proto3" json:"identity_sequence,omitempty"`
	Generated        string         `protobuf:"bytes,13,opt,name=generated,proto3" json:"generated,omitempty"`
	CollClause       *CollateClause `protobuf:"bytes,14,opt,name=coll_clause,json=collClause,proto3" json:"coll_clause,omitempty"`
	CollOid          uint32         `protobuf:"varint,15,opt,name=coll_oid,json=collOid,proto3" json:"coll_oid,omitempty"`
	Constraints      []*Node        `protobuf:"bytes,16,rep,name=constraints,proto3" json:"constraints,omitempty"`
	Fdwoptions       []*Node        `protobuf:"bytes,17,rep,name=fdwoptions,proto3" json:"fdwoptions,omitempty"`
	Location         int32          `protobuf:"varint,18,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *ColumnDef) Reset() {
	*x = ColumnDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnDef) ProtoMessage() {}

func (x *ColumnDef) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnDef.ProtoReflect.Descriptor instead.
func (*ColumnDef) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{202}
}

func (x *ColumnDef) GetColname() string {
	if x != nil {
		return x.Colname
	}
	return ""
}

func (x *ColumnDef) GetTypeName() *TypeName {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *ColumnDef) GetCompression() string {
	if x != nil {
		return x.Compression
	}
	return ""
}

func (x *ColumnDef) GetInhcount() int32 {
	if x != nil {
		return x.Inhcount
	}
	return 0
}

func (x *ColumnDef) GetIsLocal() bool {
	if x != nil {
		return x.IsLocal
	}
	return false
}

func (x *ColumnDef) GetIsNotNull() bool {
	if x != nil {
		return x.IsNotNull
	}
	return false
}

func (x *ColumnDef) GetIsFromType() bool {
	if x != nil {
		return x.IsFromType
	}
	return false
}

func (x *ColumnDef) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *ColumnDef) GetRawDefault() *Node {
	if x != nil {
		return x.RawDefault
	}
	return nil
}

func (x *ColumnDef) GetCookedDefault() *Node {
	if x != nil {
		return x.CookedDefault
	}
	return nil
}

func (x *ColumnDef) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *ColumnDef) GetIdentitySequence() *RangeVar {
	if x != nil {
		return x.IdentitySequence
	}
	return nil
}

func (x *ColumnDef) GetGenerated() string {
	if x != nil {
		return x.Generated
	}
	return ""
}

func (x *ColumnDef) GetCollClause() *CollateClause {
	if x != nil {
		return x.CollClause
	}
	return nil
}

func (x *ColumnDef) GetCollOid() uint32 {
	if x != nil {
		return x.CollOid
	}
	return 0
}

func (x *ColumnDef) GetConstraints() []*Node {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *ColumnDef) GetFdwoptions() []*Node {
	if x != nil {
		return x.Fdwoptions
	}
	return nil
}

func (x *ColumnDef) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type IndexElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expr          *Node       `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	Indexcolname  string      `protobuf:"bytes,3,opt,name=indexcolname,proto3" json:"indexcolname,omitempty"`
	Collation     []*Node     `protobuf:"bytes,4,rep,name=collation,proto3" json:"collation,omitempty"`
	Opclass       []*Node     `protobuf:"bytes,5,rep,name=opclass,proto3" json:"opclass,omitempty"`
	Opclassopts   []*Node     `protobuf:"bytes,6,rep,name=opclassopts,proto3" json:"opclassopts,omitempty"`
	Ordering      SortByDir   `protobuf:"varint,7,opt,name=ordering,proto3,enum=pg_query.SortByDir" json:"ordering,omitempty"`
	NullsOrdering SortByNulls `protobuf:"varint,8,opt,name=nulls_ordering,proto3,enum=pg_query.SortByNulls" json:"nulls_ordering,omitempty"`
}

func (x *IndexElem) Reset() {
	*x = IndexElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexElem) ProtoMessage() {}

func (x *IndexElem) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexElem.ProtoReflect.Descriptor instead.
func (*IndexElem) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{203}
}

func (x *IndexElem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IndexElem) GetExpr() *Node {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *IndexElem) GetIndexcolname() string {
	if x != nil {
		return x.Indexcolname
	}
	return ""
}

func (x *IndexElem) GetCollation() []*Node {
	if x != nil {
		return x.Collation
	}
	return nil
}

func (x *IndexElem) GetOpclass() []*Node {
	if x != nil {
		return x.Opclass
	}
	return nil
}

func (x *IndexElem) GetOpclassopts() []*Node {
	if x != nil {
		return x.Opclassopts
	}
	return nil
}

func (x *IndexElem) GetOrdering() SortByDir {
	if x != nil {
		return x.Ordering
	}
	return SortByDir_SORT_BY_DIR_UNDEFINED
}

func (x *IndexElem) GetNullsOrdering() SortByNulls {
	if x != nil {
		return x.NullsOrdering
	}
	return SortByNulls_SORT_BY_NULLS_UNDEFINED
}

type StatsElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expr *Node  `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *StatsElem) Reset() {
	*x = StatsElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsElem) ProtoMessage() {}

func (x *StatsElem) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsElem.ProtoReflect.Descriptor instead.
func (*StatsElem) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{204}
}

func (x *StatsElem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StatsElem) GetExpr() *Node {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contype            ConstrType `protobuf:"varint,1,opt,name=contype,proto3,enum=pg_query.ConstrType" json:"contype,omitempty"`
	Conname            string     `protobuf:"bytes,2,opt,name=conname,proto3" json:"conname,omitempty"`
	Deferrable         bool       `protobuf:"varint,3,opt,name=deferrable,proto3" json:"deferrable,omitempty"`
	Initdeferred       bool       `protobuf:"varint,4,opt,name=initdeferred,proto3" json:"initdeferred,omitempty"`
	Location           int32      `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
	IsNoInherit        bool       `protobuf:"varint,6,opt,name=is_no_inherit,proto3" json:"is_no_inherit,omitempty"`
	RawExpr            *Node      `protobuf:"bytes,7,opt,name=raw_expr,proto3" json:"raw_expr,omitempty"`
	CookedExpr         string     `protobuf:"bytes,8,opt,name=cooked_expr,proto3" json:"cooked_expr,omitempty"`
	GeneratedWhen      string     `protobuf:"bytes,9,opt,name=generated_when,proto3" json:"generated_when,omitempty"`
	NullsNotDistinct   bool       `protobuf:"varint,10,opt,name=nulls_not_distinct,proto3" json:"nulls_not_distinct,omitempty"`
	Keys               []*Node    `protobuf:"bytes,11,rep,name=keys,proto3" json:"keys,omitempty"`
	Including          []*Node    `protobuf:"bytes,12,rep,name=including,proto3" json:"including,omitempty"`
	Exclusions         []*Node    `protobuf:"bytes,13,rep,name=exclusions,proto3" json:"exclusions,omitempty"`
	Options            []*Node    `protobuf:"bytes,14,rep,name=options,proto3" json:"options,omitempty"`
	Indexname          string     `protobuf:"bytes,15,opt,name=indexname,proto3" json:"indexname,omitempty"`
	Indexspace         string     `protobuf:"bytes,16,opt,name=indexspace,proto3" json:"indexspace,omitempty"`
	ResetDefaultTblspc bool       `protobuf:"varint,17,opt,name=reset_default_tblspc,proto3" json:"reset_default_tblspc,omitempty"`
	AccessMethod       string     `protobuf:"bytes,18,opt,name=access_method,proto3" json:"access_method,omitempty"`
	WhereClause        *Node      `protobuf:"bytes,19,opt,name=where_clause,proto3" json:"where_clause,omitempty"`
	Pktable            *RangeVar  `protobuf:"bytes,20,opt,name=pktable,proto3" json:"pktable,omitempty"`
	FkAttrs            []*Node    `protobuf:"bytes,21,rep,name=fk_attrs,proto3" json:"fk_attrs,omitempty"`
	PkAttrs            []*Node    `protobuf:"bytes,22,rep,name=pk_attrs,proto3" json:"pk_attrs,omitempty"`
	FkMatchtype        string     `protobuf:"bytes,23,opt,name=fk_matchtype,proto3" json:"fk_matchtype,omitempty"`
	FkUpdAction        string     `protobuf:"bytes,24,opt,name=fk_upd_action,proto3" json:"fk_upd_action,omitempty"`
	FkDelAction        string     `protobuf:"bytes,25,opt,name=fk_del_action,proto3" json:"fk_del_action,omitempty"`
	FkDelSetCols       []*Node    `protobuf:"bytes,26,rep,name=fk_del_set_cols,proto3" json:"fk_del_set_cols,omitempty"`
	OldConpfeqop       []*Node    `protobuf:"bytes,27,rep,name=old_conpfeqop,proto3" json:"old_conpfeqop,omitempty"`
	OldPktableOid      uint32     `protobuf:"varint,28,opt,name=old_pktable_oid,proto3" json:"old_pktable_oid,omitempty"`
	SkipValidation     bool       `protobuf:"varint,29,opt,name=skip_validation,proto3" json:"skip_validation,omitempty"`
	InitiallyValid     bool       `protobuf:"varint,30,opt,name=initially_valid,proto3" json:"initially_valid,omitempty"`
}

func (x *Constraint) Reset() {
	*x = Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraint) ProtoMessage() {}

func (x *Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraint.ProtoReflect.Descriptor instead.
func (*Constraint) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{205}
}

func (x *Constraint) GetContype() ConstrType {
	if x != nil {
		return x.Contype
	}
	return ConstrType_CONSTR_TYPE_UNDEFINED
}

func (x *Constraint) GetConname() string {
	if x != nil {
		return x.Conname
	}
	return ""
}

func (x *Constraint) GetDeferrable() bool {
	if x != nil {
		return x.Deferrable
	}
	return false
}

func (x *Constraint) GetInitdeferred() bool {
	if x != nil {
		return x.Initdeferred
	}
	return false
}

func (x *Constraint) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

func (x *Constraint) GetIsNoInherit() bool {
	if x != nil {
		return x.IsNoInherit
	}
	return false
}

func (x *Constraint) GetRawExpr() *Node {
	if x != nil {
		return x.RawExpr
	}
	return nil
}

func (x *Constraint) GetCookedExpr() string {
	if x != nil {
		return x.CookedExpr
	}
	return ""
}

func (x *Constraint) GetGeneratedWhen() string {
	if x != nil {
		return x.GeneratedWhen
	}
	return ""
}

func (x *Constraint) GetNullsNotDistinct() bool {
	if x != nil {
		return x.NullsNotDistinct
	}
	return false
}

func (x *Constraint) GetKeys() []*Node {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *Constraint) GetIncluding() []*Node {
	if x != nil {
		return x.Including
	}
	return nil
}

func (x *Constraint) GetExclusions() []*Node {
	if x != nil {
		return x.Exclusions
	}
	return nil
}

func (x *Constraint) GetOptions() []*Node {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Constraint) GetIndexname() string {
	if x != nil {
		return x.Indexname
	}
	return ""
}

func (x *Constraint) GetIndexspace() string {
	if x != nil {
		return x.Indexspace
	}
	return ""
}

func (x *Constraint) GetResetDefaultTblspc() bool {
	if x != nil {
		return x.ResetDefaultTblspc
	}
	return false
}

func (x *Constraint) GetAccessMethod() string {
	if x != nil {
		return x.AccessMethod
	}
	return ""
}

func (x *Constraint) GetWhereClause() *Node {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

func (x *Constraint) GetPktable() *RangeVar {
	if x != nil {
		return x.Pktable
	}
	return nil
}

func (x *Constraint) GetFkAttrs() []*Node {
	if x != nil {
		return x.FkAttrs
	}
	return nil
}

func (x *Constraint) GetPkAttrs() []*Node {
	if x != nil {
		return x.PkAttrs
	}
	return nil
}

func (x *Constraint) GetFkMatchtype() string {
	if x != nil {
		return x.FkMatchtype
	}
	return ""
}

func (x *Constraint) GetFkUpdAction() string {
	if x != nil {
		return x.FkUpdAction
	}
	return ""
}

func (x *Constraint) GetFkDelAction() string {
	if x != nil {
		return x.FkDelAction
	}
	return ""
}

func (x *Constraint) GetFkDelSetCols() []*Node {
	if x != nil {
		return x.FkDelSetCols
	}
	return nil
}

func (x *Constraint) GetOldConpfeqop() []*Node {
	if x != nil {
		return x.OldConpfeqop
	}
	return nil
}

func (x *Constraint) GetOldPktableOid() uint32 {
	if x != nil {
		return x.OldPktableOid
	}
	return 0
}

func (x *Constraint) GetSkipValidation() bool {
	if x != nil {
		return x.SkipValidation
	}
	return false
}

func (x *Constraint) GetInitiallyValid() bool {
	if x != nil {
		return x.InitiallyValid
	}
	return false
}

type DefElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Defnamespace string        `protobuf:"bytes,1,opt,name=defnamespace,proto3" json:"defnamespace,omitempty"`
	Defname      string        `protobuf:"bytes,2,opt,name=defname,proto3" json:"defname,omitempty"`
	Arg          *Node         `protobuf:"bytes,3,opt,name=arg,proto3" json:"arg,omitempty"`
	Defaction    DefElemAction `protobuf:"varint,4,opt,name=defaction,proto3,enum=pg_query.DefElemAction" json:"defaction,omitempty"`
	Location     int32         `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *DefElem) Reset() {
	*x = DefElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefElem) ProtoMessage() {}

func (x *DefElem) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefElem.ProtoReflect.Descriptor instead.
func (*DefElem) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{206}
}

func (x *DefElem) GetDefnamespace() string {
	if x != nil {
		return x.Defnamespace
	}
	return ""
}

func (x *DefElem) GetDefname() string {
	if x != nil {
		return x.Defname
	}
	return ""
}

func (x *DefElem) GetArg() *Node {
	if x != nil {
		return x.Arg
	}
	return nil
}

func (x *DefElem) GetDefaction() DefElemAction {
	if x != nil {
		return x.Defaction
	}
	return DefElemAction_DEF_ELEM_ACTION_UNDEFINED
}

func (x *DefElem) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type RangeTblEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rtekind          RTEKind            `protobuf:"varint,1,opt,name=rtekind,proto3,enum=pg_query.RTEKind" json:"rtekind,omitempty"`
	Relid            uint32             `protobuf:"varint,2,opt,name=relid,proto3" json:"relid,omitempty"`
	Relkind          string             `protobuf:"bytes,3,opt,name=relkind,proto3" json:"relkind,omitempty"`
	Rellockmode      int32              `protobuf:"varint,4,opt,name=rellockmode,proto3" json:"rellockmode,omitempty"`
	Tablesample      *TableSampleClause `protobuf:"bytes,5,opt,name=tablesample,proto3" json:"tablesample,omitempty"`
	Subquery         *Query             `protobuf:"bytes,6,opt,name=subquery,proto3" json:"subquery,omitempty"`
	SecurityBarrier  bool               `protobuf:"varint,7,opt,name=security_barrier,proto3" json:"security_barrier,omitempty"`
	Jointype         JoinType           `protobuf:"varint,8,opt,name=jointype,proto3,enum=pg_query.JoinType" json:"jointype,omitempty"`
	Joinmergedcols   int32              `protobuf:"varint,9,opt,name=joinmergedcols,proto3" json:"joinmergedcols,omitempty"`
	Joinaliasvars    []*Node            `protobuf:"bytes,10,rep,name=joinaliasvars,proto3" json:"joinaliasvars,omitempty"`
	Joinleftcols     []*Node            `protobuf:"bytes,11,rep,name=joinleftcols,proto3" json:"joinleftcols,omitempty"`
	Joinrightcols    []*Node            `protobuf:"bytes,12,rep,name=joinrightcols,proto3" json:"joinrightcols,omitempty"`
	JoinUsingAlias   *Alias             `protobuf:"bytes,13,opt,name=join_using_alias,proto3" json:"join_using_alias,omitempty"`
	Functions        []*Node            `protobuf:"bytes,14,rep,name=functions,proto3" json:"functions,omitempty"`
	Funcordinality   bool               `protobuf:"varint,15,opt,name=funcordinality,proto3" json:"funcordinality,omitempty"`
	Tablefunc        *TableFunc         `protobuf:"bytes,16,opt,name=tablefunc,proto3" json:"tablefunc,omitempty"`
	ValuesLists      []*Node            `protobuf:"bytes,17,rep,name=values_lists,proto3" json:"values_lists,omitempty"`
	Ctename          string             `protobuf:"bytes,18,opt,name=ctename,proto3" json:"ctename,omitempty"`
	Ctelevelsup      uint32             `protobuf:"varint,19,opt,name=ctelevelsup,proto3" json:"ctelevelsup,omitempty"`
	SelfReference    bool               `protobuf:"varint,20,opt,name=self_reference,proto3" json:"self_reference,omitempty"`
	Coltypes         []*Node            `protobuf:"bytes,21,rep,name=coltypes,proto3" json:"coltypes,omitempty"`
	Coltypmods       []*Node            `protobuf:"bytes,22,rep,name=coltypmods,proto3" json:"coltypmods,omitempty"`
	Colcollations    []*Node            `protobuf:"bytes,23,rep,name=colcollations,proto3" json:"colcollations,omitempty"`
	Enrname          string             `protobuf:"bytes,24,opt,name=enrname,proto3" json:"enrname,omitempty"`
	Enrtuples        float64            `protobuf:"fixed64,25,opt,name=enrtuples,proto3" json:"enrtuples,omitempty"`
	Alias            *Alias             `protobuf:"bytes,26,opt,name=alias,proto3" json:"alias,omitempty"`
	Eref             *Alias             `protobuf:"bytes,27,opt,name=eref,proto3" json:"eref,omitempty"`
	Lateral          bool               `protobuf:"varint,28,opt,name=lateral,proto3" json:"lateral,omitempty"`
	Inh              bool               `protobuf:"varint,29,opt,name=inh,proto3" json:"inh,omitempty"`
	InFromCl         bool               `protobuf:"varint,30,opt,name=in_from_cl,json=inFromCl,proto3" json:"in_from_cl,omitempty"`
	RequiredPerms    uint32             `protobuf:"varint,31,opt,name=required_perms,json=requiredPerms,proto3" json:"required_perms,omitempty"`
	CheckAsUser      uint32             `protobuf:"varint,32,opt,name=check_as_user,json=checkAsUser,proto3" json:"check_as_user,omitempty"`
	SelectedCols     []uint64           `protobuf:"varint,33,rep,packed,name=selected_cols,json=selectedCols,proto3" json:"selected_cols,omitempty"`
	InsertedCols     []uint64           `protobuf:"varint,34,rep,packed,name=inserted_cols,json=insertedCols,proto3" json:"inserted_cols,omitempty"`
	UpdatedCols      []uint64           `protobuf:"varint,35,rep,packed,name=updated_cols,json=updatedCols,proto3" json:"updated_cols,omitempty"`
	ExtraUpdatedCols []uint64           `protobuf:"varint,36,rep,packed,name=extra_updated_cols,json=extraUpdatedCols,proto3" json:"extra_updated_cols,omitempty"`
	SecurityQuals    []*Node            `protobuf:"bytes,37,rep,name=security_quals,json=securityQuals,proto3" json:"security_quals,omitempty"`
}

func (x *RangeTblEntry) Reset() {
	*x = RangeTblEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeTblEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeTblEntry) ProtoMessage() {}

func (x *RangeTblEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeTblEntry.ProtoReflect.Descriptor instead.
func (*RangeTblEntry) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{207}
}

func (x *RangeTblEntry) GetRtekind() RTEKind {
	if x != nil {
		return x.Rtekind
	}
	return RTEKind_RTEKIND_UNDEFINED
}

func (x *RangeTblEntry) GetRelid() uint32 {
	if x != nil {
		return x.Relid
	}
	return 0
}

func (x *RangeTblEntry) GetRelkind() string {
	if x != nil {
		return x.Relkind
	}
	return ""
}

func (x *RangeTblEntry) GetRellockmode() int32 {
	if x != nil {
		return x.Rellockmode
	}
	return 0
}

func (x *RangeTblEntry) GetTablesample() *TableSampleClause {
	if x != nil {
		return x.Tablesample
	}
	return nil
}

func (x *RangeTblEntry) GetSubquery() *Query {
	if x != nil {
		return x.Subquery
	}
	return nil
}

func (x *RangeTblEntry) GetSecurityBarrier() bool {
	if x != nil {
		return x.SecurityBarrier
	}
	return false
}

func (x *RangeTblEntry) GetJointype() JoinType {
	if x != nil {
		return x.Jointype
	}
	return JoinType_JOIN_TYPE_UNDEFINED
}

func (x *RangeTblEntry) GetJoinmergedcols() int32 {
	if x != nil {
		return x.Joinmergedcols
	}
	return 0
}

func (x *RangeTblEntry) GetJoinaliasvars() []*Node {
	if x != nil {
		return x.Joinaliasvars
	}
	return nil
}

func (x *RangeTblEntry) GetJoinleftcols() []*Node {
	if x != nil {
		return x.Joinleftcols
	}
	return nil
}

func (x *RangeTblEntry) GetJoinrightcols() []*Node {
	if x != nil {
		return x.Joinrightcols
	}
	return nil
}

func (x *RangeTblEntry) GetJoinUsingAlias() *Alias {
	if x != nil {
		return x.JoinUsingAlias
	}
	return nil
}

func (x *RangeTblEntry) GetFunctions() []*Node {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *RangeTblEntry) GetFuncordinality() bool {
	if x != nil {
		return x.Funcordinality
	}
	return false
}

func (x *RangeTblEntry) GetTablefunc() *TableFunc {
	if x != nil {
		return x.Tablefunc
	}
	return nil
}

func (x *RangeTblEntry) GetValuesLists() []*Node {
	if x != nil {
		return x.ValuesLists
	}
	return nil
}

func (x *RangeTblEntry) GetCtename() string {
	if x != nil {
		return x.Ctename
	}
	return ""
}

func (x *RangeTblEntry) GetCtelevelsup() uint32 {
	if x != nil {
		return x.Ctelevelsup
	}
	return 0
}

func (x *RangeTblEntry) GetSelfReference() bool {
	if x != nil {
		return x.SelfReference
	}
	return false
}

func (x *RangeTblEntry) GetColtypes() []*Node {
	if x != nil {
		return x.Coltypes
	}
	return nil
}

func (x *RangeTblEntry) GetColtypmods() []*Node {
	if x != nil {
		return x.Coltypmods
	}
	return nil
}

func (x *RangeTblEntry) GetColcollations() []*Node {
	if x != nil {
		return x.Colcollations
	}
	return nil
}

func (x *RangeTblEntry) GetEnrname() string {
	if x != nil {
		return x.Enrname
	}
	return ""
}

func (x *RangeTblEntry) GetEnrtuples() float64 {
	if x != nil {
		return x.Enrtuples
	}
	return 0
}

func (x *RangeTblEntry) GetAlias() *Alias {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *RangeTblEntry) GetEref() *Alias {
	if x != nil {
		return x.Eref
	}
	return nil
}

func (x *RangeTblEntry) GetLateral() bool {
	if x != nil {
		return x.Lateral
	}
	return false
}

func (x *RangeTblEntry) GetInh() bool {
	if x != nil {
		return x.Inh
	}
	return false
}

func (x *RangeTblEntry) GetInFromCl() bool {
	if x != nil {
		return x.InFromCl
	}
	return false
}

func (x *RangeTblEntry) GetRequiredPerms() uint32 {
	if x != nil {
		return x.RequiredPerms
	}
	return 0
}

func (x *RangeTblEntry) GetCheckAsUser() uint32 {
	if x != nil {
		return x.CheckAsUser
	}
	return 0
}

func (x *RangeTblEntry) GetSelectedCols() []uint64 {
	if x != nil {
		return x.SelectedCols
	}
	return nil
}

func (x *RangeTblEntry) GetInsertedCols() []uint64 {
	if x != nil {
		return x.InsertedCols
	}
	return nil
}

func (x *RangeTblEntry) GetUpdatedCols() []uint64 {
	if x != nil {
		return x.UpdatedCols
	}
	return nil
}

func (x *RangeTblEntry) GetExtraUpdatedCols() []uint64 {
	if x != nil {
		return x.ExtraUpdatedCols
	}
	return nil
}

func (x *RangeTblEntry) GetSecurityQuals() []*Node {
	if x != nil {
		return x.SecurityQuals
	}
	return nil
}

type RangeTblFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Funcexpr          *Node    `protobuf:"bytes,1,opt,name=funcexpr,proto3" json:"funcexpr,omitempty"`
	Funccolcount      int32    `protobuf:"varint,2,opt,name=funccolcount,proto3" json:"funccolcount,omitempty"`
	Funccolnames      []*Node  `protobuf:"bytes,3,rep,name=funccolnames,proto3" json:"funccolnames,omitempty"`
	Funccoltypes      []*Node  `protobuf:"bytes,4,rep,name=funccoltypes,proto3" json:"funccoltypes,omitempty"`
	Funccoltypmods    []*Node  `protobuf:"bytes,5,rep,name=funccoltypmods,proto3" json:"funccoltypmods,omitempty"`
	Funccolcollations []*Node  `protobuf:"bytes,6,rep,name=funccolcollations,proto3" json:"funccolcollations,omitempty"`
	Funcparams        []uint64 `protobuf:"varint,7,rep,packed,name=funcparams,proto3" json:"funcparams,omitempty"`
}

func (x *RangeTblFunction) Reset() {
	*x = RangeTblFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeTblFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeTblFunction) ProtoMessage() {}

func (x *RangeTblFunction) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeTblFunction.ProtoReflect.Descriptor instead.
func (*RangeTblFunction) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{208}
}

func (x *RangeTblFunction) GetFuncexpr() *Node {
	if x != nil {
		return x.Funcexpr
	}
	return nil
}

func (x *RangeTblFunction) GetFunccolcount() int32 {
	if x != nil {
		return x.Funccolcount
	}
	return 0
}

func (x *RangeTblFunction) GetFunccolnames() []*Node {
	if x != nil {
		return x.Funccolnames
	}
	return nil
}

func (x *RangeTblFunction) GetFunccoltypes() []*Node {
	if x != nil {
		return x.Funccoltypes
	}
	return nil
}

func (x *RangeTblFunction) GetFunccoltypmods() []*Node {
	if x != nil {
		return x.Funccoltypmods
	}
	return nil
}

func (x *RangeTblFunction) GetFunccolcollations() []*Node {
	if x != nil {
		return x.Funccolcollations
	}
	return nil
}

func (x *RangeTblFunction) GetFuncparams() []uint64 {
	if x != nil {
		return x.Funcparams
	}
	return nil
}

type TableSampleClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tsmhandler uint32  `protobuf:"varint,1,opt,name=tsmhandler,proto3" json:"tsmhandler,omitempty"`
	Args       []*Node `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Repeatable *Node   `protobuf:"bytes,3,opt,name=repeatable,proto3" json:"repeatable,omitempty"`
}

func (x *TableSampleClause) Reset() {
	*x = TableSampleClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableSampleClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableSampleClause) ProtoMessage() {}

func (x *TableSampleClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableSampleClause.ProtoReflect.Descriptor instead.
func (*TableSampleClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{209}
}

func (x *TableSampleClause) GetTsmhandler() uint32 {
	if x != nil {
		return x.Tsmhandler
	}
	return 0
}

func (x *TableSampleClause) GetArgs() []*Node {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TableSampleClause) GetRepeatable() *Node {
	if x != nil {
		return x.Repeatable
	}
	return nil
}

type WithCheckOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     WCOKind `protobuf:"varint,1,opt,name=kind,proto3,enum=pg_query.WCOKind" json:"kind,omitempty"`
	Relname  string  `protobuf:"bytes,2,opt,name=relname,proto3" json:"relname,omitempty"`
	Polname  string  `protobuf:"bytes,3,opt,name=polname,proto3" json:"polname,omitempty"`
	Qual     *Node   `protobuf:"bytes,4,opt,name=qual,proto3" json:"qual,omitempty"`
	Cascaded bool    `protobuf:"varint,5,opt,name=cascaded,proto3" json:"cascaded,omitempty"`
}

func (x *WithCheckOption) Reset() {
	*x = WithCheckOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithCheckOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithCheckOption) ProtoMessage() {}

func (x *WithCheckOption) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithCheckOption.ProtoReflect.Descriptor instead.
func (*WithCheckOption) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{210}
}

func (x *WithCheckOption) GetKind() WCOKind {
	if x != nil {
		return x.Kind
	}
	return WCOKind_WCOKIND_UNDEFINED
}

func (x *WithCheckOption) GetRelname() string {
	if x != nil {
		return x.Relname
	}
	return ""
}

func (x *WithCheckOption) GetPolname() string {
	if x != nil {
		return x.Polname
	}
	return ""
}

func (x *WithCheckOption) GetQual() *Node {
	if x != nil {
		return x.Qual
	}
	return nil
}

func (x *WithCheckOption) GetCascaded() bool {
	if x != nil {
		return x.Cascaded
	}
	return false
}

type SortGroupClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TleSortGroupRef uint32 `protobuf:"varint,1,opt,name=tle_sort_group_ref,json=tleSortGroupRef,proto3" json:"tle_sort_group_ref,omitempty"`
	Eqop            uint32 `protobuf:"varint,2,opt,name=eqop,proto3" json:"eqop,omitempty"`
	Sortop          uint32 `protobuf:"varint,3,opt,name=sortop,proto3" json:"sortop,omitempty"`
	NullsFirst      bool   `protobuf:"varint,4,opt,name=nulls_first,proto3" json:"nulls_first,omitempty"`
	Hashable        bool   `protobuf:"varint,5,opt,name=hashable,proto3" json:"hashable,omitempty"`
}

func (x *SortGroupClause) Reset() {
	*x = SortGroupClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortGroupClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortGroupClause) ProtoMessage() {}

func (x *SortGroupClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortGroupClause.ProtoReflect.Descriptor instead.
func (*SortGroupClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{211}
}

func (x *SortGroupClause) GetTleSortGroupRef() uint32 {
	if x != nil {
		return x.TleSortGroupRef
	}
	return 0
}

func (x *SortGroupClause) GetEqop() uint32 {
	if x != nil {
		return x.Eqop
	}
	return 0
}

func (x *SortGroupClause) GetSortop() uint32 {
	if x != nil {
		return x.Sortop
	}
	return 0
}

func (x *SortGroupClause) GetNullsFirst() bool {
	if x != nil {
		return x.NullsFirst
	}
	return false
}

func (x *SortGroupClause) GetHashable() bool {
	if x != nil {
		return x.Hashable
	}
	return false
}

type GroupingSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     GroupingSetKind `protobuf:"varint,1,opt,name=kind,proto3,enum=pg_query.GroupingSetKind" json:"kind,omitempty"`
	Content  []*Node         `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty"`
	Location int32           `protobuf:"varint,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *GroupingSet) Reset() {
	*x = GroupingSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupingSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupingSet) ProtoMessage() {}

func (x *GroupingSet) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupingSet.ProtoReflect.Descriptor instead.
func (*GroupingSet) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{212}
}

func (x *GroupingSet) GetKind() GroupingSetKind {
	if x != nil {
		return x.Kind
	}
	return GroupingSetKind_GROUPING_SET_KIND_UNDEFINED
}

func (x *GroupingSet) GetContent() []*Node {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *GroupingSet) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type WindowClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Refname           string  `protobuf:"bytes,2,opt,name=refname,proto3" json:"refname,omitempty"`
	PartitionClause   []*Node `protobuf:"bytes,3,rep,name=partition_clause,json=partitionClause,proto3" json:"partition_clause,omitempty"`
	OrderClause       []*Node `protobuf:"bytes,4,rep,name=order_clause,json=orderClause,proto3" json:"order_clause,omitempty"`
	FrameOptions      int32   `protobuf:"varint,5,opt,name=frame_options,json=frameOptions,proto3" json:"frame_options,omitempty"`
	StartOffset       *Node   `protobuf:"bytes,6,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset         *Node   `protobuf:"bytes,7,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	RunCondition      []*Node `protobuf:"bytes,8,rep,name=run_condition,json=runCondition,proto3" json:"run_condition,omitempty"`
	StartInRangeFunc  uint32  `protobuf:"varint,9,opt,name=start_in_range_func,json=startInRangeFunc,proto3" json:"start_in_range_func,omitempty"`
	EndInRangeFunc    uint32  `protobuf:"varint,10,opt,name=end_in_range_func,json=endInRangeFunc,proto3" json:"end_in_range_func,omitempty"`
	InRangeColl       uint32  `protobuf:"varint,11,opt,name=in_range_coll,json=inRangeColl,proto3" json:"in_range_coll,omitempty"`
	InRangeAsc        bool    `protobuf:"varint,12,opt,name=in_range_asc,json=inRangeAsc,proto3" json:"in_range_asc,omitempty"`
	InRangeNullsFirst bool    `protobuf:"varint,13,opt,name=in_range_nulls_first,json=inRangeNullsFirst,proto3" json:"in_range_nulls_first,omitempty"`
	Winref            uint32  `protobuf:"varint,14,opt,name=winref,proto3" json:"winref,omitempty"`
	CopiedOrder       bool    `protobuf:"varint,15,opt,name=copied_order,json=copiedOrder,proto3" json:"copied_order,omitempty"`
}

func (x *WindowClause) Reset() {
	*x = WindowClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowClause) ProtoMessage() {}

func (x *WindowClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowClause.ProtoReflect.Descriptor instead.
func (*WindowClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{213}
}

func (x *WindowClause) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WindowClause) GetRefname() string {
	if x != nil {
		return x.Refname
	}
	return ""
}

func (x *WindowClause) GetPartitionClause() []*Node {
	if x != nil {
		return x.PartitionClause
	}
	return nil
}

func (x *WindowClause) GetOrderClause() []*Node {
	if x != nil {
		return x.OrderClause
	}
	return nil
}

func (x *WindowClause) GetFrameOptions() int32 {
	if x != nil {
		return x.FrameOptions
	}
	return 0
}

func (x *WindowClause) GetStartOffset() *Node {
	if x != nil {
		return x.StartOffset
	}
	return nil
}

func (x *WindowClause) GetEndOffset() *Node {
	if x != nil {
		return x.EndOffset
	}
	return nil
}

func (x *WindowClause) GetRunCondition() []*Node {
	if x != nil {
		return x.RunCondition
	}
	return nil
}

func (x *WindowClause) GetStartInRangeFunc() uint32 {
	if x != nil {
		return x.StartInRangeFunc
	}
	return 0
}

func (x *WindowClause) GetEndInRangeFunc() uint32 {
	if x != nil {
		return x.EndInRangeFunc
	}
	return 0
}

func (x *WindowClause) GetInRangeColl() uint32 {
	if x != nil {
		return x.InRangeColl
	}
	return 0
}

func (x *WindowClause) GetInRangeAsc() bool {
	if x != nil {
		return x.InRangeAsc
	}
	return false
}

func (x *WindowClause) GetInRangeNullsFirst() bool {
	if x != nil {
		return x.InRangeNullsFirst
	}
	return false
}

func (x *WindowClause) GetWinref() uint32 {
	if x != nil {
		return x.Winref
	}
	return 0
}

func (x *WindowClause) GetCopiedOrder() bool {
	if x != nil {
		return x.CopiedOrder
	}
	return false
}

type ObjectWithArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objname         []*Node `protobuf:"bytes,1,rep,name=objname,proto3" json:"objname,omitempty"`
	Objargs         []*Node `protobuf:"bytes,2,rep,name=objargs,proto3" json:"objargs,omitempty"`
	Objfuncargs     []*Node `protobuf:"bytes,3,rep,name=objfuncargs,proto3" json:"objfuncargs,omitempty"`
	ArgsUnspecified bool    `protobuf:"varint,4,opt,name=args_unspecified,proto3" json:"args_unspecified,omitempty"`
}

func (x *ObjectWithArgs) Reset() {
	*x = ObjectWithArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectWithArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectWithArgs) ProtoMessage() {}

func (x *ObjectWithArgs) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectWithArgs.ProtoReflect.Descriptor instead.
func (*ObjectWithArgs) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{214}
}

func (x *ObjectWithArgs) GetObjname() []*Node {
	if x != nil {
		return x.Objname
	}
	return nil
}

func (x *ObjectWithArgs) GetObjargs() []*Node {
	if x != nil {
		return x.Objargs
	}
	return nil
}

func (x *ObjectWithArgs) GetObjfuncargs() []*Node {
	if x != nil {
		return x.Objfuncargs
	}
	return nil
}

func (x *ObjectWithArgs) GetArgsUnspecified() bool {
	if x != nil {
		return x.ArgsUnspecified
	}
	return false
}

type AccessPriv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivName string  `protobuf:"bytes,1,opt,name=priv_name,proto3" json:"priv_name,omitempty"`
	Cols     []*Node `protobuf:"bytes,2,rep,name=cols,proto3" json:"cols,omitempty"`
}

func (x *AccessPriv) Reset() {
	*x = AccessPriv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessPriv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessPriv) ProtoMessage() {}

func (x *AccessPriv) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessPriv.ProtoReflect.Descriptor instead.
func (*AccessPriv) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{215}
}

func (x *AccessPriv) GetPrivName() string {
	if x != nil {
		return x.PrivName
	}
	return ""
}

func (x *AccessPriv) GetCols() []*Node {
	if x != nil {
		return x.Cols
	}
	return nil
}

type CreateOpClassItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemtype    int32           `protobuf:"varint,1,opt,name=itemtype,proto3" json:"itemtype,omitempty"`
	Name        *ObjectWithArgs `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Number      int32           `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	OrderFamily []*Node         `protobuf:"bytes,4,rep,name=order_family,proto3" json:"order_family,omitempty"`
	ClassArgs   []*Node         `protobuf:"bytes,5,rep,name=class_args,proto3" json:"class_args,omitempty"`
	Storedtype  *TypeName       `protobuf:"bytes,6,opt,name=storedtype,proto3" json:"storedtype,omitempty"`
}

func (x *CreateOpClassItem) Reset() {
	*x = CreateOpClassItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpClassItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpClassItem) ProtoMessage() {}

func (x *CreateOpClassItem) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpClassItem.ProtoReflect.Descriptor instead.
func (*CreateOpClassItem) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{216}
}

func (x *CreateOpClassItem) GetItemtype() int32 {
	if x != nil {
		return x.Itemtype
	}
	return 0
}

func (x *CreateOpClassItem) GetName() *ObjectWithArgs {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CreateOpClassItem) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *CreateOpClassItem) GetOrderFamily() []*Node {
	if x != nil {
		return x.OrderFamily
	}
	return nil
}

func (x *CreateOpClassItem) GetClassArgs() []*Node {
	if x != nil {
		return x.ClassArgs
	}
	return nil
}

func (x *CreateOpClassItem) GetStoredtype() *TypeName {
	if x != nil {
		return x.Storedtype
	}
	return nil
}

type TableLikeClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation    *RangeVar `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	Options     uint32    `protobuf:"varint,2,opt,name=options,proto3" json:"options,omitempty"`
	RelationOid uint32    `protobuf:"varint,3,opt,name=relation_oid,json=relationOid,proto3" json:"relation_oid,omitempty"`
}

func (x *TableLikeClause) Reset() {
	*x = TableLikeClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableLikeClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableLikeClause) ProtoMessage() {}

func (x *TableLikeClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableLikeClause.ProtoReflect.Descriptor instead.
func (*TableLikeClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{217}
}

func (x *TableLikeClause) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *TableLikeClause) GetOptions() uint32 {
	if x != nil {
		return x.Options
	}
	return 0
}

func (x *TableLikeClause) GetRelationOid() uint32 {
	if x != nil {
		return x.RelationOid
	}
	return 0
}

type FunctionParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ArgType *TypeName             `protobuf:"bytes,2,opt,name=arg_type,json=argType,proto3" json:"arg_type,omitempty"`
	Mode    FunctionParameterMode `protobuf:"varint,3,opt,name=mode,proto3,enum=pg_query.FunctionParameterMode" json:"mode,omitempty"`
	Defexpr *Node                 `protobuf:"bytes,4,opt,name=defexpr,proto3" json:"defexpr,omitempty"`
}

func (x *FunctionParameter) Reset() {
	*x = FunctionParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionParameter) ProtoMessage() {}

func (x *FunctionParameter) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionParameter.ProtoReflect.Descriptor instead.
func (*FunctionParameter) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{218}
}

func (x *FunctionParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionParameter) GetArgType() *TypeName {
	if x != nil {
		return x.ArgType
	}
	return nil
}

func (x *FunctionParameter) GetMode() FunctionParameterMode {
	if x != nil {
		return x.Mode
	}
	return FunctionParameterMode_FUNCTION_PARAMETER_MODE_UNDEFINED
}

func (x *FunctionParameter) GetDefexpr() *Node {
	if x != nil {
		return x.Defexpr
	}
	return nil
}

type LockingClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LockedRels []*Node            `protobuf:"bytes,1,rep,name=locked_rels,json=lockedRels,proto3" json:"locked_rels,omitempty"`
	Strength   LockClauseStrength `protobuf:"varint,2,opt,name=strength,proto3,enum=pg_query.LockClauseStrength" json:"strength,omitempty"`
	WaitPolicy LockWaitPolicy     `protobuf:"varint,3,opt,name=wait_policy,json=waitPolicy,proto3,enum=pg_query.LockWaitPolicy" json:"wait_policy,omitempty"`
}

func (x *LockingClause) Reset() {
	*x = LockingClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockingClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockingClause) ProtoMessage() {}

func (x *LockingClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockingClause.ProtoReflect.Descriptor instead.
func (*LockingClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{219}
}

func (x *LockingClause) GetLockedRels() []*Node {
	if x != nil {
		return x.LockedRels
	}
	return nil
}

func (x *LockingClause) GetStrength() LockClauseStrength {
	if x != nil {
		return x.Strength
	}
	return LockClauseStrength_LOCK_CLAUSE_STRENGTH_UNDEFINED
}

func (x *LockingClause) GetWaitPolicy() LockWaitPolicy {
	if x != nil {
		return x.WaitPolicy
	}
	return LockWaitPolicy_LOCK_WAIT_POLICY_UNDEFINED
}

type RowMarkClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rti        uint32             `protobuf:"varint,1,opt,name=rti,proto3" json:"rti,omitempty"`
	Strength   LockClauseStrength `protobuf:"varint,2,opt,name=strength,proto3,enum=pg_query.LockClauseStrength" json:"strength,omitempty"`
	WaitPolicy LockWaitPolicy     `protobuf:"varint,3,opt,name=wait_policy,json=waitPolicy,proto3,enum=pg_query.LockWaitPolicy" json:"wait_policy,omitempty"`
	PushedDown bool               `protobuf:"varint,4,opt,name=pushed_down,json=pushedDown,proto3" json:"pushed_down,omitempty"`
}

func (x *RowMarkClause) Reset() {
	*x = RowMarkClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowMarkClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowMarkClause) ProtoMessage() {}

func (x *RowMarkClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowMarkClause.ProtoReflect.Descriptor instead.
func (*RowMarkClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{220}
}

func (x *RowMarkClause) GetRti() uint32 {
	if x != nil {
		return x.Rti
	}
	return 0
}

func (x *RowMarkClause) GetStrength() LockClauseStrength {
	if x != nil {
		return x.Strength
	}
	return LockClauseStrength_LOCK_CLAUSE_STRENGTH_UNDEFINED
}

func (x *RowMarkClause) GetWaitPolicy() LockWaitPolicy {
	if x != nil {
		return x.WaitPolicy
	}
	return LockWaitPolicy_LOCK_WAIT_POLICY_UNDEFINED
}

func (x *RowMarkClause) GetPushedDown() bool {
	if x != nil {
		return x.PushedDown
	}
	return false
}

type XmlSerialize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xmloption XmlOptionType `protobuf:"varint,1,opt,name=xmloption,proto3,enum=pg_query.XmlOptionType" json:"xmloption,omitempty"`
	Expr      *Node         `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	TypeName  *TypeName     `protobuf:"bytes,3,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	Location  int32         `protobuf:"varint,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *XmlSerialize) Reset() {
	*x = XmlSerialize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XmlSerialize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XmlSerialize) ProtoMessage() {}

func (x *XmlSerialize) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XmlSerialize.ProtoReflect.Descriptor instead.
func (*XmlSerialize) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{221}
}

func (x *XmlSerialize) GetXmloption() XmlOptionType {
	if x != nil {
		return x.Xmloption
	}
	return XmlOptionType_XML_OPTION_TYPE_UNDEFINED
}

func (x *XmlSerialize) GetExpr() *Node {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *XmlSerialize) GetTypeName() *TypeName {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *XmlSerialize) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type WithClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctes      []*Node `protobuf:"bytes,1,rep,name=ctes,proto3" json:"ctes,omitempty"`
	Recursive bool    `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"`
	Location  int32   `protobuf:"varint,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *WithClause) Reset() {
	*x = WithClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithClause) ProtoMessage() {}

func (x *WithClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithClause.ProtoReflect.Descriptor instead.
func (*WithClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{222}
}

func (x *WithClause) GetCtes() []*Node {
	if x != nil {
		return x.Ctes
	}
	return nil
}

func (x *WithClause) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *WithClause) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type InferClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexElems  []*Node `protobuf:"bytes,1,rep,name=index_elems,json=indexElems,proto3" json:"index_elems,omitempty"`
	WhereClause *Node   `protobuf:"bytes,2,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"`
	Conname     string  `protobuf:"bytes,3,opt,name=conname,proto3" json:"conname,omitempty"`
	Location    int32   `protobuf:"varint,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *InferClause) Reset() {
	*x = InferClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferClause) ProtoMessage() {}

func (x *InferClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferClause.ProtoReflect.Descriptor instead.
func (*InferClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{223}
}

func (x *InferClause) GetIndexElems() []*Node {
	if x != nil {
		return x.IndexElems
	}
	return nil
}

func (x *InferClause) GetWhereClause() *Node {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

func (x *InferClause) GetConname() string {
	if x != nil {
		return x.Conname
	}
	return ""
}

func (x *InferClause) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type OnConflictClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action      OnConflictAction `protobuf:"varint,1,opt,name=action,proto3,enum=pg_query.OnConflictAction" json:"action,omitempty"`
	Infer       *InferClause     `protobuf:"bytes,2,opt,name=infer,proto3" json:"infer,omitempty"`
	TargetList  []*Node          `protobuf:"bytes,3,rep,name=target_list,json=targetList,proto3" json:"target_list,omitempty"`
	WhereClause *Node            `protobuf:"bytes,4,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"`
	Location    int32            `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *OnConflictClause) Reset() {
	*x = OnConflictClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnConflictClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnConflictClause) ProtoMessage() {}

func (x *OnConflictClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnConflictClause.ProtoReflect.Descriptor instead.
func (*OnConflictClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{224}
}

func (x *OnConflictClause) GetAction() OnConflictAction {
	if x != nil {
		return x.Action
	}
	return OnConflictAction_ON_CONFLICT_ACTION_UNDEFINED
}

func (x *OnConflictClause) GetInfer() *InferClause {
	if x != nil {
		return x.Infer
	}
	return nil
}

func (x *OnConflictClause) GetTargetList() []*Node {
	if x != nil {
		return x.TargetList
	}
	return nil
}

func (x *OnConflictClause) GetWhereClause() *Node {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

func (x *OnConflictClause) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type CTESearchClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchColList      []*Node `protobuf:"bytes,1,rep,name=search_col_list,proto3" json:"search_col_list,omitempty"`
	SearchBreadthFirst bool    `protobuf:"varint,2,opt,name=search_breadth_first,proto3" json:"search_breadth_first,omitempty"`
	SearchSeqColumn    string  `protobuf:"bytes,3,opt,name=search_seq_column,proto3" json:"search_seq_column,omitempty"`
	Location           int32   `protobuf:"varint,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *CTESearchClause) Reset() {
	*x = CTESearchClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTESearchClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTESearchClause) ProtoMessage() {}

func (x *CTESearchClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTESearchClause.ProtoReflect.Descriptor instead.
func (*CTESearchClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{225}
}

func (x *CTESearchClause) GetSearchColList() []*Node {
	if x != nil {
		return x.SearchColList
	}
	return nil
}

func (x *CTESearchClause) GetSearchBreadthFirst() bool {
	if x != nil {
		return x.SearchBreadthFirst
	}
	return false
}

func (x *CTESearchClause) GetSearchSeqColumn() string {
	if x != nil {
		return x.SearchSeqColumn
	}
	return ""
}

func (x *CTESearchClause) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type CTECycleClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CycleColList       []*Node `protobuf:"bytes,1,rep,name=cycle_col_list,proto3" json:"cycle_col_list,omitempty"`
	CycleMarkColumn    string  `protobuf:"bytes,2,opt,name=cycle_mark_column,proto3" json:"cycle_mark_column,omitempty"`
	CycleMarkValue     *Node   `protobuf:"bytes,3,opt,name=cycle_mark_value,proto3" json:"cycle_mark_value,omitempty"`
	CycleMarkDefault   *Node   `protobuf:"bytes,4,opt,name=cycle_mark_default,proto3" json:"cycle_mark_default,omitempty"`
	CyclePathColumn    string  `protobuf:"bytes,5,opt,name=cycle_path_column,proto3" json:"cycle_path_column,omitempty"`
	Location           int32   `protobuf:"varint,6,opt,name=location,proto3" json:"location,omitempty"`
	CycleMarkType      uint32  `protobuf:"varint,7,opt,name=cycle_mark_type,proto3" json:"cycle_mark_type,omitempty"`
	CycleMarkTypmod    int32   `protobuf:"varint,8,opt,name=cycle_mark_typmod,proto3" json:"cycle_mark_typmod,omitempty"`
	CycleMarkCollation uint32  `protobuf:"varint,9,opt,name=cycle_mark_collation,proto3" json:"cycle_mark_collation,omitempty"`
	CycleMarkNeop      uint32  `protobuf:"varint,10,opt,name=cycle_mark_neop,proto3" json:"cycle_mark_neop,omitempty"`
}

func (x *CTECycleClause) Reset() {
	*x = CTECycleClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CTECycleClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CTECycleClause) ProtoMessage() {}

func (x *CTECycleClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CTECycleClause.ProtoReflect.Descriptor instead.
func (*CTECycleClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{226}
}

func (x *CTECycleClause) GetCycleColList() []*Node {
	if x != nil {
		return x.CycleColList
	}
	return nil
}

func (x *CTECycleClause) GetCycleMarkColumn() string {
	if x != nil {
		return x.CycleMarkColumn
	}
	return ""
}

func (x *CTECycleClause) GetCycleMarkValue() *Node {
	if x != nil {
		return x.CycleMarkValue
	}
	return nil
}

func (x *CTECycleClause) GetCycleMarkDefault() *Node {
	if x != nil {
		return x.CycleMarkDefault
	}
	return nil
}

func (x *CTECycleClause) GetCyclePathColumn() string {
	if x != nil {
		return x.CyclePathColumn
	}
	return ""
}

func (x *CTECycleClause) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

func (x *CTECycleClause) GetCycleMarkType() uint32 {
	if x != nil {
		return x.CycleMarkType
	}
	return 0
}

func (x *CTECycleClause) GetCycleMarkTypmod() int32 {
	if x != nil {
		return x.CycleMarkTypmod
	}
	return 0
}

func (x *CTECycleClause) GetCycleMarkCollation() uint32 {
	if x != nil {
		return x.CycleMarkCollation
	}
	return 0
}

func (x *CTECycleClause) GetCycleMarkNeop() uint32 {
	if x != nil {
		return x.CycleMarkNeop
	}
	return 0
}

type CommonTableExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ctename          string           `protobuf:"bytes,1,opt,name=ctename,proto3" json:"ctename,omitempty"`
	Aliascolnames    []*Node          `protobuf:"bytes,2,rep,name=aliascolnames,proto3" json:"aliascolnames,omitempty"`
	Ctematerialized  CTEMaterialize   `protobuf:"varint,3,opt,name=ctematerialized,proto3,enum=pg_query.CTEMaterialize" json:"ctematerialized,omitempty"`
	Ctequery         *Node            `protobuf:"bytes,4,opt,name=ctequery,proto3" json:"ctequery,omitempty"`
	SearchClause     *CTESearchClause `protobuf:"bytes,5,opt,name=search_clause,proto3" json:"search_clause,omitempty"`
	CycleClause      *CTECycleClause  `protobuf:"bytes,6,opt,name=cycle_clause,proto3" json:"cycle_clause,omitempty"`
	Location         int32            `protobuf:"varint,7,opt,name=location,proto3" json:"location,omitempty"`
	Cterecursive     bool             `protobuf:"varint,8,opt,name=cterecursive,proto3" json:"cterecursive,omitempty"`
	Cterefcount      int32            `protobuf:"varint,9,opt,name=cterefcount,proto3" json:"cterefcount,omitempty"`
	Ctecolnames      []*Node          `protobuf:"bytes,10,rep,name=ctecolnames,proto3" json:"ctecolnames,omitempty"`
	Ctecoltypes      []*Node          `protobuf:"bytes,11,rep,name=ctecoltypes,proto3" json:"ctecoltypes,omitempty"`
	Ctecoltypmods    []*Node          `protobuf:"bytes,12,rep,name=ctecoltypmods,proto3" json:"ctecoltypmods,omitempty"`
	Ctecolcollations []*Node          `protobuf:"bytes,13,rep,name=ctecolcollations,proto3" json:"ctecolcollations,omitempty"`
}

func (x *CommonTableExpr) Reset() {
	*x = CommonTableExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonTableExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonTableExpr) ProtoMessage() {}

func (x *CommonTableExpr) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonTableExpr.ProtoReflect.Descriptor instead.
func (*CommonTableExpr) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{227}
}

func (x *CommonTableExpr) GetCtename() string {
	if x != nil {
		return x.Ctename
	}
	return ""
}

func (x *CommonTableExpr) GetAliascolnames() []*Node {
	if x != nil {
		return x.Aliascolnames
	}
	return nil
}

func (x *CommonTableExpr) GetCtematerialized() CTEMaterialize {
	if x != nil {
		return x.Ctematerialized
	}
	return CTEMaterialize_CTEMATERIALIZE_UNDEFINED
}

func (x *CommonTableExpr) GetCtequery() *Node {
	if x != nil {
		return x.Ctequery
	}
	return nil
}

func (x *CommonTableExpr) GetSearchClause() *CTESearchClause {
	if x != nil {
		return x.SearchClause
	}
	return nil
}

func (x *CommonTableExpr) GetCycleClause() *CTECycleClause {
	if x != nil {
		return x.CycleClause
	}
	return nil
}

func (x *CommonTableExpr) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

func (x *CommonTableExpr) GetCterecursive() bool {
	if x != nil {
		return x.Cterecursive
	}
	return false
}

func (x *CommonTableExpr) GetCterefcount() int32 {
	if x != nil {
		return x.Cterefcount
	}
	return 0
}

func (x *CommonTableExpr) GetCtecolnames() []*Node {
	if x != nil {
		return x.Ctecolnames
	}
	return nil
}

func (x *CommonTableExpr) GetCtecoltypes() []*Node {
	if x != nil {
		return x.Ctecoltypes
	}
	return nil
}

func (x *CommonTableExpr) GetCtecoltypmods() []*Node {
	if x != nil {
		return x.Ctecoltypmods
	}
	return nil
}

func (x *CommonTableExpr) GetCtecolcollations() []*Node {
	if x != nil {
		return x.Ctecolcollations
	}
	return nil
}

type MergeWhenClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matched     bool           `protobuf:"varint,1,opt,name=matched,proto3" json:"matched,omitempty"`
	CommandType CmdType        `protobuf:"varint,2,opt,name=command_type,json=commandType,proto3,enum=pg_query.CmdType" json:"command_type,omitempty"`
	Override    OverridingKind `protobuf:"varint,3,opt,name=override,proto3,enum=pg_query.OverridingKind" json:"override,omitempty"`
	Condition   *Node          `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	TargetList  []*Node        `protobuf:"bytes,5,rep,name=target_list,json=targetList,proto3" json:"target_list,omitempty"`
	Values      []*Node        `protobuf:"bytes,6,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *MergeWhenClause) Reset() {
	*x = MergeWhenClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeWhenClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeWhenClause) ProtoMessage() {}

func (x *MergeWhenClause) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeWhenClause.ProtoReflect.Descriptor instead.
func (*MergeWhenClause) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{228}
}

func (x *MergeWhenClause) GetMatched() bool {
	if x != nil {
		return x.Matched
	}
	return false
}

func (x *MergeWhenClause) GetCommandType() CmdType {
	if x != nil {
		return x.CommandType
	}
	return CmdType_CMD_TYPE_UNDEFINED
}

func (x *MergeWhenClause) GetOverride() OverridingKind {
	if x != nil {
		return x.Override
	}
	return OverridingKind_OVERRIDING_KIND_UNDEFINED
}

func (x *MergeWhenClause) GetCondition() *Node {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *MergeWhenClause) GetTargetList() []*Node {
	if x != nil {
		return x.TargetList
	}
	return nil
}

func (x *MergeWhenClause) GetValues() []*Node {
	if x != nil {
		return x.Values
	}
	return nil
}

type RoleSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Roletype RoleSpecType `protobuf:"varint,1,opt,name=roletype,proto3,enum=pg_query.RoleSpecType" json:"roletype,omitempty"`
	Rolename string       `protobuf:"bytes,2,opt,name=rolename,proto3" json:"rolename,omitempty"`
	Location int32        `protobuf:"varint,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *RoleSpec) Reset() {
	*x = RoleSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleSpec) ProtoMessage() {}

func (x *RoleSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleSpec.ProtoReflect.Descriptor instead.
func (*RoleSpec) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{229}
}

func (x *RoleSpec) GetRoletype() RoleSpecType {
	if x != nil {
		return x.Roletype
	}
	return RoleSpecType_ROLE_SPEC_TYPE_UNDEFINED
}

func (x *RoleSpec) GetRolename() string {
	if x != nil {
		return x.Rolename
	}
	return ""
}

func (x *RoleSpec) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type TriggerTransition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsNew   bool   `protobuf:"varint,2,opt,name=is_new,json=isNew,proto3" json:"is_new,omitempty"`
	IsTable bool   `protobuf:"varint,3,opt,name=is_table,json=isTable,proto3" json:"is_table,omitempty"`
}

func (x *TriggerTransition) Reset() {
	*x = TriggerTransition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTransition) ProtoMessage() {}

func (x *TriggerTransition) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTransition.ProtoReflect.Descriptor instead.
func (*TriggerTransition) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{230}
}

func (x *TriggerTransition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerTransition) GetIsNew() bool {
	if x != nil {
		return x.IsNew
	}
	return false
}

func (x *TriggerTransition) GetIsTable() bool {
	if x != nil {
		return x.IsTable
	}
	return false
}

type PartitionElem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expr      *Node   `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	Collation []*Node `protobuf:"bytes,3,rep,name=collation,proto3" json:"collation,omitempty"`
	Opclass   []*Node `protobuf:"bytes,4,rep,name=opclass,proto3" json:"opclass,omitempty"`
	Location  int32   `protobuf:"varint,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *PartitionElem) Reset() {
	*x = PartitionElem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionElem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionElem) ProtoMessage() {}

func (x *PartitionElem) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionElem.ProtoReflect.Descriptor instead.
func (*PartitionElem) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{231}
}

func (x *PartitionElem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PartitionElem) GetExpr() *Node {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *PartitionElem) GetCollation() []*Node {
	if x != nil {
		return x.Collation
	}
	return nil
}

func (x *PartitionElem) GetOpclass() []*Node {
	if x != nil {
		return x.Opclass
	}
	return nil
}

func (x *PartitionElem) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type PartitionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy   string  `protobuf:"bytes,1,opt,name=strategy,proto3" json:"strategy,omitempty"`
	PartParams []*Node `protobuf:"bytes,2,rep,name=part_params,json=partParams,proto3" json:"part_params,omitempty"`
	Location   int32   `protobuf:"varint,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *PartitionSpec) Reset() {
	*x = PartitionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionSpec) ProtoMessage() {}

func (x *PartitionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionSpec.ProtoReflect.Descriptor instead.
func (*PartitionSpec) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{232}
}

func (x *PartitionSpec) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *PartitionSpec) GetPartParams() []*Node {
	if x != nil {
		return x.PartParams
	}
	return nil
}

func (x *PartitionSpec) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type PartitionBoundSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy    string  `protobuf:"bytes,1,opt,name=strategy,proto3" json:"strategy,omitempty"`
	IsDefault   bool    `protobuf:"varint,2,opt,name=is_default,proto3" json:"is_default,omitempty"`
	Modulus     int32   `protobuf:"varint,3,opt,name=modulus,proto3" json:"modulus,omitempty"`
	Remainder   int32   `protobuf:"varint,4,opt,name=remainder,proto3" json:"remainder,omitempty"`
	Listdatums  []*Node `protobuf:"bytes,5,rep,name=listdatums,proto3" json:"listdatums,omitempty"`
	Lowerdatums []*Node `protobuf:"bytes,6,rep,name=lowerdatums,proto3" json:"lowerdatums,omitempty"`
	Upperdatums []*Node `protobuf:"bytes,7,rep,name=upperdatums,proto3" json:"upperdatums,omitempty"`
	Location    int32   `protobuf:"varint,8,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *PartitionBoundSpec) Reset() {
	*x = PartitionBoundSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionBoundSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionBoundSpec) ProtoMessage() {}

func (x *PartitionBoundSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionBoundSpec.ProtoReflect.Descriptor instead.
func (*PartitionBoundSpec) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{233}
}

func (x *PartitionBoundSpec) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *PartitionBoundSpec) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *PartitionBoundSpec) GetModulus() int32 {
	if x != nil {
		return x.Modulus
	}
	return 0
}

func (x *PartitionBoundSpec) GetRemainder() int32 {
	if x != nil {
		return x.Remainder
	}
	return 0
}

func (x *PartitionBoundSpec) GetListdatums() []*Node {
	if x != nil {
		return x.Listdatums
	}
	return nil
}

func (x *PartitionBoundSpec) GetLowerdatums() []*Node {
	if x != nil {
		return x.Lowerdatums
	}
	return nil
}

func (x *PartitionBoundSpec) GetUpperdatums() []*Node {
	if x != nil {
		return x.Upperdatums
	}
	return nil
}

func (x *PartitionBoundSpec) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type PartitionRangeDatum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind     PartitionRangeDatumKind `protobuf:"varint,1,opt,name=kind,proto3,enum=pg_query.PartitionRangeDatumKind" json:"kind,omitempty"`
	Value    *Node                   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Location int32                   `protobuf:"varint,3,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *PartitionRangeDatum) Reset() {
	*x = PartitionRangeDatum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionRangeDatum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionRangeDatum) ProtoMessage() {}

func (x *PartitionRangeDatum) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionRangeDatum.ProtoReflect.Descriptor instead.
func (*PartitionRangeDatum) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{234}
}

func (x *PartitionRangeDatum) GetKind() PartitionRangeDatumKind {
	if x != nil {
		return x.Kind
	}
	return PartitionRangeDatumKind_PARTITION_RANGE_DATUM_KIND_UNDEFINED
}

func (x *PartitionRangeDatum) GetValue() *Node {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PartitionRangeDatum) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type PartitionCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       *RangeVar           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Bound      *PartitionBoundSpec `protobuf:"bytes,2,opt,name=bound,proto3" json:"bound,omitempty"`
	Concurrent bool                `protobuf:"varint,3,opt,name=concurrent,proto3" json:"concurrent,omitempty"`
}

func (x *PartitionCmd) Reset() {
	*x = PartitionCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartitionCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionCmd) ProtoMessage() {}

func (x *PartitionCmd) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionCmd.ProtoReflect.Descriptor instead.
func (*PartitionCmd) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{235}
}

func (x *PartitionCmd) GetName() *RangeVar {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PartitionCmd) GetBound() *PartitionBoundSpec {
	if x != nil {
		return x.Bound
	}
	return nil
}

func (x *PartitionCmd) GetConcurrent() bool {
	if x != nil {
		return x.Concurrent
	}
	return false
}

type VacuumRelation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation *RangeVar `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	Oid      uint32    `protobuf:"varint,2,opt,name=oid,proto3" json:"oid,omitempty"`
	VaCols   []*Node   `protobuf:"bytes,3,rep,name=va_cols,proto3" json:"va_cols,omitempty"`
}

func (x *VacuumRelation) Reset() {
	*x = VacuumRelation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VacuumRelation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VacuumRelation) ProtoMessage() {}

func (x *VacuumRelation) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VacuumRelation.ProtoReflect.Descriptor instead.
func (*VacuumRelation) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{236}
}

func (x *VacuumRelation) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *VacuumRelation) GetOid() uint32 {
	if x != nil {
		return x.Oid
	}
	return 0
}

func (x *VacuumRelation) GetVaCols() []*Node {
	if x != nil {
		return x.VaCols
	}
	return nil
}

type PublicationObjSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pubobjtype PublicationObjSpecType `protobuf:"varint,1,opt,name=pubobjtype,proto3,enum=pg_query.PublicationObjSpecType" json:"pubobjtype,omitempty"`
	Name       string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pubtable   *PublicationTable      `protobuf:"bytes,3,opt,name=pubtable,proto3" json:"pubtable,omitempty"`
	Location   int32                  `protobuf:"varint,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *PublicationObjSpec) Reset() {
	*x = PublicationObjSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationObjSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationObjSpec) ProtoMessage() {}

func (x *PublicationObjSpec) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationObjSpec.ProtoReflect.Descriptor instead.
func (*PublicationObjSpec) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{237}
}

func (x *PublicationObjSpec) GetPubobjtype() PublicationObjSpecType {
	if x != nil {
		return x.Pubobjtype
	}
	return PublicationObjSpecType_PUBLICATION_OBJ_SPEC_TYPE_UNDEFINED
}

func (x *PublicationObjSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PublicationObjSpec) GetPubtable() *PublicationTable {
	if x != nil {
		return x.Pubtable
	}
	return nil
}

func (x *PublicationObjSpec) GetLocation() int32 {
	if x != nil {
		return x.Location
	}
	return 0
}

type PublicationTable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation    *RangeVar `protobuf:"bytes,1,opt,name=relation,proto3" json:"relation,omitempty"`
	WhereClause *Node     `protobuf:"bytes,2,opt,name=where_clause,json=whereClause,proto3" json:"where_clause,omitempty"`
	Columns     []*Node   `protobuf:"bytes,3,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *PublicationTable) Reset() {
	*x = PublicationTable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationTable) ProtoMessage() {}

func (x *PublicationTable) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationTable.ProtoReflect.Descriptor instead.
func (*PublicationTable) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{238}
}

func (x *PublicationTable) GetRelation() *RangeVar {
	if x != nil {
		return x.Relation
	}
	return nil
}

func (x *PublicationTable) GetWhereClause() *Node {
	if x != nil {
		return x.WhereClause
	}
	return nil
}

func (x *PublicationTable) GetColumns() []*Node {
	if x != nil {
		return x.Columns
	}
	return nil
}

type InlineCodeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceText    string `protobuf:"bytes,1,opt,name=source_text,proto3" json:"source_text,omitempty"`
	LangOid       uint32 `protobuf:"varint,2,opt,name=lang_oid,json=langOid,proto3" json:"lang_oid,omitempty"`
	LangIsTrusted bool   `protobuf:"varint,3,opt,name=lang_is_trusted,json=langIsTrusted,proto3" json:"lang_is_trusted,omitempty"`
	Atomic        bool   `protobuf:"varint,4,opt,name=atomic,proto3" json:"atomic,omitempty"`
}

func (x *InlineCodeBlock) Reset() {
	*x = InlineCodeBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InlineCodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineCodeBlock) ProtoMessage() {}

func (x *InlineCodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineCodeBlock.ProtoReflect.Descriptor instead.
func (*InlineCodeBlock) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{239}
}

func (x *InlineCodeBlock) GetSourceText() string {
	if x != nil {
		return x.SourceText
	}
	return ""
}

func (x *InlineCodeBlock) GetLangOid() uint32 {
	if x != nil {
		return x.LangOid
	}
	return 0
}

func (x *InlineCodeBlock) GetLangIsTrusted() bool {
	if x != nil {
		return x.LangIsTrusted
	}
	return false
}

func (x *InlineCodeBlock) GetAtomic() bool {
	if x != nil {
		return x.Atomic
	}
	return false
}

type CallContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Atomic bool `protobuf:"varint,1,opt,name=atomic,proto3" json:"atomic,omitempty"`
}

func (x *CallContext) Reset() {
	*x = CallContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallContext) ProtoMessage() {}

func (x *CallContext) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallContext.ProtoReflect.Descriptor instead.
func (*CallContext) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{240}
}

func (x *CallContext) GetAtomic() bool {
	if x != nil {
		return x.Atomic
	}
	return false
}

type ScanToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start       int32       `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End         int32       `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Token       Token       `protobuf:"varint,4,opt,name=token,proto3,enum=pg_query.Token" json:"token,omitempty"`
	KeywordKind KeywordKind `protobuf:"varint,5,opt,name=keyword_kind,json=keywordKind,proto3,enum=pg_query.KeywordKind" json:"keyword_kind,omitempty"`
}

func (x *ScanToken) Reset() {
	*x = ScanToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pg_query_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScanToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScanToken) ProtoMessage() {}

func (x *ScanToken) ProtoReflect() protoreflect.Message {
	mi := &file_pg_query_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScanToken.ProtoReflect.Descriptor instead.
func (*ScanToken) Descriptor() ([]byte, []int) {
	return file_pg_query_proto_rawDescGZIP(), []int{241}
}

func (x *ScanToken) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ScanToken) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ScanToken) GetToken() Token {
	if x != nil {
		return x.Token
	}
	return Token_NUL
}

func (x *ScanToken) GetKeywordKind() KeywordKind {
	if x != nil {
		return x.KeywordKind
	}
	return KeywordKind_NO_KEYWORD
}

var File_pg_query_proto protoreflect.FileDescriptor

var file_pg_query_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x50, 0x0a, 0x0b, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61,
	0x77, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x05, 0x73, 0x74, 0x6d, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x0a,
	0x53, 0x63, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x53, 0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x22, 0xa0, 0x7d, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x48, 0x00, 0x52, 0x05, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52, 0x08, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x48,
	0x00, 0x52, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x21, 0x0a, 0x03,
	0x76, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x61, 0x72, 0x48, 0x00, 0x52, 0x03, 0x56, 0x61, 0x72, 0x12,
	0x27, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x48,
	0x00, 0x52, 0x05, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x66, 0x48, 0x00, 0x52, 0x06, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x66, 0x12, 0x3d, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x12, 0x37, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x48, 0x00,
	0x52, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x46, 0x0a, 0x10,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x66, 0x48, 0x00, 0x52, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x66, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x08, 0x46,
	0x75, 0x6e, 0x63, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x61, 0x72, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x41, 0x72, 0x67, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x41, 0x72, 0x67, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x4f, 0x70,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x69, 0x66, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x66, 0x45, 0x78, 0x70, 0x72, 0x48,
	0x00, 0x52, 0x0a, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x66, 0x45, 0x78, 0x70, 0x72, 0x12, 0x4e, 0x0a,
	0x14, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x6f, 0x70,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x4f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x11, 0x53, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x12, 0x31, 0x0a,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x08, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x2e, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75,
	0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x2e, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75,
	0x62, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x53, 0x75, 0x62, 0x50, 0x6c, 0x61, 0x6e,
	0x12, 0x50, 0x0a, 0x14, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x75, 0x62, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x12,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x3a, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x37,
	0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x52, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x65, 0x5f, 0x76, 0x69,
	0x61, 0x5f, 0x69, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x65, 0x56, 0x69, 0x61, 0x49,
	0x4f, 0x48, 0x00, 0x52, 0x0b, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x65, 0x56, 0x69, 0x61, 0x49, 0x4f,
	0x12, 0x47, 0x0a, 0x11, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x65, 0x72,
	0x63, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43,
	0x6f, 0x65, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x50, 0x0a, 0x14, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x52, 0x6f, 0x77, 0x74, 0x79, 0x70,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x52, 0x6f, 0x77, 0x74, 0x79, 0x70, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3a, 0x0a, 0x0c, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x43, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00,
	0x52, 0x08, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x61,
	0x73, 0x65, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x57, 0x68, 0x65,
	0x6e, 0x48, 0x00, 0x52, 0x08, 0x43, 0x61, 0x73, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x3e, 0x0a,
	0x0e, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x43, 0x61, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52,
	0x0c, 0x43, 0x61, 0x73, 0x65, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x34, 0x0a,
	0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x09, 0x41, 0x72, 0x72, 0x61, 0x79, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x52, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x07, 0x52, 0x6f, 0x77, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x6f, 0x77, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6f, 0x61,
	0x6c, 0x65, 0x73, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x61, 0x6c,
	0x65, 0x73, 0x63, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x43, 0x6f, 0x61, 0x6c,
	0x65, 0x73, 0x63, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x38, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x49, 0x0a, 0x11, 0x73, 0x71, 0x6c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x53, 0x51, 0x4c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a,
	0x08, 0x78, 0x6d, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x58, 0x6d, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x07, 0x58, 0x6d, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x31, 0x0a,
	0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74,
	0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x10,
	0x63, 0x6f, 0x65, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x48, 0x00, 0x52, 0x0e, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x12, 0x54, 0x0a, 0x16, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f,
	0x65, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x13, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x54,
	0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x53, 0x65, 0x74, 0x54,
	0x6f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x45, 0x78, 0x70, 0x72, 0x12, 0x41, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52,
	0x0d, 0x4e, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x40,
	0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x48,
	0x00, 0x52, 0x0d, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d,
	0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48, 0x00, 0x52,
	0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x0d,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x62, 0x6c, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0b, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x62, 0x6c, 0x52, 0x65, 0x66, 0x12, 0x31, 0x0a, 0x09, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x72,
	0x48, 0x00, 0x52, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x31, 0x0a, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x44, 0x0a, 0x10, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63,
	0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x61,
	0x77, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x07, 0x52, 0x61, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x05, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x73, 0x74,
	0x6d, 0x74, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x37, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x74, 0x6d, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x34,
	0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x39, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x09, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x73,
	0x74, 0x6d, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x37, 0x0a,
	0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x4c, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x50, 0x4c, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6d, 0x64, 0x48, 0x00, 0x52,
	0x0d, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x47,
	0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x6d, 0x74, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x5f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x40, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6d,
	0x74, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x42, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x47,
	0x72, 0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x69, 0x0a, 0x1d,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x73, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65,
	0x67, 0x65, 0x73, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x44, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6d, 0x74,
	0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x31, 0x0a, 0x09,
	0x63, 0x6f, 0x70, 0x79, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53,
	0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x08, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x12,
	0x37, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x47,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x53,
	0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x31, 0x0a, 0x09, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x44, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x08, 0x44, 0x72, 0x6f, 0x70,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x6d, 0x74, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6d, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12,
	0x34, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x09, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73,
	0x74, 0x6d, 0x74, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x50, 0x0a, 0x14, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x6d, 0x74, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x4d, 0x0a,
	0x13, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x6d, 0x74, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2b, 0x0a, 0x07,
	0x64, 0x6f, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x6f, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x06, 0x44, 0x6f, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x08, 0x52, 0x75, 0x6c,
	0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f,
	0x73, 0x74, 0x6d, 0x74, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74, 0x6d, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x37,
	0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x54, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x55, 0x6e, 0x6c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x46, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x56, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x31,
	0x0a, 0x09, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x57, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x08, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x31, 0x0a, 0x09, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x08, 0x4c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x59, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x62, 0x5f, 0x73, 0x74, 0x6d,
	0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x62, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x62, 0x53, 0x74, 0x6d, 0x74, 0x12,
	0x37, 0x0a, 0x0b, 0x64, 0x72, 0x6f, 0x70, 0x64, 0x62, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x5b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x44, 0x72, 0x6f, 0x70, 0x64, 0x62, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x44, 0x72,
	0x6f, 0x70, 0x64, 0x62, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x76, 0x61, 0x63, 0x75,
	0x75, 0x6d, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x53,
	0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6d,
	0x74, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x4e, 0x0a,
	0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73,
	0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x73, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x41, 0x0a,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x6d, 0x74,
	0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x3e, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x73, 0x74,
	0x6d, 0x74, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x71, 0x53, 0x74, 0x6d, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x71, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x47, 0x0a, 0x11, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18,
	0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x6d,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f,
	0x77, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64,
	0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x6d, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69,
	0x67, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x67, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x4c, 0x61, 0x6e, 0x67, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x4c, 0x61, 0x6e, 0x67, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x44, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x73, 0x74, 0x6d, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x68, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f,
	0x70, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x44, 0x72, 0x6f,
	0x70, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6d, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x50, 0x0a, 0x14,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x73, 0x74, 0x6d, 0x74, 0x18, 0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a,
	0x0a, 0x0c, 0x72, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x6b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x52,
	0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x6c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x4a, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x4d, 0x0a, 0x13,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x74, 0x6d, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x70, 0x0a, 0x20, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18,
	0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52,
	0x1c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x57, 0x0a,
	0x17, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00,
	0x52, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x4b, 0x0a, 0x13, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x71, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x10, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x56, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x72, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18,
	0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x4e, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x51, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x4e, 0x0a, 0x14, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70,
	0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x76, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x4f, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x6d, 0x74, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6d,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x43, 0x0a, 0x0f,
	0x64, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18,
	0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x4d, 0x0a, 0x13, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x7a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x65, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x11, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x57, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x7b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x6d,
	0x74, 0x48, 0x00, 0x52, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x51, 0x0a, 0x15, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74,
	0x6d, 0x74, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x12, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x5d, 0x0a, 0x19,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x73, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x53, 0x74, 0x6d,
	0x74, 0x48, 0x00, 0x52, 0x16, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x5a, 0x0a, 0x18, 0x61,
	0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00,
	0x52, 0x15, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x7f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x4e, 0x0a,
	0x13, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x73, 0x74, 0x6d, 0x74, 0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x11, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x42, 0x0a,
	0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74,
	0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x6d, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x6d, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x77, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x83, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x6d, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x52, 0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x77, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x4e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x6d, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x48, 0x0a, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x74, 0x6d,
	0x74, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x5a, 0x0a, 0x17, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79,
	0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x53, 0x44,
	0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52,
	0x15, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x53, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x63, 0x0a, 0x1a, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x74, 0x73, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x6d, 0x74, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x53, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x18, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x64, 0x77, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x8a,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x64, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00,
	0x52, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x64, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x12,
	0x3f, 0x0a, 0x0e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x64, 0x77, 0x5f, 0x73, 0x74, 0x6d,
	0x74, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x64, 0x77, 0x53, 0x74, 0x6d, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x64, 0x77, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x61, 0x0a, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x8c,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x5e, 0x0a, 0x19, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6d, 0x74,
	0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x16, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18,
	0x8e, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x58, 0x0a, 0x17, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x8f, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x6d, 0x74, 0x48, 0x00, 0x52, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x6d, 0x74, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x13, 0x44, 0x72,
	0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x6b, 0x0a, 0x1e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73,
	0x74, 0x6d, 0x74, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x6d, 0x74,
	0x48, 0x00, 0x52, 0x1a, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x5c,
	0x0a, 0x19, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x92, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x53,
	0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x15, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x3f, 0x0a, 0x0e,
	0x73, 0x65, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x93,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x53, 0x65, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x53, 0x65, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x5e, 0x0a,
	0x19, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x61, 0x0a,
	0x1a, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x95, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x54, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x97,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x12, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x6a, 0x0a, 0x1d, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x55, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18,
	0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69,
	0x67, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x52, 0x0a, 0x15,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67,
	0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x12, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x52, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x74, 0x5f,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x4d, 0x61, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x4d, 0x61, 0x74, 0x56, 0x69, 0x65, 0x77,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x54, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x9c, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x13, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18,
	0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6d,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x48, 0x0a, 0x11, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x54, 0x0a, 0x15, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x73, 0x74, 0x6d, 0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x6d, 0x5f, 0x73,
	0x74, 0x6d, 0x74, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x53, 0x74,
	0x6d, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x5a, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0xa2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x57,
	0x0a, 0x16, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x5d, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x6d, 0x74, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x5a, 0x0a, 0x17, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6d,
	0x74, 0x18, 0xa5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x15, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x57, 0x0a, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0xa6, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44,
	0x72, 0x6f, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x6d, 0x74, 0x48, 0x00, 0x52, 0x14, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x6d, 0x74,
	0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x74,
	0x6d, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0xa8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x6d, 0x74, 0x48, 0x00, 0x52, 0x12, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x6d, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x45, 0x0a, 0x10,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x6d, 0x74,
	0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x74, 0x6d,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0xab, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x41, 0x5f, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x41, 0x5f, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x35, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0xac,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x09, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x32, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x48,
	0x00, 0x52, 0x08, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x32, 0x0a, 0x09, 0x66,
	0x75, 0x6e, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x43,
	0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x12,
	0x2b, 0x0a, 0x06, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x5f, 0x53, 0x74,
	0x61, 0x72, 0x48, 0x00, 0x52, 0x06, 0x41, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x12, 0x34, 0x0a, 0x09,
	0x61, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0xb0, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x5f, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x09, 0x41, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x0d, 0x61, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x41, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x18, 0xb2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x5f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x41, 0x5f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x45, 0x78, 0x70,
	0x72, 0x12, 0x35, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0xb3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x52,
	0x65, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0xb4, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52,
	0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x66, 0x12,
	0x32, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x61, 0x73, 0x74, 0x18, 0xb5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x61, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x61, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62,
	0x79, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x48, 0x00, 0x52, 0x06, 0x53, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x12, 0x35, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x64,
	0x65, 0x66, 0x18, 0xb8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x48, 0x00,
	0x52, 0x09, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x12, 0x44, 0x0a, 0x0f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0xb9,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x0e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0xba, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x10, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x66, 0x75, 0x6e, 0x63, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x48, 0x00, 0x52, 0x0e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x4f, 0x0a, 0x14, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6c,
	0x18, 0xbd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x43, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x11, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x08, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x18, 0xbf, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x48, 0x00, 0x52, 0x09, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x44, 0x65, 0x66, 0x12, 0x35, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x65, 0x6c,
	0x65, 0x6d, 0x18, 0xc0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00,
	0x52, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0xc1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x18, 0xc2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x64,
	0x65, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0xc3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x45, 0x6c, 0x65,
	0x6d, 0x48, 0x00, 0x52, 0x07, 0x44, 0x65, 0x66, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x42, 0x0a, 0x0f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0xc4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x62, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x62, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x4b, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x62, 0x6c, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x62,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x54, 0x62, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a,
	0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x18, 0xc6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x11, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x57, 0x69, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0f, 0x53, 0x6f, 0x72, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x3e,
	0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18,
	0xca, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x10, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x18, 0xcb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41,
	0x72, 0x67, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x41, 0x72, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x76, 0x18, 0xcc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69,
	0x76, 0x48, 0x00, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x76, 0x12,
	0x4f, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x48, 0x0a, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6b, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6b,
	0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x6c, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0xd0, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x4c,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f,
	0x72, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18,
	0xd1, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0d, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x0d, 0x78, 0x6d, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x58, 0x6d, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x58, 0x6d, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x12, 0x38, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18,
	0xd3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0xd4, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0xd5, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x63, 0x74, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0xd6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x54, 0x45, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x43, 0x54,
	0x45, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x0f, 0x63, 0x74, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x18, 0xd7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x43, 0x54, 0x45, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x43, 0x54, 0x45, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0xd8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x48, 0x0a,
	0x11, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x18, 0xd9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x68, 0x65,
	0x6e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x18, 0xda, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x48,
	0x00, 0x52, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4d, 0x0a, 0x12, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0xdb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x18, 0xdc, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0d,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x41, 0x0a,
	0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18,
	0xdd, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x48,
	0x00, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x51, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52,
	0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x54, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x18, 0xdf, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6d, 0x64, 0x18, 0xe0, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6d, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x76, 0x61, 0x63,
	0x75, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe1, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x56,
	0x61, 0x63, 0x75, 0x75, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0e, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f,
	0x62, 0x6a, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0xe2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x12,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x4a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xe3, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x10, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x48,
	0x0a, 0x11, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0xe4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0xe5, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0xe7,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x2e, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0xe8, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xe9, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x0a,
	0x62, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0xea, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x69, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x09, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xeb, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xec, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x49, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x6f,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0xed, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x69, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x4f, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x07,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0xee, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x5f, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x41, 0x5f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x22, 0x1d, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x69,
	0x76, 0x61, 0x6c, 0x22, 0x1b, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x76, 0x61, 0x6c,
	0x22, 0x23, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x76, 0x61, 0x6c, 0x22, 0x1c, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x76, 0x61, 0x6c, 0x22, 0x21, 0x0a, 0x09, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x73, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x73, 0x76, 0x61, 0x6c, 0x22, 0x2c, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x22, 0x2f, 0x0a, 0x07, 0x4f, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x2f, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x24, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x98, 0x02, 0x0a, 0x07, 0x41, 0x5f, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x69, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x69, 0x76, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x66,
	0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x04, 0x66, 0x76,
	0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x76, 0x61,
	0x6c, 0x12, 0x26, 0x0a, 0x04, 0x73, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x04, 0x73, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x73, 0x76,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x42, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x05, 0x62, 0x73, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x6e, 0x75, 0x6c, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x6e, 0x75, 0x6c, 0x6c, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61,
	0x6c, 0x22, 0x51, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0xe3, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x6e, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x69, 0x6e, 0x68, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x04, 0x0a, 0x09, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x28, 0x0a, 0x07, 0x6e, 0x73, 0x5f, 0x75,
	0x72, 0x69, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6e, 0x73, 0x5f, 0x75, 0x72,
	0x69, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6e, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x28,
	0x0a, 0x07, 0x64, 0x6f, 0x63, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x64, 0x6f, 0x63, 0x65, 0x78, 0x70, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x65, 0x78,
	0x70, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2a,
	0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6c, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x65, 0x78, 0x70, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x65, 0x78, 0x70, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x0b,
	0x63, 0x6f, 0x6c, 0x64, 0x65, 0x66, 0x65, 0x78, 0x70, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x64, 0x65, 0x66, 0x65, 0x78, 0x70, 0x72, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x63, 0x6f, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x63, 0x6f, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xab, 0x02, 0x0a,
	0x03, 0x56, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x72, 0x6e, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x72, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x61, 0x72, 0x61, 0x74, 0x74, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x76, 0x61, 0x72, 0x61, 0x74, 0x74, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x61, 0x72, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x72, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x76, 0x61, 0x72, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x76, 0x61, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x75, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x75, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x6e, 0x6f, 0x73, 0x79, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x76, 0x61, 0x72, 0x6e, 0x6f, 0x73, 0x79, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x76, 0x61, 0x72, 0x61, 0x74, 0x74, 0x6e, 0x6f, 0x73, 0x79, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x61, 0x74, 0x74, 0x6e, 0x6f, 0x73, 0x79, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x05, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x74, 0x79, 0x70,
	0x6d, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x63, 0x6f, 0x6c, 0x6c,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x63,
	0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xd6, 0x05, 0x0a, 0x06, 0x41, 0x67, 0x67, 0x72, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x03,
	0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x67, 0x67, 0x66, 0x6e, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x61, 0x67, 0x67, 0x66, 0x6e, 0x6f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67,
	0x67, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x67, 0x67,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x67, 0x67, 0x63, 0x6f, 0x6c, 0x6c,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f,
	0x6c, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x67, 0x67, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x61,
	0x72, 0x67, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x61,
	0x67, 0x67, 0x61, 0x72, 0x67, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x61, 0x67,
	0x67, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x61, 0x67, 0x67, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x63, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x61, 0x67, 0x67, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x67, 0x67, 0x73, 0x74, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x61, 0x67, 0x67, 0x73, 0x74, 0x61, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x67,
	0x67, 0x76, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x61, 0x67, 0x67, 0x76, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x67, 0x67, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x67, 0x67, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x73, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x67, 0x67,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x75, 0x70, 0x12, 0x2e, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x67, 0x67, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x08,
	0x61, 0x67, 0x67, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x67, 0x67, 0x6e,
	0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x67, 0x67, 0x6e, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x67, 0x67, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6e, 0x6f, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xda, 0x01, 0x0a, 0x0c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x20, 0x0a, 0x03, 0x78,
	0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x22, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x72, 0x65, 0x66, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x67, 0x67,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x61, 0x67, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdc, 0x02, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x66,
	0x6e, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x66,
	0x6e, 0x6f, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x77, 0x69, 0x6e, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x22,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x61, 0x67, 0x67, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x77, 0x69, 0x6e, 0x72, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x61, 0x67, 0x67, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x61, 0x67, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x03, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x2a, 0x0a, 0x10,
	0x72, 0x65, 0x66, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x72, 0x65, 0x66, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65,
	0x6c, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x65, 0x6c, 0x65, 0x6d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x63,
	0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x70, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0f, 0x72, 0x65, 0x66, 0x75, 0x70, 0x70, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x70, 0x72,
	0x12, 0x38, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x70, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x72, 0x65,
	0x66, 0x65, 0x78, 0x70, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x72, 0x65, 0x66,
	0x65, 0x78, 0x70, 0x72, 0x12, 0x32, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x61, 0x73, 0x73, 0x67, 0x6e,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x61,
	0x73, 0x73, 0x67, 0x6e, 0x65, 0x78, 0x70, 0x72, 0x22, 0xea, 0x02, 0x0a, 0x08, 0x46, 0x75, 0x6e,
	0x63, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x75, 0x6e, 0x63, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x75, 0x6e, 0x63, 0x69, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x75, 0x6e,
	0x63, 0x72, 0x65, 0x74, 0x73, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x76, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x12, 0x36, 0x0a, 0x0a, 0x66,
	0x75, 0x6e, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x65, 0x72, 0x63,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x63, 0x6f, 0x6c,
	0x6c, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f, 0x6c, 0x6c,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63,
	0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41,
	0x72, 0x67, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x72, 0x67, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x61, 0x72, 0x67, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x06, 0x4f, 0x70, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x6f, 0x70, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x66,
	0x75, 0x6e, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x66,
	0x75, 0x6e, 0x63, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x70, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x72,
	0x65, 0x74, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x72,
	0x65, 0x74, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f, 0x6c,
	0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x02, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x6e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6f, 0x70, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x66, 0x75, 0x6e, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70,
	0x66, 0x75, 0x6e, 0x63, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x70,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70,
	0x72, 0x65, 0x74, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70,
	0x72, 0x65, 0x74, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x63, 0x6f, 0x6c, 0x6c,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x6f, 0x6c, 0x6c,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f,
	0x6c, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x02, 0x0a, 0x0a, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x66, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x6f, 0x70, 0x6e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x66,
	0x75, 0x6e, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x66,
	0x75, 0x6e, 0x63, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x70, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x72,
	0x65, 0x74, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x72,
	0x65, 0x74, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x70, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f, 0x6c,
	0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x02, 0x0a, 0x11, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x4f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6f,
	0x70, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6f, 0x70, 0x6e, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x66, 0x75, 0x6e, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x6f, 0x70, 0x66, 0x75, 0x6e, 0x63, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68,
	0x61, 0x73, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x68, 0x61, 0x73, 0x68, 0x66, 0x75, 0x6e, 0x63, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x65, 0x67, 0x66, 0x75, 0x6e, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6e, 0x65, 0x67, 0x66, 0x75, 0x6e, 0x63, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x75, 0x73, 0x65,
	0x5f, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x75, 0x73, 0x65, 0x4f, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f, 0x6c, 0x6c,
	0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70,
	0x72, 0x12, 0x2e, 0x0a, 0x06, 0x62, 0x6f, 0x6f, 0x6c, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x62, 0x6f, 0x6f, 0x6c, 0x6f,
	0x70, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xa9, 0x02, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a,
	0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12,
	0x39, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x75, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73,
	0x75, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x75,
	0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5, 0x05,
	0x0a, 0x07, 0x53, 0x75, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x39, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75,
	0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x4c, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x65, 0x78,
	0x70, 0x72, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x6d, 0x6f,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x68,
	0x61, 0x73, 0x68, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x48, 0x61, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x45, 0x71, 0x46, 0x61, 0x6c, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x12, 0x2b, 0x0a,
	0x09, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x62, 0x0a, 0x12, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x75, 0x62, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x78,
	0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x2a, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x61,
	0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x22, 0xc8, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78,
	0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x03, 0x61, 0x72, 0x67, 0x12, 0x28, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x76, 0x61, 0x6c, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x76, 0x61, 0x6c, 0x73, 0x12, 0x2c,
	0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x75, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x6e, 0x75, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x22, 0x93, 0x02, 0x0a,
	0x0b, 0x52, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x03,
	0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x20,
	0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61, 0x72, 0x67,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79,
	0x70, 0x6d, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f,
	0x6c, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x65, 0x72, 0x63,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xed, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x65, 0x56, 0x69, 0x61,
	0x49, 0x4f, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x03, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x63, 0x6f,
	0x65, 0x72, 0x63, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x65, 0x72,
	0x63, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x0c, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x65,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xc1, 0x02, 0x0a, 0x0f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x65, 0x72,
	0x63, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x2a, 0x0a, 0x08, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x78, 0x70, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x3a,
	0x0a, 0x0c, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x0c, 0x63, 0x6f,
	0x65, 0x72, 0x63, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd2, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x52, 0x6f, 0x77, 0x74, 0x79, 0x70, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a,
	0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12,
	0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61, 0x72,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x0b,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78,
	0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a,
	0x03, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x4f, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf8, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x73, 0x65, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x61, 0x73, 0x65, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03,
	0x61, 0x72, 0x67, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x64, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x94, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x12, 0x20,
	0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72,
	0x12, 0x22, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x65, 0x78, 0x70, 0x72, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x43, 0x61, 0x73,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x02,
	0x0a, 0x09, 0x41, 0x72, 0x72, 0x61, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78,
	0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x69, 0x64, 0x12, 0x2a, 0x0a,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x64, 0x69, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x64, 0x69, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xef, 0x01, 0x0a, 0x07, 0x52, 0x6f, 0x77, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70,
	0x72, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x2a, 0x0a,
	0x08, 0x63, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x63, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xba, 0x02, 0x0a, 0x0e, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x63,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x63, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x05,
	0x6f, 0x70, 0x6e, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6f, 0x70, 0x6e,
	0x6f, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x6f, 0x70, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x6f, 0x70, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69,
	0x65, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63,
	0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x72, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x05,
	0x72, 0x61, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x72, 0x61, 0x72,
	0x67, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x61,
	0x6c, 0x65, 0x73, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x61,
	0x6c, 0x65, 0x73, 0x63, 0x65, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xf8, 0x01, 0x0a, 0x0a, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78,
	0x70, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78, 0x63, 0x6f, 0x6c, 0x6c,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x6d, 0x61, 0x78,
	0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x63,
	0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x22, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a,
	0x10, 0x53, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03,
	0x78, 0x70, 0x72, 0x12, 0x2c, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x51, 0x4c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x02, 0x0a, 0x07, 0x58, 0x6d,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x23, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x58,
	0x6d, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4f, 0x70, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x2c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x61, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22,
	0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x78, 0x6d, 0x6c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x58, 0x6d, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x78, 0x6d, 0x6c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x79, 0x70, 0x6d, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xc2, 0x01, 0x0a, 0x08, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72,
	0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61,
	0x72, 0x67, 0x12, 0x3a, 0x0a, 0x0c, 0x6e, 0x75, 0x6c, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x6e, 0x75, 0x6c, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x61, 0x72, 0x67, 0x69, 0x73, 0x72, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x61, 0x72, 0x67, 0x69, 0x73, 0x72, 0x6f, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x3a, 0x0a, 0x0c, 0x62, 0x6f,
	0x6f, 0x6c, 0x74, 0x65, 0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x54, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x74, 0x65,
	0x73, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x52, 0x0e, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x01,
	0x0a, 0x13, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4f, 0x66, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x76,
	0x61, 0x72, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x76, 0x61, 0x72,
	0x6e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x60, 0x0a, 0x0d, 0x4e, 0x65, 0x78, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x65, 0x71, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x65, 0x71, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x03,
	0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x22,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x63, 0x6f,
	0x6c, 0x6c, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x6f, 0x70, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x6f, 0x70, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x87, 0x02, 0x0a, 0x0b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x03, 0x78, 0x70, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x78, 0x70, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x73, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72,
	0x65, 0x73, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x72, 0x65,
	0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x74,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x72, 0x65, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x72, 0x69, 0x67, 0x74, 0x62, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x72, 0x69, 0x67, 0x74, 0x62, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f,
	0x72, 0x69, 0x67, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x6f, 0x72, 0x69, 0x67, 0x63, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x6a,
	0x75, 0x6e, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x73, 0x6a, 0x75,
	0x6e, 0x6b, 0x22, 0x27, 0x0a, 0x0b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x62, 0x6c, 0x52, 0x65,
	0x66, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x72, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xf8, 0x02, 0x0a, 0x08,
	0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73,
	0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x61, 0x72, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x72, 0x67, 0x12, 0x22, 0x0a, 0x04, 0x72,
	0x61, 0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x72, 0x61, 0x72, 0x67, 0x12,
	0x31, 0x0a, 0x0c, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x10, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x24, 0x0a, 0x05, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x71, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72,
	0x74, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5c, 0x0a, 0x08, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x22, 0x9e, 0x03, 0x0a, 0x0e, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x45, 0x78, 0x70, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0d, 0x61,
	0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0c, 0x61, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x73,
	0x12, 0x33, 0x0a, 0x0d, 0x61, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x61, 0x72, 0x62, 0x69, 0x74, 0x65, 0x72,
	0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0f, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x53, 0x65, 0x74, 0x12, 0x3a, 0x0a,
	0x11, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x78, 0x63,
	0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x52, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x34, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x5f, 0x72, 0x65, 0x6c, 0x5f, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x6c, 0x52, 0x65, 0x6c,
	0x54, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xdb, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x6f, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x72, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x03, 0x72, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x28, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70,
	0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x76, 0x69, 0x65,
	0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x9d, 0x02, 0x0a, 0x0b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x34, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43,
	0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x71, 0x75, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x2f, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6e, 0x6f, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6c,
	0x6e, 0x6f, 0x73, 0x22, 0x6f, 0x0a, 0x07, 0x52, 0x61, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x22,
	0x0a, 0x04, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x73, 0x74,
	0x6d, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6d, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x6d, 0x74, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6d, 0x74,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x6d, 0x74,
	0x5f, 0x6c, 0x65, 0x6e, 0x22, 0xcd, 0x0e, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x34,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x53, 0x65, 0x74, 0x54, 0x61, 0x67, 0x12, 0x31,
	0x0a, 0x0c, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x61,
	0x73, 0x5f, 0x61, 0x67, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x41, 0x67, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x68, 0x61, 0x73, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x72,
	0x66, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x52, 0x46, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x73,
	0x75, 0x62, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x68, 0x61, 0x73, 0x53, 0x75, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68,
	0x61, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x6f, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63,
	0x74, 0x4f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x52,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x69, 0x6e,
	0x67, 0x43, 0x54, 0x45, 0x12, 0x24, 0x0a, 0x0e, 0x68, 0x61, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61,
	0x73, 0x46, 0x6f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61,
	0x73, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x12, 0x29, 0x0a, 0x08, 0x63, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x63, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06,
	0x72, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x72, 0x65, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x78, 0x70, 0x72, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e,
	0x74, 0x72, 0x65, 0x65, 0x12, 0x3a, 0x0a, 0x11, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x55, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69,
	0x6e, 0x12, 0x2f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0a, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c,
	0x69, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x68, 0x61, 0x76,
	0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x0d, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x63, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74,
	0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73,
	0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x0b,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x4d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x35, 0x0a, 0x0e, 0x73, 0x65, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x73, 0x18, 0x25,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x44, 0x65, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x6d, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x6d, 0x74, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6d, 0x74,
	0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x6d, 0x74,
	0x5f, 0x6c, 0x65, 0x6e, 0x22, 0xff, 0x02, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x52, 0x10, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0c, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x69,
	0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0e, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0a, 0x77,
	0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0b,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x09,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x12, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x68, 0x65, 0x6e,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0xd3,
	0x07, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x37, 0x0a,
	0x0f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x6f, 0x5f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x0d,
	0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0c, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x33, 0x0a, 0x0d, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x73, 0x6f, 0x72, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2f, 0x0a,
	0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c,
	0x12, 0x28, 0x0a, 0x04, 0x6c, 0x61, 0x72, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x6d, 0x74, 0x52, 0x04, 0x6c, 0x61, 0x72, 0x67, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x61,
	0x72, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x04,
	0x72, 0x61, 0x72, 0x67, 0x22, 0x3a, 0x0a, 0x0a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x76, 0x61, 0x6c,
	0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x6d, 0x74, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x6d, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6d, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x62,
	0x6a, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x22, 0xa9, 0x02, 0x0a, 0x0d, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6d, 0x64, 0x12, 0x32, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x6e, 0x65,
	0x77, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x22, 0xe2, 0x01, 0x0a, 0x0f, 0x41, 0x6c, 0x74, 0x65, 0x72,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x22, 0xde, 0x02, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x26, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x61,
	0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6c, 0x61, 0x72, 0x67, 0x12, 0x22,
	0x0a, 0x04, 0x72, 0x61, 0x72, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x72, 0x61,
	0x72, 0x67, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x73,
	0x12, 0x35, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x22, 0x9a, 0x03, 0x0a,
	0x09, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x69,
	0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52,
	0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x97, 0x02, 0x0a, 0x0d, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x34, 0x0a, 0x0d, 0x67,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x12, 0x34, 0x0a, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x5f, 0x67, 0x72,
	0x61, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x12, 0x2c, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x6f, 0x72, 0x12,
	0x32, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f,
	0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x22, 0x73, 0x0a, 0x1a, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x50, 0x72, 0x69, 0x76, 0x69, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x6d, 0x74,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6f, 0x72, 0x74, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x0b,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61,
	0x72, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0xbd, 0x02, 0x0a, 0x08, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2e,
	0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x61, 0x74, 0x74, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31,
	0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x22, 0xcb, 0x04, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6c, 0x74, 0x73, 0x12,
	0x33, 0x0a, 0x0d, 0x69, 0x6e, 0x68, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x68, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x33, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x74, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x73, 0x70, 0x65, 0x63, 0x12, 0x33, 0x0a, 0x0b, 0x6f, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a,
	0x6f, 0x66, 0x54, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x66, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22,
	0x92, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x28,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x64, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x66, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x08, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x44, 0x72, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x08, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x75, 0x6e, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x73, 0x65, 0x71, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x7f, 0x0a,
	0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x07,
	0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x96,
	0x01, 0x0a, 0x09, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x36, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x61, 0x6e, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x68, 0x6f, 0x77, 0x4d, 0x61, 0x6e, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x69, 0x73, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x69, 0x73, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0xd2, 0x07, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x64, 0x78, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64, 0x78, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x44, 0x0a, 0x16, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x28,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x10, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4f, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x78, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x78, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f,
	0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x6c, 0x64, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x6f, 0x6c, 0x64, 0x5f, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x73, 0x75, 0x62, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6f, 0x6c,
	0x64, 0x46, 0x69, 0x72, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x6f, 0x64,
	0x65, 0x53, 0x75, 0x62, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6e, 0x75, 0x6c, 0x6c,
	0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x62, 0x6c, 0x73, 0x70, 0x63,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x62, 0x6c, 0x73, 0x70, 0x63, 0x22, 0xb9, 0x02, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a,
	0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x08,
	0x73, 0x71, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08,
	0x73, 0x71, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x11, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x28, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2c, 0x0a, 0x06, 0x44, 0x6f, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x22, 0xde, 0x02, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44,
	0x72, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x08, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x22, 0x90, 0x02, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x31,
	0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6d, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x65, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x22, 0x4c, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x32, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x0c, 0x55, 0x6e,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xbe, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x22, 0x8d, 0x02, 0x0a, 0x08, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72,
	0x52, 0x04, 0x76, 0x69, 0x65, 0x77, 0x12, 0x28, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x12, 0x24, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x11, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x26, 0x0a, 0x08, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2e,
	0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0a, 0x63,
	0x6f, 0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x50, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x62, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x6e, 0x0a,
	0x0a, 0x44, 0x72, 0x6f, 0x70, 0x64, 0x62, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x6f, 0x6b, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7e, 0x0a,
	0x0a, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x72, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x72, 0x65, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x5f,
	0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x63, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x63, 0x6d, 0x64, 0x22, 0x5d, 0x0a,
	0x0b, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x24, 0x0a, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe1, 0x01, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x49, 0x6e, 0x74, 0x6f, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x04, 0x69, 0x6e,
	0x74, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x66,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x22, 0xce, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x66,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x65, 0x71, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x66, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b,
	0x22, 0x94, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0x26, 0x0a, 0x10, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3c, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2d,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x61, 0x72,
	0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0xb6, 0x04,
	0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72,
	0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f,
	0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2f, 0x0a, 0x0b, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x77, 0x68, 0x65,
	0x6e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x72, 0x65,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x72, 0x65, 0x6c, 0x22, 0xed, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x4c, 0x61, 0x6e, 0x67, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x09,
	0x70, 0x6c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x70, 0x6c, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6c,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x6c,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x70, 0x6c, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x70, 0x6c, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x74, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x6c, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x74, 0x6d,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74, 0x6d, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x79, 0x0a,
	0x0d, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x26,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x0c, 0x44, 0x72, 0x6f, 0x70,
	0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x22, 0x64,
	0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f,
	0x77, 0x61, 0x69, 0x74, 0x22, 0x62, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x0b,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x65, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x45, 0x6c, 0x74, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x22, 0x55, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x36, 0x0a, 0x1c, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x43, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x63, 0x0a, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x62,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x07,
	0x73, 0x65, 0x74, 0x73, 0x74, 0x6d, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x10, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x26, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x33, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x07, 0x73, 0x65,
	0x74, 0x73, 0x74, 0x6d, 0x74, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x38,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x64,
	0x65, 0x66, 0x22, 0xf1, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x33, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x6e, 0x6f, 0x75, 0x74, 0x22, 0x86, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x30, 0x0a, 0x0b,
	0x6f, 0x70, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0b, 0x6f, 0x70, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32,
	0x0a, 0x0c, 0x6f, 0x70, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6f, 0x70, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22,
	0x60, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x6f, 0x70, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6f, 0x70, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x9e, 0x01, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x32, 0x0a, 0x0c, 0x6f, 0x70, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6f,
	0x70, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x24, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x73, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x61, 0x72, 0x67, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x61, 0x72, 0x67, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x49, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x24, 0x0a, 0x0e, 0x44, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x65, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0xae, 0x01,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c,
	0x0a, 0x12, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x22, 0xeb, 0x01, 0x0a,
	0x16, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x73, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x65, 0x78, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x15, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61,
	0x72, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x77, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f,
	0x6b, 0x22, 0xcf, 0x01, 0x0a, 0x0e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61,
	0x72, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x41, 0x72, 0x67, 0x73, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x66, 0x0a, 0x0d, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x69, 0x0a, 0x0d, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x67, 0x0a, 0x11, 0x52,
	0x65, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x24, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x07, 0x6e, 0x65, 0x77,
	0x72, 0x6f, 0x6c, 0x65, 0x22, 0x71, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x79, 0x70,
	0x65, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x76, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x64, 0x65,
	0x66, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x64, 0x65, 0x66, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x61, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x22, 0x66, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2b, 0x0a,
	0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d,
	0x53, 0x74, 0x6d, 0x74, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65,
	0x77, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77,
	0x56, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x6e,
	0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e,
	0x65, 0x77, 0x56, 0x61, 0x6c, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x27, 0x0a,
	0x10, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x49,
	0x73, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69,
	0x66, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x6b, 0x69, 0x70, 0x49, 0x66, 0x4e, 0x65,
	0x77, 0x56, 0x61, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x15, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x53, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x69, 0x63, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x64, 0x69, 0x63, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x18, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x54, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x66, 0x67, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x63, 0x66, 0x67, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x05, 0x64, 0x69, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x64, 0x69, 0x63, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x22, 0x87, 0x01, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x64, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x64, 0x77, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x64, 0x77, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x0c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x46,
	0x64, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x64, 0x77, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x64, 0x77, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdd,
	0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x64, 0x77, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x64, 0x77, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9e,
	0x01, 0x0a, 0x16, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0xaf, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7d, 0x0a, 0x13,
	0x44, 0x72, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x22, 0x89, 0x01, 0x0a, 0x1a,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x65, 0x74, 0x22, 0xe7, 0x01, 0x0a, 0x15, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6f, 0x72, 0x69, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x65, 0x77,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x77,
	0x61, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6e, 0x6f, 0x77, 0x61, 0x69,
	0x74, 0x22, 0x98, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x91, 0x01, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2d, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x74, 0x6d, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6d, 0x74,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xa0, 0x02, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x3f, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x7f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x66, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x58, 0x0a, 0x12, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa6,
	0x01, 0x0a, 0x1a, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x78, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x78, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x53, 0x74, 0x6d, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x77, 0x68, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x77,
	0x68, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x12, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x69, 0x67, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x72, 0x69, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x72, 0x69, 0x67, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x67, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x67, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x4d, 0x61, 0x74, 0x56, 0x69, 0x65, 0x77, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x6b, 0x69, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52,
	0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x13, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x74, 0x6d, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x0f, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x73, 0x65, 0x74, 0x73, 0x74, 0x6d, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x53, 0x74, 0x6d, 0x74, 0x52, 0x07, 0x73, 0x65, 0x74, 0x73, 0x74,
	0x6d, 0x74, 0x22, 0x94, 0x02, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x12,
	0x24, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x0a, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0xd7, 0x01, 0x0a, 0x0f, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x28, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x61, 0x72, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x04, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x71,
	0x75, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x22, 0xd9, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x73, 0x71, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x41, 0x72, 0x67, 0x73, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x73, 0x71, 0x6c, 0x12,
	0x2e, 0x0a, 0x05, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x67, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x73, 0x71, 0x6c, 0x22,
	0x72, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6d, 0x53, 0x74, 0x6d, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xec, 0x01, 0x0a, 0x14, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x6d, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x0b, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x15, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12,
	0x33, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a, 0x0b, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x44, 0x72, 0x6f, 0x70, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x52, 0x08, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0xa9, 0x02,
	0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x74, 0x6d,
	0x74, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x64, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x05, 0x65, 0x78, 0x70, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x78,
	0x70, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x78, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x78, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x66, 0x5f, 0x6e,
	0x6f, 0x74, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0x40, 0x0a, 0x12, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74, 0x12,
	0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x08,
	0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x63, 0x61, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x45, 0x78, 0x70, 0x72, 0x52, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x65, 0x78, 0x70, 0x72, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x61,
	0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x53, 0x74, 0x6d, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x64, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x78, 0x73, 0x74, 0x61, 0x74, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x78, 0x73, 0x74, 0x61,
	0x74, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6b, 0x22, 0xbf, 0x01, 0x0a, 0x06, 0x41, 0x5f, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x5f, 0x45, 0x78,
	0x70, 0x72, 0x5f, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x22, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x6c, 0x65, 0x78, 0x70, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x72, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x72, 0x65, 0x78, 0x70, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a, 0x09, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x08, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x52, 0x65, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc7, 0x03, 0x0a, 0x08, 0x46,
	0x75, 0x6e, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x61, 0x67, 0x67, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x52, 0x04, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x2a,
	0x0a, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x67, 0x67, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x67,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x67,
	0x67, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x67,
	0x67, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x75,
	0x6e, 0x63, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x64, 0x69, 0x63,
	0x12, 0x36, 0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x52, 0x0a, 0x66, 0x75,
	0x6e, 0x63, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x08, 0x0a, 0x06, 0x41, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x22, 0x6f,
	0x0a, 0x09, 0x41, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x5f, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x64, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x64, 0x78, 0x12, 0x22, 0x0a, 0x04, 0x75,
	0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x75, 0x69, 0x64, 0x78, 0x22,
	0x63, 0x0a, 0x0d, 0x41, 0x5f, 0x49, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61,
	0x72, 0x67, 0x12, 0x30, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x55, 0x0a, 0x0b, 0x41, 0x5f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x09,
	0x52, 0x65, 0x73, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x0b, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x76, 0x61,
	0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a,
	0x0e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x66, 0x12,
	0x26, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6e, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6e, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x79, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x61, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xdf, 0x01, 0x0a, 0x06, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x33,
	0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x62, 0x79, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x42, 0x79, 0x44, 0x69, 0x72, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x62, 0x79, 0x5f,
	0x64, 0x69, 0x72, 0x12, 0x39, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x62, 0x79, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x73,
	0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x62, 0x79, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x25,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x5f, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x4f, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xca, 0x02, 0x0a, 0x09, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x44, 0x65, 0x66, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x31, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7d,
	0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0xf0, 0x01,
	0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x72, 0x6f, 0x77, 0x73, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2c, 0x0a, 0x09, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x64, 0x65, 0x66, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x64, 0x65, 0x66, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xd6, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2e, 0x0a,
	0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9b, 0x02, 0x0a, 0x0e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x65, 0x78, 0x70,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x64, 0x6f, 0x63, 0x65, 0x78, 0x70, 0x72,
	0x12, 0x28, 0x0a, 0x07, 0x72, 0x6f, 0x77, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41,
	0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x02, 0x0a, 0x11, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x43, 0x6f, 0x6c, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x5f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x66, 0x6f, 0x72, 0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75,
	0x6c, 0x6c, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x65, 0x78, 0x70, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2e, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x64, 0x65, 0x66, 0x65, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x64, 0x65, 0x66, 0x65, 0x78, 0x70, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x90, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x4f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x74, 0x6f, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x65, 0x74, 0x6f, 0x66, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x70, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x6d,
	0x6f, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x74, 0x79, 0x70, 0x6d, 0x6f,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x6d, 0x6f, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x6d, 0x6f, 0x64, 0x12, 0x31, 0x0a, 0x0c,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x61, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc8, 0x05, 0x0a, 0x09,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x68, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x68, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x30,
	0x0a, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x36, 0x0a, 0x0e, 0x63, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6f, 0x6b, 0x65, 0x64,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x11, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x56, 0x61, 0x72, 0x52, 0x10, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x4f, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x66, 0x64,
	0x77, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x66, 0x64, 0x77, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x02, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x63, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x07, 0x6f, 0x70, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x07, 0x6f, 0x70, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x6f, 0x70, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x6f,
	0x70, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x6f, 0x70, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x44, 0x69,
	0x72, 0x52, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x0e, 0x6e,
	0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x52, 0x0e, 0x6e, 0x75, 0x6c, 0x6c,
	0x73, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x43, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22,
	0xde, 0x09, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74,
	0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x64, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x6e,
	0x6f, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x12, 0x2a,
	0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f,
	0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6f, 0x6b, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x77, 0x68, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x6e, 0x6f,
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x12, 0x22, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x12, 0x2c, 0x0a, 0x09, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x14, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x62, 0x6c, 0x73, 0x70, 0x63, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x62, 0x6c, 0x73,
	0x70, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c,
	0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07,
	0x70, 0x6b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61,
	0x72, 0x52, 0x07, 0x70, 0x6b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x6b,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x66, 0x6b,
	0x5f, 0x61, 0x74, 0x74, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x70, 0x6b, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x70, 0x6b, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6b, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x6b, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6b, 0x5f, 0x75, 0x70, 0x64,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66,
	0x6b, 0x5f, 0x75, 0x70, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0f, 0x66, 0x6b, 0x5f, 0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74,
	0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x66, 0x6b, 0x5f,
	0x64, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x0d,
	0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x70, 0x66, 0x65, 0x71, 0x6f, 0x70, 0x18, 0x1b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x70, 0x66, 0x65, 0x71,
	0x6f, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6f, 0x6c, 0x64,
	0x5f, 0x70, 0x6b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x6c, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x22, 0xbc, 0x01, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x45, 0x6c, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x61, 0x72,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61, 0x72, 0x67, 0x12, 0x35, 0x0a, 0x09,
	0x64, 0x65, 0x66, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x65, 0x66, 0x45, 0x6c,
	0x65, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x65, 0x66, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xf9, 0x0b, 0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x62, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x74, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x54,
	0x45, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x72, 0x74, 0x65, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72,
	0x65, 0x6c, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x6c, 0x6f, 0x63, 0x6b, 0x6d, 0x6f, 0x64, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x2b, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x08, 0x73, 0x75, 0x62, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x62, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x63, 0x6f, 0x6c, 0x73,
	0x12, 0x34, 0x0a, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x76, 0x61, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x76, 0x61, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x6c, 0x65,
	0x66, 0x74, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x6a, 0x6f,
	0x69, 0x6e, 0x6c, 0x65, 0x66, 0x74, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x6a, 0x6f,
	0x69, 0x6e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x72, 0x69, 0x67, 0x68, 0x74, 0x63, 0x6f, 0x6c, 0x73,
	0x12, 0x3b, 0x0a, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x10, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x2c, 0x0a,
	0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66,
	0x75, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x66, 0x75, 0x6e, 0x63,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x52, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x66, 0x75, 0x6e, 0x63, 0x12, 0x32, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x74,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x74, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x74, 0x65, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x75, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x74, 0x65, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x73, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x65, 0x6c, 0x66, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a,
	0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6f,
	0x6c, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e,
	0x72, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65,
	0x6e, 0x72, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12,
	0x23, 0x0a, 0x04, 0x65, 0x72, 0x65, 0x66, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x04,
	0x65, 0x72, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x6e, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x69, 0x6e, 0x68,
	0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6c, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x73,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x61,
	0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x73, 0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0c, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18,
	0x22, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6c, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x24, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x10, 0x65, 0x78, 0x74, 0x72, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6c, 0x73, 0x12, 0x35, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x61, 0x6c, 0x73, 0x22, 0xe0, 0x02, 0x0a, 0x10,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x62, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2a, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x65, 0x78, 0x70, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x66, 0x75, 0x6e, 0x63, 0x63, 0x6f, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x63, 0x6f, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x63, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x63, 0x6f, 0x6c, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x63, 0x6f, 0x6c, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63,
	0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0e, 0x66, 0x75, 0x6e, 0x63,
	0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0e, 0x66, 0x75, 0x6e, 0x63, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x73,
	0x12, 0x3c, 0x0a, 0x11, 0x66, 0x75, 0x6e, 0x63, 0x63, 0x6f, 0x6c, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x11, 0x66, 0x75, 0x6e,
	0x63, 0x63, 0x6f, 0x6c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0a, 0x66, 0x75, 0x6e, 0x63, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x87,
	0x01, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x73, 0x6d, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x73, 0x6d, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x72, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x0f, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x57, 0x43, 0x4f, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x70, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x71, 0x75, 0x61, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x71, 0x75, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63,
	0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x53, 0x6f, 0x72, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x74,
	0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x74, 0x6c, 0x65, 0x53, 0x6f, 0x72, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x71, 0x6f, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x65, 0x71, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x6f, 0x72, 0x74, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f,
	0x72, 0x74, 0x6f, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x73, 0x5f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e, 0x75, 0x6c, 0x6c, 0x73,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x04, 0x0a, 0x0c, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72,
	0x65, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x31, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x0c, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x0a,
	0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x0d, 0x72,
	0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0c, 0x72, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x12,
	0x29, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x6e,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x12, 0x20,
	0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x61, 0x73, 0x63, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x73, 0x63,
	0x12, 0x2f, 0x0a, 0x14, 0x69, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6c,
	0x6c, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x72, 0x65, 0x66, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x72, 0x65, 0x66, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x70,
	0x69, 0x65, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x63, 0x6f, 0x70, 0x69, 0x65, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xc2, 0x01, 0x0a,
	0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x28, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x6f, 0x62, 0x6a, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x62, 0x6a,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x61,
	0x72, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x66, 0x75, 0x6e, 0x63, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x6f, 0x62, 0x6a, 0x66, 0x75, 0x6e,
	0x63, 0x61, 0x72, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x75, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x61, 0x72, 0x67, 0x73, 0x5f, 0x75, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x22, 0x4e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x76, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x76, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x76, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a,
	0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x6c,
	0x73, 0x22, 0x8d, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x57, 0x69, 0x74, 0x68, 0x41, 0x72, 0x67, 0x73, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x2e, 0x0a,
	0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x12, 0x32, 0x0a,
	0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x7e, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x69,
	0x64, 0x22, 0xb5, 0x01, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x61,
	0x72, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x07, 0x61, 0x72, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x28, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x07, 0x64, 0x65, 0x66, 0x65, 0x78, 0x70, 0x72, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x4c, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x65, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0xb7, 0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x43, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x74, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x72, 0x74, 0x69, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x39, 0x0a, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0a,
	0x77, 0x61, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x75,
	0x73, 0x68, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x22, 0xb6, 0x01, 0x0a, 0x0c,
	0x58, 0x6d, 0x6c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x35, 0x0a, 0x09,
	0x78, 0x6d, 0x6c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x58, 0x6d, 0x6c, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x78, 0x6d, 0x6c, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xa7, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6c, 0x65, 0x6d,
	0x73, 0x12, 0x31, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x01, 0x0a, 0x10, 0x4f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x77, 0x68, 0x65, 0x72, 0x65, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x43, 0x54, 0x45, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63,
	0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x32,
	0x0a, 0x14, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x64, 0x74, 0x68,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x64, 0x74, 0x68, 0x5f, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x71, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x03, 0x0a,
	0x0e, 0x43, 0x54, 0x45, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x0e, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6c, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3a, 0x0a, 0x10, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x10, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3e, 0x0a, 0x12, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x79,
	0x63, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70,
	0x6d, 0x6f, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x79, 0x63, 0x6c, 0x65,
	0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x65, 0x6f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6e, 0x65, 0x6f,
	0x70, 0x22, 0x88, 0x05, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x74, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x0d, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x63, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x63, 0x6f, 0x6c,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x74, 0x65, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x54, 0x45, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x0f, 0x63, 0x74, 0x65, 0x6d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x74, 0x65,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x74, 0x65,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x54, 0x45, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x63, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x54, 0x45, 0x43, 0x79, 0x63, 0x6c, 0x65,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x0c, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x63, 0x6c,
	0x61, 0x75, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x74, 0x65, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x74, 0x65, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x69, 0x76, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x74, 0x65, 0x72, 0x65, 0x66, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x74, 0x65, 0x72, 0x65,
	0x66, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x74, 0x65, 0x63, 0x6f, 0x6c,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x74, 0x65,
	0x63, 0x6f, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x63, 0x74, 0x65, 0x63,
	0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63,
	0x74, 0x65, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0d, 0x63, 0x74,
	0x65, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0d, 0x63, 0x74, 0x65, 0x63, 0x6f, 0x6c, 0x74, 0x79, 0x70, 0x6d, 0x6f, 0x64, 0x73,
	0x12, 0x3a, 0x0a, 0x10, 0x63, 0x74, 0x65, 0x63, 0x6f, 0x6c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x63, 0x74, 0x65, 0x63,
	0x6f, 0x6c, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9e, 0x02, 0x0a,
	0x0f, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x68, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x43, 0x6d, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x34, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x08, 0x6f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x76, 0x0a,
	0x08, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x6f, 0x6c,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x6f, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x6f, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x69, 0x73, 0x4e, 0x65, 0x77, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6c,
	0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2c, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x70, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6f, 0x70, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x78,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2f, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x02, 0x0a, 0x12, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x75, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x64,
	0x61, 0x74, 0x75, 0x6d, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x75, 0x70, 0x70, 0x65, 0x72, 0x64, 0x61,
	0x74, 0x75, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x22, 0x7c, 0x0a, 0x0e, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x76, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x76, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x73, 0x22,
	0xbe, 0x01, 0x0a, 0x12, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x53, 0x70, 0x65, 0x63, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6f, 0x62, 0x6a,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x67, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x62, 0x6a, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x75,
	0x62, 0x6f, 0x62, 0x6a, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08,
	0x70, 0x75, 0x62, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x70, 0x75, 0x62, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x9f, 0x01, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x61, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0c, 0x77, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x77, 0x68, 0x65,
	0x72, 0x65, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x67, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x5f, 0x6f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6c, 0x61, 0x6e, 0x67,
	0x4f, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x73, 0x5f, 0x74,
	0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6c, 0x61,
	0x6e, 0x67, 0x49, 0x73, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x74, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x74, 0x6f,
	0x6d, 0x69, 0x63, 0x22, 0x25, 0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x22, 0x94, 0x01, 0x0a, 0x09, 0x53,
	0x63, 0x61, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64,
	0x12, 0x25, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x38, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x70, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x4b, 0x69, 0x6e,
	0x64, 0x2a, 0x7f, 0x0a, 0x0e, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x56,
	0x45, 0x52, 0x52, 0x49, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x03, 0x2a, 0x9b, 0x01, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x51, 0x53, 0x52, 0x43, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x53, 0x52, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x52,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x53, 0x52, 0x43, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x45,
	0x41, 0x44, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x51, 0x53, 0x52,
	0x43, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x45, 0x41, 0x44, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x53, 0x52, 0x43, 0x5f, 0x4e, 0x4f,
	0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x45, 0x41, 0x44, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x05,
	0x2a, 0x6d, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x44, 0x69, 0x72, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x44, 0x49, 0x52, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x52, 0x54,
	0x42, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x4f, 0x52, 0x54, 0x42, 0x59, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x4f, 0x52, 0x54, 0x42, 0x59, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x4f, 0x52, 0x54, 0x42, 0x59, 0x5f, 0x55, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x2a,
	0x73, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x4f, 0x52, 0x54, 0x42, 0x59, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f, 0x52, 0x54, 0x42, 0x59, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x4f, 0x52, 0x54, 0x42, 0x59, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x10, 0x03, 0x2a, 0x7e, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x54, 0x5f, 0x51, 0x55, 0x41,
	0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54,
	0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x45, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x54, 0x5f, 0x51,
	0x55, 0x41, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e,
	0x43, 0x54, 0x10, 0x03, 0x2a, 0xb6, 0x02, 0x0a, 0x0b, 0x41, 0x5f, 0x45, 0x78, 0x70, 0x72, 0x5f,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x4f, 0x50, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49,
	0x4e, 0x43, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x10, 0x05, 0x12, 0x10, 0x0a,
	0x0c, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x49, 0x46, 0x10, 0x06, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x08, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x09, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x53, 0x49, 0x4d, 0x49, 0x4c, 0x41, 0x52, 0x10,
	0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45,
	0x45, 0x4e, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x45, 0x58, 0x50, 0x52, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x59, 0x4d,
	0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x53, 0x59, 0x4d, 0x10, 0x0e, 0x2a, 0xa8, 0x01,
	0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x4f, 0x4c, 0x45, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x43, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x45,
	0x53, 0x50, 0x45, 0x43, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x50, 0x45, 0x43, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x05, 0x2a, 0xf4, 0x02, 0x0a, 0x0f, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x1b,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49,
	0x4b, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49,
	0x4b, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54,
	0x53, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x53, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x45,
	0x53, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54,
	0x49, 0x43, 0x53, 0x10, 0x08, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x0a, 0x2a,
	0x76, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x45, 0x6c, 0x65, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x46, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x44, 0x45, 0x46, 0x45, 0x4c, 0x45, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x46, 0x45, 0x4c, 0x45, 0x4d, 0x5f, 0x53,
	0x45, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x46, 0x45, 0x4c, 0x45, 0x4d, 0x5f,
	0x41, 0x44, 0x44, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x46, 0x45, 0x4c, 0x45, 0x4d,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x04, 0x2a, 0xac, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x55, 0x4d, 0x5f, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a,
	0x1e, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x55, 0x4d, 0x5f, 0x4d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x55, 0x4d, 0x5f, 0x4d, 0x41, 0x58, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x03, 0x2a, 0xbd, 0x01, 0x0a, 0x07, 0x52, 0x54, 0x45, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x54, 0x45, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x54, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x54, 0x45, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x54, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x46, 0x55, 0x4e, 0x43, 0x10, 0x05,
	0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x54, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x10, 0x06,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x54, 0x45, 0x5f, 0x43, 0x54, 0x45, 0x10, 0x07, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x54, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x53,
	0x54, 0x4f, 0x52, 0x45, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x54, 0x45, 0x5f, 0x52, 0x45,
	0x53, 0x55, 0x4c, 0x54, 0x10, 0x09, 0x2a, 0xc4, 0x01, 0x0a, 0x07, 0x57, 0x43, 0x4f, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x43, 0x4f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x43, 0x4f,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x57, 0x43, 0x4f, 0x5f, 0x52, 0x4c, 0x53, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x43, 0x4f, 0x5f, 0x52,
	0x4c, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x43, 0x4f, 0x5f, 0x52, 0x4c, 0x53, 0x5f, 0x43, 0x4f, 0x4e,
	0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x1e, 0x0a,
	0x1a, 0x57, 0x43, 0x4f, 0x5f, 0x52, 0x4c, 0x53, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x57, 0x43, 0x4f, 0x5f, 0x52, 0x4c, 0x53, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x06, 0x2a, 0xaa, 0x01,
	0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45,
	0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53,
	0x45, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x55, 0x42,
	0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x5f,
	0x53, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x53, 0x10, 0x05, 0x2a, 0x7c, 0x0a, 0x0e, 0x43, 0x54,
	0x45, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x43, 0x54, 0x45, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x54,
	0x45, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x54, 0x45, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x43, 0x54, 0x45, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x4e, 0x65, 0x76, 0x65, 0x72, 0x10, 0x03, 0x2a, 0x73, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x54, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x5f, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x5f, 0x55,
	0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x45, 0x54, 0x4f, 0x50, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x10, 0x04, 0x2a, 0x99, 0x09,
	0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x41, 0x4d, 0x50, 0x52, 0x4f, 0x43, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x53, 0x54,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x43, 0x4c, 0x10, 0x0c, 0x12, 0x11,
	0x0a, 0x0d, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x10,
	0x0d, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x4f, 0x4d, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x44, 0x57, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x4f,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x10, 0x12, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x13,
	0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x17, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d,
	0x41, 0x54, 0x56, 0x49, 0x45, 0x57, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x4f, 0x50, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x19, 0x12, 0x13, 0x0a, 0x0f,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x10,
	0x1a, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x59, 0x10, 0x1b, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x4c, 0x10, 0x1c,
	0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x10, 0x1d, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x1f, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x20, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x55,
	0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x10, 0x21, 0x12,
	0x0f, 0x0a, 0x0b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x22,
	0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x49,
	0x4e, 0x45, 0x10, 0x23, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52,
	0x55, 0x4c, 0x45, 0x10, 0x24, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x25, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x26, 0x12, 0x17, 0x0a,
	0x13, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x27, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x45, 0x58, 0x54, 0x10, 0x28,
	0x12, 0x18, 0x0a, 0x14, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x10, 0x29, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x2a, 0x12, 0x15, 0x0a, 0x11,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x10, 0x2b, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x2c, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x2d, 0x12, 0x1a, 0x0a,
	0x16, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x53, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2e, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x54, 0x53, 0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59,
	0x10, 0x2f, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x53, 0x50,
	0x41, 0x52, 0x53, 0x45, 0x52, 0x10, 0x30, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x5f, 0x54, 0x53, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x31, 0x12, 0x0f,
	0x0a, 0x0b, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x32, 0x12,
	0x17, 0x0a, 0x13, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x33, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x10, 0x34, 0x2a, 0x50, 0x0a, 0x0c, 0x44, 0x72, 0x6f,
	0x70, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x52,
	0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x43, 0x41, 0x53, 0x43, 0x41, 0x44, 0x45, 0x10, 0x02, 0x2a, 0x86, 0x0d, 0x0a, 0x0e,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x41, 0x54, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10, 0x01,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x54, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x54, 0x5f,
	0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x10,
	0x03, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x54, 0x5f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x54, 0x5f, 0x43, 0x6f,
	0x6f, 0x6b, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x4e, 0x6f,
	0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x54, 0x5f, 0x53, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x54,
	0x5f, 0x44, 0x72, 0x6f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10,
	0x08, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x54, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x74,
	0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x54, 0x5f, 0x53, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x54, 0x5f, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x0b, 0x12,
	0x13, 0x0a, 0x0f, 0x41, 0x54, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x54, 0x5f, 0x53, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x54, 0x5f, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x0e, 0x12, 0x11,
	0x0a, 0x0d, 0x41, 0x54, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x10,
	0x0f, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x54, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x10, 0x10, 0x12, 0x0f, 0x0a, 0x0b, 0x41,
	0x54, 0x5f, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d,
	0x41, 0x54, 0x5f, 0x52, 0x65, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x12, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x54, 0x5f, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x54, 0x5f, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65,
	0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x54, 0x5f, 0x52, 0x65, 0x41, 0x64, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x10, 0x15, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x54,
	0x5f, 0x52, 0x65, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x10, 0x16, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x54, 0x5f, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x10, 0x17,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x10, 0x18, 0x12, 0x20, 0x0a, 0x1c, 0x41,
	0x54, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x10, 0x19, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x54, 0x5f, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x54, 0x5f, 0x44,
	0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x10, 0x1b, 0x12,
	0x1c, 0x0a, 0x18, 0x41, 0x54, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x65, 0x10, 0x1c, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x54, 0x5f, 0x52, 0x65, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x10, 0x1d, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x54, 0x5f, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x1e, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x54,
	0x5f, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x1f, 0x12, 0x12, 0x0a, 0x0e,
	0x41, 0x54, 0x5f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x10, 0x20,
	0x12, 0x10, 0x0a, 0x0c, 0x41, 0x54, 0x5f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x6e,
	0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x54, 0x5f, 0x53, 0x65, 0x74,
	0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x10, 0x23, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f, 0x53,
	0x65, 0x74, 0x55, 0x6e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x64, 0x10, 0x24, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x54, 0x5f, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x69, 0x64, 0x73, 0x10, 0x25, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x54, 0x5f, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x10, 0x26, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x54, 0x5f, 0x53, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x10, 0x27, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x54, 0x5f, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10,
	0x28, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x54, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x29, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x54, 0x5f,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x10, 0x2a, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x54, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x72, 0x69, 0x67, 0x10, 0x2b, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x54, 0x5f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x54, 0x72, 0x69, 0x67, 0x10, 0x2c, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x54, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x54, 0x72, 0x69, 0x67, 0x10, 0x2d, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x10, 0x2e, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x54, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x41, 0x6c,
	0x6c, 0x10, 0x2f, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x54, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x41, 0x6c, 0x6c, 0x10, 0x30, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x54,
	0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x69, 0x67, 0x55, 0x73, 0x65, 0x72, 0x10,
	0x31, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x54, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x72, 0x69, 0x67, 0x55, 0x73, 0x65, 0x72, 0x10, 0x32, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x54, 0x5f,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x10, 0x33, 0x12, 0x17, 0x0a, 0x13,
	0x41, 0x54, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x52,
	0x75, 0x6c, 0x65, 0x10, 0x34, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x54, 0x5f, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x75, 0x6c, 0x65, 0x10, 0x35, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x10, 0x36, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x54, 0x5f, 0x41, 0x64, 0x64, 0x49, 0x6e, 0x68,
	0x65, 0x72, 0x69, 0x74, 0x10, 0x37, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f, 0x44, 0x72, 0x6f,
	0x70, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x10, 0x38, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54,
	0x5f, 0x41, 0x64, 0x64, 0x4f, 0x66, 0x10, 0x39, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x54, 0x5f, 0x44,
	0x72, 0x6f, 0x70, 0x4f, 0x66, 0x10, 0x3a, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x54, 0x5f, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x3b, 0x12,
	0x18, 0x0a, 0x14, 0x41, 0x54, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x10, 0x3c, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x54, 0x5f,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x10, 0x3d, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x54, 0x5f, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x52, 0x6f, 0x77, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x10, 0x3e, 0x12, 0x19, 0x0a,
	0x15, 0x41, 0x54, 0x5f, 0x4e, 0x6f, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x6f, 0x77, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x10, 0x3f, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x54, 0x5f, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x40, 0x12,
	0x16, 0x0a, 0x12, 0x41, 0x54, 0x5f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x41, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x54, 0x5f, 0x44, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x42, 0x12,
	0x1e, 0x0a, 0x1a, 0x41, 0x54, 0x5f, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x10, 0x43, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f, 0x41, 0x64, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x10, 0x44, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x54, 0x5f, 0x53, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x45, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x54, 0x5f, 0x44, 0x72,
	0x6f, 0x70, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x46, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x54, 0x5f, 0x52, 0x65, 0x41, 0x64, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x10, 0x47, 0x2a, 0x80, 0x01, 0x0a, 0x0f, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x47, 0x52, 0x41, 0x4e,
	0x54, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x43, 0x4c,
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x41,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x02, 0x12, 0x17,
	0x0a, 0x13, 0x41, 0x43, 0x4c, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x03, 0x2a, 0xa4, 0x01, 0x0a, 0x0f, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x1b, 0x56,
	0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x56, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x56, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x54, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x41, 0x52,
	0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x56, 0x41, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x56,
	0x41, 0x52, 0x5f, 0x52, 0x45, 0x53, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x06, 0x2a, 0xdf,
	0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4e,
	0x53, 0x54, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x5f, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59,
	0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x5f, 0x55, 0x4e, 0x49,
	0x51, 0x55, 0x45, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x5f,
	0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x10, 0x0a, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44,
	0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44,
	0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x52,
	0x52, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x5f,
	0x41, 0x54, 0x54, 0x52, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10, 0x0e,
	0x2a, 0x9c, 0x01, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x24,
	0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x53,
	0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x44, 0x57, 0x5f, 0x49, 0x4d,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x41, 0x4c, 0x4c, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x44, 0x57, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x4f, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x44, 0x57, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x10, 0x03, 0x2a,
	0x66, 0x0a, 0x0c, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x74, 0x6d, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4c, 0x45, 0x53, 0x54, 0x4d, 0x54, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x2a, 0x7e, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x45, 0x54,
	0x43, 0x48, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x45, 0x54, 0x43,
	0x48, 0x5f, 0x46, 0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x45, 0x54, 0x43, 0x48, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54,
	0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x4c,
	0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x2a, 0xc2, 0x01, 0x0a, 0x15, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x55, 0x4e, 0x43,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46,
	0x55, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x49, 0x4e,
	0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x44, 0x49, 0x43, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x06, 0x2a, 0xbe, 0x02, 0x0a,
	0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x6d, 0x74,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x5f, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x53,
	0x54, 0x4d, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42,
	0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x53,
	0x54, 0x4d, 0x54, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x5f, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x54,
	0x4f, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x4d,
	0x54, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54,
	0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x20, 0x0a, 0x1c, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x4d, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41,
	0x43, 0x4b, 0x5f, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x10, 0x0a, 0x2a, 0x7a, 0x0a,
	0x0f, 0x56, 0x69, 0x65, 0x77, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4f, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x41, 0x53, 0x43, 0x41, 0x44, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x0b, 0x44, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x53, 0x43,
	0x41, 0x52, 0x44, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x10,
	0x04, 0x2a, 0xbd, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45,
	0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x44,
	0x45, 0x58, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x45, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10,
	0x05, 0x2a, 0xef, 0x01, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x53, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x53, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x2a, 0x0a, 0x26, 0x41, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x54, 0x53, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x41, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x53, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x5f, 0x44, 0x49, 0x43, 0x54, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x4c, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x53, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x5f, 0x44, 0x49, 0x43, 0x54, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x53, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e,
	0x47, 0x10, 0x05, 0x2a, 0xca, 0x01, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x53, 0x70, 0x65, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27,
	0x0a, 0x23, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x42,
	0x4a, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4f, 0x42, 0x4a, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x4f, 0x42, 0x4a, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x4d, 0x41, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4f, 0x42, 0x4a, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x5f,
	0x49, 0x4e, 0x5f, 0x43, 0x55, 0x52, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x03, 0x12,
	0x1f, 0x0a, 0x1b, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x4f, 0x42,
	0x4a, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x2a, 0x7a, 0x0a, 0x16, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x4c,
	0x54, 0x45, 0x52, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x5f, 0x41, 0x64, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x50, 0x5f, 0x44, 0x72, 0x6f, 0x70,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x5f,
	0x53, 0x65, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x10, 0x03, 0x2a, 0xd7, 0x02, 0x0a,
	0x15, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a,
	0x1d, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x26, 0x0a, 0x22, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41,
	0x44, 0x44, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x12, 0x27, 0x0a, 0x23, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x4b, 0x49, 0x50, 0x10, 0x08, 0x2a, 0x8c, 0x01, 0x0a, 0x0e, 0x4f, 0x6e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4e, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x4f, 0x50, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x4f, 0x4e, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x5f, 0x52, 0x4f, 0x57, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x4e, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x57, 0x53,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x4e, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x10, 0x04, 0x2a, 0x6f, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x53, 0x55, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49,
	0x45, 0x58, 0x50, 0x52, 0x10, 0x04, 0x2a, 0x8e, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x65, 0x72, 0x63,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f,
	0x45, 0x52, 0x43, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f,
	0x45, 0x52, 0x43, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x45, 0x52, 0x43, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f,
	0x45, 0x52, 0x43, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x45, 0x52, 0x43, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x04, 0x2a, 0x90, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x65, 0x72,
	0x63, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x45, 0x52,
	0x43, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x45, 0x52, 0x43, 0x45, 0x5f,
	0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x4f, 0x45, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43,
	0x49, 0x54, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x45,
	0x52, 0x43, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x43, 0x41, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x45, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x51,
	0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x41, 0x58, 0x10, 0x04, 0x2a, 0x55, 0x0a, 0x0c, 0x42, 0x6f,
	0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f,
	0x4f, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x44, 0x5f,
	0x45, 0x58, 0x50, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x52, 0x5f, 0x45, 0x58, 0x50,
	0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x10,
	0x03, 0x2a, 0xc5, 0x01, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x55, 0x42, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x4c, 0x49, 0x4e, 0x4b,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x55, 0x42, 0x4c, 0x49, 0x4e,
	0x4b, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4e, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x57, 0x43, 0x4f, 0x4d, 0x50, 0x41,
	0x52, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x58, 0x50, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x4c,
	0x49, 0x4e, 0x4b, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x53,
	0x55, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x54, 0x45, 0x5f,
	0x53, 0x55, 0x42, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x08, 0x2a, 0xa2, 0x01, 0x0a, 0x0e, 0x52, 0x6f,
	0x77, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a,
	0x52, 0x4f, 0x57, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x52, 0x4f, 0x57, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x54, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x57, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x57, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45,
	0x5f, 0x45, 0x51, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x57, 0x43, 0x4f, 0x4d, 0x50,
	0x41, 0x52, 0x45, 0x5f, 0x47, 0x45, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x57, 0x43,
	0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x47, 0x54, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x4f, 0x57, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4e, 0x45, 0x10, 0x06, 0x2a, 0x43,
	0x0a, 0x08, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4f, 0x70, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x49,
	0x4e, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x53,
	0x54, 0x10, 0x02, 0x2a, 0xad, 0x03, 0x0a, 0x12, 0x53, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x51,
	0x4c, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x50, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x56, 0x46, 0x4f, 0x50, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x56, 0x46, 0x4f, 0x50, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x56, 0x46, 0x4f, 0x50, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x56, 0x46, 0x4f,
	0x50, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x56, 0x46, 0x4f, 0x50, 0x5f, 0x43,
	0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x5f, 0x4e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x56, 0x46, 0x4f, 0x50, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x56, 0x46,
	0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x10, 0x07,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x56, 0x46, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x56,
	0x46, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x5f, 0x4e, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x56, 0x46, 0x4f, 0x50, 0x5f,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x0a, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x56, 0x46, 0x4f, 0x50, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x56, 0x46, 0x4f, 0x50, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x56, 0x46, 0x4f, 0x50, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x56, 0x46, 0x4f, 0x50, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x56, 0x46,
	0x4f, 0x50, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x41, 0x10, 0x0f, 0x2a, 0xb2, 0x01, 0x0a, 0x09, 0x58, 0x6d, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x4f,
	0x70, 0x12, 0x19, 0x0a, 0x15, 0x58, 0x4d, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x5f, 0x4f, 0x50,
	0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x49, 0x53, 0x5f, 0x58, 0x4d, 0x4c, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x53, 0x5f, 0x58, 0x4d, 0x4c, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x53, 0x5f, 0x58, 0x4d, 0x4c, 0x46, 0x4f, 0x52, 0x45, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x5f, 0x58, 0x4d, 0x4c, 0x50, 0x41, 0x52,
	0x53, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x53, 0x5f, 0x58, 0x4d, 0x4c, 0x50, 0x49,
	0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x53, 0x5f, 0x58, 0x4d, 0x4c, 0x52, 0x4f, 0x4f, 0x54,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x53, 0x5f, 0x58, 0x4d, 0x4c, 0x53, 0x45, 0x52, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x5f, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x2a, 0x5d, 0x0a, 0x0d, 0x58, 0x6d, 0x6c, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x58, 0x4d, 0x4c,
	0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x58, 0x4d, 0x4c, 0x4f,
	0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x58, 0x4d, 0x4c, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x2a, 0x4a, 0x0a, 0x0c, 0x4e, 0x75, 0x6c, 0x6c, 0x54,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x55, 0x4c, 0x4c, 0x5f,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x02, 0x2a, 0x8e, 0x01, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4f, 0x4f, 0x4c, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x53, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x53, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x04,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x06, 0x2a, 0xa3, 0x01, 0x0a, 0x07, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x43, 0x4d, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4d, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d, 0x44,
	0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d, 0x44,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d, 0x44,
	0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d, 0x44,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4d, 0x44,
	0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4d, 0x44, 0x5f,
	0x55, 0x54, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4d, 0x44,
	0x5f, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x2a, 0xad, 0x01, 0x0a, 0x08, 0x4a,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4a, 0x4f, 0x49, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x4d, 0x49, 0x10, 0x05, 0x12, 0x0d, 0x0a,
	0x09, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11,
	0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x51,
	0x55, 0x45, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x08, 0x2a, 0x67, 0x0a, 0x0b, 0x41, 0x67,
	0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x47, 0x47,
	0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x47, 0x47, 0x5f, 0x50, 0x4c, 0x41,
	0x49, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x47, 0x47, 0x5f, 0x53, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x47, 0x47, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x47, 0x47, 0x5f, 0x4d, 0x49, 0x58, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0x72, 0x0a, 0x08, 0x41, 0x67, 0x67, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12,
	0x17, 0x0a, 0x13, 0x41, 0x47, 0x47, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x47, 0x47, 0x53,
	0x50, 0x4c, 0x49, 0x54, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x41, 0x47, 0x47, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x47,
	0x47, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x44, 0x45, 0x53,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x2a, 0x86, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x43, 0x6d, 0x64, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x43,
	0x4d, 0x44, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x43, 0x4d, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x53, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x43,
	0x4d, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x4c,
	0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x43, 0x4d, 0x44, 0x5f, 0x45,
	0x58, 0x43, 0x45, 0x50, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x54, 0x4f, 0x50,
	0x43, 0x4d, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x04,
	0x2a, 0x52, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x52, 0x41,
	0x54, 0x45, 0x47, 0x59, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x5f, 0x53, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x54, 0x4f, 0x50, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x45, 0x44, 0x10, 0x02, 0x2a, 0x78, 0x0a, 0x10, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x4e, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x4e,
	0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x4f, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x4e, 0x4f,
	0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x77,
	0x0a, 0x0b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x16, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x54, 0x49, 0x45, 0x53, 0x10, 0x03, 0x2a, 0x98, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x6b,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x22,
	0x0a, 0x1e, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x54,
	0x52, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x43, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x43, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x4b, 0x45, 0x59, 0x53, 0x48,
	0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x43, 0x53, 0x5f, 0x46, 0x4f, 0x52,
	0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x43, 0x53, 0x5f, 0x46,
	0x4f, 0x52, 0x4e, 0x4f, 0x4b, 0x45, 0x59, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x43, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x05, 0x2a, 0x68, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x57, 0x61, 0x69, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x6f, 0x63, 0x6b, 0x57,
	0x61, 0x69, 0x74, 0x53, 0x6b, 0x69, 0x70, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x6f, 0x63,
	0x6b, 0x57, 0x61, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x2a, 0x8e, 0x01, 0x0a,
	0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x19, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x6f, 0x63, 0x6b,
	0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73,
	0x69, 0x76, 0x65, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x6b, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x10, 0x04, 0x2a, 0x7d, 0x0a,
	0x0b, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x4f, 0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f,
	0x52, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45,
	0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x4b, 0x45, 0x59,
	0x57, 0x4f, 0x52, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x04, 0x2a, 0xe1, 0x37, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x55, 0x4c, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x5f, 0x33, 0x37, 0x10, 0x25, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x5f, 0x34, 0x30, 0x10, 0x28, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x53, 0x43, 0x49, 0x49, 0x5f, 0x34, 0x31, 0x10, 0x29, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43,
	0x49, 0x49, 0x5f, 0x34, 0x32, 0x10, 0x2a, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43, 0x49, 0x49,
	0x5f, 0x34, 0x33, 0x10, 0x2b, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x5f, 0x34,
	0x34, 0x10, 0x2c, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x5f, 0x34, 0x35, 0x10,
	0x2d, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x5f, 0x34, 0x36, 0x10, 0x2e, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x5f, 0x34, 0x37, 0x10, 0x2f, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x5f, 0x35, 0x38, 0x10, 0x3a, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x53, 0x43, 0x49, 0x49, 0x5f, 0x35, 0x39, 0x10, 0x3b, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43,
	0x49, 0x49, 0x5f, 0x36, 0x30, 0x10, 0x3c, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43, 0x49, 0x49,
	0x5f, 0x36, 0x31, 0x10, 0x3d, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x5f, 0x36,
	0x32, 0x10, 0x3e, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x5f, 0x36, 0x33, 0x10,
	0x3f, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x5f, 0x39, 0x31, 0x10, 0x5b, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x5f, 0x39, 0x32, 0x10, 0x5c, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x53, 0x43, 0x49, 0x49, 0x5f, 0x39, 0x33, 0x10, 0x5d, 0x12, 0x0c, 0x0a, 0x08, 0x41,
	0x53, 0x43, 0x49, 0x49, 0x5f, 0x39, 0x34, 0x10, 0x5e, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x10, 0x82, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x55, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x10,
	0x83, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x46, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x10, 0x84, 0x02, 0x12,
	0x0b, 0x0a, 0x06, 0x53, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x10, 0x85, 0x02, 0x12, 0x0c, 0x0a, 0x07,
	0x55, 0x53, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x10, 0x86, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x42, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x10, 0x87, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x58, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x10, 0x88, 0x02, 0x12, 0x07, 0x0a, 0x02, 0x4f, 0x70, 0x10, 0x89, 0x02, 0x12, 0x0b, 0x0a,
	0x06, 0x49, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x10, 0x8a, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x10, 0x8b, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x43, 0x41,
	0x53, 0x54, 0x10, 0x8c, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x44, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x54,
	0x10, 0x8d, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x4f, 0x4c, 0x4f, 0x4e, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x53, 0x10, 0x8e, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53,
	0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x8f, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x90, 0x02, 0x12, 0x13, 0x0a,
	0x0e, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10,
	0x91, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53,
	0x10, 0x92, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x51, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x93, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x94, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x5f, 0x50,
	0x10, 0x95, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x5f,
	0x50, 0x10, 0x96, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x97,
	0x02, 0x12, 0x0b, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x98, 0x02, 0x12, 0x0a,
	0x0a, 0x05, 0x41, 0x44, 0x44, 0x5f, 0x50, 0x10, 0x99, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x10, 0x9a, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10,
	0x9b, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10,
	0x9c, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x9d, 0x02, 0x12, 0x09, 0x0a, 0x04,
	0x41, 0x4c, 0x53, 0x4f, 0x10, 0x9e, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x41, 0x4c, 0x54, 0x45, 0x52,
	0x10, 0x9f, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x10, 0xa0, 0x02,
	0x12, 0x0c, 0x0a, 0x07, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x45, 0x10, 0xa1, 0x02, 0x12, 0x0c,
	0x0a, 0x07, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x45, 0x10, 0xa2, 0x02, 0x12, 0x08, 0x0a, 0x03,
	0x41, 0x4e, 0x44, 0x10, 0xa3, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0xa4, 0x02,
	0x12, 0x0a, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0xa5, 0x02, 0x12, 0x07, 0x0a, 0x02,
	0x41, 0x53, 0x10, 0xa6, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0xa7, 0x02, 0x12,
	0x0f, 0x0a, 0x0a, 0x41, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0xa8, 0x02,
	0x12, 0x0e, 0x0a, 0x09, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa9, 0x02,
	0x12, 0x0f, 0x0a, 0x0a, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xaa,
	0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x41, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10,
	0xab, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x41, 0x54, 0x4f, 0x4d, 0x49, 0x43, 0x10, 0xac, 0x02, 0x12,
	0x07, 0x0a, 0x02, 0x41, 0x54, 0x10, 0xad, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x10, 0xae, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x45, 0x10, 0xaf, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb0, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x42, 0x41, 0x43,
	0x4b, 0x57, 0x41, 0x52, 0x44, 0x10, 0xb1, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x42, 0x45, 0x46, 0x4f,
	0x52, 0x45, 0x10, 0xb2, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x5f, 0x50,
	0x10, 0xb3, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x10, 0xb4,
	0x02, 0x12, 0x0b, 0x0a, 0x06, 0x42, 0x49, 0x47, 0x49, 0x4e, 0x54, 0x10, 0xb5, 0x02, 0x12, 0x0b,
	0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0xb6, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x42,
	0x49, 0x54, 0x10, 0xb7, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e,
	0x5f, 0x50, 0x10, 0xb8, 0x02, 0x12, 0x09, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0xb9, 0x02,
	0x12, 0x0c, 0x0a, 0x07, 0x42, 0x52, 0x45, 0x41, 0x44, 0x54, 0x48, 0x10, 0xba, 0x02, 0x12, 0x07,
	0x0a, 0x02, 0x42, 0x59, 0x10, 0xbb, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x43, 0x41, 0x43, 0x48, 0x45,
	0x10, 0xbc, 0x02, 0x12, 0x09, 0x0a, 0x04, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0xbd, 0x02, 0x12, 0x0b,
	0x0a, 0x06, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0xbe, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x43,
	0x41, 0x53, 0x43, 0x41, 0x44, 0x45, 0x10, 0xbf, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x41, 0x53,
	0x43, 0x41, 0x44, 0x45, 0x44, 0x10, 0xc0, 0x02, 0x12, 0x09, 0x0a, 0x04, 0x43, 0x41, 0x53, 0x45,
	0x10, 0xc1, 0x02, 0x12, 0x09, 0x0a, 0x04, 0x43, 0x41, 0x53, 0x54, 0x10, 0xc2, 0x02, 0x12, 0x0e,
	0x0a, 0x09, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x50, 0x10, 0xc3, 0x02, 0x12, 0x0a,
	0x0a, 0x05, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x10, 0xc4, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x48,
	0x41, 0x52, 0x5f, 0x50, 0x10, 0xc5, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x48, 0x41, 0x52, 0x41,
	0x43, 0x54, 0x45, 0x52, 0x10, 0xc6, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x48, 0x41, 0x52, 0x41,
	0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0xc7, 0x02, 0x12, 0x0a, 0x0a,
	0x05, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0xc8, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0xc9, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x10, 0xca, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10,
	0xcb, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0xcc, 0x02,
	0x12, 0x0d, 0x0a, 0x08, 0x43, 0x4f, 0x41, 0x4c, 0x45, 0x53, 0x43, 0x45, 0x10, 0xcd, 0x02, 0x12,
	0x0c, 0x0a, 0x07, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x45, 0x10, 0xce, 0x02, 0x12, 0x0e, 0x0a,
	0x09, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xcf, 0x02, 0x12, 0x0b, 0x0a,
	0x06, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0xd0, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x53, 0x10, 0xd1, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0xd2, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e,
	0x54, 0x53, 0x10, 0xd3, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10,
	0xd4, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10,
	0xd5, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0xd6, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x4c, 0x59, 0x10, 0xd7, 0x02, 0x12, 0x12, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x47, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xd8, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x43,
	0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0xd9, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xda, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x10, 0xdb, 0x02, 0x12, 0x10, 0x0a, 0x0b,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x53, 0x10, 0xdc, 0x02, 0x12, 0x0e,
	0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x10, 0xdd, 0x02, 0x12, 0x0f,
	0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x5f, 0x50, 0x10, 0xde, 0x02, 0x12,
	0x11, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x10,
	0xdf, 0x02, 0x12, 0x09, 0x0a, 0x04, 0x43, 0x4f, 0x50, 0x59, 0x10, 0xe0, 0x02, 0x12, 0x09, 0x0a,
	0x04, 0x43, 0x4f, 0x53, 0x54, 0x10, 0xe1, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x10, 0xe2, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x10, 0xe3,
	0x02, 0x12, 0x08, 0x0a, 0x03, 0x43, 0x53, 0x56, 0x10, 0xe4, 0x02, 0x12, 0x09, 0x0a, 0x04, 0x43,
	0x55, 0x42, 0x45, 0x10, 0xe5, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x10, 0xe6, 0x02, 0x12, 0x14, 0x0a, 0x0f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0xe7, 0x02, 0x12, 0x11, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0xe8, 0x02, 0x12,
	0x11, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x10,
	0xe9, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x43,
	0x48, 0x45, 0x4d, 0x41, 0x10, 0xea, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xeb, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10,
	0xec, 0x02, 0x12, 0x11, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0xed, 0x02, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x55, 0x52, 0x53, 0x4f, 0x52, 0x10,
	0xee, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x43, 0x59, 0x43, 0x4c, 0x45, 0x10, 0xef, 0x02, 0x12, 0x0b,
	0x0a, 0x06, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x10, 0xf0, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0xf1, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x44, 0x41,
	0x59, 0x5f, 0x50, 0x10, 0xf2, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x44, 0x45, 0x41, 0x4c, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x45, 0x10, 0xf3, 0x02, 0x12, 0x08, 0x0a, 0x03, 0x44, 0x45, 0x43, 0x10, 0xf4,
	0x02, 0x12, 0x0e, 0x0a, 0x09, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x50, 0x10, 0xf5,
	0x02, 0x12, 0x0c, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x10, 0xf6, 0x02, 0x12,
	0x0c, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0xf7, 0x02, 0x12, 0x0d, 0x0a,
	0x08, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x53, 0x10, 0xf8, 0x02, 0x12, 0x0f, 0x0a, 0x0a,
	0x44, 0x45, 0x46, 0x45, 0x52, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xf9, 0x02, 0x12, 0x0d, 0x0a,
	0x08, 0x44, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0xfa, 0x02, 0x12, 0x0c, 0x0a, 0x07,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x10, 0xfb, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x50, 0x10, 0xfc, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x44, 0x45, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x45, 0x52, 0x10, 0xfd, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x44, 0x45, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x45, 0x52, 0x53, 0x10, 0xfe, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x44, 0x45,
	0x50, 0x45, 0x4e, 0x44, 0x53, 0x10, 0xff, 0x02, 0x12, 0x0a, 0x0a, 0x05, 0x44, 0x45, 0x50, 0x54,
	0x48, 0x10, 0x80, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x44, 0x45, 0x53, 0x43, 0x10, 0x81, 0x03, 0x12,
	0x0b, 0x0a, 0x06, 0x44, 0x45, 0x54, 0x41, 0x43, 0x48, 0x10, 0x82, 0x03, 0x12, 0x0f, 0x0a, 0x0a,
	0x44, 0x49, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x83, 0x03, 0x12, 0x0e, 0x0a,
	0x09, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x10, 0x84, 0x03, 0x12, 0x0c, 0x0a,
	0x07, 0x44, 0x49, 0x53, 0x43, 0x41, 0x52, 0x44, 0x10, 0x85, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x44,
	0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x10, 0x86, 0x03, 0x12, 0x07, 0x0a, 0x02, 0x44, 0x4f,
	0x10, 0x87, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x10, 0x88, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x50,
	0x10, 0x89, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x10,
	0x8a, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x44, 0x52, 0x4f, 0x50, 0x10, 0x8b, 0x03, 0x12, 0x09, 0x0a,
	0x04, 0x45, 0x41, 0x43, 0x48, 0x10, 0x8c, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x45, 0x4c, 0x53, 0x45,
	0x10, 0x8d, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x10,
	0x8e, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x8f,
	0x03, 0x12, 0x0e, 0x0a, 0x09, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x10, 0x90,
	0x03, 0x12, 0x0a, 0x0a, 0x05, 0x45, 0x4e, 0x44, 0x5f, 0x50, 0x10, 0x91, 0x03, 0x12, 0x0b, 0x0a,
	0x06, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x50, 0x10, 0x92, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x45, 0x53,
	0x43, 0x41, 0x50, 0x45, 0x10, 0x93, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x10, 0x94, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x10, 0x95, 0x03,
	0x12, 0x0c, 0x0a, 0x07, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0x96, 0x03, 0x12, 0x0e,
	0x0a, 0x09, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x97, 0x03, 0x12, 0x0e,
	0x0a, 0x09, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x56, 0x45, 0x10, 0x98, 0x03, 0x12, 0x0c,
	0x0a, 0x07, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x10, 0x99, 0x03, 0x12, 0x0b, 0x0a, 0x06,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x9a, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x45, 0x58, 0x50,
	0x4c, 0x41, 0x49, 0x4e, 0x10, 0x9b, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x45, 0x58, 0x50, 0x52, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x9c, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45,
	0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x9d, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x10, 0x9e, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x45, 0x58, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x10, 0x9f, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x5f, 0x50,
	0x10, 0xa0, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10, 0xa1, 0x03,
	0x12, 0x0a, 0x0a, 0x05, 0x46, 0x45, 0x54, 0x43, 0x48, 0x10, 0xa2, 0x03, 0x12, 0x0b, 0x0a, 0x06,
	0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0xa3, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x46, 0x49, 0x4e,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0xa4, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x46, 0x49, 0x52, 0x53,
	0x54, 0x5f, 0x50, 0x10, 0xa5, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f,
	0x50, 0x10, 0xa6, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x49, 0x4e,
	0x47, 0x10, 0xa7, 0x03, 0x12, 0x08, 0x0a, 0x03, 0x46, 0x4f, 0x52, 0x10, 0xa8, 0x03, 0x12, 0x0a,
	0x0a, 0x05, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0xa9, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x46, 0x4f,
	0x52, 0x45, 0x49, 0x47, 0x4e, 0x10, 0xaa, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x46, 0x4f, 0x52, 0x57,
	0x41, 0x52, 0x44, 0x10, 0xab, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45,
	0x10, 0xac, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x46, 0x52, 0x4f, 0x4d, 0x10, 0xad, 0x03, 0x12, 0x09,
	0x0a, 0x04, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0xae, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xaf, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x55, 0x4e, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0xb0, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0xb1, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x47, 0x4c, 0x4f, 0x42,
	0x41, 0x4c, 0x10, 0xb2, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x10, 0xb3,
	0x03, 0x12, 0x0c, 0x0a, 0x07, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x45, 0x44, 0x10, 0xb4, 0x03, 0x12,
	0x0d, 0x0a, 0x08, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x53, 0x54, 0x10, 0xb5, 0x03, 0x12, 0x0c,
	0x0a, 0x07, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x10, 0xb6, 0x03, 0x12, 0x0d, 0x0a, 0x08,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e, 0x47, 0x10, 0xb7, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0xb8, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x48, 0x41, 0x4e, 0x44,
	0x4c, 0x45, 0x52, 0x10, 0xb9, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x48, 0x41, 0x56, 0x49, 0x4e, 0x47,
	0x10, 0xba, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x48, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x10,
	0xbb, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0xbc, 0x03, 0x12, 0x0b, 0x0a,
	0x06, 0x48, 0x4f, 0x55, 0x52, 0x5f, 0x50, 0x10, 0xbd, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x10, 0xbe, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x49,
	0x46, 0x5f, 0x50, 0x10, 0xbf, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x4c, 0x49, 0x4b, 0x45, 0x10,
	0xc0, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x10,
	0xc1, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10,
	0xc2, 0x03, 0x12, 0x0f, 0x0a, 0x0a, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x50,
	0x10, 0xc3, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x50, 0x10,
	0xc4, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x49, 0x4e, 0x5f, 0x50, 0x10, 0xc5, 0x03, 0x12, 0x0c, 0x0a,
	0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x10, 0xc6, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x49,
	0x4e, 0x43, 0x4c, 0x55, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xc7, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x49,
	0x4e, 0x43, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xc8, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x49,
	0x4e, 0x44, 0x45, 0x58, 0x10, 0xc9, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x45, 0x53, 0x10, 0xca, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54,
	0x10, 0xcb, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x4e, 0x48, 0x45, 0x52, 0x49, 0x54, 0x53, 0x10,
	0xcc, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x10,
	0xcd, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x49, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x50, 0x10, 0xce,
	0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x10, 0xcf, 0x03, 0x12,
	0x0a, 0x0a, 0x05, 0x49, 0x4e, 0x4f, 0x55, 0x54, 0x10, 0xd0, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x4e, 0x50, 0x55, 0x54, 0x5f, 0x50, 0x10, 0xd1, 0x03, 0x12, 0x10, 0x0a, 0x0b, 0x49, 0x4e, 0x53,
	0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x10, 0xd2, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x49,
	0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0xd3, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x4e, 0x53, 0x54,
	0x45, 0x41, 0x44, 0x10, 0xd4, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x10,
	0xd5, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0xd6, 0x03,
	0x12, 0x0e, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x10, 0xd7, 0x03,
	0x12, 0x0d, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0xd8, 0x03, 0x12,
	0x09, 0x0a, 0x04, 0x49, 0x4e, 0x54, 0x4f, 0x10, 0xd9, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x4e,
	0x56, 0x4f, 0x4b, 0x45, 0x52, 0x10, 0xda, 0x03, 0x12, 0x07, 0x0a, 0x02, 0x49, 0x53, 0x10, 0xdb,
	0x03, 0x12, 0x0b, 0x0a, 0x06, 0x49, 0x53, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0xdc, 0x03, 0x12, 0x0e,
	0x0a, 0x09, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xdd, 0x03, 0x12, 0x09,
	0x0a, 0x04, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0xde, 0x03, 0x12, 0x08, 0x0a, 0x03, 0x4b, 0x45, 0x59,
	0x10, 0xdf, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x10, 0xe0, 0x03, 0x12,
	0x0d, 0x0a, 0x08, 0x4c, 0x41, 0x4e, 0x47, 0x55, 0x41, 0x47, 0x45, 0x10, 0xe1, 0x03, 0x12, 0x0c,
	0x0a, 0x07, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x50, 0x10, 0xe2, 0x03, 0x12, 0x0b, 0x0a, 0x06,
	0x4c, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x10, 0xe3, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x41, 0x54,
	0x45, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x10, 0xe4, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x4c, 0x45, 0x41,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0xe5, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x45, 0x41, 0x4b, 0x50,
	0x52, 0x4f, 0x4f, 0x46, 0x10, 0xe6, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x4c, 0x45, 0x41, 0x53, 0x54,
	0x10, 0xe7, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54, 0x10, 0xe8, 0x03, 0x12, 0x0a,
	0x0a, 0x05, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x10, 0xe9, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x49,
	0x4b, 0x45, 0x10, 0xea, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0xeb,
	0x03, 0x12, 0x0b, 0x0a, 0x06, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x10, 0xec, 0x03, 0x12, 0x09,
	0x0a, 0x04, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0xed, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x10, 0xee, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0xef, 0x03, 0x12, 0x13, 0x0a, 0x0e, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0xf0, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xf1, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x50, 0x10, 0xf2, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0xf3, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x10, 0xf4, 0x03,
	0x12, 0x0c, 0x0a, 0x07, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0xf5, 0x03, 0x12, 0x0a,
	0x0a, 0x05, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0xf6, 0x03, 0x12, 0x0c, 0x0a, 0x07, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x45, 0x44, 0x10, 0xf7, 0x03, 0x12, 0x11, 0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x45,
	0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0xf8, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x4d,
	0x41, 0x58, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xf9, 0x03, 0x12, 0x0a, 0x0a, 0x05, 0x4d, 0x45,
	0x52, 0x47, 0x45, 0x10, 0xfa, 0x03, 0x12, 0x0b, 0x0a, 0x06, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x10, 0xfb, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x5f, 0x50, 0x10,
	0xfc, 0x03, 0x12, 0x0d, 0x0a, 0x08, 0x4d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0xfd,
	0x03, 0x12, 0x09, 0x0a, 0x04, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0xfe, 0x03, 0x12, 0x0c, 0x0a, 0x07,
	0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x50, 0x10, 0xff, 0x03, 0x12, 0x09, 0x0a, 0x04, 0x4d, 0x4f,
	0x56, 0x45, 0x10, 0x80, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x10,
	0x81, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x82, 0x04, 0x12, 0x0d,
	0x0a, 0x08, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x83, 0x04, 0x12, 0x0c, 0x0a,
	0x07, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x10, 0x84, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x4e,
	0x43, 0x48, 0x41, 0x52, 0x10, 0x85, 0x04, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x45, 0x57, 0x10, 0x86,
	0x04, 0x12, 0x09, 0x0a, 0x04, 0x4e, 0x45, 0x58, 0x54, 0x10, 0x87, 0x04, 0x12, 0x08, 0x0a, 0x03,
	0x4e, 0x46, 0x43, 0x10, 0x88, 0x04, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x46, 0x44, 0x10, 0x89, 0x04,
	0x12, 0x09, 0x0a, 0x04, 0x4e, 0x46, 0x4b, 0x43, 0x10, 0x8a, 0x04, 0x12, 0x09, 0x0a, 0x04, 0x4e,
	0x46, 0x4b, 0x44, 0x10, 0x8b, 0x04, 0x12, 0x07, 0x0a, 0x02, 0x4e, 0x4f, 0x10, 0x8c, 0x04, 0x12,
	0x09, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x8d, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x8e, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x8f, 0x04, 0x12, 0x08, 0x0a, 0x03, 0x4e,
	0x4f, 0x54, 0x10, 0x90, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47,
	0x10, 0x91, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x92, 0x04,
	0x12, 0x0c, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x93, 0x04, 0x12, 0x0b,
	0x0a, 0x06, 0x4e, 0x4f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x94, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x4e,
	0x55, 0x4c, 0x4c, 0x5f, 0x50, 0x10, 0x95, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x4e, 0x55, 0x4c, 0x4c,
	0x49, 0x46, 0x10, 0x96, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x50,
	0x10, 0x97, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x98,
	0x04, 0x12, 0x0d, 0x0a, 0x08, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x10, 0x99, 0x04,
	0x12, 0x07, 0x0a, 0x02, 0x4f, 0x46, 0x10, 0x9a, 0x04, 0x12, 0x08, 0x0a, 0x03, 0x4f, 0x46, 0x46,
	0x10, 0x9b, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x9c, 0x04,
	0x12, 0x09, 0x0a, 0x04, 0x4f, 0x49, 0x44, 0x53, 0x10, 0x9d, 0x04, 0x12, 0x08, 0x0a, 0x03, 0x4f,
	0x4c, 0x44, 0x10, 0x9e, 0x04, 0x12, 0x07, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x9f, 0x04, 0x12, 0x09,
	0x0a, 0x04, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0xa0, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x10, 0xa1, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x4f, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0xa2, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x10, 0xa3, 0x04, 0x12, 0x07, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0xa4, 0x04, 0x12, 0x0a, 0x0a, 0x05,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0xa5, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x4f, 0x52, 0x44, 0x49,
	0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0xa6, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x53, 0x10, 0xa7, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x4f, 0x55, 0x54, 0x5f, 0x50, 0x10,
	0xa8, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x50, 0x10, 0xa9, 0x04,
	0x12, 0x09, 0x0a, 0x04, 0x4f, 0x56, 0x45, 0x52, 0x10, 0xaa, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x4f,
	0x56, 0x45, 0x52, 0x4c, 0x41, 0x50, 0x53, 0x10, 0xab, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x4f, 0x56,
	0x45, 0x52, 0x4c, 0x41, 0x59, 0x10, 0xac, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x4f, 0x56, 0x45, 0x52,
	0x52, 0x49, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xad, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x4f, 0x57, 0x4e,
	0x45, 0x44, 0x10, 0xae, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10, 0xaf,
	0x04, 0x12, 0x0d, 0x0a, 0x08, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x10, 0xb0, 0x04,
	0x12, 0x0e, 0x0a, 0x09, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0xb1, 0x04,
	0x12, 0x0b, 0x0a, 0x06, 0x50, 0x41, 0x52, 0x53, 0x45, 0x52, 0x10, 0xb2, 0x04, 0x12, 0x0c, 0x0a,
	0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0xb3, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x50,
	0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xb4, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x50,
	0x41, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0xb5, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x50, 0x41, 0x53,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0xb6, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x43,
	0x49, 0x4e, 0x47, 0x10, 0xb7, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x4e, 0x53, 0x10,
	0xb8, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0xb9, 0x04, 0x12,
	0x0d, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xba, 0x04, 0x12, 0x0e,
	0x0a, 0x09, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x49, 0x4e, 0x47, 0x10, 0xbb, 0x04, 0x12, 0x0e,
	0x0a, 0x09, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0xbc, 0x04, 0x12, 0x0d,
	0x0a, 0x08, 0x50, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x10, 0xbd, 0x04, 0x12, 0x0c, 0x0a,
	0x07, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x10, 0xbe, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x50,
	0x52, 0x45, 0x50, 0x41, 0x52, 0x45, 0x44, 0x10, 0xbf, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x50, 0x52,
	0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0xc0, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x50, 0x52, 0x49, 0x4f,
	0x52, 0x10, 0xc1, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47,
	0x45, 0x53, 0x10, 0xc2, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55,
	0x52, 0x41, 0x4c, 0x10, 0xc3, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44,
	0x55, 0x52, 0x45, 0x10, 0xc4, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44,
	0x55, 0x52, 0x45, 0x53, 0x10, 0xc5, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x10, 0xc6, 0x04, 0x12, 0x10, 0x0a, 0x0b, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc7, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x51, 0x55, 0x4f, 0x54, 0x45,
	0x10, 0xc8, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xc9, 0x04, 0x12,
	0x09, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0xca, 0x04, 0x12, 0x09, 0x0a, 0x04, 0x52, 0x45,
	0x41, 0x4c, 0x10, 0xcb, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x52, 0x45, 0x41, 0x53, 0x53, 0x49, 0x47,
	0x4e, 0x10, 0xcc, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x45, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10,
	0xcd, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x55, 0x52, 0x53, 0x49, 0x56, 0x45, 0x10,
	0xce, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x52, 0x45, 0x46, 0x5f, 0x50, 0x10, 0xcf, 0x04, 0x12, 0x0f,
	0x0a, 0x0a, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x10, 0xd0, 0x04, 0x12,
	0x10, 0x0a, 0x0b, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x49, 0x4e, 0x47, 0x10, 0xd1,
	0x04, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0xd2, 0x04, 0x12,
	0x0c, 0x0a, 0x07, 0x52, 0x45, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0xd3, 0x04, 0x12, 0x0f, 0x0a,
	0x0a, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x50, 0x10, 0xd4, 0x04, 0x12, 0x0c,
	0x0a, 0x07, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0xd5, 0x04, 0x12, 0x0b, 0x0a, 0x06,
	0x52, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xd6, 0x04, 0x12, 0x0f, 0x0a, 0x0a, 0x52, 0x45, 0x50,
	0x45, 0x41, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xd7, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x45,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0xd8, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x10, 0xd9, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10,
	0xda, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0xdb, 0x04,
	0x12, 0x0d, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10, 0xdc, 0x04, 0x12,
	0x0b, 0x0a, 0x06, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0xdd, 0x04, 0x12, 0x0e, 0x0a, 0x09,
	0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0xde, 0x04, 0x12, 0x0c, 0x0a, 0x07,
	0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x53, 0x10, 0xdf, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x52, 0x45,
	0x56, 0x4f, 0x4b, 0x45, 0x10, 0xe0, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x52, 0x49, 0x47, 0x48, 0x54,
	0x10, 0xe1, 0x04, 0x12, 0x09, 0x0a, 0x04, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0xe2, 0x04, 0x12, 0x0d,
	0x0a, 0x08, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x10, 0xe3, 0x04, 0x12, 0x0b, 0x0a,
	0x06, 0x52, 0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x10, 0xe4, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x52, 0x4f,
	0x55, 0x54, 0x49, 0x4e, 0x45, 0x10, 0xe5, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x52, 0x4f, 0x55, 0x54,
	0x49, 0x4e, 0x45, 0x53, 0x10, 0xe6, 0x04, 0x12, 0x08, 0x0a, 0x03, 0x52, 0x4f, 0x57, 0x10, 0xe7,
	0x04, 0x12, 0x09, 0x0a, 0x04, 0x52, 0x4f, 0x57, 0x53, 0x10, 0xe8, 0x04, 0x12, 0x09, 0x0a, 0x04,
	0x52, 0x55, 0x4c, 0x45, 0x10, 0xe9, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x41, 0x56, 0x45, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0xea, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x41, 0x10, 0xeb, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x53, 0x10,
	0xec, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x43, 0x52, 0x4f, 0x4c, 0x4c, 0x10, 0xed, 0x04, 0x12,
	0x0b, 0x0a, 0x06, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0xee, 0x04, 0x12, 0x0d, 0x0a, 0x08,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x10, 0xef, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0xf0, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x10, 0xf1, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x45, 0x51, 0x55, 0x45,
	0x4e, 0x43, 0x45, 0x10, 0xf2, 0x04, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e,
	0x43, 0x45, 0x53, 0x10, 0xf3, 0x04, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xf4, 0x04, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x10, 0xf5, 0x04, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0xf6, 0x04, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0xf7, 0x04, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x45, 0x54, 0x10, 0xf8,
	0x04, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x45, 0x54, 0x53, 0x10, 0xf9, 0x04, 0x12, 0x0a, 0x0a, 0x05,
	0x53, 0x45, 0x54, 0x4f, 0x46, 0x10, 0xfa, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x48, 0x41, 0x52,
	0x45, 0x10, 0xfb, 0x04, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x48, 0x4f, 0x57, 0x10, 0xfc, 0x04, 0x12,
	0x0c, 0x0a, 0x07, 0x53, 0x49, 0x4d, 0x49, 0x4c, 0x41, 0x52, 0x10, 0xfd, 0x04, 0x12, 0x0b, 0x0a,
	0x06, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0xfe, 0x04, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x4b,
	0x49, 0x50, 0x10, 0xff, 0x04, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x49, 0x4e,
	0x54, 0x10, 0x80, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x10, 0x81, 0x05, 0x12, 0x09, 0x0a, 0x04, 0x53, 0x4f, 0x4d, 0x45, 0x10, 0x82, 0x05, 0x12, 0x0a,
	0x0a, 0x05, 0x53, 0x51, 0x4c, 0x5f, 0x50, 0x10, 0x83, 0x05, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x84, 0x05, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x10, 0x85, 0x05, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x10, 0x86, 0x05, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x87, 0x05, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x49, 0x53,
	0x54, 0x49, 0x43, 0x53, 0x10, 0x88, 0x05, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x54, 0x44, 0x49, 0x4e,
	0x10, 0x89, 0x05, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x54, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x8a, 0x05,
	0x12, 0x0c, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x8b, 0x05, 0x12, 0x0b,
	0x0a, 0x06, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44, 0x10, 0x8c, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x5f, 0x50, 0x10, 0x8d, 0x05, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x54,
	0x52, 0x49, 0x50, 0x5f, 0x50, 0x10, 0x8e, 0x05, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x55, 0x42, 0x53,
	0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x8f, 0x05, 0x12, 0x0e, 0x0a, 0x09, 0x53,
	0x55, 0x42, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x90, 0x05, 0x12, 0x0c, 0x0a, 0x07, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x91, 0x05, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x59, 0x4d,
	0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x92, 0x05, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x59, 0x53,
	0x49, 0x44, 0x10, 0x93, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x50, 0x10, 0x94, 0x05, 0x12, 0x0a, 0x0a, 0x05, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x95, 0x05,
	0x12, 0x0b, 0x0a, 0x06, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x10, 0x96, 0x05, 0x12, 0x10, 0x0a,
	0x0b, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x97, 0x05, 0x12,
	0x0f, 0x0a, 0x0a, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x98, 0x05,
	0x12, 0x09, 0x0a, 0x04, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x99, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x54,
	0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x9a, 0x05, 0x12, 0x0e, 0x0a, 0x09, 0x54, 0x45,
	0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x10, 0x9b, 0x05, 0x12, 0x0b, 0x0a, 0x06, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x50, 0x10, 0x9c, 0x05, 0x12, 0x09, 0x0a, 0x04, 0x54, 0x48, 0x45, 0x4e, 0x10,
	0x9d, 0x05, 0x12, 0x09, 0x0a, 0x04, 0x54, 0x49, 0x45, 0x53, 0x10, 0x9e, 0x05, 0x12, 0x09, 0x0a,
	0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x9f, 0x05, 0x12, 0x0e, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45,
	0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0xa0, 0x05, 0x12, 0x07, 0x0a, 0x02, 0x54, 0x4f, 0x10, 0xa1,
	0x05, 0x12, 0x0d, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0xa2, 0x05,
	0x12, 0x10, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xa3, 0x05, 0x12, 0x0e, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x10,
	0xa4, 0x05, 0x12, 0x0a, 0x0a, 0x05, 0x54, 0x52, 0x45, 0x41, 0x54, 0x10, 0xa5, 0x05, 0x12, 0x0c,
	0x0a, 0x07, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0xa6, 0x05, 0x12, 0x09, 0x0a, 0x04,
	0x54, 0x52, 0x49, 0x4d, 0x10, 0xa7, 0x05, 0x12, 0x0b, 0x0a, 0x06, 0x54, 0x52, 0x55, 0x45, 0x5f,
	0x50, 0x10, 0xa8, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45,
	0x10, 0xa9, 0x05, 0x12, 0x0c, 0x0a, 0x07, 0x54, 0x52, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0xaa,
	0x05, 0x12, 0x0b, 0x0a, 0x06, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x10, 0xab, 0x05, 0x12, 0x0c,
	0x0a, 0x07, 0x54, 0x59, 0x50, 0x45, 0x53, 0x5f, 0x50, 0x10, 0xac, 0x05, 0x12, 0x0c, 0x0a, 0x07,
	0x55, 0x45, 0x53, 0x43, 0x41, 0x50, 0x45, 0x10, 0xad, 0x05, 0x12, 0x0e, 0x0a, 0x09, 0x55, 0x4e,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10, 0xae, 0x05, 0x12, 0x10, 0x0a, 0x0b, 0x55, 0x4e,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0xaf, 0x05, 0x12, 0x10, 0x0a, 0x0b,
	0x55, 0x4e, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x45, 0x44, 0x10, 0xb0, 0x05, 0x12, 0x0a,
	0x0a, 0x05, 0x55, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0xb1, 0x05, 0x12, 0x0b, 0x0a, 0x06, 0x55, 0x4e,
	0x49, 0x51, 0x55, 0x45, 0x10, 0xb2, 0x05, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0xb3, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x10, 0xb4, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x55, 0x4e, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44,
	0x10, 0xb5, 0x05, 0x12, 0x0a, 0x0a, 0x05, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x10, 0xb6, 0x05, 0x12,
	0x0b, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xb7, 0x05, 0x12, 0x09, 0x0a, 0x04,
	0x55, 0x53, 0x45, 0x52, 0x10, 0xb8, 0x05, 0x12, 0x0a, 0x0a, 0x05, 0x55, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0xb9, 0x05, 0x12, 0x0b, 0x0a, 0x06, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d, 0x10, 0xba, 0x05,
	0x12, 0x0a, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xbb, 0x05, 0x12, 0x0d, 0x0a, 0x08,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x10, 0xbc, 0x05, 0x12, 0x0e, 0x0a, 0x09, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x10, 0xbd, 0x05, 0x12, 0x0c, 0x0a, 0x07, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x50, 0x10, 0xbe, 0x05, 0x12, 0x0b, 0x0a, 0x06, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x53, 0x10, 0xbf, 0x05, 0x12, 0x0c, 0x0a, 0x07, 0x56, 0x41, 0x52, 0x43, 0x48, 0x41,
	0x52, 0x10, 0xc0, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x44, 0x49, 0x43,
	0x10, 0xc1, 0x05, 0x12, 0x0c, 0x0a, 0x07, 0x56, 0x41, 0x52, 0x59, 0x49, 0x4e, 0x47, 0x10, 0xc2,
	0x05, 0x12, 0x0c, 0x0a, 0x07, 0x56, 0x45, 0x52, 0x42, 0x4f, 0x53, 0x45, 0x10, 0xc3, 0x05, 0x12,
	0x0e, 0x0a, 0x09, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x10, 0xc4, 0x05, 0x12,
	0x09, 0x0a, 0x04, 0x56, 0x49, 0x45, 0x57, 0x10, 0xc5, 0x05, 0x12, 0x0a, 0x0a, 0x05, 0x56, 0x49,
	0x45, 0x57, 0x53, 0x10, 0xc6, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x56, 0x4f, 0x4c, 0x41, 0x54, 0x49,
	0x4c, 0x45, 0x10, 0xc7, 0x05, 0x12, 0x09, 0x0a, 0x04, 0x57, 0x48, 0x45, 0x4e, 0x10, 0xc8, 0x05,
	0x12, 0x0a, 0x0a, 0x05, 0x57, 0x48, 0x45, 0x52, 0x45, 0x10, 0xc9, 0x05, 0x12, 0x11, 0x0a, 0x0c,
	0x57, 0x48, 0x49, 0x54, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x50, 0x10, 0xca, 0x05, 0x12,
	0x0b, 0x0a, 0x06, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0xcb, 0x05, 0x12, 0x09, 0x0a, 0x04,
	0x57, 0x49, 0x54, 0x48, 0x10, 0xcc, 0x05, 0x12, 0x0b, 0x0a, 0x06, 0x57, 0x49, 0x54, 0x48, 0x49,
	0x4e, 0x10, 0xcd, 0x05, 0x12, 0x0c, 0x0a, 0x07, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x10,
	0xce, 0x05, 0x12, 0x09, 0x0a, 0x04, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0xcf, 0x05, 0x12, 0x0c, 0x0a,
	0x07, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52, 0x10, 0xd0, 0x05, 0x12, 0x0a, 0x0a, 0x05, 0x57,
	0x52, 0x49, 0x54, 0x45, 0x10, 0xd1, 0x05, 0x12, 0x0a, 0x0a, 0x05, 0x58, 0x4d, 0x4c, 0x5f, 0x50,
	0x10, 0xd2, 0x05, 0x12, 0x12, 0x0a, 0x0d, 0x58, 0x4d, 0x4c, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x45, 0x53, 0x10, 0xd3, 0x05, 0x12, 0x0e, 0x0a, 0x09, 0x58, 0x4d, 0x4c, 0x43, 0x4f,
	0x4e, 0x43, 0x41, 0x54, 0x10, 0xd4, 0x05, 0x12, 0x0f, 0x0a, 0x0a, 0x58, 0x4d, 0x4c, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xd5, 0x05, 0x12, 0x0e, 0x0a, 0x09, 0x58, 0x4d, 0x4c, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0xd6, 0x05, 0x12, 0x0e, 0x0a, 0x09, 0x58, 0x4d, 0x4c, 0x46,
	0x4f, 0x52, 0x45, 0x53, 0x54, 0x10, 0xd7, 0x05, 0x12, 0x12, 0x0a, 0x0d, 0x58, 0x4d, 0x4c, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x53, 0x10, 0xd8, 0x05, 0x12, 0x0d, 0x0a, 0x08,
	0x58, 0x4d, 0x4c, 0x50, 0x41, 0x52, 0x53, 0x45, 0x10, 0xd9, 0x05, 0x12, 0x0a, 0x0a, 0x05, 0x58,
	0x4d, 0x4c, 0x50, 0x49, 0x10, 0xda, 0x05, 0x12, 0x0c, 0x0a, 0x07, 0x58, 0x4d, 0x4c, 0x52, 0x4f,
	0x4f, 0x54, 0x10, 0xdb, 0x05, 0x12, 0x11, 0x0a, 0x0c, 0x58, 0x4d, 0x4c, 0x53, 0x45, 0x52, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0xdc, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x58, 0x4d, 0x4c, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0xdd, 0x05, 0x12, 0x0b, 0x0a, 0x06, 0x59, 0x45, 0x41, 0x52, 0x5f,
	0x50, 0x10, 0xde, 0x05, 0x12, 0x0a, 0x0a, 0x05, 0x59, 0x45, 0x53, 0x5f, 0x50, 0x10, 0xdf, 0x05,
	0x12, 0x09, 0x0a, 0x04, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0xe0, 0x05, 0x12, 0x0b, 0x0a, 0x06, 0x4e,
	0x4f, 0x54, 0x5f, 0x4c, 0x41, 0x10, 0xe1, 0x05, 0x12, 0x0d, 0x0a, 0x08, 0x4e, 0x55, 0x4c, 0x4c,
	0x53, 0x5f, 0x4c, 0x41, 0x10, 0xe2, 0x05, 0x12, 0x0c, 0x0a, 0x07, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x4c, 0x41, 0x10, 0xe3, 0x05, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0xe4, 0x05, 0x12, 0x16, 0x0a, 0x11, 0x4d, 0x4f,
	0x44, 0x45, 0x5f, 0x50, 0x4c, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x10,
	0xe5, 0x05, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4c, 0x50, 0x47, 0x53,
	0x51, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x31, 0x10, 0xe6, 0x05, 0x12, 0x19, 0x0a,
	0x14, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4c, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f, 0x41, 0x53,
	0x53, 0x49, 0x47, 0x4e, 0x32, 0x10, 0xe7, 0x05, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x4c, 0x50, 0x47, 0x53, 0x51, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x33,
	0x10, 0xe8, 0x05, 0x12, 0x0b, 0x0a, 0x06, 0x55, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x10, 0xe9, 0x05,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pg_query_proto_rawDescOnce sync.Once
	file_pg_query_proto_rawDescData = file_pg_query_proto_rawDesc
)

func file_pg_query_proto_rawDescGZIP() []byte {
	file_pg_query_proto_rawDescOnce.Do(func() {
		file_pg_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_pg_query_proto_rawDescData)
	})
	return file_pg_query_proto_rawDescData
}

var file_pg_query_proto_enumTypes = make([]protoimpl.EnumInfo, 59)
var file_pg_query_proto_msgTypes = make([]protoimpl.MessageInfo, 242)
var file_pg_query_proto_goTypes = []interface{}{
	(OverridingKind)(0),                  // 0: pg_query.OverridingKind
	(QuerySource)(0),                     // 1: pg_query.QuerySource
	(SortByDir)(0),                       // 2: pg_query.SortByDir
	(SortByNulls)(0),                     // 3: pg_query.SortByNulls
	(SetQuantifier)(0),                   // 4: pg_query.SetQuantifier
	(A_Expr_Kind)(0),                     // 5: pg_query.A_Expr_Kind
	(RoleSpecType)(0),                    // 6: pg_query.RoleSpecType
	(TableLikeOption)(0),                 // 7: pg_query.TableLikeOption
	(DefElemAction)(0),                   // 8: pg_query.DefElemAction
	(PartitionRangeDatumKind)(0),         // 9: pg_query.PartitionRangeDatumKind
	(RTEKind)(0),                         // 10: pg_query.RTEKind
	(WCOKind)(0),                         // 11: pg_query.WCOKind
	(GroupingSetKind)(0),                 // 12: pg_query.GroupingSetKind
	(CTEMaterialize)(0),                  // 13: pg_query.CTEMaterialize
	(SetOperation)(0),                    // 14: pg_query.SetOperation
	(ObjectType)(0),                      // 15: pg_query.ObjectType
	(DropBehavior)(0),                    // 16: pg_query.DropBehavior
	(AlterTableType)(0),                  // 17: pg_query.AlterTableType
	(GrantTargetType)(0),                 // 18: pg_query.GrantTargetType
	(VariableSetKind)(0),                 // 19: pg_query.VariableSetKind
	(ConstrType)(0),                      // 20: pg_query.ConstrType
	(ImportForeignSchemaType)(0),         // 21: pg_query.ImportForeignSchemaType
	(RoleStmtType)(0),                    // 22: pg_query.RoleStmtType
	(FetchDirection)(0),                  // 23: pg_query.FetchDirection
	(FunctionParameterMode)(0),           // 24: pg_query.FunctionParameterMode
	(TransactionStmtKind)(0),             // 25: pg_query.TransactionStmtKind
	(ViewCheckOption)(0),                 // 26: pg_query.ViewCheckOption
	(DiscardMode)(0),                     // 27: pg_query.DiscardMode
	(ReindexObjectType)(0),               // 28: pg_query.ReindexObjectType
	(AlterTSConfigType)(0),               // 29: pg_query.AlterTSConfigType
	(PublicationObjSpecType)(0),          // 30: pg_query.PublicationObjSpecType
	(AlterPublicationAction)(0),          // 31: pg_query.AlterPublicationAction
	(AlterSubscriptionType)(0),           // 32: pg_query.AlterSubscriptionType
	(OnCommitAction)(0),                  // 33: pg_query.OnCommitAction
	(ParamKind)(0),                       // 34: pg_query.ParamKind
	(CoercionContext)(0),                 // 35: pg_query.CoercionContext
	(CoercionForm)(0),                    // 36: pg_query.CoercionForm
	(BoolExprType)(0),                    // 37: pg_query.BoolExprType
	(SubLinkType)(0),                     // 38: pg_query.SubLinkType
	(RowCompareType)(0),                  // 39: pg_query.RowCompareType
	(MinMaxOp)(0),                        // 40: pg_query.MinMaxOp
	(SQLValueFunctionOp)(0),              // 41: pg_query.SQLValueFunctionOp
	(XmlExprOp)(0),                       // 42: pg_query.XmlExprOp
	(XmlOptionType)(0),                   // 43: pg_query.XmlOptionType
	(NullTestType)(0),                    // 44: pg_query.NullTestType
	(BoolTestType)(0),                    // 45: pg_query.BoolTestType
	(CmdType)(0),                         // 46: pg_query.CmdType
	(JoinType)(0),                        // 47: pg_query.JoinType
	(AggStrategy)(0),                     // 48: pg_query.AggStrategy
	(AggSplit)(0),                        // 49: pg_query.AggSplit
	(SetOpCmd)(0),                        // 50: pg_query.SetOpCmd
	(SetOpStrategy)(0),                   // 51: pg_query.SetOpStrategy
	(OnConflictAction)(0),                // 52: pg_query.OnConflictAction
	(LimitOption)(0),                     // 53: pg_query.LimitOption
	(LockClauseStrength)(0),              // 54: pg_query.LockClauseStrength
	(LockWaitPolicy)(0),                  // 55: pg_query.LockWaitPolicy
	(LockTupleMode)(0),                   // 56: pg_query.LockTupleMode
	(KeywordKind)(0),                     // 57: pg_query.KeywordKind
	(Token)(0),                           // 58: pg_query.Token
	(*ParseResult)(nil),                  // 59: pg_query.ParseResult
	(*ScanResult)(nil),                   // 60: pg_query.ScanResult
	(*Node)(nil),                         // 61: pg_query.Node
	(*Integer)(nil),                      // 62: pg_query.Integer
	(*Float)(nil),                        // 63: pg_query.Float
	(*Boolean)(nil),                      // 64: pg_query.Boolean
	(*String)(nil),                       // 65: pg_query.String
	(*BitString)(nil),                    // 66: pg_query.BitString
	(*List)(nil),                         // 67: pg_query.List
	(*OidList)(nil),                      // 68: pg_query.OidList
	(*IntList)(nil),                      // 69: pg_query.IntList
	(*A_Const)(nil),                      // 70: pg_query.A_Const
	(*Alias)(nil),                        // 71: pg_query.Alias
	(*RangeVar)(nil),                     // 72: pg_query.RangeVar
	(*TableFunc)(nil),                    // 73: pg_query.TableFunc
	(*Var)(nil),                          // 74: pg_query.Var
	(*Param)(nil),                        // 75: pg_query.Param
	(*Aggref)(nil),                       // 76: pg_query.Aggref
	(*GroupingFunc)(nil),                 // 77: pg_query.GroupingFunc
	(*WindowFunc)(nil),                   // 78: pg_query.WindowFunc
	(*SubscriptingRef)(nil),              // 79: pg_query.SubscriptingRef
	(*FuncExpr)(nil),                     // 80: pg_query.FuncExpr
	(*NamedArgExpr)(nil),                 // 81: pg_query.NamedArgExpr
	(*OpExpr)(nil),                       // 82: pg_query.OpExpr
	(*DistinctExpr)(nil),                 // 83: pg_query.DistinctExpr
	(*NullIfExpr)(nil),                   // 84: pg_query.NullIfExpr
	(*ScalarArrayOpExpr)(nil),            // 85: pg_query.ScalarArrayOpExpr
	(*BoolExpr)(nil),                     // 86: pg_query.BoolExpr
	(*SubLink)(nil),                      // 87: pg_query.SubLink
	(*SubPlan)(nil),                      // 88: pg_query.SubPlan
	(*AlternativeSubPlan)(nil),           // 89: pg_query.AlternativeSubPlan
	(*FieldSelect)(nil),                  // 90: pg_query.FieldSelect
	(*FieldStore)(nil),                   // 91: pg_query.FieldStore
	(*RelabelType)(nil),                  // 92: pg_query.RelabelType
	(*CoerceViaIO)(nil),                  // 93: pg_query.CoerceViaIO
	(*ArrayCoerceExpr)(nil),              // 94: pg_query.ArrayCoerceExpr
	(*ConvertRowtypeExpr)(nil),           // 95: pg_query.ConvertRowtypeExpr
	(*CollateExpr)(nil),                  // 96: pg_query.CollateExpr
	(*CaseExpr)(nil),                     // 97: pg_query.CaseExpr
	(*CaseWhen)(nil),                     // 98: pg_query.CaseWhen
	(*CaseTestExpr)(nil),                 // 99: pg_query.CaseTestExpr
	(*ArrayExpr)(nil),                    // 100: pg_query.ArrayExpr
	(*RowExpr)(nil),                      // 101: pg_query.RowExpr
	(*RowCompareExpr)(nil),               // 102: pg_query.RowCompareExpr
	(*CoalesceExpr)(nil),                 // 103: pg_query.CoalesceExpr
	(*MinMaxExpr)(nil),                   // 104: pg_query.MinMaxExpr
	(*SQLValueFunction)(nil),             // 105: pg_query.SQLValueFunction
	(*XmlExpr)(nil),                      // 106: pg_query.XmlExpr
	(*NullTest)(nil),                     // 107: pg_query.NullTest
	(*BooleanTest)(nil),                  // 108: pg_query.BooleanTest
	(*CoerceToDomain)(nil),               // 109: pg_query.CoerceToDomain
	(*CoerceToDomainValue)(nil),          // 110: pg_query.CoerceToDomainValue
	(*SetToDefault)(nil),                 // 111: pg_query.SetToDefault
	(*CurrentOfExpr)(nil),                // 112: pg_query.CurrentOfExpr
	(*NextValueExpr)(nil),                // 113: pg_query.NextValueExpr
	(*InferenceElem)(nil),                // 114: pg_query.InferenceElem
	(*TargetEntry)(nil),                  // 115: pg_query.TargetEntry
	(*RangeTblRef)(nil),                  // 116: pg_query.RangeTblRef
	(*JoinExpr)(nil),                     // 117: pg_query.JoinExpr
	(*FromExpr)(nil),                     // 118: pg_query.FromExpr
	(*OnConflictExpr)(nil),               // 119: pg_query.OnConflictExpr
	(*IntoClause)(nil),                   // 120: pg_query.IntoClause
	(*MergeAction)(nil),                  // 121: pg_query.MergeAction
	(*RawStmt)(nil),                      // 122: pg_query.RawStmt
	(*Query)(nil),                        // 123: pg_query.Query
	(*InsertStmt)(nil),                   // 124: pg_query.InsertStmt
	(*DeleteStmt)(nil),                   // 125: pg_query.DeleteStmt
	(*UpdateStmt)(nil),                   // 126: pg_query.UpdateStmt
	(*MergeStmt)(nil),                    // 127: pg_query.MergeStmt
	(*SelectStmt)(nil),                   // 128: pg_query.SelectStmt
	(*ReturnStmt)(nil),                   // 129: pg_query.ReturnStmt
	(*PLAssignStmt)(nil),                 // 130: pg_query.PLAssignStmt
	(*AlterTableStmt)(nil),               // 131: pg_query.AlterTableStmt
	(*AlterTableCmd)(nil),                // 132: pg_query.AlterTableCmd
	(*AlterDomainStmt)(nil),              // 133: pg_query.AlterDomainStmt
	(*SetOperationStmt)(nil),             // 134: pg_query.SetOperationStmt
	(*GrantStmt)(nil),                    // 135: pg_query.GrantStmt
	(*GrantRoleStmt)(nil),                // 136: pg_query.GrantRoleStmt
	(*AlterDefaultPrivilegesStmt)(nil),   // 137: pg_query.AlterDefaultPrivilegesStmt
	(*ClosePortalStmt)(nil),              // 138: pg_query.ClosePortalStmt
	(*ClusterStmt)(nil),                  // 139: pg_query.ClusterStmt
	(*CopyStmt)(nil),                     // 140: pg_query.CopyStmt
	(*CreateStmt)(nil),                   // 141: pg_query.CreateStmt
	(*DefineStmt)(nil),                   // 142: pg_query.DefineStmt
	(*DropStmt)(nil),                     // 143: pg_query.DropStmt
	(*TruncateStmt)(nil),                 // 144: pg_query.TruncateStmt
	(*CommentStmt)(nil),                  // 145: pg_query.CommentStmt
	(*FetchStmt)(nil),                    // 146: pg_query.FetchStmt
	(*IndexStmt)(nil),                    // 147: pg_query.IndexStmt
	(*CreateFunctionStmt)(nil),           // 148: pg_query.CreateFunctionStmt
	(*AlterFunctionStmt)(nil),            // 149: pg_query.AlterFunctionStmt
	(*DoStmt)(nil),                       // 150: pg_query.DoStmt
	(*RenameStmt)(nil),                   // 151: pg_query.RenameStmt
	(*RuleStmt)(nil),                     // 152: pg_query.RuleStmt
	(*NotifyStmt)(nil),                   // 153: pg_query.NotifyStmt
	(*ListenStmt)(nil),                   // 154: pg_query.ListenStmt
	(*UnlistenStmt)(nil),                 // 155: pg_query.UnlistenStmt
	(*TransactionStmt)(nil),              // 156: pg_query.TransactionStmt
	(*ViewStmt)(nil),                     // 157: pg_query.ViewStmt
	(*LoadStmt)(nil),                     // 158: pg_query.LoadStmt
	(*CreateDomainStmt)(nil),             // 159: pg_query.CreateDomainStmt
	(*CreatedbStmt)(nil),                 // 160: pg_query.CreatedbStmt
	(*DropdbStmt)(nil),                   // 161: pg_query.DropdbStmt
	(*VacuumStmt)(nil),                   // 162: pg_query.VacuumStmt
	(*ExplainStmt)(nil),                  // 163: pg_query.ExplainStmt
	(*CreateTableAsStmt)(nil),            // 164: pg_query.CreateTableAsStmt
	(*CreateSeqStmt)(nil),                // 165: pg_query.CreateSeqStmt
	(*AlterSeqStmt)(nil),                 // 166: pg_query.AlterSeqStmt
	(*VariableSetStmt)(nil),              // 167: pg_query.VariableSetStmt
	(*VariableShowStmt)(nil),             // 168: pg_query.VariableShowStmt
	(*DiscardStmt)(nil),                  // 169: pg_query.DiscardStmt
	(*CreateTrigStmt)(nil),               // 170: pg_query.CreateTrigStmt
	(*CreatePLangStmt)(nil),              // 171: pg_query.CreatePLangStmt
	(*CreateRoleStmt)(nil),               // 172: pg_query.CreateRoleStmt
	(*AlterRoleStmt)(nil),                // 173: pg_query.AlterRoleStmt
	(*DropRoleStmt)(nil),                 // 174: pg_query.DropRoleStmt
	(*LockStmt)(nil),                     // 175: pg_query.LockStmt
	(*ConstraintsSetStmt)(nil),           // 176: pg_query.ConstraintsSetStmt
	(*ReindexStmt)(nil),                  // 177: pg_query.ReindexStmt
	(*CheckPointStmt)(nil),               // 178: pg_query.CheckPointStmt
	(*CreateSchemaStmt)(nil),             // 179: pg_query.CreateSchemaStmt
	(*AlterDatabaseStmt)(nil),            // 180: pg_query.AlterDatabaseStmt
	(*AlterDatabaseRefreshCollStmt)(nil), // 181: pg_query.AlterDatabaseRefreshCollStmt
	(*AlterDatabaseSetStmt)(nil),         // 182: pg_query.AlterDatabaseSetStmt
	(*AlterRoleSetStmt)(nil),             // 183: pg_query.AlterRoleSetStmt
	(*CreateConversionStmt)(nil),         // 184: pg_query.CreateConversionStmt
	(*CreateCastStmt)(nil),               // 185: pg_query.CreateCastStmt
	(*CreateOpClassStmt)(nil),            // 186: pg_query.CreateOpClassStmt
	(*CreateOpFamilyStmt)(nil),           // 187: pg_query.CreateOpFamilyStmt
	(*AlterOpFamilyStmt)(nil),            // 188: pg_query.AlterOpFamilyStmt
	(*PrepareStmt)(nil),                  // 189: pg_query.PrepareStmt
	(*ExecuteStmt)(nil),                  // 190: pg_query.ExecuteStmt
	(*DeallocateStmt)(nil),               // 191: pg_query.DeallocateStmt
	(*DeclareCursorStmt)(nil),            // 192: pg_query.DeclareCursorStmt
	(*CreateTableSpaceStmt)(nil),         // 193: pg_query.CreateTableSpaceStmt
	(*DropTableSpaceStmt)(nil),           // 194: pg_query.DropTableSpaceStmt
	(*AlterObjectDependsStmt)(nil),       // 195: pg_query.AlterObjectDependsStmt
	(*AlterObjectSchemaStmt)(nil),        // 196: pg_query.AlterObjectSchemaStmt
	(*AlterOwnerStmt)(nil),               // 197: pg_query.AlterOwnerStmt
	(*AlterOperatorStmt)(nil),            // 198: pg_query.AlterOperatorStmt
	(*AlterTypeStmt)(nil),                // 199: pg_query.AlterTypeStmt
	(*DropOwnedStmt)(nil),                // 200: pg_query.DropOwnedStmt
	(*ReassignOwnedStmt)(nil),            // 201: pg_query.ReassignOwnedStmt
	(*CompositeTypeStmt)(nil),            // 202: pg_query.CompositeTypeStmt
	(*CreateEnumStmt)(nil),               // 203: pg_query.CreateEnumStmt
	(*CreateRangeStmt)(nil),              // 204: pg_query.CreateRangeStmt
	(*AlterEnumStmt)(nil),                // 205: pg_query.AlterEnumStmt
	(*AlterTSDictionaryStmt)(nil),        // 206: pg_query.AlterTSDictionaryStmt
	(*AlterTSConfigurationStmt)(nil),     // 207: pg_query.AlterTSConfigurationStmt
	(*CreateFdwStmt)(nil),                // 208: pg_query.CreateFdwStmt
	(*AlterFdwStmt)(nil),                 // 209: pg_query.AlterFdwStmt
	(*CreateForeignServerStmt)(nil),      // 210: pg_query.CreateForeignServerStmt
	(*AlterForeignServerStmt)(nil),       // 211: pg_query.AlterForeignServerStmt
	(*CreateUserMappingStmt)(nil),        // 212: pg_query.CreateUserMappingStmt
	(*AlterUserMappingStmt)(nil),         // 213: pg_query.AlterUserMappingStmt
	(*DropUserMappingStmt)(nil),          // 214: pg_query.DropUserMappingStmt
	(*AlterTableSpaceOptionsStmt)(nil),   // 215: pg_query.AlterTableSpaceOptionsStmt
	(*AlterTableMoveAllStmt)(nil),        // 216: pg_query.AlterTableMoveAllStmt
	(*SecLabelStmt)(nil),                 // 217: pg_query.SecLabelStmt
	(*CreateForeignTableStmt)(nil),       // 218: pg_query.CreateForeignTableStmt
	(*ImportForeignSchemaStmt)(nil),      // 219: pg_query.ImportForeignSchemaStmt
	(*CreateExtensionStmt)(nil),          // 220: pg_query.CreateExtensionStmt
	(*AlterExtensionStmt)(nil),           // 221: pg_query.AlterExtensionStmt
	(*AlterExtensionContentsStmt)(nil),   // 222: pg_query.AlterExtensionContentsStmt
	(*CreateEventTrigStmt)(nil),          // 223: pg_query.CreateEventTrigStmt
	(*AlterEventTrigStmt)(nil),           // 224: pg_query.AlterEventTrigStmt
	(*RefreshMatViewStmt)(nil),           // 225: pg_query.RefreshMatViewStmt
	(*ReplicaIdentityStmt)(nil),          // 226: pg_query.ReplicaIdentityStmt
	(*AlterSystemStmt)(nil),              // 227: pg_query.AlterSystemStmt
	(*CreatePolicyStmt)(nil),             // 228: pg_query.CreatePolicyStmt
	(*AlterPolicyStmt)(nil),              // 229: pg_query.AlterPolicyStmt
	(*CreateTransformStmt)(nil),          // 230: pg_query.CreateTransformStmt
	(*CreateAmStmt)(nil),                 // 231: pg_query.CreateAmStmt
	(*CreatePublicationStmt)(nil),        // 232: pg_query.CreatePublicationStmt
	(*AlterPublicationStmt)(nil),         // 233: pg_query.AlterPublicationStmt
	(*CreateSubscriptionStmt)(nil),       // 234: pg_query.CreateSubscriptionStmt
	(*AlterSubscriptionStmt)(nil),        // 235: pg_query.AlterSubscriptionStmt
	(*DropSubscriptionStmt)(nil),         // 236: pg_query.DropSubscriptionStmt
	(*CreateStatsStmt)(nil),              // 237: pg_query.CreateStatsStmt
	(*AlterCollationStmt)(nil),           // 238: pg_query.AlterCollationStmt
	(*CallStmt)(nil),                     // 239: pg_query.CallStmt
	(*AlterStatsStmt)(nil),               // 240: pg_query.AlterStatsStmt
	(*A_Expr)(nil),                       // 241: pg_query.A_Expr
	(*ColumnRef)(nil),                    // 242: pg_query.ColumnRef
	(*ParamRef)(nil),                     // 243: pg_query.ParamRef
	(*FuncCall)(nil),                     // 244: pg_query.FuncCall
	(*A_Star)(nil),                       // 245: pg_query.A_Star
	(*A_Indices)(nil),                    // 246: pg_query.A_Indices
	(*A_Indirection)(nil),                // 247: pg_query.A_Indirection
	(*A_ArrayExpr)(nil),                  // 248: pg_query.A_ArrayExpr
	(*ResTarget)(nil),                    // 249: pg_query.ResTarget
	(*MultiAssignRef)(nil),               // 250: pg_query.MultiAssignRef
	(*TypeCast)(nil),                     // 251: pg_query.TypeCast
	(*CollateClause)(nil),                // 252: pg_query.CollateClause
	(*SortBy)(nil),                       // 253: pg_query.SortBy
	(*WindowDef)(nil),                    // 254: pg_query.WindowDef
	(*RangeSubselect)(nil),               // 255: pg_query.RangeSubselect
	(*RangeFunction)(nil),                // 256: pg_query.RangeFunction
	(*RangeTableSample)(nil),             // 257: pg_query.RangeTableSample
	(*RangeTableFunc)(nil),               // 258: pg_query.RangeTableFunc
	(*RangeTableFuncCol)(nil),            // 259: pg_query.RangeTableFuncCol
	(*TypeName)(nil),                     // 260: pg_query.TypeName
	(*ColumnDef)(nil),                    // 261: pg_query.ColumnDef
	(*IndexElem)(nil),                    // 262: pg_query.IndexElem
	(*StatsElem)(nil),                    // 263: pg_query.StatsElem
	(*Constraint)(nil),                   // 264: pg_query.Constraint
	(*DefElem)(nil),                      // 265: pg_query.DefElem
	(*RangeTblEntry)(nil),                // 266: pg_query.RangeTblEntry
	(*RangeTblFunction)(nil),             // 267: pg_query.RangeTblFunction
	(*TableSampleClause)(nil),            // 268: pg_query.TableSampleClause
	(*WithCheckOption)(nil),              // 269: pg_query.WithCheckOption
	(*SortGroupClause)(nil),              // 270: pg_query.SortGroupClause
	(*GroupingSet)(nil),                  // 271: pg_query.GroupingSet
	(*WindowClause)(nil),                 // 272: pg_query.WindowClause
	(*ObjectWithArgs)(nil),               // 273: pg_query.ObjectWithArgs
	(*AccessPriv)(nil),                   // 274: pg_query.AccessPriv
	(*CreateOpClassItem)(nil),            // 275: pg_query.CreateOpClassItem
	(*TableLikeClause)(nil),              // 276: pg_query.TableLikeClause
	(*FunctionParameter)(nil),            // 277: pg_query.FunctionParameter
	(*LockingClause)(nil),                // 278: pg_query.LockingClause
	(*RowMarkClause)(nil),                // 279: pg_query.RowMarkClause
	(*XmlSerialize)(nil),                 // 280: pg_query.XmlSerialize
	(*WithClause)(nil),                   // 281: pg_query.WithClause
	(*InferClause)(nil),                  // 282: pg_query.InferClause
	(*OnConflictClause)(nil),             // 283: pg_query.OnConflictClause
	(*CTESearchClause)(nil),              // 284: pg_query.CTESearchClause
	(*CTECycleClause)(nil),               // 285: pg_query.CTECycleClause
	(*CommonTableExpr)(nil),              // 286: pg_query.CommonTableExpr
	(*MergeWhenClause)(nil),              // 287: pg_query.MergeWhenClause
	(*RoleSpec)(nil),                     // 288: pg_query.RoleSpec
	(*TriggerTransition)(nil),            // 289: pg_query.TriggerTransition
	(*PartitionElem)(nil),                // 290: pg_query.PartitionElem
	(*PartitionSpec)(nil),                // 291: pg_query.PartitionSpec
	(*PartitionBoundSpec)(nil),           // 292: pg_query.PartitionBoundSpec
	(*PartitionRangeDatum)(nil),          // 293: pg_query.PartitionRangeDatum
	(*PartitionCmd)(nil),                 // 294: pg_query.PartitionCmd
	(*VacuumRelation)(nil),               // 295: pg_query.VacuumRelation
	(*PublicationObjSpec)(nil),           // 296: pg_query.PublicationObjSpec
	(*PublicationTable)(nil),             // 297: pg_query.PublicationTable
	(*InlineCodeBlock)(nil),              // 298: pg_query.InlineCodeBlock
	(*CallContext)(nil),                  // 299: pg_query.CallContext
	(*ScanToken)(nil),                    // 300: pg_query.ScanToken
}
var file_pg_query_proto_depIdxs = []int32{
	122, // 0: pg_query.ParseResult.stmts:type_name -> pg_query.RawStmt
	300, // 1: pg_query.ScanResult.tokens:type_name -> pg_query.ScanToken
	71,  // 2: pg_query.Node.alias:type_name -> pg_query.Alias
	72,  // 3: pg_query.Node.range_var:type_name -> pg_query.RangeVar
	73,  // 4: pg_query.Node.table_func:type_name -> pg_query.TableFunc
	74,  // 5: pg_query.Node.var:type_name -> pg_query.Var
	75,  // 6: pg_query.Node.param:type_name -> pg_query.Param
	76,  // 7: pg_query.Node.aggref:type_name -> pg_query.Aggref
	77,  // 8: pg_query.Node.grouping_func:type_name -> pg_query.GroupingFunc
	78,  // 9: pg_query.Node.window_func:type_name -> pg_query.WindowFunc
	79,  // 10: pg_query.Node.subscripting_ref:type_name -> pg_query.SubscriptingRef
	80,  // 11: pg_query.Node.func_expr:type_name -> pg_query.FuncExpr
	81,  // 12: pg_query.Node.named_arg_expr:type_name -> pg_query.NamedArgExpr
	82,  // 13: pg_query.Node.op_expr:type_name -> pg_query.OpExpr
	83,  // 14: pg_query.Node.distinct_expr:type_name -> pg_query.DistinctExpr
	84,  // 15: pg_query.Node.null_if_expr:type_name -> pg_query.NullIfExpr
	85,  // 16: pg_query.Node.scalar_array_op_expr:type_name -> pg_query.ScalarArrayOpExpr
	86,  // 17: pg_query.Node.bool_expr:type_name -> pg_query.BoolExpr
	87,  // 18: pg_query.Node.sub_link:type_name -> pg_query.SubLink
	88,  // 19: pg_query.Node.sub_plan:type_name -> pg_query.SubPlan
	89,  // 20: pg_query.Node.alternative_sub_plan:type_name -> pg_query.AlternativeSubPlan
	90,  // 21: pg_query.Node.field_select:type_name -> pg_query.FieldSelect
	91,  // 22: pg_query.Node.field_store:type_name -> pg_query.FieldStore
	92,  // 23: pg_query.Node.relabel_type:type_name -> pg_query.RelabelType
	93,  // 24: pg_query.Node.coerce_via_io:type_name -> pg_query.CoerceViaIO
	94,  // 25: pg_query.Node.array_coerce_expr:type_name -> pg_query.ArrayCoerceExpr
	95,  // 26: pg_query.Node.convert_rowtype_expr:type_name -> pg_query.ConvertRowtypeExpr
	96,  // 27: pg_query.Node.collate_expr:type_name -> pg_query.CollateExpr
	97,  // 28: pg_query.Node.case_expr:type_name -> pg_query.CaseExpr
	98,  // 29: pg_query.Node.case_when:type_name -> pg_query.CaseWhen
	99,  // 30: pg_query.Node.case_test_expr:type_name -> pg_query.CaseTestExpr
	100, // 31: pg_query.Node.array_expr:type_name -> pg_query.ArrayExpr
	101, // 32: pg_query.Node.row_expr:type_name -> pg_query.RowExpr
	102, // 33: pg_query.Node.row_compare_expr:type_name -> pg_query.RowCompareExpr
	103, // 34: pg_query.Node.coalesce_expr:type_name -> pg_query.CoalesceExpr
	104, // 35: pg_query.Node.min_max_expr:type_name -> pg_query.MinMaxExpr
	105, // 36: pg_query.Node.sqlvalue_function:type_name -> pg_query.SQLValueFunction
	106, // 37: pg_query.Node.xml_expr:type_name -> pg_query.XmlExpr
	107, // 38: pg_query.Node.null_test:type_name -> pg_query.NullTest
	108, // 39: pg_query.Node.boolean_test:type_name -> pg_query.BooleanTest
	109, // 40: pg_query.Node.coerce_to_domain:type_name -> pg_query.CoerceToDomain
	110, // 41: pg_query.Node.coerce_to_domain_value:type_name -> pg_query.CoerceToDomainValue
	111, // 42: pg_query.Node.set_to_default:type_name -> pg_query.SetToDefault
	112, // 43: pg_query.Node.current_of_expr:type_name -> pg_query.CurrentOfExpr
	113, // 44: pg_query.Node.next_value_expr:type_name -> pg_query.NextValueExpr
	114, // 45: pg_query.Node.inference_elem:type_name -> pg_query.InferenceElem
	115, // 46: pg_query.Node.target_entry:type_name -> pg_query.TargetEntry
	116, // 47: pg_query.Node.range_tbl_ref:type_name -> pg_query.RangeTblRef
	117, // 48: pg_query.Node.join_expr:type_name -> pg_query.JoinExpr
	118, // 49: pg_query.Node.from_expr:type_name -> pg_query.FromExpr
	119, // 50: pg_query.Node.on_conflict_expr:type_name -> pg_query.OnConflictExpr
	120, // 51: pg_query.Node.into_clause:type_name -> pg_query.IntoClause
	121, // 52: pg_query.Node.merge_action:type_name -> pg_query.MergeAction
	122, // 53: pg_query.Node.raw_stmt:type_name -> pg_query.RawStmt
	123, // 54: pg_query.Node.query:type_name -> pg_query.Query
	124, // 55: pg_query.Node.insert_stmt:type_name -> pg_query.InsertStmt
	125, // 56: pg_query.Node.delete_stmt:type_name -> pg_query.DeleteStmt
	126, // 57: pg_query.Node.update_stmt:type_name -> pg_query.UpdateStmt
	127, // 58: pg_query.Node.merge_stmt:type_name -> pg_query.MergeStmt
	128, // 59: pg_query.Node.select_stmt:type_name -> pg_query.SelectStmt
	129, // 60: pg_query.Node.return_stmt:type_name -> pg_query.ReturnStmt
	130, // 61: pg_query.Node.plassign_stmt:type_name -> pg_query.PLAssignStmt
	131, // 62: pg_query.Node.alter_table_stmt:type_name -> pg_query.AlterTableStmt
	132, // 63: pg_query.Node.alter_table_cmd:type_name -> pg_query.AlterTableCmd
	133, // 64: pg_query.Node.alter_domain_stmt:type_name -> pg_query.AlterDomainStmt
	134, // 65: pg_query.Node.set_operation_stmt:type_name -> pg_query.SetOperationStmt
	135, // 66: pg_query.Node.grant_stmt:type_name -> pg_query.GrantStmt
	136, // 67: pg_query.Node.grant_role_stmt:type_name -> pg_query.GrantRoleStmt
	137, // 68: pg_query.Node.alter_default_privileges_stmt:type_name -> pg_query.AlterDefaultPrivilegesStmt
	138, // 69: pg_query.Node.close_portal_stmt:type_name -> pg_query.ClosePortalStmt
	139, // 70: pg_query.Node.cluster_stmt:type_name -> pg_query.ClusterStmt
	140, // 71: pg_query.Node.copy_stmt:type_name -> pg_query.CopyStmt
	141, // 72: pg_query.Node.create_stmt:type_name -> pg_query.CreateStmt
	142, // 73: pg_query.Node.define_stmt:type_name -> pg_query.DefineStmt
	143, // 74: pg_query.Node.drop_stmt:type_name -> pg_query.DropStmt
	144, // 75: pg_query.Node.truncate_stmt:type_name -> pg_query.TruncateStmt
	145, // 76: pg_query.Node.comment_stmt:type_name -> pg_query.CommentStmt
	146, // 77: pg_query.Node.fetch_stmt:type_name -> pg_query.FetchStmt
	147, // 78: pg_query.Node.index_stmt:type_name -> pg_query.IndexStmt
	148, // 79: pg_query.Node.create_function_stmt:type_name -> pg_query.CreateFunctionStmt
	149, // 80: pg_query.Node.alter_function_stmt:type_name -> pg_query.AlterFunctionStmt
	150, // 81: pg_query.Node.do_stmt:type_name -> pg_query.DoStmt
	151, // 82: pg_query.Node.rename_stmt:type_name -> pg_query.RenameStmt
	152, // 83: pg_query.Node.rule_stmt:type_name -> pg_query.RuleStmt
	153, // 84: pg_query.Node.notify_stmt:type_name -> pg_query.NotifyStmt
	154, // 85: pg_query.Node.listen_stmt:type_name -> pg_query.ListenStmt
	155, // 86: pg_query.Node.unlisten_stmt:type_name -> pg_query.UnlistenStmt
	156, // 87: pg_query.Node.transaction_stmt:type_name -> pg_query.TransactionStmt
	157, // 88: pg_query.Node.view_stmt:type_name -> pg_query.ViewStmt
	158, // 89: pg_query.Node.load_stmt:type_name -> pg_query.LoadStmt
	159, // 90: pg_query.Node.create_domain_stmt:type_name -> pg_query.CreateDomainStmt
	160, // 91: pg_query.Node.createdb_stmt:type_name -> pg_query.CreatedbStmt
	161, // 92: pg_query.Node.dropdb_stmt:type_name -> pg_query.DropdbStmt
	162, // 93: pg_query.Node.vacuum_stmt:type_name -> pg_query.VacuumStmt
	163, // 94: pg_query.Node.explain_stmt:type_name -> pg_query.ExplainStmt
	164, // 95: pg_query.Node.create_table_as_stmt:type_name -> pg_query.CreateTableAsStmt
	165, // 96: pg_query.Node.create_seq_stmt:type_name -> pg_query.CreateSeqStmt
	166, // 97: pg_query.Node.alter_seq_stmt:type_name -> pg_query.AlterSeqStmt
	167, // 98: pg_query.Node.variable_set_stmt:type_name -> pg_query.VariableSetStmt
	168, // 99: pg_query.Node.variable_show_stmt:type_name -> pg_query.VariableShowStmt
	169, // 100: pg_query.Node.discard_stmt:type_name -> pg_query.DiscardStmt
	170, // 101: pg_query.Node.create_trig_stmt:type_name -> pg_query.CreateTrigStmt
	171, // 102: pg_query.Node.create_plang_stmt:type_name -> pg_query.CreatePLangStmt
	172, // 103: pg_query.Node.create_role_stmt:type_name -> pg_query.CreateRoleStmt
	173, // 104: pg_query.Node.alter_role_stmt:type_name -> pg_query.AlterRoleStmt
	174, // 105: pg_query.Node.drop_role_stmt:type_name -> pg_query.DropRoleStmt
	175, // 106: pg_query.Node.lock_stmt:type_name -> pg_query.LockStmt
	176, // 107: pg_query.Node.constraints_set_stmt:type_name -> pg_query.ConstraintsSetStmt
	177, // 108: pg_query.Node.reindex_stmt:type_name -> pg_query.ReindexStmt
	178, // 109: pg_query.Node.check_point_stmt:type_name -> pg_query.CheckPointStmt
	179, // 110: pg_query.Node.create_schema_stmt:type_name -> pg_query.CreateSchemaStmt
	180, // 111: pg_query.Node.alter_database_stmt:type_name -> pg_query.AlterDatabaseStmt
	181, // 112: pg_query.Node.alter_database_refresh_coll_stmt:type_name -> pg_query.AlterDatabaseRefreshCollStmt
	182, // 113: pg_query.Node.alter_database_set_stmt:type_name -> pg_query.AlterDatabaseSetStmt
	183, // 114: pg_query.Node.alter_role_set_stmt:type_name -> pg_query.AlterRoleSetStmt
	184, // 115: pg_query.Node.create_conversion_stmt:type_name -> pg_query.CreateConversionStmt
	185, // 116: pg_query.Node.create_cast_stmt:type_name -> pg_query.CreateCastStmt
	186, // 117: pg_query.Node.create_op_class_stmt:type_name -> pg_query.CreateOpClassStmt
	187, // 118: pg_query.Node.create_op_family_stmt:type_name -> pg_query.CreateOpFamilyStmt
	188, // 119: pg_query.Node.alter_op_family_stmt:type_name -> pg_query.AlterOpFamilyStmt
	189, // 120: pg_query.Node.prepare_stmt:type_name -> pg_query.PrepareStmt
	190, // 121: pg_query.Node.execute_stmt:type_name -> pg_query.ExecuteStmt
	191, // 122: pg_query.Node.deallocate_stmt:type_name -> pg_query.DeallocateStmt
	192, // 123: pg_query.Node.declare_cursor_stmt:type_name -> pg_query.DeclareCursorStmt
	193, // 124: pg_query.Node.create_table_space_stmt:type_name -> pg_query.CreateTableSpaceStmt
	194, // 125: pg_query.Node.drop_table_space_stmt:type_name -> pg_query.DropTableSpaceStmt
	195, // 126: pg_query.Node.alter_object_depends_stmt:type_name -> pg_query.AlterObjectDependsStmt
	196, // 127: pg_query.Node.alter_object_schema_stmt:type_name -> pg_query.AlterObjectSchemaStmt
	197, // 128: pg_query.Node.alter_owner_stmt:type_name -> pg_query.AlterOwnerStmt
	198, // 129: pg_query.Node.alter_operator_stmt:type_name -> pg_query.AlterOperatorStmt
	199, // 130: pg_query.Node.alter_type_stmt:type_name -> pg_query.AlterTypeStmt
	200, // 131: pg_query.Node.drop_owned_stmt:type_name -> pg_query.DropOwnedStmt
	201, // 132: pg_query.Node.reassign_owned_stmt:type_name -> pg_query.ReassignOwnedStmt
	202, // 133: pg_query.Node.composite_type_stmt:type_name -> pg_query.CompositeTypeStmt
	203, // 134: pg_query.Node.create_enum_stmt:type_name -> pg_query.CreateEnumStmt
	204, // 135: pg_query.Node.create_range_stmt:type_name -> pg_query.CreateRangeStmt
	205, // 136: pg_query.Node.alter_enum_stmt:type_name -> pg_query.AlterEnumStmt
	206, // 137: pg_query.Node.alter_tsdictionary_stmt:type_name -> pg_query.AlterTSDictionaryStmt
	207, // 138: pg_query.Node.alter_tsconfiguration_stmt:type_name -> pg_query.AlterTSConfigurationStmt
	208, // 139: pg_query.Node.create_fdw_stmt:type_name -> pg_query.CreateFdwStmt
	209, // 140: pg_query.Node.alter_fdw_stmt:type_name -> pg_query.AlterFdwStmt
	210, // 141: pg_query.Node.create_foreign_server_stmt:type_name -> pg_query.CreateForeignServerStmt
	211, // 142: pg_query.Node.alter_foreign_server_stmt:type_name -> pg_query.AlterForeignServerStmt
	212, // 143: pg_query.Node.create_user_mapping_stmt:type_name -> pg_query.CreateUserMappingStmt
	213, // 144: pg_query.Node.alter_user_mapping_stmt:type_name -> pg_query.AlterUserMappingStmt
	214, // 145: pg_query.Node.drop_user_mapping_stmt:type_name -> pg_query.DropUserMappingStmt
	215, // 146: pg_query.Node.alter_table_space_options_stmt:type_name -> pg_query.AlterTableSpaceOptionsStmt
	216, // 147: pg_query.Node.alter_table_move_all_stmt:type_name -> pg_query.AlterTableMoveAllStmt
	217, // 148: pg_query.Node.sec_label_stmt:type_name -> pg_query.SecLabelStmt
	218, // 149: pg_query.Node.create_foreign_table_stmt:type_name -> pg_query.CreateForeignTableStmt
	219, // 150: pg_query.Node.import_foreign_schema_stmt:type_name -> pg_query.ImportForeignSchemaStmt
	220, // 151: pg_query.Node.create_extension_stmt:type_name -> pg_query.CreateExtensionStmt
	221, // 152: pg_query.Node.alter_extension_stmt:type_name -> pg_query.AlterExtensionStmt
	222, // 153: pg_query.Node.alter_extension_contents_stmt:type_name -> pg_query.AlterExtensionContentsStmt
	223, // 154: pg_query.Node.create_event_trig_stmt:type_name -> pg_query.CreateEventTrigStmt
	224, // 155: pg_query.Node.alter_event_trig_stmt:type_name -> pg_query.AlterEventTrigStmt
	225, // 156: pg_query.Node.refresh_mat_view_stmt:type_name -> pg_query.RefreshMatViewStmt
	226, // 157: pg_query.Node.replica_identity_stmt:type_name -> pg_query.ReplicaIdentityStmt
	227, // 158: pg_query.Node.alter_system_stmt:type_name -> pg_query.AlterSystemStmt
	228, // 159: pg_query.Node.create_policy_stmt:type_name -> pg_query.CreatePolicyStmt
	229, // 160: pg_query.Node.alter_policy_stmt:type_name -> pg_query.AlterPolicyStmt
	230, // 161: pg_query.Node.create_transform_stmt:type_name -> pg_query.CreateTransformStmt
	231, // 162: pg_query.Node.create_am_stmt:type_name -> pg_query.CreateAmStmt
	232, // 163: pg_query.Node.create_publication_stmt:type_name -> pg_query.CreatePublicationStmt
	233, // 164: pg_query.Node.alter_publication_stmt:type_name -> pg_query.AlterPublicationStmt
	234, // 165: pg_query.Node.create_subscription_stmt:type_name -> pg_query.CreateSubscriptionStmt
	235, // 166: pg_query.Node.alter_subscription_stmt:type_name -> pg_query.AlterSubscriptionStmt
	236, // 167: pg_query.Node.drop_subscription_stmt:type_name -> pg_query.DropSubscriptionStmt
	237, // 168: pg_query.Node.create_stats_stmt:type_name -> pg_query.CreateStatsStmt
	238, // 169: pg_query.Node.alter_collation_stmt:type_name -> pg_query.AlterCollationStmt
	239, // 170: pg_query.Node.call_stmt:type_name -> pg_query.CallStmt
	240, // 171: pg_query.Node.alter_stats_stmt:type_name -> pg_query.AlterStatsStmt
	241, // 172: pg_query.Node.a_expr:type_name -> pg_query.A_Expr
	242, // 173: pg_query.Node.column_ref:type_name -> pg_query.ColumnRef
	243, // 174: pg_query.Node.param_ref:type_name -> pg_query.ParamRef
	244, // 175: pg_query.Node.func_call:type_name -> pg_query.FuncCall
	245, // 176: pg_query.Node.a_star:type_name -> pg_query.A_Star
	246, // 177: pg_query.Node.a_indices:type_name -> pg_query.A_Indices
	247, // 178: pg_query.Node.a_indirection:type_name -> pg_query.A_Indirection
	248, // 179: pg_query.Node.a_array_expr:type_name -> pg_query.A_ArrayExpr
	249, // 180: pg_query.Node.res_target:type_name -> pg_query.ResTarget
	250, // 181: pg_query.Node.multi_assign_ref:type_name -> pg_query.MultiAssignRef
	251, // 182: pg_query.Node.type_cast:type_name -> pg_query.TypeCast
	252, // 183: pg_query.Node.collate_clause:type_name -> pg_query.CollateClause
	253, // 184: pg_query.Node.sort_by:type_name -> pg_query.SortBy
	254, // 185: pg_query.Node.window_def:type_name -> pg_query.WindowDef
	255, // 186: pg_query.Node.range_subselect:type_name -> pg_query.RangeSubselect
	256, // 187: pg_query.Node.range_function:type_name -> pg_query.RangeFunction
	257, // 188: pg_query.Node.range_table_sample:type_name -> pg_query.RangeTableSample
	258, // 189: pg_query.Node.range_table_func:type_name -> pg_query.RangeTableFunc
	259, // 190: pg_query.Node.range_table_func_col:type_name -> pg_query.RangeTableFuncCol
	260, // 191: pg_query.Node.type_name:type_name -> pg_query.TypeName
	261, // 192: pg_query.Node.column_def:type_name -> pg_query.ColumnDef
	262, // 193: pg_query.Node.index_elem:type_name -> pg_query.IndexElem
	263, // 194: pg_query.Node.stats_elem:type_name -> pg_query.StatsElem
	264, // 195: pg_query.Node.constraint:type_name -> pg_query.Constraint
	265, // 196: pg_query.Node.def_elem:type_name -> pg_query.DefElem
	266, // 197: pg_query.Node.range_tbl_entry:type_name -> pg_query.RangeTblEntry
	267, // 198: pg_query.Node.range_tbl_function:type_name -> pg_query.RangeTblFunction
	268, // 199: pg_query.Node.table_sample_clause:type_name -> pg_query.TableSampleClause
	269, // 200: pg_query.Node.with_check_option:type_name -> pg_query.WithCheckOption
	270, // 201: pg_query.Node.sort_group_clause:type_name -> pg_query.SortGroupClause
	271, // 202: pg_query.Node.grouping_set:type_name -> pg_query.GroupingSet
	272, // 203: pg_query.Node.window_clause:type_name -> pg_query.WindowClause
	273, // 204: pg_query.Node.object_with_args:type_name -> pg_query.ObjectWithArgs
	274, // 205: pg_query.Node.access_priv:type_name -> pg_query.AccessPriv
	275, // 206: pg_query.Node.create_op_class_item:type_name -> pg_query.CreateOpClassItem
	276, // 207: pg_query.Node.table_like_clause:type_name -> pg_query.TableLikeClause
	277, // 208: pg_query.Node.function_parameter:type_name -> pg_query.FunctionParameter
	278, // 209: pg_query.Node.locking_clause:type_name -> pg_query.LockingClause
	279, // 210: pg_query.Node.row_mark_clause:type_name -> pg_query.RowMarkClause
	280, // 211: pg_query.Node.xml_serialize:type_name -> pg_query.XmlSerialize
	281, // 212: pg_query.Node.with_clause:type_name -> pg_query.WithClause
	282, // 213: pg_query.Node.infer_clause:type_name -> pg_query.InferClause
	283, // 214: pg_query.Node.on_conflict_clause:type_name -> pg_query.OnConflictClause
	284, // 215: pg_query.Node.ctesearch_clause:type_name -> pg_query.CTESearchClause
	285, // 216: pg_query.Node.ctecycle_clause:type_name -> pg_query.CTECycleClause
	286, // 217: pg_query.Node.common_table_expr:type_name -> pg_query.CommonTableExpr
	287, // 218: pg_query.Node.merge_when_clause:type_name -> pg_query.MergeWhenClause
	288, // 219: pg_query.Node.role_spec:type_name -> pg_query.RoleSpec
	289, // 220: pg_query.Node.trigger_transition:type_name -> pg_query.TriggerTransition
	290, // 221: pg_query.Node.partition_elem:type_name -> pg_query.PartitionElem
	291, // 222: pg_query.Node.partition_spec:type_name -> pg_query.PartitionSpec
	292, // 223: pg_query.Node.partition_bound_spec:type_name -> pg_query.PartitionBoundSpec
	293, // 224: pg_query.Node.partition_range_datum:type_name -> pg_query.PartitionRangeDatum
	294, // 225: pg_query.Node.partition_cmd:type_name -> pg_query.PartitionCmd
	295, // 226: pg_query.Node.vacuum_relation:type_name -> pg_query.VacuumRelation
	296, // 227: pg_query.Node.publication_obj_spec:type_name -> pg_query.PublicationObjSpec
	297, // 228: pg_query.Node.publication_table:type_name -> pg_query.PublicationTable
	298, // 229: pg_query.Node.inline_code_block:type_name -> pg_query.InlineCodeBlock
	299, // 230: pg_query.Node.call_context:type_name -> pg_query.CallContext
	62,  // 231: pg_query.Node.integer:type_name -> pg_query.Integer
	63,  // 232: pg_query.Node.float:type_name -> pg_query.Float
	64,  // 233: pg_query.Node.boolean:type_name -> pg_query.Boolean
	65,  // 234: pg_query.Node.string:type_name -> pg_query.String
	66,  // 235: pg_query.Node.bit_string:type_name -> pg_query.BitString
	67,  // 236: pg_query.Node.list:type_name -> pg_query.List
	69,  // 237: pg_query.Node.int_list:type_name -> pg_query.IntList
	68,  // 238: pg_query.Node.oid_list:type_name -> pg_query.OidList
	70,  // 239: pg_query.Node.a_const:type_name -> pg_query.A_Const
	61,  // 240: pg_query.List.items:type_name -> pg_query.Node
	61,  // 241: pg_query.OidList.items:type_name -> pg_query.Node
	61,  // 242: pg_query.IntList.items:type_name -> pg_query.Node
	62,  // 243: pg_query.A_Const.ival:type_name -> pg_query.Integer
	63,  // 244: pg_query.A_Const.fval:type_name -> pg_query.Float
	64,  // 245: pg_query.A_Const.boolval:type_name -> pg_query.Boolean
	65,  // 246: pg_query.A_Const.sval:type_name -> pg_query.String
	66,  // 247: pg_query.A_Const.bsval:type_name -> pg_query.BitString
	61,  // 248: pg_query.Alias.colnames:type_name -> pg_query.Node
	71,  // 249: pg_query.RangeVar.alias:type_name -> pg_query.Alias
	61,  // 250: pg_query.TableFunc.ns_uris:type_name -> pg_query.Node
	61,  // 251: pg_query.TableFunc.ns_names:type_name -> pg_query.Node
	61,  // 252: pg_query.TableFunc.docexpr:type_name -> pg_query.Node
	61,  // 253: pg_query.TableFunc.rowexpr:type_name -> pg_query.Node
	61,  // 254: pg_query.TableFunc.colnames:type_name -> pg_query.Node
	61,  // 255: pg_query.TableFunc.coltypes:type_name -> pg_query.Node
	61,  // 256: pg_query.TableFunc.coltypmods:type_name -> pg_query.Node
	61,  // 257: pg_query.TableFunc.colcollations:type_name -> pg_query.Node
	61,  // 258: pg_query.TableFunc.colexprs:type_name -> pg_query.Node
	61,  // 259: pg_query.TableFunc.coldefexprs:type_name -> pg_query.Node
	61,  // 260: pg_query.Var.xpr:type_name -> pg_query.Node
	61,  // 261: pg_query.Param.xpr:type_name -> pg_query.Node
	34,  // 262: pg_query.Param.paramkind:type_name -> pg_query.ParamKind
	61,  // 263: pg_query.Aggref.xpr:type_name -> pg_query.Node
	61,  // 264: pg_query.Aggref.aggargtypes:type_name -> pg_query.Node
	61,  // 265: pg_query.Aggref.aggdirectargs:type_name -> pg_query.Node
	61,  // 266: pg_query.Aggref.args:type_name -> pg_query.Node
	61,  // 267: pg_query.Aggref.aggorder:type_name -> pg_query.Node
	61,  // 268: pg_query.Aggref.aggdistinct:type_name -> pg_query.Node
	61,  // 269: pg_query.Aggref.aggfilter:type_name -> pg_query.Node
	49,  // 270: pg_query.Aggref.aggsplit:type_name -> pg_query.AggSplit
	61,  // 271: pg_query.GroupingFunc.xpr:type_name -> pg_query.Node
	61,  // 272: pg_query.GroupingFunc.args:type_name -> pg_query.Node
	61,  // 273: pg_query.GroupingFunc.refs:type_name -> pg_query.Node
	61,  // 274: pg_query.GroupingFunc.cols:type_name -> pg_query.Node
	61,  // 275: pg_query.WindowFunc.xpr:type_name -> pg_query.Node
	61,  // 276: pg_query.WindowFunc.args:type_name -> pg_query.Node
	61,  // 277: pg_query.WindowFunc.aggfilter:type_name -> pg_query.Node
	61,  // 278: pg_query.SubscriptingRef.xpr:type_name -> pg_query.Node
	61,  // 279: pg_query.SubscriptingRef.refupperindexpr:type_name -> pg_query.Node
	61,  // 280: pg_query.SubscriptingRef.reflowerindexpr:type_name -> pg_query.Node
	61,  // 281: pg_query.SubscriptingRef.refexpr:type_name -> pg_query.Node
	61,  // 282: pg_query.SubscriptingRef.refassgnexpr:type_name -> pg_query.Node
	61,  // 283: pg_query.FuncExpr.xpr:type_name -> pg_query.Node
	36,  // 284: pg_query.FuncExpr.funcformat:type_name -> pg_query.CoercionForm
	61,  // 285: pg_query.FuncExpr.args:type_name -> pg_query.Node
	61,  // 286: pg_query.NamedArgExpr.xpr:type_name -> pg_query.Node
	61,  // 287: pg_query.NamedArgExpr.arg:type_name -> pg_query.Node
	61,  // 288: pg_query.OpExpr.xpr:type_name -> pg_query.Node
	61,  // 289: pg_query.OpExpr.args:type_name -> pg_query.Node
	61,  // 290: pg_query.DistinctExpr.xpr:type_name -> pg_query.Node
	61,  // 291: pg_query.DistinctExpr.args:type_name -> pg_query.Node
	61,  // 292: pg_query.NullIfExpr.xpr:type_name -> pg_query.Node
	61,  // 293: pg_query.NullIfExpr.args:type_name -> pg_query.Node
	61,  // 294: pg_query.ScalarArrayOpExpr.xpr:type_name -> pg_query.Node
	61,  // 295: pg_query.ScalarArrayOpExpr.args:type_name -> pg_query.Node
	61,  // 296: pg_query.BoolExpr.xpr:type_name -> pg_query.Node
	37,  // 297: pg_query.BoolExpr.boolop:type_name -> pg_query.BoolExprType
	61,  // 298: pg_query.BoolExpr.args:type_name -> pg_query.Node
	61,  // 299: pg_query.SubLink.xpr:type_name -> pg_query.Node
	38,  // 300: pg_query.SubLink.sub_link_type:type_name -> pg_query.SubLinkType
	61,  // 301: pg_query.SubLink.testexpr:type_name -> pg_query.Node
	61,  // 302: pg_query.SubLink.oper_name:type_name -> pg_query.Node
	61,  // 303: pg_query.SubLink.subselect:type_name -> pg_query.Node
	61,  // 304: pg_query.SubPlan.xpr:type_name -> pg_query.Node
	38,  // 305: pg_query.SubPlan.sub_link_type:type_name -> pg_query.SubLinkType
	61,  // 306: pg_query.SubPlan.testexpr:type_name -> pg_query.Node
	61,  // 307: pg_query.SubPlan.param_ids:type_name -> pg_query.Node
	61,  // 308: pg_query.SubPlan.set_param:type_name -> pg_query.Node
	61,  // 309: pg_query.SubPlan.par_param:type_name -> pg_query.Node
	61,  // 310: pg_query.SubPlan.args:type_name -> pg_query.Node
	61,  // 311: pg_query.AlternativeSubPlan.xpr:type_name -> pg_query.Node
	61,  // 312: pg_query.AlternativeSubPlan.subplans:type_name -> pg_query.Node
	61,  // 313: pg_query.FieldSelect.xpr:type_name -> pg_query.Node
	61,  // 314: pg_query.FieldSelect.arg:type_name -> pg_query.Node
	61,  // 315: pg_query.FieldStore.xpr:type_name -> pg_query.Node
	61,  // 316: pg_query.FieldStore.arg:type_name -> pg_query.Node
	61,  // 317: pg_query.FieldStore.newvals:type_name -> pg_query.Node
	61,  // 318: pg_query.FieldStore.fieldnums:type_name -> pg_query.Node
	61,  // 319: pg_query.RelabelType.xpr:type_name -> pg_query.Node
	61,  // 320: pg_query.RelabelType.arg:type_name -> pg_query.Node
	36,  // 321: pg_query.RelabelType.relabelformat:type_name -> pg_query.CoercionForm
	61,  // 322: pg_query.CoerceViaIO.xpr:type_name -> pg_query.Node
	61,  // 323: pg_query.CoerceViaIO.arg:type_name -> pg_query.Node
	36,  // 324: pg_query.CoerceViaIO.coerceformat:type_name -> pg_query.CoercionForm
	61,  // 325: pg_query.ArrayCoerceExpr.xpr:type_name -> pg_query.Node
	61,  // 326: pg_query.ArrayCoerceExpr.arg:type_name -> pg_query.Node
	61,  // 327: pg_query.ArrayCoerceExpr.elemexpr:type_name -> pg_query.Node
	36,  // 328: pg_query.ArrayCoerceExpr.coerceformat:type_name -> pg_query.CoercionForm
	61,  // 329: pg_query.ConvertRowtypeExpr.xpr:type_name -> pg_query.Node
	61,  // 330: pg_query.ConvertRowtypeExpr.arg:type_name -> pg_query.Node
	36,  // 331: pg_query.ConvertRowtypeExpr.convertformat:type_name -> pg_query.CoercionForm
	61,  // 332: pg_query.CollateExpr.xpr:type_name -> pg_query.Node
	61,  // 333: pg_query.CollateExpr.arg:type_name -> pg_query.Node
	61,  // 334: pg_query.CaseExpr.xpr:type_name -> pg_query.Node
	61,  // 335: pg_query.CaseExpr.arg:type_name -> pg_query.Node
	61,  // 336: pg_query.CaseExpr.args:type_name -> pg_query.Node
	61,  // 337: pg_query.CaseExpr.defresult:type_name -> pg_query.Node
	61,  // 338: pg_query.CaseWhen.xpr:type_name -> pg_query.Node
	61,  // 339: pg_query.CaseWhen.expr:type_name -> pg_query.Node
	61,  // 340: pg_query.CaseWhen.result:type_name -> pg_query.Node
	61,  // 341: pg_query.CaseTestExpr.xpr:type_name -> pg_query.Node
	61,  // 342: pg_query.ArrayExpr.xpr:type_name -> pg_query.Node
	61,  // 343: pg_query.ArrayExpr.elements:type_name -> pg_query.Node
	61,  // 344: pg_query.RowExpr.xpr:type_name -> pg_query.Node
	61,  // 345: pg_query.RowExpr.args:type_name -> pg_query.Node
	36,  // 346: pg_query.RowExpr.row_format:type_name -> pg_query.CoercionForm
	61,  // 347: pg_query.RowExpr.colnames:type_name -> pg_query.Node
	61,  // 348: pg_query.RowCompareExpr.xpr:type_name -> pg_query.Node
	39,  // 349: pg_query.RowCompareExpr.rctype:type_name -> pg_query.RowCompareType
	61,  // 350: pg_query.RowCompareExpr.opnos:type_name -> pg_query.Node
	61,  // 351: pg_query.RowCompareExpr.opfamilies:type_name -> pg_query.Node
	61,  // 352: pg_query.RowCompareExpr.inputcollids:type_name -> pg_query.Node
	61,  // 353: pg_query.RowCompareExpr.largs:type_name -> pg_query.Node
	61,  // 354: pg_query.RowCompareExpr.rargs:type_name -> pg_query.Node
	61,  // 355: pg_query.CoalesceExpr.xpr:type_name -> pg_query.Node
	61,  // 356: pg_query.CoalesceExpr.args:type_name -> pg_query.Node
	61,  // 357: pg_query.MinMaxExpr.xpr:type_name -> pg_query.Node
	40,  // 358: pg_query.MinMaxExpr.op:type_name -> pg_query.MinMaxOp
	61,  // 359: pg_query.MinMaxExpr.args:type_name -> pg_query.Node
	61,  // 360: pg_query.SQLValueFunction.xpr:type_name -> pg_query.Node
	41,  // 361: pg_query.SQLValueFunction.op:type_name -> pg_query.SQLValueFunctionOp
	61,  // 362: pg_query.XmlExpr.xpr:type_name -> pg_query.Node
	42,  // 363: pg_query.XmlExpr.op:type_name -> pg_query.XmlExprOp
	61,  // 364: pg_query.XmlExpr.named_args:type_name -> pg_query.Node
	61,  // 365: pg_query.XmlExpr.arg_names:type_name -> pg_query.Node
	61,  // 366: pg_query.XmlExpr.args:type_name -> pg_query.Node
	43,  // 367: pg_query.XmlExpr.xmloption:type_name -> pg_query.XmlOptionType
	61,  // 368: pg_query.NullTest.xpr:type_name -> pg_query.Node
	61,  // 369: pg_query.NullTest.arg:type_name -> pg_query.Node
	44,  // 370: pg_query.NullTest.nulltesttype:type_name -> pg_query.NullTestType
	61,  // 371: pg_query.BooleanTest.xpr:type_name -> pg_query.Node
	61,  // 372: pg_query.BooleanTest.arg:type_name -> pg_query.Node
	45,  // 373: pg_query.BooleanTest.booltesttype:type_name -> pg_query.BoolTestType
	61,  // 374: pg_query.CoerceToDomain.xpr:type_name -> pg_query.Node
	61,  // 375: pg_query.CoerceToDomain.arg:type_name -> pg_query.Node
	36,  // 376: pg_query.CoerceToDomain.coercionformat:type_name -> pg_query.CoercionForm
	61,  // 377: pg_query.CoerceToDomainValue.xpr:type_name -> pg_query.Node
	61,  // 378: pg_query.SetToDefault.xpr:type_name -> pg_query.Node
	61,  // 379: pg_query.CurrentOfExpr.xpr:type_name -> pg_query.Node
	61,  // 380: pg_query.NextValueExpr.xpr:type_name -> pg_query.Node
	61,  // 381: pg_query.InferenceElem.xpr:type_name -> pg_query.Node
	61,  // 382: pg_query.InferenceElem.expr:type_name -> pg_query.Node
	61,  // 383: pg_query.TargetEntry.xpr:type_name -> pg_query.Node
	61,  // 384: pg_query.TargetEntry.expr:type_name -> pg_query.Node
	47,  // 385: pg_query.JoinExpr.jointype:type_name -> pg_query.JoinType
	61,  // 386: pg_query.JoinExpr.larg:type_name -> pg_query.Node
	61,  // 387: pg_query.JoinExpr.rarg:type_name -> pg_query.Node
	61,  // 388: pg_query.JoinExpr.using_clause:type_name -> pg_query.Node
	71,  // 389: pg_query.JoinExpr.join_using_alias:type_name -> pg_query.Alias
	61,  // 390: pg_query.JoinExpr.quals:type_name -> pg_query.Node
	71,  // 391: pg_query.JoinExpr.alias:type_name -> pg_query.Alias
	61,  // 392: pg_query.FromExpr.fromlist:type_name -> pg_query.Node
	61,  // 393: pg_query.FromExpr.quals:type_name -> pg_query.Node
	52,  // 394: pg_query.OnConflictExpr.action:type_name -> pg_query.OnConflictAction
	61,  // 395: pg_query.OnConflictExpr.arbiter_elems:type_name -> pg_query.Node
	61,  // 396: pg_query.OnConflictExpr.arbiter_where:type_name -> pg_query.Node
	61,  // 397: pg_query.OnConflictExpr.on_conflict_set:type_name -> pg_query.Node
	61,  // 398: pg_query.OnConflictExpr.on_conflict_where:type_name -> pg_query.Node
	61,  // 399: pg_query.OnConflictExpr.excl_rel_tlist:type_name -> pg_query.Node
	72,  // 400: pg_query.IntoClause.rel:type_name -> pg_query.RangeVar
	61,  // 401: pg_query.IntoClause.col_names:type_name -> pg_query.Node
	61,  // 402: pg_query.IntoClause.options:type_name -> pg_query.Node
	33,  // 403: pg_query.IntoClause.on_commit:type_name -> pg_query.OnCommitAction
	61,  // 404: pg_query.IntoClause.view_query:type_name -> pg_query.Node
	46,  // 405: pg_query.MergeAction.command_type:type_name -> pg_query.CmdType
	0,   // 406: pg_query.MergeAction.override:type_name -> pg_query.OverridingKind
	61,  // 407: pg_query.MergeAction.qual:type_name -> pg_query.Node
	61,  // 408: pg_query.MergeAction.target_list:type_name -> pg_query.Node
	61,  // 409: pg_query.MergeAction.update_colnos:type_name -> pg_query.Node
	61,  // 410: pg_query.RawStmt.stmt:type_name -> pg_query.Node
	46,  // 411: pg_query.Query.command_type:type_name -> pg_query.CmdType
	1,   // 412: pg_query.Query.query_source:type_name -> pg_query.QuerySource
	61,  // 413: pg_query.Query.utility_stmt:type_name -> pg_query.Node
	61,  // 414: pg_query.Query.cte_list:type_name -> pg_query.Node
	61,  // 415: pg_query.Query.rtable:type_name -> pg_query.Node
	118, // 416: pg_query.Query.jointree:type_name -> pg_query.FromExpr
	61,  // 417: pg_query.Query.merge_action_list:type_name -> pg_query.Node
	61,  // 418: pg_query.Query.target_list:type_name -> pg_query.Node
	0,   // 419: pg_query.Query.override:type_name -> pg_query.OverridingKind
	119, // 420: pg_query.Query.on_conflict:type_name -> pg_query.OnConflictExpr
	61,  // 421: pg_query.Query.returning_list:type_name -> pg_query.Node
	61,  // 422: pg_query.Query.group_clause:type_name -> pg_query.Node
	61,  // 423: pg_query.Query.grouping_sets:type_name -> pg_query.Node
	61,  // 424: pg_query.Query.having_qual:type_name -> pg_query.Node
	61,  // 425: pg_query.Query.window_clause:type_name -> pg_query.Node
	61,  // 426: pg_query.Query.distinct_clause:type_name -> pg_query.Node
	61,  // 427: pg_query.Query.sort_clause:type_name -> pg_query.Node
	61,  // 428: pg_query.Query.limit_offset:type_name -> pg_query.Node
	61,  // 429: pg_query.Query.limit_count:type_name -> pg_query.Node
	53,  // 430: pg_query.Query.limit_option:type_name -> pg_query.LimitOption
	61,  // 431: pg_query.Query.row_marks:type_name -> pg_query.Node
	61,  // 432: pg_query.Query.set_operations:type_name -> pg_query.Node
	61,  // 433: pg_query.Query.constraint_deps:type_name -> pg_query.Node
	61,  // 434: pg_query.Query.with_check_options:type_name -> pg_query.Node
	72,  // 435: pg_query.InsertStmt.relation:type_name -> pg_query.RangeVar
	61,  // 436: pg_query.InsertStmt.cols:type_name -> pg_query.Node
	61,  // 437: pg_query.InsertStmt.select_stmt:type_name -> pg_query.Node
	283, // 438: pg_query.InsertStmt.on_conflict_clause:type_name -> pg_query.OnConflictClause
	61,  // 439: pg_query.InsertStmt.returning_list:type_name -> pg_query.Node
	281, // 440: pg_query.InsertStmt.with_clause:type_name -> pg_query.WithClause
	0,   // 441: pg_query.InsertStmt.override:type_name -> pg_query.OverridingKind
	72,  // 442: pg_query.DeleteStmt.relation:type_name -> pg_query.RangeVar
	61,  // 443: pg_query.DeleteStmt.using_clause:type_name -> pg_query.Node
	61,  // 444: pg_query.DeleteStmt.where_clause:type_name -> pg_query.Node
	61,  // 445: pg_query.DeleteStmt.returning_list:type_name -> pg_query.Node
	281, // 446: pg_query.DeleteStmt.with_clause:type_name -> pg_query.WithClause
	72,  // 447: pg_query.UpdateStmt.relation:type_name -> pg_query.RangeVar
	61,  // 448: pg_query.UpdateStmt.target_list:type_name -> pg_query.Node
	61,  // 449: pg_query.UpdateStmt.where_clause:type_name -> pg_query.Node
	61,  // 450: pg_query.UpdateStmt.from_clause:type_name -> pg_query.Node
	61,  // 451: pg_query.UpdateStmt.returning_list:type_name -> pg_query.Node
	281, // 452: pg_query.UpdateStmt.with_clause:type_name -> pg_query.WithClause
	72,  // 453: pg_query.MergeStmt.relation:type_name -> pg_query.RangeVar
	61,  // 454: pg_query.MergeStmt.source_relation:type_name -> pg_query.Node
	61,  // 455: pg_query.MergeStmt.join_condition:type_name -> pg_query.Node
	61,  // 456: pg_query.MergeStmt.merge_when_clauses:type_name -> pg_query.Node
	281, // 457: pg_query.MergeStmt.with_clause:type_name -> pg_query.WithClause
	61,  // 458: pg_query.SelectStmt.distinct_clause:type_name -> pg_query.Node
	120, // 459: pg_query.SelectStmt.into_clause:type_name -> pg_query.IntoClause
	61,  // 460: pg_query.SelectStmt.target_list:type_name -> pg_query.Node
	61,  // 461: pg_query.SelectStmt.from_clause:type_name -> pg_query.Node
	61,  // 462: pg_query.SelectStmt.where_clause:type_name -> pg_query.Node
	61,  // 463: pg_query.SelectStmt.group_clause:type_name -> pg_query.Node
	61,  // 464: pg_query.SelectStmt.having_clause:type_name -> pg_query.Node
	61,  // 465: pg_query.SelectStmt.window_clause:type_name -> pg_query.Node
	61,  // 466: pg_query.SelectStmt.values_lists:type_name -> pg_query.Node
	61,  // 467: pg_query.SelectStmt.sort_clause:type_name -> pg_query.Node
	61,  // 468: pg_query.SelectStmt.limit_offset:type_name -> pg_query.Node
	61,  // 469: pg_query.SelectStmt.limit_count:type_name -> pg_query.Node
	53,  // 470: pg_query.SelectStmt.limit_option:type_name -> pg_query.LimitOption
	61,  // 471: pg_query.SelectStmt.locking_clause:type_name -> pg_query.Node
	281, // 472: pg_query.SelectStmt.with_clause:type_name -> pg_query.WithClause
	14,  // 473: pg_query.SelectStmt.op:type_name -> pg_query.SetOperation
	128, // 474: pg_query.SelectStmt.larg:type_name -> pg_query.SelectStmt
	128, // 475: pg_query.SelectStmt.rarg:type_name -> pg_query.SelectStmt
	61,  // 476: pg_query.ReturnStmt.returnval:type_name -> pg_query.Node
	61,  // 477: pg_query.PLAssignStmt.indirection:type_name -> pg_query.Node
	128, // 478: pg_query.PLAssignStmt.val:type_name -> pg_query.SelectStmt
	72,  // 479: pg_query.AlterTableStmt.relation:type_name -> pg_query.RangeVar
	61,  // 480: pg_query.AlterTableStmt.cmds:type_name -> pg_query.Node
	15,  // 481: pg_query.AlterTableStmt.objtype:type_name -> pg_query.ObjectType
	17,  // 482: pg_query.AlterTableCmd.subtype:type_name -> pg_query.AlterTableType
	288, // 483: pg_query.AlterTableCmd.newowner:type_name -> pg_query.RoleSpec
	61,  // 484: pg_query.AlterTableCmd.def:type_name -> pg_query.Node
	16,  // 485: pg_query.AlterTableCmd.behavior:type_name -> pg_query.DropBehavior
	61,  // 486: pg_query.AlterDomainStmt.type_name:type_name -> pg_query.Node
	61,  // 487: pg_query.AlterDomainStmt.def:type_name -> pg_query.Node
	16,  // 488: pg_query.AlterDomainStmt.behavior:type_name -> pg_query.DropBehavior
	14,  // 489: pg_query.SetOperationStmt.op:type_name -> pg_query.SetOperation
	61,  // 490: pg_query.SetOperationStmt.larg:type_name -> pg_query.Node
	61,  // 491: pg_query.SetOperationStmt.rarg:type_name -> pg_query.Node
	61,  // 492: pg_query.SetOperationStmt.col_types:type_name -> pg_query.Node
	61,  // 493: pg_query.SetOperationStmt.col_typmods:type_name -> pg_query.Node
	61,  // 494: pg_query.SetOperationStmt.col_collations:type_name -> pg_query.Node
	61,  // 495: pg_query.SetOperationStmt.group_clauses:type_name -> pg_query.Node
	18,  // 496: pg_query.GrantStmt.targtype:type_name -> pg_query.GrantTargetType
	15,  // 497: pg_query.GrantStmt.objtype:type_name -> pg_query.ObjectType
	61,  // 498: pg_query.GrantStmt.objects:type_name -> pg_query.Node
	61,  // 499: pg_query.GrantStmt.privileges:type_name -> pg_query.Node
	61,  // 500: pg_query.GrantStmt.grantees:type_name -> pg_query.Node
	288, // 501: pg_query.GrantStmt.grantor:type_name -> pg_query.RoleSpec
	16,  // 502: pg_query.GrantStmt.behavior:type_name -> pg_query.DropBehavior
	61,  // 503: pg_query.GrantRoleStmt.granted_roles:type_name -> pg_query.Node
	61,  // 504: pg_query.GrantRoleStmt.grantee_roles:type_name -> pg_query.Node
	288, // 505: pg_query.GrantRoleStmt.grantor:type_name -> pg_query.RoleSpec
	16,  // 506: pg_query.GrantRoleStmt.behavior:type_name -> pg_query.DropBehavior
	61,  // 507: pg_query.AlterDefaultPrivilegesStmt.options:type_name -> pg_query.Node
	135, // 508: pg_query.AlterDefaultPrivilegesStmt.action:type_name -> pg_query.GrantStmt
	72,  // 509: pg_query.ClusterStmt.relation:type_name -> pg_query.RangeVar
	61,  // 510: pg_query.ClusterStmt.params:type_name -> pg_query.Node
	72,  // 511: pg_query.CopyStmt.relation:type_name -> pg_query.RangeVar
	61,  // 512: pg_query.CopyStmt.query:type_name -> pg_query.Node
	61,  // 513: pg_query.CopyStmt.attlist:type_name -> pg_query.Node
	61,  // 514: pg_query.CopyStmt.options:type_name -> pg_query.Node
	61,  // 515: pg_query.CopyStmt.where_clause:type_name -> pg_query.Node
	72,  // 516: pg_query.CreateStmt.relation:type_name -> pg_query.RangeVar
	61,  // 517: pg_query.CreateStmt.table_elts:type_name -> pg_query.Node
	61,  // 518: pg_query.CreateStmt.inh_relations:type_name -> pg_query.Node
	292, // 519: pg_query.CreateStmt.partbound:type_name -> pg_query.PartitionBoundSpec
	291, // 520: pg_query.CreateStmt.partspec:type_name -> pg_query.PartitionSpec
	260, // 521: pg_query.CreateStmt.of_typename:type_name -> pg_query.TypeName
	61,  // 522: pg_query.CreateStmt.constraints:type_name -> pg_query.Node
	61,  // 523: pg_query.CreateStmt.options:type_name -> pg_query.Node
	33,  // 524: pg_query.CreateStmt.oncommit:type_name -> pg_query.OnCommitAction
	15,  // 525: pg_query.DefineStmt.kind:type_name -> pg_query.ObjectType
	61,  // 526: pg_query.DefineStmt.defnames:type_name -> pg_query.Node
	61,  // 527: pg_query.DefineStmt.args:type_name -> pg_query.Node
	61,  // 528: pg_query.DefineStmt.definition:type_name -> pg_query.Node
	61,  // 529: pg_query.DropStmt.objects:type_name -> pg_query.Node
	15,  // 530: pg_query.DropStmt.remove_type:type_name -> pg_query.ObjectType
	16,  // 531: pg_query.DropStmt.behavior:type_name -> pg_query.DropBehavior
	61,  // 532: pg_query.TruncateStmt.relations:type_name -> pg_query.Node
	16,  // 533: pg_query.TruncateStmt.behavior:type_name -> pg_query.DropBehavior
	15,  // 534: pg_query.CommentStmt.objtype:type_name -> pg_query.ObjectType
	61,  // 535: pg_query.CommentStmt.object:type_name -> pg_query.Node
	23,  // 536: pg_query.FetchStmt.direction:type_name -> pg_query.FetchDirection
	72,  // 537: pg_query.IndexStmt.relation:type_name -> pg_query.RangeVar
	61,  // 538: pg_query.IndexStmt.index_params:type_name -> pg_query.Node
	61,  // 539: pg_query.IndexStmt.index_including_params:type_name -> pg_query.Node
	61,  // 540: pg_query.IndexStmt.options:type_name -> pg_query.Node
	61,  // 541: pg_query.IndexStmt.where_clause:type_name -> pg_query.Node
	61,  // 542: pg_query.IndexStmt.exclude_op_names:type_name -> pg_query.Node
	61,  // 543: pg_query.CreateFunctionStmt.funcname:type_name -> pg_query.Node
	61,  // 544: pg_query.CreateFunctionStmt.parameters:type_name -> pg_query.Node
	260, // 545: pg_query.CreateFunctionStmt.return_type:type_name -> pg_query.TypeName
	61,  // 546: pg_query.CreateFunctionStmt.options:type_name -> pg_query.Node
	61,  // 547: pg_query.CreateFunctionStmt.sql_body:type_name -> pg_query.Node
	15,  // 548: pg_query.AlterFunctionStmt.objtype:type_name -> pg_query.ObjectType
	273, // 549: pg_query.AlterFunctionStmt.func:type_name -> pg_query.ObjectWithArgs
	61,  // 550: pg_query.AlterFunctionStmt.actions:type_name -> pg_query.Node
	61,  // 551: pg_query.DoStmt.args:type_name -> pg_query.Node
	15,  // 552: pg_query.RenameStmt.rename_type:type_name -> pg_query.ObjectType
	15,  // 553: pg_query.RenameStmt.relation_type:type_name -> pg_query.ObjectType
	72,  // 554: pg_query.RenameStmt.relation:type_name -> pg_query.RangeVar
	61,  // 555: pg_query.RenameStmt.object:type_name -> pg_query.Node
	16,  // 556: pg_query.RenameStmt.behavior:type_name -> pg_query.DropBehavior
	72,  // 557: pg_query.RuleStmt.relation:type_name -> pg_query.RangeVar
	61,  // 558: pg_query.RuleStmt.where_clause:type_name -> pg_query.Node
	46,  // 559: pg_query.RuleStmt.event:type_name -> pg_query.CmdType
	61,  // 560: pg_query.RuleStmt.actions:type_name -> pg_query.Node
	25,  // 561: pg_query.TransactionStmt.kind:type_name -> pg_query.TransactionStmtKind
	61,  // 562: pg_query.TransactionStmt.options:type_name -> pg_query.Node
	72,  // 563: pg_query.ViewStmt.view:type_name -> pg_query.RangeVar
	61,  // 564: pg_query.ViewStmt.aliases:type_name -> pg_query.Node
	61,  // 565: pg_query.ViewStmt.query:type_name -> pg_query.Node
	61,  // 566: pg_query.ViewStmt.options:type_name -> pg_query.Node
	26,  // 567: pg_query.ViewStmt.with_check_option:type_name -> pg_query.ViewCheckOption
	61,  // 568: pg_query.CreateDomainStmt.domainname:type_name -> pg_query.Node
	260, // 569: pg_query.CreateDomainStmt.type_name:type_name -> pg_query.TypeName
	252, // 570: pg_query.CreateDomainStmt.coll_clause:type_name -> pg_query.CollateClause
	61,  // 571: pg_query.CreateDomainStmt.constraints:type_name -> pg_query.Node
	61,  // 572: pg_query.CreatedbStmt.options:type_name -> pg_query.Node
	61,  // 573: pg_query.DropdbStmt.options:type_name -> pg_query.Node
	61,  // 574: pg_query.VacuumStmt.options:type_name -> pg_query.Node
	61,  // 575: pg_query.VacuumStmt.rels:type_name -> pg_query.Node
	61,  // 576: pg_query.ExplainStmt.query:type_name -> pg_query.Node
	61,  // 577: pg_query.ExplainStmt.options:type_name -> pg_query.Node
	61,  // 578: pg_query.CreateTableAsStmt.query:type_name -> pg_query.Node
	120, // 579: pg_query.CreateTableAsStmt.into:type_name -> pg_query.IntoClause
	15,  // 580: pg_query.CreateTableAsStmt.objtype:type_name -> pg_query.ObjectType
	72,  // 581: pg_query.CreateSeqStmt.sequence:type_name -> pg_query.RangeVar
	61,  // 582: pg_query.CreateSeqStmt.options:type_name -> pg_query.Node
	72,  // 583: pg_query.AlterSeqStmt.sequence:type_name -> pg_query.RangeVar
	61,  // 584: pg_query.AlterSeqStmt.options:type_name -> pg_query.Node
	19,  // 585: pg_query.VariableSetStmt.kind:type_name -> pg_query.VariableSetKind
	61,  // 586: pg_query.VariableSetStmt.args:type_name -> pg_query.Node
	27,  // 587: pg_query.DiscardStmt.target:type_name -> pg_query.DiscardMode
	72,  // 588: pg_query.CreateTrigStmt.relation:type_name -> pg_query.RangeVar
	61,  // 589: pg_query.CreateTrigStmt.funcname:type_name -> pg_query.Node
	61,  // 590: pg_query.CreateTrigStmt.args:type_name -> pg_query.Node
	61,  // 591: pg_query.CreateTrigStmt.columns:type_name -> pg_query.Node
	61,  // 592: pg_query.CreateTrigStmt.when_clause:type_name -> pg_query.Node
	61,  // 593: pg_query.CreateTrigStmt.transition_rels:type_name -> pg_query.Node
	72,  // 594: pg_query.CreateTrigStmt.constrrel:type_name -> pg_query.RangeVar
	61,  // 595: pg_query.CreatePLangStmt.plhandler:type_name -> pg_query.Node
	61,  // 596: pg_query.CreatePLangStmt.plinline:type_name -> pg_query.Node
	61,  // 597: pg_query.CreatePLangStmt.plvalidator:type_name -> pg_query.Node
	22,  // 598: pg_query.CreateRoleStmt.stmt_type:type_name -> pg_query.RoleStmtType
	61,  // 599: pg_query.CreateRoleStmt.options:type_name -> pg_query.Node
	288, // 600: pg_query.AlterRoleStmt.role:type_name -> pg_query.RoleSpec
	61,  // 601: pg_query.AlterRoleStmt.options:type_name -> pg_query.Node
	61,  // 602: pg_query.DropRoleStmt.roles:type_name -> pg_query.Node
	61,  // 603: pg_query.LockStmt.relations:type_name -> pg_query.Node
	61,  // 604: pg_query.ConstraintsSetStmt.constraints:type_name -> pg_query.Node
	28,  // 605: pg_query.ReindexStmt.kind:type_name -> pg_query.ReindexObjectType
	72,  // 606: pg_query.ReindexStmt.relation:type_name -> pg_query.RangeVar
	61,  // 607: pg_query.ReindexStmt.params:type_name -> pg_query.Node
	288, // 608: pg_query.CreateSchemaStmt.authrole:type_name -> pg_query.RoleSpec
	61,  // 609: pg_query.CreateSchemaStmt.schema_elts:type_name -> pg_query.Node
	61,  // 610: pg_query.AlterDatabaseStmt.options:type_name -> pg_query.Node
	167, // 611: pg_query.AlterDatabaseSetStmt.setstmt:type_name -> pg_query.VariableSetStmt
	288, // 612: pg_query.AlterRoleSetStmt.role:type_name -> pg_query.RoleSpec
	167, // 613: pg_query.AlterRoleSetStmt.setstmt:type_name -> pg_query.VariableSetStmt
	61,  // 614: pg_query.CreateConversionStmt.conversion_name:type_name -> pg_query.Node
	61,  // 615: pg_query.CreateConversionStmt.func_name:type_name -> pg_query.Node
	260, // 616: pg_query.CreateCastStmt.sourcetype:type_name -> pg_query.TypeName
	260, // 617: pg_query.CreateCastStmt.targettype:type_name -> pg_query.TypeName
	273, // 618: pg_query.CreateCastStmt.func:type_name -> pg_query.ObjectWithArgs
	35,  // 619: pg_query.CreateCastStmt.context:type_name -> pg_query.CoercionContext
	61,  // 620: pg_query.CreateOpClassStmt.opclassname:type_name -> pg_query.Node
	61,  // 621: pg_query.CreateOpClassStmt.opfamilyname:type_name -> pg_query.Node
	260, // 622: pg_query.CreateOpClassStmt.datatype:type_name -> pg_query.TypeName
	61,  // 623: pg_query.CreateOpClassStmt.items:type_name -> pg_query.Node
	61,  // 624: pg_query.CreateOpFamilyStmt.opfamilyname:type_name -> pg_query.Node
	61,  // 625: pg_query.AlterOpFamilyStmt.opfamilyname:type_name -> pg_query.Node
	61,  // 626: pg_query.AlterOpFamilyStmt.items:type_name -> pg_query.Node
	61,  // 627: pg_query.PrepareStmt.argtypes:type_name -> pg_query.Node
	61,  // 628: pg_query.PrepareStmt.query:type_name -> pg_query.Node
	61,  // 629: pg_query.ExecuteStmt.params:type_name -> pg_query.Node
	61,  // 630: pg_query.DeclareCursorStmt.query:type_name -> pg_query.Node
	288, // 631: pg_query.CreateTableSpaceStmt.owner:type_name -> pg_query.RoleSpec
	61,  // 632: pg_query.CreateTableSpaceStmt.options:type_name -> pg_query.Node
	15,  // 633: pg_query.AlterObjectDependsStmt.object_type:type_name -> pg_query.ObjectType
	72,  // 634: pg_query.AlterObjectDependsStmt.relation:type_name -> pg_query.RangeVar
	61,  // 635: pg_query.AlterObjectDependsStmt.object:type_name -> pg_query.Node
	65,  // 636: pg_query.AlterObjectDependsStmt.extname:type_name -> pg_query.String
	15,  // 637: pg_query.AlterObjectSchemaStmt.object_type:type_name -> pg_query.ObjectType
	72,  // 638: pg_query.AlterObjectSchemaStmt.relation:type_name -> pg_query.RangeVar
	61,  // 639: pg_query.AlterObjectSchemaStmt.object:type_name -> pg_query.Node
	15,  // 640: pg_query.AlterOwnerStmt.object_type:type_name -> pg_query.ObjectType
	72,  // 641: pg_query.AlterOwnerStmt.relation:type_name -> pg_query.RangeVar
	61,  // 642: pg_query.AlterOwnerStmt.object:type_name -> pg_query.Node
	288, // 643: pg_query.AlterOwnerStmt.newowner:type_name -> pg_query.RoleSpec
	273, // 644: pg_query.AlterOperatorStmt.opername:type_name -> pg_query.ObjectWithArgs
	61,  // 645: pg_query.AlterOperatorStmt.options:type_name -> pg_query.Node
	61,  // 646: pg_query.AlterTypeStmt.type_name:type_name -> pg_query.Node
	61,  // 647: pg_query.AlterTypeStmt.options:type_name -> pg_query.Node
	61,  // 648: pg_query.DropOwnedStmt.roles:type_name -> pg_query.Node
	16,  // 649: pg_query.DropOwnedStmt.behavior:type_name -> pg_query.DropBehavior
	61,  // 650: pg_query.ReassignOwnedStmt.roles:type_name -> pg_query.Node
	288, // 651: pg_query.ReassignOwnedStmt.newrole:type_name -> pg_query.RoleSpec
	72,  // 652: pg_query.CompositeTypeStmt.typevar:type_name -> pg_query.RangeVar
	61,  // 653: pg_query.CompositeTypeStmt.coldeflist:type_name -> pg_query.Node
	61,  // 654: pg_query.CreateEnumStmt.type_name:type_name -> pg_query.Node
	61,  // 655: pg_query.CreateEnumStmt.vals:type_name -> pg_query.Node
	61,  // 656: pg_query.CreateRangeStmt.type_name:type_name -> pg_query.Node
	61,  // 657: pg_query.CreateRangeStmt.params:type_name -> pg_query.Node
	61,  // 658: pg_query.AlterEnumStmt.type_name:type_name -> pg_query.Node
	61,  // 659: pg_query.AlterTSDictionaryStmt.dictname:type_name -> pg_query.Node
	61,  // 660: pg_query.AlterTSDictionaryStmt.options:type_name -> pg_query.Node
	29,  // 661: pg_query.AlterTSConfigurationStmt.kind:type_name -> pg_query.AlterTSConfigType
	61,  // 662: pg_query.AlterTSConfigurationStmt.cfgname:type_name -> pg_query.Node
	61,  // 663: pg_query.AlterTSConfigurationStmt.tokentype:type_name -> pg_query.Node
	61,  // 664: pg_query.AlterTSConfigurationStmt.dicts:type_name -> pg_query.Node
	61,  // 665: pg_query.CreateFdwStmt.func_options:type_name -> pg_query.Node
	61,  // 666: pg_query.CreateFdwStmt.options:type_name -> pg_query.Node
	61,  // 667: pg_query.AlterFdwStmt.func_options:type_name -> pg_query.Node
	61,  // 668: pg_query.AlterFdwStmt.options:type_name -> pg_query.Node
	61,  // 669: pg_query.CreateForeignServerStmt.options:type_name -> pg_query.Node
	61,  // 670: pg_query.AlterForeignServerStmt.options:type_name -> pg_query.Node
	288, // 671: pg_query.CreateUserMappingStmt.user:type_name -> pg_query.RoleSpec
	61,  // 672: pg_query.CreateUserMappingStmt.options:type_name -> pg_query.Node
	288, // 673: pg_query.AlterUserMappingStmt.user:type_name -> pg_query.RoleSpec
	61,  // 674: pg_query.AlterUserMappingStmt.options:type_name -> pg_query.Node
	288, // 675: pg_query.DropUserMappingStmt.user:type_name -> pg_query.RoleSpec
	61,  // 676: pg_query.AlterTableSpaceOptionsStmt.options:type_name -> pg_query.Node
	15,  // 677: pg_query.AlterTableMoveAllStmt.objtype:type_name -> pg_query.ObjectType
	61,  // 678: pg_query.AlterTableMoveAllStmt.roles:type_name -> pg_query.Node
	15,  // 679: pg_query.SecLabelStmt.objtype:type_name -> pg_query.ObjectType
	61,  // 680: pg_query.SecLabelStmt.object:type_name -> pg_query.Node
	141, // 681: pg_query.CreateForeignTableStmt.base_stmt:type_name -> pg_query.CreateStmt
	61,  // 682: pg_query.CreateForeignTableStmt.options:type_name -> pg_query.Node
	21,  // 683: pg_query.ImportForeignSchemaStmt.list_type:type_name -> pg_query.ImportForeignSchemaType
	61,  // 684: pg_query.ImportForeignSchemaStmt.table_list:type_name -> pg_query.Node
	61,  // 685: pg_query.ImportForeignSchemaStmt.options:type_name -> pg_query.Node
	61,  // 686: pg_query.CreateExtensionStmt.options:type_name -> pg_query.Node
	61,  // 687: pg_query.AlterExtensionStmt.options:type_name -> pg_query.Node
	15,  // 688: pg_query.AlterExtensionContentsStmt.objtype:type_name -> pg_query.ObjectType
	61,  // 689: pg_query.AlterExtensionContentsStmt.object:type_name -> pg_query.Node
	61,  // 690: pg_query.CreateEventTrigStmt.whenclause:type_name -> pg_query.Node
	61,  // 691: pg_query.CreateEventTrigStmt.funcname:type_name -> pg_query.Node
	72,  // 692: pg_query.RefreshMatViewStmt.relation:type_name -> pg_query.RangeVar
	167, // 693: pg_query.AlterSystemStmt.setstmt:type_name -> pg_query.VariableSetStmt
	72,  // 694: pg_query.CreatePolicyStmt.table:type_name -> pg_query.RangeVar
	61,  // 695: pg_query.CreatePolicyStmt.roles:type_name -> pg_query.Node
	61,  // 696: pg_query.CreatePolicyStmt.qual:type_name -> pg_query.Node
	61,  // 697: pg_query.CreatePolicyStmt.with_check:type_name -> pg_query.Node
	72,  // 698: pg_query.AlterPolicyStmt.table:type_name -> pg_query.RangeVar
	61,  // 699: pg_query.AlterPolicyStmt.roles:type_name -> pg_query.Node
	61,  // 700: pg_query.AlterPolicyStmt.qual:type_name -> pg_query.Node
	61,  // 701: pg_query.AlterPolicyStmt.with_check:type_name -> pg_query.Node
	260, // 702: pg_query.CreateTransformStmt.type_name:type_name -> pg_query.TypeName
	273, // 703: pg_query.CreateTransformStmt.fromsql:type_name -> pg_query.ObjectWithArgs
	273, // 704: pg_query.CreateTransformStmt.tosql:type_name -> pg_query.ObjectWithArgs
	61,  // 705: pg_query.CreateAmStmt.handler_name:type_name -> pg_query.Node
	61,  // 706: pg_query.CreatePublicationStmt.options:type_name -> pg_query.Node
	61,  // 707: pg_query.CreatePublicationStmt.pubobjects:type_name -> pg_query.Node
	61,  // 708: pg_query.AlterPublicationStmt.options:type_name -> pg_query.Node
	61,  // 709: pg_query.AlterPublicationStmt.pubobjects:type_name -> pg_query.Node
	31,  // 710: pg_query.AlterPublicationStmt.action:type_name -> pg_query.AlterPublicationAction
	61,  // 711: pg_query.CreateSubscriptionStmt.publication:type_name -> pg_query.Node
	61,  // 712: pg_query.CreateSubscriptionStmt.options:type_name -> pg_query.Node
	32,  // 713: pg_query.AlterSubscriptionStmt.kind:type_name -> pg_query.AlterSubscriptionType
	61,  // 714: pg_query.AlterSubscriptionStmt.publication:type_name -> pg_query.Node
	61,  // 715: pg_query.AlterSubscriptionStmt.options:type_name -> pg_query.Node
	16,  // 716: pg_query.DropSubscriptionStmt.behavior:type_name -> pg_query.DropBehavior
	61,  // 717: pg_query.CreateStatsStmt.defnames:type_name -> pg_query.Node
	61,  // 718: pg_query.CreateStatsStmt.stat_types:type_name -> pg_query.Node
	61,  // 719: pg_query.CreateStatsStmt.exprs:type_name -> pg_query.Node
	61,  // 720: pg_query.CreateStatsStmt.relations:type_name -> pg_query.Node
	61,  // 721: pg_query.AlterCollationStmt.collname:type_name -> pg_query.Node
	244, // 722: pg_query.CallStmt.funccall:type_name -> pg_query.FuncCall
	80,  // 723: pg_query.CallStmt.funcexpr:type_name -> pg_query.FuncExpr
	61,  // 724: pg_query.CallStmt.outargs:type_name -> pg_query.Node
	61,  // 725: pg_query.AlterStatsStmt.defnames:type_name -> pg_query.Node
	5,   // 726: pg_query.A_Expr.kind:type_name -> pg_query.A_Expr_Kind
	61,  // 727: pg_query.A_Expr.name:type_name -> pg_query.Node
	61,  // 728: pg_query.A_Expr.lexpr:type_name -> pg_query.Node
	61,  // 729: pg_query.A_Expr.rexpr:type_name -> pg_query.Node
	61,  // 730: pg_query.ColumnRef.fields:type_name -> pg_query.Node
	61,  // 731: pg_query.FuncCall.funcname:type_name -> pg_query.Node
	61,  // 732: pg_query.FuncCall.args:type_name -> pg_query.Node
	61,  // 733: pg_query.FuncCall.agg_order:type_name -> pg_query.Node
	61,  // 734: pg_query.FuncCall.agg_filter:type_name -> pg_query.Node
	254, // 735: pg_query.FuncCall.over:type_name -> pg_query.WindowDef
	36,  // 736: pg_query.FuncCall.funcformat:type_name -> pg_query.CoercionForm
	61,  // 737: pg_query.A_Indices.lidx:type_name -> pg_query.Node
	61,  // 738: pg_query.A_Indices.uidx:type_name -> pg_query.Node
	61,  // 739: pg_query.A_Indirection.arg:type_name -> pg_query.Node
	61,  // 740: pg_query.A_Indirection.indirection:type_name -> pg_query.Node
	61,  // 741: pg_query.A_ArrayExpr.elements:type_name -> pg_query.Node
	61,  // 742: pg_query.ResTarget.indirection:type_name -> pg_query.Node
	61,  // 743: pg_query.ResTarget.val:type_name -> pg_query.Node
	61,  // 744: pg_query.MultiAssignRef.source:type_name -> pg_query.Node
	61,  // 745: pg_query.TypeCast.arg:type_name -> pg_query.Node
	260, // 746: pg_query.TypeCast.type_name:type_name -> pg_query.TypeName
	61,  // 747: pg_query.CollateClause.arg:type_name -> pg_query.Node
	61,  // 748: pg_query.CollateClause.collname:type_name -> pg_query.Node
	61,  // 749: pg_query.SortBy.node:type_name -> pg_query.Node
	2,   // 750: pg_query.SortBy.sortby_dir:type_name -> pg_query.SortByDir
	3,   // 751: pg_query.SortBy.sortby_nulls:type_name -> pg_query.SortByNulls
	61,  // 752: pg_query.SortBy.use_op:type_name -> pg_query.Node
	61,  // 753: pg_query.WindowDef.partition_clause:type_name -> pg_query.Node
	61,  // 754: pg_query.WindowDef.order_clause:type_name -> pg_query.Node
	61,  // 755: pg_query.WindowDef.start_offset:type_name -> pg_query.Node
	61,  // 756: pg_query.WindowDef.end_offset:type_name -> pg_query.Node
	61,  // 757: pg_query.RangeSubselect.subquery:type_name -> pg_query.Node
	71,  // 758: pg_query.RangeSubselect.alias:type_name -> pg_query.Alias
	61,  // 759: pg_query.RangeFunction.functions:type_name -> pg_query.Node
	71,  // 760: pg_query.RangeFunction.alias:type_name -> pg_query.Alias
	61,  // 761: pg_query.RangeFunction.coldeflist:type_name -> pg_query.Node
	61,  // 762: pg_query.RangeTableSample.relation:type_name -> pg_query.Node
	61,  // 763: pg_query.RangeTableSample.method:type_name -> pg_query.Node
	61,  // 764: pg_query.RangeTableSample.args:type_name -> pg_query.Node
	61,  // 765: pg_query.RangeTableSample.repeatable:type_name -> pg_query.Node
	61,  // 766: pg_query.RangeTableFunc.docexpr:type_name -> pg_query.Node
	61,  // 767: pg_query.RangeTableFunc.rowexpr:type_name -> pg_query.Node
	61,  // 768: pg_query.RangeTableFunc.namespaces:type_name -> pg_query.Node
	61,  // 769: pg_query.RangeTableFunc.columns:type_name -> pg_query.Node
	71,  // 770: pg_query.RangeTableFunc.alias:type_name -> pg_query.Alias
	260, // 771: pg_query.RangeTableFuncCol.type_name:type_name -> pg_query.TypeName
	61,  // 772: pg_query.RangeTableFuncCol.colexpr:type_name -> pg_query.Node
	61,  // 773: pg_query.RangeTableFuncCol.coldefexpr:type_name -> pg_query.Node
	61,  // 774: pg_query.TypeName.names:type_name -> pg_query.Node
	61,  // 775: pg_query.TypeName.typmods:type_name -> pg_query.Node
	61,  // 776: pg_query.TypeName.array_bounds:type_name -> pg_query.Node
	260, // 777: pg_query.ColumnDef.type_name:type_name -> pg_query.TypeName
	61,  // 778: pg_query.ColumnDef.raw_default:type_name -> pg_query.Node
	61,  // 779: pg_query.ColumnDef.cooked_default:type_name -> pg_query.Node
	72,  // 780: pg_query.ColumnDef.identity_sequence:type_name -> pg_query.RangeVar
	252, // 781: pg_query.ColumnDef.coll_clause:type_name -> pg_query.CollateClause
	61,  // 782: pg_query.ColumnDef.constraints:type_name -> pg_query.Node
	61,  // 783: pg_query.ColumnDef.fdwoptions:type_name -> pg_query.Node
	61,  // 784: pg_query.IndexElem.expr:type_name -> pg_query.Node
	61,  // 785: pg_query.IndexElem.collation:type_name -> pg_query.Node
	61,  // 786: pg_query.IndexElem.opclass:type_name -> pg_query.Node
	61,  // 787: pg_query.IndexElem.opclassopts:type_name -> pg_query.Node
	2,   // 788: pg_query.IndexElem.ordering:type_name -> pg_query.SortByDir
	3,   // 789: pg_query.IndexElem.nulls_ordering:type_name -> pg_query.SortByNulls
	61,  // 790: pg_query.StatsElem.expr:type_name -> pg_query.Node
	20,  // 791: pg_query.Constraint.contype:type_name -> pg_query.ConstrType
	61,  // 792: pg_query.Constraint.raw_expr:type_name -> pg_query.Node
	61,  // 793: pg_query.Constraint.keys:type_name -> pg_query.Node
	61,  // 794: pg_query.Constraint.including:type_name -> pg_query.Node
	61,  // 795: pg_query.Constraint.exclusions:type_name -> pg_query.Node
	61,  // 796: pg_query.Constraint.options:type_name -> pg_query.Node
	61,  // 797: pg_query.Constraint.where_clause:type_name -> pg_query.Node
	72,  // 798: pg_query.Constraint.pktable:type_name -> pg_query.RangeVar
	61,  // 799: pg_query.Constraint.fk_attrs:type_name -> pg_query.Node
	61,  // 800: pg_query.Constraint.pk_attrs:type_name -> pg_query.Node
	61,  // 801: pg_query.Constraint.fk_del_set_cols:type_name -> pg_query.Node
	61,  // 802: pg_query.Constraint.old_conpfeqop:type_name -> pg_query.Node
	61,  // 803: pg_query.DefElem.arg:type_name -> pg_query.Node
	8,   // 804: pg_query.DefElem.defaction:type_name -> pg_query.DefElemAction
	10,  // 805: pg_query.RangeTblEntry.rtekind:type_name -> pg_query.RTEKind
	268, // 806: pg_query.RangeTblEntry.tablesample:type_name -> pg_query.TableSampleClause
	123, // 807: pg_query.RangeTblEntry.subquery:type_name -> pg_query.Query
	47,  // 808: pg_query.RangeTblEntry.jointype:type_name -> pg_query.JoinType
	61,  // 809: pg_query.RangeTblEntry.joinaliasvars:type_name -> pg_query.Node
	61,  // 810: pg_query.RangeTblEntry.joinleftcols:type_name -> pg_query.Node
	61,  // 811: pg_query.RangeTblEntry.joinrightcols:type_name -> pg_query.Node
	71,  // 812: pg_query.RangeTblEntry.join_using_alias:type_name -> pg_query.Alias
	61,  // 813: pg_query.RangeTblEntry.functions:type_name -> pg_query.Node
	73,  // 814: pg_query.RangeTblEntry.tablefunc:type_name -> pg_query.TableFunc
	61,  // 815: pg_query.RangeTblEntry.values_lists:type_name -> pg_query.Node
	61,  // 816: pg_query.RangeTblEntry.coltypes:type_name -> pg_query.Node
	61,  // 817: pg_query.RangeTblEntry.coltypmods:type_name -> pg_query.Node
	61,  // 818: pg_query.RangeTblEntry.colcollations:type_name -> pg_query.Node
	71,  // 819: pg_query.RangeTblEntry.alias:type_name -> pg_query.Alias
	71,  // 820: pg_query.RangeTblEntry.eref:type_name -> pg_query.Alias
	61,  // 821: pg_query.RangeTblEntry.security_quals:type_name -> pg_query.Node
	61,  // 822: pg_query.RangeTblFunction.funcexpr:type_name -> pg_query.Node
	61,  // 823: pg_query.RangeTblFunction.funccolnames:type_name -> pg_query.Node
	61,  // 824: pg_query.RangeTblFunction.funccoltypes:type_name -> pg_query.Node
	61,  // 825: pg_query.RangeTblFunction.funccoltypmods:type_name -> pg_query.Node
	61,  // 826: pg_query.RangeTblFunction.funccolcollations:type_name -> pg_query.Node
	61,  // 827: pg_query.TableSampleClause.args:type_name -> pg_query.Node
	61,  // 828: pg_query.TableSampleClause.repeatable:type_name -> pg_query.Node
	11,  // 829: pg_query.WithCheckOption.kind:type_name -> pg_query.WCOKind
	61,  // 830: pg_query.WithCheckOption.qual:type_name -> pg_query.Node
	12,  // 831: pg_query.GroupingSet.kind:type_name -> pg_query.GroupingSetKind
	61,  // 832: pg_query.GroupingSet.content:type_name -> pg_query.Node
	61,  // 833: pg_query.WindowClause.partition_clause:type_name -> pg_query.Node
	61,  // 834: pg_query.WindowClause.order_clause:type_name -> pg_query.Node
	61,  // 835: pg_query.WindowClause.start_offset:type_name -> pg_query.Node
	61,  // 836: pg_query.WindowClause.end_offset:type_name -> pg_query.Node
	61,  // 837: pg_query.WindowClause.run_condition:type_name -> pg_query.Node
	61,  // 838: pg_query.ObjectWithArgs.objname:type_name -> pg_query.Node
	61,  // 839: pg_query.ObjectWithArgs.objargs:type_name -> pg_query.Node
	61,  // 840: pg_query.ObjectWithArgs.objfuncargs:type_name -> pg_query.Node
	61,  // 841: pg_query.AccessPriv.cols:type_name -> pg_query.Node
	273, // 842: pg_query.CreateOpClassItem.name:type_name -> pg_query.ObjectWithArgs
	61,  // 843: pg_query.CreateOpClassItem.order_family:type_name -> pg_query.Node
	61,  // 844: pg_query.CreateOpClassItem.class_args:type_name -> pg_query.Node
	260, // 845: pg_query.CreateOpClassItem.storedtype:type_name -> pg_query.TypeName
	72,  // 846: pg_query.TableLikeClause.relation:type_name -> pg_query.RangeVar
	260, // 847: pg_query.FunctionParameter.arg_type:type_name -> pg_query.TypeName
	24,  // 848: pg_query.FunctionParameter.mode:type_name -> pg_query.FunctionParameterMode
	61,  // 849: pg_query.FunctionParameter.defexpr:type_name -> pg_query.Node
	61,  // 850: pg_query.LockingClause.locked_rels:type_name -> pg_query.Node
	54,  // 851: pg_query.LockingClause.strength:type_name -> pg_query.LockClauseStrength
	55,  // 852: pg_query.LockingClause.wait_policy:type_name -> pg_query.LockWaitPolicy
	54,  // 853: pg_query.RowMarkClause.strength:type_name -> pg_query.LockClauseStrength
	55,  // 854: pg_query.RowMarkClause.wait_policy:type_name -> pg_query.LockWaitPolicy
	43,  // 855: pg_query.XmlSerialize.xmloption:type_name -> pg_query.XmlOptionType
	61,  // 856: pg_query.XmlSerialize.expr:type_name -> pg_query.Node
	260, // 857: pg_query.XmlSerialize.type_name:type_name -> pg_query.TypeName
	61,  // 858: pg_query.WithClause.ctes:type_name -> pg_query.Node
	61,  // 859: pg_query.InferClause.index_elems:type_name -> pg_query.Node
	61,  // 860: pg_query.InferClause.where_clause:type_name -> pg_query.Node
	52,  // 861: pg_query.OnConflictClause.action:type_name -> pg_query.OnConflictAction
	282, // 862: pg_query.OnConflictClause.infer:type_name -> pg_query.InferClause
	61,  // 863: pg_query.OnConflictClause.target_list:type_name -> pg_query.Node
	61,  // 864: pg_query.OnConflictClause.where_clause:type_name -> pg_query.Node
	61,  // 865: pg_query.CTESearchClause.search_col_list:type_name -> pg_query.Node
	61,  // 866: pg_query.CTECycleClause.cycle_col_list:type_name -> pg_query.Node
	61,  // 867: pg_query.CTECycleClause.cycle_mark_value:type_name -> pg_query.Node
	61,  // 868: pg_query.CTECycleClause.cycle_mark_default:type_name -> pg_query.Node
	61,  // 869: pg_query.CommonTableExpr.aliascolnames:type_name -> pg_query.Node
	13,  // 870: pg_query.CommonTableExpr.ctematerialized:type_name -> pg_query.CTEMaterialize
	61,  // 871: pg_query.CommonTableExpr.ctequery:type_name -> pg_query.Node
	284, // 872: pg_query.CommonTableExpr.search_clause:type_name -> pg_query.CTESearchClause
	285, // 873: pg_query.CommonTableExpr.cycle_clause:type_name -> pg_query.CTECycleClause
	61,  // 874: pg_query.CommonTableExpr.ctecolnames:type_name -> pg_query.Node
	61,  // 875: pg_query.CommonTableExpr.ctecoltypes:type_name -> pg_query.Node
	61,  // 876: pg_query.CommonTableExpr.ctecoltypmods:type_name -> pg_query.Node
	61,  // 877: pg_query.CommonTableExpr.ctecolcollations:type_name -> pg_query.Node
	46,  // 878: pg_query.MergeWhenClause.command_type:type_name -> pg_query.CmdType
	0,   // 879: pg_query.MergeWhenClause.override:type_name -> pg_query.OverridingKind
	61,  // 880: pg_query.MergeWhenClause.condition:type_name -> pg_query.Node
	61,  // 881: pg_query.MergeWhenClause.target_list:type_name -> pg_query.Node
	61,  // 882: pg_query.MergeWhenClause.values:type_name -> pg_query.Node
	6,   // 883: pg_query.RoleSpec.roletype:type_name -> pg_query.RoleSpecType
	61,  // 884: pg_query.PartitionElem.expr:type_name -> pg_query.Node
	61,  // 885: pg_query.PartitionElem.collation:type_name -> pg_query.Node
	61,  // 886: pg_query.PartitionElem.opclass:type_name -> pg_query.Node
	61,  // 887: pg_query.PartitionSpec.part_params:type_name -> pg_query.Node
	61,  // 888: pg_query.PartitionBoundSpec.listdatums:type_name -> pg_query.Node
	61,  // 889: pg_query.PartitionBoundSpec.lowerdatums:type_name -> pg_query.Node
	61,  // 890: pg_query.PartitionBoundSpec.upperdatums:type_name -> pg_query.Node
	9,   // 891: pg_query.PartitionRangeDatum.kind:type_name -> pg_query.PartitionRangeDatumKind
	61,  // 892: pg_query.PartitionRangeDatum.value:type_name -> pg_query.Node
	72,  // 893: pg_query.PartitionCmd.name:type_name -> pg_query.RangeVar
	292, // 894: pg_query.PartitionCmd.bound:type_name -> pg_query.PartitionBoundSpec
	72,  // 895: pg_query.VacuumRelation.relation:type_name -> pg_query.RangeVar
	61,  // 896: pg_query.VacuumRelation.va_cols:type_name -> pg_query.Node
	30,  // 897: pg_query.PublicationObjSpec.pubobjtype:type_name -> pg_query.PublicationObjSpecType
	297, // 898: pg_query.PublicationObjSpec.pubtable:type_name -> pg_query.PublicationTable
	72,  // 899: pg_query.PublicationTable.relation:type_name -> pg_query.RangeVar
	61,  // 900: pg_query.PublicationTable.where_clause:type_name -> pg_query.Node
	61,  // 901: pg_query.PublicationTable.columns:type_name -> pg_query.Node
	58,  // 902: pg_query.ScanToken.token:type_name -> pg_query.Token
	57,  // 903: pg_query.ScanToken.keyword_kind:type_name -> pg_query.KeywordKind
	904, // [904:904] is the sub-list for method output_type
	904, // [904:904] is the sub-list for method input_type
	904, // [904:904] is the sub-list for extension type_name
	904, // [904:904] is the sub-list for extension extendee
	0,   // [0:904] is the sub-list for field type_name
}

func init() { file_pg_query_proto_init() }
func file_pg_query_proto_init() {
	if File_pg_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pg_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Float); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Boolean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BitString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OidList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A_Const); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Alias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableFunc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Var); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Param); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aggref); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupingFunc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowFunc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptingRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuncExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedArgExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DistinctExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullIfExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarArrayOpExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlternativeSubPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldSelect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldStore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelabelType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoerceViaIO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayCoerceExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvertRowtypeExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollateExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseWhen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseTestExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowCompareExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoalesceExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinMaxExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLValueFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XmlExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanTest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoerceToDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoerceToDomainValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetToDefault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrentOfExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextValueExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferenceElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeTblRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FromExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnConflictExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntoClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelectStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PLAssignStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterDomainStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOperationStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrantRoleStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterDefaultPrivilegesStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosePortalStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefineStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommentStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFunctionStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterFunctionStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlistenStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDomainStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatedbStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropdbStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VacuumStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplainStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableAsStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSeqStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterSeqStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableSetStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VariableShowStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscardStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTrigStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePLangStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoleStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterRoleStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropRoleStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintsSetStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReindexStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckPointStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchemaStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterDatabaseStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterDatabaseRefreshCollStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterDatabaseSetStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterRoleSetStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConversionStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCastStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpClassStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpFamilyStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterOpFamilyStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeallocateStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeclareCursorStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableSpaceStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTableSpaceStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterObjectDependsStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterObjectSchemaStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterOwnerStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterOperatorStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTypeStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropOwnedStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReassignOwnedStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositeTypeStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnumStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRangeStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterEnumStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTSDictionaryStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTSConfigurationStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFdwStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterFdwStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateForeignServerStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterForeignServerStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserMappingStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterUserMappingStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropUserMappingStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableSpaceOptionsStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableMoveAllStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecLabelStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateForeignTableStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImportForeignSchemaStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExtensionStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterExtensionStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterExtensionContentsStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEventTrigStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterEventTrigStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshMatViewStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaIdentityStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterSystemStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterPolicyStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransformStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAmStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePublicationStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterPublicationStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubscriptionStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterSubscriptionStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropSubscriptionStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStatsStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterCollationStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterStatsStmt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A_Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParamRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuncCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A_Star); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A_Indices); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A_Indirection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*A_ArrayExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiAssignRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeCast); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollateClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeSubselect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeTableSample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeTableFunc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeTableFuncCol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeTblEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeTblFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableSampleClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithCheckOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortGroupClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupingSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectWithArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPriv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpClassItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableLikeClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockingClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowMarkClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XmlSerialize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OnConflictClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTESearchClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CTECycleClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonTableExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeWhenClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerTransition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionElem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionBoundSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionRangeDatum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartitionCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VacuumRelation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationObjSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationTable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InlineCodeBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pg_query_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScanToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pg_query_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Node_Alias)(nil),
		(*Node_RangeVar)(nil),
		(*Node_TableFunc)(nil),
		(*Node_Var)(nil),
		(*Node_Param)(nil),
		(*Node_Aggref)(nil),
		(*Node_GroupingFunc)(nil),
		(*Node_WindowFunc)(nil),
		(*Node_SubscriptingRef)(nil),
		(*Node_FuncExpr)(nil),
		(*Node_NamedArgExpr)(nil),
		(*Node_OpExpr)(nil),
		(*Node_DistinctExpr)(nil),
		(*Node_NullIfExpr)(nil),
		(*Node_ScalarArrayOpExpr)(nil),
		(*Node_BoolExpr)(nil),
		(*Node_SubLink)(nil),
		(*Node_SubPlan)(nil),
		(*Node_AlternativeSubPlan)(nil),
		(*Node_FieldSelect)(nil),
		(*Node_FieldStore)(nil),
		(*Node_RelabelType)(nil),
		(*Node_CoerceViaIo)(nil),
		(*Node_ArrayCoerceExpr)(nil),
		(*Node_ConvertRowtypeExpr)(nil),
		(*Node_CollateExpr)(nil),
		(*Node_CaseExpr)(nil),
		(*Node_CaseWhen)(nil),
		(*Node_CaseTestExpr)(nil),
		(*Node_ArrayExpr)(nil),
		(*Node_RowExpr)(nil),
		(*Node_RowCompareExpr)(nil),
		(*Node_CoalesceExpr)(nil),
		(*Node_MinMaxExpr)(nil),
		(*Node_SqlvalueFunction)(nil),
		(*Node_XmlExpr)(nil),
		(*Node_NullTest)(nil),
		(*Node_BooleanTest)(nil),
		(*Node_CoerceToDomain)(nil),
		(*Node_CoerceToDomainValue)(nil),
		(*Node_SetToDefault)(nil),
		(*Node_CurrentOfExpr)(nil),
		(*Node_NextValueExpr)(nil),
		(*Node_InferenceElem)(nil),
		(*Node_TargetEntry)(nil),
		(*Node_RangeTblRef)(nil),
		(*Node_JoinExpr)(nil),
		(*Node_FromExpr)(nil),
		(*Node_OnConflictExpr)(nil),
		(*Node_IntoClause)(nil),
		(*Node_MergeAction)(nil),
		(*Node_RawStmt)(nil),
		(*Node_Query)(nil),
		(*Node_InsertStmt)(nil),
		(*Node_DeleteStmt)(nil),
		(*Node_UpdateStmt)(nil),
		(*Node_MergeStmt)(nil),
		(*Node_SelectStmt)(nil),
		(*Node_ReturnStmt)(nil),
		(*Node_PlassignStmt)(nil),
		(*Node_AlterTableStmt)(nil),
		(*Node_AlterTableCmd)(nil),
		(*Node_AlterDomainStmt)(nil),
		(*Node_SetOperationStmt)(nil),
		(*Node_GrantStmt)(nil),
		(*Node_GrantRoleStmt)(nil),
		(*Node_AlterDefaultPrivilegesStmt)(nil),
		(*Node_ClosePortalStmt)(nil),
		(*Node_ClusterStmt)(nil),
		(*Node_CopyStmt)(nil),
		(*Node_CreateStmt)(nil),
		(*Node_DefineStmt)(nil),
		(*Node_DropStmt)(nil),
		(*Node_TruncateStmt)(nil),
		(*Node_CommentStmt)(nil),
		(*Node_FetchStmt)(nil),
		(*Node_IndexStmt)(nil),
		(*Node_CreateFunctionStmt)(nil),
		(*Node_AlterFunctionStmt)(nil),
		(*Node_DoStmt)(nil),
		(*Node_RenameStmt)(nil),
		(*Node_RuleStmt)(nil),
		(*Node_NotifyStmt)(nil),
		(*Node_ListenStmt)(nil),
		(*Node_UnlistenStmt)(nil),
		(*Node_TransactionStmt)(nil),
		(*Node_ViewStmt)(nil),
		(*Node_LoadStmt)(nil),
		(*Node_CreateDomainStmt)(nil),
		(*Node_CreatedbStmt)(nil),
		(*Node_DropdbStmt)(nil),
		(*Node_VacuumStmt)(nil),
		(*Node_ExplainStmt)(nil),
		(*Node_CreateTableAsStmt)(nil),
		(*Node_CreateSeqStmt)(nil),
		(*Node_AlterSeqStmt)(nil),
		(*Node_VariableSetStmt)(nil),
		(*Node_VariableShowStmt)(nil),
		(*Node_DiscardStmt)(nil),
		(*Node_CreateTrigStmt)(nil),
		(*Node_CreatePlangStmt)(nil),
		(*Node_CreateRoleStmt)(nil),
		(*Node_AlterRoleStmt)(nil),
		(*Node_DropRoleStmt)(nil),
		(*Node_LockStmt)(nil),
		(*Node_ConstraintsSetStmt)(nil),
		(*Node_ReindexStmt)(nil),
		(*Node_CheckPointStmt)(nil),
		(*Node_CreateSchemaStmt)(nil),
		(*Node_AlterDatabaseStmt)(nil),
		(*Node_AlterDatabaseRefreshCollStmt)(nil),
		(*Node_AlterDatabaseSetStmt)(nil),
		(*Node_AlterRoleSetStmt)(nil),
		(*Node_CreateConversionStmt)(nil),
		(*Node_CreateCastStmt)(nil),
		(*Node_CreateOpClassStmt)(nil),
		(*Node_CreateOpFamilyStmt)(nil),
		(*Node_AlterOpFamilyStmt)(nil),
		(*Node_PrepareStmt)(nil),
		(*Node_ExecuteStmt)(nil),
		(*Node_DeallocateStmt)(nil),
		(*Node_DeclareCursorStmt)(nil),
		(*Node_CreateTableSpaceStmt)(nil),
		(*Node_DropTableSpaceStmt)(nil),
		(*Node_AlterObjectDependsStmt)(nil),
		(*Node_AlterObjectSchemaStmt)(nil),
		(*Node_AlterOwnerStmt)(nil),
		(*Node_AlterOperatorStmt)(nil),
		(*Node_AlterTypeStmt)(nil),
		(*Node_DropOwnedStmt)(nil),
		(*Node_ReassignOwnedStmt)(nil),
		(*Node_CompositeTypeStmt)(nil),
		(*Node_CreateEnumStmt)(nil),
		(*Node_CreateRangeStmt)(nil),
		(*Node_AlterEnumStmt)(nil),
		(*Node_AlterTsdictionaryStmt)(nil),
		(*Node_AlterTsconfigurationStmt)(nil),
		(*Node_CreateFdwStmt)(nil),
		(*Node_AlterFdwStmt)(nil),
		(*Node_CreateForeignServerStmt)(nil),
		(*Node_AlterForeignServerStmt)(nil),
		(*Node_CreateUserMappingStmt)(nil),
		(*Node_AlterUserMappingStmt)(nil),
		(*Node_DropUserMappingStmt)(nil),
		(*Node_AlterTableSpaceOptionsStmt)(nil),
		(*Node_AlterTableMoveAllStmt)(nil),
		(*Node_SecLabelStmt)(nil),
		(*Node_CreateForeignTableStmt)(nil),
		(*Node_ImportForeignSchemaStmt)(nil),
		(*Node_CreateExtensionStmt)(nil),
		(*Node_AlterExtensionStmt)(nil),
		(*Node_AlterExtensionContentsStmt)(nil),
		(*Node_CreateEventTrigStmt)(nil),
		(*Node_AlterEventTrigStmt)(nil),
		(*Node_RefreshMatViewStmt)(nil),
		(*Node_ReplicaIdentityStmt)(nil),
		(*Node_AlterSystemStmt)(nil),
		(*Node_CreatePolicyStmt)(nil),
		(*Node_AlterPolicyStmt)(nil),
		(*Node_CreateTransformStmt)(nil),
		(*Node_CreateAmStmt)(nil),
		(*Node_CreatePublicationStmt)(nil),
		(*Node_AlterPublicationStmt)(nil),
		(*Node_CreateSubscriptionStmt)(nil),
		(*Node_AlterSubscriptionStmt)(nil),
		(*Node_DropSubscriptionStmt)(nil),
		(*Node_CreateStatsStmt)(nil),
		(*Node_AlterCollationStmt)(nil),
		(*Node_CallStmt)(nil),
		(*Node_AlterStatsStmt)(nil),
		(*Node_AExpr)(nil),
		(*Node_ColumnRef)(nil),
		(*Node_ParamRef)(nil),
		(*Node_FuncCall)(nil),
		(*Node_AStar)(nil),
		(*Node_AIndices)(nil),
		(*Node_AIndirection)(nil),
		(*Node_AArrayExpr)(nil),
		(*Node_ResTarget)(nil),
		(*Node_MultiAssignRef)(nil),
		(*Node_TypeCast)(nil),
		(*Node_CollateClause)(nil),
		(*Node_SortBy)(nil),
		(*Node_WindowDef)(nil),
		(*Node_RangeSubselect)(nil),
		(*Node_RangeFunction)(nil),
		(*Node_RangeTableSample)(nil),
		(*Node_RangeTableFunc)(nil),
		(*Node_RangeTableFuncCol)(nil),
		(*Node_TypeName)(nil),
		(*Node_ColumnDef)(nil),
		(*Node_IndexElem)(nil),
		(*Node_StatsElem)(nil),
		(*Node_Constraint)(nil),
		(*Node_DefElem)(nil),
		(*Node_RangeTblEntry)(nil),
		(*Node_RangeTblFunction)(nil),
		(*Node_TableSampleClause)(nil),
		(*Node_WithCheckOption)(nil),
		(*Node_SortGroupClause)(nil),
		(*Node_GroupingSet)(nil),
		(*Node_WindowClause)(nil),
		(*Node_ObjectWithArgs)(nil),
		(*Node_AccessPriv)(nil),
		(*Node_CreateOpClassItem)(nil),
		(*Node_TableLikeClause)(nil),
		(*Node_FunctionParameter)(nil),
		(*Node_LockingClause)(nil),
		(*Node_RowMarkClause)(nil),
		(*Node_XmlSerialize)(nil),
		(*Node_WithClause)(nil),
		(*Node_InferClause)(nil),
		(*Node_OnConflictClause)(nil),
		(*Node_CtesearchClause)(nil),
		(*Node_CtecycleClause)(nil),
		(*Node_CommonTableExpr)(nil),
		(*Node_MergeWhenClause)(nil),
		(*Node_RoleSpec)(nil),
		(*Node_TriggerTransition)(nil),
		(*Node_PartitionElem)(nil),
		(*Node_PartitionSpec)(nil),
		(*Node_PartitionBoundSpec)(nil),
		(*Node_PartitionRangeDatum)(nil),
		(*Node_PartitionCmd)(nil),
		(*Node_VacuumRelation)(nil),
		(*Node_PublicationObjSpec)(nil),
		(*Node_PublicationTable)(nil),
		(*Node_InlineCodeBlock)(nil),
		(*Node_CallContext)(nil),
		(*Node_Integer)(nil),
		(*Node_Float)(nil),
		(*Node_Boolean)(nil),
		(*Node_String_)(nil),
		(*Node_BitString)(nil),
		(*Node_List)(nil),
		(*Node_IntList)(nil),
		(*Node_OidList)(nil),
		(*Node_AConst)(nil),
	}
	file_pg_query_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*A_Const_Ival)(nil),
		(*A_Const_Fval)(nil),
		(*A_Const_Boolval)(nil),
		(*A_Const_Sval)(nil),
		(*A_Const_Bsval)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pg_query_proto_rawDesc,
			NumEnums:      59,
			NumMessages:   242,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pg_query_proto_goTypes,
		DependencyIndexes: file_pg_query_proto_depIdxs,
		EnumInfos:         file_pg_query_proto_enumTypes,
		MessageInfos:      file_pg_query_proto_msgTypes,
	}.Build()
	File_pg_query_proto = out.File
	file_pg_query_proto_rawDesc = nil
	file_pg_query_proto_goTypes = nil
	file_pg_query_proto_depIdxs = nil
}
