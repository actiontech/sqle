package util

import "strings"

// QueryTextTruncated - Query was unparsable and is exactly track_activity_query_size-1
// long. Only applies to query text from pg_stat_activity. This can be mitigated by
// raising track_activity_query_size.
const QueryTextTruncated string = "<truncated query>"

// QueryTextUnparsable - Query was unparsable and we don't know why. This could be because of
// the pg_query parser not yet understanding the syntax of newer Postgres versions.
const QueryTextUnparsable string = "<unparsable query>"

// QueryTextUnavailable - We only have the pg_stat_statement queryid for this query, not
// the actual query text. This occurs when there is high churn on the pg_stat_statements
// data and the less frequent query text collection didn't contain the text anymore for
// a query ID we saw earlier. Can be mitigated by increasing pg_stat_statements.max.
const QueryTextUnavailable string = "<query text unavailable>"

// QueryTextInsufficientPrivs - We did not have permissions to read this query text.
const QueryTextInsufficientPrivs string = "<insufficient privilege>"

// QueryTextCollector - Query generated by the pganalyze collector itself.
const QueryTextCollector string = "<pganalyze-collector>"

func fixTruncatedQuery(query string) string {
	if strings.Count(query, "'")%2 == 1 { // Odd number of '
		query += "'"
	}
	if strings.Count(query, "\"")%2 == 1 { // Odd number of "
		query += "\""
	}

	openParens := strings.Count(query, "(") - strings.Count(query, ")")
	if openParens > 0 {
		for i := 0; i < openParens; i++ {
			query += ")"
		}
	}

	return query
}
