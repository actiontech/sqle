// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.14.0
// source: sequence_report.proto

package pganalyze_collector

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SequenceReportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseReferences       []*DatabaseReference       `protobuf:"bytes,10,rep,name=database_references,json=databaseReferences,proto3" json:"database_references,omitempty"`
	SequenceReferences       []*SequenceReference       `protobuf:"bytes,11,rep,name=sequence_references,json=sequenceReferences,proto3" json:"sequence_references,omitempty"`
	RelationReferences       []*RelationReference       `protobuf:"bytes,12,rep,name=relation_references,json=relationReferences,proto3" json:"relation_references,omitempty"`
	SequenceInformations     []*SequenceInformation     `protobuf:"bytes,20,rep,name=sequence_informations,json=sequenceInformations,proto3" json:"sequence_informations,omitempty"`
	SerialColumnInformations []*SerialColumnInformation `protobuf:"bytes,21,rep,name=serial_column_informations,json=serialColumnInformations,proto3" json:"serial_column_informations,omitempty"`
}

func (x *SequenceReportData) Reset() {
	*x = SequenceReportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceReportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceReportData) ProtoMessage() {}

func (x *SequenceReportData) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceReportData.ProtoReflect.Descriptor instead.
func (*SequenceReportData) Descriptor() ([]byte, []int) {
	return file_sequence_report_proto_rawDescGZIP(), []int{0}
}

func (x *SequenceReportData) GetDatabaseReferences() []*DatabaseReference {
	if x != nil {
		return x.DatabaseReferences
	}
	return nil
}

func (x *SequenceReportData) GetSequenceReferences() []*SequenceReference {
	if x != nil {
		return x.SequenceReferences
	}
	return nil
}

func (x *SequenceReportData) GetRelationReferences() []*RelationReference {
	if x != nil {
		return x.RelationReferences
	}
	return nil
}

func (x *SequenceReportData) GetSequenceInformations() []*SequenceInformation {
	if x != nil {
		return x.SequenceInformations
	}
	return nil
}

func (x *SequenceReportData) GetSerialColumnInformations() []*SerialColumnInformation {
	if x != nil {
		return x.SerialColumnInformations
	}
	return nil
}

type SequenceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseIdx  int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	SchemaName   string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	SequenceName string `protobuf:"bytes,3,opt,name=sequence_name,json=sequenceName,proto3" json:"sequence_name,omitempty"`
}

func (x *SequenceReference) Reset() {
	*x = SequenceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceReference) ProtoMessage() {}

func (x *SequenceReference) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceReference.ProtoReflect.Descriptor instead.
func (*SequenceReference) Descriptor() ([]byte, []int) {
	return file_sequence_report_proto_rawDescGZIP(), []int{1}
}

func (x *SequenceReference) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *SequenceReference) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *SequenceReference) GetSequenceName() string {
	if x != nil {
		return x.SequenceName
	}
	return ""
}

type SequenceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceIdx int32 `protobuf:"varint,1,opt,name=sequence_idx,json=sequenceIdx,proto3" json:"sequence_idx,omitempty"`
	LastValue   int64 `protobuf:"varint,2,opt,name=last_value,json=lastValue,proto3" json:"last_value,omitempty"`
	StartValue  int64 `protobuf:"varint,3,opt,name=start_value,json=startValue,proto3" json:"start_value,omitempty"`
	IncrementBy int64 `protobuf:"varint,4,opt,name=increment_by,json=incrementBy,proto3" json:"increment_by,omitempty"`
	MaxValue    int64 `protobuf:"varint,5,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	MinValue    int64 `protobuf:"varint,6,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	CacheValue  int64 `protobuf:"varint,7,opt,name=cache_value,json=cacheValue,proto3" json:"cache_value,omitempty"`
	IsCycled    bool  `protobuf:"varint,8,opt,name=is_cycled,json=isCycled,proto3" json:"is_cycled,omitempty"`
}

func (x *SequenceInformation) Reset() {
	*x = SequenceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceInformation) ProtoMessage() {}

func (x *SequenceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceInformation.ProtoReflect.Descriptor instead.
func (*SequenceInformation) Descriptor() ([]byte, []int) {
	return file_sequence_report_proto_rawDescGZIP(), []int{2}
}

func (x *SequenceInformation) GetSequenceIdx() int32 {
	if x != nil {
		return x.SequenceIdx
	}
	return 0
}

func (x *SequenceInformation) GetLastValue() int64 {
	if x != nil {
		return x.LastValue
	}
	return 0
}

func (x *SequenceInformation) GetStartValue() int64 {
	if x != nil {
		return x.StartValue
	}
	return 0
}

func (x *SequenceInformation) GetIncrementBy() int64 {
	if x != nil {
		return x.IncrementBy
	}
	return 0
}

func (x *SequenceInformation) GetMaxValue() int64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *SequenceInformation) GetMinValue() int64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *SequenceInformation) GetCacheValue() int64 {
	if x != nil {
		return x.CacheValue
	}
	return 0
}

func (x *SequenceInformation) GetIsCycled() bool {
	if x != nil {
		return x.IsCycled
	}
	return false
}

type SerialColumnInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SequenceIdx    int32                                    `protobuf:"varint,1,opt,name=sequence_idx,json=sequenceIdx,proto3" json:"sequence_idx,omitempty"`
	RelationIdx    int32                                    `protobuf:"varint,2,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	ColumnName     string                                   `protobuf:"bytes,3,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	DataType       string                                   `protobuf:"bytes,10,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	MaximumValue   uint64                                   `protobuf:"varint,11,opt,name=maximum_value,json=maximumValue,proto3" json:"maximum_value,omitempty"`
	ForeignColumns []*SerialColumnInformation_ForeignColumn `protobuf:"bytes,20,rep,name=foreign_columns,json=foreignColumns,proto3" json:"foreign_columns,omitempty"`
}

func (x *SerialColumnInformation) Reset() {
	*x = SerialColumnInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerialColumnInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialColumnInformation) ProtoMessage() {}

func (x *SerialColumnInformation) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialColumnInformation.ProtoReflect.Descriptor instead.
func (*SerialColumnInformation) Descriptor() ([]byte, []int) {
	return file_sequence_report_proto_rawDescGZIP(), []int{3}
}

func (x *SerialColumnInformation) GetSequenceIdx() int32 {
	if x != nil {
		return x.SequenceIdx
	}
	return 0
}

func (x *SerialColumnInformation) GetRelationIdx() int32 {
	if x != nil {
		return x.RelationIdx
	}
	return 0
}

func (x *SerialColumnInformation) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *SerialColumnInformation) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *SerialColumnInformation) GetMaximumValue() uint64 {
	if x != nil {
		return x.MaximumValue
	}
	return 0
}

func (x *SerialColumnInformation) GetForeignColumns() []*SerialColumnInformation_ForeignColumn {
	if x != nil {
		return x.ForeignColumns
	}
	return nil
}

type SerialColumnInformation_ForeignColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationIdx  int32  `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	ColumnName   string `protobuf:"bytes,2,opt,name=column_name,json=columnName,proto3" json:"column_name,omitempty"`
	DataType     string `protobuf:"bytes,10,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	MaximumValue uint64 `protobuf:"varint,11,opt,name=maximum_value,json=maximumValue,proto3" json:"maximum_value,omitempty"`
	// True if the relationship has been determined based on names alone, instead of an actual FK constraint
	Inferred bool `protobuf:"varint,12,opt,name=inferred,proto3" json:"inferred,omitempty"`
}

func (x *SerialColumnInformation_ForeignColumn) Reset() {
	*x = SerialColumnInformation_ForeignColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sequence_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerialColumnInformation_ForeignColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerialColumnInformation_ForeignColumn) ProtoMessage() {}

func (x *SerialColumnInformation_ForeignColumn) ProtoReflect() protoreflect.Message {
	mi := &file_sequence_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerialColumnInformation_ForeignColumn.ProtoReflect.Descriptor instead.
func (*SerialColumnInformation_ForeignColumn) Descriptor() ([]byte, []int) {
	return file_sequence_report_proto_rawDescGZIP(), []int{3, 0}
}

func (x *SerialColumnInformation_ForeignColumn) GetRelationIdx() int32 {
	if x != nil {
		return x.RelationIdx
	}
	return 0
}

func (x *SerialColumnInformation_ForeignColumn) GetColumnName() string {
	if x != nil {
		return x.ColumnName
	}
	return ""
}

func (x *SerialColumnInformation_ForeignColumn) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *SerialColumnInformation_ForeignColumn) GetMaximumValue() uint64 {
	if x != nil {
		return x.MaximumValue
	}
	return 0
}

func (x *SerialColumnInformation_ForeignColumn) GetInferred() bool {
	if x != nil {
		return x.Inferred
	}
	return false
}

var File_sequence_report_proto protoreflect.FileDescriptor

var file_sequence_report_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x0c, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xea, 0x03, 0x0a, 0x12, 0x53,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x57, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x12, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x15,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x67,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x1a, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x7c, 0x0a, 0x11, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x78, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x78,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x63, 0x68, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x73, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x22, 0xdb, 0x03, 0x0a, 0x17,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x63, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x67, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x1a, 0xb1, 0x01, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x2f, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sequence_report_proto_rawDescOnce sync.Once
	file_sequence_report_proto_rawDescData = file_sequence_report_proto_rawDesc
)

func file_sequence_report_proto_rawDescGZIP() []byte {
	file_sequence_report_proto_rawDescOnce.Do(func() {
		file_sequence_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_sequence_report_proto_rawDescData)
	})
	return file_sequence_report_proto_rawDescData
}

var file_sequence_report_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_sequence_report_proto_goTypes = []interface{}{
	(*SequenceReportData)(nil),                    // 0: pganalyze.collector.SequenceReportData
	(*SequenceReference)(nil),                     // 1: pganalyze.collector.SequenceReference
	(*SequenceInformation)(nil),                   // 2: pganalyze.collector.SequenceInformation
	(*SerialColumnInformation)(nil),               // 3: pganalyze.collector.SerialColumnInformation
	(*SerialColumnInformation_ForeignColumn)(nil), // 4: pganalyze.collector.SerialColumnInformation.ForeignColumn
	(*DatabaseReference)(nil),                     // 5: pganalyze.collector.DatabaseReference
	(*RelationReference)(nil),                     // 6: pganalyze.collector.RelationReference
}
var file_sequence_report_proto_depIdxs = []int32{
	5, // 0: pganalyze.collector.SequenceReportData.database_references:type_name -> pganalyze.collector.DatabaseReference
	1, // 1: pganalyze.collector.SequenceReportData.sequence_references:type_name -> pganalyze.collector.SequenceReference
	6, // 2: pganalyze.collector.SequenceReportData.relation_references:type_name -> pganalyze.collector.RelationReference
	2, // 3: pganalyze.collector.SequenceReportData.sequence_informations:type_name -> pganalyze.collector.SequenceInformation
	3, // 4: pganalyze.collector.SequenceReportData.serial_column_informations:type_name -> pganalyze.collector.SerialColumnInformation
	4, // 5: pganalyze.collector.SerialColumnInformation.foreign_columns:type_name -> pganalyze.collector.SerialColumnInformation.ForeignColumn
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_sequence_report_proto_init() }
func file_sequence_report_proto_init() {
	if File_sequence_report_proto != nil {
		return
	}
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_sequence_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceReportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerialColumnInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sequence_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerialColumnInformation_ForeignColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sequence_report_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sequence_report_proto_goTypes,
		DependencyIndexes: file_sequence_report_proto_depIdxs,
		MessageInfos:      file_sequence_report_proto_msgTypes,
	}.Build()
	File_sequence_report_proto = out.File
	file_sequence_report_proto_rawDesc = nil
	file_sequence_report_proto_goTypes = nil
	file_sequence_report_proto_depIdxs = nil
}
