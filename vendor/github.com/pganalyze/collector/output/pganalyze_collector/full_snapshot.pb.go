// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.14.0
// source: full_snapshot.proto

package pganalyze_collector

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ! When changing this, also update mappings/backend_state.json
type BackendCountStatistic_BackendState int32

const (
	BackendCountStatistic_UNKNOWN_STATE               BackendCountStatistic_BackendState = 0 // unknown
	BackendCountStatistic_ACTIVE                      BackendCountStatistic_BackendState = 1 // active
	BackendCountStatistic_IDLE                        BackendCountStatistic_BackendState = 2 // idle
	BackendCountStatistic_IDLE_IN_TRANSACTION         BackendCountStatistic_BackendState = 3 // idle in transaction
	BackendCountStatistic_IDLE_IN_TRANSACTION_ABORTED BackendCountStatistic_BackendState = 4 // idle in transaction (aborted)
	BackendCountStatistic_FASTPATH_FUNCTION_CALL      BackendCountStatistic_BackendState = 5 // fastpath function call
	BackendCountStatistic_DISABLED                    BackendCountStatistic_BackendState = 6 // disabled
)

// Enum value maps for BackendCountStatistic_BackendState.
var (
	BackendCountStatistic_BackendState_name = map[int32]string{
		0: "UNKNOWN_STATE",
		1: "ACTIVE",
		2: "IDLE",
		3: "IDLE_IN_TRANSACTION",
		4: "IDLE_IN_TRANSACTION_ABORTED",
		5: "FASTPATH_FUNCTION_CALL",
		6: "DISABLED",
	}
	BackendCountStatistic_BackendState_value = map[string]int32{
		"UNKNOWN_STATE":               0,
		"ACTIVE":                      1,
		"IDLE":                        2,
		"IDLE_IN_TRANSACTION":         3,
		"IDLE_IN_TRANSACTION_ABORTED": 4,
		"FASTPATH_FUNCTION_CALL":      5,
		"DISABLED":                    6,
	}
)

func (x BackendCountStatistic_BackendState) Enum() *BackendCountStatistic_BackendState {
	p := new(BackendCountStatistic_BackendState)
	*p = x
	return p
}

func (x BackendCountStatistic_BackendState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackendCountStatistic_BackendState) Descriptor() protoreflect.EnumDescriptor {
	return file_full_snapshot_proto_enumTypes[0].Descriptor()
}

func (BackendCountStatistic_BackendState) Type() protoreflect.EnumType {
	return &file_full_snapshot_proto_enumTypes[0]
}

func (x BackendCountStatistic_BackendState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackendCountStatistic_BackendState.Descriptor instead.
func (BackendCountStatistic_BackendState) EnumDescriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{12, 0}
}

// ! When changing this, also update mappings/backend_type.json
type BackendCountStatistic_BackendType int32

const (
	BackendCountStatistic_UNKNOWN_TYPE        BackendCountStatistic_BackendType = 0  // unknown
	BackendCountStatistic_AUTOVACUUM_LAUNCHER BackendCountStatistic_BackendType = 1  // autovacuum launcher
	BackendCountStatistic_AUTOVACUUM_WORKER   BackendCountStatistic_BackendType = 2  // autovacuum worker
	BackendCountStatistic_BACKGROUND_WORKER   BackendCountStatistic_BackendType = 3  // background worker
	BackendCountStatistic_BACKGROUND_WRITER   BackendCountStatistic_BackendType = 4  // background writer
	BackendCountStatistic_CLIENT_BACKEND      BackendCountStatistic_BackendType = 5  // client backend
	BackendCountStatistic_CHECKPOINTER        BackendCountStatistic_BackendType = 6  // checkpointer
	BackendCountStatistic_STARTUP             BackendCountStatistic_BackendType = 7  // startup
	BackendCountStatistic_WALRECEIVER         BackendCountStatistic_BackendType = 8  // walreceiver
	BackendCountStatistic_WALSENDER           BackendCountStatistic_BackendType = 9  // walsender
	BackendCountStatistic_WALWRITER           BackendCountStatistic_BackendType = 10 // walwriter
)

// Enum value maps for BackendCountStatistic_BackendType.
var (
	BackendCountStatistic_BackendType_name = map[int32]string{
		0:  "UNKNOWN_TYPE",
		1:  "AUTOVACUUM_LAUNCHER",
		2:  "AUTOVACUUM_WORKER",
		3:  "BACKGROUND_WORKER",
		4:  "BACKGROUND_WRITER",
		5:  "CLIENT_BACKEND",
		6:  "CHECKPOINTER",
		7:  "STARTUP",
		8:  "WALRECEIVER",
		9:  "WALSENDER",
		10: "WALWRITER",
	}
	BackendCountStatistic_BackendType_value = map[string]int32{
		"UNKNOWN_TYPE":        0,
		"AUTOVACUUM_LAUNCHER": 1,
		"AUTOVACUUM_WORKER":   2,
		"BACKGROUND_WORKER":   3,
		"BACKGROUND_WRITER":   4,
		"CLIENT_BACKEND":      5,
		"CHECKPOINTER":        6,
		"STARTUP":             7,
		"WALRECEIVER":         8,
		"WALSENDER":           9,
		"WALWRITER":           10,
	}
)

func (x BackendCountStatistic_BackendType) Enum() *BackendCountStatistic_BackendType {
	p := new(BackendCountStatistic_BackendType)
	*p = x
	return p
}

func (x BackendCountStatistic_BackendType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackendCountStatistic_BackendType) Descriptor() protoreflect.EnumDescriptor {
	return file_full_snapshot_proto_enumTypes[1].Descriptor()
}

func (BackendCountStatistic_BackendType) Type() protoreflect.EnumType {
	return &file_full_snapshot_proto_enumTypes[1]
}

func (x BackendCountStatistic_BackendType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackendCountStatistic_BackendType.Descriptor instead.
func (BackendCountStatistic_BackendType) EnumDescriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{12, 1}
}

type RelationInformation_PartitionStrategy int32

const (
	RelationInformation_UNKNOWN RelationInformation_PartitionStrategy = 0
	RelationInformation_RANGE   RelationInformation_PartitionStrategy = 1
	RelationInformation_LIST    RelationInformation_PartitionStrategy = 2
	RelationInformation_HASH    RelationInformation_PartitionStrategy = 3
)

// Enum value maps for RelationInformation_PartitionStrategy.
var (
	RelationInformation_PartitionStrategy_name = map[int32]string{
		0: "UNKNOWN",
		1: "RANGE",
		2: "LIST",
		3: "HASH",
	}
	RelationInformation_PartitionStrategy_value = map[string]int32{
		"UNKNOWN": 0,
		"RANGE":   1,
		"LIST":    2,
		"HASH":    3,
	}
)

func (x RelationInformation_PartitionStrategy) Enum() *RelationInformation_PartitionStrategy {
	p := new(RelationInformation_PartitionStrategy)
	*p = x
	return p
}

func (x RelationInformation_PartitionStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationInformation_PartitionStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_full_snapshot_proto_enumTypes[2].Descriptor()
}

func (RelationInformation_PartitionStrategy) Type() protoreflect.EnumType {
	return &file_full_snapshot_proto_enumTypes[2]
}

func (x RelationInformation_PartitionStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationInformation_PartitionStrategy.Descriptor instead.
func (RelationInformation_PartitionStrategy) EnumDescriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{18, 0}
}

type RelationEvent_EventType int32

const (
	RelationEvent_MANUAL_VACUUM  RelationEvent_EventType = 0 // Manually vacuumed (not counting VACUUM FULL)
	RelationEvent_AUTO_VACUUM    RelationEvent_EventType = 1 // Vacuumed by the autovacuum daemon
	RelationEvent_MANUAL_ANALYZE RelationEvent_EventType = 2 // Manually analyzed
	RelationEvent_AUTO_ANALYZE   RelationEvent_EventType = 3 // Analyzed by the autovacuum daemon
)

// Enum value maps for RelationEvent_EventType.
var (
	RelationEvent_EventType_name = map[int32]string{
		0: "MANUAL_VACUUM",
		1: "AUTO_VACUUM",
		2: "MANUAL_ANALYZE",
		3: "AUTO_ANALYZE",
	}
	RelationEvent_EventType_value = map[string]int32{
		"MANUAL_VACUUM":  0,
		"AUTO_VACUUM":    1,
		"MANUAL_ANALYZE": 2,
		"AUTO_ANALYZE":   3,
	}
)

func (x RelationEvent_EventType) Enum() *RelationEvent_EventType {
	p := new(RelationEvent_EventType)
	*p = x
	return p
}

func (x RelationEvent_EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationEvent_EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_full_snapshot_proto_enumTypes[3].Descriptor()
}

func (RelationEvent_EventType) Type() protoreflect.EnumType {
	return &file_full_snapshot_proto_enumTypes[3]
}

func (x RelationEvent_EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelationEvent_EventType.Descriptor instead.
func (RelationEvent_EventType) EnumDescriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{20, 0}
}

type FunctionInformation_FunctionKind int32

const (
	FunctionInformation_UNKNOWN   FunctionInformation_FunctionKind = 0
	FunctionInformation_FUNCTION  FunctionInformation_FunctionKind = 1
	FunctionInformation_AGGREGATE FunctionInformation_FunctionKind = 2
	FunctionInformation_WINDOW    FunctionInformation_FunctionKind = 3
	FunctionInformation_PROCEDURE FunctionInformation_FunctionKind = 4
)

// Enum value maps for FunctionInformation_FunctionKind.
var (
	FunctionInformation_FunctionKind_name = map[int32]string{
		0: "UNKNOWN",
		1: "FUNCTION",
		2: "AGGREGATE",
		3: "WINDOW",
		4: "PROCEDURE",
	}
	FunctionInformation_FunctionKind_value = map[string]int32{
		"UNKNOWN":   0,
		"FUNCTION":  1,
		"AGGREGATE": 2,
		"WINDOW":    3,
		"PROCEDURE": 4,
	}
)

func (x FunctionInformation_FunctionKind) Enum() *FunctionInformation_FunctionKind {
	p := new(FunctionInformation_FunctionKind)
	*p = x
	return p
}

func (x FunctionInformation_FunctionKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FunctionInformation_FunctionKind) Descriptor() protoreflect.EnumDescriptor {
	return file_full_snapshot_proto_enumTypes[4].Descriptor()
}

func (FunctionInformation_FunctionKind) Type() protoreflect.EnumType {
	return &file_full_snapshot_proto_enumTypes[4]
}

func (x FunctionInformation_FunctionKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FunctionInformation_FunctionKind.Descriptor instead.
func (FunctionInformation_FunctionKind) EnumDescriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{23, 0}
}

type CustomTypeInformation_Type int32

const (
	CustomTypeInformation_ENUM       CustomTypeInformation_Type = 0
	CustomTypeInformation_DOMAIN     CustomTypeInformation_Type = 1
	CustomTypeInformation_COMPOSITE  CustomTypeInformation_Type = 2
	CustomTypeInformation_BASE       CustomTypeInformation_Type = 3
	CustomTypeInformation_PSEUDO     CustomTypeInformation_Type = 4
	CustomTypeInformation_RANGE      CustomTypeInformation_Type = 5
	CustomTypeInformation_MULTIRANGE CustomTypeInformation_Type = 6
)

// Enum value maps for CustomTypeInformation_Type.
var (
	CustomTypeInformation_Type_name = map[int32]string{
		0: "ENUM",
		1: "DOMAIN",
		2: "COMPOSITE",
		3: "BASE",
		4: "PSEUDO",
		5: "RANGE",
		6: "MULTIRANGE",
	}
	CustomTypeInformation_Type_value = map[string]int32{
		"ENUM":       0,
		"DOMAIN":     1,
		"COMPOSITE":  2,
		"BASE":       3,
		"PSEUDO":     4,
		"RANGE":      5,
		"MULTIRANGE": 6,
	}
)

func (x CustomTypeInformation_Type) Enum() *CustomTypeInformation_Type {
	p := new(CustomTypeInformation_Type)
	*p = x
	return p
}

func (x CustomTypeInformation_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CustomTypeInformation_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_full_snapshot_proto_enumTypes[5].Descriptor()
}

func (CustomTypeInformation_Type) Type() protoreflect.EnumType {
	return &file_full_snapshot_proto_enumTypes[5]
}

func (x CustomTypeInformation_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CustomTypeInformation_Type.Descriptor instead.
func (CustomTypeInformation_Type) EnumDescriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{25, 0}
}

type FullSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Basic information about this snapshot
	SnapshotVersionMajor               int32                  `protobuf:"varint,1,opt,name=snapshot_version_major,json=snapshotVersionMajor,proto3" json:"snapshot_version_major,omitempty"`
	SnapshotVersionMinor               int32                  `protobuf:"varint,2,opt,name=snapshot_version_minor,json=snapshotVersionMinor,proto3" json:"snapshot_version_minor,omitempty"`
	CollectorVersion                   string                 `protobuf:"bytes,3,opt,name=collector_version,json=collectorVersion,proto3" json:"collector_version,omitempty"`
	FailedRun                          bool                   `protobuf:"varint,4,opt,name=failed_run,json=failedRun,proto3" json:"failed_run,omitempty"` // failed runs are submitted so we can provide more context in the UI
	SnapshotUuid                       string                 `protobuf:"bytes,10,opt,name=snapshot_uuid,json=snapshotUuid,proto3" json:"snapshot_uuid,omitempty"`
	CollectedAt                        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=collected_at,json=collectedAt,proto3" json:"collected_at,omitempty"`
	CollectedIntervalSecs              uint32                 `protobuf:"varint,12,opt,name=collected_interval_secs,json=collectedIntervalSecs,proto3" json:"collected_interval_secs,omitempty"`
	Config                             *CollectorConfig       `protobuf:"bytes,13,opt,name=config,proto3" json:"config,omitempty"`
	CollectorStatistic                 *CollectorStatistic    `protobuf:"bytes,20,opt,name=collector_statistic,json=collectorStatistic,proto3" json:"collector_statistic,omitempty"`
	CollectorErrors                    []string               `protobuf:"bytes,21,rep,name=collector_errors,json=collectorErrors,proto3" json:"collector_errors,omitempty"` // log error messages that happened during the collector run
	CollectorStartedAt                 *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=collector_started_at,json=collectorStartedAt,proto3" json:"collector_started_at,omitempty"`
	CollectorHostname                  string                 `protobuf:"bytes,23,opt,name=collector_hostname,json=collectorHostname,proto3" json:"collector_hostname,omitempty"`
	CollectorArchitecture              string                 `protobuf:"bytes,24,opt,name=collector_architecture,json=collectorArchitecture,proto3" json:"collector_architecture,omitempty"`
	CollectorOperatingSystem           string                 `protobuf:"bytes,25,opt,name=collector_operating_system,json=collectorOperatingSystem,proto3" json:"collector_operating_system,omitempty"`
	CollectorPlatform                  string                 `protobuf:"bytes,26,opt,name=collector_platform,json=collectorPlatform,proto3" json:"collector_platform,omitempty"`
	CollectorPlatformFamily            string                 `protobuf:"bytes,27,opt,name=collector_platform_family,json=collectorPlatformFamily,proto3" json:"collector_platform_family,omitempty"`
	CollectorPlatformVersion           string                 `protobuf:"bytes,28,opt,name=collector_platform_version,json=collectorPlatformVersion,proto3" json:"collector_platform_version,omitempty"`
	CollectorVirtualizationSystem      string                 `protobuf:"bytes,29,opt,name=collector_virtualization_system,json=collectorVirtualizationSystem,proto3" json:"collector_virtualization_system,omitempty"` // Name of the virtualization system (only if we're a guest)
	CollectorKernelVersion             string                 `protobuf:"bytes,30,opt,name=collector_kernel_version,json=collectorKernelVersion,proto3" json:"collector_kernel_version,omitempty"`
	CollectorLogSnapshotDisabled       bool                   `protobuf:"varint,31,opt,name=collector_log_snapshot_disabled,json=collectorLogSnapshotDisabled,proto3" json:"collector_log_snapshot_disabled,omitempty"`
	CollectorLogSnapshotDisabledReason string                 `protobuf:"bytes,32,opt,name=collector_log_snapshot_disabled_reason,json=collectorLogSnapshotDisabledReason,proto3" json:"collector_log_snapshot_disabled_reason,omitempty"`
	// Per server (and hence snapshot)
	System                 *System                  `protobuf:"bytes,100,opt,name=system,proto3" json:"system,omitempty"`
	PostgresVersion        *PostgresVersion         `protobuf:"bytes,101,opt,name=postgres_version,json=postgresVersion,proto3" json:"postgres_version,omitempty"`
	RoleReferences         []*RoleReference         `protobuf:"bytes,102,rep,name=role_references,json=roleReferences,proto3" json:"role_references,omitempty"`
	DatabaseReferences     []*DatabaseReference     `protobuf:"bytes,103,rep,name=database_references,json=databaseReferences,proto3" json:"database_references,omitempty"`
	RoleInformations       []*RoleInformation       `protobuf:"bytes,110,rep,name=role_informations,json=roleInformations,proto3" json:"role_informations,omitempty"`
	DatabaseInformations   []*DatabaseInformation   `protobuf:"bytes,111,rep,name=database_informations,json=databaseInformations,proto3" json:"database_informations,omitempty"`
	DatabaseStatictics     []*DatabaseStatistic     `protobuf:"bytes,112,rep,name=database_statictics,json=databaseStatictics,proto3" json:"database_statictics,omitempty"`
	ServerStatistic        *ServerStatistic         `protobuf:"bytes,113,opt,name=server_statistic,json=serverStatistic,proto3" json:"server_statistic,omitempty"`
	Settings               []*Setting               `protobuf:"bytes,122,rep,name=settings,proto3" json:"settings,omitempty"`
	Replication            *Replication             `protobuf:"bytes,123,opt,name=replication,proto3" json:"replication,omitempty"`
	BackendCountStatistics []*BackendCountStatistic `protobuf:"bytes,124,rep,name=backend_count_statistics,json=backendCountStatistics,proto3" json:"backend_count_statistics,omitempty"`
	TablespaceReferences   []*TablespaceReference   `protobuf:"bytes,130,rep,name=tablespace_references,json=tablespaceReferences,proto3" json:"tablespace_references,omitempty"`
	TablespaceInformations []*TablespaceInformation `protobuf:"bytes,131,rep,name=tablespace_informations,json=tablespaceInformations,proto3" json:"tablespace_informations,omitempty"`
	// Per database
	QueryReferences         []*QueryReference          `protobuf:"bytes,200,rep,name=query_references,json=queryReferences,proto3" json:"query_references,omitempty"`
	RelationReferences      []*RelationReference       `protobuf:"bytes,201,rep,name=relation_references,json=relationReferences,proto3" json:"relation_references,omitempty"`
	IndexReferences         []*IndexReference          `protobuf:"bytes,202,rep,name=index_references,json=indexReferences,proto3" json:"index_references,omitempty"`
	FunctionReferences      []*FunctionReference       `protobuf:"bytes,203,rep,name=function_references,json=functionReferences,proto3" json:"function_references,omitempty"`
	QueryInformations       []*QueryInformation        `protobuf:"bytes,210,rep,name=query_informations,json=queryInformations,proto3" json:"query_informations,omitempty"`
	QueryStatistics         []*QueryStatistic          `protobuf:"bytes,211,rep,name=query_statistics,json=queryStatistics,proto3" json:"query_statistics,omitempty"`
	HistoricQueryStatistics []*HistoricQueryStatistics `protobuf:"bytes,213,rep,name=historic_query_statistics,json=historicQueryStatistics,proto3" json:"historic_query_statistics,omitempty"`
	QueryExplains           []*QueryExplainInformation `protobuf:"bytes,214,rep,name=query_explains,json=queryExplains,proto3" json:"query_explains,omitempty"`
	RelationInformations    []*RelationInformation     `protobuf:"bytes,220,rep,name=relation_informations,json=relationInformations,proto3" json:"relation_informations,omitempty"`
	RelationStatistics      []*RelationStatistic       `protobuf:"bytes,221,rep,name=relation_statistics,json=relationStatistics,proto3" json:"relation_statistics,omitempty"`
	RelationEvents          []*RelationEvent           `protobuf:"bytes,223,rep,name=relation_events,json=relationEvents,proto3" json:"relation_events,omitempty"`
	IndexInformations       []*IndexInformation        `protobuf:"bytes,224,rep,name=index_informations,json=indexInformations,proto3" json:"index_informations,omitempty"`
	IndexStatistics         []*IndexStatistic          `protobuf:"bytes,225,rep,name=index_statistics,json=indexStatistics,proto3" json:"index_statistics,omitempty"`
	FunctionInformations    []*FunctionInformation     `protobuf:"bytes,227,rep,name=function_informations,json=functionInformations,proto3" json:"function_informations,omitempty"`
	FunctionStatistics      []*FunctionStatistic       `protobuf:"bytes,228,rep,name=function_statistics,json=functionStatistics,proto3" json:"function_statistics,omitempty"`
	CustomTypeInformations  []*CustomTypeInformation   `protobuf:"bytes,229,rep,name=custom_type_informations,json=customTypeInformations,proto3" json:"custom_type_informations,omitempty"`
	Extensions              []*Extension               `protobuf:"bytes,230,rep,name=extensions,proto3" json:"extensions,omitempty"`
}

func (x *FullSnapshot) Reset() {
	*x = FullSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullSnapshot) ProtoMessage() {}

func (x *FullSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullSnapshot.ProtoReflect.Descriptor instead.
func (*FullSnapshot) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{0}
}

func (x *FullSnapshot) GetSnapshotVersionMajor() int32 {
	if x != nil {
		return x.SnapshotVersionMajor
	}
	return 0
}

func (x *FullSnapshot) GetSnapshotVersionMinor() int32 {
	if x != nil {
		return x.SnapshotVersionMinor
	}
	return 0
}

func (x *FullSnapshot) GetCollectorVersion() string {
	if x != nil {
		return x.CollectorVersion
	}
	return ""
}

func (x *FullSnapshot) GetFailedRun() bool {
	if x != nil {
		return x.FailedRun
	}
	return false
}

func (x *FullSnapshot) GetSnapshotUuid() string {
	if x != nil {
		return x.SnapshotUuid
	}
	return ""
}

func (x *FullSnapshot) GetCollectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectedAt
	}
	return nil
}

func (x *FullSnapshot) GetCollectedIntervalSecs() uint32 {
	if x != nil {
		return x.CollectedIntervalSecs
	}
	return 0
}

func (x *FullSnapshot) GetConfig() *CollectorConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *FullSnapshot) GetCollectorStatistic() *CollectorStatistic {
	if x != nil {
		return x.CollectorStatistic
	}
	return nil
}

func (x *FullSnapshot) GetCollectorErrors() []string {
	if x != nil {
		return x.CollectorErrors
	}
	return nil
}

func (x *FullSnapshot) GetCollectorStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectorStartedAt
	}
	return nil
}

func (x *FullSnapshot) GetCollectorHostname() string {
	if x != nil {
		return x.CollectorHostname
	}
	return ""
}

func (x *FullSnapshot) GetCollectorArchitecture() string {
	if x != nil {
		return x.CollectorArchitecture
	}
	return ""
}

func (x *FullSnapshot) GetCollectorOperatingSystem() string {
	if x != nil {
		return x.CollectorOperatingSystem
	}
	return ""
}

func (x *FullSnapshot) GetCollectorPlatform() string {
	if x != nil {
		return x.CollectorPlatform
	}
	return ""
}

func (x *FullSnapshot) GetCollectorPlatformFamily() string {
	if x != nil {
		return x.CollectorPlatformFamily
	}
	return ""
}

func (x *FullSnapshot) GetCollectorPlatformVersion() string {
	if x != nil {
		return x.CollectorPlatformVersion
	}
	return ""
}

func (x *FullSnapshot) GetCollectorVirtualizationSystem() string {
	if x != nil {
		return x.CollectorVirtualizationSystem
	}
	return ""
}

func (x *FullSnapshot) GetCollectorKernelVersion() string {
	if x != nil {
		return x.CollectorKernelVersion
	}
	return ""
}

func (x *FullSnapshot) GetCollectorLogSnapshotDisabled() bool {
	if x != nil {
		return x.CollectorLogSnapshotDisabled
	}
	return false
}

func (x *FullSnapshot) GetCollectorLogSnapshotDisabledReason() string {
	if x != nil {
		return x.CollectorLogSnapshotDisabledReason
	}
	return ""
}

func (x *FullSnapshot) GetSystem() *System {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *FullSnapshot) GetPostgresVersion() *PostgresVersion {
	if x != nil {
		return x.PostgresVersion
	}
	return nil
}

func (x *FullSnapshot) GetRoleReferences() []*RoleReference {
	if x != nil {
		return x.RoleReferences
	}
	return nil
}

func (x *FullSnapshot) GetDatabaseReferences() []*DatabaseReference {
	if x != nil {
		return x.DatabaseReferences
	}
	return nil
}

func (x *FullSnapshot) GetRoleInformations() []*RoleInformation {
	if x != nil {
		return x.RoleInformations
	}
	return nil
}

func (x *FullSnapshot) GetDatabaseInformations() []*DatabaseInformation {
	if x != nil {
		return x.DatabaseInformations
	}
	return nil
}

func (x *FullSnapshot) GetDatabaseStatictics() []*DatabaseStatistic {
	if x != nil {
		return x.DatabaseStatictics
	}
	return nil
}

func (x *FullSnapshot) GetServerStatistic() *ServerStatistic {
	if x != nil {
		return x.ServerStatistic
	}
	return nil
}

func (x *FullSnapshot) GetSettings() []*Setting {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *FullSnapshot) GetReplication() *Replication {
	if x != nil {
		return x.Replication
	}
	return nil
}

func (x *FullSnapshot) GetBackendCountStatistics() []*BackendCountStatistic {
	if x != nil {
		return x.BackendCountStatistics
	}
	return nil
}

func (x *FullSnapshot) GetTablespaceReferences() []*TablespaceReference {
	if x != nil {
		return x.TablespaceReferences
	}
	return nil
}

func (x *FullSnapshot) GetTablespaceInformations() []*TablespaceInformation {
	if x != nil {
		return x.TablespaceInformations
	}
	return nil
}

func (x *FullSnapshot) GetQueryReferences() []*QueryReference {
	if x != nil {
		return x.QueryReferences
	}
	return nil
}

func (x *FullSnapshot) GetRelationReferences() []*RelationReference {
	if x != nil {
		return x.RelationReferences
	}
	return nil
}

func (x *FullSnapshot) GetIndexReferences() []*IndexReference {
	if x != nil {
		return x.IndexReferences
	}
	return nil
}

func (x *FullSnapshot) GetFunctionReferences() []*FunctionReference {
	if x != nil {
		return x.FunctionReferences
	}
	return nil
}

func (x *FullSnapshot) GetQueryInformations() []*QueryInformation {
	if x != nil {
		return x.QueryInformations
	}
	return nil
}

func (x *FullSnapshot) GetQueryStatistics() []*QueryStatistic {
	if x != nil {
		return x.QueryStatistics
	}
	return nil
}

func (x *FullSnapshot) GetHistoricQueryStatistics() []*HistoricQueryStatistics {
	if x != nil {
		return x.HistoricQueryStatistics
	}
	return nil
}

func (x *FullSnapshot) GetQueryExplains() []*QueryExplainInformation {
	if x != nil {
		return x.QueryExplains
	}
	return nil
}

func (x *FullSnapshot) GetRelationInformations() []*RelationInformation {
	if x != nil {
		return x.RelationInformations
	}
	return nil
}

func (x *FullSnapshot) GetRelationStatistics() []*RelationStatistic {
	if x != nil {
		return x.RelationStatistics
	}
	return nil
}

func (x *FullSnapshot) GetRelationEvents() []*RelationEvent {
	if x != nil {
		return x.RelationEvents
	}
	return nil
}

func (x *FullSnapshot) GetIndexInformations() []*IndexInformation {
	if x != nil {
		return x.IndexInformations
	}
	return nil
}

func (x *FullSnapshot) GetIndexStatistics() []*IndexStatistic {
	if x != nil {
		return x.IndexStatistics
	}
	return nil
}

func (x *FullSnapshot) GetFunctionInformations() []*FunctionInformation {
	if x != nil {
		return x.FunctionInformations
	}
	return nil
}

func (x *FullSnapshot) GetFunctionStatistics() []*FunctionStatistic {
	if x != nil {
		return x.FunctionStatistics
	}
	return nil
}

func (x *FullSnapshot) GetCustomTypeInformations() []*CustomTypeInformation {
	if x != nil {
		return x.CustomTypeInformations
	}
	return nil
}

func (x *FullSnapshot) GetExtensions() []*Extension {
	if x != nil {
		return x.Extensions
	}
	return nil
}

type CollectorStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoVersion string `protobuf:"bytes,10,opt,name=go_version,json=goVersion,proto3" json:"go_version,omitempty"`
	// Statistics from after the collection input step
	MemoryHeapAllocatedBytes uint64 `protobuf:"varint,13,opt,name=memory_heap_allocated_bytes,json=memoryHeapAllocatedBytes,proto3" json:"memory_heap_allocated_bytes,omitempty"` // Bytes allocated and not yet freed
	MemoryHeapObjects        uint64 `protobuf:"varint,14,opt,name=memory_heap_objects,json=memoryHeapObjects,proto3" json:"memory_heap_objects,omitempty"`                        // Total number of allocated objects
	MemorySystemBytes        uint64 `protobuf:"varint,15,opt,name=memory_system_bytes,json=memorySystemBytes,proto3" json:"memory_system_bytes,omitempty"`                        // Bytes obtained from system (sum of heap and fixed-size structures)
	MemoryRssBytes           uint64 `protobuf:"varint,16,opt,name=memory_rss_bytes,json=memoryRssBytes,proto3" json:"memory_rss_bytes,omitempty"`                                 // Memory allocated in bytes as seen by the OS
	ActiveGoroutines         int32  `protobuf:"varint,20,opt,name=active_goroutines,json=activeGoroutines,proto3" json:"active_goroutines,omitempty"`                             // Number of active Go routines
	// Diff-ed statistics between two runs
	CgoCalls int64 `protobuf:"varint,30,opt,name=cgo_calls,json=cgoCalls,proto3" json:"cgo_calls,omitempty"`
}

func (x *CollectorStatistic) Reset() {
	*x = CollectorStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorStatistic) ProtoMessage() {}

func (x *CollectorStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorStatistic.ProtoReflect.Descriptor instead.
func (*CollectorStatistic) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{1}
}

func (x *CollectorStatistic) GetGoVersion() string {
	if x != nil {
		return x.GoVersion
	}
	return ""
}

func (x *CollectorStatistic) GetMemoryHeapAllocatedBytes() uint64 {
	if x != nil {
		return x.MemoryHeapAllocatedBytes
	}
	return 0
}

func (x *CollectorStatistic) GetMemoryHeapObjects() uint64 {
	if x != nil {
		return x.MemoryHeapObjects
	}
	return 0
}

func (x *CollectorStatistic) GetMemorySystemBytes() uint64 {
	if x != nil {
		return x.MemorySystemBytes
	}
	return 0
}

func (x *CollectorStatistic) GetMemoryRssBytes() uint64 {
	if x != nil {
		return x.MemoryRssBytes
	}
	return 0
}

func (x *CollectorStatistic) GetActiveGoroutines() int32 {
	if x != nil {
		return x.ActiveGoroutines
	}
	return 0
}

func (x *CollectorStatistic) GetCgoCalls() int64 {
	if x != nil {
		return x.CgoCalls
	}
	return 0
}

type RoleInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoleIdx            int32          `protobuf:"varint,1,opt,name=role_idx,json=roleIdx,proto3" json:"role_idx,omitempty"`
	Inherit            bool           `protobuf:"varint,2,opt,name=inherit,proto3" json:"inherit,omitempty"`                                                   // Role automatically inherits privileges of roles it is a member of
	Login              bool           `protobuf:"varint,3,opt,name=login,proto3" json:"login,omitempty"`                                                       // Role can log in. That is, this role can be given as the initial session authorization identifier
	CreateDb           bool           `protobuf:"varint,4,opt,name=create_db,json=createDb,proto3" json:"create_db,omitempty"`                                 // Role can create databases
	CreateRole         bool           `protobuf:"varint,5,opt,name=create_role,json=createRole,proto3" json:"create_role,omitempty"`                           // Role can create more roles
	SuperUser          bool           `protobuf:"varint,6,opt,name=super_user,json=superUser,proto3" json:"super_user,omitempty"`                              // Role has superuser privileges
	Replication        bool           `protobuf:"varint,7,opt,name=replication,proto3" json:"replication,omitempty"`                                           // Role can initiate streaming replication and put the system in and out of backup mode.
	BypassRls          bool           `protobuf:"varint,8,opt,name=bypass_rls,json=bypassRls,proto3" json:"bypass_rls,omitempty"`                              // Role bypasses every row level security policy, see https://www.postgresql.org/docs/9.5/static/ddl-rowsecurity.html
	ConnectionLimit    int32          `protobuf:"varint,9,opt,name=connection_limit,json=connectionLimit,proto3" json:"connection_limit,omitempty"`            // For roles that can log in, this sets maximum number of concurrent connections this role can make. -1 means no limit.
	PasswordValidUntil *NullTimestamp `protobuf:"bytes,10,opt,name=password_valid_until,json=passwordValidUntil,proto3" json:"password_valid_until,omitempty"` // Password expiry time (only used for password authentication); null if no expiration
	Config             []string       `protobuf:"bytes,11,rep,name=config,proto3" json:"config,omitempty"`                                                     // Role-specific defaults for run-time configuration variables
	MemberOf           []int32        `protobuf:"varint,12,rep,packed,name=member_of,json=memberOf,proto3" json:"member_of,omitempty"`                         // List of roles that this role is a member of (i.e. whose permissions it inherits)
}

func (x *RoleInformation) Reset() {
	*x = RoleInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleInformation) ProtoMessage() {}

func (x *RoleInformation) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleInformation.ProtoReflect.Descriptor instead.
func (*RoleInformation) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{2}
}

func (x *RoleInformation) GetRoleIdx() int32 {
	if x != nil {
		return x.RoleIdx
	}
	return 0
}

func (x *RoleInformation) GetInherit() bool {
	if x != nil {
		return x.Inherit
	}
	return false
}

func (x *RoleInformation) GetLogin() bool {
	if x != nil {
		return x.Login
	}
	return false
}

func (x *RoleInformation) GetCreateDb() bool {
	if x != nil {
		return x.CreateDb
	}
	return false
}

func (x *RoleInformation) GetCreateRole() bool {
	if x != nil {
		return x.CreateRole
	}
	return false
}

func (x *RoleInformation) GetSuperUser() bool {
	if x != nil {
		return x.SuperUser
	}
	return false
}

func (x *RoleInformation) GetReplication() bool {
	if x != nil {
		return x.Replication
	}
	return false
}

func (x *RoleInformation) GetBypassRls() bool {
	if x != nil {
		return x.BypassRls
	}
	return false
}

func (x *RoleInformation) GetConnectionLimit() int32 {
	if x != nil {
		return x.ConnectionLimit
	}
	return 0
}

func (x *RoleInformation) GetPasswordValidUntil() *NullTimestamp {
	if x != nil {
		return x.PasswordValidUntil
	}
	return nil
}

func (x *RoleInformation) GetConfig() []string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RoleInformation) GetMemberOf() []int32 {
	if x != nil {
		return x.MemberOf
	}
	return nil
}

type DatabaseInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseIdx      int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	OwnerRoleIdx     int32  `protobuf:"varint,2,opt,name=owner_role_idx,json=ownerRoleIdx,proto3" json:"owner_role_idx,omitempty"`           // Owner of the database, usually the user who created it
	Encoding         string `protobuf:"bytes,3,opt,name=encoding,proto3" json:"encoding,omitempty"`                                          // Character encoding for this database
	Collate          string `protobuf:"bytes,4,opt,name=collate,proto3" json:"collate,omitempty"`                                            // LC_COLLATE for this database
	CType            string `protobuf:"bytes,5,opt,name=c_type,json=cType,proto3" json:"c_type,omitempty"`                                   // LC_CTYPE for this database
	IsTemplate       bool   `protobuf:"varint,6,opt,name=is_template,json=isTemplate,proto3" json:"is_template,omitempty"`                   // If true, then this database can be cloned by any user with CREATEDB privileges; if false, then only superusers or the owner of the database can clone it.
	AllowConnections bool   `protobuf:"varint,7,opt,name=allow_connections,json=allowConnections,proto3" json:"allow_connections,omitempty"` // If false then no one can connect to this database. This is used to protect the template0 database from being altered.
	ConnectionLimit  int32  `protobuf:"varint,8,opt,name=connection_limit,json=connectionLimit,proto3" json:"connection_limit,omitempty"`    // Sets maximum number of concurrent connections that can be made to this database. -1 means no limit.
	// All transaction IDs before this one have been replaced with a permanent ("frozen") transaction ID in this database.
	// This is used to track whether the database needs to be vacuumed in order to prevent transaction ID wraparound or to
	// allow pg_clog to be shrunk. It is the minimum of the per-table pg_class.relfrozenxid values.
	FrozenXid uint32 `protobuf:"varint,9,opt,name=frozen_xid,json=frozenXid,proto3" json:"frozen_xid,omitempty"`
	// All multixact IDs before this one have been replaced with a transaction ID in this database.
	// This is used to track whether the database needs to be vacuumed in order to prevent multixact ID wraparound or to
	// allow pg_multixact to be shrunk. It is the minimum of the per-table pg_class.relminmxid values.
	MinimumMultixactXid uint32 `protobuf:"varint,10,opt,name=minimum_multixact_xid,json=minimumMultixactXid,proto3" json:"minimum_multixact_xid,omitempty"`
	// Whether the collector was able to connect to this database and fetch local catalog data (e.g. schema)
	CollectedLocalCatalogData bool `protobuf:"varint,11,opt,name=collected_local_catalog_data,json=collectedLocalCatalogData,proto3" json:"collected_local_catalog_data,omitempty"`
}

func (x *DatabaseInformation) Reset() {
	*x = DatabaseInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseInformation) ProtoMessage() {}

func (x *DatabaseInformation) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseInformation.ProtoReflect.Descriptor instead.
func (*DatabaseInformation) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{3}
}

func (x *DatabaseInformation) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *DatabaseInformation) GetOwnerRoleIdx() int32 {
	if x != nil {
		return x.OwnerRoleIdx
	}
	return 0
}

func (x *DatabaseInformation) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *DatabaseInformation) GetCollate() string {
	if x != nil {
		return x.Collate
	}
	return ""
}

func (x *DatabaseInformation) GetCType() string {
	if x != nil {
		return x.CType
	}
	return ""
}

func (x *DatabaseInformation) GetIsTemplate() bool {
	if x != nil {
		return x.IsTemplate
	}
	return false
}

func (x *DatabaseInformation) GetAllowConnections() bool {
	if x != nil {
		return x.AllowConnections
	}
	return false
}

func (x *DatabaseInformation) GetConnectionLimit() int32 {
	if x != nil {
		return x.ConnectionLimit
	}
	return 0
}

func (x *DatabaseInformation) GetFrozenXid() uint32 {
	if x != nil {
		return x.FrozenXid
	}
	return 0
}

func (x *DatabaseInformation) GetMinimumMultixactXid() uint32 {
	if x != nil {
		return x.MinimumMultixactXid
	}
	return 0
}

func (x *DatabaseInformation) GetCollectedLocalCatalogData() bool {
	if x != nil {
		return x.CollectedLocalCatalogData
	}
	return false
}

type DatabaseStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseIdx  int32 `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	FrozenxidAge int32 `protobuf:"varint,2,opt,name=frozenxid_age,json=frozenxidAge,proto3" json:"frozenxid_age,omitempty"` // The age of frozen xact ID for this database (relative to latest stable xid)
	MinmxidAge   int32 `protobuf:"varint,3,opt,name=minmxid_age,json=minmxidAge,proto3" json:"minmxid_age,omitempty"`       // The age of minimum multixact ID for this database (relative to latest stable mxid)
	XactCommit   int32 `protobuf:"varint,4,opt,name=xact_commit,json=xactCommit,proto3" json:"xact_commit,omitempty"`       // Number of transactions in this database that have been committed
	XactRollback int32 `protobuf:"varint,5,opt,name=xact_rollback,json=xactRollback,proto3" json:"xact_rollback,omitempty"` // Number of transactions in this database that have been rolled back
}

func (x *DatabaseStatistic) Reset() {
	*x = DatabaseStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseStatistic) ProtoMessage() {}

func (x *DatabaseStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseStatistic.ProtoReflect.Descriptor instead.
func (*DatabaseStatistic) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{4}
}

func (x *DatabaseStatistic) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *DatabaseStatistic) GetFrozenxidAge() int32 {
	if x != nil {
		return x.FrozenxidAge
	}
	return 0
}

func (x *DatabaseStatistic) GetMinmxidAge() int32 {
	if x != nil {
		return x.MinmxidAge
	}
	return 0
}

func (x *DatabaseStatistic) GetXactCommit() int32 {
	if x != nil {
		return x.XactCommit
	}
	return 0
}

func (x *DatabaseStatistic) GetXactRollback() int32 {
	if x != nil {
		return x.XactRollback
	}
	return 0
}

// Postgres server statistic
// See System for server system statistic
type ServerStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentXactId                     int64 `protobuf:"varint,1,opt,name=current_xact_id,json=currentXactId,proto3" json:"current_xact_id,omitempty"`                                                                 // Current transaction ID in xid8 (64-bit FullTransactionId) for this server
	NextMultiXactId                   int64 `protobuf:"varint,2,opt,name=next_multi_xact_id,json=nextMultiXactId,proto3" json:"next_multi_xact_id,omitempty"`                                                         // Next multixact ID in xid8 (64-bit FullTransactionId) for this server
	XminHorizonBackend                int64 `protobuf:"varint,3,opt,name=xmin_horizon_backend,json=xminHorizonBackend,proto3" json:"xmin_horizon_backend,omitempty"`                                                  // The oldest xmin for backends in xid8 (64-bit FullTransactionId)
	XminHorizonReplicationSlot        int64 `protobuf:"varint,4,opt,name=xmin_horizon_replication_slot,json=xminHorizonReplicationSlot,proto3" json:"xmin_horizon_replication_slot,omitempty"`                        // The oldest xmin for replication slots in xid8 (64-bit FullTransactionId)
	XminHorizonReplicationSlotCatalog int64 `protobuf:"varint,5,opt,name=xmin_horizon_replication_slot_catalog,json=xminHorizonReplicationSlotCatalog,proto3" json:"xmin_horizon_replication_slot_catalog,omitempty"` // The oldest catalog_xmin for replication slots in xid8 (64-bit FullTransactionId)
	XminHorizonPreparedXact           int64 `protobuf:"varint,6,opt,name=xmin_horizon_prepared_xact,json=xminHorizonPreparedXact,proto3" json:"xmin_horizon_prepared_xact,omitempty"`                                 // The oldest xmin for prepared transactions in xid8 (64-bit FullTransactionId)
	XminHorizonStandby                int64 `protobuf:"varint,7,opt,name=xmin_horizon_standby,json=xminHorizonStandby,proto3" json:"xmin_horizon_standby,omitempty"`                                                  // The oldest xmin for standbys in xid8 (64-bit FullTransactionId)
}

func (x *ServerStatistic) Reset() {
	*x = ServerStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatistic) ProtoMessage() {}

func (x *ServerStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatistic.ProtoReflect.Descriptor instead.
func (*ServerStatistic) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{5}
}

func (x *ServerStatistic) GetCurrentXactId() int64 {
	if x != nil {
		return x.CurrentXactId
	}
	return 0
}

func (x *ServerStatistic) GetNextMultiXactId() int64 {
	if x != nil {
		return x.NextMultiXactId
	}
	return 0
}

func (x *ServerStatistic) GetXminHorizonBackend() int64 {
	if x != nil {
		return x.XminHorizonBackend
	}
	return 0
}

func (x *ServerStatistic) GetXminHorizonReplicationSlot() int64 {
	if x != nil {
		return x.XminHorizonReplicationSlot
	}
	return 0
}

func (x *ServerStatistic) GetXminHorizonReplicationSlotCatalog() int64 {
	if x != nil {
		return x.XminHorizonReplicationSlotCatalog
	}
	return 0
}

func (x *ServerStatistic) GetXminHorizonPreparedXact() int64 {
	if x != nil {
		return x.XminHorizonPreparedXact
	}
	return 0
}

func (x *ServerStatistic) GetXminHorizonStandby() int64 {
	if x != nil {
		return x.XminHorizonStandby
	}
	return 0
}

type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CurrentValue string      `protobuf:"bytes,2,opt,name=current_value,json=currentValue,proto3" json:"current_value,omitempty"`
	Unit         *NullString `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	BootValue    *NullString `protobuf:"bytes,4,opt,name=boot_value,json=bootValue,proto3" json:"boot_value,omitempty"`
	ResetValue   *NullString `protobuf:"bytes,5,opt,name=reset_value,json=resetValue,proto3" json:"reset_value,omitempty"`
	Source       *NullString `protobuf:"bytes,6,opt,name=source,proto3" json:"source,omitempty"`
	SourceFile   *NullString `protobuf:"bytes,7,opt,name=source_file,json=sourceFile,proto3" json:"source_file,omitempty"`
	SourceLine   *NullString `protobuf:"bytes,8,opt,name=source_line,json=sourceLine,proto3" json:"source_line,omitempty"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{6}
}

func (x *Setting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Setting) GetCurrentValue() string {
	if x != nil {
		return x.CurrentValue
	}
	return ""
}

func (x *Setting) GetUnit() *NullString {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Setting) GetBootValue() *NullString {
	if x != nil {
		return x.BootValue
	}
	return nil
}

func (x *Setting) GetResetValue() *NullString {
	if x != nil {
		return x.ResetValue
	}
	return nil
}

func (x *Setting) GetSource() *NullString {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Setting) GetSourceFile() *NullString {
	if x != nil {
		return x.SourceFile
	}
	return nil
}

func (x *Setting) GetSourceLine() *NullString {
	if x != nil {
		return x.SourceLine
	}
	return nil
}

type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseIdx   int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	ExtensionName string `protobuf:"bytes,2,opt,name=extension_name,json=extensionName,proto3" json:"extension_name,omitempty"`
	SchemaName    string `protobuf:"bytes,3,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	Version       string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Extension) Reset() {
	*x = Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{7}
}

func (x *Extension) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *Extension) GetExtensionName() string {
	if x != nil {
		return x.ExtensionName
	}
	return ""
}

func (x *Extension) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *Extension) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Replication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Are we the primary, or a standby?
	InRecovery bool `protobuf:"varint,1,opt,name=in_recovery,json=inRecovery,proto3" json:"in_recovery,omitempty"`
	// Primary information
	CurrentXlogLocation string                `protobuf:"bytes,10,opt,name=current_xlog_location,json=currentXlogLocation,proto3" json:"current_xlog_location,omitempty"`
	StandbyReferences   []*StandbyReference   `protobuf:"bytes,11,rep,name=standby_references,json=standbyReferences,proto3" json:"standby_references,omitempty"`
	StandbyInformations []*StandbyInformation `protobuf:"bytes,12,rep,name=standby_informations,json=standbyInformations,proto3" json:"standby_informations,omitempty"`
	StandbyStatistics   []*StandbyStatistic   `protobuf:"bytes,13,rep,name=standby_statistics,json=standbyStatistics,proto3" json:"standby_statistics,omitempty"`
	// Standby information
	IsStreaming        bool                   `protobuf:"varint,20,opt,name=is_streaming,json=isStreaming,proto3" json:"is_streaming,omitempty"`
	ReceiveLocation    string                 `protobuf:"bytes,21,opt,name=receive_location,json=receiveLocation,proto3" json:"receive_location,omitempty"`
	ReplayLocation     string                 `protobuf:"bytes,22,opt,name=replay_location,json=replayLocation,proto3" json:"replay_location,omitempty"`
	ApplyByteLag       int64                  `protobuf:"varint,23,opt,name=apply_byte_lag,json=applyByteLag,proto3" json:"apply_byte_lag,omitempty"`
	ReplayTimestamp    *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=replay_timestamp,json=replayTimestamp,proto3" json:"replay_timestamp,omitempty"`
	ReplayTimestampAge int64                  `protobuf:"varint,25,opt,name=replay_timestamp_age,json=replayTimestampAge,proto3" json:"replay_timestamp_age,omitempty"` // in seconds
}

func (x *Replication) Reset() {
	*x = Replication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Replication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Replication) ProtoMessage() {}

func (x *Replication) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Replication.ProtoReflect.Descriptor instead.
func (*Replication) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{8}
}

func (x *Replication) GetInRecovery() bool {
	if x != nil {
		return x.InRecovery
	}
	return false
}

func (x *Replication) GetCurrentXlogLocation() string {
	if x != nil {
		return x.CurrentXlogLocation
	}
	return ""
}

func (x *Replication) GetStandbyReferences() []*StandbyReference {
	if x != nil {
		return x.StandbyReferences
	}
	return nil
}

func (x *Replication) GetStandbyInformations() []*StandbyInformation {
	if x != nil {
		return x.StandbyInformations
	}
	return nil
}

func (x *Replication) GetStandbyStatistics() []*StandbyStatistic {
	if x != nil {
		return x.StandbyStatistics
	}
	return nil
}

func (x *Replication) GetIsStreaming() bool {
	if x != nil {
		return x.IsStreaming
	}
	return false
}

func (x *Replication) GetReceiveLocation() string {
	if x != nil {
		return x.ReceiveLocation
	}
	return ""
}

func (x *Replication) GetReplayLocation() string {
	if x != nil {
		return x.ReplayLocation
	}
	return ""
}

func (x *Replication) GetApplyByteLag() int64 {
	if x != nil {
		return x.ApplyByteLag
	}
	return 0
}

func (x *Replication) GetReplayTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.ReplayTimestamp
	}
	return nil
}

func (x *Replication) GetReplayTimestampAge() int64 {
	if x != nil {
		return x.ReplayTimestampAge
	}
	return 0
}

type StandbyReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientAddr string `protobuf:"bytes,1,opt,name=client_addr,json=clientAddr,proto3" json:"client_addr,omitempty"`
}

func (x *StandbyReference) Reset() {
	*x = StandbyReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandbyReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandbyReference) ProtoMessage() {}

func (x *StandbyReference) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandbyReference.ProtoReflect.Descriptor instead.
func (*StandbyReference) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{9}
}

func (x *StandbyReference) GetClientAddr() string {
	if x != nil {
		return x.ClientAddr
	}
	return ""
}

type StandbyInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StandbyIdx      int32                  `protobuf:"varint,1,opt,name=standby_idx,json=standbyIdx,proto3" json:"standby_idx,omitempty"`
	RoleIdx         int32                  `protobuf:"varint,2,opt,name=role_idx,json=roleIdx,proto3" json:"role_idx,omitempty"`
	Pid             int64                  `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	ApplicationName string                 `protobuf:"bytes,4,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	ClientHostname  string                 `protobuf:"bytes,5,opt,name=client_hostname,json=clientHostname,proto3" json:"client_hostname,omitempty"`
	ClientPort      int32                  `protobuf:"varint,6,opt,name=client_port,json=clientPort,proto3" json:"client_port,omitempty"`
	BackendStart    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=backend_start,json=backendStart,proto3" json:"backend_start,omitempty"`
	SyncPriority    int32                  `protobuf:"varint,8,opt,name=sync_priority,json=syncPriority,proto3" json:"sync_priority,omitempty"`
	SyncState       string                 `protobuf:"bytes,9,opt,name=sync_state,json=syncState,proto3" json:"sync_state,omitempty"`
}

func (x *StandbyInformation) Reset() {
	*x = StandbyInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandbyInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandbyInformation) ProtoMessage() {}

func (x *StandbyInformation) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandbyInformation.ProtoReflect.Descriptor instead.
func (*StandbyInformation) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{10}
}

func (x *StandbyInformation) GetStandbyIdx() int32 {
	if x != nil {
		return x.StandbyIdx
	}
	return 0
}

func (x *StandbyInformation) GetRoleIdx() int32 {
	if x != nil {
		return x.RoleIdx
	}
	return 0
}

func (x *StandbyInformation) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *StandbyInformation) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *StandbyInformation) GetClientHostname() string {
	if x != nil {
		return x.ClientHostname
	}
	return ""
}

func (x *StandbyInformation) GetClientPort() int32 {
	if x != nil {
		return x.ClientPort
	}
	return 0
}

func (x *StandbyInformation) GetBackendStart() *timestamppb.Timestamp {
	if x != nil {
		return x.BackendStart
	}
	return nil
}

func (x *StandbyInformation) GetSyncPriority() int32 {
	if x != nil {
		return x.SyncPriority
	}
	return 0
}

func (x *StandbyInformation) GetSyncState() string {
	if x != nil {
		return x.SyncState
	}
	return ""
}

type StandbyStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StandbyIdx     int32  `protobuf:"varint,1,opt,name=standby_idx,json=standbyIdx,proto3" json:"standby_idx,omitempty"`
	State          string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	SentLocation   string `protobuf:"bytes,3,opt,name=sent_location,json=sentLocation,proto3" json:"sent_location,omitempty"`
	WriteLocation  string `protobuf:"bytes,4,opt,name=write_location,json=writeLocation,proto3" json:"write_location,omitempty"`
	FlushLocation  string `protobuf:"bytes,5,opt,name=flush_location,json=flushLocation,proto3" json:"flush_location,omitempty"`
	ReplayLocation string `protobuf:"bytes,6,opt,name=replay_location,json=replayLocation,proto3" json:"replay_location,omitempty"`
	RemoteByteLag  int64  `protobuf:"varint,7,opt,name=remote_byte_lag,json=remoteByteLag,proto3" json:"remote_byte_lag,omitempty"`
	LocalByteLag   int64  `protobuf:"varint,8,opt,name=local_byte_lag,json=localByteLag,proto3" json:"local_byte_lag,omitempty"`
}

func (x *StandbyStatistic) Reset() {
	*x = StandbyStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandbyStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandbyStatistic) ProtoMessage() {}

func (x *StandbyStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandbyStatistic.ProtoReflect.Descriptor instead.
func (*StandbyStatistic) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{11}
}

func (x *StandbyStatistic) GetStandbyIdx() int32 {
	if x != nil {
		return x.StandbyIdx
	}
	return 0
}

func (x *StandbyStatistic) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StandbyStatistic) GetSentLocation() string {
	if x != nil {
		return x.SentLocation
	}
	return ""
}

func (x *StandbyStatistic) GetWriteLocation() string {
	if x != nil {
		return x.WriteLocation
	}
	return ""
}

func (x *StandbyStatistic) GetFlushLocation() string {
	if x != nil {
		return x.FlushLocation
	}
	return ""
}

func (x *StandbyStatistic) GetReplayLocation() string {
	if x != nil {
		return x.ReplayLocation
	}
	return ""
}

func (x *StandbyStatistic) GetRemoteByteLag() int64 {
	if x != nil {
		return x.RemoteByteLag
	}
	return 0
}

func (x *StandbyStatistic) GetLocalByteLag() int64 {
	if x != nil {
		return x.LocalByteLag
	}
	return 0
}

type BackendCountStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasRoleIdx     bool                               `protobuf:"varint,1,opt,name=has_role_idx,json=hasRoleIdx,proto3" json:"has_role_idx,omitempty"`
	RoleIdx        int32                              `protobuf:"varint,2,opt,name=role_idx,json=roleIdx,proto3" json:"role_idx,omitempty"`
	HasDatabaseIdx bool                               `protobuf:"varint,3,opt,name=has_database_idx,json=hasDatabaseIdx,proto3" json:"has_database_idx,omitempty"`
	DatabaseIdx    int32                              `protobuf:"varint,4,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	State          BackendCountStatistic_BackendState `protobuf:"varint,5,opt,name=state,proto3,enum=pganalyze.collector.BackendCountStatistic_BackendState" json:"state,omitempty"`
	BackendType    BackendCountStatistic_BackendType  `protobuf:"varint,6,opt,name=backend_type,json=backendType,proto3,enum=pganalyze.collector.BackendCountStatistic_BackendType" json:"backend_type,omitempty"`
	WaitingForLock bool                               `protobuf:"varint,7,opt,name=waiting_for_lock,json=waitingForLock,proto3" json:"waiting_for_lock,omitempty"`
	Count          int32                              `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BackendCountStatistic) Reset() {
	*x = BackendCountStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackendCountStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackendCountStatistic) ProtoMessage() {}

func (x *BackendCountStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackendCountStatistic.ProtoReflect.Descriptor instead.
func (*BackendCountStatistic) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{12}
}

func (x *BackendCountStatistic) GetHasRoleIdx() bool {
	if x != nil {
		return x.HasRoleIdx
	}
	return false
}

func (x *BackendCountStatistic) GetRoleIdx() int32 {
	if x != nil {
		return x.RoleIdx
	}
	return 0
}

func (x *BackendCountStatistic) GetHasDatabaseIdx() bool {
	if x != nil {
		return x.HasDatabaseIdx
	}
	return false
}

func (x *BackendCountStatistic) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *BackendCountStatistic) GetState() BackendCountStatistic_BackendState {
	if x != nil {
		return x.State
	}
	return BackendCountStatistic_UNKNOWN_STATE
}

func (x *BackendCountStatistic) GetBackendType() BackendCountStatistic_BackendType {
	if x != nil {
		return x.BackendType
	}
	return BackendCountStatistic_UNKNOWN_TYPE
}

func (x *BackendCountStatistic) GetWaitingForLock() bool {
	if x != nil {
		return x.WaitingForLock
	}
	return false
}

func (x *BackendCountStatistic) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type TablespaceReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Tablespace name
}

func (x *TablespaceReference) Reset() {
	*x = TablespaceReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TablespaceReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablespaceReference) ProtoMessage() {}

func (x *TablespaceReference) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablespaceReference.ProtoReflect.Descriptor instead.
func (*TablespaceReference) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{13}
}

func (x *TablespaceReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TablespaceInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TablespaceIdx    int32    `protobuf:"varint,1,opt,name=tablespace_idx,json=tablespaceIdx,proto3" json:"tablespace_idx,omitempty"`
	DiskPartitionIdx int32    `protobuf:"varint,2,opt,name=disk_partition_idx,json=diskPartitionIdx,proto3" json:"disk_partition_idx,omitempty"` // Disk partition that this tablespace resides on (-1 if unknown)
	RoleIdx          int32    `protobuf:"varint,3,opt,name=role_idx,json=roleIdx,proto3" json:"role_idx,omitempty"`                              // Owner of the tablespace, usually the user who created it
	Config           []string `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty"`                                                // Tablespace-level options, as "keyword=value" strings
}

func (x *TablespaceInformation) Reset() {
	*x = TablespaceInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TablespaceInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablespaceInformation) ProtoMessage() {}

func (x *TablespaceInformation) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablespaceInformation.ProtoReflect.Descriptor instead.
func (*TablespaceInformation) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{14}
}

func (x *TablespaceInformation) GetTablespaceIdx() int32 {
	if x != nil {
		return x.TablespaceIdx
	}
	return 0
}

func (x *TablespaceInformation) GetDiskPartitionIdx() int32 {
	if x != nil {
		return x.DiskPartitionIdx
	}
	return 0
}

func (x *TablespaceInformation) GetRoleIdx() int32 {
	if x != nil {
		return x.RoleIdx
	}
	return 0
}

func (x *TablespaceInformation) GetConfig() []string {
	if x != nil {
		return x.Config
	}
	return nil
}

type CollectorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SectionName                string   `protobuf:"bytes,1,opt,name=section_name,json=sectionName,proto3" json:"section_name,omitempty"`
	DisableLogs                bool     `protobuf:"varint,2,opt,name=disable_logs,json=disableLogs,proto3" json:"disable_logs,omitempty"`
	DisableActivity            bool     `protobuf:"varint,3,opt,name=disable_activity,json=disableActivity,proto3" json:"disable_activity,omitempty"`
	EnableLogExplain           bool     `protobuf:"varint,4,opt,name=enable_log_explain,json=enableLogExplain,proto3" json:"enable_log_explain,omitempty"`
	DbName                     string   `protobuf:"bytes,14,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	DbUsername                 string   `protobuf:"bytes,15,opt,name=db_username,json=dbUsername,proto3" json:"db_username,omitempty"`
	DbHost                     string   `protobuf:"bytes,16,opt,name=db_host,json=dbHost,proto3" json:"db_host,omitempty"`
	DbPort                     int32    `protobuf:"varint,17,opt,name=db_port,json=dbPort,proto3" json:"db_port,omitempty"`
	DbSslmode                  string   `protobuf:"bytes,18,opt,name=db_sslmode,json=dbSslmode,proto3" json:"db_sslmode,omitempty"`
	DbHasSslrootcert           bool     `protobuf:"varint,19,opt,name=db_has_sslrootcert,json=dbHasSslrootcert,proto3" json:"db_has_sslrootcert,omitempty"`
	DbHasSslcert               bool     `protobuf:"varint,20,opt,name=db_has_sslcert,json=dbHasSslcert,proto3" json:"db_has_sslcert,omitempty"`
	DbHasSslkey                bool     `protobuf:"varint,21,opt,name=db_has_sslkey,json=dbHasSslkey,proto3" json:"db_has_sslkey,omitempty"`
	DbUrl                      string   `protobuf:"bytes,22,opt,name=db_url,json=dbUrl,proto3" json:"db_url,omitempty"`
	DbExtraNames               []string `protobuf:"bytes,31,rep,name=db_extra_names,json=dbExtraNames,proto3" json:"db_extra_names,omitempty"`
	DbAllNames                 bool     `protobuf:"varint,32,opt,name=db_all_names,json=dbAllNames,proto3" json:"db_all_names,omitempty"`
	AwsRegion                  string   `protobuf:"bytes,42,opt,name=aws_region,json=awsRegion,proto3" json:"aws_region,omitempty"`
	AwsDbInstanceId            string   `protobuf:"bytes,43,opt,name=aws_db_instance_id,json=awsDbInstanceId,proto3" json:"aws_db_instance_id,omitempty"`
	AwsHasAccessKeyId          bool     `protobuf:"varint,44,opt,name=aws_has_access_key_id,json=awsHasAccessKeyId,proto3" json:"aws_has_access_key_id,omitempty"`
	AwsHasAssumeRole           bool     `protobuf:"varint,45,opt,name=aws_has_assume_role,json=awsHasAssumeRole,proto3" json:"aws_has_assume_role,omitempty"`
	AwsHasAccountId            bool     `protobuf:"varint,46,opt,name=aws_has_account_id,json=awsHasAccountId,proto3" json:"aws_has_account_id,omitempty"`
	AwsHasWebIdentityTokenFile bool     `protobuf:"varint,47,opt,name=aws_has_web_identity_token_file,json=awsHasWebIdentityTokenFile,proto3" json:"aws_has_web_identity_token_file,omitempty"`
	AwsHasRoleArn              bool     `protobuf:"varint,48,opt,name=aws_has_role_arn,json=awsHasRoleArn,proto3" json:"aws_has_role_arn,omitempty"`
	AwsDbClusterId             string   `protobuf:"bytes,49,opt,name=aws_db_cluster_id,json=awsDbClusterId,proto3" json:"aws_db_cluster_id,omitempty"`
	AwsDbClusterReadonly       bool     `protobuf:"varint,50,opt,name=aws_db_cluster_readonly,json=awsDbClusterReadonly,proto3" json:"aws_db_cluster_readonly,omitempty"`
	AzureDbServerName          string   `protobuf:"bytes,54,opt,name=azure_db_server_name,json=azureDbServerName,proto3" json:"azure_db_server_name,omitempty"`
	AzureEventhubNamespace     string   `protobuf:"bytes,55,opt,name=azure_eventhub_namespace,json=azureEventhubNamespace,proto3" json:"azure_eventhub_namespace,omitempty"`
	AzureEventhubName          string   `protobuf:"bytes,56,opt,name=azure_eventhub_name,json=azureEventhubName,proto3" json:"azure_eventhub_name,omitempty"`
	AzureAdTenantId            string   `protobuf:"bytes,57,opt,name=azure_ad_tenant_id,json=azureAdTenantId,proto3" json:"azure_ad_tenant_id,omitempty"`
	AzureAdClientId            string   `protobuf:"bytes,58,opt,name=azure_ad_client_id,json=azureAdClientId,proto3" json:"azure_ad_client_id,omitempty"`
	AzureHasAdCertificate      bool     `protobuf:"varint,59,opt,name=azure_has_ad_certificate,json=azureHasAdCertificate,proto3" json:"azure_has_ad_certificate,omitempty"`
	GcpCloudsqlInstanceId      string   `protobuf:"bytes,69,opt,name=gcp_cloudsql_instance_id,json=gcpCloudsqlInstanceId,proto3" json:"gcp_cloudsql_instance_id,omitempty"`
	GcpPubsubSubscription      string   `protobuf:"bytes,70,opt,name=gcp_pubsub_subscription,json=gcpPubsubSubscription,proto3" json:"gcp_pubsub_subscription,omitempty"`
	GcpHasCredentialsFile      bool     `protobuf:"varint,71,opt,name=gcp_has_credentials_file,json=gcpHasCredentialsFile,proto3" json:"gcp_has_credentials_file,omitempty"`
	GcpProjectId               string   `protobuf:"bytes,72,opt,name=gcp_project_id,json=gcpProjectId,proto3" json:"gcp_project_id,omitempty"`
	GcpAlloydbClusterId        string   `protobuf:"bytes,73,opt,name=gcp_alloydb_cluster_id,json=gcpAlloydbClusterId,proto3" json:"gcp_alloydb_cluster_id,omitempty"`
	GcpAlloydbInstanceId       string   `protobuf:"bytes,74,opt,name=gcp_alloydb_instance_id,json=gcpAlloydbInstanceId,proto3" json:"gcp_alloydb_instance_id,omitempty"`
	CrunchyBridgeClusterId     string   `protobuf:"bytes,75,opt,name=crunchy_bridge_cluster_id,json=crunchyBridgeClusterId,proto3" json:"crunchy_bridge_cluster_id,omitempty"`
	AivenProjectId             string   `protobuf:"bytes,79,opt,name=aiven_project_id,json=aivenProjectId,proto3" json:"aiven_project_id,omitempty"`
	AivenServiceId             string   `protobuf:"bytes,80,opt,name=aiven_service_id,json=aivenServiceId,proto3" json:"aiven_service_id,omitempty"`
	ApiSystemId                string   `protobuf:"bytes,82,opt,name=api_system_id,json=apiSystemId,proto3" json:"api_system_id,omitempty"`
	ApiSystemType              string   `protobuf:"bytes,83,opt,name=api_system_type,json=apiSystemType,proto3" json:"api_system_type,omitempty"`
	ApiSystemScope             string   `protobuf:"bytes,84,opt,name=api_system_scope,json=apiSystemScope,proto3" json:"api_system_scope,omitempty"`
	ApiSystemScopeFallback     string   `protobuf:"bytes,85,opt,name=api_system_scope_fallback,json=apiSystemScopeFallback,proto3" json:"api_system_scope_fallback,omitempty"`
	ApiSystemIdFallback        string   `protobuf:"bytes,86,opt,name=api_system_id_fallback,json=apiSystemIdFallback,proto3" json:"api_system_id_fallback,omitempty"`
	ApiSystemTypeFallback      string   `protobuf:"bytes,87,opt,name=api_system_type_fallback,json=apiSystemTypeFallback,proto3" json:"api_system_type_fallback,omitempty"`
	DbLogLocation              string   `protobuf:"bytes,94,opt,name=db_log_location,json=dbLogLocation,proto3" json:"db_log_location,omitempty"`
	DbLogDockerTail            string   `protobuf:"bytes,95,opt,name=db_log_docker_tail,json=dbLogDockerTail,proto3" json:"db_log_docker_tail,omitempty"`
	DbLogSyslogServer          string   `protobuf:"bytes,96,opt,name=db_log_syslog_server,json=dbLogSyslogServer,proto3" json:"db_log_syslog_server,omitempty"`
	DbLogPgReadFile            bool     `protobuf:"varint,97,opt,name=db_log_pg_read_file,json=dbLogPgReadFile,proto3" json:"db_log_pg_read_file,omitempty"`
	IgnoreTablePattern         string   `protobuf:"bytes,105,opt,name=ignore_table_pattern,json=ignoreTablePattern,proto3" json:"ignore_table_pattern,omitempty"`
	IgnoreSchemaRegexp         string   `protobuf:"bytes,106,opt,name=ignore_schema_regexp,json=ignoreSchemaRegexp,proto3" json:"ignore_schema_regexp,omitempty"`
	QueryStatsInterval         int32    `protobuf:"varint,116,opt,name=query_stats_interval,json=queryStatsInterval,proto3" json:"query_stats_interval,omitempty"`
	MaxCollectorConnections    int32    `protobuf:"varint,117,opt,name=max_collector_connections,json=maxCollectorConnections,proto3" json:"max_collector_connections,omitempty"`
	SkipIfReplica              bool     `protobuf:"varint,118,opt,name=skip_if_replica,json=skipIfReplica,proto3" json:"skip_if_replica,omitempty"`
	FilterLogSecret            string   `protobuf:"bytes,127,opt,name=filter_log_secret,json=filterLogSecret,proto3" json:"filter_log_secret,omitempty"`
	FilterQuerySample          string   `protobuf:"bytes,128,opt,name=filter_query_sample,json=filterQuerySample,proto3" json:"filter_query_sample,omitempty"`
	HasProxy                   bool     `protobuf:"varint,129,opt,name=has_proxy,json=hasProxy,proto3" json:"has_proxy,omitempty"`
	ConfigFromEnv              bool     `protobuf:"varint,130,opt,name=config_from_env,json=configFromEnv,proto3" json:"config_from_env,omitempty"`
	FilterQueryText            string   `protobuf:"bytes,131,opt,name=filter_query_text,json=filterQueryText,proto3" json:"filter_query_text,omitempty"`
}

func (x *CollectorConfig) Reset() {
	*x = CollectorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorConfig) ProtoMessage() {}

func (x *CollectorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorConfig.ProtoReflect.Descriptor instead.
func (*CollectorConfig) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{15}
}

func (x *CollectorConfig) GetSectionName() string {
	if x != nil {
		return x.SectionName
	}
	return ""
}

func (x *CollectorConfig) GetDisableLogs() bool {
	if x != nil {
		return x.DisableLogs
	}
	return false
}

func (x *CollectorConfig) GetDisableActivity() bool {
	if x != nil {
		return x.DisableActivity
	}
	return false
}

func (x *CollectorConfig) GetEnableLogExplain() bool {
	if x != nil {
		return x.EnableLogExplain
	}
	return false
}

func (x *CollectorConfig) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

func (x *CollectorConfig) GetDbUsername() string {
	if x != nil {
		return x.DbUsername
	}
	return ""
}

func (x *CollectorConfig) GetDbHost() string {
	if x != nil {
		return x.DbHost
	}
	return ""
}

func (x *CollectorConfig) GetDbPort() int32 {
	if x != nil {
		return x.DbPort
	}
	return 0
}

func (x *CollectorConfig) GetDbSslmode() string {
	if x != nil {
		return x.DbSslmode
	}
	return ""
}

func (x *CollectorConfig) GetDbHasSslrootcert() bool {
	if x != nil {
		return x.DbHasSslrootcert
	}
	return false
}

func (x *CollectorConfig) GetDbHasSslcert() bool {
	if x != nil {
		return x.DbHasSslcert
	}
	return false
}

func (x *CollectorConfig) GetDbHasSslkey() bool {
	if x != nil {
		return x.DbHasSslkey
	}
	return false
}

func (x *CollectorConfig) GetDbUrl() string {
	if x != nil {
		return x.DbUrl
	}
	return ""
}

func (x *CollectorConfig) GetDbExtraNames() []string {
	if x != nil {
		return x.DbExtraNames
	}
	return nil
}

func (x *CollectorConfig) GetDbAllNames() bool {
	if x != nil {
		return x.DbAllNames
	}
	return false
}

func (x *CollectorConfig) GetAwsRegion() string {
	if x != nil {
		return x.AwsRegion
	}
	return ""
}

func (x *CollectorConfig) GetAwsDbInstanceId() string {
	if x != nil {
		return x.AwsDbInstanceId
	}
	return ""
}

func (x *CollectorConfig) GetAwsHasAccessKeyId() bool {
	if x != nil {
		return x.AwsHasAccessKeyId
	}
	return false
}

func (x *CollectorConfig) GetAwsHasAssumeRole() bool {
	if x != nil {
		return x.AwsHasAssumeRole
	}
	return false
}

func (x *CollectorConfig) GetAwsHasAccountId() bool {
	if x != nil {
		return x.AwsHasAccountId
	}
	return false
}

func (x *CollectorConfig) GetAwsHasWebIdentityTokenFile() bool {
	if x != nil {
		return x.AwsHasWebIdentityTokenFile
	}
	return false
}

func (x *CollectorConfig) GetAwsHasRoleArn() bool {
	if x != nil {
		return x.AwsHasRoleArn
	}
	return false
}

func (x *CollectorConfig) GetAwsDbClusterId() string {
	if x != nil {
		return x.AwsDbClusterId
	}
	return ""
}

func (x *CollectorConfig) GetAwsDbClusterReadonly() bool {
	if x != nil {
		return x.AwsDbClusterReadonly
	}
	return false
}

func (x *CollectorConfig) GetAzureDbServerName() string {
	if x != nil {
		return x.AzureDbServerName
	}
	return ""
}

func (x *CollectorConfig) GetAzureEventhubNamespace() string {
	if x != nil {
		return x.AzureEventhubNamespace
	}
	return ""
}

func (x *CollectorConfig) GetAzureEventhubName() string {
	if x != nil {
		return x.AzureEventhubName
	}
	return ""
}

func (x *CollectorConfig) GetAzureAdTenantId() string {
	if x != nil {
		return x.AzureAdTenantId
	}
	return ""
}

func (x *CollectorConfig) GetAzureAdClientId() string {
	if x != nil {
		return x.AzureAdClientId
	}
	return ""
}

func (x *CollectorConfig) GetAzureHasAdCertificate() bool {
	if x != nil {
		return x.AzureHasAdCertificate
	}
	return false
}

func (x *CollectorConfig) GetGcpCloudsqlInstanceId() string {
	if x != nil {
		return x.GcpCloudsqlInstanceId
	}
	return ""
}

func (x *CollectorConfig) GetGcpPubsubSubscription() string {
	if x != nil {
		return x.GcpPubsubSubscription
	}
	return ""
}

func (x *CollectorConfig) GetGcpHasCredentialsFile() bool {
	if x != nil {
		return x.GcpHasCredentialsFile
	}
	return false
}

func (x *CollectorConfig) GetGcpProjectId() string {
	if x != nil {
		return x.GcpProjectId
	}
	return ""
}

func (x *CollectorConfig) GetGcpAlloydbClusterId() string {
	if x != nil {
		return x.GcpAlloydbClusterId
	}
	return ""
}

func (x *CollectorConfig) GetGcpAlloydbInstanceId() string {
	if x != nil {
		return x.GcpAlloydbInstanceId
	}
	return ""
}

func (x *CollectorConfig) GetCrunchyBridgeClusterId() string {
	if x != nil {
		return x.CrunchyBridgeClusterId
	}
	return ""
}

func (x *CollectorConfig) GetAivenProjectId() string {
	if x != nil {
		return x.AivenProjectId
	}
	return ""
}

func (x *CollectorConfig) GetAivenServiceId() string {
	if x != nil {
		return x.AivenServiceId
	}
	return ""
}

func (x *CollectorConfig) GetApiSystemId() string {
	if x != nil {
		return x.ApiSystemId
	}
	return ""
}

func (x *CollectorConfig) GetApiSystemType() string {
	if x != nil {
		return x.ApiSystemType
	}
	return ""
}

func (x *CollectorConfig) GetApiSystemScope() string {
	if x != nil {
		return x.ApiSystemScope
	}
	return ""
}

func (x *CollectorConfig) GetApiSystemScopeFallback() string {
	if x != nil {
		return x.ApiSystemScopeFallback
	}
	return ""
}

func (x *CollectorConfig) GetApiSystemIdFallback() string {
	if x != nil {
		return x.ApiSystemIdFallback
	}
	return ""
}

func (x *CollectorConfig) GetApiSystemTypeFallback() string {
	if x != nil {
		return x.ApiSystemTypeFallback
	}
	return ""
}

func (x *CollectorConfig) GetDbLogLocation() string {
	if x != nil {
		return x.DbLogLocation
	}
	return ""
}

func (x *CollectorConfig) GetDbLogDockerTail() string {
	if x != nil {
		return x.DbLogDockerTail
	}
	return ""
}

func (x *CollectorConfig) GetDbLogSyslogServer() string {
	if x != nil {
		return x.DbLogSyslogServer
	}
	return ""
}

func (x *CollectorConfig) GetDbLogPgReadFile() bool {
	if x != nil {
		return x.DbLogPgReadFile
	}
	return false
}

func (x *CollectorConfig) GetIgnoreTablePattern() string {
	if x != nil {
		return x.IgnoreTablePattern
	}
	return ""
}

func (x *CollectorConfig) GetIgnoreSchemaRegexp() string {
	if x != nil {
		return x.IgnoreSchemaRegexp
	}
	return ""
}

func (x *CollectorConfig) GetQueryStatsInterval() int32 {
	if x != nil {
		return x.QueryStatsInterval
	}
	return 0
}

func (x *CollectorConfig) GetMaxCollectorConnections() int32 {
	if x != nil {
		return x.MaxCollectorConnections
	}
	return 0
}

func (x *CollectorConfig) GetSkipIfReplica() bool {
	if x != nil {
		return x.SkipIfReplica
	}
	return false
}

func (x *CollectorConfig) GetFilterLogSecret() string {
	if x != nil {
		return x.FilterLogSecret
	}
	return ""
}

func (x *CollectorConfig) GetFilterQuerySample() string {
	if x != nil {
		return x.FilterQuerySample
	}
	return ""
}

func (x *CollectorConfig) GetHasProxy() bool {
	if x != nil {
		return x.HasProxy
	}
	return false
}

func (x *CollectorConfig) GetConfigFromEnv() bool {
	if x != nil {
		return x.ConfigFromEnv
	}
	return false
}

func (x *CollectorConfig) GetFilterQueryText() string {
	if x != nil {
		return x.FilterQueryText
	}
	return ""
}

type QueryStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryIdx          int32   `protobuf:"varint,1,opt,name=query_idx,json=queryIdx,proto3" json:"query_idx,omitempty"`
	Calls             int64   `protobuf:"varint,2,opt,name=calls,proto3" json:"calls,omitempty"`
	TotalTime         float64 `protobuf:"fixed64,3,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	Rows              int64   `protobuf:"varint,4,opt,name=rows,proto3" json:"rows,omitempty"`
	SharedBlksHit     int64   `protobuf:"varint,5,opt,name=shared_blks_hit,json=sharedBlksHit,proto3" json:"shared_blks_hit,omitempty"`
	SharedBlksRead    int64   `protobuf:"varint,6,opt,name=shared_blks_read,json=sharedBlksRead,proto3" json:"shared_blks_read,omitempty"`
	SharedBlksDirtied int64   `protobuf:"varint,7,opt,name=shared_blks_dirtied,json=sharedBlksDirtied,proto3" json:"shared_blks_dirtied,omitempty"`
	SharedBlksWritten int64   `protobuf:"varint,8,opt,name=shared_blks_written,json=sharedBlksWritten,proto3" json:"shared_blks_written,omitempty"`
	LocalBlksHit      int64   `protobuf:"varint,9,opt,name=local_blks_hit,json=localBlksHit,proto3" json:"local_blks_hit,omitempty"`
	LocalBlksRead     int64   `protobuf:"varint,10,opt,name=local_blks_read,json=localBlksRead,proto3" json:"local_blks_read,omitempty"`
	LocalBlksDirtied  int64   `protobuf:"varint,11,opt,name=local_blks_dirtied,json=localBlksDirtied,proto3" json:"local_blks_dirtied,omitempty"`
	LocalBlksWritten  int64   `protobuf:"varint,12,opt,name=local_blks_written,json=localBlksWritten,proto3" json:"local_blks_written,omitempty"`
	TempBlksRead      int64   `protobuf:"varint,13,opt,name=temp_blks_read,json=tempBlksRead,proto3" json:"temp_blks_read,omitempty"`
	TempBlksWritten   int64   `protobuf:"varint,14,opt,name=temp_blks_written,json=tempBlksWritten,proto3" json:"temp_blks_written,omitempty"`
	BlkReadTime       float64 `protobuf:"fixed64,15,opt,name=blk_read_time,json=blkReadTime,proto3" json:"blk_read_time,omitempty"`
	BlkWriteTime      float64 `protobuf:"fixed64,16,opt,name=blk_write_time,json=blkWriteTime,proto3" json:"blk_write_time,omitempty"`
}

func (x *QueryStatistic) Reset() {
	*x = QueryStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStatistic) ProtoMessage() {}

func (x *QueryStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStatistic.ProtoReflect.Descriptor instead.
func (*QueryStatistic) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{16}
}

func (x *QueryStatistic) GetQueryIdx() int32 {
	if x != nil {
		return x.QueryIdx
	}
	return 0
}

func (x *QueryStatistic) GetCalls() int64 {
	if x != nil {
		return x.Calls
	}
	return 0
}

func (x *QueryStatistic) GetTotalTime() float64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *QueryStatistic) GetRows() int64 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *QueryStatistic) GetSharedBlksHit() int64 {
	if x != nil {
		return x.SharedBlksHit
	}
	return 0
}

func (x *QueryStatistic) GetSharedBlksRead() int64 {
	if x != nil {
		return x.SharedBlksRead
	}
	return 0
}

func (x *QueryStatistic) GetSharedBlksDirtied() int64 {
	if x != nil {
		return x.SharedBlksDirtied
	}
	return 0
}

func (x *QueryStatistic) GetSharedBlksWritten() int64 {
	if x != nil {
		return x.SharedBlksWritten
	}
	return 0
}

func (x *QueryStatistic) GetLocalBlksHit() int64 {
	if x != nil {
		return x.LocalBlksHit
	}
	return 0
}

func (x *QueryStatistic) GetLocalBlksRead() int64 {
	if x != nil {
		return x.LocalBlksRead
	}
	return 0
}

func (x *QueryStatistic) GetLocalBlksDirtied() int64 {
	if x != nil {
		return x.LocalBlksDirtied
	}
	return 0
}

func (x *QueryStatistic) GetLocalBlksWritten() int64 {
	if x != nil {
		return x.LocalBlksWritten
	}
	return 0
}

func (x *QueryStatistic) GetTempBlksRead() int64 {
	if x != nil {
		return x.TempBlksRead
	}
	return 0
}

func (x *QueryStatistic) GetTempBlksWritten() int64 {
	if x != nil {
		return x.TempBlksWritten
	}
	return 0
}

func (x *QueryStatistic) GetBlkReadTime() float64 {
	if x != nil {
		return x.BlkReadTime
	}
	return 0
}

func (x *QueryStatistic) GetBlkWriteTime() float64 {
	if x != nil {
		return x.BlkWriteTime
	}
	return 0
}

type HistoricQueryStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CollectedAt           *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=collected_at,json=collectedAt,proto3" json:"collected_at,omitempty"`
	CollectedIntervalSecs uint32                 `protobuf:"varint,2,opt,name=collected_interval_secs,json=collectedIntervalSecs,proto3" json:"collected_interval_secs,omitempty"`
	Statistics            []*QueryStatistic      `protobuf:"bytes,3,rep,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *HistoricQueryStatistics) Reset() {
	*x = HistoricQueryStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricQueryStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricQueryStatistics) ProtoMessage() {}

func (x *HistoricQueryStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricQueryStatistics.ProtoReflect.Descriptor instead.
func (*HistoricQueryStatistics) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{17}
}

func (x *HistoricQueryStatistics) GetCollectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CollectedAt
	}
	return nil
}

func (x *HistoricQueryStatistics) GetCollectedIntervalSecs() uint32 {
	if x != nil {
		return x.CollectedIntervalSecs
	}
	return 0
}

func (x *HistoricQueryStatistics) GetStatistics() []*QueryStatistic {
	if x != nil {
		return x.Statistics
	}
	return nil
}

type RelationInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationIdx            int32                             `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	RelationType           string                            `protobuf:"bytes,2,opt,name=relation_type,json=relationType,proto3" json:"relation_type,omitempty"`
	ViewDefinition         *NullString                       `protobuf:"bytes,3,opt,name=view_definition,json=viewDefinition,proto3" json:"view_definition,omitempty"`
	Columns                []*RelationInformation_Column     `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	Constraints            []*RelationInformation_Constraint `protobuf:"bytes,5,rep,name=constraints,proto3" json:"constraints,omitempty"`
	PersistenceType        string                            `protobuf:"bytes,6,opt,name=persistence_type,json=persistenceType,proto3" json:"persistence_type,omitempty"`
	Fillfactor             int32                             `protobuf:"varint,7,opt,name=fillfactor,proto3" json:"fillfactor,omitempty"`
	HasOids                bool                              `protobuf:"varint,8,opt,name=has_oids,json=hasOids,proto3" json:"has_oids,omitempty"`
	HasInheritanceChildren bool                              `protobuf:"varint,9,opt,name=has_inheritance_children,json=hasInheritanceChildren,proto3" json:"has_inheritance_children,omitempty"`
	HasToast               bool                              `protobuf:"varint,10,opt,name=has_toast,json=hasToast,proto3" json:"has_toast,omitempty"`
	// True if another process is currently holding an AccessExclusiveLock on this
	// relation, this also means we won't have columns/index/constraints information
	ExclusivelyLocked bool                                  `protobuf:"varint,13,opt,name=exclusively_locked,json=exclusivelyLocked,proto3" json:"exclusively_locked,omitempty"`
	Options           map[string]string                     `protobuf:"bytes,14,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ParentRelationIdx int32                                 `protobuf:"varint,15,opt,name=parent_relation_idx,json=parentRelationIdx,proto3" json:"parent_relation_idx,omitempty"`
	HasParentRelation bool                                  `protobuf:"varint,16,opt,name=has_parent_relation,json=hasParentRelation,proto3" json:"has_parent_relation,omitempty"`
	PartitionBoundary string                                `protobuf:"bytes,17,opt,name=partition_boundary,json=partitionBoundary,proto3" json:"partition_boundary,omitempty"`
	PartitionStrategy RelationInformation_PartitionStrategy `protobuf:"varint,18,opt,name=partition_strategy,json=partitionStrategy,proto3,enum=pganalyze.collector.RelationInformation_PartitionStrategy" json:"partition_strategy,omitempty"`
	PartitionColumns  []int32                               `protobuf:"varint,19,rep,packed,name=partition_columns,json=partitionColumns,proto3" json:"partition_columns,omitempty"` // list of either column index (when corresponding partition field is a column) or 0 (when expression)
	PartitionedBy     string                                `protobuf:"bytes,20,opt,name=partitioned_by,json=partitionedBy,proto3" json:"partitioned_by,omitempty"`
	ToastName         *NullString                           `protobuf:"bytes,21,opt,name=toast_name,json=toastName,proto3" json:"toast_name,omitempty"`
}

func (x *RelationInformation) Reset() {
	*x = RelationInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationInformation) ProtoMessage() {}

func (x *RelationInformation) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationInformation.ProtoReflect.Descriptor instead.
func (*RelationInformation) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{18}
}

func (x *RelationInformation) GetRelationIdx() int32 {
	if x != nil {
		return x.RelationIdx
	}
	return 0
}

func (x *RelationInformation) GetRelationType() string {
	if x != nil {
		return x.RelationType
	}
	return ""
}

func (x *RelationInformation) GetViewDefinition() *NullString {
	if x != nil {
		return x.ViewDefinition
	}
	return nil
}

func (x *RelationInformation) GetColumns() []*RelationInformation_Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *RelationInformation) GetConstraints() []*RelationInformation_Constraint {
	if x != nil {
		return x.Constraints
	}
	return nil
}

func (x *RelationInformation) GetPersistenceType() string {
	if x != nil {
		return x.PersistenceType
	}
	return ""
}

func (x *RelationInformation) GetFillfactor() int32 {
	if x != nil {
		return x.Fillfactor
	}
	return 0
}

func (x *RelationInformation) GetHasOids() bool {
	if x != nil {
		return x.HasOids
	}
	return false
}

func (x *RelationInformation) GetHasInheritanceChildren() bool {
	if x != nil {
		return x.HasInheritanceChildren
	}
	return false
}

func (x *RelationInformation) GetHasToast() bool {
	if x != nil {
		return x.HasToast
	}
	return false
}

func (x *RelationInformation) GetExclusivelyLocked() bool {
	if x != nil {
		return x.ExclusivelyLocked
	}
	return false
}

func (x *RelationInformation) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *RelationInformation) GetParentRelationIdx() int32 {
	if x != nil {
		return x.ParentRelationIdx
	}
	return 0
}

func (x *RelationInformation) GetHasParentRelation() bool {
	if x != nil {
		return x.HasParentRelation
	}
	return false
}

func (x *RelationInformation) GetPartitionBoundary() string {
	if x != nil {
		return x.PartitionBoundary
	}
	return ""
}

func (x *RelationInformation) GetPartitionStrategy() RelationInformation_PartitionStrategy {
	if x != nil {
		return x.PartitionStrategy
	}
	return RelationInformation_UNKNOWN
}

func (x *RelationInformation) GetPartitionColumns() []int32 {
	if x != nil {
		return x.PartitionColumns
	}
	return nil
}

func (x *RelationInformation) GetPartitionedBy() string {
	if x != nil {
		return x.PartitionedBy
	}
	return ""
}

func (x *RelationInformation) GetToastName() *NullString {
	if x != nil {
		return x.ToastName
	}
	return nil
}

type RelationStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationIdx      int32          `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	SizeBytes        int64          `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`                           // On-disk size including FSM and VM, plus TOAST table if any, excluding indices
	SeqScan          int64          `protobuf:"varint,3,opt,name=seq_scan,json=seqScan,proto3" json:"seq_scan,omitempty"`                                 // Number of sequential scans initiated on this table
	SeqTupRead       int64          `protobuf:"varint,4,opt,name=seq_tup_read,json=seqTupRead,proto3" json:"seq_tup_read,omitempty"`                      // Number of live rows fetched by sequential scans
	IdxScan          int64          `protobuf:"varint,5,opt,name=idx_scan,json=idxScan,proto3" json:"idx_scan,omitempty"`                                 // Number of index scans initiated on this table
	IdxTupFetch      int64          `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch,proto3" json:"idx_tup_fetch,omitempty"`                   // Number of live rows fetched by index scans
	NTupIns          int64          `protobuf:"varint,7,opt,name=n_tup_ins,json=nTupIns,proto3" json:"n_tup_ins,omitempty"`                               // Number of rows inserted
	NTupUpd          int64          `protobuf:"varint,8,opt,name=n_tup_upd,json=nTupUpd,proto3" json:"n_tup_upd,omitempty"`                               // Number of rows updated
	NTupDel          int64          `protobuf:"varint,9,opt,name=n_tup_del,json=nTupDel,proto3" json:"n_tup_del,omitempty"`                               // Number of rows deleted
	NTupHotUpd       int64          `protobuf:"varint,10,opt,name=n_tup_hot_upd,json=nTupHotUpd,proto3" json:"n_tup_hot_upd,omitempty"`                   // Number of rows HOT updated (i.e., with no separate index update required)
	NLiveTup         int64          `protobuf:"varint,11,opt,name=n_live_tup,json=nLiveTup,proto3" json:"n_live_tup,omitempty"`                           // Estimated number of live rows
	NDeadTup         int64          `protobuf:"varint,12,opt,name=n_dead_tup,json=nDeadTup,proto3" json:"n_dead_tup,omitempty"`                           // Estimated number of dead rows
	NModSinceAnalyze int64          `protobuf:"varint,13,opt,name=n_mod_since_analyze,json=nModSinceAnalyze,proto3" json:"n_mod_since_analyze,omitempty"` // Estimated number of rows modified since this table was last analyzed
	NInsSinceVacuum  int64          `protobuf:"varint,14,opt,name=n_ins_since_vacuum,json=nInsSinceVacuum,proto3" json:"n_ins_since_vacuum,omitempty"`    // Estimated number of rows inserted since this table was last vacuumed
	HeapBlksRead     int64          `protobuf:"varint,18,opt,name=heap_blks_read,json=heapBlksRead,proto3" json:"heap_blks_read,omitempty"`               // Number of disk blocks read from this table
	HeapBlksHit      int64          `protobuf:"varint,19,opt,name=heap_blks_hit,json=heapBlksHit,proto3" json:"heap_blks_hit,omitempty"`                  // Number of buffer hits in this table
	IdxBlksRead      int64          `protobuf:"varint,20,opt,name=idx_blks_read,json=idxBlksRead,proto3" json:"idx_blks_read,omitempty"`                  // Number of disk blocks read from all indexes on this table
	IdxBlksHit       int64          `protobuf:"varint,21,opt,name=idx_blks_hit,json=idxBlksHit,proto3" json:"idx_blks_hit,omitempty"`                     // Number of buffer hits in all indexes on this table
	ToastBlksRead    int64          `protobuf:"varint,22,opt,name=toast_blks_read,json=toastBlksRead,proto3" json:"toast_blks_read,omitempty"`            // Number of disk blocks read from this table's TOAST table (if any)
	ToastBlksHit     int64          `protobuf:"varint,23,opt,name=toast_blks_hit,json=toastBlksHit,proto3" json:"toast_blks_hit,omitempty"`               // Number of buffer hits in this table's TOAST table (if any)
	TidxBlksRead     int64          `protobuf:"varint,24,opt,name=tidx_blks_read,json=tidxBlksRead,proto3" json:"tidx_blks_read,omitempty"`               // Number of disk blocks read from this table's TOAST table indexes (if any)
	TidxBlksHit      int64          `protobuf:"varint,25,opt,name=tidx_blks_hit,json=tidxBlksHit,proto3" json:"tidx_blks_hit,omitempty"`                  // Number of buffer hits in this table's TOAST table indexes (if any)
	ToastSizeBytes   int64          `protobuf:"varint,26,opt,name=toast_size_bytes,json=toastSizeBytes,proto3" json:"toast_size_bytes,omitempty"`         // TOAST table and TOAST index size (included in size_bytes as well)
	AnalyzedAt       *NullTimestamp `protobuf:"bytes,27,opt,name=analyzed_at,json=analyzedAt,proto3" json:"analyzed_at,omitempty"`
	FrozenxidAge     int32          `protobuf:"varint,30,opt,name=frozenxid_age,json=frozenxidAge,proto3" json:"frozenxid_age,omitempty"` // The age of frozen xact ID for this relation (relative to latest stable xid)
	MinmxidAge       int32          `protobuf:"varint,31,opt,name=minmxid_age,json=minmxidAge,proto3" json:"minmxid_age,omitempty"`       // The age of minimum multixact ID for this relation (relative to latest stable mxid)
	// Statistics that are infrequently updated (e.g. by VACUUM, ANALYZE, and a few DDL commands)
	Relpages        int32          `protobuf:"varint,40,opt,name=relpages,proto3" json:"relpages,omitempty"`                                     // Size of the on-disk representation of this table in pages (of size BLCKSZ)
	Reltuples       float32        `protobuf:"fixed32,41,opt,name=reltuples,proto3" json:"reltuples,omitempty"`                                  // Number of live rows in the table. -1 indicating that the row count is unknown
	Relallvisible   int32          `protobuf:"varint,42,opt,name=relallvisible,proto3" json:"relallvisible,omitempty"`                           // Number of pages that are marked all-visible in the table's visibility map
	Relfrozenxid    int64          `protobuf:"varint,43,opt,name=relfrozenxid,proto3" json:"relfrozenxid,omitempty"`                             // All transaction IDs before this one have been replaced with a permanent (“frozen”) transaction ID in this table, in xid8 (64-bit FullTransactionId)
	Relminmxid      int64          `protobuf:"varint,44,opt,name=relminmxid,proto3" json:"relminmxid,omitempty"`                                 // All multixact IDs before this one have been replaced by a transaction ID in this table
	LastVacuum      *NullTimestamp `protobuf:"bytes,45,opt,name=last_vacuum,json=lastVacuum,proto3" json:"last_vacuum,omitempty"`                // Last time at which this table was manually vacuumed (not counting VACUUM FULL)
	LastAutovacuum  *NullTimestamp `protobuf:"bytes,46,opt,name=last_autovacuum,json=lastAutovacuum,proto3" json:"last_autovacuum,omitempty"`    // Last time at which this table was vacuumed by the autovacuum daemon
	LastAnalyze     *NullTimestamp `protobuf:"bytes,47,opt,name=last_analyze,json=lastAnalyze,proto3" json:"last_analyze,omitempty"`             // Last time at which this table was manually analyzed
	LastAutoanalyze *NullTimestamp `protobuf:"bytes,48,opt,name=last_autoanalyze,json=lastAutoanalyze,proto3" json:"last_autoanalyze,omitempty"` // Last time at which this table was analyzed by the autovacuum daemon
	ToastReltuples  float32        `protobuf:"fixed32,49,opt,name=toast_reltuples,json=toastReltuples,proto3" json:"toast_reltuples,omitempty"`  // Number of live rows in the TOAST table. -1 indicating that the row count is unknown
	ToastRelpages   int32          `protobuf:"varint,50,opt,name=toast_relpages,json=toastRelpages,proto3" json:"toast_relpages,omitempty"`      // Size of the on-disk representation of the TOAST table in pages (of size BLCKSZ)
}

func (x *RelationStatistic) Reset() {
	*x = RelationStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationStatistic) ProtoMessage() {}

func (x *RelationStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationStatistic.ProtoReflect.Descriptor instead.
func (*RelationStatistic) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{19}
}

func (x *RelationStatistic) GetRelationIdx() int32 {
	if x != nil {
		return x.RelationIdx
	}
	return 0
}

func (x *RelationStatistic) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *RelationStatistic) GetSeqScan() int64 {
	if x != nil {
		return x.SeqScan
	}
	return 0
}

func (x *RelationStatistic) GetSeqTupRead() int64 {
	if x != nil {
		return x.SeqTupRead
	}
	return 0
}

func (x *RelationStatistic) GetIdxScan() int64 {
	if x != nil {
		return x.IdxScan
	}
	return 0
}

func (x *RelationStatistic) GetIdxTupFetch() int64 {
	if x != nil {
		return x.IdxTupFetch
	}
	return 0
}

func (x *RelationStatistic) GetNTupIns() int64 {
	if x != nil {
		return x.NTupIns
	}
	return 0
}

func (x *RelationStatistic) GetNTupUpd() int64 {
	if x != nil {
		return x.NTupUpd
	}
	return 0
}

func (x *RelationStatistic) GetNTupDel() int64 {
	if x != nil {
		return x.NTupDel
	}
	return 0
}

func (x *RelationStatistic) GetNTupHotUpd() int64 {
	if x != nil {
		return x.NTupHotUpd
	}
	return 0
}

func (x *RelationStatistic) GetNLiveTup() int64 {
	if x != nil {
		return x.NLiveTup
	}
	return 0
}

func (x *RelationStatistic) GetNDeadTup() int64 {
	if x != nil {
		return x.NDeadTup
	}
	return 0
}

func (x *RelationStatistic) GetNModSinceAnalyze() int64 {
	if x != nil {
		return x.NModSinceAnalyze
	}
	return 0
}

func (x *RelationStatistic) GetNInsSinceVacuum() int64 {
	if x != nil {
		return x.NInsSinceVacuum
	}
	return 0
}

func (x *RelationStatistic) GetHeapBlksRead() int64 {
	if x != nil {
		return x.HeapBlksRead
	}
	return 0
}

func (x *RelationStatistic) GetHeapBlksHit() int64 {
	if x != nil {
		return x.HeapBlksHit
	}
	return 0
}

func (x *RelationStatistic) GetIdxBlksRead() int64 {
	if x != nil {
		return x.IdxBlksRead
	}
	return 0
}

func (x *RelationStatistic) GetIdxBlksHit() int64 {
	if x != nil {
		return x.IdxBlksHit
	}
	return 0
}

func (x *RelationStatistic) GetToastBlksRead() int64 {
	if x != nil {
		return x.ToastBlksRead
	}
	return 0
}

func (x *RelationStatistic) GetToastBlksHit() int64 {
	if x != nil {
		return x.ToastBlksHit
	}
	return 0
}

func (x *RelationStatistic) GetTidxBlksRead() int64 {
	if x != nil {
		return x.TidxBlksRead
	}
	return 0
}

func (x *RelationStatistic) GetTidxBlksHit() int64 {
	if x != nil {
		return x.TidxBlksHit
	}
	return 0
}

func (x *RelationStatistic) GetToastSizeBytes() int64 {
	if x != nil {
		return x.ToastSizeBytes
	}
	return 0
}

func (x *RelationStatistic) GetAnalyzedAt() *NullTimestamp {
	if x != nil {
		return x.AnalyzedAt
	}
	return nil
}

func (x *RelationStatistic) GetFrozenxidAge() int32 {
	if x != nil {
		return x.FrozenxidAge
	}
	return 0
}

func (x *RelationStatistic) GetMinmxidAge() int32 {
	if x != nil {
		return x.MinmxidAge
	}
	return 0
}

func (x *RelationStatistic) GetRelpages() int32 {
	if x != nil {
		return x.Relpages
	}
	return 0
}

func (x *RelationStatistic) GetReltuples() float32 {
	if x != nil {
		return x.Reltuples
	}
	return 0
}

func (x *RelationStatistic) GetRelallvisible() int32 {
	if x != nil {
		return x.Relallvisible
	}
	return 0
}

func (x *RelationStatistic) GetRelfrozenxid() int64 {
	if x != nil {
		return x.Relfrozenxid
	}
	return 0
}

func (x *RelationStatistic) GetRelminmxid() int64 {
	if x != nil {
		return x.Relminmxid
	}
	return 0
}

func (x *RelationStatistic) GetLastVacuum() *NullTimestamp {
	if x != nil {
		return x.LastVacuum
	}
	return nil
}

func (x *RelationStatistic) GetLastAutovacuum() *NullTimestamp {
	if x != nil {
		return x.LastAutovacuum
	}
	return nil
}

func (x *RelationStatistic) GetLastAnalyze() *NullTimestamp {
	if x != nil {
		return x.LastAnalyze
	}
	return nil
}

func (x *RelationStatistic) GetLastAutoanalyze() *NullTimestamp {
	if x != nil {
		return x.LastAutoanalyze
	}
	return nil
}

func (x *RelationStatistic) GetToastReltuples() float32 {
	if x != nil {
		return x.ToastReltuples
	}
	return 0
}

func (x *RelationStatistic) GetToastRelpages() int32 {
	if x != nil {
		return x.ToastRelpages
	}
	return 0
}

type RelationEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationIdx           int32                   `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	Type                  RelationEvent_EventType `protobuf:"varint,2,opt,name=type,proto3,enum=pganalyze.collector.RelationEvent_EventType" json:"type,omitempty"`
	OccurredAt            *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	ApproximateOccurredAt bool                    `protobuf:"varint,4,opt,name=approximate_occurred_at,json=approximateOccurredAt,proto3" json:"approximate_occurred_at,omitempty"` // In case the "occurred_at" field is approximate, because more than one kind of this event happened during the snapshot
}

func (x *RelationEvent) Reset() {
	*x = RelationEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationEvent) ProtoMessage() {}

func (x *RelationEvent) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationEvent.ProtoReflect.Descriptor instead.
func (*RelationEvent) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{20}
}

func (x *RelationEvent) GetRelationIdx() int32 {
	if x != nil {
		return x.RelationIdx
	}
	return 0
}

func (x *RelationEvent) GetType() RelationEvent_EventType {
	if x != nil {
		return x.Type
	}
	return RelationEvent_MANUAL_VACUUM
}

func (x *RelationEvent) GetOccurredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OccurredAt
	}
	return nil
}

func (x *RelationEvent) GetApproximateOccurredAt() bool {
	if x != nil {
		return x.ApproximateOccurredAt
	}
	return false
}

type IndexInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexIdx      int32       `protobuf:"varint,1,opt,name=index_idx,json=indexIdx,proto3" json:"index_idx,omitempty"`
	RelationIdx   int32       `protobuf:"varint,2,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	Columns       []int32     `protobuf:"varint,3,rep,packed,name=columns,proto3" json:"columns,omitempty"`
	IndexDef      string      `protobuf:"bytes,4,opt,name=index_def,json=indexDef,proto3" json:"index_def,omitempty"`
	ConstraintDef *NullString `protobuf:"bytes,5,opt,name=constraint_def,json=constraintDef,proto3" json:"constraint_def,omitempty"`
	IsPrimary     bool        `protobuf:"varint,6,opt,name=is_primary,json=isPrimary,proto3" json:"is_primary,omitempty"`
	IsUnique      bool        `protobuf:"varint,7,opt,name=is_unique,json=isUnique,proto3" json:"is_unique,omitempty"`
	IsValid       bool        `protobuf:"varint,8,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	Fillfactor    int32       `protobuf:"varint,9,opt,name=fillfactor,proto3" json:"fillfactor,omitempty"`
	IndexType     string      `protobuf:"bytes,10,opt,name=index_type,json=indexType,proto3" json:"index_type,omitempty"`
}

func (x *IndexInformation) Reset() {
	*x = IndexInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexInformation) ProtoMessage() {}

func (x *IndexInformation) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexInformation.ProtoReflect.Descriptor instead.
func (*IndexInformation) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{21}
}

func (x *IndexInformation) GetIndexIdx() int32 {
	if x != nil {
		return x.IndexIdx
	}
	return 0
}

func (x *IndexInformation) GetRelationIdx() int32 {
	if x != nil {
		return x.RelationIdx
	}
	return 0
}

func (x *IndexInformation) GetColumns() []int32 {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *IndexInformation) GetIndexDef() string {
	if x != nil {
		return x.IndexDef
	}
	return ""
}

func (x *IndexInformation) GetConstraintDef() *NullString {
	if x != nil {
		return x.ConstraintDef
	}
	return nil
}

func (x *IndexInformation) GetIsPrimary() bool {
	if x != nil {
		return x.IsPrimary
	}
	return false
}

func (x *IndexInformation) GetIsUnique() bool {
	if x != nil {
		return x.IsUnique
	}
	return false
}

func (x *IndexInformation) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *IndexInformation) GetFillfactor() int32 {
	if x != nil {
		return x.Fillfactor
	}
	return 0
}

func (x *IndexInformation) GetIndexType() string {
	if x != nil {
		return x.IndexType
	}
	return ""
}

type IndexStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexIdx    int32 `protobuf:"varint,1,opt,name=index_idx,json=indexIdx,proto3" json:"index_idx,omitempty"`
	SizeBytes   int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	IdxScan     int64 `protobuf:"varint,3,opt,name=idx_scan,json=idxScan,proto3" json:"idx_scan,omitempty"`
	IdxTupRead  int64 `protobuf:"varint,4,opt,name=idx_tup_read,json=idxTupRead,proto3" json:"idx_tup_read,omitempty"`
	IdxTupFetch int64 `protobuf:"varint,6,opt,name=idx_tup_fetch,json=idxTupFetch,proto3" json:"idx_tup_fetch,omitempty"`
	IdxBlksRead int64 `protobuf:"varint,7,opt,name=idx_blks_read,json=idxBlksRead,proto3" json:"idx_blks_read,omitempty"`
	IdxBlksHit  int64 `protobuf:"varint,8,opt,name=idx_blks_hit,json=idxBlksHit,proto3" json:"idx_blks_hit,omitempty"`
}

func (x *IndexStatistic) Reset() {
	*x = IndexStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexStatistic) ProtoMessage() {}

func (x *IndexStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexStatistic.ProtoReflect.Descriptor instead.
func (*IndexStatistic) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{22}
}

func (x *IndexStatistic) GetIndexIdx() int32 {
	if x != nil {
		return x.IndexIdx
	}
	return 0
}

func (x *IndexStatistic) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *IndexStatistic) GetIdxScan() int64 {
	if x != nil {
		return x.IdxScan
	}
	return 0
}

func (x *IndexStatistic) GetIdxTupRead() int64 {
	if x != nil {
		return x.IdxTupRead
	}
	return 0
}

func (x *IndexStatistic) GetIdxTupFetch() int64 {
	if x != nil {
		return x.IdxTupFetch
	}
	return 0
}

func (x *IndexStatistic) GetIdxBlksRead() int64 {
	if x != nil {
		return x.IdxBlksRead
	}
	return 0
}

func (x *IndexStatistic) GetIdxBlksHit() int64 {
	if x != nil {
		return x.IdxBlksHit
	}
	return 0
}

type FunctionInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionIdx     int32                            `protobuf:"varint,1,opt,name=function_idx,json=functionIdx,proto3" json:"function_idx,omitempty"`
	Language        string                           `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Source          string                           `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	SourceBin       string                           `protobuf:"bytes,5,opt,name=source_bin,json=sourceBin,proto3" json:"source_bin,omitempty"`
	Config          []string                         `protobuf:"bytes,6,rep,name=config,proto3" json:"config,omitempty"`
	Result          string                           `protobuf:"bytes,8,opt,name=result,proto3" json:"result,omitempty"`
	Aggregate       bool                             `protobuf:"varint,9,opt,name=aggregate,proto3" json:"aggregate,omitempty"`
	Window          bool                             `protobuf:"varint,10,opt,name=window,proto3" json:"window,omitempty"`
	SecurityDefiner bool                             `protobuf:"varint,11,opt,name=security_definer,json=securityDefiner,proto3" json:"security_definer,omitempty"`
	Leakproof       bool                             `protobuf:"varint,12,opt,name=leakproof,proto3" json:"leakproof,omitempty"`
	Strict          bool                             `protobuf:"varint,13,opt,name=strict,proto3" json:"strict,omitempty"`
	ReturnsSet      bool                             `protobuf:"varint,14,opt,name=returns_set,json=returnsSet,proto3" json:"returns_set,omitempty"`
	Volatile        string                           `protobuf:"bytes,15,opt,name=volatile,proto3" json:"volatile,omitempty"`
	Kind            FunctionInformation_FunctionKind `protobuf:"varint,16,opt,name=kind,proto3,enum=pganalyze.collector.FunctionInformation_FunctionKind" json:"kind,omitempty"`
}

func (x *FunctionInformation) Reset() {
	*x = FunctionInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionInformation) ProtoMessage() {}

func (x *FunctionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionInformation.ProtoReflect.Descriptor instead.
func (*FunctionInformation) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{23}
}

func (x *FunctionInformation) GetFunctionIdx() int32 {
	if x != nil {
		return x.FunctionIdx
	}
	return 0
}

func (x *FunctionInformation) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *FunctionInformation) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *FunctionInformation) GetSourceBin() string {
	if x != nil {
		return x.SourceBin
	}
	return ""
}

func (x *FunctionInformation) GetConfig() []string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *FunctionInformation) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *FunctionInformation) GetAggregate() bool {
	if x != nil {
		return x.Aggregate
	}
	return false
}

func (x *FunctionInformation) GetWindow() bool {
	if x != nil {
		return x.Window
	}
	return false
}

func (x *FunctionInformation) GetSecurityDefiner() bool {
	if x != nil {
		return x.SecurityDefiner
	}
	return false
}

func (x *FunctionInformation) GetLeakproof() bool {
	if x != nil {
		return x.Leakproof
	}
	return false
}

func (x *FunctionInformation) GetStrict() bool {
	if x != nil {
		return x.Strict
	}
	return false
}

func (x *FunctionInformation) GetReturnsSet() bool {
	if x != nil {
		return x.ReturnsSet
	}
	return false
}

func (x *FunctionInformation) GetVolatile() string {
	if x != nil {
		return x.Volatile
	}
	return ""
}

func (x *FunctionInformation) GetKind() FunctionInformation_FunctionKind {
	if x != nil {
		return x.Kind
	}
	return FunctionInformation_UNKNOWN
}

type FunctionStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FunctionIdx int32   `protobuf:"varint,1,opt,name=function_idx,json=functionIdx,proto3" json:"function_idx,omitempty"`
	Calls       int64   `protobuf:"varint,2,opt,name=calls,proto3" json:"calls,omitempty"`
	TotalTime   float64 `protobuf:"fixed64,3,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	SelfTime    float64 `protobuf:"fixed64,4,opt,name=self_time,json=selfTime,proto3" json:"self_time,omitempty"`
}

func (x *FunctionStatistic) Reset() {
	*x = FunctionStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionStatistic) ProtoMessage() {}

func (x *FunctionStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionStatistic.ProtoReflect.Descriptor instead.
func (*FunctionStatistic) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{24}
}

func (x *FunctionStatistic) GetFunctionIdx() int32 {
	if x != nil {
		return x.FunctionIdx
	}
	return 0
}

func (x *FunctionStatistic) GetCalls() int64 {
	if x != nil {
		return x.Calls
	}
	return 0
}

func (x *FunctionStatistic) GetTotalTime() float64 {
	if x != nil {
		return x.TotalTime
	}
	return 0
}

func (x *FunctionStatistic) GetSelfTime() float64 {
	if x != nil {
		return x.SelfTime
	}
	return 0
}

type CustomTypeInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseIdx       int32                                  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	SchemaName        string                                 `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	Name              string                                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type              CustomTypeInformation_Type             `protobuf:"varint,4,opt,name=type,proto3,enum=pganalyze.collector.CustomTypeInformation_Type" json:"type,omitempty"`
	DomainType        string                                 `protobuf:"bytes,5,opt,name=domain_type,json=domainType,proto3" json:"domain_type,omitempty"`
	DomainNotNull     bool                                   `protobuf:"varint,6,opt,name=domain_not_null,json=domainNotNull,proto3" json:"domain_not_null,omitempty"`
	DomainDefault     string                                 `protobuf:"bytes,7,opt,name=domain_default,json=domainDefault,proto3" json:"domain_default,omitempty"`
	EnumValues        []string                               `protobuf:"bytes,9,rep,name=enum_values,json=enumValues,proto3" json:"enum_values,omitempty"`
	CompositeAttrs    []*CustomTypeInformation_CompositeAttr `protobuf:"bytes,10,rep,name=composite_attrs,json=compositeAttrs,proto3" json:"composite_attrs,omitempty"`
	DomainConstraints []string                               `protobuf:"bytes,11,rep,name=domain_constraints,json=domainConstraints,proto3" json:"domain_constraints,omitempty"`
}

func (x *CustomTypeInformation) Reset() {
	*x = CustomTypeInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTypeInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTypeInformation) ProtoMessage() {}

func (x *CustomTypeInformation) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTypeInformation.ProtoReflect.Descriptor instead.
func (*CustomTypeInformation) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{25}
}

func (x *CustomTypeInformation) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *CustomTypeInformation) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *CustomTypeInformation) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomTypeInformation) GetType() CustomTypeInformation_Type {
	if x != nil {
		return x.Type
	}
	return CustomTypeInformation_ENUM
}

func (x *CustomTypeInformation) GetDomainType() string {
	if x != nil {
		return x.DomainType
	}
	return ""
}

func (x *CustomTypeInformation) GetDomainNotNull() bool {
	if x != nil {
		return x.DomainNotNull
	}
	return false
}

func (x *CustomTypeInformation) GetDomainDefault() string {
	if x != nil {
		return x.DomainDefault
	}
	return ""
}

func (x *CustomTypeInformation) GetEnumValues() []string {
	if x != nil {
		return x.EnumValues
	}
	return nil
}

func (x *CustomTypeInformation) GetCompositeAttrs() []*CustomTypeInformation_CompositeAttr {
	if x != nil {
		return x.CompositeAttrs
	}
	return nil
}

func (x *CustomTypeInformation) GetDomainConstraints() []string {
	if x != nil {
		return x.DomainConstraints
	}
	return nil
}

type RelationInformation_Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DataType          string                                 `protobuf:"bytes,3,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	DefaultValue      *NullString                            `protobuf:"bytes,4,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	NotNull           bool                                   `protobuf:"varint,5,opt,name=not_null,json=notNull,proto3" json:"not_null,omitempty"`
	Position          int32                                  `protobuf:"varint,6,opt,name=position,proto3" json:"position,omitempty"`
	Statistics        []*RelationInformation_ColumnStatistic `protobuf:"bytes,7,rep,name=statistics,proto3" json:"statistics,omitempty"`
	DataTypeCustomIdx *NullInt32                             `protobuf:"bytes,8,opt,name=data_type_custom_idx,json=dataTypeCustomIdx,proto3" json:"data_type_custom_idx,omitempty"`
}

func (x *RelationInformation_Column) Reset() {
	*x = RelationInformation_Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationInformation_Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationInformation_Column) ProtoMessage() {}

func (x *RelationInformation_Column) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationInformation_Column.ProtoReflect.Descriptor instead.
func (*RelationInformation_Column) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{18, 1}
}

func (x *RelationInformation_Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelationInformation_Column) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *RelationInformation_Column) GetDefaultValue() *NullString {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *RelationInformation_Column) GetNotNull() bool {
	if x != nil {
		return x.NotNull
	}
	return false
}

func (x *RelationInformation_Column) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *RelationInformation_Column) GetStatistics() []*RelationInformation_ColumnStatistic {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *RelationInformation_Column) GetDataTypeCustomIdx() *NullInt32 {
	if x != nil {
		return x.DataTypeCustomIdx
	}
	return nil
}

type RelationInformation_ColumnStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inherited   bool        `protobuf:"varint,1,opt,name=inherited,proto3" json:"inherited,omitempty"`
	NullFrac    float64     `protobuf:"fixed64,2,opt,name=null_frac,json=nullFrac,proto3" json:"null_frac,omitempty"`
	AvgWidth    int32       `protobuf:"varint,3,opt,name=avg_width,json=avgWidth,proto3" json:"avg_width,omitempty"`
	NDistinct   float64     `protobuf:"fixed64,4,opt,name=n_distinct,json=nDistinct,proto3" json:"n_distinct,omitempty"`
	Correlation *NullDouble `protobuf:"bytes,5,opt,name=correlation,proto3" json:"correlation,omitempty"`
}

func (x *RelationInformation_ColumnStatistic) Reset() {
	*x = RelationInformation_ColumnStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationInformation_ColumnStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationInformation_ColumnStatistic) ProtoMessage() {}

func (x *RelationInformation_ColumnStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationInformation_ColumnStatistic.ProtoReflect.Descriptor instead.
func (*RelationInformation_ColumnStatistic) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{18, 2}
}

func (x *RelationInformation_ColumnStatistic) GetInherited() bool {
	if x != nil {
		return x.Inherited
	}
	return false
}

func (x *RelationInformation_ColumnStatistic) GetNullFrac() float64 {
	if x != nil {
		return x.NullFrac
	}
	return 0
}

func (x *RelationInformation_ColumnStatistic) GetAvgWidth() int32 {
	if x != nil {
		return x.AvgWidth
	}
	return 0
}

func (x *RelationInformation_ColumnStatistic) GetNDistinct() float64 {
	if x != nil {
		return x.NDistinct
	}
	return 0
}

func (x *RelationInformation_ColumnStatistic) GetCorrelation() *NullDouble {
	if x != nil {
		return x.Correlation
	}
	return nil
}

type RelationInformation_Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForeignRelationIdx int32   `protobuf:"varint,1,opt,name=foreign_relation_idx,json=foreignRelationIdx,proto3" json:"foreign_relation_idx,omitempty"` // If a foreign key, the referenced table
	Name               string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                          // Constraint name (not necessarily unique!)
	Type               string  `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`                                                          // c = check constraint, f = foreign key constraint, p = primary key constraint, u = unique constraint, t = constraint trigger, x = exclusion constraint
	ConstraintDef      string  `protobuf:"bytes,4,opt,name=constraint_def,json=constraintDef,proto3" json:"constraint_def,omitempty"`                   // Human-readable representation of the expression
	Columns            []int32 `protobuf:"varint,5,rep,packed,name=columns,proto3" json:"columns,omitempty"`                                            // If a table constraint (including foreign keys, but not constraint triggers), list of the constrained columns
	ForeignColumns     []int32 `protobuf:"varint,6,rep,packed,name=foreign_columns,json=foreignColumns,proto3" json:"foreign_columns,omitempty"`        // If a foreign key, list of the referenced columns
	ForeignUpdateType  string  `protobuf:"bytes,7,opt,name=foreign_update_type,json=foreignUpdateType,proto3" json:"foreign_update_type,omitempty"`     // Foreign key update action code: a = no action, r = restrict, c = cascade, n = set null, d = set default
	ForeignDeleteType  string  `protobuf:"bytes,8,opt,name=foreign_delete_type,json=foreignDeleteType,proto3" json:"foreign_delete_type,omitempty"`     // Foreign key deletion action code: a = no action, r = restrict, c = cascade, n = set null, d = set default
	ForeignMatchType   string  `protobuf:"bytes,9,opt,name=foreign_match_type,json=foreignMatchType,proto3" json:"foreign_match_type,omitempty"`        // Foreign key match type: f = full, p = partial, s = simple
}

func (x *RelationInformation_Constraint) Reset() {
	*x = RelationInformation_Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationInformation_Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationInformation_Constraint) ProtoMessage() {}

func (x *RelationInformation_Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationInformation_Constraint.ProtoReflect.Descriptor instead.
func (*RelationInformation_Constraint) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{18, 3}
}

func (x *RelationInformation_Constraint) GetForeignRelationIdx() int32 {
	if x != nil {
		return x.ForeignRelationIdx
	}
	return 0
}

func (x *RelationInformation_Constraint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelationInformation_Constraint) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RelationInformation_Constraint) GetConstraintDef() string {
	if x != nil {
		return x.ConstraintDef
	}
	return ""
}

func (x *RelationInformation_Constraint) GetColumns() []int32 {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *RelationInformation_Constraint) GetForeignColumns() []int32 {
	if x != nil {
		return x.ForeignColumns
	}
	return nil
}

func (x *RelationInformation_Constraint) GetForeignUpdateType() string {
	if x != nil {
		return x.ForeignUpdateType
	}
	return ""
}

func (x *RelationInformation_Constraint) GetForeignDeleteType() string {
	if x != nil {
		return x.ForeignDeleteType
	}
	return ""
}

func (x *RelationInformation_Constraint) GetForeignMatchType() string {
	if x != nil {
		return x.ForeignMatchType
	}
	return ""
}

type CustomTypeInformation_CompositeAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CustomTypeInformation_CompositeAttr) Reset() {
	*x = CustomTypeInformation_CompositeAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_full_snapshot_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTypeInformation_CompositeAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTypeInformation_CompositeAttr) ProtoMessage() {}

func (x *CustomTypeInformation_CompositeAttr) ProtoReflect() protoreflect.Message {
	mi := &file_full_snapshot_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTypeInformation_CompositeAttr.ProtoReflect.Descriptor instead.
func (*CustomTypeInformation_CompositeAttr) Descriptor() ([]byte, []int) {
	return file_full_snapshot_proto_rawDescGZIP(), []int{25, 0}
}

func (x *CustomTypeInformation_CompositeAttr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomTypeInformation_CompositeAttr) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_full_snapshot_proto protoreflect.FileDescriptor

var file_full_snapshot_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x68, 0x61,
	0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x1d, 0x0a, 0x0c, 0x46, 0x75,
	0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6a, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x75,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52,
	0x75, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x73, 0x12, 0x3c,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x58, 0x0a, 0x13,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x67, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x4c, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x3c,
	0x0a, 0x1a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x1f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x26, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x4c, 0x6f, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x67, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x4f,
	0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x4b, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x72, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x13,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x67, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x67, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x11, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x6e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x15, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x6f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x74, 0x69, 0x63, 0x73, 0x18, 0x70,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x12, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x4f, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x18, 0x71, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x7a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0b, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x64, 0x0a, 0x18, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x7c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x16, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5e, 0x0a, 0x15, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x82,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x14, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x17, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x83, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18,
	0xc8, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x13,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0xc9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0xca, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0xcb,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x55, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xd3, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x69, 0x0a, 0x19, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xd5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x17, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x54, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x73, 0x18, 0xd6, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x15, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xdc, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0xdd, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x12, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0xdf, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x55, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x10, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0xe1, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5e, 0x0a, 0x15, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xe3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x13, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0xe4, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x12, 0x65, 0x0a, 0x18, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xe5, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xe6, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x78,
	0x10, 0x79, 0x4a, 0x04, 0x08, 0x79, 0x10, 0x7a, 0x4a, 0x06, 0x08, 0xde, 0x01, 0x10, 0xdf, 0x01,
	0x4a, 0x06, 0x08, 0xe2, 0x01, 0x10, 0xe3, 0x01, 0x22, 0xc6, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x1d, 0x0a, 0x0a, 0x67, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x1b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x18, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x48, 0x65, 0x61, 0x70, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x48, 0x65, 0x61, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x73, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x73, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x67, 0x6f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x6f, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x67, 0x6f, 0x5f, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x67, 0x6f, 0x43, 0x61, 0x6c, 0x6c,
	0x73, 0x22, 0xb0, 0x03, 0x0a, 0x0f, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x62, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x62, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x72, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x79, 0x70, 0x61, 0x73, 0x73, 0x52, 0x6c, 0x73, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x54, 0x0a, 0x14, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x22, 0xb8, 0x03, 0x0a, 0x13, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x78, 0x12,
	0x24, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x49, 0x64, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x63,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x78, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x58, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x78, 0x61, 0x63, 0x74, 0x5f,
	0x78, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x78, 0x61, 0x63, 0x74, 0x58, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x1c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22,
	0xc2, 0x01, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x78, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x78, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x69, 0x6e, 0x6d, 0x78, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x6d, 0x78, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x78, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x78, 0x61, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x22, 0x9c, 0x03, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x58, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x78,
	0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x58, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x78, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x78, 0x6d, 0x69,
	0x6e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12,
	0x41, 0x0a, 0x1d, 0x78, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1a, 0x78, 0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x50, 0x0a, 0x25, 0x78, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x6c, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x21, 0x78, 0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x78, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x78, 0x61,
	0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x78, 0x6d, 0x69, 0x6e, 0x48, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x64, 0x58, 0x61, 0x63,
	0x74, 0x12, 0x30, 0x0a, 0x14, 0x78, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x78, 0x6d, 0x69, 0x6e, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x62, 0x79, 0x22, 0xb6, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x3e, 0x0a,
	0x0a, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x37, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x78, 0x12, 0x25, 0x0a,
	0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x80, 0x05, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x12, 0x32, 0x0a, 0x15, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x78, 0x6c, 0x6f, 0x67,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x58, 0x6c, 0x6f, 0x67, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x14, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x5f, 0x6c, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x70, 0x70,
	0x6c, 0x79, 0x42, 0x79, 0x74, 0x65, 0x4c, 0x61, 0x67, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41,
	0x67, 0x65, 0x22, 0x33, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x22, 0xdc, 0x02, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x62, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x49, 0x64, 0x78, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x79, 0x6e, 0x63, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x79, 0x6e,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x62, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x49, 0x64, 0x78, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x61,
	0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42,
	0x79, 0x74, 0x65, 0x4c, 0x61, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x4c, 0x61, 0x67, 0x22, 0x8b, 0x06, 0x0a,
	0x15, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61,
	0x73, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68,
	0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x78,
	0x12, 0x4d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x59, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x0c, 0x42,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x44,
	0x4c, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1f, 0x0a,
	0x1b, 0x49, 0x44, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x46, 0x41, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x22, 0xdf, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55,
	0x54, 0x4f, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45,
	0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54, 0x4f, 0x56, 0x41, 0x43, 0x55, 0x55,
	0x4d, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41,
	0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x57,
	0x41, 0x4c, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x41, 0x4c, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x57,
	0x41, 0x4c, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x10, 0x0a, 0x22, 0x29, 0x0a, 0x13, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x78, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xd3, 0x14, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x12,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x62, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x62, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x62, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x62, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x64, 0x62, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x62, 0x5f, 0x73, 0x73, 0x6c,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x62, 0x53, 0x73,
	0x6c, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x62, 0x5f, 0x68, 0x61, 0x73, 0x5f,
	0x73, 0x73, 0x6c, 0x72, 0x6f, 0x6f, 0x74, 0x63, 0x65, 0x72, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x10, 0x64, 0x62, 0x48, 0x61, 0x73, 0x53, 0x73, 0x6c, 0x72, 0x6f, 0x6f, 0x74, 0x63,
	0x65, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x62, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x73,
	0x6c, 0x63, 0x65, 0x72, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x64, 0x62, 0x48,
	0x61, 0x73, 0x53, 0x73, 0x6c, 0x63, 0x65, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x62, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x73, 0x73, 0x6c, 0x6b, 0x65, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x64, 0x62, 0x48, 0x61, 0x73, 0x53, 0x73, 0x6c, 0x6b, 0x65, 0x79, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x62, 0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x62, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x62,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x62,
	0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x64, 0x62, 0x41, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x77, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x77, 0x73, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x61,
	0x77, 0x73, 0x5f, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x44, 0x62, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x15, 0x61, 0x77, 0x73, 0x5f,
	0x68, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x77, 0x73, 0x48, 0x61, 0x73, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x61, 0x77,
	0x73, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x6f, 0x6c,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x77, 0x73, 0x48, 0x61, 0x73, 0x41,
	0x73, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x77, 0x73,
	0x5f, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x77, 0x73, 0x48, 0x61, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x1f, 0x61, 0x77, 0x73, 0x5f, 0x68, 0x61,
	0x73, 0x5f, 0x77, 0x65, 0x62, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1a, 0x61, 0x77, 0x73, 0x48, 0x61, 0x73, 0x57, 0x65, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x10, 0x61,
	0x77, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x61, 0x72, 0x6e, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x77, 0x73, 0x48, 0x61, 0x73, 0x52, 0x6f, 0x6c,
	0x65, 0x41, 0x72, 0x6e, 0x12, 0x29, 0x0a, 0x11, 0x61, 0x77, 0x73, 0x5f, 0x64, 0x62, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x77, 0x73, 0x44, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x61, 0x77, 0x73, 0x5f, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x61, 0x77, 0x73, 0x44, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f,
	0x64, 0x62, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x44, 0x62, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x7a, 0x75, 0x72, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x75, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x68, 0x75, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x7a, 0x75, 0x72, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x68, 0x75, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2b, 0x0a, 0x12, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x5f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x41, 0x64, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x12, 0x61, 0x7a, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x7a, 0x75, 0x72,
	0x65, 0x41, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61,
	0x7a, 0x75, 0x72, 0x65, 0x48, 0x61, 0x73, 0x41, 0x64, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x63, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x73, 0x71, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x45, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x67, 0x63, 0x70, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x73, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x67, 0x63, 0x70, 0x50, 0x75, 0x62, 0x73, 0x75, 0x62, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x18, 0x67, 0x63, 0x70, 0x5f, 0x68, 0x61, 0x73,
	0x5f, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x67, 0x63, 0x70, 0x48, 0x61, 0x73, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x63, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x79, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x49,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x67, 0x63, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x79, 0x64, 0x62,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x63, 0x70,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x79, 0x64, 0x62, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x67, 0x63, 0x70, 0x41,
	0x6c, 0x6c, 0x6f, 0x79, 0x64, 0x62, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x19, 0x63, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x79, 0x5f, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x4b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x72, 0x75, 0x6e, 0x63, 0x68, 0x79, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x69, 0x76, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x4f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x69, 0x76, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x69, 0x76, 0x65, 0x6e, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x69, 0x76, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x53, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70,
	0x69, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x70, 0x69, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x54, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x69, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x69, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x33, 0x0a, 0x16, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x56, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x61, 0x70, 0x69, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x46, 0x61, 0x6c,
	0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x57, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x70, 0x69, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x26,
	0x0a, 0x0f, 0x64, 0x62, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x62, 0x4c, 0x6f, 0x67, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x64, 0x62, 0x5f, 0x6c, 0x6f, 0x67,
	0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x5f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x62, 0x4c, 0x6f, 0x67, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x72, 0x54,
	0x61, 0x69, 0x6c, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x62, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x79,
	0x73, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x60, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x62, 0x4c, 0x6f, 0x67, 0x53, 0x79, 0x73, 0x6c, 0x6f, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x13, 0x64, 0x62, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x70,
	0x67, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x61, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x64, 0x62, 0x4c, 0x6f, 0x67, 0x50, 0x67, 0x52, 0x65, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x69, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x6a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x30, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x74,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x75, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x6d, 0x61, 0x78,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x69, 0x66, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x76, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x6b, 0x69, 0x70, 0x49, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x61, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68,
	0x61, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x45, 0x6e, 0x76,
	0x12, 0x2b, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x22, 0xee, 0x04,
	0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b,
	0x73, 0x44, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6b,
	0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x12, 0x26,
	0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c,
	0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x44, 0x69, 0x72,
	0x74, 0x69, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x62, 0x6c,
	0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x42, 0x6c, 0x6b, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x6d, 0x70,
	0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x65, 0x6d, 0x70, 0x42, 0x6c, 0x6b, 0x73, 0x57, 0x72, 0x69,
	0x74, 0x74, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x62, 0x6c, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x62, 0x6c, 0x6b,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x6c, 0x6b, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x62, 0x6c, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd5,
	0x01, 0x0a, 0x17, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63,
	0x73, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xb0, 0x10, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x78, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x0e, 0x76, 0x69, 0x65, 0x77, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x68, 0x61, 0x73, 0x5f, 0x6f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x68, 0x61, 0x73, 0x4f, 0x69, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x68, 0x61, 0x73, 0x5f,
	0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x68, 0x61, 0x73, 0x49,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72,
	0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x68, 0x61, 0x73, 0x54, 0x6f, 0x61, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x5f, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x6c, 0x79, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x4f,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12,
	0x2e, 0x0a, 0x13, 0x68, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x68, 0x61,
	0x73, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x12, 0x69,
	0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x13,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3e, 0x0a,
	0x0a, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x3a, 0x0a,
	0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xe1, 0x02, 0x0a, 0x06, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e,
	0x6f, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4f, 0x0a, 0x14,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x52, 0x11, 0x64, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x64, 0x78, 0x1a, 0xcb, 0x01,
	0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x46, 0x72, 0x61, 0x63, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x76, 0x67, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x61, 0x76, 0x67, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e,
	0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xde, 0x02, 0x0a, 0x0a,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e,
	0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2e,
	0x0a, 0x13, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x11,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x53, 0x48, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x22, 0xd9, 0x0b, 0x0a, 0x11, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x71, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0c,
	0x73, 0x65, 0x71, 0x5f, 0x74, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x54, 0x75, 0x70, 0x52, 0x65, 0x61, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x64, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x69, 0x64, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x64, 0x78,
	0x5f, 0x74, 0x75, 0x70, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x69, 0x64, 0x78, 0x54, 0x75, 0x70, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a,
	0x09, 0x6e, 0x5f, 0x74, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6e, 0x54, 0x75, 0x70, 0x49, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x09, 0x6e, 0x5f, 0x74,
	0x75, 0x70, 0x5f, 0x75, 0x70, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x54,
	0x75, 0x70, 0x55, 0x70, 0x64, 0x12, 0x1a, 0x0a, 0x09, 0x6e, 0x5f, 0x74, 0x75, 0x70, 0x5f, 0x64,
	0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x54, 0x75, 0x70, 0x44, 0x65,
	0x6c, 0x12, 0x21, 0x0a, 0x0d, 0x6e, 0x5f, 0x74, 0x75, 0x70, 0x5f, 0x68, 0x6f, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x54, 0x75, 0x70, 0x48, 0x6f,
	0x74, 0x55, 0x70, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x75, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x4c, 0x69, 0x76, 0x65, 0x54,
	0x75, 0x70, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x75, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x54, 0x75, 0x70,
	0x12, 0x2d, 0x0a, 0x13, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6e,
	0x4d, 0x6f, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12,
	0x2b, 0x0a, 0x12, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x76,
	0x61, 0x63, 0x75, 0x75, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x49, 0x6e,
	0x73, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x12, 0x24, 0x0a, 0x0e,
	0x68, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x70, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f,
	0x68, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x70, 0x42,
	0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x64, 0x78, 0x5f, 0x62, 0x6c,
	0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69,
	0x64, 0x78, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x64,
	0x78, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x69, 0x64, 0x78, 0x42, 0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6b, 0x73,
	0x52, 0x65, 0x61, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c,
	0x6b, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x6f,
	0x61, 0x73, 0x74, 0x42, 0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69,
	0x64, 0x78, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x74, 0x69, 0x64, 0x78, 0x42, 0x6c, 0x6b, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x74, 0x69, 0x64, 0x78, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x68, 0x69,
	0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x64, 0x78, 0x42, 0x6c, 0x6b,
	0x73, 0x48, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x74, 0x6f, 0x61, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x43,
	0x0a, 0x0b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x78, 0x69, 0x64,
	0x5f, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x78, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x6d,
	0x78, 0x69, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x6d, 0x78, 0x69, 0x64, 0x41, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x6c,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x6c,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6c, 0x74, 0x75, 0x70, 0x6c,
	0x65, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x74, 0x75, 0x70,
	0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x6c, 0x6c, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x6c, 0x6c, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x78, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x78, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x6c, 0x6d, 0x69, 0x6e, 0x6d, 0x78, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x6d, 0x69, 0x6e, 0x6d, 0x78, 0x69, 0x64, 0x12, 0x43, 0x0a,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x63, 0x75,
	0x75, 0x6d, 0x12, 0x4b, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x76,
	0x61, 0x63, 0x75, 0x75, 0x6d, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x67,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x12,
	0x45, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x18,
	0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x6c, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x74, 0x6f, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6c,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0xc0, 0x02, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6f,
	0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x55, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x4e, 0x41,
	0x4c, 0x59, 0x5a, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41,
	0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x45, 0x10, 0x03, 0x22, 0xe7, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x5f, 0x64, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x44, 0x65, 0x66, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70,
	0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49,
	0x64, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x78, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x64, 0x78, 0x53, 0x63, 0x61, 0x6e, 0x12, 0x20, 0x0a, 0x0c,
	0x69, 0x64, 0x78, 0x5f, 0x74, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x69, 0x64, 0x78, 0x54, 0x75, 0x70, 0x52, 0x65, 0x61, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x64, 0x78, 0x5f, 0x74, 0x75, 0x70, 0x5f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x64, 0x78, 0x54, 0x75, 0x70, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x64, 0x78, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x64, 0x78, 0x42, 0x6c,
	0x6b, 0x73, 0x52, 0x65, 0x61, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x64, 0x78, 0x5f, 0x62, 0x6c,
	0x6b, 0x73, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x64,
	0x78, 0x42, 0x6c, 0x6b, 0x73, 0x48, 0x69, 0x74, 0x22, 0xaf, 0x04, 0x0a, 0x13, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x62, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x65, 0x61, 0x6b, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x6b,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x73, 0x53, 0x65, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x76, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x53, 0x0a, 0x0c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0x04, 0x22, 0x88, 0x01, 0x0a, 0x11, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x66, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf4, 0x04, 0x0a, 0x15, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x6e, 0x75, 0x6c, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x6f,
	0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x61, 0x0a,
	0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72, 0x73,
	0x12, 0x2d, 0x0a, 0x12, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x1a,
	0x37, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x41, 0x74, 0x74, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f,
	0x4d, 0x41, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12,
	0x0a, 0x0a, 0x06, 0x50, 0x53, 0x45, 0x55, 0x44, 0x4f, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x42, 0x3b, 0x5a, 0x39,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x67, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_full_snapshot_proto_rawDescOnce sync.Once
	file_full_snapshot_proto_rawDescData = file_full_snapshot_proto_rawDesc
)

func file_full_snapshot_proto_rawDescGZIP() []byte {
	file_full_snapshot_proto_rawDescOnce.Do(func() {
		file_full_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_full_snapshot_proto_rawDescData)
	})
	return file_full_snapshot_proto_rawDescData
}

var file_full_snapshot_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_full_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_full_snapshot_proto_goTypes = []interface{}{
	(BackendCountStatistic_BackendState)(0),     // 0: pganalyze.collector.BackendCountStatistic.BackendState
	(BackendCountStatistic_BackendType)(0),      // 1: pganalyze.collector.BackendCountStatistic.BackendType
	(RelationInformation_PartitionStrategy)(0),  // 2: pganalyze.collector.RelationInformation.PartitionStrategy
	(RelationEvent_EventType)(0),                // 3: pganalyze.collector.RelationEvent.EventType
	(FunctionInformation_FunctionKind)(0),       // 4: pganalyze.collector.FunctionInformation.FunctionKind
	(CustomTypeInformation_Type)(0),             // 5: pganalyze.collector.CustomTypeInformation.Type
	(*FullSnapshot)(nil),                        // 6: pganalyze.collector.FullSnapshot
	(*CollectorStatistic)(nil),                  // 7: pganalyze.collector.CollectorStatistic
	(*RoleInformation)(nil),                     // 8: pganalyze.collector.RoleInformation
	(*DatabaseInformation)(nil),                 // 9: pganalyze.collector.DatabaseInformation
	(*DatabaseStatistic)(nil),                   // 10: pganalyze.collector.DatabaseStatistic
	(*ServerStatistic)(nil),                     // 11: pganalyze.collector.ServerStatistic
	(*Setting)(nil),                             // 12: pganalyze.collector.Setting
	(*Extension)(nil),                           // 13: pganalyze.collector.Extension
	(*Replication)(nil),                         // 14: pganalyze.collector.Replication
	(*StandbyReference)(nil),                    // 15: pganalyze.collector.StandbyReference
	(*StandbyInformation)(nil),                  // 16: pganalyze.collector.StandbyInformation
	(*StandbyStatistic)(nil),                    // 17: pganalyze.collector.StandbyStatistic
	(*BackendCountStatistic)(nil),               // 18: pganalyze.collector.BackendCountStatistic
	(*TablespaceReference)(nil),                 // 19: pganalyze.collector.TablespaceReference
	(*TablespaceInformation)(nil),               // 20: pganalyze.collector.TablespaceInformation
	(*CollectorConfig)(nil),                     // 21: pganalyze.collector.CollectorConfig
	(*QueryStatistic)(nil),                      // 22: pganalyze.collector.QueryStatistic
	(*HistoricQueryStatistics)(nil),             // 23: pganalyze.collector.HistoricQueryStatistics
	(*RelationInformation)(nil),                 // 24: pganalyze.collector.RelationInformation
	(*RelationStatistic)(nil),                   // 25: pganalyze.collector.RelationStatistic
	(*RelationEvent)(nil),                       // 26: pganalyze.collector.RelationEvent
	(*IndexInformation)(nil),                    // 27: pganalyze.collector.IndexInformation
	(*IndexStatistic)(nil),                      // 28: pganalyze.collector.IndexStatistic
	(*FunctionInformation)(nil),                 // 29: pganalyze.collector.FunctionInformation
	(*FunctionStatistic)(nil),                   // 30: pganalyze.collector.FunctionStatistic
	(*CustomTypeInformation)(nil),               // 31: pganalyze.collector.CustomTypeInformation
	nil,                                         // 32: pganalyze.collector.RelationInformation.OptionsEntry
	(*RelationInformation_Column)(nil),          // 33: pganalyze.collector.RelationInformation.Column
	(*RelationInformation_ColumnStatistic)(nil), // 34: pganalyze.collector.RelationInformation.ColumnStatistic
	(*RelationInformation_Constraint)(nil),      // 35: pganalyze.collector.RelationInformation.Constraint
	(*CustomTypeInformation_CompositeAttr)(nil), // 36: pganalyze.collector.CustomTypeInformation.CompositeAttr
	(*timestamppb.Timestamp)(nil),               // 37: google.protobuf.Timestamp
	(*System)(nil),                              // 38: pganalyze.collector.System
	(*PostgresVersion)(nil),                     // 39: pganalyze.collector.PostgresVersion
	(*RoleReference)(nil),                       // 40: pganalyze.collector.RoleReference
	(*DatabaseReference)(nil),                   // 41: pganalyze.collector.DatabaseReference
	(*QueryReference)(nil),                      // 42: pganalyze.collector.QueryReference
	(*RelationReference)(nil),                   // 43: pganalyze.collector.RelationReference
	(*IndexReference)(nil),                      // 44: pganalyze.collector.IndexReference
	(*FunctionReference)(nil),                   // 45: pganalyze.collector.FunctionReference
	(*QueryInformation)(nil),                    // 46: pganalyze.collector.QueryInformation
	(*QueryExplainInformation)(nil),             // 47: pganalyze.collector.QueryExplainInformation
	(*NullTimestamp)(nil),                       // 48: pganalyze.collector.NullTimestamp
	(*NullString)(nil),                          // 49: pganalyze.collector.NullString
	(*NullInt32)(nil),                           // 50: pganalyze.collector.NullInt32
	(*NullDouble)(nil),                          // 51: pganalyze.collector.NullDouble
}
var file_full_snapshot_proto_depIdxs = []int32{
	37, // 0: pganalyze.collector.FullSnapshot.collected_at:type_name -> google.protobuf.Timestamp
	21, // 1: pganalyze.collector.FullSnapshot.config:type_name -> pganalyze.collector.CollectorConfig
	7,  // 2: pganalyze.collector.FullSnapshot.collector_statistic:type_name -> pganalyze.collector.CollectorStatistic
	37, // 3: pganalyze.collector.FullSnapshot.collector_started_at:type_name -> google.protobuf.Timestamp
	38, // 4: pganalyze.collector.FullSnapshot.system:type_name -> pganalyze.collector.System
	39, // 5: pganalyze.collector.FullSnapshot.postgres_version:type_name -> pganalyze.collector.PostgresVersion
	40, // 6: pganalyze.collector.FullSnapshot.role_references:type_name -> pganalyze.collector.RoleReference
	41, // 7: pganalyze.collector.FullSnapshot.database_references:type_name -> pganalyze.collector.DatabaseReference
	8,  // 8: pganalyze.collector.FullSnapshot.role_informations:type_name -> pganalyze.collector.RoleInformation
	9,  // 9: pganalyze.collector.FullSnapshot.database_informations:type_name -> pganalyze.collector.DatabaseInformation
	10, // 10: pganalyze.collector.FullSnapshot.database_statictics:type_name -> pganalyze.collector.DatabaseStatistic
	11, // 11: pganalyze.collector.FullSnapshot.server_statistic:type_name -> pganalyze.collector.ServerStatistic
	12, // 12: pganalyze.collector.FullSnapshot.settings:type_name -> pganalyze.collector.Setting
	14, // 13: pganalyze.collector.FullSnapshot.replication:type_name -> pganalyze.collector.Replication
	18, // 14: pganalyze.collector.FullSnapshot.backend_count_statistics:type_name -> pganalyze.collector.BackendCountStatistic
	19, // 15: pganalyze.collector.FullSnapshot.tablespace_references:type_name -> pganalyze.collector.TablespaceReference
	20, // 16: pganalyze.collector.FullSnapshot.tablespace_informations:type_name -> pganalyze.collector.TablespaceInformation
	42, // 17: pganalyze.collector.FullSnapshot.query_references:type_name -> pganalyze.collector.QueryReference
	43, // 18: pganalyze.collector.FullSnapshot.relation_references:type_name -> pganalyze.collector.RelationReference
	44, // 19: pganalyze.collector.FullSnapshot.index_references:type_name -> pganalyze.collector.IndexReference
	45, // 20: pganalyze.collector.FullSnapshot.function_references:type_name -> pganalyze.collector.FunctionReference
	46, // 21: pganalyze.collector.FullSnapshot.query_informations:type_name -> pganalyze.collector.QueryInformation
	22, // 22: pganalyze.collector.FullSnapshot.query_statistics:type_name -> pganalyze.collector.QueryStatistic
	23, // 23: pganalyze.collector.FullSnapshot.historic_query_statistics:type_name -> pganalyze.collector.HistoricQueryStatistics
	47, // 24: pganalyze.collector.FullSnapshot.query_explains:type_name -> pganalyze.collector.QueryExplainInformation
	24, // 25: pganalyze.collector.FullSnapshot.relation_informations:type_name -> pganalyze.collector.RelationInformation
	25, // 26: pganalyze.collector.FullSnapshot.relation_statistics:type_name -> pganalyze.collector.RelationStatistic
	26, // 27: pganalyze.collector.FullSnapshot.relation_events:type_name -> pganalyze.collector.RelationEvent
	27, // 28: pganalyze.collector.FullSnapshot.index_informations:type_name -> pganalyze.collector.IndexInformation
	28, // 29: pganalyze.collector.FullSnapshot.index_statistics:type_name -> pganalyze.collector.IndexStatistic
	29, // 30: pganalyze.collector.FullSnapshot.function_informations:type_name -> pganalyze.collector.FunctionInformation
	30, // 31: pganalyze.collector.FullSnapshot.function_statistics:type_name -> pganalyze.collector.FunctionStatistic
	31, // 32: pganalyze.collector.FullSnapshot.custom_type_informations:type_name -> pganalyze.collector.CustomTypeInformation
	13, // 33: pganalyze.collector.FullSnapshot.extensions:type_name -> pganalyze.collector.Extension
	48, // 34: pganalyze.collector.RoleInformation.password_valid_until:type_name -> pganalyze.collector.NullTimestamp
	49, // 35: pganalyze.collector.Setting.unit:type_name -> pganalyze.collector.NullString
	49, // 36: pganalyze.collector.Setting.boot_value:type_name -> pganalyze.collector.NullString
	49, // 37: pganalyze.collector.Setting.reset_value:type_name -> pganalyze.collector.NullString
	49, // 38: pganalyze.collector.Setting.source:type_name -> pganalyze.collector.NullString
	49, // 39: pganalyze.collector.Setting.source_file:type_name -> pganalyze.collector.NullString
	49, // 40: pganalyze.collector.Setting.source_line:type_name -> pganalyze.collector.NullString
	15, // 41: pganalyze.collector.Replication.standby_references:type_name -> pganalyze.collector.StandbyReference
	16, // 42: pganalyze.collector.Replication.standby_informations:type_name -> pganalyze.collector.StandbyInformation
	17, // 43: pganalyze.collector.Replication.standby_statistics:type_name -> pganalyze.collector.StandbyStatistic
	37, // 44: pganalyze.collector.Replication.replay_timestamp:type_name -> google.protobuf.Timestamp
	37, // 45: pganalyze.collector.StandbyInformation.backend_start:type_name -> google.protobuf.Timestamp
	0,  // 46: pganalyze.collector.BackendCountStatistic.state:type_name -> pganalyze.collector.BackendCountStatistic.BackendState
	1,  // 47: pganalyze.collector.BackendCountStatistic.backend_type:type_name -> pganalyze.collector.BackendCountStatistic.BackendType
	37, // 48: pganalyze.collector.HistoricQueryStatistics.collected_at:type_name -> google.protobuf.Timestamp
	22, // 49: pganalyze.collector.HistoricQueryStatistics.statistics:type_name -> pganalyze.collector.QueryStatistic
	49, // 50: pganalyze.collector.RelationInformation.view_definition:type_name -> pganalyze.collector.NullString
	33, // 51: pganalyze.collector.RelationInformation.columns:type_name -> pganalyze.collector.RelationInformation.Column
	35, // 52: pganalyze.collector.RelationInformation.constraints:type_name -> pganalyze.collector.RelationInformation.Constraint
	32, // 53: pganalyze.collector.RelationInformation.options:type_name -> pganalyze.collector.RelationInformation.OptionsEntry
	2,  // 54: pganalyze.collector.RelationInformation.partition_strategy:type_name -> pganalyze.collector.RelationInformation.PartitionStrategy
	49, // 55: pganalyze.collector.RelationInformation.toast_name:type_name -> pganalyze.collector.NullString
	48, // 56: pganalyze.collector.RelationStatistic.analyzed_at:type_name -> pganalyze.collector.NullTimestamp
	48, // 57: pganalyze.collector.RelationStatistic.last_vacuum:type_name -> pganalyze.collector.NullTimestamp
	48, // 58: pganalyze.collector.RelationStatistic.last_autovacuum:type_name -> pganalyze.collector.NullTimestamp
	48, // 59: pganalyze.collector.RelationStatistic.last_analyze:type_name -> pganalyze.collector.NullTimestamp
	48, // 60: pganalyze.collector.RelationStatistic.last_autoanalyze:type_name -> pganalyze.collector.NullTimestamp
	3,  // 61: pganalyze.collector.RelationEvent.type:type_name -> pganalyze.collector.RelationEvent.EventType
	37, // 62: pganalyze.collector.RelationEvent.occurred_at:type_name -> google.protobuf.Timestamp
	49, // 63: pganalyze.collector.IndexInformation.constraint_def:type_name -> pganalyze.collector.NullString
	4,  // 64: pganalyze.collector.FunctionInformation.kind:type_name -> pganalyze.collector.FunctionInformation.FunctionKind
	5,  // 65: pganalyze.collector.CustomTypeInformation.type:type_name -> pganalyze.collector.CustomTypeInformation.Type
	36, // 66: pganalyze.collector.CustomTypeInformation.composite_attrs:type_name -> pganalyze.collector.CustomTypeInformation.CompositeAttr
	49, // 67: pganalyze.collector.RelationInformation.Column.default_value:type_name -> pganalyze.collector.NullString
	34, // 68: pganalyze.collector.RelationInformation.Column.statistics:type_name -> pganalyze.collector.RelationInformation.ColumnStatistic
	50, // 69: pganalyze.collector.RelationInformation.Column.data_type_custom_idx:type_name -> pganalyze.collector.NullInt32
	51, // 70: pganalyze.collector.RelationInformation.ColumnStatistic.correlation:type_name -> pganalyze.collector.NullDouble
	71, // [71:71] is the sub-list for method output_type
	71, // [71:71] is the sub-list for method input_type
	71, // [71:71] is the sub-list for extension type_name
	71, // [71:71] is the sub-list for extension extendee
	0,  // [0:71] is the sub-list for field type_name
}

func init() { file_full_snapshot_proto_init() }
func file_full_snapshot_proto_init() {
	if File_full_snapshot_proto != nil {
		return
	}
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_full_snapshot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Replication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandbyReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandbyInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandbyStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackendCountStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TablespaceReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TablespaceInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricQueryStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTypeInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationInformation_Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationInformation_ColumnStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationInformation_Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_full_snapshot_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTypeInformation_CompositeAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_full_snapshot_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_full_snapshot_proto_goTypes,
		DependencyIndexes: file_full_snapshot_proto_depIdxs,
		EnumInfos:         file_full_snapshot_proto_enumTypes,
		MessageInfos:      file_full_snapshot_proto_msgTypes,
	}.Build()
	File_full_snapshot_proto = out.File
	file_full_snapshot_proto_rawDesc = nil
	file_full_snapshot_proto_goTypes = nil
	file_full_snapshot_proto_depIdxs = nil
}
