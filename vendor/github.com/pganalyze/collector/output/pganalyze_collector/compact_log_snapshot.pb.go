// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.14.0
// source: compact_log_snapshot.proto

package pganalyze_collector

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogFileReference_LogSecretKind int32

const (
	LogFileReference_CREDENTIAL_LOG_SECRET          LogFileReference_LogSecretKind = 0
	LogFileReference_PARSING_ERROR_LOG_SECRET       LogFileReference_LogSecretKind = 1
	LogFileReference_STATEMENT_TEXT_LOG_SECRET      LogFileReference_LogSecretKind = 2
	LogFileReference_STATEMENT_PARAMETER_LOG_SECRET LogFileReference_LogSecretKind = 3
	LogFileReference_TABLE_DATA_LOG_SECRET          LogFileReference_LogSecretKind = 4
	LogFileReference_OPS_LOG_SECRET                 LogFileReference_LogSecretKind = 5
	LogFileReference_UNIDENTIFIED_LOG_SECRET        LogFileReference_LogSecretKind = 6
)

// Enum value maps for LogFileReference_LogSecretKind.
var (
	LogFileReference_LogSecretKind_name = map[int32]string{
		0: "CREDENTIAL_LOG_SECRET",
		1: "PARSING_ERROR_LOG_SECRET",
		2: "STATEMENT_TEXT_LOG_SECRET",
		3: "STATEMENT_PARAMETER_LOG_SECRET",
		4: "TABLE_DATA_LOG_SECRET",
		5: "OPS_LOG_SECRET",
		6: "UNIDENTIFIED_LOG_SECRET",
	}
	LogFileReference_LogSecretKind_value = map[string]int32{
		"CREDENTIAL_LOG_SECRET":          0,
		"PARSING_ERROR_LOG_SECRET":       1,
		"STATEMENT_TEXT_LOG_SECRET":      2,
		"STATEMENT_PARAMETER_LOG_SECRET": 3,
		"TABLE_DATA_LOG_SECRET":          4,
		"OPS_LOG_SECRET":                 5,
		"UNIDENTIFIED_LOG_SECRET":        6,
	}
)

func (x LogFileReference_LogSecretKind) Enum() *LogFileReference_LogSecretKind {
	p := new(LogFileReference_LogSecretKind)
	*p = x
	return p
}

func (x LogFileReference_LogSecretKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogFileReference_LogSecretKind) Descriptor() protoreflect.EnumDescriptor {
	return file_compact_log_snapshot_proto_enumTypes[0].Descriptor()
}

func (LogFileReference_LogSecretKind) Type() protoreflect.EnumType {
	return &file_compact_log_snapshot_proto_enumTypes[0]
}

func (x LogFileReference_LogSecretKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogFileReference_LogSecretKind.Descriptor instead.
func (LogFileReference_LogSecretKind) EnumDescriptor() ([]byte, []int) {
	return file_compact_log_snapshot_proto_rawDescGZIP(), []int{1, 0}
}

type LogLineInformation_LogLevel int32

const (
	LogLineInformation_UNKNOWN LogLineInformation_LogLevel = 0
	// Postgres log levels https://www.postgresql.org/docs/9.6/static/runtime-config-logging.html#RUNTIME-CONFIG-SEVERITY-LEVELS
	LogLineInformation_DEBUG   LogLineInformation_LogLevel = 1 // Provides successively-more-detailed information for use by developers.
	LogLineInformation_INFO    LogLineInformation_LogLevel = 2 // Provides information implicitly requested by the user, e.g., output from VACUUM VERBOSE.
	LogLineInformation_NOTICE  LogLineInformation_LogLevel = 3 // Provides information that might be helpful to users, e.g., notice of truncation of long identifiers.
	LogLineInformation_WARNING LogLineInformation_LogLevel = 4 // Provides warnings of likely problems, e.g., COMMIT outside a transaction block.
	LogLineInformation_ERROR   LogLineInformation_LogLevel = 5 // Reports an error that caused the current command to abort.
	LogLineInformation_LOG     LogLineInformation_LogLevel = 6 // Reports information of interest to administrators, e.g., checkpoint activity.
	LogLineInformation_FATAL   LogLineInformation_LogLevel = 7 // Reports an error that caused the current session to abort.
	LogLineInformation_PANIC   LogLineInformation_LogLevel = 8 // Reports an error that caused all database sessions to abort.
	// These levels are typically only used in additional lines for context
	LogLineInformation_DETAIL    LogLineInformation_LogLevel = 9
	LogLineInformation_HINT      LogLineInformation_LogLevel = 10
	LogLineInformation_CONTEXT   LogLineInformation_LogLevel = 11
	LogLineInformation_STATEMENT LogLineInformation_LogLevel = 12
	LogLineInformation_QUERY     LogLineInformation_LogLevel = 13 // This is specific to PL/pgSQL
)

// Enum value maps for LogLineInformation_LogLevel.
var (
	LogLineInformation_LogLevel_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "DEBUG",
		2:  "INFO",
		3:  "NOTICE",
		4:  "WARNING",
		5:  "ERROR",
		6:  "LOG",
		7:  "FATAL",
		8:  "PANIC",
		9:  "DETAIL",
		10: "HINT",
		11: "CONTEXT",
		12: "STATEMENT",
		13: "QUERY",
	}
	LogLineInformation_LogLevel_value = map[string]int32{
		"UNKNOWN":   0,
		"DEBUG":     1,
		"INFO":      2,
		"NOTICE":    3,
		"WARNING":   4,
		"ERROR":     5,
		"LOG":       6,
		"FATAL":     7,
		"PANIC":     8,
		"DETAIL":    9,
		"HINT":      10,
		"CONTEXT":   11,
		"STATEMENT": 12,
		"QUERY":     13,
	}
)

func (x LogLineInformation_LogLevel) Enum() *LogLineInformation_LogLevel {
	p := new(LogLineInformation_LogLevel)
	*p = x
	return p
}

func (x LogLineInformation_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLineInformation_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_compact_log_snapshot_proto_enumTypes[1].Descriptor()
}

func (LogLineInformation_LogLevel) Type() protoreflect.EnumType {
	return &file_compact_log_snapshot_proto_enumTypes[1]
}

func (x LogLineInformation_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLineInformation_LogLevel.Descriptor instead.
func (LogLineInformation_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_compact_log_snapshot_proto_rawDescGZIP(), []int{2, 0}
}

type LogLineInformation_LogClassification int32

const (
	LogLineInformation_UNKNOWN_LOG_CLASSIFICATION LogLineInformation_LogClassification = 0
	// Server events
	LogLineInformation_SERVER_CRASHED                 LogLineInformation_LogClassification = 1  // "Segmentation fault", "was terminated by signal 6", "was terminated by signal 11"
	LogLineInformation_SERVER_START                   LogLineInformation_LogClassification = 2  // "database system is ready", "entering standby mode", "database system was shut down"
	LogLineInformation_SERVER_START_RECOVERING        LogLineInformation_LogClassification = 3  // "database system was interrupted", "database system was not properly shut down"
	LogLineInformation_SERVER_SHUTDOWN                LogLineInformation_LogClassification = 4  // "received ... shutdown request", "aborting any active transactions"
	LogLineInformation_SERVER_OUT_OF_MEMORY           LogLineInformation_LogClassification = 5  // "out of memory"
	LogLineInformation_SERVER_INVALID_CHECKSUM        LogLineInformation_LogClassification = 6  // "page verification failed", "invalid page in block"
	LogLineInformation_SERVER_TEMP_FILE_CREATED       LogLineInformation_LogClassification = 7  // "temporary file: "
	LogLineInformation_SERVER_MISC                    LogLineInformation_LogClassification = 8  // "could not open usermap file", "could not link file", "unexpected pageaddr"
	LogLineInformation_SERVER_RELOAD                  LogLineInformation_LogClassification = 9  // "received SIGHUP, reloading configuration files", config change related messages
	LogLineInformation_SERVER_PROCESS_EXITED          LogLineInformation_LogClassification = 10 // "worker process: parallel worker for PID ... (PID ...) exited with exit code ..."
	LogLineInformation_SERVER_STATS_COLLECTOR_TIMEOUT LogLineInformation_LogClassification = 11 // "using stale statistics instead of current ones because stats collector is not responding", "pgstat wait timeout"
	// Connection-related
	LogLineInformation_CONNECTION_RECEIVED                 LogLineInformation_LogClassification = 20 // "connection received: "
	LogLineInformation_CONNECTION_AUTHORIZED               LogLineInformation_LogClassification = 21 // "connection authorized: "
	LogLineInformation_CONNECTION_REJECTED                 LogLineInformation_LogClassification = 22 // "pg_hba.conf rejects connection", "is not currently accepting connections", "password authentication failed", "role ... is not permitted to log in"
	LogLineInformation_CONNECTION_DISCONNECTED             LogLineInformation_LogClassification = 23 // "disconnection: "
	LogLineInformation_CONNECTION_CLIENT_FAILED_TO_CONNECT LogLineInformation_LogClassification = 24 // "incomplete startup packet"
	LogLineInformation_CONNECTION_LOST                     LogLineInformation_LogClassification = 25 // "connection to client lost", "could not receive data from client", "terminating connection because protocol synchronization was lost", "could not send data to client"
	LogLineInformation_CONNECTION_LOST_OPEN_TX             LogLineInformation_LogClassification = 26 // "unexpected EOF on client connection with an open transaction"
	LogLineInformation_CONNECTION_TERMINATED               LogLineInformation_LogClassification = 27 // "terminating connection due to administrator command"
	LogLineInformation_OUT_OF_CONNECTIONS                  LogLineInformation_LogClassification = 28 // "remaining connection slots are reserved for non-replication superuser connections"
	LogLineInformation_TOO_MANY_CONNECTIONS_ROLE           LogLineInformation_LogClassification = 29 // "too many connections for role"
	LogLineInformation_COULD_NOT_ACCEPT_SSL_CONNECTION     LogLineInformation_LogClassification = 30 // "could not accept SSL connection: ..."
	LogLineInformation_PROTOCOL_ERROR_UNSUPPORTED_VERSION  LogLineInformation_LogClassification = 31 // "unsupported frontend protocol ...: server supports ... to ..."
	LogLineInformation_PROTOCOL_ERROR_INCOMPLETE_MESSAGE   LogLineInformation_LogClassification = 32 // "incomplete message from client"
	LogLineInformation_TOO_MANY_CONNECTIONS_DATABASE       LogLineInformation_LogClassification = 33 // "too many connections for database"
	// Checkpointer related
	LogLineInformation_CHECKPOINT_STARTING     LogLineInformation_LogClassification = 40 // "checkpoint starting: "
	LogLineInformation_CHECKPOINT_COMPLETE     LogLineInformation_LogClassification = 41 // "checkpoint complete: "
	LogLineInformation_CHECKPOINT_TOO_FREQUENT LogLineInformation_LogClassification = 42 // "checkpoints are occurring too frequently"
	LogLineInformation_RESTARTPOINT_STARTING   LogLineInformation_LogClassification = 43 // "restartpoint starting: "
	LogLineInformation_RESTARTPOINT_COMPLETE   LogLineInformation_LogClassification = 44 // "restartpoint complete: "
	LogLineInformation_RESTARTPOINT_AT         LogLineInformation_LogClassification = 45 // "recovery restart point at"
	// WAL/Archiving
	LogLineInformation_WAL_INVALID_RECORD_LENGTH  LogLineInformation_LogClassification = 50 // "invalid record length"
	LogLineInformation_WAL_REDO                   LogLineInformation_LogClassification = 51 // "redo "
	LogLineInformation_WAL_ARCHIVE_COMMAND_FAILED LogLineInformation_LogClassification = 52 // "archive command failed"
	LogLineInformation_WAL_BASE_BACKUP_COMPLETE   LogLineInformation_LogClassification = 53 // "pg_stop_backup complete, all required WAL segments have been archived"
	// Autovacuum
	LogLineInformation_AUTOVACUUM_CANCEL                   LogLineInformation_LogClassification = 60 // "canceling autovacuum task"
	LogLineInformation_TXID_WRAPAROUND_WARNING             LogLineInformation_LogClassification = 61 // "database * must be vacuumed within"
	LogLineInformation_TXID_WRAPAROUND_ERROR               LogLineInformation_LogClassification = 62 // "database is not accepting commands to avoid wraparound data loss"
	LogLineInformation_AUTOVACUUM_LAUNCHER_STARTED         LogLineInformation_LogClassification = 63 // "autovacuum launcher started"
	LogLineInformation_AUTOVACUUM_LAUNCHER_SHUTTING_DOWN   LogLineInformation_LogClassification = 64 // "autovacuum launcher shutting down", "terminating autovacuum process due to administrator command"
	LogLineInformation_AUTOVACUUM_COMPLETED                LogLineInformation_LogClassification = 65 // "automatic vacuum of table"
	LogLineInformation_AUTOANALYZE_COMPLETED               LogLineInformation_LogClassification = 66 // "automatic analyze of table"
	LogLineInformation_SKIPPING_VACUUM_LOCK_NOT_AVAILABLE  LogLineInformation_LogClassification = 67 // "skipping vacuum of ... --- lock not available"
	LogLineInformation_SKIPPING_ANALYZE_LOCK_NOT_AVAILABLE LogLineInformation_LogClassification = 68 // "skipping analyze of ... --- lock not available"
	// Locks
	LogLineInformation_LOCK_ACQUIRED          LogLineInformation_LogClassification = 70 // "acquired *Lock"
	LogLineInformation_LOCK_WAITING           LogLineInformation_LogClassification = 71 // "still waiting for *Lock"
	LogLineInformation_LOCK_TIMEOUT           LogLineInformation_LogClassification = 72 // "canceling statement due to lock timeout"
	LogLineInformation_LOCK_DEADLOCK_DETECTED LogLineInformation_LogClassification = 73 // "process * detected deadlock while waiting"
	LogLineInformation_LOCK_DEADLOCK_AVOIDED  LogLineInformation_LogClassification = 74 // "process * avoided deadlock for *Lock"
	// Notices about statement execution
	LogLineInformation_STATEMENT_DURATION         LogLineInformation_LogClassification = 80 // "duration: "
	LogLineInformation_STATEMENT_CANCELED_TIMEOUT LogLineInformation_LogClassification = 81 // "canceling statement due to statement timeout"
	LogLineInformation_STATEMENT_CANCELED_USER    LogLineInformation_LogClassification = 82 // "canceling statement due to user request"
	LogLineInformation_STATEMENT_LOG              LogLineInformation_LogClassification = 83 // "statement: ", "execute ...:"
	LogLineInformation_STATEMENT_AUTO_EXPLAIN     LogLineInformation_LogClassification = 84 // "duration: ... plan: ..."
	// Standby
	LogLineInformation_STANDBY_RESTORED_WAL_FROM_ARCHIVE LogLineInformation_LogClassification = 90 // "restored log file * from archive"
	LogLineInformation_STANDBY_STARTED_STREAMING         LogLineInformation_LogClassification = 91 // "started streaming WAL"
	LogLineInformation_STANDBY_STREAMING_INTERRUPTED     LogLineInformation_LogClassification = 92 // "could not receive data from WAL stream"
	LogLineInformation_STANDBY_STOPPED_STREAMING         LogLineInformation_LogClassification = 93 // "terminating walreceiver process"
	LogLineInformation_STANDBY_CONSISTENT_RECOVERY_STATE LogLineInformation_LogClassification = 94 // "consistent recovery state reached at"
	LogLineInformation_STANDBY_STATEMENT_CANCELED        LogLineInformation_LogClassification = 95 // "canceling statement due to conflict with recovery"
	LogLineInformation_STANDBY_INVALID_TIMELINE          LogLineInformation_LogClassification = 96 // "according to history file, WAL location ... belongs to timeline X, but previous recovered WAL file came from timeline Y"
	// Constraint violations
	LogLineInformation_UNIQUE_CONSTRAINT_VIOLATION      LogLineInformation_LogClassification = 100 // "duplicate key value violates unique constraint"
	LogLineInformation_FOREIGN_KEY_CONSTRAINT_VIOLATION LogLineInformation_LogClassification = 101 // "update or delete on table ... violates foreign key constraint"
	LogLineInformation_NOT_NULL_CONSTRAINT_VIOLATION    LogLineInformation_LogClassification = 102 // "null value in column ... violates not-null constraint"
	LogLineInformation_CHECK_CONSTRAINT_VIOLATION       LogLineInformation_LogClassification = 103 // "new row for relation ... violates check constraint"
	LogLineInformation_EXCLUSION_CONSTRAINT_VIOLATION   LogLineInformation_LogClassification = 104 // "conflicting key value violates exclusion constraint"
	// Application errors
	LogLineInformation_SYNTAX_ERROR                        LogLineInformation_LogClassification = 110 // "syntax error at or near"
	LogLineInformation_INVALID_INPUT_SYNTAX                LogLineInformation_LogClassification = 111 // "invalid input syntax"
	LogLineInformation_VALUE_TOO_LONG_FOR_TYPE             LogLineInformation_LogClassification = 112 // "value too long for type"
	LogLineInformation_INVALID_VALUE                       LogLineInformation_LogClassification = 113 // "invalid value ... for ..."
	LogLineInformation_MALFORMED_ARRAY_LITERAL             LogLineInformation_LogClassification = 114 // "malformed array literal"
	LogLineInformation_SUBQUERY_MISSING_ALIAS              LogLineInformation_LogClassification = 115 // "subquery in FROM must have an alias"
	LogLineInformation_INSERT_TARGET_COLUMN_MISMATCH       LogLineInformation_LogClassification = 116 // "INSERT has more expressions than target columns"
	LogLineInformation_ANY_ALL_REQUIRES_ARRAY              LogLineInformation_LogClassification = 117 // "op ANY/ALL (array) requires array on right side"
	LogLineInformation_COLUMN_MISSING_FROM_GROUP_BY        LogLineInformation_LogClassification = 118 // "column ... must appear in the GROUP BY clause or be used in an aggregate function"
	LogLineInformation_RELATION_DOES_NOT_EXIST             LogLineInformation_LogClassification = 119 // "relation ... does not exist"
	LogLineInformation_COLUMN_DOES_NOT_EXIST               LogLineInformation_LogClassification = 120 // "column ... does not exist"
	LogLineInformation_OPERATOR_DOES_NOT_EXIST             LogLineInformation_LogClassification = 121 // "operator does not exist"
	LogLineInformation_COLUMN_REFERENCE_AMBIGUOUS          LogLineInformation_LogClassification = 122 // "column reference ... is ambiguous"
	LogLineInformation_PERMISSION_DENIED                   LogLineInformation_LogClassification = 123 // "permission denied for ..."
	LogLineInformation_TRANSACTION_IS_ABORTED              LogLineInformation_LogClassification = 124 // "current transaction is aborted, commands ignored until end of transaction block"
	LogLineInformation_ON_CONFLICT_NO_CONSTRAINT_MATCH     LogLineInformation_LogClassification = 125 // "there is no unique or exclusion constraint matching the ON CONFLICT specification"
	LogLineInformation_ON_CONFLICT_ROW_AFFECTED_TWICE      LogLineInformation_LogClassification = 126 // "ON CONFLICT DO UPDATE command cannot affect row a second time"
	LogLineInformation_COLUMN_CANNOT_BE_CAST               LogLineInformation_LogClassification = 127 // "column ... cannot be cast to type ..."
	LogLineInformation_DIVISION_BY_ZERO                    LogLineInformation_LogClassification = 128 // "division by zero"
	LogLineInformation_CANNOT_DROP                         LogLineInformation_LogClassification = 129 // "cannot drop ... because other objects depend on it"
	LogLineInformation_INTEGER_OUT_OF_RANGE                LogLineInformation_LogClassification = 130 // "integer out of range"
	LogLineInformation_INVALID_REGEXP                      LogLineInformation_LogClassification = 131 // "invalid regular expression: ..."
	LogLineInformation_PARAM_MISSING                       LogLineInformation_LogClassification = 132 // "there is no parameter $.. at character ..."
	LogLineInformation_FUNCTION_DOES_NOT_EXIST             LogLineInformation_LogClassification = 133 // "function ... does not exist"
	LogLineInformation_NO_SUCH_SAVEPOINT                   LogLineInformation_LogClassification = 134 // "no such savepoint"
	LogLineInformation_UNTERMINATED_QUOTED_STRING          LogLineInformation_LogClassification = 135 // "unterminated quoted string at or near ..."
	LogLineInformation_UNTERMINATED_QUOTED_IDENTIFIER      LogLineInformation_LogClassification = 136 // "unterminated quoted identifier at or near ..."
	LogLineInformation_INVALID_BYTE_SEQUENCE               LogLineInformation_LogClassification = 137 // "invalid byte sequence for encoding"
	LogLineInformation_COULD_NOT_SERIALIZE_REPEATABLE_READ LogLineInformation_LogClassification = 138 // "could not serialize access due to concurrent update"
	LogLineInformation_COULD_NOT_SERIALIZE_SERIALIZABLE    LogLineInformation_LogClassification = 139 // "could not serialize access due to read/write dependencies among transactions"
	LogLineInformation_INCONSISTENT_RANGE_BOUNDS           LogLineInformation_LogClassification = 140 // "range lower bound must be less than or equal to range upper bound"
	// Collector internal events
	LogLineInformation_PGA_COLLECTOR_IDENTIFY LogLineInformation_LogClassification = 1000 // "pganalyze-collector-identify: server1"
)

// Enum value maps for LogLineInformation_LogClassification.
var (
	LogLineInformation_LogClassification_name = map[int32]string{
		0:    "UNKNOWN_LOG_CLASSIFICATION",
		1:    "SERVER_CRASHED",
		2:    "SERVER_START",
		3:    "SERVER_START_RECOVERING",
		4:    "SERVER_SHUTDOWN",
		5:    "SERVER_OUT_OF_MEMORY",
		6:    "SERVER_INVALID_CHECKSUM",
		7:    "SERVER_TEMP_FILE_CREATED",
		8:    "SERVER_MISC",
		9:    "SERVER_RELOAD",
		10:   "SERVER_PROCESS_EXITED",
		11:   "SERVER_STATS_COLLECTOR_TIMEOUT",
		20:   "CONNECTION_RECEIVED",
		21:   "CONNECTION_AUTHORIZED",
		22:   "CONNECTION_REJECTED",
		23:   "CONNECTION_DISCONNECTED",
		24:   "CONNECTION_CLIENT_FAILED_TO_CONNECT",
		25:   "CONNECTION_LOST",
		26:   "CONNECTION_LOST_OPEN_TX",
		27:   "CONNECTION_TERMINATED",
		28:   "OUT_OF_CONNECTIONS",
		29:   "TOO_MANY_CONNECTIONS_ROLE",
		30:   "COULD_NOT_ACCEPT_SSL_CONNECTION",
		31:   "PROTOCOL_ERROR_UNSUPPORTED_VERSION",
		32:   "PROTOCOL_ERROR_INCOMPLETE_MESSAGE",
		33:   "TOO_MANY_CONNECTIONS_DATABASE",
		40:   "CHECKPOINT_STARTING",
		41:   "CHECKPOINT_COMPLETE",
		42:   "CHECKPOINT_TOO_FREQUENT",
		43:   "RESTARTPOINT_STARTING",
		44:   "RESTARTPOINT_COMPLETE",
		45:   "RESTARTPOINT_AT",
		50:   "WAL_INVALID_RECORD_LENGTH",
		51:   "WAL_REDO",
		52:   "WAL_ARCHIVE_COMMAND_FAILED",
		53:   "WAL_BASE_BACKUP_COMPLETE",
		60:   "AUTOVACUUM_CANCEL",
		61:   "TXID_WRAPAROUND_WARNING",
		62:   "TXID_WRAPAROUND_ERROR",
		63:   "AUTOVACUUM_LAUNCHER_STARTED",
		64:   "AUTOVACUUM_LAUNCHER_SHUTTING_DOWN",
		65:   "AUTOVACUUM_COMPLETED",
		66:   "AUTOANALYZE_COMPLETED",
		67:   "SKIPPING_VACUUM_LOCK_NOT_AVAILABLE",
		68:   "SKIPPING_ANALYZE_LOCK_NOT_AVAILABLE",
		70:   "LOCK_ACQUIRED",
		71:   "LOCK_WAITING",
		72:   "LOCK_TIMEOUT",
		73:   "LOCK_DEADLOCK_DETECTED",
		74:   "LOCK_DEADLOCK_AVOIDED",
		80:   "STATEMENT_DURATION",
		81:   "STATEMENT_CANCELED_TIMEOUT",
		82:   "STATEMENT_CANCELED_USER",
		83:   "STATEMENT_LOG",
		84:   "STATEMENT_AUTO_EXPLAIN",
		90:   "STANDBY_RESTORED_WAL_FROM_ARCHIVE",
		91:   "STANDBY_STARTED_STREAMING",
		92:   "STANDBY_STREAMING_INTERRUPTED",
		93:   "STANDBY_STOPPED_STREAMING",
		94:   "STANDBY_CONSISTENT_RECOVERY_STATE",
		95:   "STANDBY_STATEMENT_CANCELED",
		96:   "STANDBY_INVALID_TIMELINE",
		100:  "UNIQUE_CONSTRAINT_VIOLATION",
		101:  "FOREIGN_KEY_CONSTRAINT_VIOLATION",
		102:  "NOT_NULL_CONSTRAINT_VIOLATION",
		103:  "CHECK_CONSTRAINT_VIOLATION",
		104:  "EXCLUSION_CONSTRAINT_VIOLATION",
		110:  "SYNTAX_ERROR",
		111:  "INVALID_INPUT_SYNTAX",
		112:  "VALUE_TOO_LONG_FOR_TYPE",
		113:  "INVALID_VALUE",
		114:  "MALFORMED_ARRAY_LITERAL",
		115:  "SUBQUERY_MISSING_ALIAS",
		116:  "INSERT_TARGET_COLUMN_MISMATCH",
		117:  "ANY_ALL_REQUIRES_ARRAY",
		118:  "COLUMN_MISSING_FROM_GROUP_BY",
		119:  "RELATION_DOES_NOT_EXIST",
		120:  "COLUMN_DOES_NOT_EXIST",
		121:  "OPERATOR_DOES_NOT_EXIST",
		122:  "COLUMN_REFERENCE_AMBIGUOUS",
		123:  "PERMISSION_DENIED",
		124:  "TRANSACTION_IS_ABORTED",
		125:  "ON_CONFLICT_NO_CONSTRAINT_MATCH",
		126:  "ON_CONFLICT_ROW_AFFECTED_TWICE",
		127:  "COLUMN_CANNOT_BE_CAST",
		128:  "DIVISION_BY_ZERO",
		129:  "CANNOT_DROP",
		130:  "INTEGER_OUT_OF_RANGE",
		131:  "INVALID_REGEXP",
		132:  "PARAM_MISSING",
		133:  "FUNCTION_DOES_NOT_EXIST",
		134:  "NO_SUCH_SAVEPOINT",
		135:  "UNTERMINATED_QUOTED_STRING",
		136:  "UNTERMINATED_QUOTED_IDENTIFIER",
		137:  "INVALID_BYTE_SEQUENCE",
		138:  "COULD_NOT_SERIALIZE_REPEATABLE_READ",
		139:  "COULD_NOT_SERIALIZE_SERIALIZABLE",
		140:  "INCONSISTENT_RANGE_BOUNDS",
		1000: "PGA_COLLECTOR_IDENTIFY",
	}
	LogLineInformation_LogClassification_value = map[string]int32{
		"UNKNOWN_LOG_CLASSIFICATION":          0,
		"SERVER_CRASHED":                      1,
		"SERVER_START":                        2,
		"SERVER_START_RECOVERING":             3,
		"SERVER_SHUTDOWN":                     4,
		"SERVER_OUT_OF_MEMORY":                5,
		"SERVER_INVALID_CHECKSUM":             6,
		"SERVER_TEMP_FILE_CREATED":            7,
		"SERVER_MISC":                         8,
		"SERVER_RELOAD":                       9,
		"SERVER_PROCESS_EXITED":               10,
		"SERVER_STATS_COLLECTOR_TIMEOUT":      11,
		"CONNECTION_RECEIVED":                 20,
		"CONNECTION_AUTHORIZED":               21,
		"CONNECTION_REJECTED":                 22,
		"CONNECTION_DISCONNECTED":             23,
		"CONNECTION_CLIENT_FAILED_TO_CONNECT": 24,
		"CONNECTION_LOST":                     25,
		"CONNECTION_LOST_OPEN_TX":             26,
		"CONNECTION_TERMINATED":               27,
		"OUT_OF_CONNECTIONS":                  28,
		"TOO_MANY_CONNECTIONS_ROLE":           29,
		"COULD_NOT_ACCEPT_SSL_CONNECTION":     30,
		"PROTOCOL_ERROR_UNSUPPORTED_VERSION":  31,
		"PROTOCOL_ERROR_INCOMPLETE_MESSAGE":   32,
		"TOO_MANY_CONNECTIONS_DATABASE":       33,
		"CHECKPOINT_STARTING":                 40,
		"CHECKPOINT_COMPLETE":                 41,
		"CHECKPOINT_TOO_FREQUENT":             42,
		"RESTARTPOINT_STARTING":               43,
		"RESTARTPOINT_COMPLETE":               44,
		"RESTARTPOINT_AT":                     45,
		"WAL_INVALID_RECORD_LENGTH":           50,
		"WAL_REDO":                            51,
		"WAL_ARCHIVE_COMMAND_FAILED":          52,
		"WAL_BASE_BACKUP_COMPLETE":            53,
		"AUTOVACUUM_CANCEL":                   60,
		"TXID_WRAPAROUND_WARNING":             61,
		"TXID_WRAPAROUND_ERROR":               62,
		"AUTOVACUUM_LAUNCHER_STARTED":         63,
		"AUTOVACUUM_LAUNCHER_SHUTTING_DOWN":   64,
		"AUTOVACUUM_COMPLETED":                65,
		"AUTOANALYZE_COMPLETED":               66,
		"SKIPPING_VACUUM_LOCK_NOT_AVAILABLE":  67,
		"SKIPPING_ANALYZE_LOCK_NOT_AVAILABLE": 68,
		"LOCK_ACQUIRED":                       70,
		"LOCK_WAITING":                        71,
		"LOCK_TIMEOUT":                        72,
		"LOCK_DEADLOCK_DETECTED":              73,
		"LOCK_DEADLOCK_AVOIDED":               74,
		"STATEMENT_DURATION":                  80,
		"STATEMENT_CANCELED_TIMEOUT":          81,
		"STATEMENT_CANCELED_USER":             82,
		"STATEMENT_LOG":                       83,
		"STATEMENT_AUTO_EXPLAIN":              84,
		"STANDBY_RESTORED_WAL_FROM_ARCHIVE":   90,
		"STANDBY_STARTED_STREAMING":           91,
		"STANDBY_STREAMING_INTERRUPTED":       92,
		"STANDBY_STOPPED_STREAMING":           93,
		"STANDBY_CONSISTENT_RECOVERY_STATE":   94,
		"STANDBY_STATEMENT_CANCELED":          95,
		"STANDBY_INVALID_TIMELINE":            96,
		"UNIQUE_CONSTRAINT_VIOLATION":         100,
		"FOREIGN_KEY_CONSTRAINT_VIOLATION":    101,
		"NOT_NULL_CONSTRAINT_VIOLATION":       102,
		"CHECK_CONSTRAINT_VIOLATION":          103,
		"EXCLUSION_CONSTRAINT_VIOLATION":      104,
		"SYNTAX_ERROR":                        110,
		"INVALID_INPUT_SYNTAX":                111,
		"VALUE_TOO_LONG_FOR_TYPE":             112,
		"INVALID_VALUE":                       113,
		"MALFORMED_ARRAY_LITERAL":             114,
		"SUBQUERY_MISSING_ALIAS":              115,
		"INSERT_TARGET_COLUMN_MISMATCH":       116,
		"ANY_ALL_REQUIRES_ARRAY":              117,
		"COLUMN_MISSING_FROM_GROUP_BY":        118,
		"RELATION_DOES_NOT_EXIST":             119,
		"COLUMN_DOES_NOT_EXIST":               120,
		"OPERATOR_DOES_NOT_EXIST":             121,
		"COLUMN_REFERENCE_AMBIGUOUS":          122,
		"PERMISSION_DENIED":                   123,
		"TRANSACTION_IS_ABORTED":              124,
		"ON_CONFLICT_NO_CONSTRAINT_MATCH":     125,
		"ON_CONFLICT_ROW_AFFECTED_TWICE":      126,
		"COLUMN_CANNOT_BE_CAST":               127,
		"DIVISION_BY_ZERO":                    128,
		"CANNOT_DROP":                         129,
		"INTEGER_OUT_OF_RANGE":                130,
		"INVALID_REGEXP":                      131,
		"PARAM_MISSING":                       132,
		"FUNCTION_DOES_NOT_EXIST":             133,
		"NO_SUCH_SAVEPOINT":                   134,
		"UNTERMINATED_QUOTED_STRING":          135,
		"UNTERMINATED_QUOTED_IDENTIFIER":      136,
		"INVALID_BYTE_SEQUENCE":               137,
		"COULD_NOT_SERIALIZE_REPEATABLE_READ": 138,
		"COULD_NOT_SERIALIZE_SERIALIZABLE":    139,
		"INCONSISTENT_RANGE_BOUNDS":           140,
		"PGA_COLLECTOR_IDENTIFY":              1000,
	}
)

func (x LogLineInformation_LogClassification) Enum() *LogLineInformation_LogClassification {
	p := new(LogLineInformation_LogClassification)
	*p = x
	return p
}

func (x LogLineInformation_LogClassification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLineInformation_LogClassification) Descriptor() protoreflect.EnumDescriptor {
	return file_compact_log_snapshot_proto_enumTypes[2].Descriptor()
}

func (LogLineInformation_LogClassification) Type() protoreflect.EnumType {
	return &file_compact_log_snapshot_proto_enumTypes[2]
}

func (x LogLineInformation_LogClassification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLineInformation_LogClassification.Descriptor instead.
func (LogLineInformation_LogClassification) EnumDescriptor() ([]byte, []int) {
	return file_compact_log_snapshot_proto_rawDescGZIP(), []int{2, 1}
}

type QuerySample_ExplainFormat int32

const (
	QuerySample_TEXT_EXPLAIN_FORMAT QuerySample_ExplainFormat = 0
	QuerySample_JSON_EXPLAIN_FORMAT QuerySample_ExplainFormat = 1
)

// Enum value maps for QuerySample_ExplainFormat.
var (
	QuerySample_ExplainFormat_name = map[int32]string{
		0: "TEXT_EXPLAIN_FORMAT",
		1: "JSON_EXPLAIN_FORMAT",
	}
	QuerySample_ExplainFormat_value = map[string]int32{
		"TEXT_EXPLAIN_FORMAT": 0,
		"JSON_EXPLAIN_FORMAT": 1,
	}
)

func (x QuerySample_ExplainFormat) Enum() *QuerySample_ExplainFormat {
	p := new(QuerySample_ExplainFormat)
	*p = x
	return p
}

func (x QuerySample_ExplainFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuerySample_ExplainFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_compact_log_snapshot_proto_enumTypes[3].Descriptor()
}

func (QuerySample_ExplainFormat) Type() protoreflect.EnumType {
	return &file_compact_log_snapshot_proto_enumTypes[3]
}

func (x QuerySample_ExplainFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuerySample_ExplainFormat.Descriptor instead.
func (QuerySample_ExplainFormat) EnumDescriptor() ([]byte, []int) {
	return file_compact_log_snapshot_proto_rawDescGZIP(), []int{3, 0}
}

type QuerySample_ExplainSource int32

const (
	QuerySample_STATEMENT_LOG_EXPLAIN_SOURCE QuerySample_ExplainSource = 0 // Generated based on statement log (log_min_duration_statement)
	QuerySample_AUTO_EXPLAIN_EXPLAIN_SOURCE  QuerySample_ExplainSource = 1 // Generated by auto_explain
	QuerySample_EXTERNAL_EXPLAIN_SOURCE      QuerySample_ExplainSource = 2 // EXPLAIN generated through external process (e.g. operator running EXPLAIN)
	QuerySample_GENERIC_EXPLAIN_SOURCE       QuerySample_ExplainSource = 3 // EXPLAIN generated based on unknown constant parameters
)

// Enum value maps for QuerySample_ExplainSource.
var (
	QuerySample_ExplainSource_name = map[int32]string{
		0: "STATEMENT_LOG_EXPLAIN_SOURCE",
		1: "AUTO_EXPLAIN_EXPLAIN_SOURCE",
		2: "EXTERNAL_EXPLAIN_SOURCE",
		3: "GENERIC_EXPLAIN_SOURCE",
	}
	QuerySample_ExplainSource_value = map[string]int32{
		"STATEMENT_LOG_EXPLAIN_SOURCE": 0,
		"AUTO_EXPLAIN_EXPLAIN_SOURCE":  1,
		"EXTERNAL_EXPLAIN_SOURCE":      2,
		"GENERIC_EXPLAIN_SOURCE":       3,
	}
)

func (x QuerySample_ExplainSource) Enum() *QuerySample_ExplainSource {
	p := new(QuerySample_ExplainSource)
	*p = x
	return p
}

func (x QuerySample_ExplainSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuerySample_ExplainSource) Descriptor() protoreflect.EnumDescriptor {
	return file_compact_log_snapshot_proto_enumTypes[4].Descriptor()
}

func (QuerySample_ExplainSource) Type() protoreflect.EnumType {
	return &file_compact_log_snapshot_proto_enumTypes[4]
}

func (x QuerySample_ExplainSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuerySample_ExplainSource.Descriptor instead.
func (QuerySample_ExplainSource) EnumDescriptor() ([]byte, []int) {
	return file_compact_log_snapshot_proto_rawDescGZIP(), []int{3, 1}
}

type CompactLogSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogFileReferences   []*LogFileReference   `protobuf:"bytes,1,rep,name=log_file_references,json=logFileReferences,proto3" json:"log_file_references,omitempty"`
	LogLineInformations []*LogLineInformation `protobuf:"bytes,2,rep,name=log_line_informations,json=logLineInformations,proto3" json:"log_line_informations,omitempty"`
	QuerySamples        []*QuerySample        `protobuf:"bytes,3,rep,name=query_samples,json=querySamples,proto3" json:"query_samples,omitempty"`
}

func (x *CompactLogSnapshot) Reset() {
	*x = CompactLogSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compact_log_snapshot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactLogSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactLogSnapshot) ProtoMessage() {}

func (x *CompactLogSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_compact_log_snapshot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactLogSnapshot.ProtoReflect.Descriptor instead.
func (*CompactLogSnapshot) Descriptor() ([]byte, []int) {
	return file_compact_log_snapshot_proto_rawDescGZIP(), []int{0}
}

func (x *CompactLogSnapshot) GetLogFileReferences() []*LogFileReference {
	if x != nil {
		return x.LogFileReferences
	}
	return nil
}

func (x *CompactLogSnapshot) GetLogLineInformations() []*LogLineInformation {
	if x != nil {
		return x.LogLineInformations
	}
	return nil
}

func (x *CompactLogSnapshot) GetQuerySamples() []*QuerySample {
	if x != nil {
		return x.QuerySamples
	}
	return nil
}

type LogFileReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid            string                           `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	S3Location      string                           `protobuf:"bytes,2,opt,name=s3_location,json=s3Location,proto3" json:"s3_location,omitempty"`
	S3CekAlgo       string                           `protobuf:"bytes,3,opt,name=s3_cek_algo,json=s3CekAlgo,proto3" json:"s3_cek_algo,omitempty"`
	S3CmkKeyId      string                           `protobuf:"bytes,4,opt,name=s3_cmk_key_id,json=s3CmkKeyId,proto3" json:"s3_cmk_key_id,omitempty"`
	ByteSize        int64                            `protobuf:"varint,5,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
	OriginalName    string                           `protobuf:"bytes,6,opt,name=original_name,json=originalName,proto3" json:"original_name,omitempty"`
	FilterLogSecret []LogFileReference_LogSecretKind `protobuf:"varint,10,rep,packed,name=filter_log_secret,json=filterLogSecret,proto3,enum=pganalyze.collector.LogFileReference_LogSecretKind" json:"filter_log_secret,omitempty"`
}

func (x *LogFileReference) Reset() {
	*x = LogFileReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compact_log_snapshot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogFileReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogFileReference) ProtoMessage() {}

func (x *LogFileReference) ProtoReflect() protoreflect.Message {
	mi := &file_compact_log_snapshot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogFileReference.ProtoReflect.Descriptor instead.
func (*LogFileReference) Descriptor() ([]byte, []int) {
	return file_compact_log_snapshot_proto_rawDescGZIP(), []int{1}
}

func (x *LogFileReference) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *LogFileReference) GetS3Location() string {
	if x != nil {
		return x.S3Location
	}
	return ""
}

func (x *LogFileReference) GetS3CekAlgo() string {
	if x != nil {
		return x.S3CekAlgo
	}
	return ""
}

func (x *LogFileReference) GetS3CmkKeyId() string {
	if x != nil {
		return x.S3CmkKeyId
	}
	return ""
}

func (x *LogFileReference) GetByteSize() int64 {
	if x != nil {
		return x.ByteSize
	}
	return 0
}

func (x *LogFileReference) GetOriginalName() string {
	if x != nil {
		return x.OriginalName
	}
	return ""
}

func (x *LogFileReference) GetFilterLogSecret() []LogFileReference_LogSecretKind {
	if x != nil {
		return x.FilterLogSecret
	}
	return nil
}

type LogLineInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogFileIdx       int32                                `protobuf:"varint,1,opt,name=log_file_idx,json=logFileIdx,proto3" json:"log_file_idx,omitempty"`
	Uuid             string                               `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ParentUuid       string                               `protobuf:"bytes,3,opt,name=parent_uuid,json=parentUuid,proto3" json:"parent_uuid,omitempty"` // optional
	ByteStart        int64                                `protobuf:"varint,4,opt,name=byte_start,json=byteStart,proto3" json:"byte_start,omitempty"`
	ByteContentStart int64                                `protobuf:"varint,5,opt,name=byte_content_start,json=byteContentStart,proto3" json:"byte_content_start,omitempty"`
	ByteEnd          int64                                `protobuf:"varint,6,opt,name=byte_end,json=byteEnd,proto3" json:"byte_end,omitempty"`
	HasRoleIdx       bool                                 `protobuf:"varint,7,opt,name=has_role_idx,json=hasRoleIdx,proto3" json:"has_role_idx,omitempty"`
	RoleIdx          int32                                `protobuf:"varint,8,opt,name=role_idx,json=roleIdx,proto3" json:"role_idx,omitempty"`
	HasDatabaseIdx   bool                                 `protobuf:"varint,9,opt,name=has_database_idx,json=hasDatabaseIdx,proto3" json:"has_database_idx,omitempty"`
	DatabaseIdx      int32                                `protobuf:"varint,10,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	HasQueryIdx      bool                                 `protobuf:"varint,11,opt,name=has_query_idx,json=hasQueryIdx,proto3" json:"has_query_idx,omitempty"`
	QueryIdx         int32                                `protobuf:"varint,12,opt,name=query_idx,json=queryIdx,proto3" json:"query_idx,omitempty"`
	OccurredAt       *timestamppb.Timestamp               `protobuf:"bytes,13,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	BackendPid       int32                                `protobuf:"varint,14,opt,name=backend_pid,json=backendPid,proto3" json:"backend_pid,omitempty"`
	Level            LogLineInformation_LogLevel          `protobuf:"varint,15,opt,name=level,proto3,enum=pganalyze.collector.LogLineInformation_LogLevel" json:"level,omitempty"`
	Classification   LogLineInformation_LogClassification `protobuf:"varint,16,opt,name=classification,proto3,enum=pganalyze.collector.LogLineInformation_LogClassification" json:"classification,omitempty"`
	DetailsJson      string                               `protobuf:"bytes,17,opt,name=details_json,json=detailsJson,proto3" json:"details_json,omitempty"` // JSON-encoded additional details about this log line
	HasRelationIdx   bool                                 `protobuf:"varint,18,opt,name=has_relation_idx,json=hasRelationIdx,proto3" json:"has_relation_idx,omitempty"`
	RelationIdx      int32                                `protobuf:"varint,19,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	RelatedPids      []int32                              `protobuf:"varint,20,rep,packed,name=related_pids,json=relatedPids,proto3" json:"related_pids,omitempty"` // Other PIDs that are related to this log line (mentioned in some way)
}

func (x *LogLineInformation) Reset() {
	*x = LogLineInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compact_log_snapshot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogLineInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLineInformation) ProtoMessage() {}

func (x *LogLineInformation) ProtoReflect() protoreflect.Message {
	mi := &file_compact_log_snapshot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLineInformation.ProtoReflect.Descriptor instead.
func (*LogLineInformation) Descriptor() ([]byte, []int) {
	return file_compact_log_snapshot_proto_rawDescGZIP(), []int{2}
}

func (x *LogLineInformation) GetLogFileIdx() int32 {
	if x != nil {
		return x.LogFileIdx
	}
	return 0
}

func (x *LogLineInformation) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *LogLineInformation) GetParentUuid() string {
	if x != nil {
		return x.ParentUuid
	}
	return ""
}

func (x *LogLineInformation) GetByteStart() int64 {
	if x != nil {
		return x.ByteStart
	}
	return 0
}

func (x *LogLineInformation) GetByteContentStart() int64 {
	if x != nil {
		return x.ByteContentStart
	}
	return 0
}

func (x *LogLineInformation) GetByteEnd() int64 {
	if x != nil {
		return x.ByteEnd
	}
	return 0
}

func (x *LogLineInformation) GetHasRoleIdx() bool {
	if x != nil {
		return x.HasRoleIdx
	}
	return false
}

func (x *LogLineInformation) GetRoleIdx() int32 {
	if x != nil {
		return x.RoleIdx
	}
	return 0
}

func (x *LogLineInformation) GetHasDatabaseIdx() bool {
	if x != nil {
		return x.HasDatabaseIdx
	}
	return false
}

func (x *LogLineInformation) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *LogLineInformation) GetHasQueryIdx() bool {
	if x != nil {
		return x.HasQueryIdx
	}
	return false
}

func (x *LogLineInformation) GetQueryIdx() int32 {
	if x != nil {
		return x.QueryIdx
	}
	return 0
}

func (x *LogLineInformation) GetOccurredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OccurredAt
	}
	return nil
}

func (x *LogLineInformation) GetBackendPid() int32 {
	if x != nil {
		return x.BackendPid
	}
	return 0
}

func (x *LogLineInformation) GetLevel() LogLineInformation_LogLevel {
	if x != nil {
		return x.Level
	}
	return LogLineInformation_UNKNOWN
}

func (x *LogLineInformation) GetClassification() LogLineInformation_LogClassification {
	if x != nil {
		return x.Classification
	}
	return LogLineInformation_UNKNOWN_LOG_CLASSIFICATION
}

func (x *LogLineInformation) GetDetailsJson() string {
	if x != nil {
		return x.DetailsJson
	}
	return ""
}

func (x *LogLineInformation) GetHasRelationIdx() bool {
	if x != nil {
		return x.HasRelationIdx
	}
	return false
}

func (x *LogLineInformation) GetRelationIdx() int32 {
	if x != nil {
		return x.RelationIdx
	}
	return 0
}

func (x *LogLineInformation) GetRelatedPids() []int32 {
	if x != nil {
		return x.RelatedPids
	}
	return nil
}

type QuerySample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryIdx         int32                  `protobuf:"varint,1,opt,name=query_idx,json=queryIdx,proto3" json:"query_idx,omitempty"`
	OccurredAt       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=occurred_at,json=occurredAt,proto3" json:"occurred_at,omitempty"`
	RuntimeMs        float64                `protobuf:"fixed64,3,opt,name=runtime_ms,json=runtimeMs,proto3" json:"runtime_ms,omitempty"`
	QueryText        string                 `protobuf:"bytes,4,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	ParametersLegacy []string               `protobuf:"bytes,5,rep,name=parameters_legacy,json=parametersLegacy,proto3" json:"parameters_legacy,omitempty"` // Deprecated as of Dec 2020, but may still used by older versions of the app
	Parameters       []*NullString          `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty"`
	LogLineUuid      string                 `protobuf:"bytes,10,opt,name=log_line_uuid,json=logLineUuid,proto3" json:"log_line_uuid,omitempty"`
	// Note: For historic reasons this contains an inline version of QueryExplainInformation
	HasExplain    bool                      `protobuf:"varint,20,opt,name=has_explain,json=hasExplain,proto3" json:"has_explain,omitempty"`
	ExplainOutput string                    `protobuf:"bytes,21,opt,name=explain_output,json=explainOutput,proto3" json:"explain_output,omitempty"`
	ExplainError  string                    `protobuf:"bytes,22,opt,name=explain_error,json=explainError,proto3" json:"explain_error,omitempty"`
	ExplainFormat QuerySample_ExplainFormat `protobuf:"varint,23,opt,name=explain_format,json=explainFormat,proto3,enum=pganalyze.collector.QuerySample_ExplainFormat" json:"explain_format,omitempty"`
	ExplainSource QuerySample_ExplainSource `protobuf:"varint,24,opt,name=explain_source,json=explainSource,proto3,enum=pganalyze.collector.QuerySample_ExplainSource" json:"explain_source,omitempty"`
}

func (x *QuerySample) Reset() {
	*x = QuerySample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compact_log_snapshot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySample) ProtoMessage() {}

func (x *QuerySample) ProtoReflect() protoreflect.Message {
	mi := &file_compact_log_snapshot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySample.ProtoReflect.Descriptor instead.
func (*QuerySample) Descriptor() ([]byte, []int) {
	return file_compact_log_snapshot_proto_rawDescGZIP(), []int{3}
}

func (x *QuerySample) GetQueryIdx() int32 {
	if x != nil {
		return x.QueryIdx
	}
	return 0
}

func (x *QuerySample) GetOccurredAt() *timestamppb.Timestamp {
	if x != nil {
		return x.OccurredAt
	}
	return nil
}

func (x *QuerySample) GetRuntimeMs() float64 {
	if x != nil {
		return x.RuntimeMs
	}
	return 0
}

func (x *QuerySample) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *QuerySample) GetParametersLegacy() []string {
	if x != nil {
		return x.ParametersLegacy
	}
	return nil
}

func (x *QuerySample) GetParameters() []*NullString {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *QuerySample) GetLogLineUuid() string {
	if x != nil {
		return x.LogLineUuid
	}
	return ""
}

func (x *QuerySample) GetHasExplain() bool {
	if x != nil {
		return x.HasExplain
	}
	return false
}

func (x *QuerySample) GetExplainOutput() string {
	if x != nil {
		return x.ExplainOutput
	}
	return ""
}

func (x *QuerySample) GetExplainError() string {
	if x != nil {
		return x.ExplainError
	}
	return ""
}

func (x *QuerySample) GetExplainFormat() QuerySample_ExplainFormat {
	if x != nil {
		return x.ExplainFormat
	}
	return QuerySample_TEXT_EXPLAIN_FORMAT
}

func (x *QuerySample) GetExplainSource() QuerySample_ExplainSource {
	if x != nil {
		return x.ExplainSource
	}
	return QuerySample_STATEMENT_LOG_EXPLAIN_SOURCE
}

var File_compact_log_snapshot_proto protoreflect.FileDescriptor

var file_compact_log_snapshot_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x67,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8f, 0x02, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4c, 0x6f, 0x67, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x55, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6c, 0x6f, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5b,
	0x0a, 0x15, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x22, 0x87, 0x04, 0x0a, 0x10, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x33, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x33, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b,
	0x73, 0x33, 0x5f, 0x63, 0x65, 0x6b, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x33, 0x43, 0x65, 0x6b, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x21, 0x0a, 0x0d,
	0x73, 0x33, 0x5f, 0x63, 0x6d, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x33, 0x43, 0x6d, 0x6b, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x5f, 0x0a, 0x11, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x70,
	0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x1c, 0x0a, 0x18, 0x50, 0x41, 0x52, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x4c,
	0x4f, 0x47, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x50, 0x53, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x05, 0x12,
	0x1b, 0x0a, 0x17, 0x55, 0x4e, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f,
	0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45, 0x43, 0x52, 0x45, 0x54, 0x10, 0x06, 0x22, 0xa1, 0x1e, 0x0a,
	0x12, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79,
	0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x62, 0x79, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x79, 0x74,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x5f,
	0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x45,
	0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x68, 0x61, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x52, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x78, 0x12,
	0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x78, 0x12, 0x22, 0x0a, 0x0d,
	0x68, 0x61, 0x73, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x78,
	0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x78, 0x12, 0x3b, 0x0a,
	0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x50, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x61, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x70, 0x67,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73,
	0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x70, 0x69, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x69, 0x64, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x49,
	0x43, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x4f, 0x47, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x07,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x4e, 0x49, 0x43, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x4e, 0x54, 0x10,
	0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x0b, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x09, 0x0a,
	0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x0d, 0x22, 0xb5, 0x16, 0x0a, 0x11, 0x4c, 0x6f, 0x67,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x1a, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x41, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54,
	0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x05,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x53, 0x55, 0x4d, 0x10, 0x06, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x09, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0b, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x17, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10,
	0x18, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4c, 0x4f, 0x53, 0x54, 0x10, 0x19, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x54,
	0x58, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x1b, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x1c, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41,
	0x4e, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52,
	0x4f, 0x4c, 0x45, 0x10, 0x1d, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x43, 0x4f,
	0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x52,
	0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x1f, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x20, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x4f, 0x4f,
	0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x21, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x28, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x29, 0x12, 0x1b,
	0x0a, 0x17, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x54, 0x10, 0x2a, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x2b, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x2c, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x53, 0x54, 0x41, 0x52, 0x54, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x41, 0x54, 0x10, 0x2d, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x41, 0x4c, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x4c, 0x45, 0x4e,
	0x47, 0x54, 0x48, 0x10, 0x32, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x44,
	0x4f, 0x10, 0x33, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x34, 0x12, 0x1c, 0x0a, 0x18, 0x57, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f,
	0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x35, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54, 0x4f, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x3c, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x58, 0x49, 0x44,
	0x5f, 0x57, 0x52, 0x41, 0x50, 0x41, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x57, 0x41, 0x52, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x3d, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x58, 0x49, 0x44, 0x5f, 0x57, 0x52,
	0x41, 0x50, 0x41, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x3e,
	0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x55, 0x54, 0x4f, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d, 0x5f, 0x4c,
	0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x3f, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x55, 0x54, 0x4f, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d, 0x5f,
	0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x40, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x4f,
	0x56, 0x41, 0x43, 0x55, 0x55, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x41, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x54, 0x4f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a,
	0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x42, 0x12, 0x26, 0x0a,
	0x22, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x43, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x49, 0x4e,
	0x47, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x44, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x46, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x47, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x4f, 0x55, 0x54, 0x10, 0x48, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x45,
	0x41, 0x44, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x49, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x41, 0x56, 0x4f, 0x49, 0x44, 0x45, 0x44, 0x10, 0x4a, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x50, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0x51, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x52, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x4f, 0x47, 0x10, 0x53, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x54,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x44, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x41, 0x52,
	0x43, 0x48, 0x49, 0x56, 0x45, 0x10, 0x5a, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x42, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41,
	0x4d, 0x49, 0x4e, 0x47, 0x10, 0x5b, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42,
	0x59, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x10, 0x5c, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x42, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x5d, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x42, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x5e, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x5f, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x60, 0x12, 0x1f, 0x0a,
	0x1b, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49,
	0x4e, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x64, 0x12, 0x24,
	0x0a, 0x20, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x43, 0x4f,
	0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x66, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x48, 0x45, 0x43, 0x4b,
	0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x56, 0x49, 0x4f, 0x4c,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x67, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x58, 0x43, 0x4c, 0x55,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f,
	0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x68, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x59, 0x4e, 0x54, 0x41, 0x58, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x6e, 0x12, 0x18, 0x0a,
	0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x53,
	0x59, 0x4e, 0x54, 0x41, 0x58, 0x10, 0x6f, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x70, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x71, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x4c, 0x46, 0x4f,
	0x52, 0x4d, 0x45, 0x44, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52,
	0x41, 0x4c, 0x10, 0x72, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x55, 0x42, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x10, 0x73,
	0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45,
	0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x74, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4e, 0x59, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x75, 0x12,
	0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x42, 0x59, 0x10,
	0x76, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f,
	0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x77, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x78, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x10, 0x79, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x4d, 0x42, 0x49, 0x47,
	0x55, 0x4f, 0x55, 0x53, 0x10, 0x7a, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x7b, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f,
	0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x7c, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x7d, 0x12, 0x22,
	0x0a, 0x1e, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x52, 0x4f,
	0x57, 0x5f, 0x41, 0x46, 0x46, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x57, 0x49, 0x43, 0x45,
	0x10, 0x7e, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x41, 0x4e,
	0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x45, 0x5f, 0x43, 0x41, 0x53, 0x54, 0x10, 0x7f, 0x12, 0x15, 0x0a,
	0x10, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x42, 0x59, 0x5f, 0x5a, 0x45, 0x52,
	0x4f, 0x10, 0x80, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x5f, 0x44,
	0x52, 0x4f, 0x50, 0x10, 0x81, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45,
	0x52, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x82,
	0x01, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x47,
	0x45, 0x58, 0x50, 0x10, 0x83, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x84, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x46, 0x55,
	0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x85, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x53,
	0x55, 0x43, 0x48, 0x5f, 0x53, 0x41, 0x56, 0x45, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x86, 0x01,
	0x12, 0x1f, 0x0a, 0x1a, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44,
	0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x87,
	0x01, 0x12, 0x23, 0x0a, 0x1e, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x10, 0x88, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x10,
	0x89, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x8a, 0x01, 0x12, 0x25, 0x0a, 0x20,
	0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x8b, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53, 0x54,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x53,
	0x10, 0x8c, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x47, 0x41, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x59, 0x10, 0xe8, 0x07,
	0x22, 0xa3, 0x06, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x78, 0x12, 0x3b, 0x0a,
	0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x67, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c,
	0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61,
	0x73, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x68, 0x61, 0x73, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65,
	0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x55, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x0d, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x55,
	0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x41, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x4c,
	0x41, 0x49, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49,
	0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f,
	0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_compact_log_snapshot_proto_rawDescOnce sync.Once
	file_compact_log_snapshot_proto_rawDescData = file_compact_log_snapshot_proto_rawDesc
)

func file_compact_log_snapshot_proto_rawDescGZIP() []byte {
	file_compact_log_snapshot_proto_rawDescOnce.Do(func() {
		file_compact_log_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_compact_log_snapshot_proto_rawDescData)
	})
	return file_compact_log_snapshot_proto_rawDescData
}

var file_compact_log_snapshot_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_compact_log_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_compact_log_snapshot_proto_goTypes = []interface{}{
	(LogFileReference_LogSecretKind)(0),       // 0: pganalyze.collector.LogFileReference.LogSecretKind
	(LogLineInformation_LogLevel)(0),          // 1: pganalyze.collector.LogLineInformation.LogLevel
	(LogLineInformation_LogClassification)(0), // 2: pganalyze.collector.LogLineInformation.LogClassification
	(QuerySample_ExplainFormat)(0),            // 3: pganalyze.collector.QuerySample.ExplainFormat
	(QuerySample_ExplainSource)(0),            // 4: pganalyze.collector.QuerySample.ExplainSource
	(*CompactLogSnapshot)(nil),                // 5: pganalyze.collector.CompactLogSnapshot
	(*LogFileReference)(nil),                  // 6: pganalyze.collector.LogFileReference
	(*LogLineInformation)(nil),                // 7: pganalyze.collector.LogLineInformation
	(*QuerySample)(nil),                       // 8: pganalyze.collector.QuerySample
	(*timestamppb.Timestamp)(nil),             // 9: google.protobuf.Timestamp
	(*NullString)(nil),                        // 10: pganalyze.collector.NullString
}
var file_compact_log_snapshot_proto_depIdxs = []int32{
	6,  // 0: pganalyze.collector.CompactLogSnapshot.log_file_references:type_name -> pganalyze.collector.LogFileReference
	7,  // 1: pganalyze.collector.CompactLogSnapshot.log_line_informations:type_name -> pganalyze.collector.LogLineInformation
	8,  // 2: pganalyze.collector.CompactLogSnapshot.query_samples:type_name -> pganalyze.collector.QuerySample
	0,  // 3: pganalyze.collector.LogFileReference.filter_log_secret:type_name -> pganalyze.collector.LogFileReference.LogSecretKind
	9,  // 4: pganalyze.collector.LogLineInformation.occurred_at:type_name -> google.protobuf.Timestamp
	1,  // 5: pganalyze.collector.LogLineInformation.level:type_name -> pganalyze.collector.LogLineInformation.LogLevel
	2,  // 6: pganalyze.collector.LogLineInformation.classification:type_name -> pganalyze.collector.LogLineInformation.LogClassification
	9,  // 7: pganalyze.collector.QuerySample.occurred_at:type_name -> google.protobuf.Timestamp
	10, // 8: pganalyze.collector.QuerySample.parameters:type_name -> pganalyze.collector.NullString
	3,  // 9: pganalyze.collector.QuerySample.explain_format:type_name -> pganalyze.collector.QuerySample.ExplainFormat
	4,  // 10: pganalyze.collector.QuerySample.explain_source:type_name -> pganalyze.collector.QuerySample.ExplainSource
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_compact_log_snapshot_proto_init() }
func file_compact_log_snapshot_proto_init() {
	if File_compact_log_snapshot_proto != nil {
		return
	}
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_compact_log_snapshot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactLogSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compact_log_snapshot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogFileReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compact_log_snapshot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogLineInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compact_log_snapshot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compact_log_snapshot_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_compact_log_snapshot_proto_goTypes,
		DependencyIndexes: file_compact_log_snapshot_proto_depIdxs,
		EnumInfos:         file_compact_log_snapshot_proto_enumTypes,
		MessageInfos:      file_compact_log_snapshot_proto_msgTypes,
	}.Build()
	File_compact_log_snapshot_proto = out.File
	file_compact_log_snapshot_proto_rawDesc = nil
	file_compact_log_snapshot_proto_goTypes = nil
	file_compact_log_snapshot_proto_depIdxs = nil
}
