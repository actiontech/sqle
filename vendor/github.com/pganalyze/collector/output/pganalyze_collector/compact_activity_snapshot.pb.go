// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.14.0
// source: compact_activity_snapshot.proto

package pganalyze_collector

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ! When changing this, also update mappings/wait_event_type.json
type Backend_WaitEventType int32

const (
	Backend_PG_WAIT_UNDEFINED      Backend_WaitEventType = 0
	Backend_PG_WAIT_LWLOCK_NAMED   Backend_WaitEventType = 1  // LWLockNamed (9.6 only)
	Backend_PG_WAIT_LWLOCK_TRANCHE Backend_WaitEventType = 2  // LWLockTranche (9.6 only)
	Backend_PG_WAIT_LOCK           Backend_WaitEventType = 3  // Lock
	Backend_PG_WAIT_BUFFER_PIN     Backend_WaitEventType = 4  // BufferPin
	Backend_PG_WAIT_LWLOCK         Backend_WaitEventType = 5  // LWLock
	Backend_PG_WAIT_ACTIVITY       Backend_WaitEventType = 6  // Activity
	Backend_PG_WAIT_CLIENT         Backend_WaitEventType = 7  // Client
	Backend_PG_WAIT_EXTENSION      Backend_WaitEventType = 8  // Extension
	Backend_PG_WAIT_IPC            Backend_WaitEventType = 9  // IPC
	Backend_PG_WAIT_TIMEOUT        Backend_WaitEventType = 10 // Timeout
	Backend_PG_WAIT_IO             Backend_WaitEventType = 11 // IO
)

// Enum value maps for Backend_WaitEventType.
var (
	Backend_WaitEventType_name = map[int32]string{
		0:  "PG_WAIT_UNDEFINED",
		1:  "PG_WAIT_LWLOCK_NAMED",
		2:  "PG_WAIT_LWLOCK_TRANCHE",
		3:  "PG_WAIT_LOCK",
		4:  "PG_WAIT_BUFFER_PIN",
		5:  "PG_WAIT_LWLOCK",
		6:  "PG_WAIT_ACTIVITY",
		7:  "PG_WAIT_CLIENT",
		8:  "PG_WAIT_EXTENSION",
		9:  "PG_WAIT_IPC",
		10: "PG_WAIT_TIMEOUT",
		11: "PG_WAIT_IO",
	}
	Backend_WaitEventType_value = map[string]int32{
		"PG_WAIT_UNDEFINED":      0,
		"PG_WAIT_LWLOCK_NAMED":   1,
		"PG_WAIT_LWLOCK_TRANCHE": 2,
		"PG_WAIT_LOCK":           3,
		"PG_WAIT_BUFFER_PIN":     4,
		"PG_WAIT_LWLOCK":         5,
		"PG_WAIT_ACTIVITY":       6,
		"PG_WAIT_CLIENT":         7,
		"PG_WAIT_EXTENSION":      8,
		"PG_WAIT_IPC":            9,
		"PG_WAIT_TIMEOUT":        10,
		"PG_WAIT_IO":             11,
	}
)

func (x Backend_WaitEventType) Enum() *Backend_WaitEventType {
	p := new(Backend_WaitEventType)
	*p = x
	return p
}

func (x Backend_WaitEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Backend_WaitEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_compact_activity_snapshot_proto_enumTypes[0].Descriptor()
}

func (Backend_WaitEventType) Type() protoreflect.EnumType {
	return &file_compact_activity_snapshot_proto_enumTypes[0]
}

func (x Backend_WaitEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Backend_WaitEventType.Descriptor instead.
func (Backend_WaitEventType) EnumDescriptor() ([]byte, []int) {
	return file_compact_activity_snapshot_proto_rawDescGZIP(), []int{1, 0}
}

// ! When changing this, also update mappings/wait_event.json
type Backend_WaitEvent int32

const (
	Backend_WAIT_EVENT_UNKNOWN                                  Backend_WaitEvent = 0
	Backend_WAIT_EVENT_LWLOCK_SHMEM_INDEX_LOCK                  Backend_WaitEvent = 101 // ShmemIndexLock
	Backend_WAIT_EVENT_LWLOCK_OID_GEN_LOCK                      Backend_WaitEvent = 102 // OidGenLock
	Backend_WAIT_EVENT_LWLOCK_XID_GEN_LOCK                      Backend_WaitEvent = 103 // XidGenLock
	Backend_WAIT_EVENT_LWLOCK_PROC_ARRAY_LOCK                   Backend_WaitEvent = 104 // ProcArrayLock
	Backend_WAIT_EVENT_LWLOCK_S_INVAL_READ_LOCK                 Backend_WaitEvent = 105 // SInvalReadLock
	Backend_WAIT_EVENT_LWLOCK_S_INVAL_WRITE_LOCK                Backend_WaitEvent = 106 // SInvalWriteLock
	Backend_WAIT_EVENT_LWLOCK_WAL_BUF_MAPPING_LOCK              Backend_WaitEvent = 107 // WALBufMappingLock
	Backend_WAIT_EVENT_LWLOCK_WAL_WRITE_LOCK                    Backend_WaitEvent = 108 // WALWriteLock
	Backend_WAIT_EVENT_LWLOCK_CONTROL_FILE_LOCK                 Backend_WaitEvent = 109 // ControlFileLock
	Backend_WAIT_EVENT_LWLOCK_CHECKPOINT_LOCK                   Backend_WaitEvent = 110 // CheckpointLock (removed in 14)
	Backend_WAIT_EVENT_LWLOCK_XACT_SLRU_LOCK                    Backend_WaitEvent = 111 // CLogControlLock, XactSLRULock
	Backend_WAIT_EVENT_LWLOCK_SUBTRANS_SLRU_LOCK                Backend_WaitEvent = 112 // SubtransControlLock, SubtransSLRULock
	Backend_WAIT_EVENT_LWLOCK_MULTI_XACT_GEN_LOCK               Backend_WaitEvent = 113 // MultiXactGenLock
	Backend_WAIT_EVENT_LWLOCK_MULTI_XACT_OFFSET_SLRU_LOCK       Backend_WaitEvent = 114 // MultiXactOffsetControlLock, MultiXactOffsetSLRULock
	Backend_WAIT_EVENT_LWLOCK_MULTI_XACT_MEMBER_SLRU_LOCK       Backend_WaitEvent = 115 // MultiXactMemberControlLock, MultiXactMemberSLRULock
	Backend_WAIT_EVENT_LWLOCK_REL_CACHE_INIT_LOCK               Backend_WaitEvent = 116 // RelCacheInitLock
	Backend_WAIT_EVENT_LWLOCK_CHECKPOINTER_COMM_LOCK            Backend_WaitEvent = 117 // CheckpointerCommLock
	Backend_WAIT_EVENT_LWLOCK_TWO_PHASE_STATE_LOCK              Backend_WaitEvent = 118 // TwoPhaseStateLock
	Backend_WAIT_EVENT_LWLOCK_TABLESPACE_CREATE_LOCK            Backend_WaitEvent = 119 // TablespaceCreateLock
	Backend_WAIT_EVENT_LWLOCK_BTREE_VACUUM_LOCK                 Backend_WaitEvent = 120 // BtreeVacuumLock
	Backend_WAIT_EVENT_LWLOCK_ADDIN_SHMEM_INIT_LOCK             Backend_WaitEvent = 121 // AddinShmemInitLock
	Backend_WAIT_EVENT_LWLOCK_AUTOVACUUM_LOCK                   Backend_WaitEvent = 122 // AutovacuumLock
	Backend_WAIT_EVENT_LWLOCK_AUTOVACUUM_SCHEDULE_LOCK          Backend_WaitEvent = 123 // AutovacuumScheduleLock
	Backend_WAIT_EVENT_LWLOCK_SYNC_SCAN_LOCK                    Backend_WaitEvent = 124 // SyncScanLock
	Backend_WAIT_EVENT_LWLOCK_RELATION_MAPPING_LOCK             Backend_WaitEvent = 125 // RelationMappingLock
	Backend_WAIT_EVENT_LWLOCK_NOTIFY_SLRU_LOCK                  Backend_WaitEvent = 126 // AsyncCtlLock, NotifySLRULock
	Backend_WAIT_EVENT_LWLOCK_NOTIFY_QUEUE_LOCK                 Backend_WaitEvent = 127 // AsyncQueueLock, NotifyQueueLock
	Backend_WAIT_EVENT_LWLOCK_SERIALIZABLE_XACT_HASH_LOCK       Backend_WaitEvent = 128 // SerializableXactHashLock
	Backend_WAIT_EVENT_LWLOCK_SERIALIZABLE_FINISHED_LIST_LOCK   Backend_WaitEvent = 129 // SerializableFinishedListLock
	Backend_WAIT_EVENT_LWLOCK_SERIALIZABLE_PREDICATE_LIST_LOCK  Backend_WaitEvent = 130 // SerializablePredicateLockListLock, SerializablePredicateListLock
	Backend_WAIT_EVENT_LWLOCK_SERIAL_SLRU_LOCK                  Backend_WaitEvent = 131 // OldSerXidLock, SerialSLRULock
	Backend_WAIT_EVENT_LWLOCK_SYNC_REP_LOCK                     Backend_WaitEvent = 132 // SyncRepLock
	Backend_WAIT_EVENT_LWLOCK_BACKGROUND_WORKER_LOCK            Backend_WaitEvent = 133 // BackgroundWorkerLock
	Backend_WAIT_EVENT_LWLOCK_DYNAMIC_SHARD_MEMORY_CONTROL_LOCK Backend_WaitEvent = 134 // DynamicSharedMemoryControlLock
	Backend_WAIT_EVENT_LWLOCK_AUTO_FILE_LOCK                    Backend_WaitEvent = 135 // AutoFileLock
	Backend_WAIT_EVENT_LWLOCK_REPLICATION_SLOT_ALLOCATION_LOCK  Backend_WaitEvent = 136 // ReplicationSlotAllocationLock
	Backend_WAIT_EVENT_LWLOCK_REPLICATION_SLOT_CONTROL_LOCK     Backend_WaitEvent = 137 // ReplicationSlotControlLock
	Backend_WAIT_EVENT_LWLOCK_COMMIT_TS_SLRU_LOCK               Backend_WaitEvent = 138 // CommitTsControlLock, CommitTsSLRULock
	Backend_WAIT_EVENT_LWLOCK_COMMIT_TS_LOCK                    Backend_WaitEvent = 139 // CommitTsLock
	Backend_WAIT_EVENT_LWLOCK_REPLICATION_ORIGIN_LOCK           Backend_WaitEvent = 140 // ReplicationOriginLock
	Backend_WAIT_EVENT_LWLOCK_MULTI_XACT_TRUNCATION_LOCK        Backend_WaitEvent = 141 // MultiXactTruncationLock
	Backend_WAIT_EVENT_LWLOCK_OLD_SNAPSHOT_TIME_MAP_LOCK        Backend_WaitEvent = 142 // OldSnapshotTimeMapLock
	Backend_WAIT_EVENT_LWLOCK_BACKEND_RANDOM_LOCK               Backend_WaitEvent = 143 // BackendRandomLock (removed in 12)
	Backend_WAIT_EVENT_LWLOCK_LOGICAL_REP_WORKER_LOCK           Backend_WaitEvent = 144 // LogicalRepWorkerLock
	Backend_WAIT_EVENT_LWLOCK_XACT_TRUNCATION_LOCK              Backend_WaitEvent = 145 // CLogTruncationLock, XactTruncationLock
	// (Jumping the number here as 146- is taken by LWTRANCHE)
	Backend_WAIT_EVENT_LWLOCK_WRAP_LIMITS_VACUUM_LOCK Backend_WaitEvent = 180 // WrapLimitsVacuumLock
	Backend_WAIT_EVENT_LWLOCK_NOTIFY_QUEUE_TAIL_LOCK  Backend_WaitEvent = 181 // NotifyQueueTailLock
	// Source: lwlock.h (BuiltinTrancheIds), lwlock.c (BuiltinTrancheNames)
	Backend_WAIT_EVENT_LWTRANCHE_XACT_BUFFER               Backend_WaitEvent = 146 // clog, XactBuffer
	Backend_WAIT_EVENT_LWTRANCHE_COMMITTS_BUFFER           Backend_WaitEvent = 147 // commit_timestamp, CommitTSBuffer
	Backend_WAIT_EVENT_LWTRANCHE_SUBTRANS_BUFFER           Backend_WaitEvent = 148 // subtrans, SubtransBuffer
	Backend_WAIT_EVENT_LWTRANCHE_MULTIXACTOFFSET_BUFFER    Backend_WaitEvent = 149 // multixact_offset, MultiXactOffsetBuffer
	Backend_WAIT_EVENT_LWTRANCHE_MULTIXACTMEMBER_BUFFER    Backend_WaitEvent = 150 // multixact_member, MultiXactMemberBuffer
	Backend_WAIT_EVENT_LWTRANCHE_NOTIFY_BUFFER             Backend_WaitEvent = 151 // async, NotifyBuffer
	Backend_WAIT_EVENT_LWTRANCHE_SERIAL_BUFFER             Backend_WaitEvent = 152 // oldserxid, SerialBuffer
	Backend_WAIT_EVENT_LWTRANCHE_WAL_INSERT                Backend_WaitEvent = 153 // wal_insert, WALInsert
	Backend_WAIT_EVENT_LWTRANCHE_BUFFER_CONTENT            Backend_WaitEvent = 154 // buffer_content, BufferContent
	Backend_WAIT_EVENT_LWTRANCHE_BUFFER_IO                 Backend_WaitEvent = 155 // buffer_io, BufferIO
	Backend_WAIT_EVENT_LWTRANCHE_REPLICATION_ORIGIN_STATE  Backend_WaitEvent = 156 // replication_origin, ReplicationOriginState
	Backend_WAIT_EVENT_LWTRANCHE_REPLICATION_SLOT_IO       Backend_WaitEvent = 157 // replication_slot_io, ReplicationSlotIO
	Backend_WAIT_EVENT_LWTRANCHE_LOCK_FASTPATH             Backend_WaitEvent = 158 // proc, LockFastPath
	Backend_WAIT_EVENT_LWTRANCHE_BUFFER_MAPPING            Backend_WaitEvent = 159 // buffer_mapping, BufferMapping
	Backend_WAIT_EVENT_LWTRANCHE_LOCK_MANAGER              Backend_WaitEvent = 160 // lock_manager, LockManager
	Backend_WAIT_EVENT_LWTRANCHE_PREDICATE_LOCK_MANAGER    Backend_WaitEvent = 161 // predicate_lock_manager, PredicateLockManager
	Backend_WAIT_EVENT_LWTRANCHE_PARALLEL_HASH_JOIN        Backend_WaitEvent = 162 // parallel_hash_join, ParallelHashJoin
	Backend_WAIT_EVENT_LWTRANCHE_PARALLEL_QUERY_DSA        Backend_WaitEvent = 163 // parallel_query_dsa, ParallelQueryDSA
	Backend_WAIT_EVENT_LWTRANCHE_PER_SESSION_DSA           Backend_WaitEvent = 164 // session_dsa, PerSessionDSA
	Backend_WAIT_EVENT_LWTRANCHE_PER_SESSION_RECORD_TYPE   Backend_WaitEvent = 165 // session_record_table, PerSessionRecordType
	Backend_WAIT_EVENT_LWTRANCHE_PER_SESSION_RECORD_TYPMOD Backend_WaitEvent = 166 // session_typmod_table, PerSessionRecordTypmod
	Backend_WAIT_EVENT_LWTRANCHE_SHARED_TUPLESTORE         Backend_WaitEvent = 167 // shared_tuplestore, SharedTupleStore
	Backend_WAIT_EVENT_LWTRANCHE_SHARED_TIDBITMAP          Backend_WaitEvent = 168 // tbm, SharedTidBitmap
	Backend_WAIT_EVENT_LWTRANCHE_PARALLEL_APPEND           Backend_WaitEvent = 169 // parallel_append, ParallelAppend
	Backend_WAIT_EVENT_LWTRANCHE_PER_XACT_PREDICATE_LIST   Backend_WaitEvent = 170 // serializable_xact, PerXactPredicateList
	// Source: lock.h (LockTagType enum), lockfuncs.c (LockTagTypeNames variable)
	Backend_WAIT_EVENT_LOCKTAG_RELATION           Backend_WaitEvent = 200 // relation
	Backend_WAIT_EVENT_LOCKTAG_RELATION_EXTEND    Backend_WaitEvent = 201 // extend
	Backend_WAIT_EVENT_LOCKTAG_PAGE               Backend_WaitEvent = 202 // page
	Backend_WAIT_EVENT_LOCKTAG_TUPLE              Backend_WaitEvent = 203 // tuple
	Backend_WAIT_EVENT_LOCKTAG_TRANSACTION        Backend_WaitEvent = 204 // transactionid
	Backend_WAIT_EVENT_LOCKTAG_VIRTUALTRANSACTION Backend_WaitEvent = 205 // virtualxid
	Backend_WAIT_EVENT_LOCKTAG_SPECULATIVE_TOKEN  Backend_WaitEvent = 206 // speculative token, spectoken
	Backend_WAIT_EVENT_LOCKTAG_OBJECT             Backend_WaitEvent = 207 // object
	Backend_WAIT_EVENT_LOCKTAG_USERLOCK           Backend_WaitEvent = 208 // userlock
	Backend_WAIT_EVENT_LOCKTAG_ADVISORY           Backend_WaitEvent = 209 // advisory
	Backend_WAIT_EVENT_LOCKTAG_DABASE_FROZEN_IDS  Backend_WaitEvent = 210 // frozenid
	// Source: wait_event.c (pgstat_get_wait_event function)
	// Before 14: pgstat.c (pgstat_get_wait_event function)
	Backend_WAIT_EVENT_BUFFER_PIN Backend_WaitEvent = 300 // BufferPin
	// Source: wait_event.c (pgstat_get_wait_event function)
	// Before 14: pgstat.c (pgstat_get_wait_event function)
	Backend_WAIT_EVENT_EXTENSION Backend_WaitEvent = 400 // Extension
	// Wait events from extensions bundled with Postgres as part of contrib
	Backend_WAIT_EVENT_PG_STAT_STATEMENTS Backend_WaitEvent = 401 // pg_stat_statements
	// Source: wait_event.h (WaitEventActivity enum), wait_event.c (pgstat_get_wait_activity function)
	// Before 14: pgstat.h (WaitEventActivity enum), pgstat.c (pgstat_get_wait_activity function)
	Backend_WAIT_EVENT_ARCHIVER_MAIN         Backend_WaitEvent = 500 // ArchiverMain
	Backend_WAIT_EVENT_AUTOVACUUM_MAIN       Backend_WaitEvent = 501 // AutoVacuumMain
	Backend_WAIT_EVENT_BGWRITER_HIBERNATE    Backend_WaitEvent = 502 // BgWriterHibernate
	Backend_WAIT_EVENT_BGWRITER_MAIN         Backend_WaitEvent = 503 // BgWriterMain
	Backend_WAIT_EVENT_CHECKPOINTER_MAIN     Backend_WaitEvent = 504 // CheckpointerMain
	Backend_WAIT_EVENT_LOGICAL_APPLY_MAIN    Backend_WaitEvent = 505 // LogicalApplyMain
	Backend_WAIT_EVENT_LOGICAL_LAUNCHER_MAIN Backend_WaitEvent = 506 // LogicalLauncherMain
	Backend_WAIT_EVENT_PGSTAT_MAIN           Backend_WaitEvent = 507 // PgStatMain
	Backend_WAIT_EVENT_RECOVERY_WAL_ALL      Backend_WaitEvent = 508 // RecoveryWalAll
	Backend_WAIT_EVENT_RECOVERY_WAL_STREAM   Backend_WaitEvent = 509 // RecoveryWalStream
	Backend_WAIT_EVENT_SYSLOGGER_MAIN        Backend_WaitEvent = 510 // SysLoggerMain
	Backend_WAIT_EVENT_WAL_RECEIVER_MAIN     Backend_WaitEvent = 511 // WalReceiverMain
	Backend_WAIT_EVENT_WAL_SENDER_MAIN       Backend_WaitEvent = 512 // WalSenderMain
	Backend_WAIT_EVENT_WAL_WRITER_MAIN       Backend_WaitEvent = 513 // WalWriterMain
	// Source: wait_event.h (WaitEventClient enum), wait_event.c (pgstat_get_wait_client function)
	// Before 14: pgstat.h (WaitEventClient enum), pgstat.c (pgstat_get_wait_client function)
	Backend_WAIT_EVENT_CLIENT_READ              Backend_WaitEvent = 600 // ClientRead
	Backend_WAIT_EVENT_CLIENT_WRITE             Backend_WaitEvent = 601 // ClientWrite
	Backend_WAIT_EVENT_LIBPQWALRECEIVER_CONNECT Backend_WaitEvent = 602 // LibPQWalReceiverConnect
	Backend_WAIT_EVENT_LIBPQWALRECEIVER_RECEIVE Backend_WaitEvent = 603 // LibPQWalReceiverReceive
	Backend_WAIT_EVENT_SSL_OPEN_SERVER          Backend_WaitEvent = 604 // SSLOpenServer
	Backend_WAIT_EVENT_WAL_RECEIVER_WAIT_START  Backend_WaitEvent = 605 // WalReceiverWaitStart
	Backend_WAIT_EVENT_WAL_SENDER_WAIT_WAL      Backend_WaitEvent = 606 // WalSenderWaitForWAL
	Backend_WAIT_EVENT_WAL_SENDER_WRITE_DATA    Backend_WaitEvent = 607 // WalSenderWriteData
	Backend_WAIT_EVENT_GSS_OPEN_SERVER          Backend_WaitEvent = 608 // GSSOpenServer
	// Source: wait_event.h (WaitEventIPC enum), wait_event.c (pgstat_get_wait_ipc function)
	// Before 14: pgstat.h (WaitEventIPC enum), pgstat.c (pgstat_get_wait_ipc function)
	Backend_WAIT_EVENT_BGWORKER_SHUTDOWN             Backend_WaitEvent = 700 // BgWorkerShutdown
	Backend_WAIT_EVENT_BGWORKER_STARTUP              Backend_WaitEvent = 701 // BgWorkerStartup
	Backend_WAIT_EVENT_BTREE_PAGE                    Backend_WaitEvent = 702 // BtreePage
	Backend_WAIT_EVENT_XACT_GROUP_UPDATE             Backend_WaitEvent = 703 // ClogGroupUpdate, XactGroupUpdate
	Backend_WAIT_EVENT_EXECUTE_GATHER                Backend_WaitEvent = 704 // ExecuteGather
	Backend_WAIT_EVENT_HASH_BATCH_ALLOCATE           Backend_WaitEvent = 705 // Hash/Batch/Allocating, HashBatchAllocate
	Backend_WAIT_EVENT_HASH_BATCH_ELECT              Backend_WaitEvent = 706 // Hash/Batch/Electing, HashBatchElect
	Backend_WAIT_EVENT_HASH_BATCH_LOAD               Backend_WaitEvent = 707 // Hash/Batch/Loading, HashBatchLoad
	Backend_WAIT_EVENT_HASH_BUILD_ALLOCATE           Backend_WaitEvent = 708 // Hash/Build/Allocating, HashBuildAllocate
	Backend_WAIT_EVENT_HASH_BUILD_ELECT              Backend_WaitEvent = 709 // Hash/Build/Electing, HashBuildElect
	Backend_WAIT_EVENT_HASH_BUILD_HASH_INNER         Backend_WaitEvent = 710 // Hash/Build/HashingInner, HashBuildHashInner
	Backend_WAIT_EVENT_HASH_BUILD_HASH_OUTER         Backend_WaitEvent = 711 // Hash/Build/HashingOuter, HashBuildHashOuter
	Backend_WAIT_EVENT_HASH_GROW_BATCHES_ALLOCATE    Backend_WaitEvent = 712 // Hash/GrowBatches/Allocating, HashGrowBatchesAllocate
	Backend_WAIT_EVENT_HASH_GROW_BATCHES_DECIDE      Backend_WaitEvent = 713 // Hash/GrowBatches/Deciding, HashGrowBatchesDecide
	Backend_WAIT_EVENT_HASH_GROW_BATCHES_ELECT       Backend_WaitEvent = 714 // Hash/GrowBatches/Electing, HashGrowBatchesElect
	Backend_WAIT_EVENT_HASH_GROW_BATCHES_FINISH      Backend_WaitEvent = 715 // Hash/GrowBatches/Finishing, HashGrowBatchesFinish
	Backend_WAIT_EVENT_HASH_GROW_BATCHES_REPARTITION Backend_WaitEvent = 716 // Hash/GrowBatches/Repartitioning, HashGrowBatchesRepartition
	Backend_WAIT_EVENT_HASH_GROW_BUCKETS_ALLOCATE    Backend_WaitEvent = 717 // Hash/GrowBuckets/Allocating, HashGrowBucketsAllocate
	Backend_WAIT_EVENT_HASH_GROW_BUCKETS_ELECT       Backend_WaitEvent = 718 // Hash/GrowBuckets/Electing, HashGrowBucketsElect
	Backend_WAIT_EVENT_HASH_GROW_BUCKETS_REINSERT    Backend_WaitEvent = 719 // Hash/GrowBuckets/Reinserting, HashGrowBucketsReinsert
	Backend_WAIT_EVENT_LOGICAL_SYNC_DATA             Backend_WaitEvent = 720 // LogicalSyncData
	Backend_WAIT_EVENT_LOGICAL_SYNC_STATE_CHANGE     Backend_WaitEvent = 721 // LogicalSyncStateChange
	Backend_WAIT_EVENT_MQ_INTERNAL                   Backend_WaitEvent = 722 // MessageQueueInternal
	Backend_WAIT_EVENT_MQ_PUT_MESSAGE                Backend_WaitEvent = 723 // MessageQueuePutMessage
	Backend_WAIT_EVENT_MQ_RECEIVE                    Backend_WaitEvent = 724 // MessageQueueReceive
	Backend_WAIT_EVENT_MQ_SEND                       Backend_WaitEvent = 725 // MessageQueueSend
	Backend_WAIT_EVENT_PARALLEL_BITMAP_SCAN          Backend_WaitEvent = 726 // ParallelBitmapScan
	Backend_WAIT_EVENT_PARALLEL_CREATE_INDEX_SCAN    Backend_WaitEvent = 727 // ParallelCreateIndexScan
	Backend_WAIT_EVENT_PARALLEL_FINISH               Backend_WaitEvent = 728 // ParallelFinish
	Backend_WAIT_EVENT_PROCARRAY_GROUP_UPDATE        Backend_WaitEvent = 729 // ProcArrayGroupUpdate
	Backend_WAIT_EVENT_PROMOTE                       Backend_WaitEvent = 730 // Promote
	Backend_WAIT_EVENT_REPLICATION_ORIGIN_DROP       Backend_WaitEvent = 731 // ReplicationOriginDrop
	Backend_WAIT_EVENT_REPLICATION_SLOT_DROP         Backend_WaitEvent = 732 // ReplicationSlotDrop
	Backend_WAIT_EVENT_SAFE_SNAPSHOT                 Backend_WaitEvent = 733 // SafeSnapshot
	Backend_WAIT_EVENT_SYNC_REP                      Backend_WaitEvent = 734 // SyncRep
	Backend_WAIT_EVENT_CHECKPOINT_DONE               Backend_WaitEvent = 735 // CheckpointDone
	Backend_WAIT_EVENT_CHECKPOINT_START              Backend_WaitEvent = 736 // CheckpointStart
	Backend_WAIT_EVENT_APPEND_READY                  Backend_WaitEvent = 737 // AppendReady
	Backend_WAIT_EVENT_BACKEND_TERMINATION           Backend_WaitEvent = 738 // BackendTermination
	Backend_WAIT_EVENT_BACKUP_WAIT_WAL_ARCHIVE       Backend_WaitEvent = 739 // BackupWaitWalArchive
	Backend_WAIT_EVENT_RECOVERY_CONFLICT_SNAPSHOT    Backend_WaitEvent = 740 // RecoveryConflictSnapshot
	Backend_WAIT_EVENT_RECOVERY_CONFLICT_TABLESPACE  Backend_WaitEvent = 741 // RecoveryConflictTablespace
	Backend_WAIT_EVENT_RECOVERY_PAUSE                Backend_WaitEvent = 742 // RecoveryPause
	// Source: wait_event.h (WaitEventTimeout enum), wait_event.c (pgstat_get_wait_timeout function)
	// Before 14: pgstat.h (WaitEventTimeout enum), pgstat.c (pgstat_get_wait_timeout function)
	Backend_WAIT_EVENT_BASE_BACKUP_THROTTLE             Backend_WaitEvent = 800 // BaseBackupThrottle
	Backend_WAIT_EVENT_PG_SLEEP                         Backend_WaitEvent = 801 // PgSleep
	Backend_WAIT_EVENT_RECOVERY_APPLY_DELAY             Backend_WaitEvent = 802 // RecoveryApplyDelay
	Backend_WAIT_EVENT_RECOVERY_RETRIEVE_RETRY_INTERVAL Backend_WaitEvent = 803 // RecoveryRetrieveRetryInterval
	Backend_WAIT_EVENT_REGISTER_SYNC_REQUEST            Backend_WaitEvent = 804 // RegisterSyncRequest
	Backend_WAIT_EVENT_VACUUM_DELAY                     Backend_WaitEvent = 805 // VacuumDelay
	Backend_WAIT_EVENT_CHECKPOINT_WRITE_DELAY           Backend_WaitEvent = 806 // CheckpointWriteDelay
	// Source: wait_event.h (WaitEventIO enum), wait_event.c (pgstat_get_wait_io function)
	// Before 14: pgstat.h (WaitEventIO enum), pgstat.c (pgstat_get_wait_io function)
	Backend_WAIT_EVENT_BUFFILE_READ                    Backend_WaitEvent = 900 // BufFileRead
	Backend_WAIT_EVENT_BUFFILE_WRITE                   Backend_WaitEvent = 901 // BufFileWrite
	Backend_WAIT_EVENT_CONTROL_FILE_READ               Backend_WaitEvent = 902 // ControlFileRead
	Backend_WAIT_EVENT_CONTROL_FILE_SYNC               Backend_WaitEvent = 903 // ControlFileSync
	Backend_WAIT_EVENT_CONTROL_FILE_SYNC_UPDATE        Backend_WaitEvent = 904 // ControlFileSyncUpdate
	Backend_WAIT_EVENT_CONTROL_FILE_WRITE              Backend_WaitEvent = 905 // ControlFileWrite
	Backend_WAIT_EVENT_CONTROL_FILE_WRITE_UPDATE       Backend_WaitEvent = 906 // ControlFileWriteUpdate
	Backend_WAIT_EVENT_COPY_FILE_READ                  Backend_WaitEvent = 907 // CopyFileRead
	Backend_WAIT_EVENT_COPY_FILE_WRITE                 Backend_WaitEvent = 908 // CopyFileWrite
	Backend_WAIT_EVENT_DATA_FILE_EXTEND                Backend_WaitEvent = 909 // DataFileExtend
	Backend_WAIT_EVENT_DATA_FILE_FLUSH                 Backend_WaitEvent = 910 // DataFileFlush
	Backend_WAIT_EVENT_DATA_FILE_IMMEDIATE_SYNC        Backend_WaitEvent = 911 // DataFileImmediateSync
	Backend_WAIT_EVENT_DATA_FILE_PREFETCH              Backend_WaitEvent = 912 // DataFilePrefetch
	Backend_WAIT_EVENT_DATA_FILE_READ                  Backend_WaitEvent = 913 // DataFileRead
	Backend_WAIT_EVENT_DATA_FILE_SYNC                  Backend_WaitEvent = 914 // DataFileSync
	Backend_WAIT_EVENT_DATA_FILE_TRUNCATE              Backend_WaitEvent = 915 // DataFileTruncate
	Backend_WAIT_EVENT_DATA_FILE_WRITE                 Backend_WaitEvent = 916 // DataFileWrite
	Backend_WAIT_EVENT_DSM_FILL_ZERO_WRITE             Backend_WaitEvent = 917 // DSMFillZeroWrite
	Backend_WAIT_EVENT_LOCK_FILE_ADDTODATADIR_READ     Backend_WaitEvent = 918 // LockFileAddToDataDirRead
	Backend_WAIT_EVENT_LOCK_FILE_ADDTODATADIR_SYNC     Backend_WaitEvent = 919 // LockFileAddToDataDirSync
	Backend_WAIT_EVENT_LOCK_FILE_ADDTODATADIR_WRITE    Backend_WaitEvent = 920 // LockFileAddToDataDirWrite
	Backend_WAIT_EVENT_LOCK_FILE_CREATE_READ           Backend_WaitEvent = 921 // LockFileCreateRead
	Backend_WAIT_EVENT_LOCK_FILE_CREATE_SYNC           Backend_WaitEvent = 922 // LockFileCreateSync
	Backend_WAIT_EVENT_LOCK_FILE_CREATE_WRITE          Backend_WaitEvent = 923 // LockFileCreateWrite
	Backend_WAIT_EVENT_LOCK_FILE_RECHECKDATADIR_READ   Backend_WaitEvent = 924 // LockFileReCheckDataDirRead
	Backend_WAIT_EVENT_LOGICAL_REWRITE_CHECKPOINT_SYNC Backend_WaitEvent = 925 // LogicalRewriteCheckpointSync
	Backend_WAIT_EVENT_LOGICAL_REWRITE_MAPPING_SYNC    Backend_WaitEvent = 926 // LogicalRewriteMappingSync
	Backend_WAIT_EVENT_LOGICAL_REWRITE_MAPPING_WRITE   Backend_WaitEvent = 927 // LogicalRewriteMappingWrite
	Backend_WAIT_EVENT_LOGICAL_REWRITE_SYNC            Backend_WaitEvent = 928 // LogicalRewriteSync
	Backend_WAIT_EVENT_LOGICAL_REWRITE_TRUNCATE        Backend_WaitEvent = 929 // LogicalRewriteTruncate
	Backend_WAIT_EVENT_LOGICAL_REWRITE_WRITE           Backend_WaitEvent = 930 // LogicalRewriteWrite
	Backend_WAIT_EVENT_RELATION_MAP_READ               Backend_WaitEvent = 931 // RelationMapRead
	Backend_WAIT_EVENT_RELATION_MAP_SYNC               Backend_WaitEvent = 932 // RelationMapSync
	Backend_WAIT_EVENT_RELATION_MAP_WRITE              Backend_WaitEvent = 933 // RelationMapWrite
	Backend_WAIT_EVENT_REORDER_BUFFER_READ             Backend_WaitEvent = 934 // ReorderBufferRead
	Backend_WAIT_EVENT_REORDER_BUFFER_WRITE            Backend_WaitEvent = 935 // ReorderBufferWrite
	Backend_WAIT_EVENT_REORDER_LOGICAL_MAPPING_READ    Backend_WaitEvent = 936 // ReorderLogicalMappingRead
	Backend_WAIT_EVENT_REPLICATION_SLOT_READ           Backend_WaitEvent = 937 // ReplicationSlotRead
	Backend_WAIT_EVENT_REPLICATION_SLOT_RESTORE_SYNC   Backend_WaitEvent = 938 // ReplicationSlotRestoreSync
	Backend_WAIT_EVENT_REPLICATION_SLOT_SYNC           Backend_WaitEvent = 939 // ReplicationSlotSync
	Backend_WAIT_EVENT_REPLICATION_SLOT_WRITE          Backend_WaitEvent = 940 // ReplicationSlotWrite
	Backend_WAIT_EVENT_SLRU_FLUSH_SYNC                 Backend_WaitEvent = 941 // SLRUFlushSync
	Backend_WAIT_EVENT_SLRU_READ                       Backend_WaitEvent = 942 // SLRURead
	Backend_WAIT_EVENT_SLRU_SYNC                       Backend_WaitEvent = 943 // SLRUSync
	Backend_WAIT_EVENT_SLRU_WRITE                      Backend_WaitEvent = 944 // SLRUWrite
	Backend_WAIT_EVENT_SNAPBUILD_READ                  Backend_WaitEvent = 945 // SnapbuildRead
	Backend_WAIT_EVENT_SNAPBUILD_SYNC                  Backend_WaitEvent = 946 // SnapbuildSync
	Backend_WAIT_EVENT_SNAPBUILD_WRITE                 Backend_WaitEvent = 947 // SnapbuildWrite
	Backend_WAIT_EVENT_TIMELINE_HISTORY_FILE_SYNC      Backend_WaitEvent = 948 // TimelineHistoryFileSync
	Backend_WAIT_EVENT_TIMELINE_HISTORY_FILE_WRITE     Backend_WaitEvent = 949 // TimelineHistoryFileWrite
	Backend_WAIT_EVENT_TIMELINE_HISTORY_READ           Backend_WaitEvent = 950 // TimelineHistoryRead
	Backend_WAIT_EVENT_TIMELINE_HISTORY_SYNC           Backend_WaitEvent = 951 // TimelineHistorySync
	Backend_WAIT_EVENT_TIMELINE_HISTORY_WRITE          Backend_WaitEvent = 952 // TimelineHistoryWrite
	Backend_WAIT_EVENT_TWOPHASE_FILE_READ              Backend_WaitEvent = 953 // TwophaseFileRead
	Backend_WAIT_EVENT_TWOPHASE_FILE_SYNC              Backend_WaitEvent = 954 // TwophaseFileSync
	Backend_WAIT_EVENT_TWOPHASE_FILE_WRITE             Backend_WaitEvent = 955 // TwophaseFileWrite
	Backend_WAIT_EVENT_WALSENDER_TIMELINE_HISTORY_READ Backend_WaitEvent = 956 // WALSenderTimelineHistoryRead
	Backend_WAIT_EVENT_WAL_BOOTSTRAP_SYNC              Backend_WaitEvent = 957 // WALBootstrapSync
	Backend_WAIT_EVENT_WAL_BOOTSTRAP_WRITE             Backend_WaitEvent = 958 // WALBootstrapWrite
	Backend_WAIT_EVENT_WAL_COPY_READ                   Backend_WaitEvent = 959 // WALCopyRead
	Backend_WAIT_EVENT_WAL_COPY_SYNC                   Backend_WaitEvent = 960 // WALCopySync
	Backend_WAIT_EVENT_WAL_COPY_WRITE                  Backend_WaitEvent = 961 // WALCopyWrite
	Backend_WAIT_EVENT_WAL_INIT_SYNC                   Backend_WaitEvent = 962 // WALInitSync
	Backend_WAIT_EVENT_WAL_INIT_WRITE                  Backend_WaitEvent = 963 // WALInitWrite
	Backend_WAIT_EVENT_WAL_READ                        Backend_WaitEvent = 964 // WALRead
	Backend_WAIT_EVENT_WAL_SYNC                        Backend_WaitEvent = 965 // WALSync
	Backend_WAIT_EVENT_WAL_SYNC_METHOD_ASSIGN          Backend_WaitEvent = 966 // WALSyncMethodAssign
	Backend_WAIT_EVENT_WAL_WRITE                       Backend_WaitEvent = 967 // WALWrite
	Backend_WAIT_EVENT_PROC_SIGNAL_BARRIER             Backend_WaitEvent = 968 // ProcSignalBarrier (moved to IPC category in 13)
	// Custom third-party events for extensions and Postgres forks
	Backend_WAIT_EVENT_IO_XACT_SYNC        Backend_WaitEvent = 10000 // XactSync (AWS Aurora)
	Backend_WAIT_EVENT_AURORA_READER_MAIN  Backend_WaitEvent = 10001 // AuroraReaderMain (AWS Aurora)
	Backend_WAIT_EVENT_AURORA_RUNTIME_MAIN Backend_WaitEvent = 10002 // AuroraRuntimeMain (AWS Aurora)
	Backend_WAIT_EVENT_CITUS_QUERY_STATS   Backend_WaitEvent = 10003 // citus_query_stats (Citus Enterprise)
)

// Enum value maps for Backend_WaitEvent.
var (
	Backend_WaitEvent_name = map[int32]string{
		0:     "WAIT_EVENT_UNKNOWN",
		101:   "WAIT_EVENT_LWLOCK_SHMEM_INDEX_LOCK",
		102:   "WAIT_EVENT_LWLOCK_OID_GEN_LOCK",
		103:   "WAIT_EVENT_LWLOCK_XID_GEN_LOCK",
		104:   "WAIT_EVENT_LWLOCK_PROC_ARRAY_LOCK",
		105:   "WAIT_EVENT_LWLOCK_S_INVAL_READ_LOCK",
		106:   "WAIT_EVENT_LWLOCK_S_INVAL_WRITE_LOCK",
		107:   "WAIT_EVENT_LWLOCK_WAL_BUF_MAPPING_LOCK",
		108:   "WAIT_EVENT_LWLOCK_WAL_WRITE_LOCK",
		109:   "WAIT_EVENT_LWLOCK_CONTROL_FILE_LOCK",
		110:   "WAIT_EVENT_LWLOCK_CHECKPOINT_LOCK",
		111:   "WAIT_EVENT_LWLOCK_XACT_SLRU_LOCK",
		112:   "WAIT_EVENT_LWLOCK_SUBTRANS_SLRU_LOCK",
		113:   "WAIT_EVENT_LWLOCK_MULTI_XACT_GEN_LOCK",
		114:   "WAIT_EVENT_LWLOCK_MULTI_XACT_OFFSET_SLRU_LOCK",
		115:   "WAIT_EVENT_LWLOCK_MULTI_XACT_MEMBER_SLRU_LOCK",
		116:   "WAIT_EVENT_LWLOCK_REL_CACHE_INIT_LOCK",
		117:   "WAIT_EVENT_LWLOCK_CHECKPOINTER_COMM_LOCK",
		118:   "WAIT_EVENT_LWLOCK_TWO_PHASE_STATE_LOCK",
		119:   "WAIT_EVENT_LWLOCK_TABLESPACE_CREATE_LOCK",
		120:   "WAIT_EVENT_LWLOCK_BTREE_VACUUM_LOCK",
		121:   "WAIT_EVENT_LWLOCK_ADDIN_SHMEM_INIT_LOCK",
		122:   "WAIT_EVENT_LWLOCK_AUTOVACUUM_LOCK",
		123:   "WAIT_EVENT_LWLOCK_AUTOVACUUM_SCHEDULE_LOCK",
		124:   "WAIT_EVENT_LWLOCK_SYNC_SCAN_LOCK",
		125:   "WAIT_EVENT_LWLOCK_RELATION_MAPPING_LOCK",
		126:   "WAIT_EVENT_LWLOCK_NOTIFY_SLRU_LOCK",
		127:   "WAIT_EVENT_LWLOCK_NOTIFY_QUEUE_LOCK",
		128:   "WAIT_EVENT_LWLOCK_SERIALIZABLE_XACT_HASH_LOCK",
		129:   "WAIT_EVENT_LWLOCK_SERIALIZABLE_FINISHED_LIST_LOCK",
		130:   "WAIT_EVENT_LWLOCK_SERIALIZABLE_PREDICATE_LIST_LOCK",
		131:   "WAIT_EVENT_LWLOCK_SERIAL_SLRU_LOCK",
		132:   "WAIT_EVENT_LWLOCK_SYNC_REP_LOCK",
		133:   "WAIT_EVENT_LWLOCK_BACKGROUND_WORKER_LOCK",
		134:   "WAIT_EVENT_LWLOCK_DYNAMIC_SHARD_MEMORY_CONTROL_LOCK",
		135:   "WAIT_EVENT_LWLOCK_AUTO_FILE_LOCK",
		136:   "WAIT_EVENT_LWLOCK_REPLICATION_SLOT_ALLOCATION_LOCK",
		137:   "WAIT_EVENT_LWLOCK_REPLICATION_SLOT_CONTROL_LOCK",
		138:   "WAIT_EVENT_LWLOCK_COMMIT_TS_SLRU_LOCK",
		139:   "WAIT_EVENT_LWLOCK_COMMIT_TS_LOCK",
		140:   "WAIT_EVENT_LWLOCK_REPLICATION_ORIGIN_LOCK",
		141:   "WAIT_EVENT_LWLOCK_MULTI_XACT_TRUNCATION_LOCK",
		142:   "WAIT_EVENT_LWLOCK_OLD_SNAPSHOT_TIME_MAP_LOCK",
		143:   "WAIT_EVENT_LWLOCK_BACKEND_RANDOM_LOCK",
		144:   "WAIT_EVENT_LWLOCK_LOGICAL_REP_WORKER_LOCK",
		145:   "WAIT_EVENT_LWLOCK_XACT_TRUNCATION_LOCK",
		180:   "WAIT_EVENT_LWLOCK_WRAP_LIMITS_VACUUM_LOCK",
		181:   "WAIT_EVENT_LWLOCK_NOTIFY_QUEUE_TAIL_LOCK",
		146:   "WAIT_EVENT_LWTRANCHE_XACT_BUFFER",
		147:   "WAIT_EVENT_LWTRANCHE_COMMITTS_BUFFER",
		148:   "WAIT_EVENT_LWTRANCHE_SUBTRANS_BUFFER",
		149:   "WAIT_EVENT_LWTRANCHE_MULTIXACTOFFSET_BUFFER",
		150:   "WAIT_EVENT_LWTRANCHE_MULTIXACTMEMBER_BUFFER",
		151:   "WAIT_EVENT_LWTRANCHE_NOTIFY_BUFFER",
		152:   "WAIT_EVENT_LWTRANCHE_SERIAL_BUFFER",
		153:   "WAIT_EVENT_LWTRANCHE_WAL_INSERT",
		154:   "WAIT_EVENT_LWTRANCHE_BUFFER_CONTENT",
		155:   "WAIT_EVENT_LWTRANCHE_BUFFER_IO",
		156:   "WAIT_EVENT_LWTRANCHE_REPLICATION_ORIGIN_STATE",
		157:   "WAIT_EVENT_LWTRANCHE_REPLICATION_SLOT_IO",
		158:   "WAIT_EVENT_LWTRANCHE_LOCK_FASTPATH",
		159:   "WAIT_EVENT_LWTRANCHE_BUFFER_MAPPING",
		160:   "WAIT_EVENT_LWTRANCHE_LOCK_MANAGER",
		161:   "WAIT_EVENT_LWTRANCHE_PREDICATE_LOCK_MANAGER",
		162:   "WAIT_EVENT_LWTRANCHE_PARALLEL_HASH_JOIN",
		163:   "WAIT_EVENT_LWTRANCHE_PARALLEL_QUERY_DSA",
		164:   "WAIT_EVENT_LWTRANCHE_PER_SESSION_DSA",
		165:   "WAIT_EVENT_LWTRANCHE_PER_SESSION_RECORD_TYPE",
		166:   "WAIT_EVENT_LWTRANCHE_PER_SESSION_RECORD_TYPMOD",
		167:   "WAIT_EVENT_LWTRANCHE_SHARED_TUPLESTORE",
		168:   "WAIT_EVENT_LWTRANCHE_SHARED_TIDBITMAP",
		169:   "WAIT_EVENT_LWTRANCHE_PARALLEL_APPEND",
		170:   "WAIT_EVENT_LWTRANCHE_PER_XACT_PREDICATE_LIST",
		200:   "WAIT_EVENT_LOCKTAG_RELATION",
		201:   "WAIT_EVENT_LOCKTAG_RELATION_EXTEND",
		202:   "WAIT_EVENT_LOCKTAG_PAGE",
		203:   "WAIT_EVENT_LOCKTAG_TUPLE",
		204:   "WAIT_EVENT_LOCKTAG_TRANSACTION",
		205:   "WAIT_EVENT_LOCKTAG_VIRTUALTRANSACTION",
		206:   "WAIT_EVENT_LOCKTAG_SPECULATIVE_TOKEN",
		207:   "WAIT_EVENT_LOCKTAG_OBJECT",
		208:   "WAIT_EVENT_LOCKTAG_USERLOCK",
		209:   "WAIT_EVENT_LOCKTAG_ADVISORY",
		210:   "WAIT_EVENT_LOCKTAG_DABASE_FROZEN_IDS",
		300:   "WAIT_EVENT_BUFFER_PIN",
		400:   "WAIT_EVENT_EXTENSION",
		401:   "WAIT_EVENT_PG_STAT_STATEMENTS",
		500:   "WAIT_EVENT_ARCHIVER_MAIN",
		501:   "WAIT_EVENT_AUTOVACUUM_MAIN",
		502:   "WAIT_EVENT_BGWRITER_HIBERNATE",
		503:   "WAIT_EVENT_BGWRITER_MAIN",
		504:   "WAIT_EVENT_CHECKPOINTER_MAIN",
		505:   "WAIT_EVENT_LOGICAL_APPLY_MAIN",
		506:   "WAIT_EVENT_LOGICAL_LAUNCHER_MAIN",
		507:   "WAIT_EVENT_PGSTAT_MAIN",
		508:   "WAIT_EVENT_RECOVERY_WAL_ALL",
		509:   "WAIT_EVENT_RECOVERY_WAL_STREAM",
		510:   "WAIT_EVENT_SYSLOGGER_MAIN",
		511:   "WAIT_EVENT_WAL_RECEIVER_MAIN",
		512:   "WAIT_EVENT_WAL_SENDER_MAIN",
		513:   "WAIT_EVENT_WAL_WRITER_MAIN",
		600:   "WAIT_EVENT_CLIENT_READ",
		601:   "WAIT_EVENT_CLIENT_WRITE",
		602:   "WAIT_EVENT_LIBPQWALRECEIVER_CONNECT",
		603:   "WAIT_EVENT_LIBPQWALRECEIVER_RECEIVE",
		604:   "WAIT_EVENT_SSL_OPEN_SERVER",
		605:   "WAIT_EVENT_WAL_RECEIVER_WAIT_START",
		606:   "WAIT_EVENT_WAL_SENDER_WAIT_WAL",
		607:   "WAIT_EVENT_WAL_SENDER_WRITE_DATA",
		608:   "WAIT_EVENT_GSS_OPEN_SERVER",
		700:   "WAIT_EVENT_BGWORKER_SHUTDOWN",
		701:   "WAIT_EVENT_BGWORKER_STARTUP",
		702:   "WAIT_EVENT_BTREE_PAGE",
		703:   "WAIT_EVENT_XACT_GROUP_UPDATE",
		704:   "WAIT_EVENT_EXECUTE_GATHER",
		705:   "WAIT_EVENT_HASH_BATCH_ALLOCATE",
		706:   "WAIT_EVENT_HASH_BATCH_ELECT",
		707:   "WAIT_EVENT_HASH_BATCH_LOAD",
		708:   "WAIT_EVENT_HASH_BUILD_ALLOCATE",
		709:   "WAIT_EVENT_HASH_BUILD_ELECT",
		710:   "WAIT_EVENT_HASH_BUILD_HASH_INNER",
		711:   "WAIT_EVENT_HASH_BUILD_HASH_OUTER",
		712:   "WAIT_EVENT_HASH_GROW_BATCHES_ALLOCATE",
		713:   "WAIT_EVENT_HASH_GROW_BATCHES_DECIDE",
		714:   "WAIT_EVENT_HASH_GROW_BATCHES_ELECT",
		715:   "WAIT_EVENT_HASH_GROW_BATCHES_FINISH",
		716:   "WAIT_EVENT_HASH_GROW_BATCHES_REPARTITION",
		717:   "WAIT_EVENT_HASH_GROW_BUCKETS_ALLOCATE",
		718:   "WAIT_EVENT_HASH_GROW_BUCKETS_ELECT",
		719:   "WAIT_EVENT_HASH_GROW_BUCKETS_REINSERT",
		720:   "WAIT_EVENT_LOGICAL_SYNC_DATA",
		721:   "WAIT_EVENT_LOGICAL_SYNC_STATE_CHANGE",
		722:   "WAIT_EVENT_MQ_INTERNAL",
		723:   "WAIT_EVENT_MQ_PUT_MESSAGE",
		724:   "WAIT_EVENT_MQ_RECEIVE",
		725:   "WAIT_EVENT_MQ_SEND",
		726:   "WAIT_EVENT_PARALLEL_BITMAP_SCAN",
		727:   "WAIT_EVENT_PARALLEL_CREATE_INDEX_SCAN",
		728:   "WAIT_EVENT_PARALLEL_FINISH",
		729:   "WAIT_EVENT_PROCARRAY_GROUP_UPDATE",
		730:   "WAIT_EVENT_PROMOTE",
		731:   "WAIT_EVENT_REPLICATION_ORIGIN_DROP",
		732:   "WAIT_EVENT_REPLICATION_SLOT_DROP",
		733:   "WAIT_EVENT_SAFE_SNAPSHOT",
		734:   "WAIT_EVENT_SYNC_REP",
		735:   "WAIT_EVENT_CHECKPOINT_DONE",
		736:   "WAIT_EVENT_CHECKPOINT_START",
		737:   "WAIT_EVENT_APPEND_READY",
		738:   "WAIT_EVENT_BACKEND_TERMINATION",
		739:   "WAIT_EVENT_BACKUP_WAIT_WAL_ARCHIVE",
		740:   "WAIT_EVENT_RECOVERY_CONFLICT_SNAPSHOT",
		741:   "WAIT_EVENT_RECOVERY_CONFLICT_TABLESPACE",
		742:   "WAIT_EVENT_RECOVERY_PAUSE",
		800:   "WAIT_EVENT_BASE_BACKUP_THROTTLE",
		801:   "WAIT_EVENT_PG_SLEEP",
		802:   "WAIT_EVENT_RECOVERY_APPLY_DELAY",
		803:   "WAIT_EVENT_RECOVERY_RETRIEVE_RETRY_INTERVAL",
		804:   "WAIT_EVENT_REGISTER_SYNC_REQUEST",
		805:   "WAIT_EVENT_VACUUM_DELAY",
		806:   "WAIT_EVENT_CHECKPOINT_WRITE_DELAY",
		900:   "WAIT_EVENT_BUFFILE_READ",
		901:   "WAIT_EVENT_BUFFILE_WRITE",
		902:   "WAIT_EVENT_CONTROL_FILE_READ",
		903:   "WAIT_EVENT_CONTROL_FILE_SYNC",
		904:   "WAIT_EVENT_CONTROL_FILE_SYNC_UPDATE",
		905:   "WAIT_EVENT_CONTROL_FILE_WRITE",
		906:   "WAIT_EVENT_CONTROL_FILE_WRITE_UPDATE",
		907:   "WAIT_EVENT_COPY_FILE_READ",
		908:   "WAIT_EVENT_COPY_FILE_WRITE",
		909:   "WAIT_EVENT_DATA_FILE_EXTEND",
		910:   "WAIT_EVENT_DATA_FILE_FLUSH",
		911:   "WAIT_EVENT_DATA_FILE_IMMEDIATE_SYNC",
		912:   "WAIT_EVENT_DATA_FILE_PREFETCH",
		913:   "WAIT_EVENT_DATA_FILE_READ",
		914:   "WAIT_EVENT_DATA_FILE_SYNC",
		915:   "WAIT_EVENT_DATA_FILE_TRUNCATE",
		916:   "WAIT_EVENT_DATA_FILE_WRITE",
		917:   "WAIT_EVENT_DSM_FILL_ZERO_WRITE",
		918:   "WAIT_EVENT_LOCK_FILE_ADDTODATADIR_READ",
		919:   "WAIT_EVENT_LOCK_FILE_ADDTODATADIR_SYNC",
		920:   "WAIT_EVENT_LOCK_FILE_ADDTODATADIR_WRITE",
		921:   "WAIT_EVENT_LOCK_FILE_CREATE_READ",
		922:   "WAIT_EVENT_LOCK_FILE_CREATE_SYNC",
		923:   "WAIT_EVENT_LOCK_FILE_CREATE_WRITE",
		924:   "WAIT_EVENT_LOCK_FILE_RECHECKDATADIR_READ",
		925:   "WAIT_EVENT_LOGICAL_REWRITE_CHECKPOINT_SYNC",
		926:   "WAIT_EVENT_LOGICAL_REWRITE_MAPPING_SYNC",
		927:   "WAIT_EVENT_LOGICAL_REWRITE_MAPPING_WRITE",
		928:   "WAIT_EVENT_LOGICAL_REWRITE_SYNC",
		929:   "WAIT_EVENT_LOGICAL_REWRITE_TRUNCATE",
		930:   "WAIT_EVENT_LOGICAL_REWRITE_WRITE",
		931:   "WAIT_EVENT_RELATION_MAP_READ",
		932:   "WAIT_EVENT_RELATION_MAP_SYNC",
		933:   "WAIT_EVENT_RELATION_MAP_WRITE",
		934:   "WAIT_EVENT_REORDER_BUFFER_READ",
		935:   "WAIT_EVENT_REORDER_BUFFER_WRITE",
		936:   "WAIT_EVENT_REORDER_LOGICAL_MAPPING_READ",
		937:   "WAIT_EVENT_REPLICATION_SLOT_READ",
		938:   "WAIT_EVENT_REPLICATION_SLOT_RESTORE_SYNC",
		939:   "WAIT_EVENT_REPLICATION_SLOT_SYNC",
		940:   "WAIT_EVENT_REPLICATION_SLOT_WRITE",
		941:   "WAIT_EVENT_SLRU_FLUSH_SYNC",
		942:   "WAIT_EVENT_SLRU_READ",
		943:   "WAIT_EVENT_SLRU_SYNC",
		944:   "WAIT_EVENT_SLRU_WRITE",
		945:   "WAIT_EVENT_SNAPBUILD_READ",
		946:   "WAIT_EVENT_SNAPBUILD_SYNC",
		947:   "WAIT_EVENT_SNAPBUILD_WRITE",
		948:   "WAIT_EVENT_TIMELINE_HISTORY_FILE_SYNC",
		949:   "WAIT_EVENT_TIMELINE_HISTORY_FILE_WRITE",
		950:   "WAIT_EVENT_TIMELINE_HISTORY_READ",
		951:   "WAIT_EVENT_TIMELINE_HISTORY_SYNC",
		952:   "WAIT_EVENT_TIMELINE_HISTORY_WRITE",
		953:   "WAIT_EVENT_TWOPHASE_FILE_READ",
		954:   "WAIT_EVENT_TWOPHASE_FILE_SYNC",
		955:   "WAIT_EVENT_TWOPHASE_FILE_WRITE",
		956:   "WAIT_EVENT_WALSENDER_TIMELINE_HISTORY_READ",
		957:   "WAIT_EVENT_WAL_BOOTSTRAP_SYNC",
		958:   "WAIT_EVENT_WAL_BOOTSTRAP_WRITE",
		959:   "WAIT_EVENT_WAL_COPY_READ",
		960:   "WAIT_EVENT_WAL_COPY_SYNC",
		961:   "WAIT_EVENT_WAL_COPY_WRITE",
		962:   "WAIT_EVENT_WAL_INIT_SYNC",
		963:   "WAIT_EVENT_WAL_INIT_WRITE",
		964:   "WAIT_EVENT_WAL_READ",
		965:   "WAIT_EVENT_WAL_SYNC",
		966:   "WAIT_EVENT_WAL_SYNC_METHOD_ASSIGN",
		967:   "WAIT_EVENT_WAL_WRITE",
		968:   "WAIT_EVENT_PROC_SIGNAL_BARRIER",
		10000: "WAIT_EVENT_IO_XACT_SYNC",
		10001: "WAIT_EVENT_AURORA_READER_MAIN",
		10002: "WAIT_EVENT_AURORA_RUNTIME_MAIN",
		10003: "WAIT_EVENT_CITUS_QUERY_STATS",
	}
	Backend_WaitEvent_value = map[string]int32{
		"WAIT_EVENT_UNKNOWN":                                  0,
		"WAIT_EVENT_LWLOCK_SHMEM_INDEX_LOCK":                  101,
		"WAIT_EVENT_LWLOCK_OID_GEN_LOCK":                      102,
		"WAIT_EVENT_LWLOCK_XID_GEN_LOCK":                      103,
		"WAIT_EVENT_LWLOCK_PROC_ARRAY_LOCK":                   104,
		"WAIT_EVENT_LWLOCK_S_INVAL_READ_LOCK":                 105,
		"WAIT_EVENT_LWLOCK_S_INVAL_WRITE_LOCK":                106,
		"WAIT_EVENT_LWLOCK_WAL_BUF_MAPPING_LOCK":              107,
		"WAIT_EVENT_LWLOCK_WAL_WRITE_LOCK":                    108,
		"WAIT_EVENT_LWLOCK_CONTROL_FILE_LOCK":                 109,
		"WAIT_EVENT_LWLOCK_CHECKPOINT_LOCK":                   110,
		"WAIT_EVENT_LWLOCK_XACT_SLRU_LOCK":                    111,
		"WAIT_EVENT_LWLOCK_SUBTRANS_SLRU_LOCK":                112,
		"WAIT_EVENT_LWLOCK_MULTI_XACT_GEN_LOCK":               113,
		"WAIT_EVENT_LWLOCK_MULTI_XACT_OFFSET_SLRU_LOCK":       114,
		"WAIT_EVENT_LWLOCK_MULTI_XACT_MEMBER_SLRU_LOCK":       115,
		"WAIT_EVENT_LWLOCK_REL_CACHE_INIT_LOCK":               116,
		"WAIT_EVENT_LWLOCK_CHECKPOINTER_COMM_LOCK":            117,
		"WAIT_EVENT_LWLOCK_TWO_PHASE_STATE_LOCK":              118,
		"WAIT_EVENT_LWLOCK_TABLESPACE_CREATE_LOCK":            119,
		"WAIT_EVENT_LWLOCK_BTREE_VACUUM_LOCK":                 120,
		"WAIT_EVENT_LWLOCK_ADDIN_SHMEM_INIT_LOCK":             121,
		"WAIT_EVENT_LWLOCK_AUTOVACUUM_LOCK":                   122,
		"WAIT_EVENT_LWLOCK_AUTOVACUUM_SCHEDULE_LOCK":          123,
		"WAIT_EVENT_LWLOCK_SYNC_SCAN_LOCK":                    124,
		"WAIT_EVENT_LWLOCK_RELATION_MAPPING_LOCK":             125,
		"WAIT_EVENT_LWLOCK_NOTIFY_SLRU_LOCK":                  126,
		"WAIT_EVENT_LWLOCK_NOTIFY_QUEUE_LOCK":                 127,
		"WAIT_EVENT_LWLOCK_SERIALIZABLE_XACT_HASH_LOCK":       128,
		"WAIT_EVENT_LWLOCK_SERIALIZABLE_FINISHED_LIST_LOCK":   129,
		"WAIT_EVENT_LWLOCK_SERIALIZABLE_PREDICATE_LIST_LOCK":  130,
		"WAIT_EVENT_LWLOCK_SERIAL_SLRU_LOCK":                  131,
		"WAIT_EVENT_LWLOCK_SYNC_REP_LOCK":                     132,
		"WAIT_EVENT_LWLOCK_BACKGROUND_WORKER_LOCK":            133,
		"WAIT_EVENT_LWLOCK_DYNAMIC_SHARD_MEMORY_CONTROL_LOCK": 134,
		"WAIT_EVENT_LWLOCK_AUTO_FILE_LOCK":                    135,
		"WAIT_EVENT_LWLOCK_REPLICATION_SLOT_ALLOCATION_LOCK":  136,
		"WAIT_EVENT_LWLOCK_REPLICATION_SLOT_CONTROL_LOCK":     137,
		"WAIT_EVENT_LWLOCK_COMMIT_TS_SLRU_LOCK":               138,
		"WAIT_EVENT_LWLOCK_COMMIT_TS_LOCK":                    139,
		"WAIT_EVENT_LWLOCK_REPLICATION_ORIGIN_LOCK":           140,
		"WAIT_EVENT_LWLOCK_MULTI_XACT_TRUNCATION_LOCK":        141,
		"WAIT_EVENT_LWLOCK_OLD_SNAPSHOT_TIME_MAP_LOCK":        142,
		"WAIT_EVENT_LWLOCK_BACKEND_RANDOM_LOCK":               143,
		"WAIT_EVENT_LWLOCK_LOGICAL_REP_WORKER_LOCK":           144,
		"WAIT_EVENT_LWLOCK_XACT_TRUNCATION_LOCK":              145,
		"WAIT_EVENT_LWLOCK_WRAP_LIMITS_VACUUM_LOCK":           180,
		"WAIT_EVENT_LWLOCK_NOTIFY_QUEUE_TAIL_LOCK":            181,
		"WAIT_EVENT_LWTRANCHE_XACT_BUFFER":                    146,
		"WAIT_EVENT_LWTRANCHE_COMMITTS_BUFFER":                147,
		"WAIT_EVENT_LWTRANCHE_SUBTRANS_BUFFER":                148,
		"WAIT_EVENT_LWTRANCHE_MULTIXACTOFFSET_BUFFER":         149,
		"WAIT_EVENT_LWTRANCHE_MULTIXACTMEMBER_BUFFER":         150,
		"WAIT_EVENT_LWTRANCHE_NOTIFY_BUFFER":                  151,
		"WAIT_EVENT_LWTRANCHE_SERIAL_BUFFER":                  152,
		"WAIT_EVENT_LWTRANCHE_WAL_INSERT":                     153,
		"WAIT_EVENT_LWTRANCHE_BUFFER_CONTENT":                 154,
		"WAIT_EVENT_LWTRANCHE_BUFFER_IO":                      155,
		"WAIT_EVENT_LWTRANCHE_REPLICATION_ORIGIN_STATE":       156,
		"WAIT_EVENT_LWTRANCHE_REPLICATION_SLOT_IO":            157,
		"WAIT_EVENT_LWTRANCHE_LOCK_FASTPATH":                  158,
		"WAIT_EVENT_LWTRANCHE_BUFFER_MAPPING":                 159,
		"WAIT_EVENT_LWTRANCHE_LOCK_MANAGER":                   160,
		"WAIT_EVENT_LWTRANCHE_PREDICATE_LOCK_MANAGER":         161,
		"WAIT_EVENT_LWTRANCHE_PARALLEL_HASH_JOIN":             162,
		"WAIT_EVENT_LWTRANCHE_PARALLEL_QUERY_DSA":             163,
		"WAIT_EVENT_LWTRANCHE_PER_SESSION_DSA":                164,
		"WAIT_EVENT_LWTRANCHE_PER_SESSION_RECORD_TYPE":        165,
		"WAIT_EVENT_LWTRANCHE_PER_SESSION_RECORD_TYPMOD":      166,
		"WAIT_EVENT_LWTRANCHE_SHARED_TUPLESTORE":              167,
		"WAIT_EVENT_LWTRANCHE_SHARED_TIDBITMAP":               168,
		"WAIT_EVENT_LWTRANCHE_PARALLEL_APPEND":                169,
		"WAIT_EVENT_LWTRANCHE_PER_XACT_PREDICATE_LIST":        170,
		"WAIT_EVENT_LOCKTAG_RELATION":                         200,
		"WAIT_EVENT_LOCKTAG_RELATION_EXTEND":                  201,
		"WAIT_EVENT_LOCKTAG_PAGE":                             202,
		"WAIT_EVENT_LOCKTAG_TUPLE":                            203,
		"WAIT_EVENT_LOCKTAG_TRANSACTION":                      204,
		"WAIT_EVENT_LOCKTAG_VIRTUALTRANSACTION":               205,
		"WAIT_EVENT_LOCKTAG_SPECULATIVE_TOKEN":                206,
		"WAIT_EVENT_LOCKTAG_OBJECT":                           207,
		"WAIT_EVENT_LOCKTAG_USERLOCK":                         208,
		"WAIT_EVENT_LOCKTAG_ADVISORY":                         209,
		"WAIT_EVENT_LOCKTAG_DABASE_FROZEN_IDS":                210,
		"WAIT_EVENT_BUFFER_PIN":                               300,
		"WAIT_EVENT_EXTENSION":                                400,
		"WAIT_EVENT_PG_STAT_STATEMENTS":                       401,
		"WAIT_EVENT_ARCHIVER_MAIN":                            500,
		"WAIT_EVENT_AUTOVACUUM_MAIN":                          501,
		"WAIT_EVENT_BGWRITER_HIBERNATE":                       502,
		"WAIT_EVENT_BGWRITER_MAIN":                            503,
		"WAIT_EVENT_CHECKPOINTER_MAIN":                        504,
		"WAIT_EVENT_LOGICAL_APPLY_MAIN":                       505,
		"WAIT_EVENT_LOGICAL_LAUNCHER_MAIN":                    506,
		"WAIT_EVENT_PGSTAT_MAIN":                              507,
		"WAIT_EVENT_RECOVERY_WAL_ALL":                         508,
		"WAIT_EVENT_RECOVERY_WAL_STREAM":                      509,
		"WAIT_EVENT_SYSLOGGER_MAIN":                           510,
		"WAIT_EVENT_WAL_RECEIVER_MAIN":                        511,
		"WAIT_EVENT_WAL_SENDER_MAIN":                          512,
		"WAIT_EVENT_WAL_WRITER_MAIN":                          513,
		"WAIT_EVENT_CLIENT_READ":                              600,
		"WAIT_EVENT_CLIENT_WRITE":                             601,
		"WAIT_EVENT_LIBPQWALRECEIVER_CONNECT":                 602,
		"WAIT_EVENT_LIBPQWALRECEIVER_RECEIVE":                 603,
		"WAIT_EVENT_SSL_OPEN_SERVER":                          604,
		"WAIT_EVENT_WAL_RECEIVER_WAIT_START":                  605,
		"WAIT_EVENT_WAL_SENDER_WAIT_WAL":                      606,
		"WAIT_EVENT_WAL_SENDER_WRITE_DATA":                    607,
		"WAIT_EVENT_GSS_OPEN_SERVER":                          608,
		"WAIT_EVENT_BGWORKER_SHUTDOWN":                        700,
		"WAIT_EVENT_BGWORKER_STARTUP":                         701,
		"WAIT_EVENT_BTREE_PAGE":                               702,
		"WAIT_EVENT_XACT_GROUP_UPDATE":                        703,
		"WAIT_EVENT_EXECUTE_GATHER":                           704,
		"WAIT_EVENT_HASH_BATCH_ALLOCATE":                      705,
		"WAIT_EVENT_HASH_BATCH_ELECT":                         706,
		"WAIT_EVENT_HASH_BATCH_LOAD":                          707,
		"WAIT_EVENT_HASH_BUILD_ALLOCATE":                      708,
		"WAIT_EVENT_HASH_BUILD_ELECT":                         709,
		"WAIT_EVENT_HASH_BUILD_HASH_INNER":                    710,
		"WAIT_EVENT_HASH_BUILD_HASH_OUTER":                    711,
		"WAIT_EVENT_HASH_GROW_BATCHES_ALLOCATE":               712,
		"WAIT_EVENT_HASH_GROW_BATCHES_DECIDE":                 713,
		"WAIT_EVENT_HASH_GROW_BATCHES_ELECT":                  714,
		"WAIT_EVENT_HASH_GROW_BATCHES_FINISH":                 715,
		"WAIT_EVENT_HASH_GROW_BATCHES_REPARTITION":            716,
		"WAIT_EVENT_HASH_GROW_BUCKETS_ALLOCATE":               717,
		"WAIT_EVENT_HASH_GROW_BUCKETS_ELECT":                  718,
		"WAIT_EVENT_HASH_GROW_BUCKETS_REINSERT":               719,
		"WAIT_EVENT_LOGICAL_SYNC_DATA":                        720,
		"WAIT_EVENT_LOGICAL_SYNC_STATE_CHANGE":                721,
		"WAIT_EVENT_MQ_INTERNAL":                              722,
		"WAIT_EVENT_MQ_PUT_MESSAGE":                           723,
		"WAIT_EVENT_MQ_RECEIVE":                               724,
		"WAIT_EVENT_MQ_SEND":                                  725,
		"WAIT_EVENT_PARALLEL_BITMAP_SCAN":                     726,
		"WAIT_EVENT_PARALLEL_CREATE_INDEX_SCAN":               727,
		"WAIT_EVENT_PARALLEL_FINISH":                          728,
		"WAIT_EVENT_PROCARRAY_GROUP_UPDATE":                   729,
		"WAIT_EVENT_PROMOTE":                                  730,
		"WAIT_EVENT_REPLICATION_ORIGIN_DROP":                  731,
		"WAIT_EVENT_REPLICATION_SLOT_DROP":                    732,
		"WAIT_EVENT_SAFE_SNAPSHOT":                            733,
		"WAIT_EVENT_SYNC_REP":                                 734,
		"WAIT_EVENT_CHECKPOINT_DONE":                          735,
		"WAIT_EVENT_CHECKPOINT_START":                         736,
		"WAIT_EVENT_APPEND_READY":                             737,
		"WAIT_EVENT_BACKEND_TERMINATION":                      738,
		"WAIT_EVENT_BACKUP_WAIT_WAL_ARCHIVE":                  739,
		"WAIT_EVENT_RECOVERY_CONFLICT_SNAPSHOT":               740,
		"WAIT_EVENT_RECOVERY_CONFLICT_TABLESPACE":             741,
		"WAIT_EVENT_RECOVERY_PAUSE":                           742,
		"WAIT_EVENT_BASE_BACKUP_THROTTLE":                     800,
		"WAIT_EVENT_PG_SLEEP":                                 801,
		"WAIT_EVENT_RECOVERY_APPLY_DELAY":                     802,
		"WAIT_EVENT_RECOVERY_RETRIEVE_RETRY_INTERVAL":         803,
		"WAIT_EVENT_REGISTER_SYNC_REQUEST":                    804,
		"WAIT_EVENT_VACUUM_DELAY":                             805,
		"WAIT_EVENT_CHECKPOINT_WRITE_DELAY":                   806,
		"WAIT_EVENT_BUFFILE_READ":                             900,
		"WAIT_EVENT_BUFFILE_WRITE":                            901,
		"WAIT_EVENT_CONTROL_FILE_READ":                        902,
		"WAIT_EVENT_CONTROL_FILE_SYNC":                        903,
		"WAIT_EVENT_CONTROL_FILE_SYNC_UPDATE":                 904,
		"WAIT_EVENT_CONTROL_FILE_WRITE":                       905,
		"WAIT_EVENT_CONTROL_FILE_WRITE_UPDATE":                906,
		"WAIT_EVENT_COPY_FILE_READ":                           907,
		"WAIT_EVENT_COPY_FILE_WRITE":                          908,
		"WAIT_EVENT_DATA_FILE_EXTEND":                         909,
		"WAIT_EVENT_DATA_FILE_FLUSH":                          910,
		"WAIT_EVENT_DATA_FILE_IMMEDIATE_SYNC":                 911,
		"WAIT_EVENT_DATA_FILE_PREFETCH":                       912,
		"WAIT_EVENT_DATA_FILE_READ":                           913,
		"WAIT_EVENT_DATA_FILE_SYNC":                           914,
		"WAIT_EVENT_DATA_FILE_TRUNCATE":                       915,
		"WAIT_EVENT_DATA_FILE_WRITE":                          916,
		"WAIT_EVENT_DSM_FILL_ZERO_WRITE":                      917,
		"WAIT_EVENT_LOCK_FILE_ADDTODATADIR_READ":              918,
		"WAIT_EVENT_LOCK_FILE_ADDTODATADIR_SYNC":              919,
		"WAIT_EVENT_LOCK_FILE_ADDTODATADIR_WRITE":             920,
		"WAIT_EVENT_LOCK_FILE_CREATE_READ":                    921,
		"WAIT_EVENT_LOCK_FILE_CREATE_SYNC":                    922,
		"WAIT_EVENT_LOCK_FILE_CREATE_WRITE":                   923,
		"WAIT_EVENT_LOCK_FILE_RECHECKDATADIR_READ":            924,
		"WAIT_EVENT_LOGICAL_REWRITE_CHECKPOINT_SYNC":          925,
		"WAIT_EVENT_LOGICAL_REWRITE_MAPPING_SYNC":             926,
		"WAIT_EVENT_LOGICAL_REWRITE_MAPPING_WRITE":            927,
		"WAIT_EVENT_LOGICAL_REWRITE_SYNC":                     928,
		"WAIT_EVENT_LOGICAL_REWRITE_TRUNCATE":                 929,
		"WAIT_EVENT_LOGICAL_REWRITE_WRITE":                    930,
		"WAIT_EVENT_RELATION_MAP_READ":                        931,
		"WAIT_EVENT_RELATION_MAP_SYNC":                        932,
		"WAIT_EVENT_RELATION_MAP_WRITE":                       933,
		"WAIT_EVENT_REORDER_BUFFER_READ":                      934,
		"WAIT_EVENT_REORDER_BUFFER_WRITE":                     935,
		"WAIT_EVENT_REORDER_LOGICAL_MAPPING_READ":             936,
		"WAIT_EVENT_REPLICATION_SLOT_READ":                    937,
		"WAIT_EVENT_REPLICATION_SLOT_RESTORE_SYNC":            938,
		"WAIT_EVENT_REPLICATION_SLOT_SYNC":                    939,
		"WAIT_EVENT_REPLICATION_SLOT_WRITE":                   940,
		"WAIT_EVENT_SLRU_FLUSH_SYNC":                          941,
		"WAIT_EVENT_SLRU_READ":                                942,
		"WAIT_EVENT_SLRU_SYNC":                                943,
		"WAIT_EVENT_SLRU_WRITE":                               944,
		"WAIT_EVENT_SNAPBUILD_READ":                           945,
		"WAIT_EVENT_SNAPBUILD_SYNC":                           946,
		"WAIT_EVENT_SNAPBUILD_WRITE":                          947,
		"WAIT_EVENT_TIMELINE_HISTORY_FILE_SYNC":               948,
		"WAIT_EVENT_TIMELINE_HISTORY_FILE_WRITE":              949,
		"WAIT_EVENT_TIMELINE_HISTORY_READ":                    950,
		"WAIT_EVENT_TIMELINE_HISTORY_SYNC":                    951,
		"WAIT_EVENT_TIMELINE_HISTORY_WRITE":                   952,
		"WAIT_EVENT_TWOPHASE_FILE_READ":                       953,
		"WAIT_EVENT_TWOPHASE_FILE_SYNC":                       954,
		"WAIT_EVENT_TWOPHASE_FILE_WRITE":                      955,
		"WAIT_EVENT_WALSENDER_TIMELINE_HISTORY_READ":          956,
		"WAIT_EVENT_WAL_BOOTSTRAP_SYNC":                       957,
		"WAIT_EVENT_WAL_BOOTSTRAP_WRITE":                      958,
		"WAIT_EVENT_WAL_COPY_READ":                            959,
		"WAIT_EVENT_WAL_COPY_SYNC":                            960,
		"WAIT_EVENT_WAL_COPY_WRITE":                           961,
		"WAIT_EVENT_WAL_INIT_SYNC":                            962,
		"WAIT_EVENT_WAL_INIT_WRITE":                           963,
		"WAIT_EVENT_WAL_READ":                                 964,
		"WAIT_EVENT_WAL_SYNC":                                 965,
		"WAIT_EVENT_WAL_SYNC_METHOD_ASSIGN":                   966,
		"WAIT_EVENT_WAL_WRITE":                                967,
		"WAIT_EVENT_PROC_SIGNAL_BARRIER":                      968,
		"WAIT_EVENT_IO_XACT_SYNC":                             10000,
		"WAIT_EVENT_AURORA_READER_MAIN":                       10001,
		"WAIT_EVENT_AURORA_RUNTIME_MAIN":                      10002,
		"WAIT_EVENT_CITUS_QUERY_STATS":                        10003,
	}
)

func (x Backend_WaitEvent) Enum() *Backend_WaitEvent {
	p := new(Backend_WaitEvent)
	*p = x
	return p
}

func (x Backend_WaitEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Backend_WaitEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_compact_activity_snapshot_proto_enumTypes[1].Descriptor()
}

func (Backend_WaitEvent) Type() protoreflect.EnumType {
	return &file_compact_activity_snapshot_proto_enumTypes[1]
}

func (x Backend_WaitEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Backend_WaitEvent.Descriptor instead.
func (Backend_WaitEvent) EnumDescriptor() ([]byte, []int) {
	return file_compact_activity_snapshot_proto_rawDescGZIP(), []int{1, 1}
}

type VacuumProgressStatistic_VacuumPhase int32

const (
	VacuumProgressStatistic_INITIALIZING  VacuumProgressStatistic_VacuumPhase = 0 // "initializing"
	VacuumProgressStatistic_SCAN_HEAP     VacuumProgressStatistic_VacuumPhase = 1 // "scanning heap"
	VacuumProgressStatistic_VACUUM_INDEX  VacuumProgressStatistic_VacuumPhase = 2 // "vacuuming indexes"
	VacuumProgressStatistic_VACUUM_HEAP   VacuumProgressStatistic_VacuumPhase = 3 // "vacuuming heap"
	VacuumProgressStatistic_INDEX_CLEANUP VacuumProgressStatistic_VacuumPhase = 4 // "cleaning up indexes"
	VacuumProgressStatistic_TRUNCATE      VacuumProgressStatistic_VacuumPhase = 5 // "truncating heap"
	VacuumProgressStatistic_FINAL_CLEANUP VacuumProgressStatistic_VacuumPhase = 6 // "performing final cleanup"
)

// Enum value maps for VacuumProgressStatistic_VacuumPhase.
var (
	VacuumProgressStatistic_VacuumPhase_name = map[int32]string{
		0: "INITIALIZING",
		1: "SCAN_HEAP",
		2: "VACUUM_INDEX",
		3: "VACUUM_HEAP",
		4: "INDEX_CLEANUP",
		5: "TRUNCATE",
		6: "FINAL_CLEANUP",
	}
	VacuumProgressStatistic_VacuumPhase_value = map[string]int32{
		"INITIALIZING":  0,
		"SCAN_HEAP":     1,
		"VACUUM_INDEX":  2,
		"VACUUM_HEAP":   3,
		"INDEX_CLEANUP": 4,
		"TRUNCATE":      5,
		"FINAL_CLEANUP": 6,
	}
)

func (x VacuumProgressStatistic_VacuumPhase) Enum() *VacuumProgressStatistic_VacuumPhase {
	p := new(VacuumProgressStatistic_VacuumPhase)
	*p = x
	return p
}

func (x VacuumProgressStatistic_VacuumPhase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VacuumProgressStatistic_VacuumPhase) Descriptor() protoreflect.EnumDescriptor {
	return file_compact_activity_snapshot_proto_enumTypes[2].Descriptor()
}

func (VacuumProgressStatistic_VacuumPhase) Type() protoreflect.EnumType {
	return &file_compact_activity_snapshot_proto_enumTypes[2]
}

func (x VacuumProgressStatistic_VacuumPhase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VacuumProgressStatistic_VacuumPhase.Descriptor instead.
func (VacuumProgressStatistic_VacuumPhase) EnumDescriptor() ([]byte, []int) {
	return file_compact_activity_snapshot_proto_rawDescGZIP(), []int{3, 0}
}

type CompactActivitySnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostgresVersion *PostgresVersion `protobuf:"bytes,1,opt,name=postgres_version,json=postgresVersion,proto3" json:"postgres_version,omitempty"`
	Backends        []*Backend       `protobuf:"bytes,2,rep,name=backends,proto3" json:"backends,omitempty"`
	// Timestamp of the previous activity snapshot (collected_at) to support the
	// receiver marking values as having been last visible with the prior snapshot
	PrevActivitySnapshotAt     *timestamppb.Timestamp       `protobuf:"bytes,3,opt,name=prev_activity_snapshot_at,json=prevActivitySnapshotAt,proto3" json:"prev_activity_snapshot_at,omitempty"`
	VacuumProgressInformations []*VacuumProgressInformation `protobuf:"bytes,10,rep,name=vacuum_progress_informations,json=vacuumProgressInformations,proto3" json:"vacuum_progress_informations,omitempty"`
	VacuumProgressStatistics   []*VacuumProgressStatistic   `protobuf:"bytes,11,rep,name=vacuum_progress_statistics,json=vacuumProgressStatistics,proto3" json:"vacuum_progress_statistics,omitempty"`
}

func (x *CompactActivitySnapshot) Reset() {
	*x = CompactActivitySnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compact_activity_snapshot_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactActivitySnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactActivitySnapshot) ProtoMessage() {}

func (x *CompactActivitySnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_compact_activity_snapshot_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactActivitySnapshot.ProtoReflect.Descriptor instead.
func (*CompactActivitySnapshot) Descriptor() ([]byte, []int) {
	return file_compact_activity_snapshot_proto_rawDescGZIP(), []int{0}
}

func (x *CompactActivitySnapshot) GetPostgresVersion() *PostgresVersion {
	if x != nil {
		return x.PostgresVersion
	}
	return nil
}

func (x *CompactActivitySnapshot) GetBackends() []*Backend {
	if x != nil {
		return x.Backends
	}
	return nil
}

func (x *CompactActivitySnapshot) GetPrevActivitySnapshotAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PrevActivitySnapshotAt
	}
	return nil
}

func (x *CompactActivitySnapshot) GetVacuumProgressInformations() []*VacuumProgressInformation {
	if x != nil {
		return x.VacuumProgressInformations
	}
	return nil
}

func (x *CompactActivitySnapshot) GetVacuumProgressStatistics() []*VacuumProgressStatistic {
	if x != nil {
		return x.VacuumProgressStatistics
	}
	return nil
}

type Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identity        uint64                 `protobuf:"varint,1,opt,name=identity,proto3" json:"identity,omitempty"` // Server-wide unique identifier (backend_start + PID)
	Pid             int32                  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	HasRoleIdx      bool                   `protobuf:"varint,3,opt,name=has_role_idx,json=hasRoleIdx,proto3" json:"has_role_idx,omitempty"`
	RoleIdx         int32                  `protobuf:"varint,4,opt,name=role_idx,json=roleIdx,proto3" json:"role_idx,omitempty"`
	HasDatabaseIdx  bool                   `protobuf:"varint,5,opt,name=has_database_idx,json=hasDatabaseIdx,proto3" json:"has_database_idx,omitempty"`
	DatabaseIdx     int32                  `protobuf:"varint,6,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	HasQueryIdx     bool                   `protobuf:"varint,7,opt,name=has_query_idx,json=hasQueryIdx,proto3" json:"has_query_idx,omitempty"`
	QueryIdx        int32                  `protobuf:"varint,8,opt,name=query_idx,json=queryIdx,proto3" json:"query_idx,omitempty"`
	QueryText       string                 `protobuf:"bytes,9,opt,name=query_text,json=queryText,proto3" json:"query_text,omitempty"`
	ApplicationName string                 `protobuf:"bytes,10,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	ClientAddr      string                 `protobuf:"bytes,11,opt,name=client_addr,json=clientAddr,proto3" json:"client_addr,omitempty"`
	ClientPort      int32                  `protobuf:"varint,12,opt,name=client_port,json=clientPort,proto3" json:"client_port,omitempty"`
	BackendStart    *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=backend_start,json=backendStart,proto3" json:"backend_start,omitempty"`
	XactStart       *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=xact_start,json=xactStart,proto3" json:"xact_start,omitempty"`
	QueryStart      *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=query_start,json=queryStart,proto3" json:"query_start,omitempty"`
	StateChange     *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=state_change,json=stateChange,proto3" json:"state_change,omitempty"`
	Waiting         bool                   `protobuf:"varint,17,opt,name=waiting,proto3" json:"waiting,omitempty"`
	State           string                 `protobuf:"bytes,18,opt,name=state,proto3" json:"state,omitempty"`
	WaitEventType   string                 `protobuf:"bytes,19,opt,name=wait_event_type,json=waitEventType,proto3" json:"wait_event_type,omitempty"`
	WaitEvent       string                 `protobuf:"bytes,20,opt,name=wait_event,json=waitEvent,proto3" json:"wait_event,omitempty"`
	BackendType     string                 `protobuf:"bytes,21,opt,name=backend_type,json=backendType,proto3" json:"backend_type,omitempty"`
	BlockedByPids   []int32                `protobuf:"varint,22,rep,packed,name=blocked_by_pids,json=blockedByPids,proto3" json:"blocked_by_pids,omitempty"`
}

func (x *Backend) Reset() {
	*x = Backend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compact_activity_snapshot_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backend) ProtoMessage() {}

func (x *Backend) ProtoReflect() protoreflect.Message {
	mi := &file_compact_activity_snapshot_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backend.ProtoReflect.Descriptor instead.
func (*Backend) Descriptor() ([]byte, []int) {
	return file_compact_activity_snapshot_proto_rawDescGZIP(), []int{1}
}

func (x *Backend) GetIdentity() uint64 {
	if x != nil {
		return x.Identity
	}
	return 0
}

func (x *Backend) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Backend) GetHasRoleIdx() bool {
	if x != nil {
		return x.HasRoleIdx
	}
	return false
}

func (x *Backend) GetRoleIdx() int32 {
	if x != nil {
		return x.RoleIdx
	}
	return 0
}

func (x *Backend) GetHasDatabaseIdx() bool {
	if x != nil {
		return x.HasDatabaseIdx
	}
	return false
}

func (x *Backend) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *Backend) GetHasQueryIdx() bool {
	if x != nil {
		return x.HasQueryIdx
	}
	return false
}

func (x *Backend) GetQueryIdx() int32 {
	if x != nil {
		return x.QueryIdx
	}
	return 0
}

func (x *Backend) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *Backend) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *Backend) GetClientAddr() string {
	if x != nil {
		return x.ClientAddr
	}
	return ""
}

func (x *Backend) GetClientPort() int32 {
	if x != nil {
		return x.ClientPort
	}
	return 0
}

func (x *Backend) GetBackendStart() *timestamppb.Timestamp {
	if x != nil {
		return x.BackendStart
	}
	return nil
}

func (x *Backend) GetXactStart() *timestamppb.Timestamp {
	if x != nil {
		return x.XactStart
	}
	return nil
}

func (x *Backend) GetQueryStart() *timestamppb.Timestamp {
	if x != nil {
		return x.QueryStart
	}
	return nil
}

func (x *Backend) GetStateChange() *timestamppb.Timestamp {
	if x != nil {
		return x.StateChange
	}
	return nil
}

func (x *Backend) GetWaiting() bool {
	if x != nil {
		return x.Waiting
	}
	return false
}

func (x *Backend) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Backend) GetWaitEventType() string {
	if x != nil {
		return x.WaitEventType
	}
	return ""
}

func (x *Backend) GetWaitEvent() string {
	if x != nil {
		return x.WaitEvent
	}
	return ""
}

func (x *Backend) GetBackendType() string {
	if x != nil {
		return x.BackendType
	}
	return ""
}

func (x *Backend) GetBlockedByPids() []int32 {
	if x != nil {
		return x.BlockedByPids
	}
	return nil
}

type VacuumProgressInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VacuumIdentity  uint64                 `protobuf:"varint,1,opt,name=vacuum_identity,json=vacuumIdentity,proto3" json:"vacuum_identity,omitempty"` // Server-wide unique identifier for this vacuum run (query_start + PID)
	RoleIdx         int32                  `protobuf:"varint,2,opt,name=role_idx,json=roleIdx,proto3" json:"role_idx,omitempty"`
	DatabaseIdx     int32                  `protobuf:"varint,3,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	RelationIdx     int32                  `protobuf:"varint,4,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	BackendIdentity uint64                 `protobuf:"varint,5,opt,name=backend_identity,json=backendIdentity,proto3" json:"backend_identity,omitempty"`
	StartedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	Autovacuum      bool                   `protobuf:"varint,7,opt,name=autovacuum,proto3" json:"autovacuum,omitempty"`
	Toast           bool                   `protobuf:"varint,8,opt,name=toast,proto3" json:"toast,omitempty"`
}

func (x *VacuumProgressInformation) Reset() {
	*x = VacuumProgressInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compact_activity_snapshot_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VacuumProgressInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VacuumProgressInformation) ProtoMessage() {}

func (x *VacuumProgressInformation) ProtoReflect() protoreflect.Message {
	mi := &file_compact_activity_snapshot_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VacuumProgressInformation.ProtoReflect.Descriptor instead.
func (*VacuumProgressInformation) Descriptor() ([]byte, []int) {
	return file_compact_activity_snapshot_proto_rawDescGZIP(), []int{2}
}

func (x *VacuumProgressInformation) GetVacuumIdentity() uint64 {
	if x != nil {
		return x.VacuumIdentity
	}
	return 0
}

func (x *VacuumProgressInformation) GetRoleIdx() int32 {
	if x != nil {
		return x.RoleIdx
	}
	return 0
}

func (x *VacuumProgressInformation) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *VacuumProgressInformation) GetRelationIdx() int32 {
	if x != nil {
		return x.RelationIdx
	}
	return 0
}

func (x *VacuumProgressInformation) GetBackendIdentity() uint64 {
	if x != nil {
		return x.BackendIdentity
	}
	return 0
}

func (x *VacuumProgressInformation) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *VacuumProgressInformation) GetAutovacuum() bool {
	if x != nil {
		return x.Autovacuum
	}
	return false
}

func (x *VacuumProgressInformation) GetToast() bool {
	if x != nil {
		return x.Toast
	}
	return false
}

type VacuumProgressStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VacuumIdentity   uint64                              `protobuf:"varint,1,opt,name=vacuum_identity,json=vacuumIdentity,proto3" json:"vacuum_identity,omitempty"` // Server-wide unique identifier for this vacuum run (query_start + PID)
	Phase            VacuumProgressStatistic_VacuumPhase `protobuf:"varint,2,opt,name=phase,proto3,enum=pganalyze.collector.VacuumProgressStatistic_VacuumPhase" json:"phase,omitempty"`
	HeapBlksTotal    int64                               `protobuf:"varint,3,opt,name=heap_blks_total,json=heapBlksTotal,proto3" json:"heap_blks_total,omitempty"`
	HeapBlksScanned  int64                               `protobuf:"varint,4,opt,name=heap_blks_scanned,json=heapBlksScanned,proto3" json:"heap_blks_scanned,omitempty"`
	HeapBlksVacuumed int64                               `protobuf:"varint,5,opt,name=heap_blks_vacuumed,json=heapBlksVacuumed,proto3" json:"heap_blks_vacuumed,omitempty"`
	IndexVacuumCount int64                               `protobuf:"varint,6,opt,name=index_vacuum_count,json=indexVacuumCount,proto3" json:"index_vacuum_count,omitempty"`
	MaxDeadTuples    int64                               `protobuf:"varint,7,opt,name=max_dead_tuples,json=maxDeadTuples,proto3" json:"max_dead_tuples,omitempty"`
	NumDeadTuples    int64                               `protobuf:"varint,8,opt,name=num_dead_tuples,json=numDeadTuples,proto3" json:"num_dead_tuples,omitempty"`
}

func (x *VacuumProgressStatistic) Reset() {
	*x = VacuumProgressStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_compact_activity_snapshot_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VacuumProgressStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VacuumProgressStatistic) ProtoMessage() {}

func (x *VacuumProgressStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_compact_activity_snapshot_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VacuumProgressStatistic.ProtoReflect.Descriptor instead.
func (*VacuumProgressStatistic) Descriptor() ([]byte, []int) {
	return file_compact_activity_snapshot_proto_rawDescGZIP(), []int{3}
}

func (x *VacuumProgressStatistic) GetVacuumIdentity() uint64 {
	if x != nil {
		return x.VacuumIdentity
	}
	return 0
}

func (x *VacuumProgressStatistic) GetPhase() VacuumProgressStatistic_VacuumPhase {
	if x != nil {
		return x.Phase
	}
	return VacuumProgressStatistic_INITIALIZING
}

func (x *VacuumProgressStatistic) GetHeapBlksTotal() int64 {
	if x != nil {
		return x.HeapBlksTotal
	}
	return 0
}

func (x *VacuumProgressStatistic) GetHeapBlksScanned() int64 {
	if x != nil {
		return x.HeapBlksScanned
	}
	return 0
}

func (x *VacuumProgressStatistic) GetHeapBlksVacuumed() int64 {
	if x != nil {
		return x.HeapBlksVacuumed
	}
	return 0
}

func (x *VacuumProgressStatistic) GetIndexVacuumCount() int64 {
	if x != nil {
		return x.IndexVacuumCount
	}
	return 0
}

func (x *VacuumProgressStatistic) GetMaxDeadTuples() int64 {
	if x != nil {
		return x.MaxDeadTuples
	}
	return 0
}

func (x *VacuumProgressStatistic) GetNumDeadTuples() int64 {
	if x != nil {
		return x.NumDeadTuples
	}
	return 0
}

var File_compact_activity_snapshot_proto protoreflect.FileDescriptor

var file_compact_activity_snapshot_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x03, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x4f, 0x0a, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x67,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x55, 0x0a, 0x19,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x70, 0x72, 0x65,
	0x76, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x41, 0x74, 0x12, 0x70, 0x0a, 0x1c, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x67, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x76, 0x61, 0x63, 0x75, 0x75,
	0x6d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6a, 0x0a, 0x1a, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x67, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x18, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x22, 0xcd, 0x4f, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x68,
	0x61, 0x73, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x78, 0x12, 0x19, 0x0a,
	0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x61, 0x73, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x49, 0x64, 0x78, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x61, 0x73, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x49, 0x64, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x78, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x61, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x70, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x69, 0x64, 0x73, 0x22, 0x91, 0x02, 0x0a,
	0x0d, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x50, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f,
	0x50, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x47, 0x5f,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x47,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x49, 0x50, 0x43, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0a,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x49, 0x4f, 0x10, 0x0b,
	0x22, 0xee, 0x46, 0x0a, 0x09, 0x57, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x12, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x48, 0x4d, 0x45,
	0x4d, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x49, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x66, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x58, 0x49, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x67, 0x12, 0x25, 0x0a, 0x21, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x68, 0x12, 0x27, 0x0a,
	0x23, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x69, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x6a,
	0x12, 0x2a, 0x0a, 0x26, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x42, 0x55, 0x46, 0x5f, 0x4d, 0x41,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x6b, 0x12, 0x24, 0x0a, 0x20,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x6c, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x6d, 0x12, 0x25, 0x0a, 0x21, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x6e, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x4c, 0x52,
	0x55, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x6f, 0x12, 0x28, 0x0a, 0x24, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x55,
	0x42, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x53, 0x4c, 0x52, 0x55, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x70, 0x12, 0x29, 0x0a, 0x25, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x58, 0x41,
	0x43, 0x54, 0x5f, 0x47, 0x45, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x71, 0x12, 0x31, 0x0a,
	0x2d, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x4f, 0x46,
	0x46, 0x53, 0x45, 0x54, 0x5f, 0x53, 0x4c, 0x52, 0x55, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x72,
	0x12, 0x31, 0x0a, 0x2d, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x58, 0x41, 0x43, 0x54,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x52, 0x55, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x73, 0x12, 0x29, 0x0a, 0x25, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x43,
	0x48, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x74, 0x12, 0x2c,
	0x0a, 0x28, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x75, 0x12, 0x2a, 0x0a, 0x26,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x54, 0x57, 0x4f, 0x5f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x76, 0x12, 0x2c, 0x0a, 0x28, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x77, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x54, 0x52, 0x45,
	0x45, 0x5f, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x78, 0x12,
	0x2b, 0x0a, 0x27, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x49, 0x4e, 0x5f, 0x53, 0x48, 0x4d, 0x45, 0x4d,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x79, 0x12, 0x25, 0x0a, 0x21,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x7a, 0x12, 0x2e, 0x0a, 0x2a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x56, 0x41, 0x43,
	0x55, 0x55, 0x4d, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x7b, 0x12, 0x24, 0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x53, 0x43,
	0x41, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x7c, 0x12, 0x2b, 0x0a, 0x27, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52,
	0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x7d, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x46, 0x59, 0x5f, 0x53, 0x4c, 0x52, 0x55, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x7e, 0x12, 0x27,
	0x0a, 0x23, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x7f, 0x12, 0x32, 0x0a, 0x2d, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x80, 0x01, 0x12, 0x36, 0x0a, 0x31, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x81, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x82, 0x01, 0x12, 0x27, 0x0a, 0x22,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x53, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x4c, 0x52, 0x55, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x83, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x52, 0x45, 0x50, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x84, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x57, 0x4f, 0x52, 0x4b,
	0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x85, 0x01, 0x12, 0x38, 0x0a, 0x33, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x86, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x87, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b,
	0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f,
	0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x10, 0x88, 0x01, 0x12, 0x34, 0x0a, 0x2f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x89, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x53, 0x5f, 0x53, 0x4c, 0x52, 0x55, 0x5f, 0x4c,
	0x4f, 0x43, 0x4b, 0x10, 0x8a, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x5f, 0x54, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x8b, 0x01, 0x12, 0x2e, 0x0a,
	0x29, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f,
	0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x8c, 0x01, 0x12, 0x31, 0x0a,
	0x2c, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x52,
	0x55, 0x4e, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x8d, 0x01,
	0x12, 0x31, 0x0a, 0x2c, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48,
	0x4f, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x10, 0x8e, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x45, 0x4e, 0x44,
	0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x8f, 0x01, 0x12,
	0x2e, 0x0a, 0x29, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x50,
	0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x90, 0x01, 0x12,
	0x2b, 0x0a, 0x26, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x91, 0x01, 0x12, 0x2e, 0x0a, 0x29,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x53, 0x5f, 0x56, 0x41,
	0x43, 0x55, 0x55, 0x4d, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0xb4, 0x01, 0x12, 0x2d, 0x0a, 0x28,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x54,
	0x41, 0x49, 0x4c, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0xb5, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e,
	0x43, 0x48, 0x45, 0x5f, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10,
	0x92, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49,
	0x54, 0x54, 0x53, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0x93, 0x01, 0x12, 0x29, 0x0a,
	0x24, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52,
	0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0x94, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45,
	0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x58, 0x41, 0x43, 0x54, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0x95, 0x01, 0x12, 0x30, 0x0a, 0x2b, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43,
	0x48, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x58, 0x41, 0x43, 0x54, 0x4d, 0x45, 0x4d, 0x42,
	0x45, 0x52, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0x96, 0x01, 0x12, 0x27, 0x0a, 0x22,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41,
	0x4e, 0x43, 0x48, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x5f, 0x42, 0x55, 0x46, 0x46,
	0x45, 0x52, 0x10, 0x97, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x53, 0x45,
	0x52, 0x49, 0x41, 0x4c, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0x98, 0x01, 0x12, 0x24,
	0x0a, 0x1f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54,
	0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52,
	0x54, 0x10, 0x99, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x42, 0x55, 0x46,
	0x46, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x9a, 0x01, 0x12, 0x23,
	0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54,
	0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x49, 0x4f,
	0x10, 0x9b, 0x01, 0x12, 0x32, 0x0a, 0x2d, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x10, 0x9c, 0x01, 0x12, 0x2d, 0x0a, 0x28, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x54,
	0x5f, 0x49, 0x4f, 0x10, 0x9d, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x4c,
	0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x50, 0x41, 0x54, 0x48, 0x10, 0x9e, 0x01, 0x12,
	0x28, 0x0a, 0x23, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57,
	0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x9f, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48,
	0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x10, 0xa0,
	0x01, 0x12, 0x30, 0x0a, 0x2b, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52,
	0x10, 0xa1, 0x01, 0x12, 0x2c, 0x0a, 0x27, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x10, 0xa2,
	0x01, 0x12, 0x2c, 0x0a, 0x27, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c,
	0x45, 0x4c, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x44, 0x53, 0x41, 0x10, 0xa3, 0x01, 0x12,
	0x29, 0x0a, 0x24, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57,
	0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x53, 0x41, 0x10, 0xa4, 0x01, 0x12, 0x31, 0x0a, 0x2c, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43,
	0x48, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xa5, 0x01, 0x12, 0x33, 0x0a,
	0x2e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52,
	0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x4d, 0x4f, 0x44, 0x10,
	0xa6, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45,
	0x44, 0x5f, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0xa7, 0x01, 0x12,
	0x2a, 0x0a, 0x25, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57,
	0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x54,
	0x49, 0x44, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x10, 0xa8, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e,
	0x43, 0x48, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x41, 0x50, 0x50,
	0x45, 0x4e, 0x44, 0x10, 0xa9, 0x01, 0x12, 0x31, 0x0a, 0x2c, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x57, 0x54, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x5f, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0xaa, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x54, 0x41, 0x47, 0x5f,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xc8, 0x01, 0x12, 0x27, 0x0a, 0x22, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x54, 0x41,
	0x47, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x44, 0x10, 0xc9, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x54, 0x41, 0x47, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10,
	0xca, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x55, 0x50, 0x4c, 0x45, 0x10, 0xcb,
	0x01, 0x12, 0x23, 0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0xcc, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x54, 0x41, 0x47, 0x5f, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xcd, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x54, 0x41, 0x47, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0xce, 0x01, 0x12, 0x1e, 0x0a,
	0x19, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x54, 0x41, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0xcf, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b,
	0x54, 0x41, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0xd0, 0x01, 0x12,
	0x20, 0x0a, 0x1b, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f,
	0x43, 0x4b, 0x54, 0x41, 0x47, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x59, 0x10, 0xd1,
	0x01, 0x12, 0x29, 0x0a, 0x24, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x54, 0x41, 0x47, 0x5f, 0x44, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x46,
	0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x5f, 0x49, 0x44, 0x53, 0x10, 0xd2, 0x01, 0x12, 0x1a, 0x0a, 0x15,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45,
	0x52, 0x5f, 0x50, 0x49, 0x4e, 0x10, 0xac, 0x02, 0x12, 0x19, 0x0a, 0x14, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x90, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x53, 0x10, 0x91, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x10, 0xf4, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x10, 0xf5, 0x03, 0x12, 0x22, 0x0a, 0x1d, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x47, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x48,
	0x49, 0x42, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x10, 0xf6, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x47, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0xf7, 0x03, 0x12, 0x21, 0x0a, 0x1c, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0xf8, 0x03, 0x12, 0x22, 0x0a,
	0x1d, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0xf9,
	0x03, 0x12, 0x25, 0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0xfa, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x47, 0x53, 0x54, 0x41, 0x54, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x10, 0xfb, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x57, 0x41, 0x4c,
	0x5f, 0x41, 0x4c, 0x4c, 0x10, 0xfc, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x57,
	0x41, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0xfd, 0x03, 0x12, 0x1e, 0x0a, 0x19,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x4c, 0x4f,
	0x47, 0x47, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0xfe, 0x03, 0x12, 0x21, 0x0a, 0x1c,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0xff, 0x03, 0x12,
	0x1f, 0x0a, 0x1a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41,
	0x4c, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x80, 0x04,
	0x12, 0x1f, 0x0a, 0x1a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57,
	0x41, 0x4c, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x81,
	0x04, 0x12, 0x1b, 0x0a, 0x16, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xd8, 0x04, 0x12, 0x1c,
	0x0a, 0x17, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xd9, 0x04, 0x12, 0x28, 0x0a, 0x23,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x42, 0x50, 0x51,
	0x57, 0x41, 0x4c, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x10, 0xda, 0x04, 0x12, 0x28, 0x0a, 0x23, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x42, 0x50, 0x51, 0x57, 0x41, 0x4c, 0x52, 0x45, 0x43,
	0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0xdb, 0x04,
	0x12, 0x1f, 0x0a, 0x1a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53,
	0x53, 0x4c, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0xdc,
	0x04, 0x12, 0x27, 0x0a, 0x22, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x57, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52, 0x5f, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0xdd, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4e,
	0x44, 0x45, 0x52, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x10, 0xde, 0x04, 0x12,
	0x25, 0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41,
	0x4c, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0xdf, 0x04, 0x12, 0x1f, 0x0a, 0x1a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x47, 0x53, 0x53, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x10, 0xe0, 0x04, 0x12, 0x21, 0x0a, 0x1c, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x47, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x53,
	0x48, 0x55, 0x54, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0xbc, 0x05, 0x12, 0x20, 0x0a, 0x1b, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x47, 0x57, 0x4f, 0x52, 0x4b, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x55, 0x50, 0x10, 0xbd, 0x05, 0x12, 0x1a, 0x0a, 0x15,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x54, 0x52, 0x45, 0x45,
	0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0xbe, 0x05, 0x12, 0x21, 0x0a, 0x1c, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xbf, 0x05, 0x12, 0x1e, 0x0a, 0x19, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x45, 0x5f, 0x47, 0x41, 0x54, 0x48, 0x45, 0x52, 0x10, 0xc0, 0x05, 0x12, 0x23, 0x0a, 0x1e, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x42,
	0x41, 0x54, 0x43, 0x48, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x10, 0xc1, 0x05,
	0x12, 0x20, 0x0a, 0x1b, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10,
	0xc2, 0x05, 0x12, 0x1f, 0x0a, 0x1a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4c, 0x4f, 0x41, 0x44,
	0x10, 0xc3, 0x05, 0x12, 0x23, 0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x41, 0x4c, 0x4c,
	0x4f, 0x43, 0x41, 0x54, 0x45, 0x10, 0xc4, 0x05, 0x12, 0x20, 0x0a, 0x1b, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x42, 0x55, 0x49, 0x4c,
	0x44, 0x5f, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0xc5, 0x05, 0x12, 0x25, 0x0a, 0x20, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0xc6,
	0x05, 0x12, 0x25, 0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x4f, 0x55, 0x54, 0x45, 0x52, 0x10, 0xc7, 0x05, 0x12, 0x2a, 0x0a, 0x25, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x57,
	0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54,
	0x45, 0x10, 0xc8, 0x05, 0x12, 0x28, 0x0a, 0x23, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x42, 0x41, 0x54,
	0x43, 0x48, 0x45, 0x53, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x44, 0x45, 0x10, 0xc9, 0x05, 0x12, 0x27,
	0x0a, 0x22, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53,
	0x48, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x5f, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x10, 0xca, 0x05, 0x12, 0x28, 0x0a, 0x23, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x5f,
	0x42, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x10, 0xcb,
	0x05, 0x12, 0x2d, 0x0a, 0x28, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x48, 0x41, 0x53, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48, 0x45,
	0x53, 0x5f, 0x52, 0x45, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xcc, 0x05,
	0x12, 0x2a, 0x0a, 0x25, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48,
	0x41, 0x53, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x53,
	0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x45, 0x10, 0xcd, 0x05, 0x12, 0x27, 0x0a, 0x22,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f,
	0x47, 0x52, 0x4f, 0x57, 0x5f, 0x42, 0x55, 0x43, 0x4b, 0x45, 0x54, 0x53, 0x5f, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x10, 0xce, 0x05, 0x12, 0x2a, 0x0a, 0x25, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x42, 0x55,
	0x43, 0x4b, 0x45, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0xcf,
	0x05, 0x12, 0x21, 0x0a, 0x1c, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x10, 0xd0, 0x05, 0x12, 0x29, 0x0a, 0x24, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0xd1, 0x05, 0x12,
	0x1b, 0x0a, 0x16, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x51,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0xd2, 0x05, 0x12, 0x1e, 0x0a, 0x19,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x51, 0x5f, 0x50, 0x55,
	0x54, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0xd3, 0x05, 0x12, 0x1a, 0x0a, 0x15,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x51, 0x5f, 0x52, 0x45,
	0x43, 0x45, 0x49, 0x56, 0x45, 0x10, 0xd4, 0x05, 0x12, 0x17, 0x0a, 0x12, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x51, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x10, 0xd5,
	0x05, 0x12, 0x24, 0x0a, 0x1f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x42, 0x49, 0x54, 0x4d, 0x41, 0x50, 0x5f,
	0x53, 0x43, 0x41, 0x4e, 0x10, 0xd6, 0x05, 0x12, 0x2a, 0x0a, 0x25, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x53, 0x43, 0x41, 0x4e,
	0x10, 0xd7, 0x05, 0x12, 0x1f, 0x0a, 0x1a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x46, 0x49, 0x4e, 0x49, 0x53,
	0x48, 0x10, 0xd8, 0x05, 0x12, 0x26, 0x0a, 0x21, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0xd9, 0x05, 0x12, 0x17, 0x0a, 0x12,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f,
	0x54, 0x45, 0x10, 0xda, 0x05, 0x12, 0x27, 0x0a, 0x22, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x10, 0xdb, 0x05, 0x12, 0x25,
	0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x10, 0xdc, 0x05, 0x12, 0x1d, 0x0a, 0x18, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x10, 0xdd, 0x05, 0x12, 0x18, 0x0a, 0x13, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x10, 0xde, 0x05, 0x12, 0x1f,
	0x0a, 0x1a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0xdf, 0x05, 0x12,
	0x20, 0x0a, 0x1b, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0xe0,
	0x05, 0x12, 0x1c, 0x0a, 0x17, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0xe1, 0x05, 0x12,
	0x23, 0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41,
	0x43, 0x4b, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0xe2, 0x05, 0x12, 0x27, 0x0a, 0x22, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x57,
	0x41, 0x4c, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x10, 0xe3, 0x05, 0x12, 0x2a, 0x0a,
	0x25, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x53, 0x4e,
	0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0xe4, 0x05, 0x12, 0x2c, 0x0a, 0x27, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4c, 0x49, 0x43, 0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x10, 0xe5, 0x05, 0x12, 0x1e, 0x0a, 0x19, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x50,
	0x41, 0x55, 0x53, 0x45, 0x10, 0xe6, 0x05, 0x12, 0x24, 0x0a, 0x1f, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55,
	0x50, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x10, 0xa0, 0x06, 0x12, 0x18, 0x0a,
	0x13, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x47, 0x5f, 0x53,
	0x4c, 0x45, 0x45, 0x50, 0x10, 0xa1, 0x06, 0x12, 0x24, 0x0a, 0x1f, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0xa2, 0x06, 0x12, 0x30, 0x0a,
	0x2b, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x49, 0x45, 0x56, 0x45, 0x5f, 0x52, 0x45,
	0x54, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x10, 0xa3, 0x06, 0x12,
	0x25, 0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0xa4, 0x06, 0x12, 0x1c, 0x0a, 0x17, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x10, 0xa5, 0x06, 0x12, 0x26, 0x0a, 0x21, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x41, 0x59, 0x10, 0xa6, 0x06, 0x12, 0x1c, 0x0a, 0x17,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x84, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x85, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x86, 0x07, 0x12, 0x21, 0x0a, 0x1c,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x87, 0x07, 0x12,
	0x28, 0x0a, 0x23, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x88, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x89, 0x07, 0x12, 0x29, 0x0a,
	0x24, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x4f, 0x4c, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x8a, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x8b, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x8c, 0x07, 0x12, 0x20, 0x0a, 0x1b, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x10, 0x8d, 0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x8e, 0x07, 0x12, 0x28, 0x0a, 0x23,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x10, 0x8f, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x50,
	0x52, 0x45, 0x46, 0x45, 0x54, 0x43, 0x48, 0x10, 0x90, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x91, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x92, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x10, 0x93, 0x07, 0x12, 0x1f,
	0x0a, 0x1a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x94, 0x07, 0x12,
	0x23, 0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x53,
	0x4d, 0x5f, 0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x10, 0x95, 0x07, 0x12, 0x2b, 0x0a, 0x26, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x54, 0x4f, 0x44, 0x41, 0x54, 0x41, 0x44, 0x49, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x96,
	0x07, 0x12, 0x2b, 0x0a, 0x26, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x4f, 0x44,
	0x41, 0x54, 0x41, 0x44, 0x49, 0x52, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x97, 0x07, 0x12, 0x2c,
	0x0a, 0x27, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x54, 0x4f, 0x44, 0x41, 0x54, 0x41,
	0x44, 0x49, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x98, 0x07, 0x12, 0x25, 0x0a, 0x20,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x10, 0x99, 0x07, 0x12, 0x25, 0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x9a, 0x07, 0x12, 0x26, 0x0a, 0x21, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10,
	0x9b, 0x07, 0x12, 0x2d, 0x0a, 0x28, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x44, 0x41, 0x54, 0x41, 0x44, 0x49, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x9c,
	0x07, 0x12, 0x2f, 0x0a, 0x2a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10,
	0x9d, 0x07, 0x12, 0x2c, 0x0a, 0x27, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x9e, 0x07,
	0x12, 0x2d, 0x0a, 0x28, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4d,
	0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x9f, 0x07, 0x12,
	0x24, 0x0a, 0x1f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f,
	0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0xa0, 0x07, 0x12, 0x28, 0x0a, 0x23, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x10, 0xa1, 0x07, 0x12,
	0x25, 0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f,
	0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x10, 0xa2, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41,
	0x50, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xa3, 0x07, 0x12, 0x21, 0x0a, 0x1c, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xa4, 0x07, 0x12, 0x22, 0x0a, 0x1d,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xa5, 0x07,
	0x12, 0x23, 0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x10, 0xa6, 0x07, 0x12, 0x24, 0x0a, 0x1f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x46, 0x46,
	0x45, 0x52, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xa7, 0x07, 0x12, 0x2c, 0x0a, 0x27, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xa8, 0x07, 0x12, 0x25, 0x0a, 0x20, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xa9, 0x07,
	0x12, 0x2d, 0x0a, 0x28, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52,
	0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f,
	0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xaa, 0x07, 0x12,
	0x25, 0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x10, 0xab, 0x07, 0x12, 0x26, 0x0a, 0x21, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xac, 0x07, 0x12, 0x1f,
	0x0a, 0x1a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4c, 0x52,
	0x55, 0x5f, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xad, 0x07, 0x12,
	0x19, 0x0a, 0x14, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4c,
	0x52, 0x55, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xae, 0x07, 0x12, 0x19, 0x0a, 0x14, 0x57, 0x41,
	0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4c, 0x52, 0x55, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0xaf, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x53, 0x4c, 0x52, 0x55, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xb0,
	0x07, 0x12, 0x1e, 0x0a, 0x19, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x4e, 0x41, 0x50, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xb1,
	0x07, 0x12, 0x1e, 0x0a, 0x19, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x4e, 0x41, 0x50, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xb2,
	0x07, 0x12, 0x1f, 0x0a, 0x1a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x4e, 0x41, 0x50, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10,
	0xb3, 0x07, 0x12, 0x2a, 0x0a, 0x25, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xb4, 0x07, 0x12, 0x2b,
	0x0a, 0x26, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xb5, 0x07, 0x12, 0x25, 0x0a, 0x20, 0x57,
	0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49,
	0x4e, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10,
	0xb6, 0x07, 0x12, 0x25, 0x0a, 0x20, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xb7, 0x07, 0x12, 0x26, 0x0a, 0x21, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45,
	0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xb8,
	0x07, 0x12, 0x22, 0x0a, 0x1d, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x57, 0x4f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x10, 0xb9, 0x07, 0x12, 0x22, 0x0a, 0x1d, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x57, 0x4f, 0x50, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x46, 0x49, 0x4c,
	0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xba, 0x07, 0x12, 0x23, 0x0a, 0x1e, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x57, 0x4f, 0x50, 0x48, 0x41, 0x53, 0x45,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xbb, 0x07, 0x12, 0x2f,
	0x0a, 0x2a, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c,
	0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xbc, 0x07, 0x12,
	0x22, 0x0a, 0x1d, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41,
	0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x10, 0xbd, 0x07, 0x12, 0x23, 0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x5f,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xbe, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x10, 0xbf, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x57, 0x41, 0x49, 0x54, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x53,
	0x59, 0x4e, 0x43, 0x10, 0xc0, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x57, 0x52,
	0x49, 0x54, 0x45, 0x10, 0xc1, 0x07, 0x12, 0x1d, 0x0a, 0x18, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x59,
	0x4e, 0x43, 0x10, 0xc2, 0x07, 0x12, 0x1e, 0x0a, 0x19, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x57, 0x52, 0x49,
	0x54, 0x45, 0x10, 0xc3, 0x07, 0x12, 0x18, 0x0a, 0x13, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0xc4, 0x07, 0x12,
	0x18, 0x0a, 0x13, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41,
	0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0xc5, 0x07, 0x12, 0x26, 0x0a, 0x21, 0x57, 0x41, 0x49,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x59, 0x4e, 0x43,
	0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x10, 0xc6,
	0x07, 0x12, 0x19, 0x0a, 0x14, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x57, 0x41, 0x4c, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0xc7, 0x07, 0x12, 0x23, 0x0a, 0x1e,
	0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x5f,
	0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x5f, 0x42, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0xc8,
	0x07, 0x12, 0x1c, 0x0a, 0x17, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f,
	0x49, 0x4f, 0x5f, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x90, 0x4e, 0x12,
	0x22, 0x0a, 0x1d, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x55,
	0x52, 0x4f, 0x52, 0x41, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x10, 0x91, 0x4e, 0x12, 0x23, 0x0a, 0x1e, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x41, 0x55, 0x52, 0x4f, 0x52, 0x41, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x10, 0x92, 0x4e, 0x12, 0x21, 0x0a, 0x1c, 0x57, 0x41, 0x49, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x49, 0x54, 0x55, 0x53, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x53, 0x10, 0x93, 0x4e, 0x22, 0x04, 0x08, 0x64, 0x10,
	0x64, 0x22, 0xc1, 0x02, 0x0a, 0x19, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x49, 0x64, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63,
	0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x61, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x74, 0x6f, 0x61, 0x73, 0x74, 0x22, 0x9a, 0x04, 0x0a, 0x17, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x12, 0x27, 0x0a, 0x0f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x76, 0x61, 0x63, 0x75,
	0x75, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x05, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x70, 0x67, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2e, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x65,
	0x61, 0x70, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x68, 0x65, 0x61, 0x70, 0x42, 0x6c, 0x6b, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x68,
	0x65, 0x61, 0x70, 0x42, 0x6c, 0x6b, 0x73, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x62, 0x6c, 0x6b, 0x73, 0x5f, 0x76, 0x61, 0x63, 0x75,
	0x75, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x68, 0x65, 0x61, 0x70,
	0x42, 0x6c, 0x6b, 0x73, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56,
	0x61, 0x63, 0x75, 0x75, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61,
	0x78, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x61, 0x64, 0x54, 0x75, 0x70, 0x6c,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x74,
	0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d,
	0x44, 0x65, 0x61, 0x64, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x56,
	0x61, 0x63, 0x75, 0x75, 0x6d, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x43, 0x41, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x50, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x56,
	0x41, 0x43, 0x55, 0x55, 0x4d, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x56, 0x41, 0x43, 0x55, 0x55, 0x4d, 0x5f, 0x48, 0x45, 0x41, 0x50, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x55, 0x50,
	0x10, 0x06, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x70, 0x67, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_compact_activity_snapshot_proto_rawDescOnce sync.Once
	file_compact_activity_snapshot_proto_rawDescData = file_compact_activity_snapshot_proto_rawDesc
)

func file_compact_activity_snapshot_proto_rawDescGZIP() []byte {
	file_compact_activity_snapshot_proto_rawDescOnce.Do(func() {
		file_compact_activity_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(file_compact_activity_snapshot_proto_rawDescData)
	})
	return file_compact_activity_snapshot_proto_rawDescData
}

var file_compact_activity_snapshot_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_compact_activity_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_compact_activity_snapshot_proto_goTypes = []interface{}{
	(Backend_WaitEventType)(0),               // 0: pganalyze.collector.Backend.WaitEventType
	(Backend_WaitEvent)(0),                   // 1: pganalyze.collector.Backend.WaitEvent
	(VacuumProgressStatistic_VacuumPhase)(0), // 2: pganalyze.collector.VacuumProgressStatistic.VacuumPhase
	(*CompactActivitySnapshot)(nil),          // 3: pganalyze.collector.CompactActivitySnapshot
	(*Backend)(nil),                          // 4: pganalyze.collector.Backend
	(*VacuumProgressInformation)(nil),        // 5: pganalyze.collector.VacuumProgressInformation
	(*VacuumProgressStatistic)(nil),          // 6: pganalyze.collector.VacuumProgressStatistic
	(*PostgresVersion)(nil),                  // 7: pganalyze.collector.PostgresVersion
	(*timestamppb.Timestamp)(nil),            // 8: google.protobuf.Timestamp
}
var file_compact_activity_snapshot_proto_depIdxs = []int32{
	7,  // 0: pganalyze.collector.CompactActivitySnapshot.postgres_version:type_name -> pganalyze.collector.PostgresVersion
	4,  // 1: pganalyze.collector.CompactActivitySnapshot.backends:type_name -> pganalyze.collector.Backend
	8,  // 2: pganalyze.collector.CompactActivitySnapshot.prev_activity_snapshot_at:type_name -> google.protobuf.Timestamp
	5,  // 3: pganalyze.collector.CompactActivitySnapshot.vacuum_progress_informations:type_name -> pganalyze.collector.VacuumProgressInformation
	6,  // 4: pganalyze.collector.CompactActivitySnapshot.vacuum_progress_statistics:type_name -> pganalyze.collector.VacuumProgressStatistic
	8,  // 5: pganalyze.collector.Backend.backend_start:type_name -> google.protobuf.Timestamp
	8,  // 6: pganalyze.collector.Backend.xact_start:type_name -> google.protobuf.Timestamp
	8,  // 7: pganalyze.collector.Backend.query_start:type_name -> google.protobuf.Timestamp
	8,  // 8: pganalyze.collector.Backend.state_change:type_name -> google.protobuf.Timestamp
	8,  // 9: pganalyze.collector.VacuumProgressInformation.started_at:type_name -> google.protobuf.Timestamp
	2,  // 10: pganalyze.collector.VacuumProgressStatistic.phase:type_name -> pganalyze.collector.VacuumProgressStatistic.VacuumPhase
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_compact_activity_snapshot_proto_init() }
func file_compact_activity_snapshot_proto_init() {
	if File_compact_activity_snapshot_proto != nil {
		return
	}
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_compact_activity_snapshot_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactActivitySnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compact_activity_snapshot_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Backend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compact_activity_snapshot_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VacuumProgressInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_compact_activity_snapshot_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VacuumProgressStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_compact_activity_snapshot_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_compact_activity_snapshot_proto_goTypes,
		DependencyIndexes: file_compact_activity_snapshot_proto_depIdxs,
		EnumInfos:         file_compact_activity_snapshot_proto_enumTypes,
		MessageInfos:      file_compact_activity_snapshot_proto_msgTypes,
	}.Build()
	File_compact_activity_snapshot_proto = out.File
	file_compact_activity_snapshot_proto_rawDesc = nil
	file_compact_activity_snapshot_proto_goTypes = nil
	file_compact_activity_snapshot_proto_depIdxs = nil
}
