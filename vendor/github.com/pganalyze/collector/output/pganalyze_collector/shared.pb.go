// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.14.0
// source: shared.proto

package pganalyze_collector

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type QueryExplainInformation_ExplainFormat int32

const (
	QueryExplainInformation_TEXT_EXPLAIN_FORMAT QueryExplainInformation_ExplainFormat = 0
	QueryExplainInformation_JSON_EXPLAIN_FORMAT QueryExplainInformation_ExplainFormat = 1
)

// Enum value maps for QueryExplainInformation_ExplainFormat.
var (
	QueryExplainInformation_ExplainFormat_name = map[int32]string{
		0: "TEXT_EXPLAIN_FORMAT",
		1: "JSON_EXPLAIN_FORMAT",
	}
	QueryExplainInformation_ExplainFormat_value = map[string]int32{
		"TEXT_EXPLAIN_FORMAT": 0,
		"JSON_EXPLAIN_FORMAT": 1,
	}
)

func (x QueryExplainInformation_ExplainFormat) Enum() *QueryExplainInformation_ExplainFormat {
	p := new(QueryExplainInformation_ExplainFormat)
	*p = x
	return p
}

func (x QueryExplainInformation_ExplainFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryExplainInformation_ExplainFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_proto_enumTypes[0].Descriptor()
}

func (QueryExplainInformation_ExplainFormat) Type() protoreflect.EnumType {
	return &file_shared_proto_enumTypes[0]
}

func (x QueryExplainInformation_ExplainFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryExplainInformation_ExplainFormat.Descriptor instead.
func (QueryExplainInformation_ExplainFormat) EnumDescriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{12, 0}
}

type QueryExplainInformation_ExplainSource int32

const (
	QueryExplainInformation_STATEMENT_LOG_EXPLAIN_SOURCE QueryExplainInformation_ExplainSource = 0 // Generated based on statement log (log_min_duration_statement)
	QueryExplainInformation_AUTO_EXPLAIN_EXPLAIN_SOURCE  QueryExplainInformation_ExplainSource = 1 // Generated by auto_explain
	QueryExplainInformation_EXTERNAL_EXPLAIN_SOURCE      QueryExplainInformation_ExplainSource = 2 // EXPLAIN generated through external process (e.g. operator running EXPLAIN)
	QueryExplainInformation_GENERIC_EXPLAIN_SOURCE       QueryExplainInformation_ExplainSource = 3 // EXPLAIN generated based on unknown constant parameters
)

// Enum value maps for QueryExplainInformation_ExplainSource.
var (
	QueryExplainInformation_ExplainSource_name = map[int32]string{
		0: "STATEMENT_LOG_EXPLAIN_SOURCE",
		1: "AUTO_EXPLAIN_EXPLAIN_SOURCE",
		2: "EXTERNAL_EXPLAIN_SOURCE",
		3: "GENERIC_EXPLAIN_SOURCE",
	}
	QueryExplainInformation_ExplainSource_value = map[string]int32{
		"STATEMENT_LOG_EXPLAIN_SOURCE": 0,
		"AUTO_EXPLAIN_EXPLAIN_SOURCE":  1,
		"EXTERNAL_EXPLAIN_SOURCE":      2,
		"GENERIC_EXPLAIN_SOURCE":       3,
	}
)

func (x QueryExplainInformation_ExplainSource) Enum() *QueryExplainInformation_ExplainSource {
	p := new(QueryExplainInformation_ExplainSource)
	*p = x
	return p
}

func (x QueryExplainInformation_ExplainSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryExplainInformation_ExplainSource) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_proto_enumTypes[1].Descriptor()
}

func (QueryExplainInformation_ExplainSource) Type() protoreflect.EnumType {
	return &file_shared_proto_enumTypes[1]
}

func (x QueryExplainInformation_ExplainSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryExplainInformation_ExplainSource.Descriptor instead.
func (QueryExplainInformation_ExplainSource) EnumDescriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{12, 1}
}

type SystemInformation_SystemType int32

const (
	SystemInformation_SELF_HOSTED_SYSTEM      SystemInformation_SystemType = 0
	SystemInformation_AMAZON_RDS_SYSTEM       SystemInformation_SystemType = 1
	SystemInformation_HEROKU_SYSTEM           SystemInformation_SystemType = 2
	SystemInformation_GOOGLE_CLOUD_SQL_SYSTEM SystemInformation_SystemType = 3
	SystemInformation_AZURE_DATABASE_SYSTEM   SystemInformation_SystemType = 4
	SystemInformation_CRUNCHY_BRIDGE_SYSTEM   SystemInformation_SystemType = 5
	SystemInformation_AIVEN_SYSTEM            SystemInformation_SystemType = 6
)

// Enum value maps for SystemInformation_SystemType.
var (
	SystemInformation_SystemType_name = map[int32]string{
		0: "SELF_HOSTED_SYSTEM",
		1: "AMAZON_RDS_SYSTEM",
		2: "HEROKU_SYSTEM",
		3: "GOOGLE_CLOUD_SQL_SYSTEM",
		4: "AZURE_DATABASE_SYSTEM",
		5: "CRUNCHY_BRIDGE_SYSTEM",
		6: "AIVEN_SYSTEM",
	}
	SystemInformation_SystemType_value = map[string]int32{
		"SELF_HOSTED_SYSTEM":      0,
		"AMAZON_RDS_SYSTEM":       1,
		"HEROKU_SYSTEM":           2,
		"GOOGLE_CLOUD_SQL_SYSTEM": 3,
		"AZURE_DATABASE_SYSTEM":   4,
		"CRUNCHY_BRIDGE_SYSTEM":   5,
		"AIVEN_SYSTEM":            6,
	}
)

func (x SystemInformation_SystemType) Enum() *SystemInformation_SystemType {
	p := new(SystemInformation_SystemType)
	*p = x
	return p
}

func (x SystemInformation_SystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemInformation_SystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_shared_proto_enumTypes[2].Descriptor()
}

func (SystemInformation_SystemType) Type() protoreflect.EnumType {
	return &file_shared_proto_enumTypes[2]
}

func (x SystemInformation_SystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemInformation_SystemType.Descriptor instead.
func (SystemInformation_SystemType) EnumDescriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{14, 0}
}

type NullString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NullString) Reset() {
	*x = NullString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullString) ProtoMessage() {}

func (x *NullString) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullString.ProtoReflect.Descriptor instead.
func (*NullString) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{0}
}

func (x *NullString) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *NullString) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type NullInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool  `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Value int32 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NullInt32) Reset() {
	*x = NullInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullInt32) ProtoMessage() {}

func (x *NullInt32) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullInt32.ProtoReflect.Descriptor instead.
func (*NullInt32) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{1}
}

func (x *NullInt32) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *NullInt32) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type NullDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool    `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NullDouble) Reset() {
	*x = NullDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullDouble) ProtoMessage() {}

func (x *NullDouble) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullDouble.ProtoReflect.Descriptor instead.
func (*NullDouble) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{2}
}

func (x *NullDouble) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *NullDouble) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type NullTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Valid bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	Value *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NullTimestamp) Reset() {
	*x = NullTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullTimestamp) ProtoMessage() {}

func (x *NullTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullTimestamp.ProtoReflect.Descriptor instead.
func (*NullTimestamp) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{3}
}

func (x *NullTimestamp) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *NullTimestamp) GetValue() *timestamppb.Timestamp {
	if x != nil {
		return x.Value
	}
	return nil
}

type PostgresVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Full    string `protobuf:"bytes,1,opt,name=full,proto3" json:"full,omitempty"`
	Short   string `protobuf:"bytes,2,opt,name=short,proto3" json:"short,omitempty"`
	Numeric int64  `protobuf:"varint,3,opt,name=numeric,proto3" json:"numeric,omitempty"`
}

func (x *PostgresVersion) Reset() {
	*x = PostgresVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostgresVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostgresVersion) ProtoMessage() {}

func (x *PostgresVersion) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostgresVersion.ProtoReflect.Descriptor instead.
func (*PostgresVersion) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{4}
}

func (x *PostgresVersion) GetFull() string {
	if x != nil {
		return x.Full
	}
	return ""
}

func (x *PostgresVersion) GetShort() string {
	if x != nil {
		return x.Short
	}
	return ""
}

func (x *PostgresVersion) GetNumeric() int64 {
	if x != nil {
		return x.Numeric
	}
	return 0
}

type RoleReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Role name
}

func (x *RoleReference) Reset() {
	*x = RoleReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleReference) ProtoMessage() {}

func (x *RoleReference) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleReference.ProtoReflect.Descriptor instead.
func (*RoleReference) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{5}
}

func (x *RoleReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DatabaseReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // Database name
}

func (x *DatabaseReference) Reset() {
	*x = DatabaseReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseReference) ProtoMessage() {}

func (x *DatabaseReference) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseReference.ProtoReflect.Descriptor instead.
func (*DatabaseReference) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{6}
}

func (x *DatabaseReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RelationReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseIdx  int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	SchemaName   string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	RelationName string `protobuf:"bytes,3,opt,name=relation_name,json=relationName,proto3" json:"relation_name,omitempty"`
}

func (x *RelationReference) Reset() {
	*x = RelationReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelationReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelationReference) ProtoMessage() {}

func (x *RelationReference) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelationReference.ProtoReflect.Descriptor instead.
func (*RelationReference) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{7}
}

func (x *RelationReference) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *RelationReference) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *RelationReference) GetRelationName() string {
	if x != nil {
		return x.RelationName
	}
	return ""
}

type IndexReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseIdx int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	SchemaName  string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	IndexName   string `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
}

func (x *IndexReference) Reset() {
	*x = IndexReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexReference) ProtoMessage() {}

func (x *IndexReference) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexReference.ProtoReflect.Descriptor instead.
func (*IndexReference) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{8}
}

func (x *IndexReference) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *IndexReference) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *IndexReference) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type FunctionReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseIdx  int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	SchemaName   string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
	FunctionName string `protobuf:"bytes,3,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	Arguments    string `protobuf:"bytes,4,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *FunctionReference) Reset() {
	*x = FunctionReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionReference) ProtoMessage() {}

func (x *FunctionReference) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionReference.ProtoReflect.Descriptor instead.
func (*FunctionReference) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{9}
}

func (x *FunctionReference) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *FunctionReference) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

func (x *FunctionReference) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *FunctionReference) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

type QueryReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseIdx int32  `protobuf:"varint,1,opt,name=database_idx,json=databaseIdx,proto3" json:"database_idx,omitempty"`
	RoleIdx     int32  `protobuf:"varint,2,opt,name=role_idx,json=roleIdx,proto3" json:"role_idx,omitempty"`
	Fingerprint []byte `protobuf:"bytes,3,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
}

func (x *QueryReference) Reset() {
	*x = QueryReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReference) ProtoMessage() {}

func (x *QueryReference) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReference.ProtoReflect.Descriptor instead.
func (*QueryReference) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{10}
}

func (x *QueryReference) GetDatabaseIdx() int32 {
	if x != nil {
		return x.DatabaseIdx
	}
	return 0
}

func (x *QueryReference) GetRoleIdx() int32 {
	if x != nil {
		return x.RoleIdx
	}
	return 0
}

func (x *QueryReference) GetFingerprint() []byte {
	if x != nil {
		return x.Fingerprint
	}
	return nil
}

type QueryInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryIdx        int32   `protobuf:"varint,1,opt,name=query_idx,json=queryIdx,proto3" json:"query_idx,omitempty"`
	NormalizedQuery string  `protobuf:"bytes,2,opt,name=normalized_query,json=normalizedQuery,proto3" json:"normalized_query,omitempty"`
	QueryIds        []int64 `protobuf:"varint,3,rep,packed,name=query_ids,json=queryIds,proto3" json:"query_ids,omitempty"`
}

func (x *QueryInformation) Reset() {
	*x = QueryInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInformation) ProtoMessage() {}

func (x *QueryInformation) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInformation.ProtoReflect.Descriptor instead.
func (*QueryInformation) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{11}
}

func (x *QueryInformation) GetQueryIdx() int32 {
	if x != nil {
		return x.QueryIdx
	}
	return 0
}

func (x *QueryInformation) GetNormalizedQuery() string {
	if x != nil {
		return x.NormalizedQuery
	}
	return ""
}

func (x *QueryInformation) GetQueryIds() []int64 {
	if x != nil {
		return x.QueryIds
	}
	return nil
}

type QueryExplainInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QueryIdx      int32                                 `protobuf:"varint,1,opt,name=query_idx,json=queryIdx,proto3" json:"query_idx,omitempty"`
	ExplainOutput string                                `protobuf:"bytes,2,opt,name=explain_output,json=explainOutput,proto3" json:"explain_output,omitempty"`
	ExplainError  string                                `protobuf:"bytes,3,opt,name=explain_error,json=explainError,proto3" json:"explain_error,omitempty"`
	ExplainFormat QueryExplainInformation_ExplainFormat `protobuf:"varint,4,opt,name=explain_format,json=explainFormat,proto3,enum=pganalyze.collector.QueryExplainInformation_ExplainFormat" json:"explain_format,omitempty"`
	ExplainSource QueryExplainInformation_ExplainSource `protobuf:"varint,5,opt,name=explain_source,json=explainSource,proto3,enum=pganalyze.collector.QueryExplainInformation_ExplainSource" json:"explain_source,omitempty"`
}

func (x *QueryExplainInformation) Reset() {
	*x = QueryExplainInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExplainInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExplainInformation) ProtoMessage() {}

func (x *QueryExplainInformation) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExplainInformation.ProtoReflect.Descriptor instead.
func (*QueryExplainInformation) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{12}
}

func (x *QueryExplainInformation) GetQueryIdx() int32 {
	if x != nil {
		return x.QueryIdx
	}
	return 0
}

func (x *QueryExplainInformation) GetExplainOutput() string {
	if x != nil {
		return x.ExplainOutput
	}
	return ""
}

func (x *QueryExplainInformation) GetExplainError() string {
	if x != nil {
		return x.ExplainError
	}
	return ""
}

func (x *QueryExplainInformation) GetExplainFormat() QueryExplainInformation_ExplainFormat {
	if x != nil {
		return x.ExplainFormat
	}
	return QueryExplainInformation_TEXT_EXPLAIN_FORMAT
}

func (x *QueryExplainInformation) GetExplainSource() QueryExplainInformation_ExplainSource {
	if x != nil {
		return x.ExplainSource
	}
	return QueryExplainInformation_STATEMENT_LOG_EXPLAIN_SOURCE
}

type System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SystemInformation             *SystemInformation          `protobuf:"bytes,1,opt,name=system_information,json=systemInformation,proto3" json:"system_information,omitempty"`
	SystemId                      string                      `protobuf:"bytes,2,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`          // Unique identifier for this system
	SystemScope                   string                      `protobuf:"bytes,3,opt,name=system_scope,json=systemScope,proto3" json:"system_scope,omitempty"` // Name the system ID is scoped by (optional)
	SchedulerStatistic            *SchedulerStatistic         `protobuf:"bytes,10,opt,name=scheduler_statistic,json=schedulerStatistic,proto3" json:"scheduler_statistic,omitempty"`
	MemoryStatistic               *MemoryStatistic            `protobuf:"bytes,11,opt,name=memory_statistic,json=memoryStatistic,proto3" json:"memory_statistic,omitempty"`
	CpuInformation                *CPUInformation             `protobuf:"bytes,12,opt,name=cpu_information,json=cpuInformation,proto3" json:"cpu_information,omitempty"`
	CpuReferences                 []*CPUReference             `protobuf:"bytes,13,rep,name=cpu_references,json=cpuReferences,proto3" json:"cpu_references,omitempty"`
	CpuStatistics                 []*CPUStatistic             `protobuf:"bytes,14,rep,name=cpu_statistics,json=cpuStatistics,proto3" json:"cpu_statistics,omitempty"`
	NetworkReferences             []*NetworkReference         `protobuf:"bytes,15,rep,name=network_references,json=networkReferences,proto3" json:"network_references,omitempty"`
	NetworkStatistics             []*NetworkStatistic         `protobuf:"bytes,16,rep,name=network_statistics,json=networkStatistics,proto3" json:"network_statistics,omitempty"`
	DiskReferences                []*DiskReference            `protobuf:"bytes,17,rep,name=disk_references,json=diskReferences,proto3" json:"disk_references,omitempty"`
	DiskInformations              []*DiskInformation          `protobuf:"bytes,18,rep,name=disk_informations,json=diskInformations,proto3" json:"disk_informations,omitempty"`
	DiskStatistics                []*DiskStatistic            `protobuf:"bytes,19,rep,name=disk_statistics,json=diskStatistics,proto3" json:"disk_statistics,omitempty"`
	DiskPartitionReferences       []*DiskPartitionReference   `protobuf:"bytes,20,rep,name=disk_partition_references,json=diskPartitionReferences,proto3" json:"disk_partition_references,omitempty"`
	DiskPartitionInformations     []*DiskPartitionInformation `protobuf:"bytes,21,rep,name=disk_partition_informations,json=diskPartitionInformations,proto3" json:"disk_partition_informations,omitempty"`
	DiskPartitionStatistics       []*DiskPartitionStatistic   `protobuf:"bytes,22,rep,name=disk_partition_statistics,json=diskPartitionStatistics,proto3" json:"disk_partition_statistics,omitempty"`
	DataDirectoryDiskPartitionIdx int32                       `protobuf:"varint,30,opt,name=data_directory_disk_partition_idx,json=dataDirectoryDiskPartitionIdx,proto3" json:"data_directory_disk_partition_idx,omitempty"` // Disk partition that the PostgreSQL data directory lives on
	XlogDiskPartitionIdx          int32                       `protobuf:"varint,31,opt,name=xlog_disk_partition_idx,json=xlogDiskPartitionIdx,proto3" json:"xlog_disk_partition_idx,omitempty"`                              // Disk partition that the PostgreSQL WAL lives on
	XlogUsedBytes                 uint64                      `protobuf:"varint,32,opt,name=xlog_used_bytes,json=xlogUsedBytes,proto3" json:"xlog_used_bytes,omitempty"`                                                     // Size of the WAL directory, in bytes (not necessarily the same as used bytes on the WAL partition!)
}

func (x *System) Reset() {
	*x = System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System) ProtoMessage() {}

func (x *System) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System.ProtoReflect.Descriptor instead.
func (*System) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{13}
}

func (x *System) GetSystemInformation() *SystemInformation {
	if x != nil {
		return x.SystemInformation
	}
	return nil
}

func (x *System) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *System) GetSystemScope() string {
	if x != nil {
		return x.SystemScope
	}
	return ""
}

func (x *System) GetSchedulerStatistic() *SchedulerStatistic {
	if x != nil {
		return x.SchedulerStatistic
	}
	return nil
}

func (x *System) GetMemoryStatistic() *MemoryStatistic {
	if x != nil {
		return x.MemoryStatistic
	}
	return nil
}

func (x *System) GetCpuInformation() *CPUInformation {
	if x != nil {
		return x.CpuInformation
	}
	return nil
}

func (x *System) GetCpuReferences() []*CPUReference {
	if x != nil {
		return x.CpuReferences
	}
	return nil
}

func (x *System) GetCpuStatistics() []*CPUStatistic {
	if x != nil {
		return x.CpuStatistics
	}
	return nil
}

func (x *System) GetNetworkReferences() []*NetworkReference {
	if x != nil {
		return x.NetworkReferences
	}
	return nil
}

func (x *System) GetNetworkStatistics() []*NetworkStatistic {
	if x != nil {
		return x.NetworkStatistics
	}
	return nil
}

func (x *System) GetDiskReferences() []*DiskReference {
	if x != nil {
		return x.DiskReferences
	}
	return nil
}

func (x *System) GetDiskInformations() []*DiskInformation {
	if x != nil {
		return x.DiskInformations
	}
	return nil
}

func (x *System) GetDiskStatistics() []*DiskStatistic {
	if x != nil {
		return x.DiskStatistics
	}
	return nil
}

func (x *System) GetDiskPartitionReferences() []*DiskPartitionReference {
	if x != nil {
		return x.DiskPartitionReferences
	}
	return nil
}

func (x *System) GetDiskPartitionInformations() []*DiskPartitionInformation {
	if x != nil {
		return x.DiskPartitionInformations
	}
	return nil
}

func (x *System) GetDiskPartitionStatistics() []*DiskPartitionStatistic {
	if x != nil {
		return x.DiskPartitionStatistics
	}
	return nil
}

func (x *System) GetDataDirectoryDiskPartitionIdx() int32 {
	if x != nil {
		return x.DataDirectoryDiskPartitionIdx
	}
	return 0
}

func (x *System) GetXlogDiskPartitionIdx() int32 {
	if x != nil {
		return x.XlogDiskPartitionIdx
	}
	return 0
}

func (x *System) GetXlogUsedBytes() uint64 {
	if x != nil {
		return x.XlogUsedBytes
	}
	return 0
}

type SystemInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SystemInformation_SystemType `protobuf:"varint,1,opt,name=type,proto3,enum=pganalyze.collector.SystemInformation_SystemType" json:"type,omitempty"`
	// Types that are assignable to Info:
	//
	//	*SystemInformation_SelfHosted
	//	*SystemInformation_AmazonRds
	Info         isSystemInformation_Info `protobuf_oneof:"info"`
	ResourceTags map[string]string        `protobuf:"bytes,4,rep,name=resource_tags,json=resourceTags,proto3" json:"resource_tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BootTime     *timestamppb.Timestamp   `protobuf:"bytes,10,opt,name=boot_time,json=bootTime,proto3" json:"boot_time,omitempty"` // Timestamp for when the system was started (aka uptime)
}

func (x *SystemInformation) Reset() {
	*x = SystemInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInformation) ProtoMessage() {}

func (x *SystemInformation) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInformation.ProtoReflect.Descriptor instead.
func (*SystemInformation) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{14}
}

func (x *SystemInformation) GetType() SystemInformation_SystemType {
	if x != nil {
		return x.Type
	}
	return SystemInformation_SELF_HOSTED_SYSTEM
}

func (m *SystemInformation) GetInfo() isSystemInformation_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

func (x *SystemInformation) GetSelfHosted() *SystemInformationSelfHosted {
	if x, ok := x.GetInfo().(*SystemInformation_SelfHosted); ok {
		return x.SelfHosted
	}
	return nil
}

func (x *SystemInformation) GetAmazonRds() *SystemInformationAmazonRDS {
	if x, ok := x.GetInfo().(*SystemInformation_AmazonRds); ok {
		return x.AmazonRds
	}
	return nil
}

func (x *SystemInformation) GetResourceTags() map[string]string {
	if x != nil {
		return x.ResourceTags
	}
	return nil
}

func (x *SystemInformation) GetBootTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BootTime
	}
	return nil
}

type isSystemInformation_Info interface {
	isSystemInformation_Info()
}

type SystemInformation_SelfHosted struct {
	SelfHosted *SystemInformationSelfHosted `protobuf:"bytes,2,opt,name=self_hosted,json=selfHosted,proto3,oneof"`
}

type SystemInformation_AmazonRds struct {
	AmazonRds *SystemInformationAmazonRDS `protobuf:"bytes,3,opt,name=amazon_rds,json=amazonRds,proto3,oneof"`
}

func (*SystemInformation_SelfHosted) isSystemInformation_Info() {}

func (*SystemInformation_AmazonRds) isSystemInformation_Info() {}

type SystemInformationSelfHosted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname                 string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Architecture             string `protobuf:"bytes,2,opt,name=architecture,proto3" json:"architecture,omitempty"`
	OperatingSystem          string `protobuf:"bytes,3,opt,name=operating_system,json=operatingSystem,proto3" json:"operating_system,omitempty"`
	Platform                 string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	PlatformFamily           string `protobuf:"bytes,5,opt,name=platform_family,json=platformFamily,proto3" json:"platform_family,omitempty"`
	PlatformVersion          string `protobuf:"bytes,6,opt,name=platform_version,json=platformVersion,proto3" json:"platform_version,omitempty"`
	VirtualizationSystem     string `protobuf:"bytes,7,opt,name=virtualization_system,json=virtualizationSystem,proto3" json:"virtualization_system,omitempty"` // Name of the virtualization system (only if we're a guest)
	KernelVersion            string `protobuf:"bytes,8,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	DatabaseSystemIdentifier string `protobuf:"bytes,9,opt,name=database_system_identifier,json=databaseSystemIdentifier,proto3" json:"database_system_identifier,omitempty"` // Postgres internal system identifier from pg_controldata
}

func (x *SystemInformationSelfHosted) Reset() {
	*x = SystemInformationSelfHosted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInformationSelfHosted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInformationSelfHosted) ProtoMessage() {}

func (x *SystemInformationSelfHosted) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInformationSelfHosted.ProtoReflect.Descriptor instead.
func (*SystemInformationSelfHosted) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{15}
}

func (x *SystemInformationSelfHosted) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *SystemInformationSelfHosted) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *SystemInformationSelfHosted) GetOperatingSystem() string {
	if x != nil {
		return x.OperatingSystem
	}
	return ""
}

func (x *SystemInformationSelfHosted) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *SystemInformationSelfHosted) GetPlatformFamily() string {
	if x != nil {
		return x.PlatformFamily
	}
	return ""
}

func (x *SystemInformationSelfHosted) GetPlatformVersion() string {
	if x != nil {
		return x.PlatformVersion
	}
	return ""
}

func (x *SystemInformationSelfHosted) GetVirtualizationSystem() string {
	if x != nil {
		return x.VirtualizationSystem
	}
	return ""
}

func (x *SystemInformationSelfHosted) GetKernelVersion() string {
	if x != nil {
		return x.KernelVersion
	}
	return ""
}

func (x *SystemInformationSelfHosted) GetDatabaseSystemIdentifier() string {
	if x != nil {
		return x.DatabaseSystemIdentifier
	}
	return ""
}

type SystemInformationAmazonRDS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region                      string                 `protobuf:"bytes,1,opt,name=region,proto3" json:"region,omitempty"`
	InstanceClass               string                 `protobuf:"bytes,2,opt,name=instance_class,json=instanceClass,proto3" json:"instance_class,omitempty"`
	InstanceId                  string                 `protobuf:"bytes,3,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	Status                      string                 `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	AvailabilityZone            string                 `protobuf:"bytes,5,opt,name=availability_zone,json=availabilityZone,proto3" json:"availability_zone,omitempty"`
	PubliclyAccessible          bool                   `protobuf:"varint,6,opt,name=publicly_accessible,json=publiclyAccessible,proto3" json:"publicly_accessible,omitempty"`
	MultiAz                     bool                   `protobuf:"varint,7,opt,name=multi_az,json=multiAz,proto3" json:"multi_az,omitempty"`
	SecondaryAvailabilityZone   string                 `protobuf:"bytes,8,opt,name=secondary_availability_zone,json=secondaryAvailabilityZone,proto3" json:"secondary_availability_zone,omitempty"`
	CaCertificate               string                 `protobuf:"bytes,9,opt,name=ca_certificate,json=caCertificate,proto3" json:"ca_certificate,omitempty"`
	AutoMinorVersionUpgrade     bool                   `protobuf:"varint,10,opt,name=auto_minor_version_upgrade,json=autoMinorVersionUpgrade,proto3" json:"auto_minor_version_upgrade,omitempty"`
	PreferredMaintenanceWindow  string                 `protobuf:"bytes,12,opt,name=preferred_maintenance_window,json=preferredMaintenanceWindow,proto3" json:"preferred_maintenance_window,omitempty"`
	PreferredBackupWindow       string                 `protobuf:"bytes,14,opt,name=preferred_backup_window,json=preferredBackupWindow,proto3" json:"preferred_backup_window,omitempty"`
	LatestRestorableTime        *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=latest_restorable_time,json=latestRestorableTime,proto3" json:"latest_restorable_time,omitempty"`
	BackupRetentionPeriodDays   int32                  `protobuf:"varint,15,opt,name=backup_retention_period_days,json=backupRetentionPeriodDays,proto3" json:"backup_retention_period_days,omitempty"`
	MasterUsername              string                 `protobuf:"bytes,16,opt,name=master_username,json=masterUsername,proto3" json:"master_username,omitempty"`
	InitialDbName               string                 `protobuf:"bytes,17,opt,name=initial_db_name,json=initialDbName,proto3" json:"initial_db_name,omitempty"`
	CreatedAt                   *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	EnhancedMonitoring          bool                   `protobuf:"varint,19,opt,name=enhanced_monitoring,json=enhancedMonitoring,proto3" json:"enhanced_monitoring,omitempty"`
	PerformanceInsights         bool                   `protobuf:"varint,20,opt,name=performance_insights,json=performanceInsights,proto3" json:"performance_insights,omitempty"`
	PostgresLogExport           bool                   `protobuf:"varint,21,opt,name=postgres_log_export,json=postgresLogExport,proto3" json:"postgres_log_export,omitempty"`
	IamAuthentication           bool                   `protobuf:"varint,22,opt,name=iam_authentication,json=iamAuthentication,proto3" json:"iam_authentication,omitempty"`
	DeletionProtection          bool                   `protobuf:"varint,23,opt,name=deletion_protection,json=deletionProtection,proto3" json:"deletion_protection,omitempty"`
	ParameterApplyStatus        string                 `protobuf:"bytes,40,opt,name=parameter_apply_status,json=parameterApplyStatus,proto3" json:"parameter_apply_status,omitempty"`
	ParameterPgssEnabled        bool                   `protobuf:"varint,41,opt,name=parameter_pgss_enabled,json=parameterPgssEnabled,proto3" json:"parameter_pgss_enabled,omitempty"`
	ParameterAutoExplainEnabled bool                   `protobuf:"varint,42,opt,name=parameter_auto_explain_enabled,json=parameterAutoExplainEnabled,proto3" json:"parameter_auto_explain_enabled,omitempty"`
	IsAuroraPostgres            bool                   `protobuf:"varint,50,opt,name=is_aurora_postgres,json=isAuroraPostgres,proto3" json:"is_aurora_postgres,omitempty"`
}

func (x *SystemInformationAmazonRDS) Reset() {
	*x = SystemInformationAmazonRDS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInformationAmazonRDS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInformationAmazonRDS) ProtoMessage() {}

func (x *SystemInformationAmazonRDS) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInformationAmazonRDS.ProtoReflect.Descriptor instead.
func (*SystemInformationAmazonRDS) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{16}
}

func (x *SystemInformationAmazonRDS) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SystemInformationAmazonRDS) GetInstanceClass() string {
	if x != nil {
		return x.InstanceClass
	}
	return ""
}

func (x *SystemInformationAmazonRDS) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *SystemInformationAmazonRDS) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SystemInformationAmazonRDS) GetAvailabilityZone() string {
	if x != nil {
		return x.AvailabilityZone
	}
	return ""
}

func (x *SystemInformationAmazonRDS) GetPubliclyAccessible() bool {
	if x != nil {
		return x.PubliclyAccessible
	}
	return false
}

func (x *SystemInformationAmazonRDS) GetMultiAz() bool {
	if x != nil {
		return x.MultiAz
	}
	return false
}

func (x *SystemInformationAmazonRDS) GetSecondaryAvailabilityZone() string {
	if x != nil {
		return x.SecondaryAvailabilityZone
	}
	return ""
}

func (x *SystemInformationAmazonRDS) GetCaCertificate() string {
	if x != nil {
		return x.CaCertificate
	}
	return ""
}

func (x *SystemInformationAmazonRDS) GetAutoMinorVersionUpgrade() bool {
	if x != nil {
		return x.AutoMinorVersionUpgrade
	}
	return false
}

func (x *SystemInformationAmazonRDS) GetPreferredMaintenanceWindow() string {
	if x != nil {
		return x.PreferredMaintenanceWindow
	}
	return ""
}

func (x *SystemInformationAmazonRDS) GetPreferredBackupWindow() string {
	if x != nil {
		return x.PreferredBackupWindow
	}
	return ""
}

func (x *SystemInformationAmazonRDS) GetLatestRestorableTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestRestorableTime
	}
	return nil
}

func (x *SystemInformationAmazonRDS) GetBackupRetentionPeriodDays() int32 {
	if x != nil {
		return x.BackupRetentionPeriodDays
	}
	return 0
}

func (x *SystemInformationAmazonRDS) GetMasterUsername() string {
	if x != nil {
		return x.MasterUsername
	}
	return ""
}

func (x *SystemInformationAmazonRDS) GetInitialDbName() string {
	if x != nil {
		return x.InitialDbName
	}
	return ""
}

func (x *SystemInformationAmazonRDS) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *SystemInformationAmazonRDS) GetEnhancedMonitoring() bool {
	if x != nil {
		return x.EnhancedMonitoring
	}
	return false
}

func (x *SystemInformationAmazonRDS) GetPerformanceInsights() bool {
	if x != nil {
		return x.PerformanceInsights
	}
	return false
}

func (x *SystemInformationAmazonRDS) GetPostgresLogExport() bool {
	if x != nil {
		return x.PostgresLogExport
	}
	return false
}

func (x *SystemInformationAmazonRDS) GetIamAuthentication() bool {
	if x != nil {
		return x.IamAuthentication
	}
	return false
}

func (x *SystemInformationAmazonRDS) GetDeletionProtection() bool {
	if x != nil {
		return x.DeletionProtection
	}
	return false
}

func (x *SystemInformationAmazonRDS) GetParameterApplyStatus() string {
	if x != nil {
		return x.ParameterApplyStatus
	}
	return ""
}

func (x *SystemInformationAmazonRDS) GetParameterPgssEnabled() bool {
	if x != nil {
		return x.ParameterPgssEnabled
	}
	return false
}

func (x *SystemInformationAmazonRDS) GetParameterAutoExplainEnabled() bool {
	if x != nil {
		return x.ParameterAutoExplainEnabled
	}
	return false
}

func (x *SystemInformationAmazonRDS) GetIsAuroraPostgres() bool {
	if x != nil {
		return x.IsAuroraPostgres
	}
	return false
}

type SchedulerStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoadAverage_1Min  float64 `protobuf:"fixed64,1,opt,name=load_average_1min,json=loadAverage1min,proto3" json:"load_average_1min,omitempty"`
	LoadAverage_5Min  float64 `protobuf:"fixed64,2,opt,name=load_average_5min,json=loadAverage5min,proto3" json:"load_average_5min,omitempty"`
	LoadAverage_15Min float64 `protobuf:"fixed64,3,opt,name=load_average_15min,json=loadAverage15min,proto3" json:"load_average_15min,omitempty"`
}

func (x *SchedulerStatistic) Reset() {
	*x = SchedulerStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchedulerStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchedulerStatistic) ProtoMessage() {}

func (x *SchedulerStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchedulerStatistic.ProtoReflect.Descriptor instead.
func (*SchedulerStatistic) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{17}
}

func (x *SchedulerStatistic) GetLoadAverage_1Min() float64 {
	if x != nil {
		return x.LoadAverage_1Min
	}
	return 0
}

func (x *SchedulerStatistic) GetLoadAverage_5Min() float64 {
	if x != nil {
		return x.LoadAverage_5Min
	}
	return 0
}

func (x *SchedulerStatistic) GetLoadAverage_15Min() float64 {
	if x != nil {
		return x.LoadAverage_15Min
	}
	return 0
}

type MemoryStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBytes         uint64 `protobuf:"varint,1,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	CachedBytes        uint64 `protobuf:"varint,2,opt,name=cached_bytes,json=cachedBytes,proto3" json:"cached_bytes,omitempty"`
	BuffersBytes       uint64 `protobuf:"varint,3,opt,name=buffers_bytes,json=buffersBytes,proto3" json:"buffers_bytes,omitempty"`
	FreeBytes          uint64 `protobuf:"varint,4,opt,name=free_bytes,json=freeBytes,proto3" json:"free_bytes,omitempty"`
	WritebackBytes     uint64 `protobuf:"varint,5,opt,name=writeback_bytes,json=writebackBytes,proto3" json:"writeback_bytes,omitempty"`
	DirtyBytes         uint64 `protobuf:"varint,6,opt,name=dirty_bytes,json=dirtyBytes,proto3" json:"dirty_bytes,omitempty"`
	SlabBytes          uint64 `protobuf:"varint,7,opt,name=slab_bytes,json=slabBytes,proto3" json:"slab_bytes,omitempty"`
	MappedBytes        uint64 `protobuf:"varint,8,opt,name=mapped_bytes,json=mappedBytes,proto3" json:"mapped_bytes,omitempty"`
	PageTablesBytes    uint64 `protobuf:"varint,9,opt,name=page_tables_bytes,json=pageTablesBytes,proto3" json:"page_tables_bytes,omitempty"`
	ActiveBytes        uint64 `protobuf:"varint,10,opt,name=active_bytes,json=activeBytes,proto3" json:"active_bytes,omitempty"`
	InactiveBytes      uint64 `protobuf:"varint,11,opt,name=inactive_bytes,json=inactiveBytes,proto3" json:"inactive_bytes,omitempty"`
	AvailableBytes     uint64 `protobuf:"varint,12,opt,name=available_bytes,json=availableBytes,proto3" json:"available_bytes,omitempty"`
	SwapUsedBytes      uint64 `protobuf:"varint,13,opt,name=swap_used_bytes,json=swapUsedBytes,proto3" json:"swap_used_bytes,omitempty"`
	SwapTotalBytes     uint64 `protobuf:"varint,14,opt,name=swap_total_bytes,json=swapTotalBytes,proto3" json:"swap_total_bytes,omitempty"`
	HugePagesSizeBytes uint64 `protobuf:"varint,20,opt,name=huge_pages_size_bytes,json=hugePagesSizeBytes,proto3" json:"huge_pages_size_bytes,omitempty"`
	HugePagesFree      uint64 `protobuf:"varint,21,opt,name=huge_pages_free,json=hugePagesFree,proto3" json:"huge_pages_free,omitempty"`
	HugePagesTotal     uint64 `protobuf:"varint,22,opt,name=huge_pages_total,json=hugePagesTotal,proto3" json:"huge_pages_total,omitempty"`
	HugePagesReserved  uint64 `protobuf:"varint,23,opt,name=huge_pages_reserved,json=hugePagesReserved,proto3" json:"huge_pages_reserved,omitempty"`
	HugePagesSurplus   uint64 `protobuf:"varint,24,opt,name=huge_pages_surplus,json=hugePagesSurplus,proto3" json:"huge_pages_surplus,omitempty"`
	ApplicationBytes   uint64 `protobuf:"varint,30,opt,name=application_bytes,json=applicationBytes,proto3" json:"application_bytes,omitempty"` // Some systems only tell us how much memory PostgreSQL is using (and nothing else)
}

func (x *MemoryStatistic) Reset() {
	*x = MemoryStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStatistic) ProtoMessage() {}

func (x *MemoryStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryStatistic.ProtoReflect.Descriptor instead.
func (*MemoryStatistic) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{18}
}

func (x *MemoryStatistic) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *MemoryStatistic) GetCachedBytes() uint64 {
	if x != nil {
		return x.CachedBytes
	}
	return 0
}

func (x *MemoryStatistic) GetBuffersBytes() uint64 {
	if x != nil {
		return x.BuffersBytes
	}
	return 0
}

func (x *MemoryStatistic) GetFreeBytes() uint64 {
	if x != nil {
		return x.FreeBytes
	}
	return 0
}

func (x *MemoryStatistic) GetWritebackBytes() uint64 {
	if x != nil {
		return x.WritebackBytes
	}
	return 0
}

func (x *MemoryStatistic) GetDirtyBytes() uint64 {
	if x != nil {
		return x.DirtyBytes
	}
	return 0
}

func (x *MemoryStatistic) GetSlabBytes() uint64 {
	if x != nil {
		return x.SlabBytes
	}
	return 0
}

func (x *MemoryStatistic) GetMappedBytes() uint64 {
	if x != nil {
		return x.MappedBytes
	}
	return 0
}

func (x *MemoryStatistic) GetPageTablesBytes() uint64 {
	if x != nil {
		return x.PageTablesBytes
	}
	return 0
}

func (x *MemoryStatistic) GetActiveBytes() uint64 {
	if x != nil {
		return x.ActiveBytes
	}
	return 0
}

func (x *MemoryStatistic) GetInactiveBytes() uint64 {
	if x != nil {
		return x.InactiveBytes
	}
	return 0
}

func (x *MemoryStatistic) GetAvailableBytes() uint64 {
	if x != nil {
		return x.AvailableBytes
	}
	return 0
}

func (x *MemoryStatistic) GetSwapUsedBytes() uint64 {
	if x != nil {
		return x.SwapUsedBytes
	}
	return 0
}

func (x *MemoryStatistic) GetSwapTotalBytes() uint64 {
	if x != nil {
		return x.SwapTotalBytes
	}
	return 0
}

func (x *MemoryStatistic) GetHugePagesSizeBytes() uint64 {
	if x != nil {
		return x.HugePagesSizeBytes
	}
	return 0
}

func (x *MemoryStatistic) GetHugePagesFree() uint64 {
	if x != nil {
		return x.HugePagesFree
	}
	return 0
}

func (x *MemoryStatistic) GetHugePagesTotal() uint64 {
	if x != nil {
		return x.HugePagesTotal
	}
	return 0
}

func (x *MemoryStatistic) GetHugePagesReserved() uint64 {
	if x != nil {
		return x.HugePagesReserved
	}
	return 0
}

func (x *MemoryStatistic) GetHugePagesSurplus() uint64 {
	if x != nil {
		return x.HugePagesSurplus
	}
	return 0
}

func (x *MemoryStatistic) GetApplicationBytes() uint64 {
	if x != nil {
		return x.ApplicationBytes
	}
	return 0
}

type CPUInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model             string  `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	CacheSizeBytes    int32   `protobuf:"varint,2,opt,name=cache_size_bytes,json=cacheSizeBytes,proto3" json:"cache_size_bytes,omitempty"`
	SpeedMhz          float64 `protobuf:"fixed64,3,opt,name=speed_mhz,json=speedMhz,proto3" json:"speed_mhz,omitempty"`
	SocketCount       int32   `protobuf:"varint,4,opt,name=socket_count,json=socketCount,proto3" json:"socket_count,omitempty"`
	PhysicalCoreCount int32   `protobuf:"varint,5,opt,name=physical_core_count,json=physicalCoreCount,proto3" json:"physical_core_count,omitempty"`
	LogicalCoreCount  int32   `protobuf:"varint,6,opt,name=logical_core_count,json=logicalCoreCount,proto3" json:"logical_core_count,omitempty"`
}

func (x *CPUInformation) Reset() {
	*x = CPUInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUInformation) ProtoMessage() {}

func (x *CPUInformation) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUInformation.ProtoReflect.Descriptor instead.
func (*CPUInformation) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{19}
}

func (x *CPUInformation) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CPUInformation) GetCacheSizeBytes() int32 {
	if x != nil {
		return x.CacheSizeBytes
	}
	return 0
}

func (x *CPUInformation) GetSpeedMhz() float64 {
	if x != nil {
		return x.SpeedMhz
	}
	return 0
}

func (x *CPUInformation) GetSocketCount() int32 {
	if x != nil {
		return x.SocketCount
	}
	return 0
}

func (x *CPUInformation) GetPhysicalCoreCount() int32 {
	if x != nil {
		return x.PhysicalCoreCount
	}
	return 0
}

func (x *CPUInformation) GetLogicalCoreCount() int32 {
	if x != nil {
		return x.LogicalCoreCount
	}
	return 0
}

type CPUReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoreId string `protobuf:"bytes,1,opt,name=core_id,json=coreId,proto3" json:"core_id,omitempty"` // Which CPU core these stats refer to (-1 for systems where we only have an aggregate for all cores)
}

func (x *CPUReference) Reset() {
	*x = CPUReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUReference) ProtoMessage() {}

func (x *CPUReference) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUReference.ProtoReflect.Descriptor instead.
func (*CPUReference) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{20}
}

func (x *CPUReference) GetCoreId() string {
	if x != nil {
		return x.CoreId
	}
	return ""
}

type CPUStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuIdx           int32   `protobuf:"varint,1,opt,name=cpu_idx,json=cpuIdx,proto3" json:"cpu_idx,omitempty"`
	UserPercent      float64 `protobuf:"fixed64,2,opt,name=user_percent,json=userPercent,proto3" json:"user_percent,omitempty"`
	SystemPercent    float64 `protobuf:"fixed64,3,opt,name=system_percent,json=systemPercent,proto3" json:"system_percent,omitempty"`
	IdlePercent      float64 `protobuf:"fixed64,4,opt,name=idle_percent,json=idlePercent,proto3" json:"idle_percent,omitempty"`
	NicePercent      float64 `protobuf:"fixed64,5,opt,name=nice_percent,json=nicePercent,proto3" json:"nice_percent,omitempty"`
	IowaitPercent    float64 `protobuf:"fixed64,6,opt,name=iowait_percent,json=iowaitPercent,proto3" json:"iowait_percent,omitempty"`
	IrqPercent       float64 `protobuf:"fixed64,7,opt,name=irq_percent,json=irqPercent,proto3" json:"irq_percent,omitempty"`
	SoftIrqPercent   float64 `protobuf:"fixed64,8,opt,name=soft_irq_percent,json=softIrqPercent,proto3" json:"soft_irq_percent,omitempty"`
	StealPercent     float64 `protobuf:"fixed64,9,opt,name=steal_percent,json=stealPercent,proto3" json:"steal_percent,omitempty"`
	GuestPercent     float64 `protobuf:"fixed64,10,opt,name=guest_percent,json=guestPercent,proto3" json:"guest_percent,omitempty"`
	GuestNicePercent float64 `protobuf:"fixed64,11,opt,name=guest_nice_percent,json=guestNicePercent,proto3" json:"guest_nice_percent,omitempty"`
}

func (x *CPUStatistic) Reset() {
	*x = CPUStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUStatistic) ProtoMessage() {}

func (x *CPUStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUStatistic.ProtoReflect.Descriptor instead.
func (*CPUStatistic) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{21}
}

func (x *CPUStatistic) GetCpuIdx() int32 {
	if x != nil {
		return x.CpuIdx
	}
	return 0
}

func (x *CPUStatistic) GetUserPercent() float64 {
	if x != nil {
		return x.UserPercent
	}
	return 0
}

func (x *CPUStatistic) GetSystemPercent() float64 {
	if x != nil {
		return x.SystemPercent
	}
	return 0
}

func (x *CPUStatistic) GetIdlePercent() float64 {
	if x != nil {
		return x.IdlePercent
	}
	return 0
}

func (x *CPUStatistic) GetNicePercent() float64 {
	if x != nil {
		return x.NicePercent
	}
	return 0
}

func (x *CPUStatistic) GetIowaitPercent() float64 {
	if x != nil {
		return x.IowaitPercent
	}
	return 0
}

func (x *CPUStatistic) GetIrqPercent() float64 {
	if x != nil {
		return x.IrqPercent
	}
	return 0
}

func (x *CPUStatistic) GetSoftIrqPercent() float64 {
	if x != nil {
		return x.SoftIrqPercent
	}
	return 0
}

func (x *CPUStatistic) GetStealPercent() float64 {
	if x != nil {
		return x.StealPercent
	}
	return 0
}

func (x *CPUStatistic) GetGuestPercent() float64 {
	if x != nil {
		return x.GuestPercent
	}
	return 0
}

func (x *CPUStatistic) GetGuestNicePercent() float64 {
	if x != nil {
		return x.GuestNicePercent
	}
	return 0
}

type NetworkReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
}

func (x *NetworkReference) Reset() {
	*x = NetworkReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkReference) ProtoMessage() {}

func (x *NetworkReference) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkReference.ProtoReflect.Descriptor instead.
func (*NetworkReference) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{22}
}

func (x *NetworkReference) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

type NetworkStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkIdx                       int32  `protobuf:"varint,1,opt,name=network_idx,json=networkIdx,proto3" json:"network_idx,omitempty"`
	TransmitThroughputBytesPerSecond uint64 `protobuf:"varint,2,opt,name=transmit_throughput_bytes_per_second,json=transmitThroughputBytesPerSecond,proto3" json:"transmit_throughput_bytes_per_second,omitempty"`
	ReceiveThroughputBytesPerSecond  uint64 `protobuf:"varint,3,opt,name=receive_throughput_bytes_per_second,json=receiveThroughputBytesPerSecond,proto3" json:"receive_throughput_bytes_per_second,omitempty"`
}

func (x *NetworkStatistic) Reset() {
	*x = NetworkStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkStatistic) ProtoMessage() {}

func (x *NetworkStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkStatistic.ProtoReflect.Descriptor instead.
func (*NetworkStatistic) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{23}
}

func (x *NetworkStatistic) GetNetworkIdx() int32 {
	if x != nil {
		return x.NetworkIdx
	}
	return 0
}

func (x *NetworkStatistic) GetTransmitThroughputBytesPerSecond() uint64 {
	if x != nil {
		return x.TransmitThroughputBytesPerSecond
	}
	return 0
}

func (x *NetworkStatistic) GetReceiveThroughputBytesPerSecond() uint64 {
	if x != nil {
		return x.ReceiveThroughputBytesPerSecond
	}
	return 0
}

type DiskReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName string `protobuf:"bytes,1,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
}

func (x *DiskReference) Reset() {
	*x = DiskReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskReference) ProtoMessage() {}

func (x *DiskReference) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskReference.ProtoReflect.Descriptor instead.
func (*DiskReference) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{24}
}

func (x *DiskReference) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type DiskInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskIdx         int32  `protobuf:"varint,1,opt,name=disk_idx,json=diskIdx,proto3" json:"disk_idx,omitempty"`
	DiskType        string `protobuf:"bytes,2,opt,name=disk_type,json=diskType,proto3" json:"disk_type,omitempty"`                       // Disk type (hdd/sdd/io1/gp2)
	Scheduler       string `protobuf:"bytes,3,opt,name=scheduler,proto3" json:"scheduler,omitempty"`                                     // Linux Scheduler (noop/anticipatory/deadline/cfq)
	ProvisionedIops uint32 `protobuf:"varint,4,opt,name=provisioned_iops,json=provisionedIops,proto3" json:"provisioned_iops,omitempty"` // If applicable, how many IOPS are provisioned for this device
	Encrypted       bool   `protobuf:"varint,5,opt,name=encrypted,proto3" json:"encrypted,omitempty"`                                    // If applicable, is this device encrypted? (default false)
}

func (x *DiskInformation) Reset() {
	*x = DiskInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskInformation) ProtoMessage() {}

func (x *DiskInformation) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskInformation.ProtoReflect.Descriptor instead.
func (*DiskInformation) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{25}
}

func (x *DiskInformation) GetDiskIdx() int32 {
	if x != nil {
		return x.DiskIdx
	}
	return 0
}

func (x *DiskInformation) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *DiskInformation) GetScheduler() string {
	if x != nil {
		return x.Scheduler
	}
	return ""
}

func (x *DiskInformation) GetProvisionedIops() uint32 {
	if x != nil {
		return x.ProvisionedIops
	}
	return 0
}

func (x *DiskInformation) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

type DiskStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskIdx                  int32   `protobuf:"varint,1,opt,name=disk_idx,json=diskIdx,proto3" json:"disk_idx,omitempty"`
	ReadOperationsPerSecond  float64 `protobuf:"fixed64,2,opt,name=read_operations_per_second,json=readOperationsPerSecond,proto3" json:"read_operations_per_second,omitempty"`    // The average number of read requests that were issued to the device per second
	ReadsMergedPerSecond     float64 `protobuf:"fixed64,3,opt,name=reads_merged_per_second,json=readsMergedPerSecond,proto3" json:"reads_merged_per_second,omitempty"`             // The average number of read requests merged per second that were queued to the device
	BytesReadPerSecond       float64 `protobuf:"fixed64,4,opt,name=bytes_read_per_second,json=bytesReadPerSecond,proto3" json:"bytes_read_per_second,omitempty"`                   // The average number of bytes read from the device per second
	AvgReadLatency           float64 `protobuf:"fixed64,5,opt,name=avg_read_latency,json=avgReadLatency,proto3" json:"avg_read_latency,omitempty"`                                 // The average time (in milliseconds) for read requests issued to the device to be served
	WriteOperationsPerSecond float64 `protobuf:"fixed64,6,opt,name=write_operations_per_second,json=writeOperationsPerSecond,proto3" json:"write_operations_per_second,omitempty"` // The average number of write requests that were issued to the device per second
	WritesMergedPerSecond    float64 `protobuf:"fixed64,7,opt,name=writes_merged_per_second,json=writesMergedPerSecond,proto3" json:"writes_merged_per_second,omitempty"`          // The average number of write requests merged per second that were queued to the device
	BytesWrittenPerSecond    float64 `protobuf:"fixed64,8,opt,name=bytes_written_per_second,json=bytesWrittenPerSecond,proto3" json:"bytes_written_per_second,omitempty"`          // The average number of bytes written to the device per second
	AvgWriteLatency          float64 `protobuf:"fixed64,9,opt,name=avg_write_latency,json=avgWriteLatency,proto3" json:"avg_write_latency,omitempty"`                              // The average time (in milliseconds) for write requests issued to the device to be served
	AvgQueueSize             int32   `protobuf:"varint,10,opt,name=avg_queue_size,json=avgQueueSize,proto3" json:"avg_queue_size,omitempty"`                                       // Average I/O operations in flight at the same time (waiting or worked on by the device)
	UtilizationPercent       float64 `protobuf:"fixed64,12,opt,name=utilization_percent,json=utilizationPercent,proto3" json:"utilization_percent,omitempty"`                      // Percentage of CPU time during which I/O requests were issued to the device (bandwidth utilization for the device)
}

func (x *DiskStatistic) Reset() {
	*x = DiskStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskStatistic) ProtoMessage() {}

func (x *DiskStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskStatistic.ProtoReflect.Descriptor instead.
func (*DiskStatistic) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{26}
}

func (x *DiskStatistic) GetDiskIdx() int32 {
	if x != nil {
		return x.DiskIdx
	}
	return 0
}

func (x *DiskStatistic) GetReadOperationsPerSecond() float64 {
	if x != nil {
		return x.ReadOperationsPerSecond
	}
	return 0
}

func (x *DiskStatistic) GetReadsMergedPerSecond() float64 {
	if x != nil {
		return x.ReadsMergedPerSecond
	}
	return 0
}

func (x *DiskStatistic) GetBytesReadPerSecond() float64 {
	if x != nil {
		return x.BytesReadPerSecond
	}
	return 0
}

func (x *DiskStatistic) GetAvgReadLatency() float64 {
	if x != nil {
		return x.AvgReadLatency
	}
	return 0
}

func (x *DiskStatistic) GetWriteOperationsPerSecond() float64 {
	if x != nil {
		return x.WriteOperationsPerSecond
	}
	return 0
}

func (x *DiskStatistic) GetWritesMergedPerSecond() float64 {
	if x != nil {
		return x.WritesMergedPerSecond
	}
	return 0
}

func (x *DiskStatistic) GetBytesWrittenPerSecond() float64 {
	if x != nil {
		return x.BytesWrittenPerSecond
	}
	return 0
}

func (x *DiskStatistic) GetAvgWriteLatency() float64 {
	if x != nil {
		return x.AvgWriteLatency
	}
	return 0
}

func (x *DiskStatistic) GetAvgQueueSize() int32 {
	if x != nil {
		return x.AvgQueueSize
	}
	return 0
}

func (x *DiskStatistic) GetUtilizationPercent() float64 {
	if x != nil {
		return x.UtilizationPercent
	}
	return 0
}

type DiskPartitionReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mountpoint string `protobuf:"bytes,1,opt,name=mountpoint,proto3" json:"mountpoint,omitempty"`
}

func (x *DiskPartitionReference) Reset() {
	*x = DiskPartitionReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPartitionReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPartitionReference) ProtoMessage() {}

func (x *DiskPartitionReference) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPartitionReference.ProtoReflect.Descriptor instead.
func (*DiskPartitionReference) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{27}
}

func (x *DiskPartitionReference) GetMountpoint() string {
	if x != nil {
		return x.Mountpoint
	}
	return ""
}

type DiskPartitionInformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskPartitionIdx int32  `protobuf:"varint,1,opt,name=disk_partition_idx,json=diskPartitionIdx,proto3" json:"disk_partition_idx,omitempty"`
	DiskIdx          int32  `protobuf:"varint,2,opt,name=disk_idx,json=diskIdx,proto3" json:"disk_idx,omitempty"`
	FilesystemType   string `protobuf:"bytes,3,opt,name=filesystem_type,json=filesystemType,proto3" json:"filesystem_type,omitempty"` // ext4/zfs/etc.
	FilesystemOpts   string `protobuf:"bytes,4,opt,name=filesystem_opts,json=filesystemOpts,proto3" json:"filesystem_opts,omitempty"` // filesystem options (noatime, etc)
	PartitionName    string `protobuf:"bytes,5,opt,name=partition_name,json=partitionName,proto3" json:"partition_name,omitempty"`    // Platform-specific name for the partition (e.g. /dev/sda9)
}

func (x *DiskPartitionInformation) Reset() {
	*x = DiskPartitionInformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPartitionInformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPartitionInformation) ProtoMessage() {}

func (x *DiskPartitionInformation) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPartitionInformation.ProtoReflect.Descriptor instead.
func (*DiskPartitionInformation) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{28}
}

func (x *DiskPartitionInformation) GetDiskPartitionIdx() int32 {
	if x != nil {
		return x.DiskPartitionIdx
	}
	return 0
}

func (x *DiskPartitionInformation) GetDiskIdx() int32 {
	if x != nil {
		return x.DiskIdx
	}
	return 0
}

func (x *DiskPartitionInformation) GetFilesystemType() string {
	if x != nil {
		return x.FilesystemType
	}
	return ""
}

func (x *DiskPartitionInformation) GetFilesystemOpts() string {
	if x != nil {
		return x.FilesystemOpts
	}
	return ""
}

func (x *DiskPartitionInformation) GetPartitionName() string {
	if x != nil {
		return x.PartitionName
	}
	return ""
}

type DiskPartitionStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskPartitionIdx int32  `protobuf:"varint,1,opt,name=disk_partition_idx,json=diskPartitionIdx,proto3" json:"disk_partition_idx,omitempty"`
	UsedBytes        uint64 `protobuf:"varint,2,opt,name=used_bytes,json=usedBytes,proto3" json:"used_bytes,omitempty"`
	TotalBytes       uint64 `protobuf:"varint,3,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
}

func (x *DiskPartitionStatistic) Reset() {
	*x = DiskPartitionStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shared_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskPartitionStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskPartitionStatistic) ProtoMessage() {}

func (x *DiskPartitionStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_shared_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskPartitionStatistic.ProtoReflect.Descriptor instead.
func (*DiskPartitionStatistic) Descriptor() ([]byte, []int) {
	return file_shared_proto_rawDescGZIP(), []int{29}
}

func (x *DiskPartitionStatistic) GetDiskPartitionIdx() int32 {
	if x != nil {
		return x.DiskPartitionIdx
	}
	return 0
}

func (x *DiskPartitionStatistic) GetUsedBytes() uint64 {
	if x != nil {
		return x.UsedBytes
	}
	return 0
}

func (x *DiskPartitionStatistic) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

var File_shared_proto protoreflect.FileDescriptor

var file_shared_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a, 0x0a, 0x4e, 0x75, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x37,
	0x0a, 0x09, 0x4e, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x0a, 0x4e, 0x75, 0x6c, 0x6c, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x57, 0x0a, 0x0d, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x0f, 0x50, 0x6f,
	0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x75, 0x6c,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x22, 0x23, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x7c, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a,
	0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49,
	0x64, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x11, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x70, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x49, 0x64, 0x78, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x78, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x22, 0x77, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49,
	0x64, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1b, 0x0a,
	0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x73, 0x22, 0x99, 0x04, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x61, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x61, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x41, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x58, 0x50, 0x4c,
	0x41, 0x49, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x45, 0x58, 0x50,
	0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49,
	0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x22, 0xaf, 0x0b, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x55, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x13, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x12,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x4f, 0x0a, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70,
	0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x63, 0x70, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x67, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x43, 0x50, 0x55, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x63, 0x70,
	0x75, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x63,
	0x70, 0x75, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x43, 0x50, 0x55, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0d, 0x63, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x12, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x11,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x67, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0e,
	0x64, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x67,
	0x0a, 0x19, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x17,
	0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x6d, 0x0a, 0x1b, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x19, 0x64, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x67, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x67, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x17, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x48, 0x0a, 0x21, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1d, 0x64, 0x61, 0x74, 0x61,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x35, 0x0a, 0x17, 0x78, 0x6c, 0x6f,
	0x67, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x78, 0x6c, 0x6f, 0x67,
	0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78,
	0x12, 0x26, 0x0a, 0x0f, 0x78, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x78, 0x6c, 0x6f, 0x67, 0x55,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x98, 0x05, 0x0a, 0x11, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x70,
	0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x65, 0x6c, 0x66, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x6d,
	0x61, 0x7a, 0x6f, 0x6e, 0x5f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x52, 0x44, 0x53, 0x48,
	0x00, 0x52, 0x09, 0x61, 0x6d, 0x61, 0x7a, 0x6f, 0x6e, 0x52, 0x64, 0x73, 0x12, 0x5d, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x48, 0x4f, 0x53,
	0x54, 0x45, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x4d, 0x41, 0x5a, 0x4f, 0x4e, 0x5f, 0x52, 0x44, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x45, 0x52, 0x4f, 0x4b, 0x55, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x04, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x52, 0x55, 0x4e, 0x43, 0x48, 0x59, 0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45,
	0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x49, 0x56,
	0x45, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x06, 0x42, 0x06, 0x0a, 0x04, 0x69,
	0x6e, 0x66, 0x6f, 0x22, 0x92, 0x03, 0x0a, 0x1b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x48, 0x6f, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x15, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x76,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x25, 0x0a, 0x0e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xa3, 0x0a, 0x0a, 0x1a, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d,
	0x61, 0x7a, 0x6f, 0x6e, 0x52, 0x44, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f,
	0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x7a, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x7a, 0x12, 0x3e, 0x0a, 0x1b, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x5f, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12,
	0x3b, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x1c,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x36,
	0x0a, 0x17, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x50, 0x0a, 0x16, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x14, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x62, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x44, 0x61, 0x79, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x62,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x44, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x4c, 0x6f, 0x67, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x61, 0x6d,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x61, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x67, 0x73,
	0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x50, 0x67, 0x73, 0x73, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x45, 0x78, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73,
	0x5f, 0x61, 0x75, 0x72, 0x6f, 0x72, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x41, 0x75, 0x72, 0x6f, 0x72, 0x61,
	0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0x9a,
	0x01, 0x0a, 0x12, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x31, 0x6d, 0x69,
	0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x35, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6c, 0x6f,
	0x61, 0x64, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x35, 0x6d, 0x69, 0x6e, 0x12, 0x2c, 0x0a,
	0x12, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x31, 0x35,
	0x6d, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6c, 0x6f, 0x61, 0x64, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x31, 0x35, 0x6d, 0x69, 0x6e, 0x22, 0xa6, 0x06, 0x0a, 0x0f,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x73, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x75, 0x66, 0x66,
	0x65, 0x72, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x65, 0x65,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x66, 0x72,
	0x65, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x74, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x74, 0x79, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x61, 0x62, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x6c, 0x61, 0x62, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x70, 0x70, 0x65, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x73, 0x77, 0x61,
	0x70, 0x55, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x77,
	0x61, 0x70, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x75, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x73, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x12, 0x68, 0x75, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x75, 0x67, 0x65, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x68, 0x75, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73, 0x46, 0x72, 0x65, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x68, 0x75, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x68, 0x75, 0x67, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x68, 0x75, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x68, 0x75, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x75, 0x67,
	0x65, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x68, 0x75, 0x67, 0x65, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x53, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x0e, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x28, 0x0a,
	0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x5f, 0x6d, 0x68, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x4d, 0x68, 0x7a, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x68, 0x79, 0x73, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x63,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x27, 0x0a, 0x0c, 0x43, 0x50, 0x55, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x22, 0xa1,
	0x03, 0x0a, 0x0c, 0x43, 0x50, 0x55, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x63, 0x70, 0x75, 0x49, 0x64, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6e, 0x69, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6f, 0x77, 0x61,
	0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x69, 0x6f, 0x77, 0x61, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x72, 0x71, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x72, 0x71, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x69, 0x72, 0x71, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x6f, 0x66, 0x74,
	0x49, 0x72, 0x71, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x65, 0x61, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x73, 0x74, 0x65, 0x61, 0x6c, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x67, 0x75, 0x65, 0x73, 0x74, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x22, 0x39, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd1, 0x01,
	0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x78, 0x12, 0x4e, 0x0a, 0x24, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x5f,
	0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x54, 0x68, 0x72, 0x6f, 0x75,
	0x67, 0x68, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x4c, 0x0a, 0x23, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x22, 0x30, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x49,
	0x64, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6f, 0x70,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x22, 0xaf, 0x04, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x64, 0x69, 0x73, 0x6b,
	0x49, 0x64, 0x78, 0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x61, 0x64, 0x73, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x14, 0x72, 0x65, 0x61, 0x64, 0x73, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x62, 0x79, 0x74, 0x65, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76,
	0x67, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x76, 0x67, 0x52, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x3d, 0x0a, 0x1b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x5f, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x77, 0x72, 0x69, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x61, 0x76, 0x67, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x61, 0x76, 0x67, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x38, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x6b,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x18, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x69, 0x73,
	0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x19, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x6f, 0x70, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x6b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2c, 0x0a, 0x12,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x2f, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shared_proto_rawDescOnce sync.Once
	file_shared_proto_rawDescData = file_shared_proto_rawDesc
)

func file_shared_proto_rawDescGZIP() []byte {
	file_shared_proto_rawDescOnce.Do(func() {
		file_shared_proto_rawDescData = protoimpl.X.CompressGZIP(file_shared_proto_rawDescData)
	})
	return file_shared_proto_rawDescData
}

var file_shared_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_shared_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_shared_proto_goTypes = []interface{}{
	(QueryExplainInformation_ExplainFormat)(0), // 0: pganalyze.collector.QueryExplainInformation.ExplainFormat
	(QueryExplainInformation_ExplainSource)(0), // 1: pganalyze.collector.QueryExplainInformation.ExplainSource
	(SystemInformation_SystemType)(0),          // 2: pganalyze.collector.SystemInformation.SystemType
	(*NullString)(nil),                         // 3: pganalyze.collector.NullString
	(*NullInt32)(nil),                          // 4: pganalyze.collector.NullInt32
	(*NullDouble)(nil),                         // 5: pganalyze.collector.NullDouble
	(*NullTimestamp)(nil),                      // 6: pganalyze.collector.NullTimestamp
	(*PostgresVersion)(nil),                    // 7: pganalyze.collector.PostgresVersion
	(*RoleReference)(nil),                      // 8: pganalyze.collector.RoleReference
	(*DatabaseReference)(nil),                  // 9: pganalyze.collector.DatabaseReference
	(*RelationReference)(nil),                  // 10: pganalyze.collector.RelationReference
	(*IndexReference)(nil),                     // 11: pganalyze.collector.IndexReference
	(*FunctionReference)(nil),                  // 12: pganalyze.collector.FunctionReference
	(*QueryReference)(nil),                     // 13: pganalyze.collector.QueryReference
	(*QueryInformation)(nil),                   // 14: pganalyze.collector.QueryInformation
	(*QueryExplainInformation)(nil),            // 15: pganalyze.collector.QueryExplainInformation
	(*System)(nil),                             // 16: pganalyze.collector.System
	(*SystemInformation)(nil),                  // 17: pganalyze.collector.SystemInformation
	(*SystemInformationSelfHosted)(nil),        // 18: pganalyze.collector.SystemInformationSelfHosted
	(*SystemInformationAmazonRDS)(nil),         // 19: pganalyze.collector.SystemInformationAmazonRDS
	(*SchedulerStatistic)(nil),                 // 20: pganalyze.collector.SchedulerStatistic
	(*MemoryStatistic)(nil),                    // 21: pganalyze.collector.MemoryStatistic
	(*CPUInformation)(nil),                     // 22: pganalyze.collector.CPUInformation
	(*CPUReference)(nil),                       // 23: pganalyze.collector.CPUReference
	(*CPUStatistic)(nil),                       // 24: pganalyze.collector.CPUStatistic
	(*NetworkReference)(nil),                   // 25: pganalyze.collector.NetworkReference
	(*NetworkStatistic)(nil),                   // 26: pganalyze.collector.NetworkStatistic
	(*DiskReference)(nil),                      // 27: pganalyze.collector.DiskReference
	(*DiskInformation)(nil),                    // 28: pganalyze.collector.DiskInformation
	(*DiskStatistic)(nil),                      // 29: pganalyze.collector.DiskStatistic
	(*DiskPartitionReference)(nil),             // 30: pganalyze.collector.DiskPartitionReference
	(*DiskPartitionInformation)(nil),           // 31: pganalyze.collector.DiskPartitionInformation
	(*DiskPartitionStatistic)(nil),             // 32: pganalyze.collector.DiskPartitionStatistic
	nil,                                        // 33: pganalyze.collector.SystemInformation.ResourceTagsEntry
	(*timestamppb.Timestamp)(nil),              // 34: google.protobuf.Timestamp
}
var file_shared_proto_depIdxs = []int32{
	34, // 0: pganalyze.collector.NullTimestamp.value:type_name -> google.protobuf.Timestamp
	0,  // 1: pganalyze.collector.QueryExplainInformation.explain_format:type_name -> pganalyze.collector.QueryExplainInformation.ExplainFormat
	1,  // 2: pganalyze.collector.QueryExplainInformation.explain_source:type_name -> pganalyze.collector.QueryExplainInformation.ExplainSource
	17, // 3: pganalyze.collector.System.system_information:type_name -> pganalyze.collector.SystemInformation
	20, // 4: pganalyze.collector.System.scheduler_statistic:type_name -> pganalyze.collector.SchedulerStatistic
	21, // 5: pganalyze.collector.System.memory_statistic:type_name -> pganalyze.collector.MemoryStatistic
	22, // 6: pganalyze.collector.System.cpu_information:type_name -> pganalyze.collector.CPUInformation
	23, // 7: pganalyze.collector.System.cpu_references:type_name -> pganalyze.collector.CPUReference
	24, // 8: pganalyze.collector.System.cpu_statistics:type_name -> pganalyze.collector.CPUStatistic
	25, // 9: pganalyze.collector.System.network_references:type_name -> pganalyze.collector.NetworkReference
	26, // 10: pganalyze.collector.System.network_statistics:type_name -> pganalyze.collector.NetworkStatistic
	27, // 11: pganalyze.collector.System.disk_references:type_name -> pganalyze.collector.DiskReference
	28, // 12: pganalyze.collector.System.disk_informations:type_name -> pganalyze.collector.DiskInformation
	29, // 13: pganalyze.collector.System.disk_statistics:type_name -> pganalyze.collector.DiskStatistic
	30, // 14: pganalyze.collector.System.disk_partition_references:type_name -> pganalyze.collector.DiskPartitionReference
	31, // 15: pganalyze.collector.System.disk_partition_informations:type_name -> pganalyze.collector.DiskPartitionInformation
	32, // 16: pganalyze.collector.System.disk_partition_statistics:type_name -> pganalyze.collector.DiskPartitionStatistic
	2,  // 17: pganalyze.collector.SystemInformation.type:type_name -> pganalyze.collector.SystemInformation.SystemType
	18, // 18: pganalyze.collector.SystemInformation.self_hosted:type_name -> pganalyze.collector.SystemInformationSelfHosted
	19, // 19: pganalyze.collector.SystemInformation.amazon_rds:type_name -> pganalyze.collector.SystemInformationAmazonRDS
	33, // 20: pganalyze.collector.SystemInformation.resource_tags:type_name -> pganalyze.collector.SystemInformation.ResourceTagsEntry
	34, // 21: pganalyze.collector.SystemInformation.boot_time:type_name -> google.protobuf.Timestamp
	34, // 22: pganalyze.collector.SystemInformationAmazonRDS.latest_restorable_time:type_name -> google.protobuf.Timestamp
	34, // 23: pganalyze.collector.SystemInformationAmazonRDS.created_at:type_name -> google.protobuf.Timestamp
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_shared_proto_init() }
func file_shared_proto_init() {
	if File_shared_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_shared_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostgresVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelationReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExplainInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInformationSelfHosted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInformationAmazonRDS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchedulerStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPartitionReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPartitionInformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shared_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskPartitionStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_shared_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*SystemInformation_SelfHosted)(nil),
		(*SystemInformation_AmazonRds)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shared_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shared_proto_goTypes,
		DependencyIndexes: file_shared_proto_depIdxs,
		EnumInfos:         file_shared_proto_enumTypes,
		MessageInfos:      file_shared_proto_msgTypes,
	}.Build()
	File_shared_proto = out.File
	file_shared_proto_rawDesc = nil
	file_shared_proto_goTypes = nil
	file_shared_proto_depIdxs = nil
}
