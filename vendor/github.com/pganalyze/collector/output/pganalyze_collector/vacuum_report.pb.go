// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.14.0
// source: vacuum_report.proto

package pganalyze_collector

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VacuumReportData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseReferences       []*DatabaseReference `protobuf:"bytes,10,rep,name=database_references,json=databaseReferences,proto3" json:"database_references,omitempty"`
	RelationReferences       []*RelationReference `protobuf:"bytes,11,rep,name=relation_references,json=relationReferences,proto3" json:"relation_references,omitempty"`
	VacuumStatistics         []*VacuumStatistic   `protobuf:"bytes,20,rep,name=vacuum_statistics,json=vacuumStatistics,proto3" json:"vacuum_statistics,omitempty"`
	AutovacuumMaxWorkers     int32                `protobuf:"varint,30,opt,name=autovacuum_max_workers,json=autovacuumMaxWorkers,proto3" json:"autovacuum_max_workers,omitempty"`
	AutovacuumNaptimeSeconds int32                `protobuf:"varint,31,opt,name=autovacuum_naptime_seconds,json=autovacuumNaptimeSeconds,proto3" json:"autovacuum_naptime_seconds,omitempty"`
}

func (x *VacuumReportData) Reset() {
	*x = VacuumReportData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vacuum_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VacuumReportData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VacuumReportData) ProtoMessage() {}

func (x *VacuumReportData) ProtoReflect() protoreflect.Message {
	mi := &file_vacuum_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VacuumReportData.ProtoReflect.Descriptor instead.
func (*VacuumReportData) Descriptor() ([]byte, []int) {
	return file_vacuum_report_proto_rawDescGZIP(), []int{0}
}

func (x *VacuumReportData) GetDatabaseReferences() []*DatabaseReference {
	if x != nil {
		return x.DatabaseReferences
	}
	return nil
}

func (x *VacuumReportData) GetRelationReferences() []*RelationReference {
	if x != nil {
		return x.RelationReferences
	}
	return nil
}

func (x *VacuumReportData) GetVacuumStatistics() []*VacuumStatistic {
	if x != nil {
		return x.VacuumStatistics
	}
	return nil
}

func (x *VacuumReportData) GetAutovacuumMaxWorkers() int32 {
	if x != nil {
		return x.AutovacuumMaxWorkers
	}
	return 0
}

func (x *VacuumReportData) GetAutovacuumNaptimeSeconds() int32 {
	if x != nil {
		return x.AutovacuumNaptimeSeconds
	}
	return 0
}

type VacuumStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelationIdx                     int32          `protobuf:"varint,1,opt,name=relation_idx,json=relationIdx,proto3" json:"relation_idx,omitempty"`
	LiveRowCount                    int32          `protobuf:"varint,10,opt,name=live_row_count,json=liveRowCount,proto3" json:"live_row_count,omitempty"`
	DeadRowCount                    int32          `protobuf:"varint,11,opt,name=dead_row_count,json=deadRowCount,proto3" json:"dead_row_count,omitempty"`
	Relfrozenxid                    int32          `protobuf:"varint,12,opt,name=relfrozenxid,proto3" json:"relfrozenxid,omitempty"`
	Relminmxid                      int32          `protobuf:"varint,13,opt,name=relminmxid,proto3" json:"relminmxid,omitempty"`
	LastManualVacuumRun             *NullTimestamp `protobuf:"bytes,14,opt,name=last_manual_vacuum_run,json=lastManualVacuumRun,proto3" json:"last_manual_vacuum_run,omitempty"`
	LastAutoVacuumRun               *NullTimestamp `protobuf:"bytes,15,opt,name=last_auto_vacuum_run,json=lastAutoVacuumRun,proto3" json:"last_auto_vacuum_run,omitempty"`
	LastManualAnalyzeRun            *NullTimestamp `protobuf:"bytes,16,opt,name=last_manual_analyze_run,json=lastManualAnalyzeRun,proto3" json:"last_manual_analyze_run,omitempty"`
	LastAutoAnalyzeRun              *NullTimestamp `protobuf:"bytes,17,opt,name=last_auto_analyze_run,json=lastAutoAnalyzeRun,proto3" json:"last_auto_analyze_run,omitempty"`
	Fillfactor                      int32          `protobuf:"varint,18,opt,name=fillfactor,proto3" json:"fillfactor,omitempty"`
	AutovacuumEnabled               bool           `protobuf:"varint,20,opt,name=autovacuum_enabled,json=autovacuumEnabled,proto3" json:"autovacuum_enabled,omitempty"`
	AutovacuumVacuumThreshold       int32          `protobuf:"varint,21,opt,name=autovacuum_vacuum_threshold,json=autovacuumVacuumThreshold,proto3" json:"autovacuum_vacuum_threshold,omitempty"`
	AutovacuumAnalyzeThreshold      int32          `protobuf:"varint,22,opt,name=autovacuum_analyze_threshold,json=autovacuumAnalyzeThreshold,proto3" json:"autovacuum_analyze_threshold,omitempty"`
	AutovacuumVacuumScaleFactor     float64        `protobuf:"fixed64,23,opt,name=autovacuum_vacuum_scale_factor,json=autovacuumVacuumScaleFactor,proto3" json:"autovacuum_vacuum_scale_factor,omitempty"`
	AutovacuumAnalyzeScaleFactor    float64        `protobuf:"fixed64,24,opt,name=autovacuum_analyze_scale_factor,json=autovacuumAnalyzeScaleFactor,proto3" json:"autovacuum_analyze_scale_factor,omitempty"`
	AutovacuumFreezeMaxAge          int32          `protobuf:"varint,25,opt,name=autovacuum_freeze_max_age,json=autovacuumFreezeMaxAge,proto3" json:"autovacuum_freeze_max_age,omitempty"`
	AutovacuumMultixactFreezeMaxAge int32          `protobuf:"varint,26,opt,name=autovacuum_multixact_freeze_max_age,json=autovacuumMultixactFreezeMaxAge,proto3" json:"autovacuum_multixact_freeze_max_age,omitempty"`
	AutovacuumVacuumCostDelay       int32          `protobuf:"varint,27,opt,name=autovacuum_vacuum_cost_delay,json=autovacuumVacuumCostDelay,proto3" json:"autovacuum_vacuum_cost_delay,omitempty"`
	AutovacuumVacuumCostLimit       int32          `protobuf:"varint,28,opt,name=autovacuum_vacuum_cost_limit,json=autovacuumVacuumCostLimit,proto3" json:"autovacuum_vacuum_cost_limit,omitempty"`
}

func (x *VacuumStatistic) Reset() {
	*x = VacuumStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vacuum_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VacuumStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VacuumStatistic) ProtoMessage() {}

func (x *VacuumStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_vacuum_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VacuumStatistic.ProtoReflect.Descriptor instead.
func (*VacuumStatistic) Descriptor() ([]byte, []int) {
	return file_vacuum_report_proto_rawDescGZIP(), []int{1}
}

func (x *VacuumStatistic) GetRelationIdx() int32 {
	if x != nil {
		return x.RelationIdx
	}
	return 0
}

func (x *VacuumStatistic) GetLiveRowCount() int32 {
	if x != nil {
		return x.LiveRowCount
	}
	return 0
}

func (x *VacuumStatistic) GetDeadRowCount() int32 {
	if x != nil {
		return x.DeadRowCount
	}
	return 0
}

func (x *VacuumStatistic) GetRelfrozenxid() int32 {
	if x != nil {
		return x.Relfrozenxid
	}
	return 0
}

func (x *VacuumStatistic) GetRelminmxid() int32 {
	if x != nil {
		return x.Relminmxid
	}
	return 0
}

func (x *VacuumStatistic) GetLastManualVacuumRun() *NullTimestamp {
	if x != nil {
		return x.LastManualVacuumRun
	}
	return nil
}

func (x *VacuumStatistic) GetLastAutoVacuumRun() *NullTimestamp {
	if x != nil {
		return x.LastAutoVacuumRun
	}
	return nil
}

func (x *VacuumStatistic) GetLastManualAnalyzeRun() *NullTimestamp {
	if x != nil {
		return x.LastManualAnalyzeRun
	}
	return nil
}

func (x *VacuumStatistic) GetLastAutoAnalyzeRun() *NullTimestamp {
	if x != nil {
		return x.LastAutoAnalyzeRun
	}
	return nil
}

func (x *VacuumStatistic) GetFillfactor() int32 {
	if x != nil {
		return x.Fillfactor
	}
	return 0
}

func (x *VacuumStatistic) GetAutovacuumEnabled() bool {
	if x != nil {
		return x.AutovacuumEnabled
	}
	return false
}

func (x *VacuumStatistic) GetAutovacuumVacuumThreshold() int32 {
	if x != nil {
		return x.AutovacuumVacuumThreshold
	}
	return 0
}

func (x *VacuumStatistic) GetAutovacuumAnalyzeThreshold() int32 {
	if x != nil {
		return x.AutovacuumAnalyzeThreshold
	}
	return 0
}

func (x *VacuumStatistic) GetAutovacuumVacuumScaleFactor() float64 {
	if x != nil {
		return x.AutovacuumVacuumScaleFactor
	}
	return 0
}

func (x *VacuumStatistic) GetAutovacuumAnalyzeScaleFactor() float64 {
	if x != nil {
		return x.AutovacuumAnalyzeScaleFactor
	}
	return 0
}

func (x *VacuumStatistic) GetAutovacuumFreezeMaxAge() int32 {
	if x != nil {
		return x.AutovacuumFreezeMaxAge
	}
	return 0
}

func (x *VacuumStatistic) GetAutovacuumMultixactFreezeMaxAge() int32 {
	if x != nil {
		return x.AutovacuumMultixactFreezeMaxAge
	}
	return 0
}

func (x *VacuumStatistic) GetAutovacuumVacuumCostDelay() int32 {
	if x != nil {
		return x.AutovacuumVacuumCostDelay
	}
	return 0
}

func (x *VacuumStatistic) GetAutovacuumVacuumCostLimit() int32 {
	if x != nil {
		return x.AutovacuumVacuumCostLimit
	}
	return 0
}

var File_vacuum_report_proto protoreflect.FileDescriptor

var file_vacuum_report_proto_rawDesc = []byte{
	0x0a, 0x13, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x0c, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x03, 0x0a, 0x10, 0x56, 0x61, 0x63,
	0x75, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a,
	0x13, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x51, 0x0a, 0x11, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x67, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x2e, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x52, 0x10, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x14, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x4d, 0x61,
	0x78, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x61, 0x75, 0x74, 0x6f,
	0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61, 0x75,
	0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x4e, 0x61, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x8c, 0x09, 0x0a, 0x0f, 0x56, 0x61, 0x63, 0x75, 0x75,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x78, 0x12, 0x24, 0x0a,
	0x0e, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x77, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x61,
	0x64, 0x52, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x78, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x6c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x78, 0x69, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x6c, 0x6d, 0x69, 0x6e, 0x6d, 0x78, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x72, 0x65, 0x6c, 0x6d, 0x69, 0x6e, 0x6d, 0x78, 0x69, 0x64, 0x12, 0x57, 0x0a,
	0x16, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x63,
	0x75, 0x75, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x56, 0x61, 0x63,
	0x75, 0x75, 0x6d, 0x52, 0x75, 0x6e, 0x12, 0x53, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x75,
	0x74, 0x6f, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x52, 0x75, 0x6e, 0x12, 0x59, 0x0a, 0x17, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x55, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x2e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x41,
	0x75, 0x74, 0x6f, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x75, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a,
	0x12, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x76,
	0x61, 0x63, 0x75, 0x75, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1b,
	0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x63, 0x75, 0x75,
	0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x56, 0x61, 0x63,
	0x75, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x40, 0x0a, 0x1c,
	0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1a, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x43,
	0x0a, 0x1e, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x63,
	0x75, 0x75, 0x6d, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1b, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75,
	0x75, 0x6d, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x1f, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75,
	0x6d, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x61, 0x75,
	0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x75,
	0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x61,
	0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x4d,
	0x61, 0x78, 0x41, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x23, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63,
	0x75, 0x75, 0x6d, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x1f, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x78, 0x61, 0x63, 0x74, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x4d, 0x61, 0x78,
	0x41, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75, 0x75,
	0x6d, 0x5f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x76,
	0x61, 0x63, 0x75, 0x75, 0x6d, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x43, 0x6f, 0x73, 0x74, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x6f, 0x76, 0x61, 0x63, 0x75,
	0x75, 0x6d, 0x5f, 0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x61, 0x75, 0x74, 0x6f,
	0x76, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x56, 0x61, 0x63, 0x75, 0x75, 0x6d, 0x43, 0x6f, 0x73, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x2f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2f, 0x70,
	0x67, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vacuum_report_proto_rawDescOnce sync.Once
	file_vacuum_report_proto_rawDescData = file_vacuum_report_proto_rawDesc
)

func file_vacuum_report_proto_rawDescGZIP() []byte {
	file_vacuum_report_proto_rawDescOnce.Do(func() {
		file_vacuum_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_vacuum_report_proto_rawDescData)
	})
	return file_vacuum_report_proto_rawDescData
}

var file_vacuum_report_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_vacuum_report_proto_goTypes = []interface{}{
	(*VacuumReportData)(nil),  // 0: pganalyze.collector.VacuumReportData
	(*VacuumStatistic)(nil),   // 1: pganalyze.collector.VacuumStatistic
	(*DatabaseReference)(nil), // 2: pganalyze.collector.DatabaseReference
	(*RelationReference)(nil), // 3: pganalyze.collector.RelationReference
	(*NullTimestamp)(nil),     // 4: pganalyze.collector.NullTimestamp
}
var file_vacuum_report_proto_depIdxs = []int32{
	2, // 0: pganalyze.collector.VacuumReportData.database_references:type_name -> pganalyze.collector.DatabaseReference
	3, // 1: pganalyze.collector.VacuumReportData.relation_references:type_name -> pganalyze.collector.RelationReference
	1, // 2: pganalyze.collector.VacuumReportData.vacuum_statistics:type_name -> pganalyze.collector.VacuumStatistic
	4, // 3: pganalyze.collector.VacuumStatistic.last_manual_vacuum_run:type_name -> pganalyze.collector.NullTimestamp
	4, // 4: pganalyze.collector.VacuumStatistic.last_auto_vacuum_run:type_name -> pganalyze.collector.NullTimestamp
	4, // 5: pganalyze.collector.VacuumStatistic.last_manual_analyze_run:type_name -> pganalyze.collector.NullTimestamp
	4, // 6: pganalyze.collector.VacuumStatistic.last_auto_analyze_run:type_name -> pganalyze.collector.NullTimestamp
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_vacuum_report_proto_init() }
func file_vacuum_report_proto_init() {
	if File_vacuum_report_proto != nil {
		return
	}
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vacuum_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VacuumReportData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vacuum_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VacuumStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vacuum_report_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vacuum_report_proto_goTypes,
		DependencyIndexes: file_vacuum_report_proto_depIdxs,
		MessageInfos:      file_vacuum_report_proto_msgTypes,
	}.Build()
	File_vacuum_report_proto = out.File
	file_vacuum_report_proto_rawDesc = nil
	file_vacuum_report_proto_goTypes = nil
	file_vacuum_report_proto_depIdxs = nil
}
