// Package hire code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package larkhire

import (
	"context"
	"errors"
	"fmt"

	"github.com/larksuite/oapi-sdk-go/v3/event"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

const (
	UserIdTypeUserId  = "user_id"  // 以 user_id 来识别用户
	UserIdTypeUnionId = "union_id" // 以 union_id 来识别用户
	UserIdTypeOpenId  = "open_id"  // 以 open_id 来识别用户
)

const (
	DepartmentIdTypeOpenDepartmentId = "open_department_id" // 以 open_department_id 来标识部门
	DepartmentIdTypeDepartmentId     = "department_id"      // 以 department_id 来标识部门
)

const (
	TerminationType我们拒绝了候选人 = 1  // 我们拒绝了候选人
	TerminationType候选人拒绝了我们 = 22 // 候选人拒绝了我们
	TerminationType其他       = 27 // 其他

)

const (
	UserIdTypeTransferOnboardApplicationUserId  = "user_id"  // 以 user_id 来识别用户
	UserIdTypeTransferOnboardApplicationUnionId = "union_id" // 以 union_id 来识别用户
	UserIdTypeTransferOnboardApplicationOpenId  = "open_id"  // 以 open_id 来识别用户
)

const (
	DepartmentIdTypeTransferOnboardApplicationOpenDepartmentId        = "open_department_id"         // 以 open_department_id 来标识部门
	DepartmentIdTypeTransferOnboardApplicationDepartmentId            = "department_id"              // 以 department_id 来标识部门
	DepartmentIdTypeTransferOnboardApplicationPeopleAdminDepartmentId = "people_admin_department_id" // 以 people_admin_department_id 来标识部门
)

const (
	UserIdTypeListApplicationInterviewUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeListApplicationInterviewUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeListApplicationInterviewOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeListApplicationInterviewPeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	Type附件简历  = 1 // 附件简历
	Type候选人作品 = 2 // 候选人作品
	Type自定义附件 = 3 // 自定义附件

)

const (
	State导入成功 = 1 // 导入成功
	State导入失败 = 2 // 导入失败

)

const (
	UserIdTypeGetEmployeeUserId  = "user_id"  // 以 user_id 来识别用户
	UserIdTypeGetEmployeeUnionId = "union_id" // 以 union_id 来识别用户
	UserIdTypeGetEmployeeOpenId  = "open_id"  // 以 open_id 来识别用户
)

const (
	DepartmentIdTypeGetEmployeeOpenDepartmentId        = "open_department_id"         // 以 open_department_id 来标识部门
	DepartmentIdTypeGetEmployeeDepartmentId            = "department_id"              // 以 department_id 来标识部门
	DepartmentIdTypeGetEmployeePeopleAdminDepartmentId = "people_admin_department_id" // 以 people_admin_department_id 来标识部门
)

const (
	UserIdTypeGetByApplicationEmployeeUserId  = "user_id"  // 以 user_id 来识别用户
	UserIdTypeGetByApplicationEmployeeUnionId = "union_id" // 以 union_id 来识别用户
	UserIdTypeGetByApplicationEmployeeOpenId  = "open_id"  // 以 open_id 来识别用户
)

const (
	DepartmentIdTypeGetByApplicationEmployeeOpenDepartmentId        = "open_department_id"         // 以 open_department_id 来标识部门
	DepartmentIdTypeGetByApplicationEmployeeDepartmentId            = "department_id"              // 以 department_id 来标识部门
	DepartmentIdTypeGetByApplicationEmployeePeopleAdminDepartmentId = "people_admin_department_id" // 以 people_admin_department_id 来标识部门
)

const (
	OperationConvert   = 1 // 转正
	OperationOverboard = 2 // 离职

)

const (
	UserIdTypePatchEmployeeUserId  = "user_id"  // 以 user_id 来识别用户
	UserIdTypePatchEmployeeUnionId = "union_id" // 以 union_id 来识别用户
	UserIdTypePatchEmployeeOpenId  = "open_id"  // 以 open_id 来识别用户
)

const (
	DepartmentIdTypePatchEmployeeOpenDepartmentId        = "open_department_id"         // 以 open_department_id 来标识部门
	DepartmentIdTypePatchEmployeeDepartmentId            = "department_id"              // 以 department_id 来标识部门
	DepartmentIdTypePatchEmployeePeopleAdminDepartmentId = "people_admin_department_id" // 以 people_admin_department_id 来标识部门
)

const (
	UserIdTypeListEvaluationUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeListEvaluationUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeListEvaluationOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeListEvaluationPeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	JobRecruitmentTypeSocialRecruitment = 1 // 社招
	JobRecruitmentTypeCampusRecruitment = 2 // 校招

)

const (
	DeliveryTypeHRVisit           = 1 // HR 寻访
	DeliveryTypeCandidateDelivery = 2 // 候选人主动投递
	DeliveryTypeTalentRecommend   = 3 // 人才推荐
	DeliveryTypeOthers            = 4 // 其他

)

const (
	JobRecruitmentTypeUpdateExternalApplicationSocialRecruitment = 1 // 社招
	JobRecruitmentTypeUpdateExternalApplicationCampusRecruitment = 2 // 校招

)

const (
	DeliveryTypeUpdateExternalApplicationHRVisit           = 1 // HR 寻访
	DeliveryTypeUpdateExternalApplicationCandidateDelivery = 2 // 候选人主动投递
	DeliveryTypeUpdateExternalApplicationTalentRecommend   = 3 // 人才推荐
	DeliveryTypeUpdateExternalApplicationOthers            = 4 // 其他

)

const (
	ParticipateStatus未参与 = 1 // 未参与
	ParticipateStatus参与  = 2 // 参与
	ParticipateStatus爽约  = 3 // 爽约

)

const (
	Conclusion不通过 = 1 // 不通过
	Conclusion通过  = 2 // 通过
	Conclusion待定  = 3 // 待定

)

const (
	UserIdTypeListInterviewUserId  = "user_id"  // 以user_id来识别用户
	UserIdTypeListInterviewUnionId = "union_id" // 以union_id来识别用户
	UserIdTypeListInterviewOpenId  = "open_id"  // 以open_id来识别用户
)

const (
	ExperienceNoLimit         = 1 // 不限
	ExperienceGraduate        = 2 // 应届毕业生
	ExperienceUnderOneYear    = 3 // 1年以下
	ExperienceOneToThreeYear  = 4 // 1-3年
	ExperienceThreeToFiveYear = 5 // 3-5年
	ExperienceFiveToSevenYear = 6 // 5-7年
	ExperienceSevenToTenYear  = 7 // 7-10年
	ExperienceOverTenYear     = 8 // 10年以上

)

const (
	ProcessTypeSocialProcess = 1 // 社招
	ProcessTypeCampusProcess = 2 // 校招

)

const (
	RequiredDegreePrimaryEducation            = 1  // 小学及以上
	RequiredDegreeJuniorMiddleSchoolEducation = 2  // 初中及以上
	RequiredDegreeSecondary                   = 3  // 专职及以上
	RequiredDegreeSeniorSchoolGraduates       = 4  // 高中及以上
	RequiredDegreeAssociate                   = 5  // 大专及以上
	RequiredDegreeBachelor                    = 6  // 本科及以上
	RequiredDegreeMaster                      = 7  // 硕士及以上
	RequiredDegreePhd                         = 8  // 博士及以上
	RequiredDegreeNoLimit                     = 20 // 不限

)

const (
	JobAttributeConcrete = 1 // 实体职位
	JobAttributeVirtual  = 2 // 虚拟职位

)

const (
	UserIdTypeCombinedCreateJobUserId  = "user_id"  // 以 user_id 来识别用户
	UserIdTypeCombinedCreateJobUnionId = "union_id" // 以 union_id 来识别用户
	UserIdTypeCombinedCreateJobOpenId  = "open_id"  // 以 open_id 来识别用户
)

const (
	DepartmentIdTypeCombinedCreateJobOpenDepartmentId = "open_department_id" // 以 open_department_id 来标识部门
	DepartmentIdTypeCombinedCreateJobDepartmentId     = "department_id"      // 以 department_id 来标识部门
)

const (
	ExperienceCombinedUpdateJobNoLimit         = 1 // 不限
	ExperienceCombinedUpdateJobGraduate        = 2 // 应届毕业生
	ExperienceCombinedUpdateJobUnderOneYear    = 3 // 1年以下
	ExperienceCombinedUpdateJobOneToThreeYear  = 4 // 1-3年
	ExperienceCombinedUpdateJobThreeToFiveYear = 5 // 3-5年
	ExperienceCombinedUpdateJobFiveToSevenYear = 6 // 5-7年
	ExperienceCombinedUpdateJobSevenToTenYear  = 7 // 7-10年
	ExperienceCombinedUpdateJobOverTenYear     = 8 // 10年以上

)

const (
	RequiredDegreeCombinedUpdateJobPrimaryEducation            = 1  // 小学及以上
	RequiredDegreeCombinedUpdateJobJuniorMiddleSchoolEducation = 2  // 初中及以上
	RequiredDegreeCombinedUpdateJobSecondary                   = 3  // 专职及以上
	RequiredDegreeCombinedUpdateJobSeniorSchoolGraduates       = 4  // 高中及以上
	RequiredDegreeCombinedUpdateJobAssociate                   = 5  // 大专及以上
	RequiredDegreeCombinedUpdateJobBachelor                    = 6  // 本科及以上
	RequiredDegreeCombinedUpdateJobMaster                      = 7  // 硕士及以上
	RequiredDegreeCombinedUpdateJobPhd                         = 8  // 博士及以上
	RequiredDegreeCombinedUpdateJobNoLimit                     = 20 // 不限

)

const (
	JobAttributeCombinedUpdateJobConcrete = 1 // 实体职位
	JobAttributeCombinedUpdateJobVirtual  = 2 // 虚拟职位

)

const (
	UserIdTypeCombinedUpdateJobUserId  = "user_id"  // 以 user_id 来识别用户
	UserIdTypeCombinedUpdateJobUnionId = "union_id" // 以 union_id 来识别用户
	UserIdTypeCombinedUpdateJobOpenId  = "open_id"  // 以 open_id 来识别用户
)

const (
	DepartmentIdTypeCombinedUpdateJobOpenDepartmentId = "open_department_id" // 以 open_department_id 来标识部门
	DepartmentIdTypeCombinedUpdateJobDepartmentId     = "department_id"      // 以 department_id 来标识部门
)

const (
	UserIdTypeConfigJobUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeConfigJobUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeConfigJobOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeConfigJobPeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	UserIdTypeGetJobUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeGetJobUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeGetJobOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeGetJobPeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	DepartmentIdTypeGetJobOpenDepartmentId = "open_department_id" // 以 open_department_id 来标识部门
	DepartmentIdTypeGetJobDepartmentId     = "department_id"      // 以 department_id 来标识部门
)

const (
	UserIdTypeUpdateConfigJobUserId  = "user_id"  // 以user_id来识别用户
	UserIdTypeUpdateConfigJobUnionId = "union_id" // 以union_id来识别用户
	UserIdTypeUpdateConfigJobOpenId  = "open_id"  // 以open_id来识别用户
)

const (
	UserIdTypeGetJobManagerUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeGetJobManagerUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeGetJobManagerOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeGetJobManagerPeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	DisplayProgressWaitingStart = 1 // 待启动
	DisplayProgressOnGoing      = 2 // 进行中
	DisplayProgressCanceled     = 3 // 已取消
	DisplayProgressSuspended    = 4 // 已暂停
	DisplayProgressCompleted    = 5 // 已完成
	DisplayProgressExpired      = 6 // 已超期

)

const (
	CategoryAddition    = 1 // 新增
	CategoryReplacement = 2 // 替换

)

const (
	PriorityHigh   = 1 // 高
	PriorityMedium = 2 // 中
	PriorityLow    = 3 // 低

)

const (
	RequiredDegreeCreateJobRequirementPrimaryEducation            = 1  // 小学及以上
	RequiredDegreeCreateJobRequirementJuniorMiddleSchoolEducation = 2  // 初中及以上
	RequiredDegreeCreateJobRequirementSecondary                   = 3  // 专职及以上
	RequiredDegreeCreateJobRequirementSeniorSchoolGraduates       = 4  // 高中及以上
	RequiredDegreeCreateJobRequirementAssociate                   = 5  // 大专及以上
	RequiredDegreeCreateJobRequirementBachelor                    = 6  // 本科及以上
	RequiredDegreeCreateJobRequirementMaster                      = 7  // 硕士及以上
	RequiredDegreeCreateJobRequirementPhd                         = 8  // 博士及以上
	RequiredDegreeCreateJobRequirementNoLimit                     = 20 // 不限

)

const (
	UserIdTypeCreateJobRequirementUserId  = "user_id"  // 以user_id来识别用户
	UserIdTypeCreateJobRequirementUnionId = "union_id" // 以union_id来识别用户
	UserIdTypeCreateJobRequirementOpenId  = "open_id"  // 以open_id来识别用户
)

const (
	DepartmentIdTypeCreateJobRequirementOpenDepartmentId = "open_department_id" // 以 open_department_id 来标识部门
	DepartmentIdTypeCreateJobRequirementDepartmentId     = "department_id"      // 以 department_id 来标识部门
)

const (
	UserIdTypeListJobRequirementUserId  = "user_id"  // 以user_id来识别用户
	UserIdTypeListJobRequirementUnionId = "union_id" // 以union_id来识别用户
	UserIdTypeListJobRequirementOpenId  = "open_id"  // 以open_id来识别用户
)

const (
	DepartmentIdTypeListJobRequirementOpenDepartmentId = "open_department_id" // 以 open_department_id 来标识部门
	DepartmentIdTypeListJobRequirementDepartmentId     = "department_id"      // 以 department_id 来标识部门
)

const (
	UserIdTypeListByIdJobRequirementUserId  = "user_id"  // 以user_id来识别用户
	UserIdTypeListByIdJobRequirementUnionId = "union_id" // 以union_id来识别用户
	UserIdTypeListByIdJobRequirementOpenId  = "open_id"  // 以open_id来识别用户
)

const (
	DepartmentIdTypeListByIdJobRequirementOpenDepartmentId = "open_department_id" // 以 open_department_id 来标识部门
	DepartmentIdTypeListByIdJobRequirementDepartmentId     = "department_id"      // 以 department_id 来标识部门
)

const (
	DisplayProgressUpdateJobRequirementWaitingStart = 1 // 待启动
	DisplayProgressUpdateJobRequirementOnGoing      = 2 // 进行中
	DisplayProgressUpdateJobRequirementCanceled     = 3 // 已取消
	DisplayProgressUpdateJobRequirementSuspended    = 4 // 已暂停
	DisplayProgressUpdateJobRequirementCompleted    = 5 // 已完成
	DisplayProgressUpdateJobRequirementExpired      = 6 // 已超期

)

const (
	CategoryUpdateJobRequirementAddition    = 1 // 新增
	CategoryUpdateJobRequirementReplacement = 2 // 替换

)

const (
	PriorityUpdateJobRequirementHigh   = 1 // 高
	PriorityUpdateJobRequirementMedium = 2 // 中
	PriorityUpdateJobRequirementLow    = 3 // 低

)

const (
	RequiredDegreeUpdateJobRequirementPrimaryEducation            = 1  // 小学及以上
	RequiredDegreeUpdateJobRequirementJuniorMiddleSchoolEducation = 2  // 初中及以上
	RequiredDegreeUpdateJobRequirementSecondary                   = 3  // 专职及以上
	RequiredDegreeUpdateJobRequirementSeniorSchoolGraduates       = 4  // 高中及以上
	RequiredDegreeUpdateJobRequirementAssociate                   = 5  // 大专及以上
	RequiredDegreeUpdateJobRequirementBachelor                    = 6  // 本科及以上
	RequiredDegreeUpdateJobRequirementMaster                      = 7  // 硕士及以上
	RequiredDegreeUpdateJobRequirementPhd                         = 8  // 博士及以上
	RequiredDegreeUpdateJobRequirementNoLimit                     = 20 // 不限

)

const (
	UserIdTypeUpdateJobRequirementUserId  = "user_id"  // 以user_id来识别用户
	UserIdTypeUpdateJobRequirementUnionId = "union_id" // 以union_id来识别用户
	UserIdTypeUpdateJobRequirementOpenId  = "open_id"  // 以open_id来识别用户
)

const (
	DepartmentIdTypeUpdateJobRequirementOpenDepartmentId = "open_department_id" // 以 open_department_id 来标识部门
	DepartmentIdTypeUpdateJobRequirementDepartmentId     = "department_id"      // 以 department_id 来标识部门
)

const (
	PrivacyPrivate = 1 // 私密
	PrivacyPublic  = 2 // 公开

)

const (
	UserIdTypeCreateNoteUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeCreateNoteUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeCreateNoteOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeCreateNotePeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	UserIdTypeGetNoteUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeGetNoteUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeGetNoteOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeGetNotePeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	UserIdTypeListNoteUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeListNoteUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeListNoteOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeListNotePeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	UserIdTypePatchNoteUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypePatchNoteUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypePatchNoteOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypePatchNotePeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	OfferType正式Offer = 1 // 正式 Offer
	OfferType实习Offer = 2 // 实习 Offer

)

const (
	UserIdTypeCreateOfferUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeCreateOfferUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeCreateOfferOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeCreateOfferPeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	DepartmentIdTypeCreateOfferOpenDepartmentId = "open_department_id" // 以 open_department_id 来标识部门
	DepartmentIdTypeCreateOfferDepartmentId     = "department_id"      // 以 department_id 来标识部门
)

const (
	UserIdTypeGetOfferUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeGetOfferUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeGetOfferOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeGetOfferPeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	DepartmentIdTypeGetOfferOpenDepartmentId = "open_department_id" // 以 open_department_id 来标识部门
	DepartmentIdTypeGetOfferDepartmentId     = "department_id"      // 以 department_id 来标识部门
)

const (
	OperationInternOfferStatusOfferConfirmOnboarding = "confirm_onboarding" // 确认入职
	OperationInternOfferStatusOfferCancelOnboarding  = "cancel_onboarding"  // 放弃入职
	OperationInternOfferStatusOfferOffboard          = "offboard"           // 操作离职
)

const (
	UserIdTypeListOfferUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeListOfferUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeListOfferOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeListOfferPeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	OfferStatusApproving       = 2 // 审批中
	OfferStatusWithdrawn       = 3 // 审批已撤回
	OfferStatusApproved        = 4 // 审批通过
	OfferStatusRejected        = 5 // 审批不通过
	OfferStatusOfferLetterSent = 6 // Offer已发出
	OfferStatusOfferAccepted   = 7 // 候选人已接收
	OfferStatusOfferRejected   = 8 // 候选人已拒绝
	OfferStatusObsolete        = 9 // Offer 已失效

)

const (
	UserIdTypeUpdateOfferUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeUpdateOfferUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeUpdateOfferOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeUpdateOfferPeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	DepartmentIdTypeUpdateOfferOpenDepartmentId = "open_department_id" // 以 open_department_id 来标识部门
	DepartmentIdTypeUpdateOfferDepartmentId     = "department_id"      // 以 department_id 来标识部门
)

const (
	UserIdTypeGetByApplicationReferralUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeGetByApplicationReferralUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeGetByApplicationReferralOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeGetByApplicationReferralPeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

const (
	UserIdTypeGetTalentUserId        = "user_id"         // 以 user_id 来识别用户
	UserIdTypeGetTalentUnionId       = "union_id"        // 以 union_id 来识别用户
	UserIdTypeGetTalentOpenId        = "open_id"         // 以 open_id 来识别用户
	UserIdTypeGetTalentPeopleAdminId = "people_admin_id" // 以 people_admin_id 来识别用户
)

const (
	UserIdTypeListTalentFolderUserId        = "user_id"         // 以user_id来识别用户
	UserIdTypeListTalentFolderUnionId       = "union_id"        // 以union_id来识别用户
	UserIdTypeListTalentFolderOpenId        = "open_id"         // 以open_id来识别用户
	UserIdTypeListTalentFolderPeopleAdminId = "people_admin_id" // 以people_admin_id来识别用户
)

type Agency struct {
	Id          *string `json:"id,omitempty"`           // 猎头供应商ID
	Name        *string `json:"name,omitempty"`         // 猎头供应商名称
	ContactorId *string `json:"contactor_id,omitempty"` // 供应商联系人ID
}

type AgencyBuilder struct {
	id              string // 猎头供应商ID
	idFlag          bool
	name            string // 猎头供应商名称
	nameFlag        bool
	contactorId     string // 供应商联系人ID
	contactorIdFlag bool
}

func NewAgencyBuilder() *AgencyBuilder {
	builder := &AgencyBuilder{}
	return builder
}

// 猎头供应商ID
//
// 示例值：6898173495386147079
func (builder *AgencyBuilder) Id(id string) *AgencyBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 猎头供应商名称
//
// 示例值：超越猎头公司
func (builder *AgencyBuilder) Name(name string) *AgencyBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 供应商联系人ID
//
// 示例值：ou_f476cb099ac9227c9bae09ce46112579
func (builder *AgencyBuilder) ContactorId(contactorId string) *AgencyBuilder {
	builder.contactorId = contactorId
	builder.contactorIdFlag = true
	return builder
}

func (builder *AgencyBuilder) Build() *Agency {
	req := &Agency{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.contactorIdFlag {
		req.ContactorId = &builder.contactorId

	}
	return req
}

type AppliOfferBasicCustObj struct {
	Id              *string                      `json:"id,omitempty"`                // id
	Name            *OfferSchemaName             `json:"name,omitempty"`              // 名字
	Type            *string                      `json:"type,omitempty"`              // 自定义字段类型
	Value           *string                      `json:"value,omitempty"`             // 自定义字段的值
	OptionValueList []*AppliOfferBasicCustObjOpV `json:"option_value_list,omitempty"` // 单选/多选自定义字段的值
}

type AppliOfferBasicCustObjBuilder struct {
	id                  string // id
	idFlag              bool
	name                *OfferSchemaName // 名字
	nameFlag            bool
	type_               string // 自定义字段类型
	typeFlag            bool
	value               string // 自定义字段的值
	valueFlag           bool
	optionValueList     []*AppliOfferBasicCustObjOpV // 单选/多选自定义字段的值
	optionValueListFlag bool
}

func NewAppliOfferBasicCustObjBuilder() *AppliOfferBasicCustObjBuilder {
	builder := &AppliOfferBasicCustObjBuilder{}
	return builder
}

// id
//
// 示例值：
func (builder *AppliOfferBasicCustObjBuilder) Id(id string) *AppliOfferBasicCustObjBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *AppliOfferBasicCustObjBuilder) Name(name *OfferSchemaName) *AppliOfferBasicCustObjBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 自定义字段类型
//
// 示例值：
func (builder *AppliOfferBasicCustObjBuilder) Type(type_ string) *AppliOfferBasicCustObjBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 自定义字段的值
//
// 示例值：
func (builder *AppliOfferBasicCustObjBuilder) Value(value string) *AppliOfferBasicCustObjBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

// 单选/多选自定义字段的值
//
// 示例值：
func (builder *AppliOfferBasicCustObjBuilder) OptionValueList(optionValueList []*AppliOfferBasicCustObjOpV) *AppliOfferBasicCustObjBuilder {
	builder.optionValueList = optionValueList
	builder.optionValueListFlag = true
	return builder
}

func (builder *AppliOfferBasicCustObjBuilder) Build() *AppliOfferBasicCustObj {
	req := &AppliOfferBasicCustObj{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	if builder.optionValueListFlag {
		req.OptionValueList = builder.optionValueList
	}
	return req
}

type AppliOfferBasicCustObjOpV struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 中文名
	EnUs *string `json:"en_us,omitempty"` // 英文名
}

type AppliOfferBasicCustObjOpVBuilder struct {
	zhCn     string // 中文名
	zhCnFlag bool
	enUs     string // 英文名
	enUsFlag bool
}

func NewAppliOfferBasicCustObjOpVBuilder() *AppliOfferBasicCustObjOpVBuilder {
	builder := &AppliOfferBasicCustObjOpVBuilder{}
	return builder
}

// 中文名
//
// 示例值：
func (builder *AppliOfferBasicCustObjOpVBuilder) ZhCn(zhCn string) *AppliOfferBasicCustObjOpVBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *AppliOfferBasicCustObjOpVBuilder) EnUs(enUs string) *AppliOfferBasicCustObjOpVBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *AppliOfferBasicCustObjOpVBuilder) Build() *AppliOfferBasicCustObjOpV {
	req := &AppliOfferBasicCustObjOpV{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

type AppliOfferBasicInfoUser struct {
	Id         *string     `json:"id,omitempty"`           // ID
	Name       *string     `json:"name,omitempty"`         // 名字
	EnName     *string     `json:"en_name,omitempty"`      // 英文名
	Avatar     *string     `json:"avatar,omitempty"`       // 头像
	Department *Department `json:"department,omitempty"`   // 部门
	Timezone   *string     `json:"timezone,omitempty"`     // 时区
	Phone      *string     `json:"phone,omitempty"`        // 手机
	Email      *string     `json:"email,omitempty"`        // 邮箱
	InAppScope *bool       `json:"in_app_scope,omitempty"` // 是否拥有app权限
}

type AppliOfferBasicInfoUserBuilder struct {
	id             string // ID
	idFlag         bool
	name           string // 名字
	nameFlag       bool
	enName         string // 英文名
	enNameFlag     bool
	avatar         string // 头像
	avatarFlag     bool
	department     *Department // 部门
	departmentFlag bool
	timezone       string // 时区
	timezoneFlag   bool
	phone          string // 手机
	phoneFlag      bool
	email          string // 邮箱
	emailFlag      bool
	inAppScope     bool // 是否拥有app权限
	inAppScopeFlag bool
}

func NewAppliOfferBasicInfoUserBuilder() *AppliOfferBasicInfoUserBuilder {
	builder := &AppliOfferBasicInfoUserBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *AppliOfferBasicInfoUserBuilder) Id(id string) *AppliOfferBasicInfoUserBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *AppliOfferBasicInfoUserBuilder) Name(name string) *AppliOfferBasicInfoUserBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *AppliOfferBasicInfoUserBuilder) EnName(enName string) *AppliOfferBasicInfoUserBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 头像
//
// 示例值：
func (builder *AppliOfferBasicInfoUserBuilder) Avatar(avatar string) *AppliOfferBasicInfoUserBuilder {
	builder.avatar = avatar
	builder.avatarFlag = true
	return builder
}

// 部门
//
// 示例值：
func (builder *AppliOfferBasicInfoUserBuilder) Department(department *Department) *AppliOfferBasicInfoUserBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 时区
//
// 示例值：
func (builder *AppliOfferBasicInfoUserBuilder) Timezone(timezone string) *AppliOfferBasicInfoUserBuilder {
	builder.timezone = timezone
	builder.timezoneFlag = true
	return builder
}

// 手机
//
// 示例值：
func (builder *AppliOfferBasicInfoUserBuilder) Phone(phone string) *AppliOfferBasicInfoUserBuilder {
	builder.phone = phone
	builder.phoneFlag = true
	return builder
}

// 邮箱
//
// 示例值：
func (builder *AppliOfferBasicInfoUserBuilder) Email(email string) *AppliOfferBasicInfoUserBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 是否拥有app权限
//
// 示例值：
func (builder *AppliOfferBasicInfoUserBuilder) InAppScope(inAppScope bool) *AppliOfferBasicInfoUserBuilder {
	builder.inAppScope = inAppScope
	builder.inAppScopeFlag = true
	return builder
}

func (builder *AppliOfferBasicInfoUserBuilder) Build() *AppliOfferBasicInfoUser {
	req := &AppliOfferBasicInfoUser{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.avatarFlag {
		req.Avatar = &builder.avatar

	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.timezoneFlag {
		req.Timezone = &builder.timezone

	}
	if builder.phoneFlag {
		req.Phone = &builder.phone

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.inAppScopeFlag {
		req.InAppScope = &builder.inAppScope

	}
	return req
}

type AppliOfferOnboardProfile struct {
	OfferId                    *string                      `json:"offer_id,omitempty"`                        // offer ID
	Department                 *Department                  `json:"department,omitempty"`                      // 部门
	RecruitmentType            *RecruitmentType             `json:"recruitment_type,omitempty"`                // 招聘类型
	Sequence                   *Sequence                    `json:"sequence,omitempty"`                        // 序列
	Level                      *Level                       `json:"level,omitempty"`                           // 职级
	OnboardAddress             *AppliOfferOnboardProfileAdd `json:"onboard_address,omitempty"`                 // onboard地址
	WorkAddress                *AppliOfferOnboardProfileAdd `json:"work_address,omitempty"`                    // 工作地址
	Leader                     *AppliOfferBasicInfoUser     `json:"leader,omitempty"`                          // 领导
	IsWorkAddressSameToOnboard *bool                        `json:"is_work_address_same_to_onboard,omitempty"` // 工作地址是否与onboard地址相同
	ProbationMonth             *int                         `json:"probation_month,omitempty"`                 // 试用期
	ContractYear               *int                         `json:"contract_year,omitempty"`                   // 合同年限
}

type AppliOfferOnboardProfileBuilder struct {
	offerId                        string // offer ID
	offerIdFlag                    bool
	department                     *Department // 部门
	departmentFlag                 bool
	recruitmentType                *RecruitmentType // 招聘类型
	recruitmentTypeFlag            bool
	sequence                       *Sequence // 序列
	sequenceFlag                   bool
	level                          *Level // 职级
	levelFlag                      bool
	onboardAddress                 *AppliOfferOnboardProfileAdd // onboard地址
	onboardAddressFlag             bool
	workAddress                    *AppliOfferOnboardProfileAdd // 工作地址
	workAddressFlag                bool
	leader                         *AppliOfferBasicInfoUser // 领导
	leaderFlag                     bool
	isWorkAddressSameToOnboard     bool // 工作地址是否与onboard地址相同
	isWorkAddressSameToOnboardFlag bool
	probationMonth                 int // 试用期
	probationMonthFlag             bool
	contractYear                   int // 合同年限
	contractYearFlag               bool
}

func NewAppliOfferOnboardProfileBuilder() *AppliOfferOnboardProfileBuilder {
	builder := &AppliOfferOnboardProfileBuilder{}
	return builder
}

// offer ID
//
// 示例值：
func (builder *AppliOfferOnboardProfileBuilder) OfferId(offerId string) *AppliOfferOnboardProfileBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}

// 部门
//
// 示例值：
func (builder *AppliOfferOnboardProfileBuilder) Department(department *Department) *AppliOfferOnboardProfileBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 招聘类型
//
// 示例值：
func (builder *AppliOfferOnboardProfileBuilder) RecruitmentType(recruitmentType *RecruitmentType) *AppliOfferOnboardProfileBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}

// 序列
//
// 示例值：
func (builder *AppliOfferOnboardProfileBuilder) Sequence(sequence *Sequence) *AppliOfferOnboardProfileBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}

// 职级
//
// 示例值：
func (builder *AppliOfferOnboardProfileBuilder) Level(level *Level) *AppliOfferOnboardProfileBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}

// onboard地址
//
// 示例值：
func (builder *AppliOfferOnboardProfileBuilder) OnboardAddress(onboardAddress *AppliOfferOnboardProfileAdd) *AppliOfferOnboardProfileBuilder {
	builder.onboardAddress = onboardAddress
	builder.onboardAddressFlag = true
	return builder
}

// 工作地址
//
// 示例值：
func (builder *AppliOfferOnboardProfileBuilder) WorkAddress(workAddress *AppliOfferOnboardProfileAdd) *AppliOfferOnboardProfileBuilder {
	builder.workAddress = workAddress
	builder.workAddressFlag = true
	return builder
}

// 领导
//
// 示例值：
func (builder *AppliOfferOnboardProfileBuilder) Leader(leader *AppliOfferBasicInfoUser) *AppliOfferOnboardProfileBuilder {
	builder.leader = leader
	builder.leaderFlag = true
	return builder
}

// 工作地址是否与onboard地址相同
//
// 示例值：
func (builder *AppliOfferOnboardProfileBuilder) IsWorkAddressSameToOnboard(isWorkAddressSameToOnboard bool) *AppliOfferOnboardProfileBuilder {
	builder.isWorkAddressSameToOnboard = isWorkAddressSameToOnboard
	builder.isWorkAddressSameToOnboardFlag = true
	return builder
}

// 试用期
//
// 示例值：
func (builder *AppliOfferOnboardProfileBuilder) ProbationMonth(probationMonth int) *AppliOfferOnboardProfileBuilder {
	builder.probationMonth = probationMonth
	builder.probationMonthFlag = true
	return builder
}

// 合同年限
//
// 示例值：
func (builder *AppliOfferOnboardProfileBuilder) ContractYear(contractYear int) *AppliOfferOnboardProfileBuilder {
	builder.contractYear = contractYear
	builder.contractYearFlag = true
	return builder
}

func (builder *AppliOfferOnboardProfileBuilder) Build() *AppliOfferOnboardProfile {
	req := &AppliOfferOnboardProfile{}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.sequenceFlag {
		req.Sequence = builder.sequence
	}
	if builder.levelFlag {
		req.Level = builder.level
	}
	if builder.onboardAddressFlag {
		req.OnboardAddress = builder.onboardAddress
	}
	if builder.workAddressFlag {
		req.WorkAddress = builder.workAddress
	}
	if builder.leaderFlag {
		req.Leader = builder.leader
	}
	if builder.isWorkAddressSameToOnboardFlag {
		req.IsWorkAddressSameToOnboard = &builder.isWorkAddressSameToOnboard

	}
	if builder.probationMonthFlag {
		req.ProbationMonth = &builder.probationMonth

	}
	if builder.contractYearFlag {
		req.ContractYear = &builder.contractYear

	}
	return req
}

type AppliOfferOnboardProfileAdd struct {
	Id           *string                       `json:"id,omitempty"`            // ID
	Name         *string                       `json:"name,omitempty"`          // 名字
	EnName       *string                       `json:"en_name,omitempty"`       // 英文名
	District     *AppliOfferOnboardProfileCity `json:"district,omitempty"`      // 区
	City         *AppliOfferOnboardProfileCity `json:"city,omitempty"`          // 城市
	State        *AppliOfferOnboardProfileCity `json:"state,omitempty"`         // 省
	Country      *AppliOfferOnboardProfileCity `json:"country,omitempty"`       // 国家
	UsageIdList  []string                      `json:"usage_id_list,omitempty"` // 使用ID列表
	ActiveStatus *int                          `json:"active_status,omitempty"` // 状态
}

type AppliOfferOnboardProfileAddBuilder struct {
	id               string // ID
	idFlag           bool
	name             string // 名字
	nameFlag         bool
	enName           string // 英文名
	enNameFlag       bool
	district         *AppliOfferOnboardProfileCity // 区
	districtFlag     bool
	city             *AppliOfferOnboardProfileCity // 城市
	cityFlag         bool
	state            *AppliOfferOnboardProfileCity // 省
	stateFlag        bool
	country          *AppliOfferOnboardProfileCity // 国家
	countryFlag      bool
	usageIdList      []string // 使用ID列表
	usageIdListFlag  bool
	activeStatus     int // 状态
	activeStatusFlag bool
}

func NewAppliOfferOnboardProfileAddBuilder() *AppliOfferOnboardProfileAddBuilder {
	builder := &AppliOfferOnboardProfileAddBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *AppliOfferOnboardProfileAddBuilder) Id(id string) *AppliOfferOnboardProfileAddBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *AppliOfferOnboardProfileAddBuilder) Name(name string) *AppliOfferOnboardProfileAddBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *AppliOfferOnboardProfileAddBuilder) EnName(enName string) *AppliOfferOnboardProfileAddBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 区
//
// 示例值：
func (builder *AppliOfferOnboardProfileAddBuilder) District(district *AppliOfferOnboardProfileCity) *AppliOfferOnboardProfileAddBuilder {
	builder.district = district
	builder.districtFlag = true
	return builder
}

// 城市
//
// 示例值：
func (builder *AppliOfferOnboardProfileAddBuilder) City(city *AppliOfferOnboardProfileCity) *AppliOfferOnboardProfileAddBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}

// 省
//
// 示例值：
func (builder *AppliOfferOnboardProfileAddBuilder) State(state *AppliOfferOnboardProfileCity) *AppliOfferOnboardProfileAddBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}

// 国家
//
// 示例值：
func (builder *AppliOfferOnboardProfileAddBuilder) Country(country *AppliOfferOnboardProfileCity) *AppliOfferOnboardProfileAddBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

// 使用ID列表
//
// 示例值：
func (builder *AppliOfferOnboardProfileAddBuilder) UsageIdList(usageIdList []string) *AppliOfferOnboardProfileAddBuilder {
	builder.usageIdList = usageIdList
	builder.usageIdListFlag = true
	return builder
}

// 状态
//
// 示例值：
func (builder *AppliOfferOnboardProfileAddBuilder) ActiveStatus(activeStatus int) *AppliOfferOnboardProfileAddBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *AppliOfferOnboardProfileAddBuilder) Build() *AppliOfferOnboardProfileAdd {
	req := &AppliOfferOnboardProfileAdd{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.districtFlag {
		req.District = builder.district
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.stateFlag {
		req.State = builder.state
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	if builder.usageIdListFlag {
		req.UsageIdList = builder.usageIdList
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

type AppliOfferOnboardProfileCity struct {
	Code         *string `json:"code,omitempty"`          // 编码
	Name         *string `json:"name,omitempty"`          // 名字
	EnName       *string `json:"en_name,omitempty"`       // 英文名
	LocationType *int    `json:"location_type,omitempty"` // 地址类型
}

type AppliOfferOnboardProfileCityBuilder struct {
	code             string // 编码
	codeFlag         bool
	name             string // 名字
	nameFlag         bool
	enName           string // 英文名
	enNameFlag       bool
	locationType     int // 地址类型
	locationTypeFlag bool
}

func NewAppliOfferOnboardProfileCityBuilder() *AppliOfferOnboardProfileCityBuilder {
	builder := &AppliOfferOnboardProfileCityBuilder{}
	return builder
}

// 编码
//
// 示例值：
func (builder *AppliOfferOnboardProfileCityBuilder) Code(code string) *AppliOfferOnboardProfileCityBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *AppliOfferOnboardProfileCityBuilder) Name(name string) *AppliOfferOnboardProfileCityBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *AppliOfferOnboardProfileCityBuilder) EnName(enName string) *AppliOfferOnboardProfileCityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 地址类型
//
// 示例值：
func (builder *AppliOfferOnboardProfileCityBuilder) LocationType(locationType int) *AppliOfferOnboardProfileCityBuilder {
	builder.locationType = locationType
	builder.locationTypeFlag = true
	return builder
}

func (builder *AppliOfferOnboardProfileCityBuilder) Build() *AppliOfferOnboardProfileCity {
	req := &AppliOfferOnboardProfileCity{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.locationTypeFlag {
		req.LocationType = &builder.locationType

	}
	return req
}

type AppliOfferSalaryPlanTemplate struct {
	TemplateKey   *string `json:"template_key,omitempty"`   // 模版key
	TotalAmount   *string `json:"total_amount,omitempty"`   // 总金额
	Currency      *string `json:"currency,omitempty"`       // 币种
	SalaryContent *string `json:"salary_content,omitempty"` // 薪酬内容
}

type AppliOfferSalaryPlanTemplateBuilder struct {
	templateKey       string // 模版key
	templateKeyFlag   bool
	totalAmount       string // 总金额
	totalAmountFlag   bool
	currency          string // 币种
	currencyFlag      bool
	salaryContent     string // 薪酬内容
	salaryContentFlag bool
}

func NewAppliOfferSalaryPlanTemplateBuilder() *AppliOfferSalaryPlanTemplateBuilder {
	builder := &AppliOfferSalaryPlanTemplateBuilder{}
	return builder
}

// 模版key
//
// 示例值：
func (builder *AppliOfferSalaryPlanTemplateBuilder) TemplateKey(templateKey string) *AppliOfferSalaryPlanTemplateBuilder {
	builder.templateKey = templateKey
	builder.templateKeyFlag = true
	return builder
}

// 总金额
//
// 示例值：
func (builder *AppliOfferSalaryPlanTemplateBuilder) TotalAmount(totalAmount string) *AppliOfferSalaryPlanTemplateBuilder {
	builder.totalAmount = totalAmount
	builder.totalAmountFlag = true
	return builder
}

// 币种
//
// 示例值：
func (builder *AppliOfferSalaryPlanTemplateBuilder) Currency(currency string) *AppliOfferSalaryPlanTemplateBuilder {
	builder.currency = currency
	builder.currencyFlag = true
	return builder
}

// 薪酬内容
//
// 示例值：
func (builder *AppliOfferSalaryPlanTemplateBuilder) SalaryContent(salaryContent string) *AppliOfferSalaryPlanTemplateBuilder {
	builder.salaryContent = salaryContent
	builder.salaryContentFlag = true
	return builder
}

func (builder *AppliOfferSalaryPlanTemplateBuilder) Build() *AppliOfferSalaryPlanTemplate {
	req := &AppliOfferSalaryPlanTemplate{}
	if builder.templateKeyFlag {
		req.TemplateKey = &builder.templateKey

	}
	if builder.totalAmountFlag {
		req.TotalAmount = &builder.totalAmount

	}
	if builder.currencyFlag {
		req.Currency = &builder.currency

	}
	if builder.salaryContentFlag {
		req.SalaryContent = &builder.salaryContent

	}
	return req
}

type AppliTalentAttachResumeInfo struct {
	Id   *string `json:"id,omitempty"`   // ID
	Name *string `json:"name,omitempty"` // 名字
}

type AppliTalentAttachResumeInfoBuilder struct {
	id       string // ID
	idFlag   bool
	name     string // 名字
	nameFlag bool
}

func NewAppliTalentAttachResumeInfoBuilder() *AppliTalentAttachResumeInfoBuilder {
	builder := &AppliTalentAttachResumeInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *AppliTalentAttachResumeInfoBuilder) Id(id string) *AppliTalentAttachResumeInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *AppliTalentAttachResumeInfoBuilder) Name(name string) *AppliTalentAttachResumeInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *AppliTalentAttachResumeInfoBuilder) Build() *AppliTalentAttachResumeInfo {
	req := &AppliTalentAttachResumeInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

type AppliTalentCertificateInfo struct {
	Id   *string `json:"id,omitempty"`   // ID
	Name *string `json:"name,omitempty"` // 证件名称
	Desc *string `json:"desc,omitempty"` // 证件描述
}

type AppliTalentCertificateInfoBuilder struct {
	id       string // ID
	idFlag   bool
	name     string // 证件名称
	nameFlag bool
	desc     string // 证件描述
	descFlag bool
}

func NewAppliTalentCertificateInfoBuilder() *AppliTalentCertificateInfoBuilder {
	builder := &AppliTalentCertificateInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *AppliTalentCertificateInfoBuilder) Id(id string) *AppliTalentCertificateInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 证件名称
//
// 示例值：
func (builder *AppliTalentCertificateInfoBuilder) Name(name string) *AppliTalentCertificateInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 证件描述
//
// 示例值：
func (builder *AppliTalentCertificateInfoBuilder) Desc(desc string) *AppliTalentCertificateInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

func (builder *AppliTalentCertificateInfoBuilder) Build() *AppliTalentCertificateInfo {
	req := &AppliTalentCertificateInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	return req
}

type AppliTalentCompetitionInfo struct {
	Id   *string `json:"id,omitempty"`   // ID
	Name *string `json:"name,omitempty"` // 竞赛名称
	Desc *string `json:"desc,omitempty"` // 竞赛描述
}

type AppliTalentCompetitionInfoBuilder struct {
	id       string // ID
	idFlag   bool
	name     string // 竞赛名称
	nameFlag bool
	desc     string // 竞赛描述
	descFlag bool
}

func NewAppliTalentCompetitionInfoBuilder() *AppliTalentCompetitionInfoBuilder {
	builder := &AppliTalentCompetitionInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *AppliTalentCompetitionInfoBuilder) Id(id string) *AppliTalentCompetitionInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 竞赛名称
//
// 示例值：
func (builder *AppliTalentCompetitionInfoBuilder) Name(name string) *AppliTalentCompetitionInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 竞赛描述
//
// 示例值：
func (builder *AppliTalentCompetitionInfoBuilder) Desc(desc string) *AppliTalentCompetitionInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

func (builder *AppliTalentCompetitionInfoBuilder) Build() *AppliTalentCompetitionInfo {
	req := &AppliTalentCompetitionInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	return req
}

type AppliTalentEducationInfo struct {
	Id              *string `json:"id,omitempty"`               // ID
	Degree          *int    `json:"degree,omitempty"`           // 学历
	School          *string `json:"school,omitempty"`           // 学校
	FieldOfStudy    *string `json:"field_of_study,omitempty"`   // 专业
	StartTime       *string `json:"start_time,omitempty"`       // 开始时间
	EndTime         *string `json:"end_time,omitempty"`         // 结束时间
	EducationType   *int    `json:"education_type,omitempty"`   // 学历类型
	AcademicRanking *int    `json:"academic_ranking,omitempty"` // 排名
	TagList         []int   `json:"tag_list,omitempty"`         // 标签列表
}

type AppliTalentEducationInfoBuilder struct {
	id                  string // ID
	idFlag              bool
	degree              int // 学历
	degreeFlag          bool
	school              string // 学校
	schoolFlag          bool
	fieldOfStudy        string // 专业
	fieldOfStudyFlag    bool
	startTime           string // 开始时间
	startTimeFlag       bool
	endTime             string // 结束时间
	endTimeFlag         bool
	educationType       int // 学历类型
	educationTypeFlag   bool
	academicRanking     int // 排名
	academicRankingFlag bool
	tagList             []int // 标签列表
	tagListFlag         bool
}

func NewAppliTalentEducationInfoBuilder() *AppliTalentEducationInfoBuilder {
	builder := &AppliTalentEducationInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *AppliTalentEducationInfoBuilder) Id(id string) *AppliTalentEducationInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 学历
//
// 示例值：
func (builder *AppliTalentEducationInfoBuilder) Degree(degree int) *AppliTalentEducationInfoBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}

// 学校
//
// 示例值：
func (builder *AppliTalentEducationInfoBuilder) School(school string) *AppliTalentEducationInfoBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}

// 专业
//
// 示例值：
func (builder *AppliTalentEducationInfoBuilder) FieldOfStudy(fieldOfStudy string) *AppliTalentEducationInfoBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}

// 开始时间
//
// 示例值：
func (builder *AppliTalentEducationInfoBuilder) StartTime(startTime string) *AppliTalentEducationInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：
func (builder *AppliTalentEducationInfoBuilder) EndTime(endTime string) *AppliTalentEducationInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 学历类型
//
// 示例值：
func (builder *AppliTalentEducationInfoBuilder) EducationType(educationType int) *AppliTalentEducationInfoBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}

// 排名
//
// 示例值：
func (builder *AppliTalentEducationInfoBuilder) AcademicRanking(academicRanking int) *AppliTalentEducationInfoBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}

// 标签列表
//
// 示例值：
func (builder *AppliTalentEducationInfoBuilder) TagList(tagList []int) *AppliTalentEducationInfoBuilder {
	builder.tagList = tagList
	builder.tagListFlag = true
	return builder
}

func (builder *AppliTalentEducationInfoBuilder) Build() *AppliTalentEducationInfo {
	req := &AppliTalentEducationInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	if builder.tagListFlag {
		req.TagList = builder.tagList
	}
	return req
}

type Application struct {
	Id                           *string                         `json:"id,omitempty"`                              // 投递id
	JobId                        *string                         `json:"job_id,omitempty"`                          // 投递的职位 ID
	TalentId                     *string                         `json:"talent_id,omitempty"`                       // 候选人 ID
	ResumeResourceId             *string                         `json:"resume_resource_id,omitempty"`              // 简历来源 ID
	Stage                        *ApplicationStageInfo           `json:"stage,omitempty"`                           // 投递处于的阶段
	ActiveStatus                 *int                            `json:"active_status,omitempty"`                   // 活跃状态
	DeliveryType                 *int                            `json:"delivery_type,omitempty"`                   // 投递方式
	ResumeSourceInfo             *ApplicationResumeSource        `json:"resume_source_info,omitempty"`              // 投递来源信息
	WebsiteResumeSource          *ApplicationWebsiteResumeSource `json:"website_resume_source,omitempty"`           // 官网投递来源
	TalentAttachmentResumeId     *string                         `json:"talent_attachment_resume_id,omitempty"`     // 简历附件 ID
	CreateTime                   *string                         `json:"create_time,omitempty"`                     // 创建时间
	ModifyTime                   *string                         `json:"modify_time,omitempty"`                     // 修改时间
	StageTimeList                []*ApplicationStageTime         `json:"stage_time_list,omitempty"`                 // 阶段变更时间列表
	TerminationType              *int                            `json:"termination_type,omitempty"`                // 终止原因的类型
	TerminationReasonList        []string                        `json:"termination_reason_list,omitempty"`         // 终止的具体原因的id列表
	TerminationReasonNote        *string                         `json:"termination_reason_note,omitempty"`         // 终止备注
	ApplicationPreferredCityList []*CodeNameObject               `json:"application_preferred_city_list,omitempty"` // 意向投递城市列表
}

type ApplicationBuilder struct {
	id                               string // 投递id
	idFlag                           bool
	jobId                            string // 投递的职位 ID
	jobIdFlag                        bool
	talentId                         string // 候选人 ID
	talentIdFlag                     bool
	resumeResourceId                 string // 简历来源 ID
	resumeResourceIdFlag             bool
	stage                            *ApplicationStageInfo // 投递处于的阶段
	stageFlag                        bool
	activeStatus                     int // 活跃状态
	activeStatusFlag                 bool
	deliveryType                     int // 投递方式
	deliveryTypeFlag                 bool
	resumeSourceInfo                 *ApplicationResumeSource // 投递来源信息
	resumeSourceInfoFlag             bool
	websiteResumeSource              *ApplicationWebsiteResumeSource // 官网投递来源
	websiteResumeSourceFlag          bool
	talentAttachmentResumeId         string // 简历附件 ID
	talentAttachmentResumeIdFlag     bool
	createTime                       string // 创建时间
	createTimeFlag                   bool
	modifyTime                       string // 修改时间
	modifyTimeFlag                   bool
	stageTimeList                    []*ApplicationStageTime // 阶段变更时间列表
	stageTimeListFlag                bool
	terminationType                  int // 终止原因的类型
	terminationTypeFlag              bool
	terminationReasonList            []string // 终止的具体原因的id列表
	terminationReasonListFlag        bool
	terminationReasonNote            string // 终止备注
	terminationReasonNoteFlag        bool
	applicationPreferredCityList     []*CodeNameObject // 意向投递城市列表
	applicationPreferredCityListFlag bool
}

func NewApplicationBuilder() *ApplicationBuilder {
	builder := &ApplicationBuilder{}
	return builder
}

// 投递id
//
// 示例值：6949805467799537964
func (builder *ApplicationBuilder) Id(id string) *ApplicationBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 投递的职位 ID
//
// 示例值：6843547872837273223
func (builder *ApplicationBuilder) JobId(jobId string) *ApplicationBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 候选人 ID
//
// 示例值：6843547872837273223
func (builder *ApplicationBuilder) TalentId(talentId string) *ApplicationBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 简历来源 ID
//
// 示例值：6583482347283472832
func (builder *ApplicationBuilder) ResumeResourceId(resumeResourceId string) *ApplicationBuilder {
	builder.resumeResourceId = resumeResourceId
	builder.resumeResourceIdFlag = true
	return builder
}

// 投递处于的阶段
//
// 示例值：
func (builder *ApplicationBuilder) Stage(stage *ApplicationStageInfo) *ApplicationBuilder {
	builder.stage = stage
	builder.stageFlag = true
	return builder
}

// 活跃状态
//
// 示例值：1
func (builder *ApplicationBuilder) ActiveStatus(activeStatus int) *ApplicationBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 投递方式
//
// 示例值：1
func (builder *ApplicationBuilder) DeliveryType(deliveryType int) *ApplicationBuilder {
	builder.deliveryType = deliveryType
	builder.deliveryTypeFlag = true
	return builder
}

// 投递来源信息
//
// 示例值：
func (builder *ApplicationBuilder) ResumeSourceInfo(resumeSourceInfo *ApplicationResumeSource) *ApplicationBuilder {
	builder.resumeSourceInfo = resumeSourceInfo
	builder.resumeSourceInfoFlag = true
	return builder
}

// 官网投递来源
//
// 示例值：
func (builder *ApplicationBuilder) WebsiteResumeSource(websiteResumeSource *ApplicationWebsiteResumeSource) *ApplicationBuilder {
	builder.websiteResumeSource = websiteResumeSource
	builder.websiteResumeSourceFlag = true
	return builder
}

// 简历附件 ID
//
// 示例值：6960663240925956415
func (builder *ApplicationBuilder) TalentAttachmentResumeId(talentAttachmentResumeId string) *ApplicationBuilder {
	builder.talentAttachmentResumeId = talentAttachmentResumeId
	builder.talentAttachmentResumeIdFlag = true
	return builder
}

// 创建时间
//
// 示例值：1632990774278
func (builder *ApplicationBuilder) CreateTime(createTime string) *ApplicationBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 修改时间
//
// 示例值：1634801678103
func (builder *ApplicationBuilder) ModifyTime(modifyTime string) *ApplicationBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

// 阶段变更时间列表
//
// 示例值：
func (builder *ApplicationBuilder) StageTimeList(stageTimeList []*ApplicationStageTime) *ApplicationBuilder {
	builder.stageTimeList = stageTimeList
	builder.stageTimeListFlag = true
	return builder
}

// 终止原因的类型
//
// 示例值：1
func (builder *ApplicationBuilder) TerminationType(terminationType int) *ApplicationBuilder {
	builder.terminationType = terminationType
	builder.terminationTypeFlag = true
	return builder
}

// 终止的具体原因的id列表
//
// 示例值：
func (builder *ApplicationBuilder) TerminationReasonList(terminationReasonList []string) *ApplicationBuilder {
	builder.terminationReasonList = terminationReasonList
	builder.terminationReasonListFlag = true
	return builder
}

// 终止备注
//
// 示例值：其他投递已入职
func (builder *ApplicationBuilder) TerminationReasonNote(terminationReasonNote string) *ApplicationBuilder {
	builder.terminationReasonNote = terminationReasonNote
	builder.terminationReasonNoteFlag = true
	return builder
}

// 意向投递城市列表
//
// 示例值：
func (builder *ApplicationBuilder) ApplicationPreferredCityList(applicationPreferredCityList []*CodeNameObject) *ApplicationBuilder {
	builder.applicationPreferredCityList = applicationPreferredCityList
	builder.applicationPreferredCityListFlag = true
	return builder
}

func (builder *ApplicationBuilder) Build() *Application {
	req := &Application{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.resumeResourceIdFlag {
		req.ResumeResourceId = &builder.resumeResourceId

	}
	if builder.stageFlag {
		req.Stage = builder.stage
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.deliveryTypeFlag {
		req.DeliveryType = &builder.deliveryType

	}
	if builder.resumeSourceInfoFlag {
		req.ResumeSourceInfo = builder.resumeSourceInfo
	}
	if builder.websiteResumeSourceFlag {
		req.WebsiteResumeSource = builder.websiteResumeSource
	}
	if builder.talentAttachmentResumeIdFlag {
		req.TalentAttachmentResumeId = &builder.talentAttachmentResumeId

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.stageTimeListFlag {
		req.StageTimeList = builder.stageTimeList
	}
	if builder.terminationTypeFlag {
		req.TerminationType = &builder.terminationType

	}
	if builder.terminationReasonListFlag {
		req.TerminationReasonList = builder.terminationReasonList
	}
	if builder.terminationReasonNoteFlag {
		req.TerminationReasonNote = &builder.terminationReasonNote

	}
	if builder.applicationPreferredCityListFlag {
		req.ApplicationPreferredCityList = builder.applicationPreferredCityList
	}
	return req
}

type ApplicationBasicInfo struct {
	Stage         *ApplicationStage    `json:"stage,omitempty"`           // 阶段信息
	Referral      *ApplicationReferral `json:"referral,omitempty"`        // 内推人信息
	ActiveStatus  *int                 `json:"active_status,omitempty"`   // 状态
	BizCreateTime *int                 `json:"biz_create_time,omitempty"` // 创建时间
	BizModifyTime *int                 `json:"biz_modify_time,omitempty"` // 修改时间
}

type ApplicationBasicInfoBuilder struct {
	stage             *ApplicationStage // 阶段信息
	stageFlag         bool
	referral          *ApplicationReferral // 内推人信息
	referralFlag      bool
	activeStatus      int // 状态
	activeStatusFlag  bool
	bizCreateTime     int // 创建时间
	bizCreateTimeFlag bool
	bizModifyTime     int // 修改时间
	bizModifyTimeFlag bool
}

func NewApplicationBasicInfoBuilder() *ApplicationBasicInfoBuilder {
	builder := &ApplicationBasicInfoBuilder{}
	return builder
}

// 阶段信息
//
// 示例值：
func (builder *ApplicationBasicInfoBuilder) Stage(stage *ApplicationStage) *ApplicationBasicInfoBuilder {
	builder.stage = stage
	builder.stageFlag = true
	return builder
}

// 内推人信息
//
// 示例值：
func (builder *ApplicationBasicInfoBuilder) Referral(referral *ApplicationReferral) *ApplicationBasicInfoBuilder {
	builder.referral = referral
	builder.referralFlag = true
	return builder
}

// 状态
//
// 示例值：
func (builder *ApplicationBasicInfoBuilder) ActiveStatus(activeStatus int) *ApplicationBasicInfoBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 创建时间
//
// 示例值：
func (builder *ApplicationBasicInfoBuilder) BizCreateTime(bizCreateTime int) *ApplicationBasicInfoBuilder {
	builder.bizCreateTime = bizCreateTime
	builder.bizCreateTimeFlag = true
	return builder
}

// 修改时间
//
// 示例值：
func (builder *ApplicationBasicInfoBuilder) BizModifyTime(bizModifyTime int) *ApplicationBasicInfoBuilder {
	builder.bizModifyTime = bizModifyTime
	builder.bizModifyTimeFlag = true
	return builder
}

func (builder *ApplicationBasicInfoBuilder) Build() *ApplicationBasicInfo {
	req := &ApplicationBasicInfo{}
	if builder.stageFlag {
		req.Stage = builder.stage
	}
	if builder.referralFlag {
		req.Referral = builder.referral
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.bizCreateTimeFlag {
		req.BizCreateTime = &builder.bizCreateTime

	}
	if builder.bizModifyTimeFlag {
		req.BizModifyTime = &builder.bizModifyTime

	}
	return req
}

type ApplicationJob struct {
	Id              *string                `json:"id,omitempty"`               // ID
	Title           *string                `json:"title,omitempty"`            // 职称
	City            *City                  `json:"city,omitempty"`             // 城市
	Department      *Department            `json:"department,omitempty"`       // 部门
	RecruitmentType *RecruitmentType       `json:"recruitment_type,omitempty"` // 招聘类型
	Description     *string                `json:"description,omitempty"`      // 描述
	JobProcessId    *string                `json:"job_process_id,omitempty"`   // 岗位流程编号
	Code            *string                `json:"code,omitempty"`             // 编码
	Address         *ApplicationJobAddress `json:"address,omitempty"`          // 地址
	Country         *Country               `json:"country,omitempty"`          // 国家
}

type ApplicationJobBuilder struct {
	id                  string // ID
	idFlag              bool
	title               string // 职称
	titleFlag           bool
	city                *City // 城市
	cityFlag            bool
	department          *Department // 部门
	departmentFlag      bool
	recruitmentType     *RecruitmentType // 招聘类型
	recruitmentTypeFlag bool
	description         string // 描述
	descriptionFlag     bool
	jobProcessId        string // 岗位流程编号
	jobProcessIdFlag    bool
	code                string // 编码
	codeFlag            bool
	address             *ApplicationJobAddress // 地址
	addressFlag         bool
	country             *Country // 国家
	countryFlag         bool
}

func NewApplicationJobBuilder() *ApplicationJobBuilder {
	builder := &ApplicationJobBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationJobBuilder) Id(id string) *ApplicationJobBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职称
//
// 示例值：
func (builder *ApplicationJobBuilder) Title(title string) *ApplicationJobBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 城市
//
// 示例值：
func (builder *ApplicationJobBuilder) City(city *City) *ApplicationJobBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}

// 部门
//
// 示例值：
func (builder *ApplicationJobBuilder) Department(department *Department) *ApplicationJobBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 招聘类型
//
// 示例值：
func (builder *ApplicationJobBuilder) RecruitmentType(recruitmentType *RecruitmentType) *ApplicationJobBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *ApplicationJobBuilder) Description(description string) *ApplicationJobBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 岗位流程编号
//
// 示例值：
func (builder *ApplicationJobBuilder) JobProcessId(jobProcessId string) *ApplicationJobBuilder {
	builder.jobProcessId = jobProcessId
	builder.jobProcessIdFlag = true
	return builder
}

// 编码
//
// 示例值：
func (builder *ApplicationJobBuilder) Code(code string) *ApplicationJobBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 地址
//
// 示例值：
func (builder *ApplicationJobBuilder) Address(address *ApplicationJobAddress) *ApplicationJobBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}

// 国家
//
// 示例值：
func (builder *ApplicationJobBuilder) Country(country *Country) *ApplicationJobBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

func (builder *ApplicationJobBuilder) Build() *ApplicationJob {
	req := &ApplicationJob{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.jobProcessIdFlag {
		req.JobProcessId = &builder.jobProcessId

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	return req
}

type ApplicationJobAddress struct {
	Id     *string `json:"id,omitempty"`      // ID
	Name   *string `json:"name,omitempty"`    // 名字
	EnName *string `json:"en_name,omitempty"` // 英文名
}

type ApplicationJobAddressBuilder struct {
	id         string // ID
	idFlag     bool
	name       string // 名字
	nameFlag   bool
	enName     string // 英文名
	enNameFlag bool
}

func NewApplicationJobAddressBuilder() *ApplicationJobAddressBuilder {
	builder := &ApplicationJobAddressBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationJobAddressBuilder) Id(id string) *ApplicationJobAddressBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *ApplicationJobAddressBuilder) Name(name string) *ApplicationJobAddressBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *ApplicationJobAddressBuilder) EnName(enName string) *ApplicationJobAddressBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *ApplicationJobAddressBuilder) Build() *ApplicationJobAddress {
	req := &ApplicationJobAddress{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type ApplicationOffer struct {
	Id            *string                     `json:"id,omitempty"`             // Offer id
	ApplicationId *string                     `json:"application_id,omitempty"` // 投递id
	BasicInfo     *ApplicationOfferBasicInfo  `json:"basic_info,omitempty"`     // 基础信息
	SalaryPlan    *ApplicationOfferSalaryPlan `json:"salary_plan,omitempty"`    // 薪酬计划
	SchemaId      *string                     `json:"schema_id,omitempty"`      // 当前 Offer 使用的 schema
	OfferStatus   *int                        `json:"offer_status,omitempty"`   // Offer 状态
	JobInfo       *OfferJobInfo               `json:"job_info,omitempty"`       // 职位信息
}

type ApplicationOfferBuilder struct {
	id                string // Offer id
	idFlag            bool
	applicationId     string // 投递id
	applicationIdFlag bool
	basicInfo         *ApplicationOfferBasicInfo // 基础信息
	basicInfoFlag     bool
	salaryPlan        *ApplicationOfferSalaryPlan // 薪酬计划
	salaryPlanFlag    bool
	schemaId          string // 当前 Offer 使用的 schema
	schemaIdFlag      bool
	offerStatus       int // Offer 状态
	offerStatusFlag   bool
	jobInfo           *OfferJobInfo // 职位信息
	jobInfoFlag       bool
}

func NewApplicationOfferBuilder() *ApplicationOfferBuilder {
	builder := &ApplicationOfferBuilder{}
	return builder
}

// Offer id
//
// 示例值：7057802493489285412
func (builder *ApplicationOfferBuilder) Id(id string) *ApplicationOfferBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 投递id
//
// 示例值：7020661401874614564
func (builder *ApplicationOfferBuilder) ApplicationId(applicationId string) *ApplicationOfferBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 基础信息
//
// 示例值：
func (builder *ApplicationOfferBuilder) BasicInfo(basicInfo *ApplicationOfferBasicInfo) *ApplicationOfferBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}

// 薪酬计划
//
// 示例值：
func (builder *ApplicationOfferBuilder) SalaryPlan(salaryPlan *ApplicationOfferSalaryPlan) *ApplicationOfferBuilder {
	builder.salaryPlan = salaryPlan
	builder.salaryPlanFlag = true
	return builder
}

// 当前 Offer 使用的 schema
//
// 示例值：6963562624677398823
func (builder *ApplicationOfferBuilder) SchemaId(schemaId string) *ApplicationOfferBuilder {
	builder.schemaId = schemaId
	builder.schemaIdFlag = true
	return builder
}

// Offer 状态
//
// 示例值：0
func (builder *ApplicationOfferBuilder) OfferStatus(offerStatus int) *ApplicationOfferBuilder {
	builder.offerStatus = offerStatus
	builder.offerStatusFlag = true
	return builder
}

// 职位信息
//
// 示例值：
func (builder *ApplicationOfferBuilder) JobInfo(jobInfo *OfferJobInfo) *ApplicationOfferBuilder {
	builder.jobInfo = jobInfo
	builder.jobInfoFlag = true
	return builder
}

func (builder *ApplicationOfferBuilder) Build() *ApplicationOffer {
	req := &ApplicationOffer{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.salaryPlanFlag {
		req.SalaryPlan = builder.salaryPlan
	}
	if builder.schemaIdFlag {
		req.SchemaId = &builder.schemaId

	}
	if builder.offerStatusFlag {
		req.OfferStatus = &builder.offerStatus

	}
	if builder.jobInfoFlag {
		req.JobInfo = builder.jobInfo
	}
	return req
}

type ApplicationOfferAttachment struct {
	AttachmentId *string `json:"attachment_id,omitempty"` // 附件ID
	Name         *string `json:"name,omitempty"`          // 名字
}

type ApplicationOfferAttachmentBuilder struct {
	attachmentId     string // 附件ID
	attachmentIdFlag bool
	name             string // 名字
	nameFlag         bool
}

func NewApplicationOfferAttachmentBuilder() *ApplicationOfferAttachmentBuilder {
	builder := &ApplicationOfferAttachmentBuilder{}
	return builder
}

// 附件ID
//
// 示例值：
func (builder *ApplicationOfferAttachmentBuilder) AttachmentId(attachmentId string) *ApplicationOfferAttachmentBuilder {
	builder.attachmentId = attachmentId
	builder.attachmentIdFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *ApplicationOfferAttachmentBuilder) Name(name string) *ApplicationOfferAttachmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *ApplicationOfferAttachmentBuilder) Build() *ApplicationOfferAttachment {
	req := &ApplicationOfferAttachment{}
	if builder.attachmentIdFlag {
		req.AttachmentId = &builder.attachmentId

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

type ApplicationOfferBasicInfo struct {
	OfferType         *int                           `json:"offer_type,omitempty"`          // Offer 类型
	Remark            *string                        `json:"remark,omitempty"`              // 备注
	ExpireTime        *int                           `json:"expire_time,omitempty"`         // Offer 过期时间
	OwnerUserId       *string                        `json:"owner_user_id,omitempty"`       // Offer 负责人 ID
	CreatorUserId     *string                        `json:"creator_user_id,omitempty"`     // Offer 创建人 ID
	EmployeeType      *BaseBilingualWithId           `json:"employee_type,omitempty"`       // Offer 人员类型
	CreateTime        *string                        `json:"create_time,omitempty"`         // 创建时间
	LeaderUserId      *string                        `json:"leader_user_id,omitempty"`      // 直属上级 ID
	OnboardDate       *string                        `json:"onboard_date,omitempty"`        // 入职日期
	DepartmentId      *string                        `json:"department_id,omitempty"`       // 入职部门
	ProbationMonth    *int                           `json:"probation_month,omitempty"`     // 试用期, 比如试用期6个月
	ContractYear      *int                           `json:"contract_year,omitempty"`       // 合同期, 比如3年
	RecruitmentType   *BaseBilingualWithId           `json:"recruitment_type,omitempty"`    // 雇员类型
	Sequence          *BaseBilingualWithId           `json:"sequence,omitempty"`            // 序列
	Level             *BaseBilingualWithId           `json:"level,omitempty"`               // 级别
	OnboardAddress    *BaseAddress                   `json:"onboard_address,omitempty"`     // 入职地点
	WorkAddress       *BaseAddress                   `json:"work_address,omitempty"`        // 工作地点
	CustomizeInfoList []*ApplicationOfferCustomValue `json:"customize_info_list,omitempty"` // 自定义字段信息
}

type ApplicationOfferBasicInfoBuilder struct {
	offerType             int // Offer 类型
	offerTypeFlag         bool
	remark                string // 备注
	remarkFlag            bool
	expireTime            int // Offer 过期时间
	expireTimeFlag        bool
	ownerUserId           string // Offer 负责人 ID
	ownerUserIdFlag       bool
	creatorUserId         string // Offer 创建人 ID
	creatorUserIdFlag     bool
	employeeType          *BaseBilingualWithId // Offer 人员类型
	employeeTypeFlag      bool
	createTime            string // 创建时间
	createTimeFlag        bool
	leaderUserId          string // 直属上级 ID
	leaderUserIdFlag      bool
	onboardDate           string // 入职日期
	onboardDateFlag       bool
	departmentId          string // 入职部门
	departmentIdFlag      bool
	probationMonth        int // 试用期, 比如试用期6个月
	probationMonthFlag    bool
	contractYear          int // 合同期, 比如3年
	contractYearFlag      bool
	recruitmentType       *BaseBilingualWithId // 雇员类型
	recruitmentTypeFlag   bool
	sequence              *BaseBilingualWithId // 序列
	sequenceFlag          bool
	level                 *BaseBilingualWithId // 级别
	levelFlag             bool
	onboardAddress        *BaseAddress // 入职地点
	onboardAddressFlag    bool
	workAddress           *BaseAddress // 工作地点
	workAddressFlag       bool
	customizeInfoList     []*ApplicationOfferCustomValue // 自定义字段信息
	customizeInfoListFlag bool
}

func NewApplicationOfferBasicInfoBuilder() *ApplicationOfferBasicInfoBuilder {
	builder := &ApplicationOfferBasicInfoBuilder{}
	return builder
}

// Offer 类型
//
// 示例值：1
func (builder *ApplicationOfferBasicInfoBuilder) OfferType(offerType int) *ApplicationOfferBasicInfoBuilder {
	builder.offerType = offerType
	builder.offerTypeFlag = true
	return builder
}

// 备注
//
// 示例值：10
func (builder *ApplicationOfferBasicInfoBuilder) Remark(remark string) *ApplicationOfferBasicInfoBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

// Offer 过期时间
//
// 示例值：1653383498000
func (builder *ApplicationOfferBasicInfoBuilder) ExpireTime(expireTime int) *ApplicationOfferBasicInfoBuilder {
	builder.expireTime = expireTime
	builder.expireTimeFlag = true
	return builder
}

// Offer 负责人 ID
//
// 示例值：ou_99be8e24ad1ad390b6cd3b8916940df1
func (builder *ApplicationOfferBasicInfoBuilder) OwnerUserId(ownerUserId string) *ApplicationOfferBasicInfoBuilder {
	builder.ownerUserId = ownerUserId
	builder.ownerUserIdFlag = true
	return builder
}

// Offer 创建人 ID
//
// 示例值：ou_99be8e24ad1ad390b6cd3b8916940df1
func (builder *ApplicationOfferBasicInfoBuilder) CreatorUserId(creatorUserId string) *ApplicationOfferBasicInfoBuilder {
	builder.creatorUserId = creatorUserId
	builder.creatorUserIdFlag = true
	return builder
}

// Offer 人员类型
//
// 示例值：
func (builder *ApplicationOfferBasicInfoBuilder) EmployeeType(employeeType *BaseBilingualWithId) *ApplicationOfferBasicInfoBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}

// 创建时间
//
// 示例值：1628512038000
func (builder *ApplicationOfferBasicInfoBuilder) CreateTime(createTime string) *ApplicationOfferBasicInfoBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 直属上级 ID
//
// 示例值：ou_99be8e24ad1ad390b6cd3b8916940df1
func (builder *ApplicationOfferBasicInfoBuilder) LeaderUserId(leaderUserId string) *ApplicationOfferBasicInfoBuilder {
	builder.leaderUserId = leaderUserId
	builder.leaderUserIdFlag = true
	return builder
}

// 入职日期
//
// 示例值：2021-05-20
func (builder *ApplicationOfferBasicInfoBuilder) OnboardDate(onboardDate string) *ApplicationOfferBasicInfoBuilder {
	builder.onboardDate = onboardDate
	builder.onboardDateFlag = true
	return builder
}

// 入职部门
//
// 示例值：od-6b394871807047c7023ebfc1ff37cd3a
func (builder *ApplicationOfferBasicInfoBuilder) DepartmentId(departmentId string) *ApplicationOfferBasicInfoBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 试用期, 比如试用期6个月
//
// 示例值：1
func (builder *ApplicationOfferBasicInfoBuilder) ProbationMonth(probationMonth int) *ApplicationOfferBasicInfoBuilder {
	builder.probationMonth = probationMonth
	builder.probationMonthFlag = true
	return builder
}

// 合同期, 比如3年
//
// 示例值：3
func (builder *ApplicationOfferBasicInfoBuilder) ContractYear(contractYear int) *ApplicationOfferBasicInfoBuilder {
	builder.contractYear = contractYear
	builder.contractYearFlag = true
	return builder
}

// 雇员类型
//
// 示例值：
func (builder *ApplicationOfferBasicInfoBuilder) RecruitmentType(recruitmentType *BaseBilingualWithId) *ApplicationOfferBasicInfoBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}

// 序列
//
// 示例值：
func (builder *ApplicationOfferBasicInfoBuilder) Sequence(sequence *BaseBilingualWithId) *ApplicationOfferBasicInfoBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}

// 级别
//
// 示例值：
func (builder *ApplicationOfferBasicInfoBuilder) Level(level *BaseBilingualWithId) *ApplicationOfferBasicInfoBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}

// 入职地点
//
// 示例值：
func (builder *ApplicationOfferBasicInfoBuilder) OnboardAddress(onboardAddress *BaseAddress) *ApplicationOfferBasicInfoBuilder {
	builder.onboardAddress = onboardAddress
	builder.onboardAddressFlag = true
	return builder
}

// 工作地点
//
// 示例值：
func (builder *ApplicationOfferBasicInfoBuilder) WorkAddress(workAddress *BaseAddress) *ApplicationOfferBasicInfoBuilder {
	builder.workAddress = workAddress
	builder.workAddressFlag = true
	return builder
}

// 自定义字段信息
//
// 示例值：
func (builder *ApplicationOfferBasicInfoBuilder) CustomizeInfoList(customizeInfoList []*ApplicationOfferCustomValue) *ApplicationOfferBasicInfoBuilder {
	builder.customizeInfoList = customizeInfoList
	builder.customizeInfoListFlag = true
	return builder
}

func (builder *ApplicationOfferBasicInfoBuilder) Build() *ApplicationOfferBasicInfo {
	req := &ApplicationOfferBasicInfo{}
	if builder.offerTypeFlag {
		req.OfferType = &builder.offerType

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	if builder.expireTimeFlag {
		req.ExpireTime = &builder.expireTime

	}
	if builder.ownerUserIdFlag {
		req.OwnerUserId = &builder.ownerUserId

	}
	if builder.creatorUserIdFlag {
		req.CreatorUserId = &builder.creatorUserId

	}
	if builder.employeeTypeFlag {
		req.EmployeeType = builder.employeeType
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.leaderUserIdFlag {
		req.LeaderUserId = &builder.leaderUserId

	}
	if builder.onboardDateFlag {
		req.OnboardDate = &builder.onboardDate

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.probationMonthFlag {
		req.ProbationMonth = &builder.probationMonth

	}
	if builder.contractYearFlag {
		req.ContractYear = &builder.contractYear

	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.sequenceFlag {
		req.Sequence = builder.sequence
	}
	if builder.levelFlag {
		req.Level = builder.level
	}
	if builder.onboardAddressFlag {
		req.OnboardAddress = builder.onboardAddress
	}
	if builder.workAddressFlag {
		req.WorkAddress = builder.workAddress
	}
	if builder.customizeInfoListFlag {
		req.CustomizeInfoList = builder.customizeInfoList
	}
	return req
}

type ApplicationOfferBasicInfoCustomizedObject struct {
	Id              *string                                                 `json:"id,omitempty"`                // id
	Name            *OfferSchemaName                                        `json:"name,omitempty"`              // 名字
	Type            *string                                                 `json:"type,omitempty"`              // 自定义字段类型
	Value           *string                                                 `json:"value,omitempty"`             // 自定义字段的值
	OptionValueList []*ApplicationOfferBasicInfoCustomizedObjectOptionValue `json:"option_value_list,omitempty"` // 单选/多选自定义字段的值
}

type ApplicationOfferBasicInfoCustomizedObjectBuilder struct {
	id                  string // id
	idFlag              bool
	name                *OfferSchemaName // 名字
	nameFlag            bool
	type_               string // 自定义字段类型
	typeFlag            bool
	value               string // 自定义字段的值
	valueFlag           bool
	optionValueList     []*ApplicationOfferBasicInfoCustomizedObjectOptionValue // 单选/多选自定义字段的值
	optionValueListFlag bool
}

func NewApplicationOfferBasicInfoCustomizedObjectBuilder() *ApplicationOfferBasicInfoCustomizedObjectBuilder {
	builder := &ApplicationOfferBasicInfoCustomizedObjectBuilder{}
	return builder
}

// id
//
// 示例值：
func (builder *ApplicationOfferBasicInfoCustomizedObjectBuilder) Id(id string) *ApplicationOfferBasicInfoCustomizedObjectBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *ApplicationOfferBasicInfoCustomizedObjectBuilder) Name(name *OfferSchemaName) *ApplicationOfferBasicInfoCustomizedObjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 自定义字段类型
//
// 示例值：
func (builder *ApplicationOfferBasicInfoCustomizedObjectBuilder) Type(type_ string) *ApplicationOfferBasicInfoCustomizedObjectBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 自定义字段的值
//
// 示例值：
func (builder *ApplicationOfferBasicInfoCustomizedObjectBuilder) Value(value string) *ApplicationOfferBasicInfoCustomizedObjectBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

// 单选/多选自定义字段的值
//
// 示例值：
func (builder *ApplicationOfferBasicInfoCustomizedObjectBuilder) OptionValueList(optionValueList []*ApplicationOfferBasicInfoCustomizedObjectOptionValue) *ApplicationOfferBasicInfoCustomizedObjectBuilder {
	builder.optionValueList = optionValueList
	builder.optionValueListFlag = true
	return builder
}

func (builder *ApplicationOfferBasicInfoCustomizedObjectBuilder) Build() *ApplicationOfferBasicInfoCustomizedObject {
	req := &ApplicationOfferBasicInfoCustomizedObject{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	if builder.optionValueListFlag {
		req.OptionValueList = builder.optionValueList
	}
	return req
}

type ApplicationOfferBasicInfoCustomizedObjectOptionValue struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 中文名
	EnUs *string `json:"en_us,omitempty"` // 英文名
}

type ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder struct {
	zhCn     string // 中文名
	zhCnFlag bool
	enUs     string // 英文名
	enUsFlag bool
}

func NewApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder() *ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder {
	builder := &ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder{}
	return builder
}

// 中文名
//
// 示例值：
func (builder *ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder) ZhCn(zhCn string) *ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder) EnUs(enUs string) *ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *ApplicationOfferBasicInfoCustomizedObjectOptionValueBuilder) Build() *ApplicationOfferBasicInfoCustomizedObjectOptionValue {
	req := &ApplicationOfferBasicInfoCustomizedObjectOptionValue{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

type ApplicationOfferBasicInfoUser struct {
	Id         *string     `json:"id,omitempty"`           // ID
	Name       *string     `json:"name,omitempty"`         // 名字
	EnName     *string     `json:"en_name,omitempty"`      // 英文名
	Avatar     *string     `json:"avatar,omitempty"`       // 头像
	Department *Department `json:"department,omitempty"`   // 部门
	Timezone   *string     `json:"timezone,omitempty"`     // 时区
	Phone      *string     `json:"phone,omitempty"`        // 手机
	Email      *string     `json:"email,omitempty"`        // 邮箱
	InAppScope *bool       `json:"in_app_scope,omitempty"` // 是否拥有app权限
}

type ApplicationOfferBasicInfoUserBuilder struct {
	id             string // ID
	idFlag         bool
	name           string // 名字
	nameFlag       bool
	enName         string // 英文名
	enNameFlag     bool
	avatar         string // 头像
	avatarFlag     bool
	department     *Department // 部门
	departmentFlag bool
	timezone       string // 时区
	timezoneFlag   bool
	phone          string // 手机
	phoneFlag      bool
	email          string // 邮箱
	emailFlag      bool
	inAppScope     bool // 是否拥有app权限
	inAppScopeFlag bool
}

func NewApplicationOfferBasicInfoUserBuilder() *ApplicationOfferBasicInfoUserBuilder {
	builder := &ApplicationOfferBasicInfoUserBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationOfferBasicInfoUserBuilder) Id(id string) *ApplicationOfferBasicInfoUserBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *ApplicationOfferBasicInfoUserBuilder) Name(name string) *ApplicationOfferBasicInfoUserBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *ApplicationOfferBasicInfoUserBuilder) EnName(enName string) *ApplicationOfferBasicInfoUserBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 头像
//
// 示例值：
func (builder *ApplicationOfferBasicInfoUserBuilder) Avatar(avatar string) *ApplicationOfferBasicInfoUserBuilder {
	builder.avatar = avatar
	builder.avatarFlag = true
	return builder
}

// 部门
//
// 示例值：
func (builder *ApplicationOfferBasicInfoUserBuilder) Department(department *Department) *ApplicationOfferBasicInfoUserBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 时区
//
// 示例值：
func (builder *ApplicationOfferBasicInfoUserBuilder) Timezone(timezone string) *ApplicationOfferBasicInfoUserBuilder {
	builder.timezone = timezone
	builder.timezoneFlag = true
	return builder
}

// 手机
//
// 示例值：
func (builder *ApplicationOfferBasicInfoUserBuilder) Phone(phone string) *ApplicationOfferBasicInfoUserBuilder {
	builder.phone = phone
	builder.phoneFlag = true
	return builder
}

// 邮箱
//
// 示例值：
func (builder *ApplicationOfferBasicInfoUserBuilder) Email(email string) *ApplicationOfferBasicInfoUserBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 是否拥有app权限
//
// 示例值：
func (builder *ApplicationOfferBasicInfoUserBuilder) InAppScope(inAppScope bool) *ApplicationOfferBasicInfoUserBuilder {
	builder.inAppScope = inAppScope
	builder.inAppScopeFlag = true
	return builder
}

func (builder *ApplicationOfferBasicInfoUserBuilder) Build() *ApplicationOfferBasicInfoUser {
	req := &ApplicationOfferBasicInfoUser{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.avatarFlag {
		req.Avatar = &builder.avatar

	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.timezoneFlag {
		req.Timezone = &builder.timezone

	}
	if builder.phoneFlag {
		req.Phone = &builder.phone

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.inAppScopeFlag {
		req.InAppScope = &builder.inAppScope

	}
	return req
}

type ApplicationOfferCustomValue struct {
	ObjectId       *string `json:"object_id,omitempty"`       // 自定义字段 ID
	CustomizeValue *string `json:"customize_value,omitempty"` // 自定义字段 value
}

type ApplicationOfferCustomValueBuilder struct {
	objectId           string // 自定义字段 ID
	objectIdFlag       bool
	customizeValue     string // 自定义字段 value
	customizeValueFlag bool
}

func NewApplicationOfferCustomValueBuilder() *ApplicationOfferCustomValueBuilder {
	builder := &ApplicationOfferCustomValueBuilder{}
	return builder
}

// 自定义字段 ID
//
// 示例值：key
func (builder *ApplicationOfferCustomValueBuilder) ObjectId(objectId string) *ApplicationOfferCustomValueBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}

// 自定义字段 value
//
// 示例值：value
func (builder *ApplicationOfferCustomValueBuilder) CustomizeValue(customizeValue string) *ApplicationOfferCustomValueBuilder {
	builder.customizeValue = customizeValue
	builder.customizeValueFlag = true
	return builder
}

func (builder *ApplicationOfferCustomValueBuilder) Build() *ApplicationOfferCustomValue {
	req := &ApplicationOfferCustomValue{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.customizeValueFlag {
		req.CustomizeValue = &builder.customizeValue

	}
	return req
}

type ApplicationOfferOnboardProfile struct {
	OfferId                    *string                                `json:"offer_id,omitempty"`                        // offer ID
	Department                 *Department                            `json:"department,omitempty"`                      // 部门
	RecruitmentType            *RecruitmentType                       `json:"recruitment_type,omitempty"`                // 招聘类型
	Sequence                   *Sequence                              `json:"sequence,omitempty"`                        // 序列
	Level                      *Level                                 `json:"level,omitempty"`                           // 职级
	OnboardAddress             *ApplicationOfferOnboardProfileAddress `json:"onboard_address,omitempty"`                 // onboard地址
	WorkAddress                *ApplicationOfferOnboardProfileAddress `json:"work_address,omitempty"`                    // 工作地址
	Leader                     *ApplicationOfferBasicInfoUser         `json:"leader,omitempty"`                          // 领导
	IsWorkAddressSameToOnboard *bool                                  `json:"is_work_address_same_to_onboard,omitempty"` // 工作地址是否与onboard地址相同
	ProbationMonth             *int                                   `json:"probation_month,omitempty"`                 // 试用期
	ContractYear               *int                                   `json:"contract_year,omitempty"`                   // 合同年限
}

type ApplicationOfferOnboardProfileBuilder struct {
	offerId                        string // offer ID
	offerIdFlag                    bool
	department                     *Department // 部门
	departmentFlag                 bool
	recruitmentType                *RecruitmentType // 招聘类型
	recruitmentTypeFlag            bool
	sequence                       *Sequence // 序列
	sequenceFlag                   bool
	level                          *Level // 职级
	levelFlag                      bool
	onboardAddress                 *ApplicationOfferOnboardProfileAddress // onboard地址
	onboardAddressFlag             bool
	workAddress                    *ApplicationOfferOnboardProfileAddress // 工作地址
	workAddressFlag                bool
	leader                         *ApplicationOfferBasicInfoUser // 领导
	leaderFlag                     bool
	isWorkAddressSameToOnboard     bool // 工作地址是否与onboard地址相同
	isWorkAddressSameToOnboardFlag bool
	probationMonth                 int // 试用期
	probationMonthFlag             bool
	contractYear                   int // 合同年限
	contractYearFlag               bool
}

func NewApplicationOfferOnboardProfileBuilder() *ApplicationOfferOnboardProfileBuilder {
	builder := &ApplicationOfferOnboardProfileBuilder{}
	return builder
}

// offer ID
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileBuilder) OfferId(offerId string) *ApplicationOfferOnboardProfileBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}

// 部门
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileBuilder) Department(department *Department) *ApplicationOfferOnboardProfileBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 招聘类型
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileBuilder) RecruitmentType(recruitmentType *RecruitmentType) *ApplicationOfferOnboardProfileBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}

// 序列
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileBuilder) Sequence(sequence *Sequence) *ApplicationOfferOnboardProfileBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}

// 职级
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileBuilder) Level(level *Level) *ApplicationOfferOnboardProfileBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}

// onboard地址
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileBuilder) OnboardAddress(onboardAddress *ApplicationOfferOnboardProfileAddress) *ApplicationOfferOnboardProfileBuilder {
	builder.onboardAddress = onboardAddress
	builder.onboardAddressFlag = true
	return builder
}

// 工作地址
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileBuilder) WorkAddress(workAddress *ApplicationOfferOnboardProfileAddress) *ApplicationOfferOnboardProfileBuilder {
	builder.workAddress = workAddress
	builder.workAddressFlag = true
	return builder
}

// 领导
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileBuilder) Leader(leader *ApplicationOfferBasicInfoUser) *ApplicationOfferOnboardProfileBuilder {
	builder.leader = leader
	builder.leaderFlag = true
	return builder
}

// 工作地址是否与onboard地址相同
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileBuilder) IsWorkAddressSameToOnboard(isWorkAddressSameToOnboard bool) *ApplicationOfferOnboardProfileBuilder {
	builder.isWorkAddressSameToOnboard = isWorkAddressSameToOnboard
	builder.isWorkAddressSameToOnboardFlag = true
	return builder
}

// 试用期
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileBuilder) ProbationMonth(probationMonth int) *ApplicationOfferOnboardProfileBuilder {
	builder.probationMonth = probationMonth
	builder.probationMonthFlag = true
	return builder
}

// 合同年限
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileBuilder) ContractYear(contractYear int) *ApplicationOfferOnboardProfileBuilder {
	builder.contractYear = contractYear
	builder.contractYearFlag = true
	return builder
}

func (builder *ApplicationOfferOnboardProfileBuilder) Build() *ApplicationOfferOnboardProfile {
	req := &ApplicationOfferOnboardProfile{}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.sequenceFlag {
		req.Sequence = builder.sequence
	}
	if builder.levelFlag {
		req.Level = builder.level
	}
	if builder.onboardAddressFlag {
		req.OnboardAddress = builder.onboardAddress
	}
	if builder.workAddressFlag {
		req.WorkAddress = builder.workAddress
	}
	if builder.leaderFlag {
		req.Leader = builder.leader
	}
	if builder.isWorkAddressSameToOnboardFlag {
		req.IsWorkAddressSameToOnboard = &builder.isWorkAddressSameToOnboard

	}
	if builder.probationMonthFlag {
		req.ProbationMonth = &builder.probationMonth

	}
	if builder.contractYearFlag {
		req.ContractYear = &builder.contractYear

	}
	return req
}

type ApplicationOfferOnboardProfileAddress struct {
	Id           *string                             `json:"id,omitempty"`            // ID
	Name         *string                             `json:"name,omitempty"`          // 名字
	EnName       *string                             `json:"en_name,omitempty"`       // 英文名
	District     *ApplicationOfferOnboardProfileCity `json:"district,omitempty"`      // 区
	City         *ApplicationOfferOnboardProfileCity `json:"city,omitempty"`          // 城市
	State        *ApplicationOfferOnboardProfileCity `json:"state,omitempty"`         // 省
	Country      *ApplicationOfferOnboardProfileCity `json:"country,omitempty"`       // 国家
	UsageIdList  []string                            `json:"usage_id_list,omitempty"` // 使用ID列表
	ActiveStatus *int                                `json:"active_status,omitempty"` // 状态
}

type ApplicationOfferOnboardProfileAddressBuilder struct {
	id               string // ID
	idFlag           bool
	name             string // 名字
	nameFlag         bool
	enName           string // 英文名
	enNameFlag       bool
	district         *ApplicationOfferOnboardProfileCity // 区
	districtFlag     bool
	city             *ApplicationOfferOnboardProfileCity // 城市
	cityFlag         bool
	state            *ApplicationOfferOnboardProfileCity // 省
	stateFlag        bool
	country          *ApplicationOfferOnboardProfileCity // 国家
	countryFlag      bool
	usageIdList      []string // 使用ID列表
	usageIdListFlag  bool
	activeStatus     int // 状态
	activeStatusFlag bool
}

func NewApplicationOfferOnboardProfileAddressBuilder() *ApplicationOfferOnboardProfileAddressBuilder {
	builder := &ApplicationOfferOnboardProfileAddressBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileAddressBuilder) Id(id string) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileAddressBuilder) Name(name string) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileAddressBuilder) EnName(enName string) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 区
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileAddressBuilder) District(district *ApplicationOfferOnboardProfileCity) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.district = district
	builder.districtFlag = true
	return builder
}

// 城市
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileAddressBuilder) City(city *ApplicationOfferOnboardProfileCity) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}

// 省
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileAddressBuilder) State(state *ApplicationOfferOnboardProfileCity) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}

// 国家
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileAddressBuilder) Country(country *ApplicationOfferOnboardProfileCity) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

// 使用ID列表
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileAddressBuilder) UsageIdList(usageIdList []string) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.usageIdList = usageIdList
	builder.usageIdListFlag = true
	return builder
}

// 状态
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileAddressBuilder) ActiveStatus(activeStatus int) *ApplicationOfferOnboardProfileAddressBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *ApplicationOfferOnboardProfileAddressBuilder) Build() *ApplicationOfferOnboardProfileAddress {
	req := &ApplicationOfferOnboardProfileAddress{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.districtFlag {
		req.District = builder.district
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.stateFlag {
		req.State = builder.state
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	if builder.usageIdListFlag {
		req.UsageIdList = builder.usageIdList
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

type ApplicationOfferOnboardProfileCity struct {
	Code         *string `json:"code,omitempty"`          // 编码
	Name         *string `json:"name,omitempty"`          // 名字
	EnName       *string `json:"en_name,omitempty"`       // 英文名
	LocationType *int    `json:"location_type,omitempty"` // 地址类型
}

type ApplicationOfferOnboardProfileCityBuilder struct {
	code             string // 编码
	codeFlag         bool
	name             string // 名字
	nameFlag         bool
	enName           string // 英文名
	enNameFlag       bool
	locationType     int // 地址类型
	locationTypeFlag bool
}

func NewApplicationOfferOnboardProfileCityBuilder() *ApplicationOfferOnboardProfileCityBuilder {
	builder := &ApplicationOfferOnboardProfileCityBuilder{}
	return builder
}

// 编码
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileCityBuilder) Code(code string) *ApplicationOfferOnboardProfileCityBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileCityBuilder) Name(name string) *ApplicationOfferOnboardProfileCityBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileCityBuilder) EnName(enName string) *ApplicationOfferOnboardProfileCityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 地址类型
//
// 示例值：
func (builder *ApplicationOfferOnboardProfileCityBuilder) LocationType(locationType int) *ApplicationOfferOnboardProfileCityBuilder {
	builder.locationType = locationType
	builder.locationTypeFlag = true
	return builder
}

func (builder *ApplicationOfferOnboardProfileCityBuilder) Build() *ApplicationOfferOnboardProfileCity {
	req := &ApplicationOfferOnboardProfileCity{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.locationTypeFlag {
		req.LocationType = &builder.locationType

	}
	return req
}

type ApplicationOfferSalaryPlan struct {
	Currency                  *string                        `json:"currency,omitempty"`                    // 币种
	BasicSalary               *string                        `json:"basic_salary,omitempty"`                // 基本薪资，为JSON 格式，amount 代表基本薪资的金额，peroid 代表基本薪资的周期单位，如："{"amount":"10000","period":2}"
	ProbationSalaryPercentage *string                        `json:"probation_salary_percentage,omitempty"` // 试用期百分比
	AwardSalaryMultiple       *string                        `json:"award_salary_multiple,omitempty"`       // 年终奖月数
	OptionShares              *string                        `json:"option_shares,omitempty"`               // 期权股数
	QuarterlyBonus            *string                        `json:"quarterly_bonus,omitempty"`             // 季度奖金额
	HalfYearBonus             *string                        `json:"half_year_bonus,omitempty"`             // 半年奖金额
	TotalAnnualCash           *string                        `json:"total_annual_cash,omitempty"`           // 年度现金总额(数量，非公式)
	CustomizeInfoList         []*ApplicationOfferCustomValue `json:"customize_info_list,omitempty"`         // 自定义字段的 value 信息
}

type ApplicationOfferSalaryPlanBuilder struct {
	currency                      string // 币种
	currencyFlag                  bool
	basicSalary                   string // 基本薪资，为JSON 格式，amount 代表基本薪资的金额，peroid 代表基本薪资的周期单位，如："{"amount":"10000","period":2}"
	basicSalaryFlag               bool
	probationSalaryPercentage     string // 试用期百分比
	probationSalaryPercentageFlag bool
	awardSalaryMultiple           string // 年终奖月数
	awardSalaryMultipleFlag       bool
	optionShares                  string // 期权股数
	optionSharesFlag              bool
	quarterlyBonus                string // 季度奖金额
	quarterlyBonusFlag            bool
	halfYearBonus                 string // 半年奖金额
	halfYearBonusFlag             bool
	totalAnnualCash               string // 年度现金总额(数量，非公式)
	totalAnnualCashFlag           bool
	customizeInfoList             []*ApplicationOfferCustomValue // 自定义字段的 value 信息
	customizeInfoListFlag         bool
}

func NewApplicationOfferSalaryPlanBuilder() *ApplicationOfferSalaryPlanBuilder {
	builder := &ApplicationOfferSalaryPlanBuilder{}
	return builder
}

// 币种
//
// 示例值：CNY
func (builder *ApplicationOfferSalaryPlanBuilder) Currency(currency string) *ApplicationOfferSalaryPlanBuilder {
	builder.currency = currency
	builder.currencyFlag = true
	return builder
}

// 基本薪资，为JSON 格式，amount 代表基本薪资的金额，peroid 代表基本薪资的周期单位，如："{"amount":"10000","period":2}"
//
// 示例值：{"amount":"10000","period":2}
func (builder *ApplicationOfferSalaryPlanBuilder) BasicSalary(basicSalary string) *ApplicationOfferSalaryPlanBuilder {
	builder.basicSalary = basicSalary
	builder.basicSalaryFlag = true
	return builder
}

// 试用期百分比
//
// 示例值：10%
func (builder *ApplicationOfferSalaryPlanBuilder) ProbationSalaryPercentage(probationSalaryPercentage string) *ApplicationOfferSalaryPlanBuilder {
	builder.probationSalaryPercentage = probationSalaryPercentage
	builder.probationSalaryPercentageFlag = true
	return builder
}

// 年终奖月数
//
// 示例值：12
func (builder *ApplicationOfferSalaryPlanBuilder) AwardSalaryMultiple(awardSalaryMultiple string) *ApplicationOfferSalaryPlanBuilder {
	builder.awardSalaryMultiple = awardSalaryMultiple
	builder.awardSalaryMultipleFlag = true
	return builder
}

// 期权股数
//
// 示例值：11
func (builder *ApplicationOfferSalaryPlanBuilder) OptionShares(optionShares string) *ApplicationOfferSalaryPlanBuilder {
	builder.optionShares = optionShares
	builder.optionSharesFlag = true
	return builder
}

// 季度奖金额
//
// 示例值：11111
func (builder *ApplicationOfferSalaryPlanBuilder) QuarterlyBonus(quarterlyBonus string) *ApplicationOfferSalaryPlanBuilder {
	builder.quarterlyBonus = quarterlyBonus
	builder.quarterlyBonusFlag = true
	return builder
}

// 半年奖金额
//
// 示例值：11111
func (builder *ApplicationOfferSalaryPlanBuilder) HalfYearBonus(halfYearBonus string) *ApplicationOfferSalaryPlanBuilder {
	builder.halfYearBonus = halfYearBonus
	builder.halfYearBonusFlag = true
	return builder
}

// 年度现金总额(数量，非公式)
//
// 示例值：11111
func (builder *ApplicationOfferSalaryPlanBuilder) TotalAnnualCash(totalAnnualCash string) *ApplicationOfferSalaryPlanBuilder {
	builder.totalAnnualCash = totalAnnualCash
	builder.totalAnnualCashFlag = true
	return builder
}

// 自定义字段的 value 信息
//
// 示例值：
func (builder *ApplicationOfferSalaryPlanBuilder) CustomizeInfoList(customizeInfoList []*ApplicationOfferCustomValue) *ApplicationOfferSalaryPlanBuilder {
	builder.customizeInfoList = customizeInfoList
	builder.customizeInfoListFlag = true
	return builder
}

func (builder *ApplicationOfferSalaryPlanBuilder) Build() *ApplicationOfferSalaryPlan {
	req := &ApplicationOfferSalaryPlan{}
	if builder.currencyFlag {
		req.Currency = &builder.currency

	}
	if builder.basicSalaryFlag {
		req.BasicSalary = &builder.basicSalary

	}
	if builder.probationSalaryPercentageFlag {
		req.ProbationSalaryPercentage = &builder.probationSalaryPercentage

	}
	if builder.awardSalaryMultipleFlag {
		req.AwardSalaryMultiple = &builder.awardSalaryMultiple

	}
	if builder.optionSharesFlag {
		req.OptionShares = &builder.optionShares

	}
	if builder.quarterlyBonusFlag {
		req.QuarterlyBonus = &builder.quarterlyBonus

	}
	if builder.halfYearBonusFlag {
		req.HalfYearBonus = &builder.halfYearBonus

	}
	if builder.totalAnnualCashFlag {
		req.TotalAnnualCash = &builder.totalAnnualCash

	}
	if builder.customizeInfoListFlag {
		req.CustomizeInfoList = builder.customizeInfoList
	}
	return req
}

type ApplicationOfferSalaryPlanSalaryTemplate struct {
	TemplateKey   *string `json:"template_key,omitempty"`   // 模版key
	TotalAmount   *string `json:"total_amount,omitempty"`   // 总金额
	Currency      *string `json:"currency,omitempty"`       // 币种
	SalaryContent *string `json:"salary_content,omitempty"` // 薪酬内容
}

type ApplicationOfferSalaryPlanSalaryTemplateBuilder struct {
	templateKey       string // 模版key
	templateKeyFlag   bool
	totalAmount       string // 总金额
	totalAmountFlag   bool
	currency          string // 币种
	currencyFlag      bool
	salaryContent     string // 薪酬内容
	salaryContentFlag bool
}

func NewApplicationOfferSalaryPlanSalaryTemplateBuilder() *ApplicationOfferSalaryPlanSalaryTemplateBuilder {
	builder := &ApplicationOfferSalaryPlanSalaryTemplateBuilder{}
	return builder
}

// 模版key
//
// 示例值：
func (builder *ApplicationOfferSalaryPlanSalaryTemplateBuilder) TemplateKey(templateKey string) *ApplicationOfferSalaryPlanSalaryTemplateBuilder {
	builder.templateKey = templateKey
	builder.templateKeyFlag = true
	return builder
}

// 总金额
//
// 示例值：
func (builder *ApplicationOfferSalaryPlanSalaryTemplateBuilder) TotalAmount(totalAmount string) *ApplicationOfferSalaryPlanSalaryTemplateBuilder {
	builder.totalAmount = totalAmount
	builder.totalAmountFlag = true
	return builder
}

// 币种
//
// 示例值：
func (builder *ApplicationOfferSalaryPlanSalaryTemplateBuilder) Currency(currency string) *ApplicationOfferSalaryPlanSalaryTemplateBuilder {
	builder.currency = currency
	builder.currencyFlag = true
	return builder
}

// 薪酬内容
//
// 示例值：
func (builder *ApplicationOfferSalaryPlanSalaryTemplateBuilder) SalaryContent(salaryContent string) *ApplicationOfferSalaryPlanSalaryTemplateBuilder {
	builder.salaryContent = salaryContent
	builder.salaryContentFlag = true
	return builder
}

func (builder *ApplicationOfferSalaryPlanSalaryTemplateBuilder) Build() *ApplicationOfferSalaryPlanSalaryTemplate {
	req := &ApplicationOfferSalaryPlanSalaryTemplate{}
	if builder.templateKeyFlag {
		req.TemplateKey = &builder.templateKey

	}
	if builder.totalAmountFlag {
		req.TotalAmount = &builder.totalAmount

	}
	if builder.currencyFlag {
		req.Currency = &builder.currency

	}
	if builder.salaryContentFlag {
		req.SalaryContent = &builder.salaryContent

	}
	return req
}

type ApplicationPrehire struct {
	Id        *string                  `json:"id,omitempty"`         // 投递id
	BasicInfo *ApplicationBasicInfo    `json:"basic_info,omitempty"` // 投递基础信息
	Talent    *ApplicationTalent       `json:"talent,omitempty"`     // 人才数据
	Job       *ApplicationJob          `json:"job,omitempty"`        // 职位数据
	Offer     *ApplicationPrehireOffer `json:"offer,omitempty"`      // Offer数据
}

type ApplicationPrehireBuilder struct {
	id            string // 投递id
	idFlag        bool
	basicInfo     *ApplicationBasicInfo // 投递基础信息
	basicInfoFlag bool
	talent        *ApplicationTalent // 人才数据
	talentFlag    bool
	job           *ApplicationJob // 职位数据
	jobFlag       bool
	offer         *ApplicationPrehireOffer // Offer数据
	offerFlag     bool
}

func NewApplicationPrehireBuilder() *ApplicationPrehireBuilder {
	builder := &ApplicationPrehireBuilder{}
	return builder
}

// 投递id
//
// 示例值：6949805467799537964
func (builder *ApplicationPrehireBuilder) Id(id string) *ApplicationPrehireBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 投递基础信息
//
// 示例值：
func (builder *ApplicationPrehireBuilder) BasicInfo(basicInfo *ApplicationBasicInfo) *ApplicationPrehireBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}

// 人才数据
//
// 示例值：
func (builder *ApplicationPrehireBuilder) Talent(talent *ApplicationTalent) *ApplicationPrehireBuilder {
	builder.talent = talent
	builder.talentFlag = true
	return builder
}

// 职位数据
//
// 示例值：
func (builder *ApplicationPrehireBuilder) Job(job *ApplicationJob) *ApplicationPrehireBuilder {
	builder.job = job
	builder.jobFlag = true
	return builder
}

// Offer数据
//
// 示例值：
func (builder *ApplicationPrehireBuilder) Offer(offer *ApplicationPrehireOffer) *ApplicationPrehireBuilder {
	builder.offer = offer
	builder.offerFlag = true
	return builder
}

func (builder *ApplicationPrehireBuilder) Build() *ApplicationPrehire {
	req := &ApplicationPrehire{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.talentFlag {
		req.Talent = builder.talent
	}
	if builder.jobFlag {
		req.Job = builder.job
	}
	if builder.offerFlag {
		req.Offer = builder.offer
	}
	return req
}

type ApplicationPrehireDepartment struct {
	Id     *string `json:"id,omitempty"`      //
	Name   *string `json:"name,omitempty"`    //
	EnName *string `json:"en_name,omitempty"` //
}

type ApplicationPrehireDepartmentBuilder struct {
	id         string //
	idFlag     bool
	name       string //
	nameFlag   bool
	enName     string //
	enNameFlag bool
}

func NewApplicationPrehireDepartmentBuilder() *ApplicationPrehireDepartmentBuilder {
	builder := &ApplicationPrehireDepartmentBuilder{}
	return builder
}

//
//
// 示例值：6949805467799537964
func (builder *ApplicationPrehireDepartmentBuilder) Id(id string) *ApplicationPrehireDepartmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

//
//
// 示例值：
func (builder *ApplicationPrehireDepartmentBuilder) Name(name string) *ApplicationPrehireDepartmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

//
//
// 示例值：
func (builder *ApplicationPrehireDepartmentBuilder) EnName(enName string) *ApplicationPrehireDepartmentBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *ApplicationPrehireDepartmentBuilder) Build() *ApplicationPrehireDepartment {
	req := &ApplicationPrehireDepartment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type ApplicationPrehireOffer struct {
	BasicInfo           *ApplicationPrehireOfferBasic `json:"basic_info,omitempty"`            // 投递基础信息
	OfferOnboardProfile *AppliOfferOnboardProfile     `json:"offer_onboard_profile,omitempty"` // offer入职信息
	AttachmentList      []*ApplicationOfferAttachment `json:"attachment_list,omitempty"`       // offer附件
}

type ApplicationPrehireOfferBuilder struct {
	basicInfo               *ApplicationPrehireOfferBasic // 投递基础信息
	basicInfoFlag           bool
	offerOnboardProfile     *AppliOfferOnboardProfile // offer入职信息
	offerOnboardProfileFlag bool
	attachmentList          []*ApplicationOfferAttachment // offer附件
	attachmentListFlag      bool
}

func NewApplicationPrehireOfferBuilder() *ApplicationPrehireOfferBuilder {
	builder := &ApplicationPrehireOfferBuilder{}
	return builder
}

// 投递基础信息
//
// 示例值：
func (builder *ApplicationPrehireOfferBuilder) BasicInfo(basicInfo *ApplicationPrehireOfferBasic) *ApplicationPrehireOfferBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}

// offer入职信息
//
// 示例值：
func (builder *ApplicationPrehireOfferBuilder) OfferOnboardProfile(offerOnboardProfile *AppliOfferOnboardProfile) *ApplicationPrehireOfferBuilder {
	builder.offerOnboardProfile = offerOnboardProfile
	builder.offerOnboardProfileFlag = true
	return builder
}

// offer附件
//
// 示例值：
func (builder *ApplicationPrehireOfferBuilder) AttachmentList(attachmentList []*ApplicationOfferAttachment) *ApplicationPrehireOfferBuilder {
	builder.attachmentList = attachmentList
	builder.attachmentListFlag = true
	return builder
}

func (builder *ApplicationPrehireOfferBuilder) Build() *ApplicationPrehireOffer {
	req := &ApplicationPrehireOffer{}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.offerOnboardProfileFlag {
		req.OfferOnboardProfile = builder.offerOnboardProfile
	}
	if builder.attachmentListFlag {
		req.AttachmentList = builder.attachmentList
	}
	return req
}

type ApplicationPrehireOfferBasic struct {
	OfferId       *string                  `json:"offer_id,omitempty"`        //
	ApplicationId *string                  `json:"application_id,omitempty"`  //
	TalentId      *string                  `json:"talent_id,omitempty"`       //
	JobId         *string                  `json:"job_id,omitempty"`          //
	Remark        *string                  `json:"remark,omitempty"`          //
	ExpireTime    *int                     `json:"expire_time,omitempty"`     //
	OnboardTime   *int                     `json:"onboard_time,omitempty"`    //
	TimeZone      *string                  `json:"time_zone,omitempty"`       //
	OfferType     *int                     `json:"offer_type,omitempty"`      // Offer类型 1=Social, 2=Campus, 3=Intern, 4=InternTransfer
	OfferStatus   *int                     `json:"offer_status,omitempty"`    // Offer状态
	Owner         *AppliOfferBasicInfoUser `json:"owner,omitempty"`           //
	OfferJobTitle *string                  `json:"offer_job_title,omitempty"` //
}

type ApplicationPrehireOfferBasicBuilder struct {
	offerId           string //
	offerIdFlag       bool
	applicationId     string //
	applicationIdFlag bool
	talentId          string //
	talentIdFlag      bool
	jobId             string //
	jobIdFlag         bool
	remark            string //
	remarkFlag        bool
	expireTime        int //
	expireTimeFlag    bool
	onboardTime       int //
	onboardTimeFlag   bool
	timeZone          string //
	timeZoneFlag      bool
	offerType         int // Offer类型 1=Social, 2=Campus, 3=Intern, 4=InternTransfer
	offerTypeFlag     bool
	offerStatus       int // Offer状态
	offerStatusFlag   bool
	owner             *AppliOfferBasicInfoUser //
	ownerFlag         bool
	offerJobTitle     string //
	offerJobTitleFlag bool
}

func NewApplicationPrehireOfferBasicBuilder() *ApplicationPrehireOfferBasicBuilder {
	builder := &ApplicationPrehireOfferBasicBuilder{}
	return builder
}

//
//
// 示例值：11111
func (builder *ApplicationPrehireOfferBasicBuilder) OfferId(offerId string) *ApplicationPrehireOfferBasicBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}

//
//
// 示例值：11111
func (builder *ApplicationPrehireOfferBasicBuilder) ApplicationId(applicationId string) *ApplicationPrehireOfferBasicBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

//
//
// 示例值：11111
func (builder *ApplicationPrehireOfferBasicBuilder) TalentId(talentId string) *ApplicationPrehireOfferBasicBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

//
//
// 示例值：11111
func (builder *ApplicationPrehireOfferBasicBuilder) JobId(jobId string) *ApplicationPrehireOfferBasicBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

//
//
// 示例值：test
func (builder *ApplicationPrehireOfferBasicBuilder) Remark(remark string) *ApplicationPrehireOfferBasicBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

//
//
// 示例值：1111233344
func (builder *ApplicationPrehireOfferBasicBuilder) ExpireTime(expireTime int) *ApplicationPrehireOfferBasicBuilder {
	builder.expireTime = expireTime
	builder.expireTimeFlag = true
	return builder
}

//
//
// 示例值：1111233344
func (builder *ApplicationPrehireOfferBasicBuilder) OnboardTime(onboardTime int) *ApplicationPrehireOfferBasicBuilder {
	builder.onboardTime = onboardTime
	builder.onboardTimeFlag = true
	return builder
}

//
//
// 示例值：111
func (builder *ApplicationPrehireOfferBasicBuilder) TimeZone(timeZone string) *ApplicationPrehireOfferBasicBuilder {
	builder.timeZone = timeZone
	builder.timeZoneFlag = true
	return builder
}

// Offer类型 1=Social, 2=Campus, 3=Intern, 4=InternTransfer
//
// 示例值：1
func (builder *ApplicationPrehireOfferBasicBuilder) OfferType(offerType int) *ApplicationPrehireOfferBasicBuilder {
	builder.offerType = offerType
	builder.offerTypeFlag = true
	return builder
}

// Offer状态
//
// 示例值：0
func (builder *ApplicationPrehireOfferBasicBuilder) OfferStatus(offerStatus int) *ApplicationPrehireOfferBasicBuilder {
	builder.offerStatus = offerStatus
	builder.offerStatusFlag = true
	return builder
}

//
//
// 示例值：
func (builder *ApplicationPrehireOfferBasicBuilder) Owner(owner *AppliOfferBasicInfoUser) *ApplicationPrehireOfferBasicBuilder {
	builder.owner = owner
	builder.ownerFlag = true
	return builder
}

//
//
// 示例值：test
func (builder *ApplicationPrehireOfferBasicBuilder) OfferJobTitle(offerJobTitle string) *ApplicationPrehireOfferBasicBuilder {
	builder.offerJobTitle = offerJobTitle
	builder.offerJobTitleFlag = true
	return builder
}

func (builder *ApplicationPrehireOfferBasicBuilder) Build() *ApplicationPrehireOfferBasic {
	req := &ApplicationPrehireOfferBasic{}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	if builder.expireTimeFlag {
		req.ExpireTime = &builder.expireTime

	}
	if builder.onboardTimeFlag {
		req.OnboardTime = &builder.onboardTime

	}
	if builder.timeZoneFlag {
		req.TimeZone = &builder.timeZone

	}
	if builder.offerTypeFlag {
		req.OfferType = &builder.offerType

	}
	if builder.offerStatusFlag {
		req.OfferStatus = &builder.offerStatus

	}
	if builder.ownerFlag {
		req.Owner = builder.owner
	}
	if builder.offerJobTitleFlag {
		req.OfferJobTitle = &builder.offerJobTitle

	}
	return req
}

type ApplicationPrehireOptional struct {
	WithTalentBasic  *bool `json:"with_talent_basic,omitempty"`  // 是否包含基础信息
	WithTalentExtend *bool `json:"with_talent_extend,omitempty"` // 是否包含扩展信息
	WithJob          *bool `json:"with_job,omitempty"`           // 是否包含岗位信息
	WithOffer        *bool `json:"with_offer,omitempty"`         // 是否包含offer信息
}

type ApplicationPrehireOptionalBuilder struct {
	withTalentBasic      bool // 是否包含基础信息
	withTalentBasicFlag  bool
	withTalentExtend     bool // 是否包含扩展信息
	withTalentExtendFlag bool
	withJob              bool // 是否包含岗位信息
	withJobFlag          bool
	withOffer            bool // 是否包含offer信息
	withOfferFlag        bool
}

func NewApplicationPrehireOptionalBuilder() *ApplicationPrehireOptionalBuilder {
	builder := &ApplicationPrehireOptionalBuilder{}
	return builder
}

// 是否包含基础信息
//
// 示例值：
func (builder *ApplicationPrehireOptionalBuilder) WithTalentBasic(withTalentBasic bool) *ApplicationPrehireOptionalBuilder {
	builder.withTalentBasic = withTalentBasic
	builder.withTalentBasicFlag = true
	return builder
}

// 是否包含扩展信息
//
// 示例值：
func (builder *ApplicationPrehireOptionalBuilder) WithTalentExtend(withTalentExtend bool) *ApplicationPrehireOptionalBuilder {
	builder.withTalentExtend = withTalentExtend
	builder.withTalentExtendFlag = true
	return builder
}

// 是否包含岗位信息
//
// 示例值：
func (builder *ApplicationPrehireOptionalBuilder) WithJob(withJob bool) *ApplicationPrehireOptionalBuilder {
	builder.withJob = withJob
	builder.withJobFlag = true
	return builder
}

// 是否包含offer信息
//
// 示例值：
func (builder *ApplicationPrehireOptionalBuilder) WithOffer(withOffer bool) *ApplicationPrehireOptionalBuilder {
	builder.withOffer = withOffer
	builder.withOfferFlag = true
	return builder
}

func (builder *ApplicationPrehireOptionalBuilder) Build() *ApplicationPrehireOptional {
	req := &ApplicationPrehireOptional{}
	if builder.withTalentBasicFlag {
		req.WithTalentBasic = &builder.withTalentBasic

	}
	if builder.withTalentExtendFlag {
		req.WithTalentExtend = &builder.withTalentExtend

	}
	if builder.withJobFlag {
		req.WithJob = &builder.withJob

	}
	if builder.withOfferFlag {
		req.WithOffer = &builder.withOffer

	}
	return req
}

type ApplicationReferral struct {
	Id     *string `json:"id,omitempty"`      // ID
	Name   *string `json:"name,omitempty"`    // 名字
	EnName *string `json:"en_name,omitempty"` // 英文名
}

type ApplicationReferralBuilder struct {
	id         string // ID
	idFlag     bool
	name       string // 名字
	nameFlag   bool
	enName     string // 英文名
	enNameFlag bool
}

func NewApplicationReferralBuilder() *ApplicationReferralBuilder {
	builder := &ApplicationReferralBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationReferralBuilder) Id(id string) *ApplicationReferralBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *ApplicationReferralBuilder) Name(name string) *ApplicationReferralBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *ApplicationReferralBuilder) EnName(enName string) *ApplicationReferralBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *ApplicationReferralBuilder) Build() *ApplicationReferral {
	req := &ApplicationReferral{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type ApplicationResumeSource struct {
	Id               *string `json:"id,omitempty"`                 // 投递来源 ID
	Name             *I18n   `json:"name,omitempty"`               // 投递来源名称
	ResumeSourceType *int    `json:"resume_source_type,omitempty"` // 投递来源类型
}

type ApplicationResumeSourceBuilder struct {
	id                   string // 投递来源 ID
	idFlag               bool
	name                 *I18n // 投递来源名称
	nameFlag             bool
	resumeSourceType     int // 投递来源类型
	resumeSourceTypeFlag bool
}

func NewApplicationResumeSourceBuilder() *ApplicationResumeSourceBuilder {
	builder := &ApplicationResumeSourceBuilder{}
	return builder
}

// 投递来源 ID
//
// 示例值：614218419274131
func (builder *ApplicationResumeSourceBuilder) Id(id string) *ApplicationResumeSourceBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 投递来源名称
//
// 示例值：
func (builder *ApplicationResumeSourceBuilder) Name(name *I18n) *ApplicationResumeSourceBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 投递来源类型
//
// 示例值：10002
func (builder *ApplicationResumeSourceBuilder) ResumeSourceType(resumeSourceType int) *ApplicationResumeSourceBuilder {
	builder.resumeSourceType = resumeSourceType
	builder.resumeSourceTypeFlag = true
	return builder
}

func (builder *ApplicationResumeSourceBuilder) Build() *ApplicationResumeSource {
	req := &ApplicationResumeSource{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.resumeSourceTypeFlag {
		req.ResumeSourceType = &builder.resumeSourceType

	}
	return req
}

type ApplicationStage struct {
	Id            *string `json:"id,omitempty"`              // ID
	Name          *string `json:"name,omitempty"`            // 名字
	EnName        *string `json:"en_name,omitempty"`         // 英文名
	Type          *int    `json:"type,omitempty"`            // 类型
	Args          *string `json:"args,omitempty"`            // 参数
	CreatorId     *string `json:"creator_id,omitempty"`      // 创建者ID
	Seq           *int    `json:"seq,omitempty"`             // 序列
	PublishName   *string `json:"publish_name,omitempty"`    // 发布名称
	PublishEnName *string `json:"publish_en_name,omitempty"` // 发布英文名
}

type ApplicationStageBuilder struct {
	id                string // ID
	idFlag            bool
	name              string // 名字
	nameFlag          bool
	enName            string // 英文名
	enNameFlag        bool
	type_             int // 类型
	typeFlag          bool
	args              string // 参数
	argsFlag          bool
	creatorId         string // 创建者ID
	creatorIdFlag     bool
	seq               int // 序列
	seqFlag           bool
	publishName       string // 发布名称
	publishNameFlag   bool
	publishEnName     string // 发布英文名
	publishEnNameFlag bool
}

func NewApplicationStageBuilder() *ApplicationStageBuilder {
	builder := &ApplicationStageBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationStageBuilder) Id(id string) *ApplicationStageBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *ApplicationStageBuilder) Name(name string) *ApplicationStageBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *ApplicationStageBuilder) EnName(enName string) *ApplicationStageBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 类型
//
// 示例值：
func (builder *ApplicationStageBuilder) Type(type_ int) *ApplicationStageBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 参数
//
// 示例值：
func (builder *ApplicationStageBuilder) Args(args string) *ApplicationStageBuilder {
	builder.args = args
	builder.argsFlag = true
	return builder
}

// 创建者ID
//
// 示例值：
func (builder *ApplicationStageBuilder) CreatorId(creatorId string) *ApplicationStageBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}

// 序列
//
// 示例值：
func (builder *ApplicationStageBuilder) Seq(seq int) *ApplicationStageBuilder {
	builder.seq = seq
	builder.seqFlag = true
	return builder
}

// 发布名称
//
// 示例值：
func (builder *ApplicationStageBuilder) PublishName(publishName string) *ApplicationStageBuilder {
	builder.publishName = publishName
	builder.publishNameFlag = true
	return builder
}

// 发布英文名
//
// 示例值：
func (builder *ApplicationStageBuilder) PublishEnName(publishEnName string) *ApplicationStageBuilder {
	builder.publishEnName = publishEnName
	builder.publishEnNameFlag = true
	return builder
}

func (builder *ApplicationStageBuilder) Build() *ApplicationStage {
	req := &ApplicationStage{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.argsFlag {
		req.Args = &builder.args

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.seqFlag {
		req.Seq = &builder.seq

	}
	if builder.publishNameFlag {
		req.PublishName = &builder.publishName

	}
	if builder.publishEnNameFlag {
		req.PublishEnName = &builder.publishEnName

	}
	return req
}

type ApplicationStageInfo struct {
	Id     *string `json:"id,omitempty"`      // 阶段 ID
	ZhName *string `json:"zh_name,omitempty"` // 阶段中文名字
	EnName *string `json:"en_name,omitempty"` // 英文名
	Type   *int    `json:"type,omitempty"`    // 阶段类型
}

type ApplicationStageInfoBuilder struct {
	id         string // 阶段 ID
	idFlag     bool
	zhName     string // 阶段中文名字
	zhNameFlag bool
	enName     string // 英文名
	enNameFlag bool
	type_      int // 阶段类型
	typeFlag   bool
}

func NewApplicationStageInfoBuilder() *ApplicationStageInfoBuilder {
	builder := &ApplicationStageInfoBuilder{}
	return builder
}

// 阶段 ID
//
// 示例值：614218419274131
func (builder *ApplicationStageInfoBuilder) Id(id string) *ApplicationStageInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 阶段中文名字
//
// 示例值：面试
func (builder *ApplicationStageInfoBuilder) ZhName(zhName string) *ApplicationStageInfoBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名
//
// 示例值：Interview
func (builder *ApplicationStageInfoBuilder) EnName(enName string) *ApplicationStageInfoBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 阶段类型
//
// 示例值：1
func (builder *ApplicationStageInfoBuilder) Type(type_ int) *ApplicationStageInfoBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

func (builder *ApplicationStageInfoBuilder) Build() *ApplicationStageInfo {
	req := &ApplicationStageInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	return req
}

type ApplicationStageTime struct {
	StageId   *string `json:"stage_id,omitempty"`   // 阶段 ID
	EnterTime *string `json:"enter_time,omitempty"` // 最近一次进入该阶段的时间
	ExitTime  *string `json:"exit_time,omitempty"`  // 最后一次离开时间，如当前在该阶段，则为空
}

type ApplicationStageTimeBuilder struct {
	stageId       string // 阶段 ID
	stageIdFlag   bool
	enterTime     string // 最近一次进入该阶段的时间
	enterTimeFlag bool
	exitTime      string // 最后一次离开时间，如当前在该阶段，则为空
	exitTimeFlag  bool
}

func NewApplicationStageTimeBuilder() *ApplicationStageTimeBuilder {
	builder := &ApplicationStageTimeBuilder{}
	return builder
}

// 阶段 ID
//
// 示例值：614218419274131
func (builder *ApplicationStageTimeBuilder) StageId(stageId string) *ApplicationStageTimeBuilder {
	builder.stageId = stageId
	builder.stageIdFlag = true
	return builder
}

// 最近一次进入该阶段的时间
//
// 示例值：1632991542615
func (builder *ApplicationStageTimeBuilder) EnterTime(enterTime string) *ApplicationStageTimeBuilder {
	builder.enterTime = enterTime
	builder.enterTimeFlag = true
	return builder
}

// 最后一次离开时间，如当前在该阶段，则为空
//
// 示例值：1631509574398
func (builder *ApplicationStageTimeBuilder) ExitTime(exitTime string) *ApplicationStageTimeBuilder {
	builder.exitTime = exitTime
	builder.exitTimeFlag = true
	return builder
}

func (builder *ApplicationStageTimeBuilder) Build() *ApplicationStageTime {
	req := &ApplicationStageTime{}
	if builder.stageIdFlag {
		req.StageId = &builder.stageId

	}
	if builder.enterTimeFlag {
		req.EnterTime = &builder.enterTime

	}
	if builder.exitTimeFlag {
		req.ExitTime = &builder.exitTime

	}
	return req
}

type ApplicationTalent struct {
	Id                   *string                          `json:"id,omitempty"`                     // ID
	BasicInfo            *ApplicationTalentBasicInfo      `json:"basic_info,omitempty"`             // 基础信息
	SelfEvaluation       *string                          `json:"self_evaluation,omitempty"`        // 自我评价
	EducationList        []*AppliTalentEducationInfo      `json:"education_list,omitempty"`         // 教育经历
	CareerList           []*ApplicationTalentCareerInfo   `json:"career_list,omitempty"`            // 工作经历
	ProjectList          []*ApplicationTalentProjectInfo  `json:"project_list,omitempty"`           // 项目经历
	WorksList            []*ApplicationTalentWorksInfo    `json:"works_list,omitempty"`             // 作品集
	AwardList            []*ApplicationTalentAwardInfo    `json:"award_list,omitempty"`             // 获奖列表
	CompetitionList      []*AppliTalentCompetitionInfo    `json:"competition_list,omitempty"`       // 竞赛列表
	CertificateList      []*AppliTalentCertificateInfo    `json:"certificate_list,omitempty"`       // 证书列表
	LanguageList         []*ApplicationTalentLanguageInfo `json:"language_list,omitempty"`          // 语言列表
	SnsList              []*ApplicationTalentSnsInfo      `json:"sns_list,omitempty"`               // SNS列表
	AttachmentResumeList []*AppliTalentAttachResumeInfo   `json:"attachment_resume_list,omitempty"` // 附件简历列表
}

type ApplicationTalentBuilder struct {
	id                       string // ID
	idFlag                   bool
	basicInfo                *ApplicationTalentBasicInfo // 基础信息
	basicInfoFlag            bool
	selfEvaluation           string // 自我评价
	selfEvaluationFlag       bool
	educationList            []*AppliTalentEducationInfo // 教育经历
	educationListFlag        bool
	careerList               []*ApplicationTalentCareerInfo // 工作经历
	careerListFlag           bool
	projectList              []*ApplicationTalentProjectInfo // 项目经历
	projectListFlag          bool
	worksList                []*ApplicationTalentWorksInfo // 作品集
	worksListFlag            bool
	awardList                []*ApplicationTalentAwardInfo // 获奖列表
	awardListFlag            bool
	competitionList          []*AppliTalentCompetitionInfo // 竞赛列表
	competitionListFlag      bool
	certificateList          []*AppliTalentCertificateInfo // 证书列表
	certificateListFlag      bool
	languageList             []*ApplicationTalentLanguageInfo // 语言列表
	languageListFlag         bool
	snsList                  []*ApplicationTalentSnsInfo // SNS列表
	snsListFlag              bool
	attachmentResumeList     []*AppliTalentAttachResumeInfo // 附件简历列表
	attachmentResumeListFlag bool
}

func NewApplicationTalentBuilder() *ApplicationTalentBuilder {
	builder := &ApplicationTalentBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationTalentBuilder) Id(id string) *ApplicationTalentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 基础信息
//
// 示例值：
func (builder *ApplicationTalentBuilder) BasicInfo(basicInfo *ApplicationTalentBasicInfo) *ApplicationTalentBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}

// 自我评价
//
// 示例值：
func (builder *ApplicationTalentBuilder) SelfEvaluation(selfEvaluation string) *ApplicationTalentBuilder {
	builder.selfEvaluation = selfEvaluation
	builder.selfEvaluationFlag = true
	return builder
}

// 教育经历
//
// 示例值：
func (builder *ApplicationTalentBuilder) EducationList(educationList []*AppliTalentEducationInfo) *ApplicationTalentBuilder {
	builder.educationList = educationList
	builder.educationListFlag = true
	return builder
}

// 工作经历
//
// 示例值：
func (builder *ApplicationTalentBuilder) CareerList(careerList []*ApplicationTalentCareerInfo) *ApplicationTalentBuilder {
	builder.careerList = careerList
	builder.careerListFlag = true
	return builder
}

// 项目经历
//
// 示例值：
func (builder *ApplicationTalentBuilder) ProjectList(projectList []*ApplicationTalentProjectInfo) *ApplicationTalentBuilder {
	builder.projectList = projectList
	builder.projectListFlag = true
	return builder
}

// 作品集
//
// 示例值：
func (builder *ApplicationTalentBuilder) WorksList(worksList []*ApplicationTalentWorksInfo) *ApplicationTalentBuilder {
	builder.worksList = worksList
	builder.worksListFlag = true
	return builder
}

// 获奖列表
//
// 示例值：
func (builder *ApplicationTalentBuilder) AwardList(awardList []*ApplicationTalentAwardInfo) *ApplicationTalentBuilder {
	builder.awardList = awardList
	builder.awardListFlag = true
	return builder
}

// 竞赛列表
//
// 示例值：
func (builder *ApplicationTalentBuilder) CompetitionList(competitionList []*AppliTalentCompetitionInfo) *ApplicationTalentBuilder {
	builder.competitionList = competitionList
	builder.competitionListFlag = true
	return builder
}

// 证书列表
//
// 示例值：
func (builder *ApplicationTalentBuilder) CertificateList(certificateList []*AppliTalentCertificateInfo) *ApplicationTalentBuilder {
	builder.certificateList = certificateList
	builder.certificateListFlag = true
	return builder
}

// 语言列表
//
// 示例值：
func (builder *ApplicationTalentBuilder) LanguageList(languageList []*ApplicationTalentLanguageInfo) *ApplicationTalentBuilder {
	builder.languageList = languageList
	builder.languageListFlag = true
	return builder
}

// SNS列表
//
// 示例值：
func (builder *ApplicationTalentBuilder) SnsList(snsList []*ApplicationTalentSnsInfo) *ApplicationTalentBuilder {
	builder.snsList = snsList
	builder.snsListFlag = true
	return builder
}

// 附件简历列表
//
// 示例值：
func (builder *ApplicationTalentBuilder) AttachmentResumeList(attachmentResumeList []*AppliTalentAttachResumeInfo) *ApplicationTalentBuilder {
	builder.attachmentResumeList = attachmentResumeList
	builder.attachmentResumeListFlag = true
	return builder
}

func (builder *ApplicationTalentBuilder) Build() *ApplicationTalent {
	req := &ApplicationTalent{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.selfEvaluationFlag {
		req.SelfEvaluation = &builder.selfEvaluation

	}
	if builder.educationListFlag {
		req.EducationList = builder.educationList
	}
	if builder.careerListFlag {
		req.CareerList = builder.careerList
	}
	if builder.projectListFlag {
		req.ProjectList = builder.projectList
	}
	if builder.worksListFlag {
		req.WorksList = builder.worksList
	}
	if builder.awardListFlag {
		req.AwardList = builder.awardList
	}
	if builder.competitionListFlag {
		req.CompetitionList = builder.competitionList
	}
	if builder.certificateListFlag {
		req.CertificateList = builder.certificateList
	}
	if builder.languageListFlag {
		req.LanguageList = builder.languageList
	}
	if builder.snsListFlag {
		req.SnsList = builder.snsList
	}
	if builder.attachmentResumeListFlag {
		req.AttachmentResumeList = builder.attachmentResumeList
	}
	return req
}

type ApplicationTalentAttachmentResumeInfo struct {
	Id   *string `json:"id,omitempty"`   // ID
	Name *string `json:"name,omitempty"` // 名字
}

type ApplicationTalentAttachmentResumeInfoBuilder struct {
	id       string // ID
	idFlag   bool
	name     string // 名字
	nameFlag bool
}

func NewApplicationTalentAttachmentResumeInfoBuilder() *ApplicationTalentAttachmentResumeInfoBuilder {
	builder := &ApplicationTalentAttachmentResumeInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationTalentAttachmentResumeInfoBuilder) Id(id string) *ApplicationTalentAttachmentResumeInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *ApplicationTalentAttachmentResumeInfoBuilder) Name(name string) *ApplicationTalentAttachmentResumeInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *ApplicationTalentAttachmentResumeInfoBuilder) Build() *ApplicationTalentAttachmentResumeInfo {
	req := &ApplicationTalentAttachmentResumeInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

type ApplicationTalentAwardInfo struct {
	Id        *string `json:"id,omitempty"`         // ID
	Title     *string `json:"title,omitempty"`      // 名称
	AwardTime *int    `json:"award_time,omitempty"` // 获奖时间
	Desc      *string `json:"desc,omitempty"`       // 描述
}

type ApplicationTalentAwardInfoBuilder struct {
	id            string // ID
	idFlag        bool
	title         string // 名称
	titleFlag     bool
	awardTime     int // 获奖时间
	awardTimeFlag bool
	desc          string // 描述
	descFlag      bool
}

func NewApplicationTalentAwardInfoBuilder() *ApplicationTalentAwardInfoBuilder {
	builder := &ApplicationTalentAwardInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationTalentAwardInfoBuilder) Id(id string) *ApplicationTalentAwardInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *ApplicationTalentAwardInfoBuilder) Title(title string) *ApplicationTalentAwardInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 获奖时间
//
// 示例值：
func (builder *ApplicationTalentAwardInfoBuilder) AwardTime(awardTime int) *ApplicationTalentAwardInfoBuilder {
	builder.awardTime = awardTime
	builder.awardTimeFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *ApplicationTalentAwardInfoBuilder) Desc(desc string) *ApplicationTalentAwardInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

func (builder *ApplicationTalentAwardInfoBuilder) Build() *ApplicationTalentAwardInfo {
	req := &ApplicationTalentAwardInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.awardTimeFlag {
		req.AwardTime = &builder.awardTime

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	return req
}

type ApplicationTalentBasicInfo struct {
	Name                 *string      `json:"name,omitempty"`                  // 名字
	Mobile               *string      `json:"mobile,omitempty"`                // 手机
	MobileCountryCode    *string      `json:"mobile_country_code,omitempty"`   // 手机国家代码
	Email                *string      `json:"email,omitempty"`                 // 邮箱
	ExperienceYears      *int         `json:"experience_years,omitempty"`      // 工作年限
	Age                  *int         `json:"age,omitempty"`                   // 年龄
	Nationality          *Nationality `json:"nationality,omitempty"`           // 国籍
	Gender               *int         `json:"gender,omitempty"`                // 性别
	CurrentCity          *City        `json:"current_city,omitempty"`          // 现居住城市
	HometownCity         *City        `json:"hometown_city,omitempty"`         // 家乡所在城市
	PreferredCityList    []*City      `json:"preferred_city_list,omitempty"`   // 首选城市
	MobileCode           *string      `json:"mobile_code,omitempty"`           // 手机国家代码
	IdentificationType   *int         `json:"identification_type,omitempty"`   // 证件类型
	IdentificationNumber *string      `json:"identification_number,omitempty"` // 证件号码
}

type ApplicationTalentBasicInfoBuilder struct {
	name                     string // 名字
	nameFlag                 bool
	mobile                   string // 手机
	mobileFlag               bool
	mobileCountryCode        string // 手机国家代码
	mobileCountryCodeFlag    bool
	email                    string // 邮箱
	emailFlag                bool
	experienceYears          int // 工作年限
	experienceYearsFlag      bool
	age                      int // 年龄
	ageFlag                  bool
	nationality              *Nationality // 国籍
	nationalityFlag          bool
	gender                   int // 性别
	genderFlag               bool
	currentCity              *City // 现居住城市
	currentCityFlag          bool
	hometownCity             *City // 家乡所在城市
	hometownCityFlag         bool
	preferredCityList        []*City // 首选城市
	preferredCityListFlag    bool
	mobileCode               string // 手机国家代码
	mobileCodeFlag           bool
	identificationType       int // 证件类型
	identificationTypeFlag   bool
	identificationNumber     string // 证件号码
	identificationNumberFlag bool
}

func NewApplicationTalentBasicInfoBuilder() *ApplicationTalentBasicInfoBuilder {
	builder := &ApplicationTalentBasicInfoBuilder{}
	return builder
}

// 名字
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) Name(name string) *ApplicationTalentBasicInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 手机
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) Mobile(mobile string) *ApplicationTalentBasicInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}

// 手机国家代码
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) MobileCountryCode(mobileCountryCode string) *ApplicationTalentBasicInfoBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}

// 邮箱
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) Email(email string) *ApplicationTalentBasicInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 工作年限
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) ExperienceYears(experienceYears int) *ApplicationTalentBasicInfoBuilder {
	builder.experienceYears = experienceYears
	builder.experienceYearsFlag = true
	return builder
}

// 年龄
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) Age(age int) *ApplicationTalentBasicInfoBuilder {
	builder.age = age
	builder.ageFlag = true
	return builder
}

// 国籍
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) Nationality(nationality *Nationality) *ApplicationTalentBasicInfoBuilder {
	builder.nationality = nationality
	builder.nationalityFlag = true
	return builder
}

// 性别
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) Gender(gender int) *ApplicationTalentBasicInfoBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}

// 现居住城市
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) CurrentCity(currentCity *City) *ApplicationTalentBasicInfoBuilder {
	builder.currentCity = currentCity
	builder.currentCityFlag = true
	return builder
}

// 家乡所在城市
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) HometownCity(hometownCity *City) *ApplicationTalentBasicInfoBuilder {
	builder.hometownCity = hometownCity
	builder.hometownCityFlag = true
	return builder
}

// 首选城市
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) PreferredCityList(preferredCityList []*City) *ApplicationTalentBasicInfoBuilder {
	builder.preferredCityList = preferredCityList
	builder.preferredCityListFlag = true
	return builder
}

// 手机国家代码
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) MobileCode(mobileCode string) *ApplicationTalentBasicInfoBuilder {
	builder.mobileCode = mobileCode
	builder.mobileCodeFlag = true
	return builder
}

// 证件类型
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) IdentificationType(identificationType int) *ApplicationTalentBasicInfoBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

// 证件号码
//
// 示例值：
func (builder *ApplicationTalentBasicInfoBuilder) IdentificationNumber(identificationNumber string) *ApplicationTalentBasicInfoBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}

func (builder *ApplicationTalentBasicInfoBuilder) Build() *ApplicationTalentBasicInfo {
	req := &ApplicationTalentBasicInfo{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.experienceYearsFlag {
		req.ExperienceYears = &builder.experienceYears

	}
	if builder.ageFlag {
		req.Age = &builder.age

	}
	if builder.nationalityFlag {
		req.Nationality = builder.nationality
	}
	if builder.genderFlag {
		req.Gender = &builder.gender

	}
	if builder.currentCityFlag {
		req.CurrentCity = builder.currentCity
	}
	if builder.hometownCityFlag {
		req.HometownCity = builder.hometownCity
	}
	if builder.preferredCityListFlag {
		req.PreferredCityList = builder.preferredCityList
	}
	if builder.mobileCodeFlag {
		req.MobileCode = &builder.mobileCode

	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	return req
}

type ApplicationTalentCareerInfo struct {
	Id        *string `json:"id,omitempty"`         // ID
	Company   *string `json:"company,omitempty"`    // 公司
	Title     *string `json:"title,omitempty"`      // 职称
	Desc      *string `json:"desc,omitempty"`       // 描述
	StartTime *string `json:"start_time,omitempty"` // 开始时间
	EndTime   *string `json:"end_time,omitempty"`   // 结束时间
	TagList   []int   `json:"tag_list,omitempty"`   // 标签列表
}

type ApplicationTalentCareerInfoBuilder struct {
	id            string // ID
	idFlag        bool
	company       string // 公司
	companyFlag   bool
	title         string // 职称
	titleFlag     bool
	desc          string // 描述
	descFlag      bool
	startTime     string // 开始时间
	startTimeFlag bool
	endTime       string // 结束时间
	endTimeFlag   bool
	tagList       []int // 标签列表
	tagListFlag   bool
}

func NewApplicationTalentCareerInfoBuilder() *ApplicationTalentCareerInfoBuilder {
	builder := &ApplicationTalentCareerInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationTalentCareerInfoBuilder) Id(id string) *ApplicationTalentCareerInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 公司
//
// 示例值：
func (builder *ApplicationTalentCareerInfoBuilder) Company(company string) *ApplicationTalentCareerInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}

// 职称
//
// 示例值：
func (builder *ApplicationTalentCareerInfoBuilder) Title(title string) *ApplicationTalentCareerInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *ApplicationTalentCareerInfoBuilder) Desc(desc string) *ApplicationTalentCareerInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 开始时间
//
// 示例值：
func (builder *ApplicationTalentCareerInfoBuilder) StartTime(startTime string) *ApplicationTalentCareerInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：
func (builder *ApplicationTalentCareerInfoBuilder) EndTime(endTime string) *ApplicationTalentCareerInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 标签列表
//
// 示例值：
func (builder *ApplicationTalentCareerInfoBuilder) TagList(tagList []int) *ApplicationTalentCareerInfoBuilder {
	builder.tagList = tagList
	builder.tagListFlag = true
	return builder
}

func (builder *ApplicationTalentCareerInfoBuilder) Build() *ApplicationTalentCareerInfo {
	req := &ApplicationTalentCareerInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.tagListFlag {
		req.TagList = builder.tagList
	}
	return req
}

type ApplicationTalentCertificateInfo struct {
	Id   *string `json:"id,omitempty"`   // ID
	Name *string `json:"name,omitempty"` // 证件名称
	Desc *string `json:"desc,omitempty"` // 证件描述
}

type ApplicationTalentCertificateInfoBuilder struct {
	id       string // ID
	idFlag   bool
	name     string // 证件名称
	nameFlag bool
	desc     string // 证件描述
	descFlag bool
}

func NewApplicationTalentCertificateInfoBuilder() *ApplicationTalentCertificateInfoBuilder {
	builder := &ApplicationTalentCertificateInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationTalentCertificateInfoBuilder) Id(id string) *ApplicationTalentCertificateInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 证件名称
//
// 示例值：
func (builder *ApplicationTalentCertificateInfoBuilder) Name(name string) *ApplicationTalentCertificateInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 证件描述
//
// 示例值：
func (builder *ApplicationTalentCertificateInfoBuilder) Desc(desc string) *ApplicationTalentCertificateInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

func (builder *ApplicationTalentCertificateInfoBuilder) Build() *ApplicationTalentCertificateInfo {
	req := &ApplicationTalentCertificateInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	return req
}

type ApplicationTalentCompetitionInfo struct {
	Id   *string `json:"id,omitempty"`   // ID
	Name *string `json:"name,omitempty"` // 竞赛名称
	Desc *string `json:"desc,omitempty"` // 竞赛描述
}

type ApplicationTalentCompetitionInfoBuilder struct {
	id       string // ID
	idFlag   bool
	name     string // 竞赛名称
	nameFlag bool
	desc     string // 竞赛描述
	descFlag bool
}

func NewApplicationTalentCompetitionInfoBuilder() *ApplicationTalentCompetitionInfoBuilder {
	builder := &ApplicationTalentCompetitionInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationTalentCompetitionInfoBuilder) Id(id string) *ApplicationTalentCompetitionInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 竞赛名称
//
// 示例值：
func (builder *ApplicationTalentCompetitionInfoBuilder) Name(name string) *ApplicationTalentCompetitionInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 竞赛描述
//
// 示例值：
func (builder *ApplicationTalentCompetitionInfoBuilder) Desc(desc string) *ApplicationTalentCompetitionInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

func (builder *ApplicationTalentCompetitionInfoBuilder) Build() *ApplicationTalentCompetitionInfo {
	req := &ApplicationTalentCompetitionInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	return req
}

type ApplicationTalentEducationInfo struct {
	Id              *string `json:"id,omitempty"`               // ID
	Degree          *int    `json:"degree,omitempty"`           // 学历
	School          *string `json:"school,omitempty"`           // 学校
	FieldOfStudy    *string `json:"field_of_study,omitempty"`   // 专业
	StartTime       *string `json:"start_time,omitempty"`       // 开始时间
	EndTime         *string `json:"end_time,omitempty"`         // 结束时间
	EducationType   *int    `json:"education_type,omitempty"`   // 学历类型
	AcademicRanking *int    `json:"academic_ranking,omitempty"` // 排名
	TagList         []int   `json:"tag_list,omitempty"`         // 标签列表
}

type ApplicationTalentEducationInfoBuilder struct {
	id                  string // ID
	idFlag              bool
	degree              int // 学历
	degreeFlag          bool
	school              string // 学校
	schoolFlag          bool
	fieldOfStudy        string // 专业
	fieldOfStudyFlag    bool
	startTime           string // 开始时间
	startTimeFlag       bool
	endTime             string // 结束时间
	endTimeFlag         bool
	educationType       int // 学历类型
	educationTypeFlag   bool
	academicRanking     int // 排名
	academicRankingFlag bool
	tagList             []int // 标签列表
	tagListFlag         bool
}

func NewApplicationTalentEducationInfoBuilder() *ApplicationTalentEducationInfoBuilder {
	builder := &ApplicationTalentEducationInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationTalentEducationInfoBuilder) Id(id string) *ApplicationTalentEducationInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 学历
//
// 示例值：
func (builder *ApplicationTalentEducationInfoBuilder) Degree(degree int) *ApplicationTalentEducationInfoBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}

// 学校
//
// 示例值：
func (builder *ApplicationTalentEducationInfoBuilder) School(school string) *ApplicationTalentEducationInfoBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}

// 专业
//
// 示例值：
func (builder *ApplicationTalentEducationInfoBuilder) FieldOfStudy(fieldOfStudy string) *ApplicationTalentEducationInfoBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}

// 开始时间
//
// 示例值：
func (builder *ApplicationTalentEducationInfoBuilder) StartTime(startTime string) *ApplicationTalentEducationInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：
func (builder *ApplicationTalentEducationInfoBuilder) EndTime(endTime string) *ApplicationTalentEducationInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 学历类型
//
// 示例值：
func (builder *ApplicationTalentEducationInfoBuilder) EducationType(educationType int) *ApplicationTalentEducationInfoBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}

// 排名
//
// 示例值：
func (builder *ApplicationTalentEducationInfoBuilder) AcademicRanking(academicRanking int) *ApplicationTalentEducationInfoBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}

// 标签列表
//
// 示例值：
func (builder *ApplicationTalentEducationInfoBuilder) TagList(tagList []int) *ApplicationTalentEducationInfoBuilder {
	builder.tagList = tagList
	builder.tagListFlag = true
	return builder
}

func (builder *ApplicationTalentEducationInfoBuilder) Build() *ApplicationTalentEducationInfo {
	req := &ApplicationTalentEducationInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	if builder.tagListFlag {
		req.TagList = builder.tagList
	}
	return req
}

type ApplicationTalentLanguageInfo struct {
	Id          *string `json:"id,omitempty"`          // ID
	Language    *int    `json:"language,omitempty"`    // 语言
	Proficiency *int    `json:"proficiency,omitempty"` // 熟练程度
}

type ApplicationTalentLanguageInfoBuilder struct {
	id              string // ID
	idFlag          bool
	language        int // 语言
	languageFlag    bool
	proficiency     int // 熟练程度
	proficiencyFlag bool
}

func NewApplicationTalentLanguageInfoBuilder() *ApplicationTalentLanguageInfoBuilder {
	builder := &ApplicationTalentLanguageInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationTalentLanguageInfoBuilder) Id(id string) *ApplicationTalentLanguageInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 语言
//
// 示例值：
func (builder *ApplicationTalentLanguageInfoBuilder) Language(language int) *ApplicationTalentLanguageInfoBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}

// 熟练程度
//
// 示例值：
func (builder *ApplicationTalentLanguageInfoBuilder) Proficiency(proficiency int) *ApplicationTalentLanguageInfoBuilder {
	builder.proficiency = proficiency
	builder.proficiencyFlag = true
	return builder
}

func (builder *ApplicationTalentLanguageInfoBuilder) Build() *ApplicationTalentLanguageInfo {
	req := &ApplicationTalentLanguageInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	if builder.proficiencyFlag {
		req.Proficiency = &builder.proficiency

	}
	return req
}

type ApplicationTalentProjectInfo struct {
	Id        *string `json:"id,omitempty"`         // ID
	Name      *string `json:"name,omitempty"`       // 名字
	Role      *string `json:"role,omitempty"`       // 角色
	Link      *string `json:"link,omitempty"`       // 链接
	Desc      *string `json:"desc,omitempty"`       // 描述
	StartTime *int    `json:"start_time,omitempty"` // 开始时间
	EndTime   *int    `json:"end_time,omitempty"`   // 结束时间
}

type ApplicationTalentProjectInfoBuilder struct {
	id            string // ID
	idFlag        bool
	name          string // 名字
	nameFlag      bool
	role          string // 角色
	roleFlag      bool
	link          string // 链接
	linkFlag      bool
	desc          string // 描述
	descFlag      bool
	startTime     int // 开始时间
	startTimeFlag bool
	endTime       int // 结束时间
	endTimeFlag   bool
}

func NewApplicationTalentProjectInfoBuilder() *ApplicationTalentProjectInfoBuilder {
	builder := &ApplicationTalentProjectInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationTalentProjectInfoBuilder) Id(id string) *ApplicationTalentProjectInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *ApplicationTalentProjectInfoBuilder) Name(name string) *ApplicationTalentProjectInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 角色
//
// 示例值：
func (builder *ApplicationTalentProjectInfoBuilder) Role(role string) *ApplicationTalentProjectInfoBuilder {
	builder.role = role
	builder.roleFlag = true
	return builder
}

// 链接
//
// 示例值：
func (builder *ApplicationTalentProjectInfoBuilder) Link(link string) *ApplicationTalentProjectInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *ApplicationTalentProjectInfoBuilder) Desc(desc string) *ApplicationTalentProjectInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 开始时间
//
// 示例值：
func (builder *ApplicationTalentProjectInfoBuilder) StartTime(startTime int) *ApplicationTalentProjectInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：
func (builder *ApplicationTalentProjectInfoBuilder) EndTime(endTime int) *ApplicationTalentProjectInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *ApplicationTalentProjectInfoBuilder) Build() *ApplicationTalentProjectInfo {
	req := &ApplicationTalentProjectInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.roleFlag {
		req.Role = &builder.role

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

type ApplicationTalentSnsInfo struct {
	Id      *string `json:"id,omitempty"`       // ID
	SnsType *int    `json:"sns_type,omitempty"` // SNS类型
	Link    *string `json:"link,omitempty"`     // SNS链接
}

type ApplicationTalentSnsInfoBuilder struct {
	id          string // ID
	idFlag      bool
	snsType     int // SNS类型
	snsTypeFlag bool
	link        string // SNS链接
	linkFlag    bool
}

func NewApplicationTalentSnsInfoBuilder() *ApplicationTalentSnsInfoBuilder {
	builder := &ApplicationTalentSnsInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationTalentSnsInfoBuilder) Id(id string) *ApplicationTalentSnsInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// SNS类型
//
// 示例值：
func (builder *ApplicationTalentSnsInfoBuilder) SnsType(snsType int) *ApplicationTalentSnsInfoBuilder {
	builder.snsType = snsType
	builder.snsTypeFlag = true
	return builder
}

// SNS链接
//
// 示例值：
func (builder *ApplicationTalentSnsInfoBuilder) Link(link string) *ApplicationTalentSnsInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

func (builder *ApplicationTalentSnsInfoBuilder) Build() *ApplicationTalentSnsInfo {
	req := &ApplicationTalentSnsInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.snsTypeFlag {
		req.SnsType = &builder.snsType

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	return req
}

type ApplicationTalentWorksInfo struct {
	Id   *string `json:"id,omitempty"`   // ID
	Link *string `json:"link,omitempty"` // 作品集链接
	Desc *string `json:"desc,omitempty"` // 作品描述
	Name *string `json:"name,omitempty"` // 作品名称
}

type ApplicationTalentWorksInfoBuilder struct {
	id       string // ID
	idFlag   bool
	link     string // 作品集链接
	linkFlag bool
	desc     string // 作品描述
	descFlag bool
	name     string // 作品名称
	nameFlag bool
}

func NewApplicationTalentWorksInfoBuilder() *ApplicationTalentWorksInfoBuilder {
	builder := &ApplicationTalentWorksInfoBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *ApplicationTalentWorksInfoBuilder) Id(id string) *ApplicationTalentWorksInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 作品集链接
//
// 示例值：
func (builder *ApplicationTalentWorksInfoBuilder) Link(link string) *ApplicationTalentWorksInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 作品描述
//
// 示例值：
func (builder *ApplicationTalentWorksInfoBuilder) Desc(desc string) *ApplicationTalentWorksInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 作品名称
//
// 示例值：
func (builder *ApplicationTalentWorksInfoBuilder) Name(name string) *ApplicationTalentWorksInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *ApplicationTalentWorksInfoBuilder) Build() *ApplicationTalentWorksInfo {
	req := &ApplicationTalentWorksInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

type ApplicationWebsiteChannel struct {
	ChannelId   *string `json:"channel_id,omitempty"`   // 官网推广渠道 ID
	ChannelName *I18n   `json:"channel_name,omitempty"` // 官网推广渠道名称
}

type ApplicationWebsiteChannelBuilder struct {
	channelId       string // 官网推广渠道 ID
	channelIdFlag   bool
	channelName     *I18n // 官网推广渠道名称
	channelNameFlag bool
}

func NewApplicationWebsiteChannelBuilder() *ApplicationWebsiteChannelBuilder {
	builder := &ApplicationWebsiteChannelBuilder{}
	return builder
}

// 官网推广渠道 ID
//
// 示例值：777218419274131
func (builder *ApplicationWebsiteChannelBuilder) ChannelId(channelId string) *ApplicationWebsiteChannelBuilder {
	builder.channelId = channelId
	builder.channelIdFlag = true
	return builder
}

// 官网推广渠道名称
//
// 示例值：
func (builder *ApplicationWebsiteChannelBuilder) ChannelName(channelName *I18n) *ApplicationWebsiteChannelBuilder {
	builder.channelName = channelName
	builder.channelNameFlag = true
	return builder
}

func (builder *ApplicationWebsiteChannelBuilder) Build() *ApplicationWebsiteChannel {
	req := &ApplicationWebsiteChannel{}
	if builder.channelIdFlag {
		req.ChannelId = &builder.channelId

	}
	if builder.channelNameFlag {
		req.ChannelName = builder.channelName
	}
	return req
}

type ApplicationWebsiteResumeSource struct {
	WebsiteId   *string                    `json:"website_id,omitempty"`   // 官网站点 ID
	WebsiteName *I18n                      `json:"website_name,omitempty"` // 官网站点名称
	Channel     *ApplicationWebsiteChannel `json:"channel,omitempty"`      // 推广渠道来源
}

type ApplicationWebsiteResumeSourceBuilder struct {
	websiteId       string // 官网站点 ID
	websiteIdFlag   bool
	websiteName     *I18n // 官网站点名称
	websiteNameFlag bool
	channel         *ApplicationWebsiteChannel // 推广渠道来源
	channelFlag     bool
}

func NewApplicationWebsiteResumeSourceBuilder() *ApplicationWebsiteResumeSourceBuilder {
	builder := &ApplicationWebsiteResumeSourceBuilder{}
	return builder
}

// 官网站点 ID
//
// 示例值：614218419274131
func (builder *ApplicationWebsiteResumeSourceBuilder) WebsiteId(websiteId string) *ApplicationWebsiteResumeSourceBuilder {
	builder.websiteId = websiteId
	builder.websiteIdFlag = true
	return builder
}

// 官网站点名称
//
// 示例值：
func (builder *ApplicationWebsiteResumeSourceBuilder) WebsiteName(websiteName *I18n) *ApplicationWebsiteResumeSourceBuilder {
	builder.websiteName = websiteName
	builder.websiteNameFlag = true
	return builder
}

// 推广渠道来源
//
// 示例值：
func (builder *ApplicationWebsiteResumeSourceBuilder) Channel(channel *ApplicationWebsiteChannel) *ApplicationWebsiteResumeSourceBuilder {
	builder.channel = channel
	builder.channelFlag = true
	return builder
}

func (builder *ApplicationWebsiteResumeSourceBuilder) Build() *ApplicationWebsiteResumeSource {
	req := &ApplicationWebsiteResumeSource{}
	if builder.websiteIdFlag {
		req.WebsiteId = &builder.websiteId

	}
	if builder.websiteNameFlag {
		req.WebsiteName = builder.websiteName
	}
	if builder.channelFlag {
		req.Channel = builder.channel
	}
	return req
}

type Attachment struct {
	Id         *string `json:"id,omitempty"`          // 附件id
	Url        *string `json:"url,omitempty"`         // 附件的url
	Name       *string `json:"name,omitempty"`        // 附件文件名
	Mime       *string `json:"mime,omitempty"`        // 媒体类型/MIME
	CreateTime *int    `json:"create_time,omitempty"` // 附件创建时间（单位ms）
}

type AttachmentBuilder struct {
	id             string // 附件id
	idFlag         bool
	url            string // 附件的url
	urlFlag        bool
	name           string // 附件文件名
	nameFlag       bool
	mime           string // 媒体类型/MIME
	mimeFlag       bool
	createTime     int // 附件创建时间（单位ms）
	createTimeFlag bool
}

func NewAttachmentBuilder() *AttachmentBuilder {
	builder := &AttachmentBuilder{}
	return builder
}

// 附件id
//
// 示例值：6949805467799537964
func (builder *AttachmentBuilder) Id(id string) *AttachmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 附件的url
//
// 示例值：https://hire.feishu.cn/blob/xx/
func (builder *AttachmentBuilder) Url(url string) *AttachmentBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}

// 附件文件名
//
// 示例值：xx的简历.prd
func (builder *AttachmentBuilder) Name(name string) *AttachmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 媒体类型/MIME
//
// 示例值：application/pdf
func (builder *AttachmentBuilder) Mime(mime string) *AttachmentBuilder {
	builder.mime = mime
	builder.mimeFlag = true
	return builder
}

// 附件创建时间（单位ms）
//
// 示例值：1618899376480
func (builder *AttachmentBuilder) CreateTime(createTime int) *AttachmentBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

func (builder *AttachmentBuilder) Build() *Attachment {
	req := &Attachment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mimeFlag {
		req.Mime = &builder.mime

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	return req
}

type AttachmentInfo struct {
	Id         *string `json:"id,omitempty"`          // 附件id
	Url        *string `json:"url,omitempty"`         // 附件的url
	Name       *string `json:"name,omitempty"`        // 附件文件名
	Mime       *string `json:"mime,omitempty"`        // 媒体类型/MIME
	CreateTime *string `json:"create_time,omitempty"` // 附件创建时间（单位ms）
}

type AttachmentInfoBuilder struct {
	id             string // 附件id
	idFlag         bool
	url            string // 附件的url
	urlFlag        bool
	name           string // 附件文件名
	nameFlag       bool
	mime           string // 媒体类型/MIME
	mimeFlag       bool
	createTime     string // 附件创建时间（单位ms）
	createTimeFlag bool
}

func NewAttachmentInfoBuilder() *AttachmentInfoBuilder {
	builder := &AttachmentInfoBuilder{}
	return builder
}

// 附件id
//
// 示例值：6949805467799537964
func (builder *AttachmentInfoBuilder) Id(id string) *AttachmentInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 附件的url
//
// 示例值：https://hire.feishu.cn/blob/xx/
func (builder *AttachmentInfoBuilder) Url(url string) *AttachmentInfoBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}

// 附件文件名
//
// 示例值：xx的简历.prd
func (builder *AttachmentInfoBuilder) Name(name string) *AttachmentInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 媒体类型/MIME
//
// 示例值：application/pdf
func (builder *AttachmentInfoBuilder) Mime(mime string) *AttachmentInfoBuilder {
	builder.mime = mime
	builder.mimeFlag = true
	return builder
}

// 附件创建时间（单位ms）
//
// 示例值：1618899376480
func (builder *AttachmentInfoBuilder) CreateTime(createTime string) *AttachmentInfoBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

func (builder *AttachmentInfoBuilder) Build() *AttachmentInfo {
	req := &AttachmentInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mimeFlag {
		req.Mime = &builder.mime

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	return req
}

type Auth struct {
	Id   *string `json:"id,omitempty"`   // 权限 ID
	Name *I18n   `json:"name,omitempty"` // 权限名称
}

type AuthBuilder struct {
	id       string // 权限 ID
	idFlag   bool
	name     *I18n // 权限名称
	nameFlag bool
}

func NewAuthBuilder() *AuthBuilder {
	builder := &AuthBuilder{}
	return builder
}

// 权限 ID
//
// 示例值：101
func (builder *AuthBuilder) Id(id string) *AuthBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 权限名称
//
// 示例值：
func (builder *AuthBuilder) Name(name *I18n) *AuthBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *AuthBuilder) Build() *Auth {
	req := &Auth{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type AwardInfo struct {
	AwardTime *int    `json:"award_time,omitempty"` // 获奖时间
	Desc      *string `json:"desc,omitempty"`       // 描述
	Title     *string `json:"title,omitempty"`      // 名称
}

type AwardInfoBuilder struct {
	awardTime     int // 获奖时间
	awardTimeFlag bool
	desc          string // 描述
	descFlag      bool
	title         string // 名称
	titleFlag     bool
}

func NewAwardInfoBuilder() *AwardInfoBuilder {
	builder := &AwardInfoBuilder{}
	return builder
}

// 获奖时间
//
// 示例值：
func (builder *AwardInfoBuilder) AwardTime(awardTime int) *AwardInfoBuilder {
	builder.awardTime = awardTime
	builder.awardTimeFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *AwardInfoBuilder) Desc(desc string) *AwardInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *AwardInfoBuilder) Title(title string) *AwardInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

func (builder *AwardInfoBuilder) Build() *AwardInfo {
	req := &AwardInfo{}
	if builder.awardTimeFlag {
		req.AwardTime = &builder.awardTime

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	return req
}

type BackgroundCheckFeedbackInfo struct {
	AttachmentUrl *string `json:"attachment_url,omitempty"` // 背调信息附件下载链接
	Result        *string `json:"result,omitempty"`         // 背调结果：红灯、黄灯、绿灯
}

type BackgroundCheckFeedbackInfoBuilder struct {
	attachmentUrl     string // 背调信息附件下载链接
	attachmentUrlFlag bool
	result            string // 背调结果：红灯、黄灯、绿灯
	resultFlag        bool
}

func NewBackgroundCheckFeedbackInfoBuilder() *BackgroundCheckFeedbackInfoBuilder {
	builder := &BackgroundCheckFeedbackInfoBuilder{}
	return builder
}

// 背调信息附件下载链接
//
// 示例值：https://feishucdn.com/staource/v1/2de04c10-5cda-4c50~?image_size=np&cutpe=&quity=&mat=g&stmat=.wp
func (builder *BackgroundCheckFeedbackInfoBuilder) AttachmentUrl(attachmentUrl string) *BackgroundCheckFeedbackInfoBuilder {
	builder.attachmentUrl = attachmentUrl
	builder.attachmentUrlFlag = true
	return builder
}

// 背调结果：红灯、黄灯、绿灯
//
// 示例值：红灯
func (builder *BackgroundCheckFeedbackInfoBuilder) Result(result string) *BackgroundCheckFeedbackInfoBuilder {
	builder.result = result
	builder.resultFlag = true
	return builder
}

func (builder *BackgroundCheckFeedbackInfoBuilder) Build() *BackgroundCheckFeedbackInfo {
	req := &BackgroundCheckFeedbackInfo{}
	if builder.attachmentUrlFlag {
		req.AttachmentUrl = &builder.attachmentUrl

	}
	if builder.resultFlag {
		req.Result = &builder.result

	}
	return req
}

type BackgroundCheckOrder struct {
	OrderId          *string                        `json:"order_id,omitempty"`           // 背调 ID
	ApplicationId    *string                        `json:"application_id,omitempty"`     // 投递 ID
	OrderStatus      *int                           `json:"order_status,omitempty"`       // 背调状态
	AccountThirdType *int                           `json:"account_third_type,omitempty"` // 供应商名称
	Package          *string                        `json:"package,omitempty"`            // 背调套餐
	Name             *string                        `json:"name,omitempty"`               // 背调名称（仅手动录入的背调结果具有）
	FeedbackInfoList []*BackgroundCheckFeedbackInfo `json:"feedback_info_list,omitempty"` // 背调报告信息
	ProcessInfoList  []*BackgroundCheckProcessInfo  `json:"process_info_list,omitempty"`  // 进度
	UploadTime       *string                        `json:"upload_time,omitempty"`        // 录入时间（仅手动录入的背调结果具有）
}

type BackgroundCheckOrderBuilder struct {
	orderId              string // 背调 ID
	orderIdFlag          bool
	applicationId        string // 投递 ID
	applicationIdFlag    bool
	orderStatus          int // 背调状态
	orderStatusFlag      bool
	accountThirdType     int // 供应商名称
	accountThirdTypeFlag bool
	package_             string // 背调套餐
	packageFlag          bool
	name                 string // 背调名称（仅手动录入的背调结果具有）
	nameFlag             bool
	feedbackInfoList     []*BackgroundCheckFeedbackInfo // 背调报告信息
	feedbackInfoListFlag bool
	processInfoList      []*BackgroundCheckProcessInfo // 进度
	processInfoListFlag  bool
	uploadTime           string // 录入时间（仅手动录入的背调结果具有）
	uploadTimeFlag       bool
}

func NewBackgroundCheckOrderBuilder() *BackgroundCheckOrderBuilder {
	builder := &BackgroundCheckOrderBuilder{}
	return builder
}

// 背调 ID
//
// 示例值：7037986982531778860
func (builder *BackgroundCheckOrderBuilder) OrderId(orderId string) *BackgroundCheckOrderBuilder {
	builder.orderId = orderId
	builder.orderIdFlag = true
	return builder
}

// 投递 ID
//
// 示例值：6985833807195212076
func (builder *BackgroundCheckOrderBuilder) ApplicationId(applicationId string) *BackgroundCheckOrderBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 背调状态
//
// 示例值：2
func (builder *BackgroundCheckOrderBuilder) OrderStatus(orderStatus int) *BackgroundCheckOrderBuilder {
	builder.orderStatus = orderStatus
	builder.orderStatusFlag = true
	return builder
}

// 供应商名称
//
// 示例值：1
func (builder *BackgroundCheckOrderBuilder) AccountThirdType(accountThirdType int) *BackgroundCheckOrderBuilder {
	builder.accountThirdType = accountThirdType
	builder.accountThirdTypeFlag = true
	return builder
}

// 背调套餐
//
// 示例值：基础版
func (builder *BackgroundCheckOrderBuilder) Package(package_ string) *BackgroundCheckOrderBuilder {
	builder.package_ = package_
	builder.packageFlag = true
	return builder
}

// 背调名称（仅手动录入的背调结果具有）
//
// 示例值：录入的背调
func (builder *BackgroundCheckOrderBuilder) Name(name string) *BackgroundCheckOrderBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 背调报告信息
//
// 示例值：
func (builder *BackgroundCheckOrderBuilder) FeedbackInfoList(feedbackInfoList []*BackgroundCheckFeedbackInfo) *BackgroundCheckOrderBuilder {
	builder.feedbackInfoList = feedbackInfoList
	builder.feedbackInfoListFlag = true
	return builder
}

// 进度
//
// 示例值：
func (builder *BackgroundCheckOrderBuilder) ProcessInfoList(processInfoList []*BackgroundCheckProcessInfo) *BackgroundCheckOrderBuilder {
	builder.processInfoList = processInfoList
	builder.processInfoListFlag = true
	return builder
}

// 录入时间（仅手动录入的背调结果具有）
//
// 示例值：1662476247755
func (builder *BackgroundCheckOrderBuilder) UploadTime(uploadTime string) *BackgroundCheckOrderBuilder {
	builder.uploadTime = uploadTime
	builder.uploadTimeFlag = true
	return builder
}

func (builder *BackgroundCheckOrderBuilder) Build() *BackgroundCheckOrder {
	req := &BackgroundCheckOrder{}
	if builder.orderIdFlag {
		req.OrderId = &builder.orderId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.orderStatusFlag {
		req.OrderStatus = &builder.orderStatus

	}
	if builder.accountThirdTypeFlag {
		req.AccountThirdType = &builder.accountThirdType

	}
	if builder.packageFlag {
		req.Package = &builder.package_

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.feedbackInfoListFlag {
		req.FeedbackInfoList = builder.feedbackInfoList
	}
	if builder.processInfoListFlag {
		req.ProcessInfoList = builder.processInfoList
	}
	if builder.uploadTimeFlag {
		req.UploadTime = &builder.uploadTime

	}
	return req
}

type BackgroundCheckProcessInfo struct {
	Process    *string `json:"process,omitempty"`     // 背调进度
	UpdateTime *string `json:"update_time,omitempty"` // 进度更新时间
}

type BackgroundCheckProcessInfoBuilder struct {
	process        string // 背调进度
	processFlag    bool
	updateTime     string // 进度更新时间
	updateTimeFlag bool
}

func NewBackgroundCheckProcessInfoBuilder() *BackgroundCheckProcessInfoBuilder {
	builder := &BackgroundCheckProcessInfoBuilder{}
	return builder
}

// 背调进度
//
// 示例值：待安排
func (builder *BackgroundCheckProcessInfoBuilder) Process(process string) *BackgroundCheckProcessInfoBuilder {
	builder.process = process
	builder.processFlag = true
	return builder
}

// 进度更新时间
//
// 示例值：1638359554952
func (builder *BackgroundCheckProcessInfoBuilder) UpdateTime(updateTime string) *BackgroundCheckProcessInfoBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}

func (builder *BackgroundCheckProcessInfoBuilder) Build() *BackgroundCheckProcessInfo {
	req := &BackgroundCheckProcessInfo{}
	if builder.processFlag {
		req.Process = &builder.process

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	return req
}

type BaseAddress struct {
	Id       *string       `json:"id,omitempty"`       // ID
	ZhName   *string       `json:"zh_name,omitempty"`  // 中文名称
	EnName   *string       `json:"en_name,omitempty"`  // 英文名称
	District *BaseDistrict `json:"district,omitempty"` // 区域信息
	City     *BaseCity     `json:"city,omitempty"`     // 城市信息
	State    *BaseCity     `json:"state,omitempty"`    // 省信息
	Country  *BaseCountry  `json:"country,omitempty"`  // 国家信息
}

type BaseAddressBuilder struct {
	id           string // ID
	idFlag       bool
	zhName       string // 中文名称
	zhNameFlag   bool
	enName       string // 英文名称
	enNameFlag   bool
	district     *BaseDistrict // 区域信息
	districtFlag bool
	city         *BaseCity // 城市信息
	cityFlag     bool
	state        *BaseCity // 省信息
	stateFlag    bool
	country      *BaseCountry // 国家信息
	countryFlag  bool
}

func NewBaseAddressBuilder() *BaseAddressBuilder {
	builder := &BaseAddressBuilder{}
	return builder
}

// ID
//
// 示例值：6932753007915206919
func (builder *BaseAddressBuilder) Id(id string) *BaseAddressBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 中文名称
//
// 示例值：名字
func (builder *BaseAddressBuilder) ZhName(zhName string) *BaseAddressBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名称
//
// 示例值：name
func (builder *BaseAddressBuilder) EnName(enName string) *BaseAddressBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 区域信息
//
// 示例值：
func (builder *BaseAddressBuilder) District(district *BaseDistrict) *BaseAddressBuilder {
	builder.district = district
	builder.districtFlag = true
	return builder
}

// 城市信息
//
// 示例值：
func (builder *BaseAddressBuilder) City(city *BaseCity) *BaseAddressBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}

// 省信息
//
// 示例值：
func (builder *BaseAddressBuilder) State(state *BaseCity) *BaseAddressBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}

// 国家信息
//
// 示例值：
func (builder *BaseAddressBuilder) Country(country *BaseCountry) *BaseAddressBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

func (builder *BaseAddressBuilder) Build() *BaseAddress {
	req := &BaseAddress{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.districtFlag {
		req.District = builder.district
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.stateFlag {
		req.State = builder.state
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	return req
}

type BaseBilingualWithId struct {
	Id     *string `json:"id,omitempty"`      // ID
	ZhName *string `json:"zh_name,omitempty"` // 中文名称
	EnName *string `json:"en_name,omitempty"` // 英文名称
}

type BaseBilingualWithIdBuilder struct {
	id         string // ID
	idFlag     bool
	zhName     string // 中文名称
	zhNameFlag bool
	enName     string // 英文名称
	enNameFlag bool
}

func NewBaseBilingualWithIdBuilder() *BaseBilingualWithIdBuilder {
	builder := &BaseBilingualWithIdBuilder{}
	return builder
}

// ID
//
// 示例值：1
func (builder *BaseBilingualWithIdBuilder) Id(id string) *BaseBilingualWithIdBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 中文名称
//
// 示例值：正式
func (builder *BaseBilingualWithIdBuilder) ZhName(zhName string) *BaseBilingualWithIdBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名称
//
// 示例值：Regular
func (builder *BaseBilingualWithIdBuilder) EnName(enName string) *BaseBilingualWithIdBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *BaseBilingualWithIdBuilder) Build() *BaseBilingualWithId {
	req := &BaseBilingualWithId{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type BaseCity struct {
	ZhName       *string `json:"zh_name,omitempty"`       // 中文名称
	EnName       *string `json:"en_name,omitempty"`       // 英文名称
	Code         *string `json:"code,omitempty"`          // 编码
	LocationType *int    `json:"location_type,omitempty"` // 地址类型
}

type BaseCityBuilder struct {
	zhName           string // 中文名称
	zhNameFlag       bool
	enName           string // 英文名称
	enNameFlag       bool
	code             string // 编码
	codeFlag         bool
	locationType     int // 地址类型
	locationTypeFlag bool
}

func NewBaseCityBuilder() *BaseCityBuilder {
	builder := &BaseCityBuilder{}
	return builder
}

// 中文名称
//
// 示例值：中文
func (builder *BaseCityBuilder) ZhName(zhName string) *BaseCityBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名称
//
// 示例值：eng
func (builder *BaseCityBuilder) EnName(enName string) *BaseCityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 编码
//
// 示例值：400700
func (builder *BaseCityBuilder) Code(code string) *BaseCityBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 地址类型
//
// 示例值：1
func (builder *BaseCityBuilder) LocationType(locationType int) *BaseCityBuilder {
	builder.locationType = locationType
	builder.locationTypeFlag = true
	return builder
}

func (builder *BaseCityBuilder) Build() *BaseCity {
	req := &BaseCity{}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.locationTypeFlag {
		req.LocationType = &builder.locationType

	}
	return req
}

type BaseCountry struct {
	ZhName       *string `json:"zh_name,omitempty"`       // 中文名称
	EnName       *string `json:"en_name,omitempty"`       // 英文名称
	Code         *string `json:"code,omitempty"`          // 编码
	LocationType *int    `json:"location_type,omitempty"` // 地址类型
}

type BaseCountryBuilder struct {
	zhName           string // 中文名称
	zhNameFlag       bool
	enName           string // 英文名称
	enNameFlag       bool
	code             string // 编码
	codeFlag         bool
	locationType     int // 地址类型
	locationTypeFlag bool
}

func NewBaseCountryBuilder() *BaseCountryBuilder {
	builder := &BaseCountryBuilder{}
	return builder
}

// 中文名称
//
// 示例值：中文
func (builder *BaseCountryBuilder) ZhName(zhName string) *BaseCountryBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名称
//
// 示例值：eng
func (builder *BaseCountryBuilder) EnName(enName string) *BaseCountryBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 编码
//
// 示例值：400700
func (builder *BaseCountryBuilder) Code(code string) *BaseCountryBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 地址类型
//
// 示例值：1
func (builder *BaseCountryBuilder) LocationType(locationType int) *BaseCountryBuilder {
	builder.locationType = locationType
	builder.locationTypeFlag = true
	return builder
}

func (builder *BaseCountryBuilder) Build() *BaseCountry {
	req := &BaseCountry{}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.locationTypeFlag {
		req.LocationType = &builder.locationType

	}
	return req
}

type BaseDistrict struct {
	ZhName       *string `json:"zh_name,omitempty"`       // 中文名称
	EnName       *string `json:"en_name,omitempty"`       // 英文名称
	Code         *string `json:"code,omitempty"`          // 编码
	LocationType *int    `json:"location_type,omitempty"` // 地址类型
}

type BaseDistrictBuilder struct {
	zhName           string // 中文名称
	zhNameFlag       bool
	enName           string // 英文名称
	enNameFlag       bool
	code             string // 编码
	codeFlag         bool
	locationType     int // 地址类型
	locationTypeFlag bool
}

func NewBaseDistrictBuilder() *BaseDistrictBuilder {
	builder := &BaseDistrictBuilder{}
	return builder
}

// 中文名称
//
// 示例值：伦敦
func (builder *BaseDistrictBuilder) ZhName(zhName string) *BaseDistrictBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名称
//
// 示例值：London
func (builder *BaseDistrictBuilder) EnName(enName string) *BaseDistrictBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 编码
//
// 示例值：400700
func (builder *BaseDistrictBuilder) Code(code string) *BaseDistrictBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 地址类型
//
// 示例值：1
func (builder *BaseDistrictBuilder) LocationType(locationType int) *BaseDistrictBuilder {
	builder.locationType = locationType
	builder.locationTypeFlag = true
	return builder
}

func (builder *BaseDistrictBuilder) Build() *BaseDistrict {
	req := &BaseDistrict{}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.locationTypeFlag {
		req.LocationType = &builder.locationType

	}
	return req
}

type BaseResp struct {
	StatusMessage *string `json:"StatusMessage,omitempty"` // 响应信息
	StatusCode    *int    `json:"StatusCode,omitempty"`    // 响应码
}

type BaseRespBuilder struct {
	statusMessage     string // 响应信息
	statusMessageFlag bool
	statusCode        int // 响应码
	statusCodeFlag    bool
}

func NewBaseRespBuilder() *BaseRespBuilder {
	builder := &BaseRespBuilder{}
	return builder
}

// 响应信息
//
// 示例值：
func (builder *BaseRespBuilder) StatusMessage(statusMessage string) *BaseRespBuilder {
	builder.statusMessage = statusMessage
	builder.statusMessageFlag = true
	return builder
}

// 响应码
//
// 示例值：
func (builder *BaseRespBuilder) StatusCode(statusCode int) *BaseRespBuilder {
	builder.statusCode = statusCode
	builder.statusCodeFlag = true
	return builder
}

func (builder *BaseRespBuilder) Build() *BaseResp {
	req := &BaseResp{}
	if builder.statusMessageFlag {
		req.StatusMessage = &builder.statusMessage

	}
	if builder.statusCodeFlag {
		req.StatusCode = &builder.statusCode

	}
	return req
}

type BasicInfo struct {
	Name               *string         `json:"name,omitempty"`                 // 名字
	Mobile             *string         `json:"mobile,omitempty"`               // 手机
	MobileCountryCode  *string         `json:"mobile_country_code,omitempty"`  // 手机国家代码
	Email              *string         `json:"email,omitempty"`                // 邮箱
	Birthday           *int            `json:"birthday,omitempty"`             // 生日
	Confidentiality    *int            `json:"confidentiality,omitempty"`      // 保密
	CreatorAccountType *int            `json:"creator_account_type,omitempty"` // 创建者账户类型
	CreatorId          *string         `json:"creator_id,omitempty"`           // 创建者ID
	CurrentCityCode    *string         `json:"current_city_code,omitempty"`    // 现居住城市
	Gender             *int            `json:"gender,omitempty"`               // 性别
	HometownCityCode   *string         `json:"hometown_city_code,omitempty"`   // 家乡所在城市
	Identification     *Identification `json:"identification,omitempty"`       // 证件
	InitSourceId       *string         `json:"init_source_id,omitempty"`       // 来源
	NationalityId      *string         `json:"nationality_id,omitempty"`       // 国籍编号
	ResumeAttachmentId *string         `json:"resume_attachment_id,omitempty"` // 附件简历ID
	SelfEvaluation     *string         `json:"self_evaluation,omitempty"`      // 自我评价
	StartWorkTime      *int            `json:"start_work_time,omitempty"`      // 开始工作时间
}

type BasicInfoBuilder struct {
	name                   string // 名字
	nameFlag               bool
	mobile                 string // 手机
	mobileFlag             bool
	mobileCountryCode      string // 手机国家代码
	mobileCountryCodeFlag  bool
	email                  string // 邮箱
	emailFlag              bool
	birthday               int // 生日
	birthdayFlag           bool
	confidentiality        int // 保密
	confidentialityFlag    bool
	creatorAccountType     int // 创建者账户类型
	creatorAccountTypeFlag bool
	creatorId              string // 创建者ID
	creatorIdFlag          bool
	currentCityCode        string // 现居住城市
	currentCityCodeFlag    bool
	gender                 int // 性别
	genderFlag             bool
	hometownCityCode       string // 家乡所在城市
	hometownCityCodeFlag   bool
	identification         *Identification // 证件
	identificationFlag     bool
	initSourceId           string // 来源
	initSourceIdFlag       bool
	nationalityId          string // 国籍编号
	nationalityIdFlag      bool
	resumeAttachmentId     string // 附件简历ID
	resumeAttachmentIdFlag bool
	selfEvaluation         string // 自我评价
	selfEvaluationFlag     bool
	startWorkTime          int // 开始工作时间
	startWorkTimeFlag      bool
}

func NewBasicInfoBuilder() *BasicInfoBuilder {
	builder := &BasicInfoBuilder{}
	return builder
}

// 名字
//
// 示例值：
func (builder *BasicInfoBuilder) Name(name string) *BasicInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 手机
//
// 示例值：
func (builder *BasicInfoBuilder) Mobile(mobile string) *BasicInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}

// 手机国家代码
//
// 示例值：
func (builder *BasicInfoBuilder) MobileCountryCode(mobileCountryCode string) *BasicInfoBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}

// 邮箱
//
// 示例值：
func (builder *BasicInfoBuilder) Email(email string) *BasicInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 生日
//
// 示例值：
func (builder *BasicInfoBuilder) Birthday(birthday int) *BasicInfoBuilder {
	builder.birthday = birthday
	builder.birthdayFlag = true
	return builder
}

// 保密
//
// 示例值：
func (builder *BasicInfoBuilder) Confidentiality(confidentiality int) *BasicInfoBuilder {
	builder.confidentiality = confidentiality
	builder.confidentialityFlag = true
	return builder
}

// 创建者账户类型
//
// 示例值：
func (builder *BasicInfoBuilder) CreatorAccountType(creatorAccountType int) *BasicInfoBuilder {
	builder.creatorAccountType = creatorAccountType
	builder.creatorAccountTypeFlag = true
	return builder
}

// 创建者ID
//
// 示例值：
func (builder *BasicInfoBuilder) CreatorId(creatorId string) *BasicInfoBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}

// 现居住城市
//
// 示例值：
func (builder *BasicInfoBuilder) CurrentCityCode(currentCityCode string) *BasicInfoBuilder {
	builder.currentCityCode = currentCityCode
	builder.currentCityCodeFlag = true
	return builder
}

// 性别
//
// 示例值：
func (builder *BasicInfoBuilder) Gender(gender int) *BasicInfoBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}

// 家乡所在城市
//
// 示例值：
func (builder *BasicInfoBuilder) HometownCityCode(hometownCityCode string) *BasicInfoBuilder {
	builder.hometownCityCode = hometownCityCode
	builder.hometownCityCodeFlag = true
	return builder
}

// 证件
//
// 示例值：
func (builder *BasicInfoBuilder) Identification(identification *Identification) *BasicInfoBuilder {
	builder.identification = identification
	builder.identificationFlag = true
	return builder
}

// 来源
//
// 示例值：
func (builder *BasicInfoBuilder) InitSourceId(initSourceId string) *BasicInfoBuilder {
	builder.initSourceId = initSourceId
	builder.initSourceIdFlag = true
	return builder
}

// 国籍编号
//
// 示例值：
func (builder *BasicInfoBuilder) NationalityId(nationalityId string) *BasicInfoBuilder {
	builder.nationalityId = nationalityId
	builder.nationalityIdFlag = true
	return builder
}

// 附件简历ID
//
// 示例值：
func (builder *BasicInfoBuilder) ResumeAttachmentId(resumeAttachmentId string) *BasicInfoBuilder {
	builder.resumeAttachmentId = resumeAttachmentId
	builder.resumeAttachmentIdFlag = true
	return builder
}

// 自我评价
//
// 示例值：
func (builder *BasicInfoBuilder) SelfEvaluation(selfEvaluation string) *BasicInfoBuilder {
	builder.selfEvaluation = selfEvaluation
	builder.selfEvaluationFlag = true
	return builder
}

// 开始工作时间
//
// 示例值：
func (builder *BasicInfoBuilder) StartWorkTime(startWorkTime int) *BasicInfoBuilder {
	builder.startWorkTime = startWorkTime
	builder.startWorkTimeFlag = true
	return builder
}

func (builder *BasicInfoBuilder) Build() *BasicInfo {
	req := &BasicInfo{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.birthdayFlag {
		req.Birthday = &builder.birthday

	}
	if builder.confidentialityFlag {
		req.Confidentiality = &builder.confidentiality

	}
	if builder.creatorAccountTypeFlag {
		req.CreatorAccountType = &builder.creatorAccountType

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.currentCityCodeFlag {
		req.CurrentCityCode = &builder.currentCityCode

	}
	if builder.genderFlag {
		req.Gender = &builder.gender

	}
	if builder.hometownCityCodeFlag {
		req.HometownCityCode = &builder.hometownCityCode

	}
	if builder.identificationFlag {
		req.Identification = builder.identification
	}
	if builder.initSourceIdFlag {
		req.InitSourceId = &builder.initSourceId

	}
	if builder.nationalityIdFlag {
		req.NationalityId = &builder.nationalityId

	}
	if builder.resumeAttachmentIdFlag {
		req.ResumeAttachmentId = &builder.resumeAttachmentId

	}
	if builder.selfEvaluationFlag {
		req.SelfEvaluation = &builder.selfEvaluation

	}
	if builder.startWorkTimeFlag {
		req.StartWorkTime = &builder.startWorkTime

	}
	return req
}

type CareerInfo struct {
	CareerType *int    `json:"career_type,omitempty"` // 类型
	Company    *string `json:"company,omitempty"`     // 公司
	Desc       *string `json:"desc,omitempty"`        // 描述
	EndTime    *int    `json:"end_time,omitempty"`    // 结束时间
	StartTime  *int    `json:"start_time,omitempty"`  // 开始时间
	Title      *string `json:"title,omitempty"`       // 职称
}

type CareerInfoBuilder struct {
	careerType     int // 类型
	careerTypeFlag bool
	company        string // 公司
	companyFlag    bool
	desc           string // 描述
	descFlag       bool
	endTime        int // 结束时间
	endTimeFlag    bool
	startTime      int // 开始时间
	startTimeFlag  bool
	title          string // 职称
	titleFlag      bool
}

func NewCareerInfoBuilder() *CareerInfoBuilder {
	builder := &CareerInfoBuilder{}
	return builder
}

// 类型
//
// 示例值：
func (builder *CareerInfoBuilder) CareerType(careerType int) *CareerInfoBuilder {
	builder.careerType = careerType
	builder.careerTypeFlag = true
	return builder
}

// 公司
//
// 示例值：
func (builder *CareerInfoBuilder) Company(company string) *CareerInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *CareerInfoBuilder) Desc(desc string) *CareerInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 结束时间
//
// 示例值：
func (builder *CareerInfoBuilder) EndTime(endTime int) *CareerInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 开始时间
//
// 示例值：
func (builder *CareerInfoBuilder) StartTime(startTime int) *CareerInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 职称
//
// 示例值：
func (builder *CareerInfoBuilder) Title(title string) *CareerInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

func (builder *CareerInfoBuilder) Build() *CareerInfo {
	req := &CareerInfo{}
	if builder.careerTypeFlag {
		req.CareerType = &builder.careerType

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	return req
}

type CertificateInfo struct {
	Desc *string `json:"desc,omitempty"` // 证件描述
	Name *string `json:"name,omitempty"` // 证件名称
}

type CertificateInfoBuilder struct {
	desc     string // 证件描述
	descFlag bool
	name     string // 证件名称
	nameFlag bool
}

func NewCertificateInfoBuilder() *CertificateInfoBuilder {
	builder := &CertificateInfoBuilder{}
	return builder
}

// 证件描述
//
// 示例值：
func (builder *CertificateInfoBuilder) Desc(desc string) *CertificateInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 证件名称
//
// 示例值：
func (builder *CertificateInfoBuilder) Name(name string) *CertificateInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *CertificateInfoBuilder) Build() *CertificateInfo {
	req := &CertificateInfo{}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

type ChangeEmployeeStage struct {
	Operation      *int                    `json:"operation,omitempty"`       // 修改状态操作
	ConversionInfo *EmployeeConversionInfo `json:"conversion_info,omitempty"` // 转正信息
	OverboardInfo  *EmployeeOverboardInfo  `json:"overboard_info,omitempty"`  // 离职信息
}

type ChangeEmployeeStageBuilder struct {
	operation          int // 修改状态操作
	operationFlag      bool
	conversionInfo     *EmployeeConversionInfo // 转正信息
	conversionInfoFlag bool
	overboardInfo      *EmployeeOverboardInfo // 离职信息
	overboardInfoFlag  bool
}

func NewChangeEmployeeStageBuilder() *ChangeEmployeeStageBuilder {
	builder := &ChangeEmployeeStageBuilder{}
	return builder
}

// 修改状态操作
//
// 示例值：1
func (builder *ChangeEmployeeStageBuilder) Operation(operation int) *ChangeEmployeeStageBuilder {
	builder.operation = operation
	builder.operationFlag = true
	return builder
}

// 转正信息
//
// 示例值：
func (builder *ChangeEmployeeStageBuilder) ConversionInfo(conversionInfo *EmployeeConversionInfo) *ChangeEmployeeStageBuilder {
	builder.conversionInfo = conversionInfo
	builder.conversionInfoFlag = true
	return builder
}

// 离职信息
//
// 示例值：
func (builder *ChangeEmployeeStageBuilder) OverboardInfo(overboardInfo *EmployeeOverboardInfo) *ChangeEmployeeStageBuilder {
	builder.overboardInfo = overboardInfo
	builder.overboardInfoFlag = true
	return builder
}

func (builder *ChangeEmployeeStageBuilder) Build() *ChangeEmployeeStage {
	req := &ChangeEmployeeStage{}
	if builder.operationFlag {
		req.Operation = &builder.operation

	}
	if builder.conversionInfoFlag {
		req.ConversionInfo = builder.conversionInfo
	}
	if builder.overboardInfoFlag {
		req.OverboardInfo = builder.overboardInfo
	}
	return req
}

type City struct {
	CityCode *string  `json:"city_code,omitempty"` // 编码
	Name     *string  `json:"name,omitempty"`      // 名字
	EnName   *string  `json:"en_name,omitempty"`   // 英文名
	Country  *Country `json:"country,omitempty"`   // 国家
}

type CityBuilder struct {
	cityCode     string // 编码
	cityCodeFlag bool
	name         string // 名字
	nameFlag     bool
	enName       string // 英文名
	enNameFlag   bool
	country      *Country // 国家
	countryFlag  bool
}

func NewCityBuilder() *CityBuilder {
	builder := &CityBuilder{}
	return builder
}

// 编码
//
// 示例值：
func (builder *CityBuilder) CityCode(cityCode string) *CityBuilder {
	builder.cityCode = cityCode
	builder.cityCodeFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *CityBuilder) Name(name string) *CityBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *CityBuilder) EnName(enName string) *CityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 国家
//
// 示例值：
func (builder *CityBuilder) Country(country *Country) *CityBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

func (builder *CityBuilder) Build() *City {
	req := &City{}
	if builder.cityCodeFlag {
		req.CityCode = &builder.cityCode

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	return req
}

type CodeNameObject struct {
	Code *string `json:"code,omitempty"` // 编码
	Name *I18n   `json:"name,omitempty"` // 名称
}

type CodeNameObjectBuilder struct {
	code     string // 编码
	codeFlag bool
	name     *I18n // 名称
	nameFlag bool
}

func NewCodeNameObjectBuilder() *CodeNameObjectBuilder {
	builder := &CodeNameObjectBuilder{}
	return builder
}

// 编码
//
// 示例值：1111
func (builder *CodeNameObjectBuilder) Code(code string) *CodeNameObjectBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *CodeNameObjectBuilder) Name(name *I18n) *CodeNameObjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *CodeNameObjectBuilder) Build() *CodeNameObject {
	req := &CodeNameObject{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type CombinedJob struct {
	Id                            *string                      `json:"id,omitempty"`                               // 职位 ID
	Code                          *string                      `json:"code,omitempty"`                             // 职位编号，可传入职位的「职位编号」、「职位 ID」或者「职位序号」，将以传入的参数作为职位编号，以便双方系统的数据映射
	Experience                    *int                         `json:"experience,omitempty"`                       // 工作年限
	ExpiryTime                    *int                         `json:"expiry_time,omitempty"`                      // 到期日期
	CustomizedDataList            []*CombinedJobObjectValueMap `json:"customized_data_list,omitempty"`             // 自定义字段
	MinLevelId                    *string                      `json:"min_level_id,omitempty"`                     // 最低职级，枚举通过接口「获取职级列表」获取
	MinSalary                     *int                         `json:"min_salary,omitempty"`                       // 最低薪资，单位：k
	Title                         *string                      `json:"title,omitempty"`                            // 职位名称
	JobManagers                   *JobManager                  `json:"job_managers,omitempty"`                     // 职位的招聘团队
	JobProcessId                  *string                      `json:"job_process_id,omitempty"`                   // 招聘流程，枚举通过接口「获取招聘流程信息」获取
	ProcessType                   *int                         `json:"process_type,omitempty"`                     // 职位流程类型
	SubjectId                     *string                      `json:"subject_id,omitempty"`                       // 项目，枚举通过「获取项目列表」接口
	JobFunctionId                 *string                      `json:"job_function_id,omitempty"`                  // 职能分类，通过「获取职能分类」获取
	DepartmentId                  *string                      `json:"department_id,omitempty"`                    // 部门 ID，须传入open_department_id，格式为"od-xxxx"。可通过「获取部门信息列表」获取
	HeadCount                     *int                         `json:"head_count,omitempty"`                       // 招聘数量
	IsNeverExpired                *bool                        `json:"is_never_expired,omitempty"`                 // 是否长期有效
	MaxSalary                     *int                         `json:"max_salary,omitempty"`                       // 最高薪资，单位：k
	Requirement                   *string                      `json:"requirement,omitempty"`                      // 职位要求
	AddressId                     *string                      `json:"address_id,omitempty"`                       // 工作地点，枚举通过接口「获取地址列表」获取，选择地点用途为「职位地址」
	Description                   *string                      `json:"description,omitempty"`                      // 职位描述
	HighlightList                 []string                     `json:"highlight_list,omitempty"`                   // 职位亮点
	JobTypeId                     *string                      `json:"job_type_id,omitempty"`                      // 职位类别
	MaxLevelId                    *string                      `json:"max_level_id,omitempty"`                     // 最高职级，枚举通过接口「获取职级列表」获取
	RecruitmentTypeId             *string                      `json:"recruitment_type_id,omitempty"`              // 雇佣类型
	RequiredDegree                *int                         `json:"required_degree,omitempty"`                  // 学历要求
	JobCategoryId                 *string                      `json:"job_category_id,omitempty"`                  // 序列
	AddressIdList                 []string                     `json:"address_id_list,omitempty"`                  // 工作地点，枚举通过接口「获取地址列表」获取，选择地点用途为「职位地址」
	JobAttribute                  *int                         `json:"job_attribute,omitempty"`                    // 职位属性，1是实体职位，2是虚拟职位
	ExpiryTimestamp               *string                      `json:"expiry_timestamp,omitempty"`                 // 到期日期的毫秒时间戳
	InterviewRegistrationSchemaId *string                      `json:"interview_registration_schema_id,omitempty"` // 面试登记表ID
}

type CombinedJobBuilder struct {
	id                                string // 职位 ID
	idFlag                            bool
	code                              string // 职位编号，可传入职位的「职位编号」、「职位 ID」或者「职位序号」，将以传入的参数作为职位编号，以便双方系统的数据映射
	codeFlag                          bool
	experience                        int // 工作年限
	experienceFlag                    bool
	expiryTime                        int // 到期日期
	expiryTimeFlag                    bool
	customizedDataList                []*CombinedJobObjectValueMap // 自定义字段
	customizedDataListFlag            bool
	minLevelId                        string // 最低职级，枚举通过接口「获取职级列表」获取
	minLevelIdFlag                    bool
	minSalary                         int // 最低薪资，单位：k
	minSalaryFlag                     bool
	title                             string // 职位名称
	titleFlag                         bool
	jobManagers                       *JobManager // 职位的招聘团队
	jobManagersFlag                   bool
	jobProcessId                      string // 招聘流程，枚举通过接口「获取招聘流程信息」获取
	jobProcessIdFlag                  bool
	processType                       int // 职位流程类型
	processTypeFlag                   bool
	subjectId                         string // 项目，枚举通过「获取项目列表」接口
	subjectIdFlag                     bool
	jobFunctionId                     string // 职能分类，通过「获取职能分类」获取
	jobFunctionIdFlag                 bool
	departmentId                      string // 部门 ID，须传入open_department_id，格式为"od-xxxx"。可通过「获取部门信息列表」获取
	departmentIdFlag                  bool
	headCount                         int // 招聘数量
	headCountFlag                     bool
	isNeverExpired                    bool // 是否长期有效
	isNeverExpiredFlag                bool
	maxSalary                         int // 最高薪资，单位：k
	maxSalaryFlag                     bool
	requirement                       string // 职位要求
	requirementFlag                   bool
	addressId                         string // 工作地点，枚举通过接口「获取地址列表」获取，选择地点用途为「职位地址」
	addressIdFlag                     bool
	description                       string // 职位描述
	descriptionFlag                   bool
	highlightList                     []string // 职位亮点
	highlightListFlag                 bool
	jobTypeId                         string // 职位类别
	jobTypeIdFlag                     bool
	maxLevelId                        string // 最高职级，枚举通过接口「获取职级列表」获取
	maxLevelIdFlag                    bool
	recruitmentTypeId                 string // 雇佣类型
	recruitmentTypeIdFlag             bool
	requiredDegree                    int // 学历要求
	requiredDegreeFlag                bool
	jobCategoryId                     string // 序列
	jobCategoryIdFlag                 bool
	addressIdList                     []string // 工作地点，枚举通过接口「获取地址列表」获取，选择地点用途为「职位地址」
	addressIdListFlag                 bool
	jobAttribute                      int // 职位属性，1是实体职位，2是虚拟职位
	jobAttributeFlag                  bool
	expiryTimestamp                   string // 到期日期的毫秒时间戳
	expiryTimestampFlag               bool
	interviewRegistrationSchemaId     string // 面试登记表ID
	interviewRegistrationSchemaIdFlag bool
}

func NewCombinedJobBuilder() *CombinedJobBuilder {
	builder := &CombinedJobBuilder{}
	return builder
}

// 职位 ID
//
// 示例值：6960663240925956576
func (builder *CombinedJobBuilder) Id(id string) *CombinedJobBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职位编号，可传入职位的「职位编号」、「职位 ID」或者「职位序号」，将以传入的参数作为职位编号，以便双方系统的数据映射
//
// 示例值：R18
func (builder *CombinedJobBuilder) Code(code string) *CombinedJobBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 工作年限
//
// 示例值：1
func (builder *CombinedJobBuilder) Experience(experience int) *CombinedJobBuilder {
	builder.experience = experience
	builder.experienceFlag = true
	return builder
}

// 到期日期
//
// 示例值：1622484739955
func (builder *CombinedJobBuilder) ExpiryTime(expiryTime int) *CombinedJobBuilder {
	builder.expiryTime = expiryTime
	builder.expiryTimeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *CombinedJobBuilder) CustomizedDataList(customizedDataList []*CombinedJobObjectValueMap) *CombinedJobBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

// 最低职级，枚举通过接口「获取职级列表」获取
//
// 示例值：6960663240925956547
func (builder *CombinedJobBuilder) MinLevelId(minLevelId string) *CombinedJobBuilder {
	builder.minLevelId = minLevelId
	builder.minLevelIdFlag = true
	return builder
}

// 最低薪资，单位：k
//
// 示例值：1000
func (builder *CombinedJobBuilder) MinSalary(minSalary int) *CombinedJobBuilder {
	builder.minSalary = minSalary
	builder.minSalaryFlag = true
	return builder
}

// 职位名称
//
// 示例值：后端研发
func (builder *CombinedJobBuilder) Title(title string) *CombinedJobBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 职位的招聘团队
//
// 示例值：
func (builder *CombinedJobBuilder) JobManagers(jobManagers *JobManager) *CombinedJobBuilder {
	builder.jobManagers = jobManagers
	builder.jobManagersFlag = true
	return builder
}

// 招聘流程，枚举通过接口「获取招聘流程信息」获取
//
// 示例值：6960663240925956554
func (builder *CombinedJobBuilder) JobProcessId(jobProcessId string) *CombinedJobBuilder {
	builder.jobProcessId = jobProcessId
	builder.jobProcessIdFlag = true
	return builder
}

// 职位流程类型
//
// 示例值：1
func (builder *CombinedJobBuilder) ProcessType(processType int) *CombinedJobBuilder {
	builder.processType = processType
	builder.processTypeFlag = true
	return builder
}

// 项目，枚举通过「获取项目列表」接口
//
// 示例值：6960663240925956555
func (builder *CombinedJobBuilder) SubjectId(subjectId string) *CombinedJobBuilder {
	builder.subjectId = subjectId
	builder.subjectIdFlag = true
	return builder
}

// 职能分类，通过「获取职能分类」获取
//
// 示例值：6960663240925956555
func (builder *CombinedJobBuilder) JobFunctionId(jobFunctionId string) *CombinedJobBuilder {
	builder.jobFunctionId = jobFunctionId
	builder.jobFunctionIdFlag = true
	return builder
}

// 部门 ID，须传入open_department_id，格式为"od-xxxx"。可通过「获取部门信息列表」获取
//
// 示例值：od-b2fafdce6fc5800b574ba5b0e2798b36
func (builder *CombinedJobBuilder) DepartmentId(departmentId string) *CombinedJobBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 招聘数量
//
// 示例值：100
func (builder *CombinedJobBuilder) HeadCount(headCount int) *CombinedJobBuilder {
	builder.headCount = headCount
	builder.headCountFlag = true
	return builder
}

// 是否长期有效
//
// 示例值：false
func (builder *CombinedJobBuilder) IsNeverExpired(isNeverExpired bool) *CombinedJobBuilder {
	builder.isNeverExpired = isNeverExpired
	builder.isNeverExpiredFlag = true
	return builder
}

// 最高薪资，单位：k
//
// 示例值：2000
func (builder *CombinedJobBuilder) MaxSalary(maxSalary int) *CombinedJobBuilder {
	builder.maxSalary = maxSalary
	builder.maxSalaryFlag = true
	return builder
}

// 职位要求
//
// 示例值：熟悉后端研发
func (builder *CombinedJobBuilder) Requirement(requirement string) *CombinedJobBuilder {
	builder.requirement = requirement
	builder.requirementFlag = true
	return builder
}

// 工作地点，枚举通过接口「获取地址列表」获取，选择地点用途为「职位地址」
//
// 示例值：6960663240925956553
func (builder *CombinedJobBuilder) AddressId(addressId string) *CombinedJobBuilder {
	builder.addressId = addressId
	builder.addressIdFlag = true
	return builder
}

// 职位描述
//
// 示例值：后端研发岗位描述
func (builder *CombinedJobBuilder) Description(description string) *CombinedJobBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 职位亮点
//
// 示例值：6960663240925956554
func (builder *CombinedJobBuilder) HighlightList(highlightList []string) *CombinedJobBuilder {
	builder.highlightList = highlightList
	builder.highlightListFlag = true
	return builder
}

// 职位类别
//
// 示例值：6960663240925956551
func (builder *CombinedJobBuilder) JobTypeId(jobTypeId string) *CombinedJobBuilder {
	builder.jobTypeId = jobTypeId
	builder.jobTypeIdFlag = true
	return builder
}

// 最高职级，枚举通过接口「获取职级列表」获取
//
// 示例值：6960663240925956548
func (builder *CombinedJobBuilder) MaxLevelId(maxLevelId string) *CombinedJobBuilder {
	builder.maxLevelId = maxLevelId
	builder.maxLevelIdFlag = true
	return builder
}

// 雇佣类型
//
// 示例值：102
func (builder *CombinedJobBuilder) RecruitmentTypeId(recruitmentTypeId string) *CombinedJobBuilder {
	builder.recruitmentTypeId = recruitmentTypeId
	builder.recruitmentTypeIdFlag = true
	return builder
}

// 学历要求
//
// 示例值：1
func (builder *CombinedJobBuilder) RequiredDegree(requiredDegree int) *CombinedJobBuilder {
	builder.requiredDegree = requiredDegree
	builder.requiredDegreeFlag = true
	return builder
}

// 序列
//
// 示例值：6960663240925956550
func (builder *CombinedJobBuilder) JobCategoryId(jobCategoryId string) *CombinedJobBuilder {
	builder.jobCategoryId = jobCategoryId
	builder.jobCategoryIdFlag = true
	return builder
}

// 工作地点，枚举通过接口「获取地址列表」获取，选择地点用途为「职位地址」
//
// 示例值：7035374761602959660
func (builder *CombinedJobBuilder) AddressIdList(addressIdList []string) *CombinedJobBuilder {
	builder.addressIdList = addressIdList
	builder.addressIdListFlag = true
	return builder
}

// 职位属性，1是实体职位，2是虚拟职位
//
// 示例值：职位类别
func (builder *CombinedJobBuilder) JobAttribute(jobAttribute int) *CombinedJobBuilder {
	builder.jobAttribute = jobAttribute
	builder.jobAttributeFlag = true
	return builder
}

// 到期日期的毫秒时间戳
//
// 示例值：1622484739955
func (builder *CombinedJobBuilder) ExpiryTimestamp(expiryTimestamp string) *CombinedJobBuilder {
	builder.expiryTimestamp = expiryTimestamp
	builder.expiryTimestampFlag = true
	return builder
}

// 面试登记表ID
//
// 示例值：6930815272790114324
func (builder *CombinedJobBuilder) InterviewRegistrationSchemaId(interviewRegistrationSchemaId string) *CombinedJobBuilder {
	builder.interviewRegistrationSchemaId = interviewRegistrationSchemaId
	builder.interviewRegistrationSchemaIdFlag = true
	return builder
}

func (builder *CombinedJobBuilder) Build() *CombinedJob {
	req := &CombinedJob{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.experienceFlag {
		req.Experience = &builder.experience

	}
	if builder.expiryTimeFlag {
		req.ExpiryTime = &builder.expiryTime

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.minLevelIdFlag {
		req.MinLevelId = &builder.minLevelId

	}
	if builder.minSalaryFlag {
		req.MinSalary = &builder.minSalary

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.jobManagersFlag {
		req.JobManagers = builder.jobManagers
	}
	if builder.jobProcessIdFlag {
		req.JobProcessId = &builder.jobProcessId

	}
	if builder.processTypeFlag {
		req.ProcessType = &builder.processType

	}
	if builder.subjectIdFlag {
		req.SubjectId = &builder.subjectId

	}
	if builder.jobFunctionIdFlag {
		req.JobFunctionId = &builder.jobFunctionId

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.headCountFlag {
		req.HeadCount = &builder.headCount

	}
	if builder.isNeverExpiredFlag {
		req.IsNeverExpired = &builder.isNeverExpired

	}
	if builder.maxSalaryFlag {
		req.MaxSalary = &builder.maxSalary

	}
	if builder.requirementFlag {
		req.Requirement = &builder.requirement

	}
	if builder.addressIdFlag {
		req.AddressId = &builder.addressId

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.highlightListFlag {
		req.HighlightList = builder.highlightList
	}
	if builder.jobTypeIdFlag {
		req.JobTypeId = &builder.jobTypeId

	}
	if builder.maxLevelIdFlag {
		req.MaxLevelId = &builder.maxLevelId

	}
	if builder.recruitmentTypeIdFlag {
		req.RecruitmentTypeId = &builder.recruitmentTypeId

	}
	if builder.requiredDegreeFlag {
		req.RequiredDegree = &builder.requiredDegree

	}
	if builder.jobCategoryIdFlag {
		req.JobCategoryId = &builder.jobCategoryId

	}
	if builder.addressIdListFlag {
		req.AddressIdList = builder.addressIdList
	}
	if builder.jobAttributeFlag {
		req.JobAttribute = &builder.jobAttribute

	}
	if builder.expiryTimestampFlag {
		req.ExpiryTimestamp = &builder.expiryTimestamp

	}
	if builder.interviewRegistrationSchemaIdFlag {
		req.InterviewRegistrationSchemaId = &builder.interviewRegistrationSchemaId

	}
	return req
}

type CombinedJobObjectValueMap struct {
	ObjectId *string `json:"object_id,omitempty"` // 结构 ID
	Value    *string `json:"value,omitempty"`     // 结构值
}

type CombinedJobObjectValueMapBuilder struct {
	objectId     string // 结构 ID
	objectIdFlag bool
	value        string // 结构值
	valueFlag    bool
}

func NewCombinedJobObjectValueMapBuilder() *CombinedJobObjectValueMapBuilder {
	builder := &CombinedJobObjectValueMapBuilder{}
	return builder
}

// 结构 ID
//
// 示例值：6960663240925956549
func (builder *CombinedJobObjectValueMapBuilder) ObjectId(objectId string) *CombinedJobObjectValueMapBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}

// 结构值
//
// 示例值：测试
func (builder *CombinedJobObjectValueMapBuilder) Value(value string) *CombinedJobObjectValueMapBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *CombinedJobObjectValueMapBuilder) Build() *CombinedJobObjectValueMap {
	req := &CombinedJobObjectValueMap{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type CombinedJobResult struct {
	DefaultJobPost                  *CombinedJobResultDefaultJobPost `json:"default_job_post,omitempty"`                   // 职位广告
	Job                             *Job                             `json:"job,omitempty"`                                // 职位
	JobManager                      *JobManager                      `json:"job_manager,omitempty"`                        // 职位负责人
	InterviewRegistrationSchemaInfo *RegistrationInfo                `json:"interview_registration_schema_info,omitempty"` // 面试登记表
}

type CombinedJobResultBuilder struct {
	defaultJobPost                      *CombinedJobResultDefaultJobPost // 职位广告
	defaultJobPostFlag                  bool
	job                                 *Job // 职位
	jobFlag                             bool
	jobManager                          *JobManager // 职位负责人
	jobManagerFlag                      bool
	interviewRegistrationSchemaInfo     *RegistrationInfo // 面试登记表
	interviewRegistrationSchemaInfoFlag bool
}

func NewCombinedJobResultBuilder() *CombinedJobResultBuilder {
	builder := &CombinedJobResultBuilder{}
	return builder
}

// 职位广告
//
// 示例值：
func (builder *CombinedJobResultBuilder) DefaultJobPost(defaultJobPost *CombinedJobResultDefaultJobPost) *CombinedJobResultBuilder {
	builder.defaultJobPost = defaultJobPost
	builder.defaultJobPostFlag = true
	return builder
}

// 职位
//
// 示例值：
func (builder *CombinedJobResultBuilder) Job(job *Job) *CombinedJobResultBuilder {
	builder.job = job
	builder.jobFlag = true
	return builder
}

// 职位负责人
//
// 示例值：
func (builder *CombinedJobResultBuilder) JobManager(jobManager *JobManager) *CombinedJobResultBuilder {
	builder.jobManager = jobManager
	builder.jobManagerFlag = true
	return builder
}

// 面试登记表
//
// 示例值：
func (builder *CombinedJobResultBuilder) InterviewRegistrationSchemaInfo(interviewRegistrationSchemaInfo *RegistrationInfo) *CombinedJobResultBuilder {
	builder.interviewRegistrationSchemaInfo = interviewRegistrationSchemaInfo
	builder.interviewRegistrationSchemaInfoFlag = true
	return builder
}

func (builder *CombinedJobResultBuilder) Build() *CombinedJobResult {
	req := &CombinedJobResult{}
	if builder.defaultJobPostFlag {
		req.DefaultJobPost = builder.defaultJobPost
	}
	if builder.jobFlag {
		req.Job = builder.job
	}
	if builder.jobManagerFlag {
		req.JobManager = builder.jobManager
	}
	if builder.interviewRegistrationSchemaInfoFlag {
		req.InterviewRegistrationSchemaInfo = builder.interviewRegistrationSchemaInfo
	}
	return req
}

type CombinedJobResultDefaultJobPost struct {
	Id *string `json:"id,omitempty"` // 默认职位广告的 ID，用以发布至招聘渠道的内容
}

type CombinedJobResultDefaultJobPostBuilder struct {
	id     string // 默认职位广告的 ID，用以发布至招聘渠道的内容
	idFlag bool
}

func NewCombinedJobResultDefaultJobPostBuilder() *CombinedJobResultDefaultJobPostBuilder {
	builder := &CombinedJobResultDefaultJobPostBuilder{}
	return builder
}

// 默认职位广告的 ID，用以发布至招聘渠道的内容
//
// 示例值：6960663240925956568
func (builder *CombinedJobResultDefaultJobPostBuilder) Id(id string) *CombinedJobResultDefaultJobPostBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *CombinedJobResultDefaultJobPostBuilder) Build() *CombinedJobResultDefaultJobPost {
	req := &CombinedJobResultDefaultJobPost{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

type CommonAddress struct {
	Id       *string         `json:"id,omitempty"`       // ID
	Name     *I18n           `json:"name,omitempty"`     // 名称
	District *CodeNameObject `json:"district,omitempty"` // 区域信息
	City     *CodeNameObject `json:"city,omitempty"`     // 城市信息
	State    *CodeNameObject `json:"state,omitempty"`    // 省信息
	Country  *CodeNameObject `json:"country,omitempty"`  // 国家信息
}

type CommonAddressBuilder struct {
	id           string // ID
	idFlag       bool
	name         *I18n // 名称
	nameFlag     bool
	district     *CodeNameObject // 区域信息
	districtFlag bool
	city         *CodeNameObject // 城市信息
	cityFlag     bool
	state        *CodeNameObject // 省信息
	stateFlag    bool
	country      *CodeNameObject // 国家信息
	countryFlag  bool
}

func NewCommonAddressBuilder() *CommonAddressBuilder {
	builder := &CommonAddressBuilder{}
	return builder
}

// ID
//
// 示例值：6583482347283472832
func (builder *CommonAddressBuilder) Id(id string) *CommonAddressBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *CommonAddressBuilder) Name(name *I18n) *CommonAddressBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 区域信息
//
// 示例值：
func (builder *CommonAddressBuilder) District(district *CodeNameObject) *CommonAddressBuilder {
	builder.district = district
	builder.districtFlag = true
	return builder
}

// 城市信息
//
// 示例值：
func (builder *CommonAddressBuilder) City(city *CodeNameObject) *CommonAddressBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}

// 省信息
//
// 示例值：
func (builder *CommonAddressBuilder) State(state *CodeNameObject) *CommonAddressBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}

// 国家信息
//
// 示例值：
func (builder *CommonAddressBuilder) Country(country *CodeNameObject) *CommonAddressBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

func (builder *CommonAddressBuilder) Build() *CommonAddress {
	req := &CommonAddress{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.districtFlag {
		req.District = builder.district
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.stateFlag {
		req.State = builder.state
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	return req
}

type CommonSchema struct {
	Id           *string              `json:"id,omitempty"`            // 模块 ID
	Name         *I18n                `json:"name,omitempty"`          // 模块名称
	Description  *I18n                `json:"description,omitempty"`   // 模块描述
	Setting      *CommonSchemaSetting `json:"setting,omitempty"`       // 模块信息
	IsCustomized *bool                `json:"is_customized,omitempty"` // 是否是自定义模块
	IsRequired   *bool                `json:"is_required,omitempty"`   // 是否必填
	IsVisible    *bool                `json:"is_visible,omitempty"`    // 是否可见
	ActiveStatus *int                 `json:"active_status,omitempty"` // 是否启用
	ChildrenList []*CommonSchemaChild `json:"children_list,omitempty"` // 字段列表
}

type CommonSchemaBuilder struct {
	id               string // 模块 ID
	idFlag           bool
	name             *I18n // 模块名称
	nameFlag         bool
	description      *I18n // 模块描述
	descriptionFlag  bool
	setting          *CommonSchemaSetting // 模块信息
	settingFlag      bool
	isCustomized     bool // 是否是自定义模块
	isCustomizedFlag bool
	isRequired       bool // 是否必填
	isRequiredFlag   bool
	isVisible        bool // 是否可见
	isVisibleFlag    bool
	activeStatus     int // 是否启用
	activeStatusFlag bool
	childrenList     []*CommonSchemaChild // 字段列表
	childrenListFlag bool
}

func NewCommonSchemaBuilder() *CommonSchemaBuilder {
	builder := &CommonSchemaBuilder{}
	return builder
}

// 模块 ID
//
// 示例值：6949805467799537964
func (builder *CommonSchemaBuilder) Id(id string) *CommonSchemaBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 模块名称
//
// 示例值：
func (builder *CommonSchemaBuilder) Name(name *I18n) *CommonSchemaBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 模块描述
//
// 示例值：
func (builder *CommonSchemaBuilder) Description(description *I18n) *CommonSchemaBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 模块信息
//
// 示例值：
func (builder *CommonSchemaBuilder) Setting(setting *CommonSchemaSetting) *CommonSchemaBuilder {
	builder.setting = setting
	builder.settingFlag = true
	return builder
}

// 是否是自定义模块
//
// 示例值：true
func (builder *CommonSchemaBuilder) IsCustomized(isCustomized bool) *CommonSchemaBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}

// 是否必填
//
// 示例值：false
func (builder *CommonSchemaBuilder) IsRequired(isRequired bool) *CommonSchemaBuilder {
	builder.isRequired = isRequired
	builder.isRequiredFlag = true
	return builder
}

// 是否可见
//
// 示例值：true
func (builder *CommonSchemaBuilder) IsVisible(isVisible bool) *CommonSchemaBuilder {
	builder.isVisible = isVisible
	builder.isVisibleFlag = true
	return builder
}

// 是否启用
//
// 示例值：1
func (builder *CommonSchemaBuilder) ActiveStatus(activeStatus int) *CommonSchemaBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 字段列表
//
// 示例值：
func (builder *CommonSchemaBuilder) ChildrenList(childrenList []*CommonSchemaChild) *CommonSchemaBuilder {
	builder.childrenList = childrenList
	builder.childrenListFlag = true
	return builder
}

func (builder *CommonSchemaBuilder) Build() *CommonSchema {
	req := &CommonSchema{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.settingFlag {
		req.Setting = builder.setting
	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.isRequiredFlag {
		req.IsRequired = &builder.isRequired

	}
	if builder.isVisibleFlag {
		req.IsVisible = &builder.isVisible

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.childrenListFlag {
		req.ChildrenList = builder.childrenList
	}
	return req
}

type CommonSchemaChild struct {
	Id           *string              `json:"id,omitempty"`            // 字段 ID
	Name         *I18n                `json:"name,omitempty"`          // 字段名称
	Description  *I18n                `json:"description,omitempty"`   // 字段描述
	Setting      *CommonSchemaSetting `json:"setting,omitempty"`       // 字段信息
	ParentId     *string              `json:"parent_id,omitempty"`     // 所属模块 ID
	IsCustomized *bool                `json:"is_customized,omitempty"` // 是否是自定义字段
	IsRequired   *bool                `json:"is_required,omitempty"`   // 是否必填
	IsVisible    *bool                `json:"is_visible,omitempty"`    // 是否可见
	ActiveStatus *int                 `json:"active_status,omitempty"` // 是否启用
}

type CommonSchemaChildBuilder struct {
	id               string // 字段 ID
	idFlag           bool
	name             *I18n // 字段名称
	nameFlag         bool
	description      *I18n // 字段描述
	descriptionFlag  bool
	setting          *CommonSchemaSetting // 字段信息
	settingFlag      bool
	parentId         string // 所属模块 ID
	parentIdFlag     bool
	isCustomized     bool // 是否是自定义字段
	isCustomizedFlag bool
	isRequired       bool // 是否必填
	isRequiredFlag   bool
	isVisible        bool // 是否可见
	isVisibleFlag    bool
	activeStatus     int // 是否启用
	activeStatusFlag bool
}

func NewCommonSchemaChildBuilder() *CommonSchemaChildBuilder {
	builder := &CommonSchemaChildBuilder{}
	return builder
}

// 字段 ID
//
// 示例值：6949805467799537964
func (builder *CommonSchemaChildBuilder) Id(id string) *CommonSchemaChildBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 字段名称
//
// 示例值：
func (builder *CommonSchemaChildBuilder) Name(name *I18n) *CommonSchemaChildBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 字段描述
//
// 示例值：
func (builder *CommonSchemaChildBuilder) Description(description *I18n) *CommonSchemaChildBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 字段信息
//
// 示例值：
func (builder *CommonSchemaChildBuilder) Setting(setting *CommonSchemaSetting) *CommonSchemaChildBuilder {
	builder.setting = setting
	builder.settingFlag = true
	return builder
}

// 所属模块 ID
//
// 示例值：6949805467799537964
func (builder *CommonSchemaChildBuilder) ParentId(parentId string) *CommonSchemaChildBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}

// 是否是自定义字段
//
// 示例值：true
func (builder *CommonSchemaChildBuilder) IsCustomized(isCustomized bool) *CommonSchemaChildBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}

// 是否必填
//
// 示例值：false
func (builder *CommonSchemaChildBuilder) IsRequired(isRequired bool) *CommonSchemaChildBuilder {
	builder.isRequired = isRequired
	builder.isRequiredFlag = true
	return builder
}

// 是否可见
//
// 示例值：true
func (builder *CommonSchemaChildBuilder) IsVisible(isVisible bool) *CommonSchemaChildBuilder {
	builder.isVisible = isVisible
	builder.isVisibleFlag = true
	return builder
}

// 是否启用
//
// 示例值：1
func (builder *CommonSchemaChildBuilder) ActiveStatus(activeStatus int) *CommonSchemaChildBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *CommonSchemaChildBuilder) Build() *CommonSchemaChild {
	req := &CommonSchemaChild{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.settingFlag {
		req.Setting = builder.setting
	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.isRequiredFlag {
		req.IsRequired = &builder.isRequired

	}
	if builder.isVisibleFlag {
		req.IsVisible = &builder.isVisible

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

type CommonSchemaConfig struct {
	Options []*CommonSchemaOption `json:"options,omitempty"` // 选项信息
}

type CommonSchemaConfigBuilder struct {
	options     []*CommonSchemaOption // 选项信息
	optionsFlag bool
}

func NewCommonSchemaConfigBuilder() *CommonSchemaConfigBuilder {
	builder := &CommonSchemaConfigBuilder{}
	return builder
}

// 选项信息
//
// 示例值：
func (builder *CommonSchemaConfigBuilder) Options(options []*CommonSchemaOption) *CommonSchemaConfigBuilder {
	builder.options = options
	builder.optionsFlag = true
	return builder
}

func (builder *CommonSchemaConfigBuilder) Build() *CommonSchemaConfig {
	req := &CommonSchemaConfig{}
	if builder.optionsFlag {
		req.Options = builder.options
	}
	return req
}

type CommonSchemaOption struct {
	Key          *string `json:"key,omitempty"`           // 选项 ID
	Name         *I18n   `json:"name,omitempty"`          // 选项名称
	Description  *I18n   `json:"description,omitempty"`   // 选项描述
	ActiveStatus *int    `json:"active_status,omitempty"` // 是否启用
}

type CommonSchemaOptionBuilder struct {
	key              string // 选项 ID
	keyFlag          bool
	name             *I18n // 选项名称
	nameFlag         bool
	description      *I18n // 选项描述
	descriptionFlag  bool
	activeStatus     int // 是否启用
	activeStatusFlag bool
}

func NewCommonSchemaOptionBuilder() *CommonSchemaOptionBuilder {
	builder := &CommonSchemaOptionBuilder{}
	return builder
}

// 选项 ID
//
// 示例值：test
func (builder *CommonSchemaOptionBuilder) Key(key string) *CommonSchemaOptionBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}

// 选项名称
//
// 示例值：
func (builder *CommonSchemaOptionBuilder) Name(name *I18n) *CommonSchemaOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 选项描述
//
// 示例值：
func (builder *CommonSchemaOptionBuilder) Description(description *I18n) *CommonSchemaOptionBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 是否启用
//
// 示例值：1
func (builder *CommonSchemaOptionBuilder) ActiveStatus(activeStatus int) *CommonSchemaOptionBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *CommonSchemaOptionBuilder) Build() *CommonSchemaOption {
	req := &CommonSchemaOption{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

type CommonSchemaSetting struct {
	ObjectType *int                `json:"object_type,omitempty"` // 字段类型
	Config     *CommonSchemaConfig `json:"config,omitempty"`      // 配置信息
}

type CommonSchemaSettingBuilder struct {
	objectType     int // 字段类型
	objectTypeFlag bool
	config         *CommonSchemaConfig // 配置信息
	configFlag     bool
}

func NewCommonSchemaSettingBuilder() *CommonSchemaSettingBuilder {
	builder := &CommonSchemaSettingBuilder{}
	return builder
}

// 字段类型
//
// 示例值：1
func (builder *CommonSchemaSettingBuilder) ObjectType(objectType int) *CommonSchemaSettingBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}

// 配置信息
//
// 示例值：
func (builder *CommonSchemaSettingBuilder) Config(config *CommonSchemaConfig) *CommonSchemaSettingBuilder {
	builder.config = config
	builder.configFlag = true
	return builder
}

func (builder *CommonSchemaSettingBuilder) Build() *CommonSchemaSetting {
	req := &CommonSchemaSetting{}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.configFlag {
		req.Config = builder.config
	}
	return req
}

type CompetitionInfo struct {
	Desc *string `json:"desc,omitempty"` // 竞赛描述
	Name *string `json:"name,omitempty"` // 竞赛名称
}

type CompetitionInfoBuilder struct {
	desc     string // 竞赛描述
	descFlag bool
	name     string // 竞赛名称
	nameFlag bool
}

func NewCompetitionInfoBuilder() *CompetitionInfoBuilder {
	builder := &CompetitionInfoBuilder{}
	return builder
}

// 竞赛描述
//
// 示例值：
func (builder *CompetitionInfoBuilder) Desc(desc string) *CompetitionInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 竞赛名称
//
// 示例值：
func (builder *CompetitionInfoBuilder) Name(name string) *CompetitionInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *CompetitionInfoBuilder) Build() *CompetitionInfo {
	req := &CompetitionInfo{}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

type Country struct {
	CountryCode *string `json:"country_code,omitempty"` // 国家编码
	Name        *string `json:"name,omitempty"`         // 名字
	EnName      *string `json:"en_name,omitempty"`      // 英文名
}

type CountryBuilder struct {
	countryCode     string // 国家编码
	countryCodeFlag bool
	name            string // 名字
	nameFlag        bool
	enName          string // 英文名
	enNameFlag      bool
}

func NewCountryBuilder() *CountryBuilder {
	builder := &CountryBuilder{}
	return builder
}

// 国家编码
//
// 示例值：
func (builder *CountryBuilder) CountryCode(countryCode string) *CountryBuilder {
	builder.countryCode = countryCode
	builder.countryCodeFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *CountryBuilder) Name(name string) *CountryBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *CountryBuilder) EnName(enName string) *CountryBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *CountryBuilder) Build() *Country {
	req := &Country{}
	if builder.countryCodeFlag {
		req.CountryCode = &builder.countryCode

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type Department struct {
	Id     *string `json:"id,omitempty"`      // ID
	Name   *string `json:"name,omitempty"`    // 名字
	EnName *string `json:"en_name,omitempty"` // 英文名
}

type DepartmentBuilder struct {
	id         string // ID
	idFlag     bool
	name       string // 名字
	nameFlag   bool
	enName     string // 英文名
	enNameFlag bool
}

func NewDepartmentBuilder() *DepartmentBuilder {
	builder := &DepartmentBuilder{}
	return builder
}

// ID
//
// 示例值：1213213123123
func (builder *DepartmentBuilder) Id(id string) *DepartmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：部门名A
func (builder *DepartmentBuilder) Name(name string) *DepartmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：Name
func (builder *DepartmentBuilder) EnName(enName string) *DepartmentBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *DepartmentBuilder) Build() *Department {
	req := &Department{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type DiData struct {
	Value           *string          `json:"value,omitempty"`            // 字段值 1. 单选： "1" 2. 多选："["1", "2"]" 3. 月份选择："{"date":"2022-01"}" 4. 年份选择："{"date":"2022"}" 5. 数字："123" 6. 单行文本："xxx " 7. 多行文本："xxx xxxx" 8. 日期范围 "[1688140800000,1688140800000]"
	ObjectAttribute *ObjectAttribute `json:"object_attribute,omitempty"` // 字段属性
}

type DiDataBuilder struct {
	value               string // 字段值 1. 单选： "1" 2. 多选："["1", "2"]" 3. 月份选择："{"date":"2022-01"}" 4. 年份选择："{"date":"2022"}" 5. 数字："123" 6. 单行文本："xxx " 7. 多行文本："xxx xxxx" 8. 日期范围 "[1688140800000,1688140800000]"
	valueFlag           bool
	objectAttribute     *ObjectAttribute // 字段属性
	objectAttributeFlag bool
}

func NewDiDataBuilder() *DiDataBuilder {
	builder := &DiDataBuilder{}
	return builder
}

// 字段值 1. 单选： "1" 2. 多选："["1", "2"]" 3. 月份选择："{"date":"2022-01"}" 4. 年份选择："{"date":"2022"}" 5. 数字："123" 6. 单行文本："xxx " 7. 多行文本："xxx xxxx" 8. 日期范围 "[1688140800000,1688140800000]"
//
// 示例值："1"
func (builder *DiDataBuilder) Value(value string) *DiDataBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

// 字段属性
//
// 示例值：
func (builder *DiDataBuilder) ObjectAttribute(objectAttribute *ObjectAttribute) *DiDataBuilder {
	builder.objectAttribute = objectAttribute
	builder.objectAttributeFlag = true
	return builder
}

func (builder *DiDataBuilder) Build() *DiData {
	req := &DiData{}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	if builder.objectAttributeFlag {
		req.ObjectAttribute = builder.objectAttribute
	}
	return req
}

type DiInfo struct {
	Id            *string   `json:"id,omitempty"`             // DI信息 ID
	ApplicationId *string   `json:"application_id,omitempty"` // 投递ID
	TalentId      *string   `json:"talent_id,omitempty"`      // 人才ID
	SourceType    *int      `json:"source_type,omitempty"`    // 数据来源
	CreateTime    *string   `json:"create_time,omitempty"`    // 创建时间毫秒时间戳
	UpdateTime    *string   `json:"update_time,omitempty"`    // 更新时间毫秒时间戳
	DiData        []*DiData `json:"di_data,omitempty"`        // 多元信息
}

type DiInfoBuilder struct {
	id                string // DI信息 ID
	idFlag            bool
	applicationId     string // 投递ID
	applicationIdFlag bool
	talentId          string // 人才ID
	talentIdFlag      bool
	sourceType        int // 数据来源
	sourceTypeFlag    bool
	createTime        string // 创建时间毫秒时间戳
	createTimeFlag    bool
	updateTime        string // 更新时间毫秒时间戳
	updateTimeFlag    bool
	diData            []*DiData // 多元信息
	diDataFlag        bool
}

func NewDiInfoBuilder() *DiInfoBuilder {
	builder := &DiInfoBuilder{}
	return builder
}

// DI信息 ID
//
// 示例值："6784008015948283904"
func (builder *DiInfoBuilder) Id(id string) *DiInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 投递ID
//
// 示例值："6784008015948283905"
func (builder *DiInfoBuilder) ApplicationId(applicationId string) *DiInfoBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 人才ID
//
// 示例值："6784008015948283906"
func (builder *DiInfoBuilder) TalentId(talentId string) *DiInfoBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 数据来源
//
// 示例值：1
func (builder *DiInfoBuilder) SourceType(sourceType int) *DiInfoBuilder {
	builder.sourceType = sourceType
	builder.sourceTypeFlag = true
	return builder
}

// 创建时间毫秒时间戳
//
// 示例值："1681301987"
func (builder *DiInfoBuilder) CreateTime(createTime string) *DiInfoBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 更新时间毫秒时间戳
//
// 示例值："1681301987"
func (builder *DiInfoBuilder) UpdateTime(updateTime string) *DiInfoBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}

// 多元信息
//
// 示例值：
func (builder *DiInfoBuilder) DiData(diData []*DiData) *DiInfoBuilder {
	builder.diData = diData
	builder.diDataFlag = true
	return builder
}

func (builder *DiInfoBuilder) Build() *DiInfo {
	req := &DiInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.sourceTypeFlag {
		req.SourceType = &builder.sourceType

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	if builder.diDataFlag {
		req.DiData = builder.diData
	}
	return req
}

type Dummy struct {
	Id *string `json:"id,omitempty"` // id
}

type DummyBuilder struct {
	id     string // id
	idFlag bool
}

func NewDummyBuilder() *DummyBuilder {
	builder := &DummyBuilder{}
	return builder
}

// id
//
// 示例值：
func (builder *DummyBuilder) Id(id string) *DummyBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *DummyBuilder) Build() *Dummy {
	req := &Dummy{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

type EcoAccountCustomField struct {
	Scope           *int                         `json:"scope,omitempty"`             // 适用范围
	CustomFieldList []*EcoAccountCustomFieldData `json:"custom_field_list,omitempty"` // 自定义字段列表
}

type EcoAccountCustomFieldBuilder struct {
	scope               int // 适用范围
	scopeFlag           bool
	customFieldList     []*EcoAccountCustomFieldData // 自定义字段列表
	customFieldListFlag bool
}

func NewEcoAccountCustomFieldBuilder() *EcoAccountCustomFieldBuilder {
	builder := &EcoAccountCustomFieldBuilder{}
	return builder
}

// 适用范围
//
// 示例值：1
func (builder *EcoAccountCustomFieldBuilder) Scope(scope int) *EcoAccountCustomFieldBuilder {
	builder.scope = scope
	builder.scopeFlag = true
	return builder
}

// 自定义字段列表
//
// 示例值：
func (builder *EcoAccountCustomFieldBuilder) CustomFieldList(customFieldList []*EcoAccountCustomFieldData) *EcoAccountCustomFieldBuilder {
	builder.customFieldList = customFieldList
	builder.customFieldListFlag = true
	return builder
}

func (builder *EcoAccountCustomFieldBuilder) Build() *EcoAccountCustomField {
	req := &EcoAccountCustomField{}
	if builder.scopeFlag {
		req.Scope = &builder.scope

	}
	if builder.customFieldListFlag {
		req.CustomFieldList = builder.customFieldList
	}
	return req
}

type EcoAccountCustomFieldData struct {
	Key         *string `json:"key,omitempty"`         // 自定义字段的标识，同一 scope 内须唯一
	Name        *I18n   `json:"name,omitempty"`        // 自定义字段的名称，用户在添加账号表单看到的控件标题
	IsRequired  *bool   `json:"is_required,omitempty"` // 是否必填
	Description *I18n   `json:"description,omitempty"` // 自定义字段的描述，用户在添加账号表单看到的 place holder
}

type EcoAccountCustomFieldDataBuilder struct {
	key             string // 自定义字段的标识，同一 scope 内须唯一
	keyFlag         bool
	name            *I18n // 自定义字段的名称，用户在添加账号表单看到的控件标题
	nameFlag        bool
	isRequired      bool // 是否必填
	isRequiredFlag  bool
	description     *I18n // 自定义字段的描述，用户在添加账号表单看到的 place holder
	descriptionFlag bool
}

func NewEcoAccountCustomFieldDataBuilder() *EcoAccountCustomFieldDataBuilder {
	builder := &EcoAccountCustomFieldDataBuilder{}
	return builder
}

// 自定义字段的标识，同一 scope 内须唯一
//
// 示例值：org_id
func (builder *EcoAccountCustomFieldDataBuilder) Key(key string) *EcoAccountCustomFieldDataBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}

// 自定义字段的名称，用户在添加账号表单看到的控件标题
//
// 示例值：
func (builder *EcoAccountCustomFieldDataBuilder) Name(name *I18n) *EcoAccountCustomFieldDataBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 是否必填
//
// 示例值：true
func (builder *EcoAccountCustomFieldDataBuilder) IsRequired(isRequired bool) *EcoAccountCustomFieldDataBuilder {
	builder.isRequired = isRequired
	builder.isRequiredFlag = true
	return builder
}

// 自定义字段的描述，用户在添加账号表单看到的 place holder
//
// 示例值：
func (builder *EcoAccountCustomFieldDataBuilder) Description(description *I18n) *EcoAccountCustomFieldDataBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *EcoAccountCustomFieldDataBuilder) Build() *EcoAccountCustomFieldData {
	req := &EcoAccountCustomFieldData{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.isRequiredFlag {
		req.IsRequired = &builder.isRequired

	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	return req
}

type EcoAccountCustomFieldEventData struct {
	Key   *string `json:"key,omitempty"`   // 自定义字段的标识
	Value *string `json:"value,omitempty"` // 自定义字段的值
}

type EcoAccountCustomFieldEventDataBuilder struct {
	key       string // 自定义字段的标识
	keyFlag   bool
	value     string // 自定义字段的值
	valueFlag bool
}

func NewEcoAccountCustomFieldEventDataBuilder() *EcoAccountCustomFieldEventDataBuilder {
	builder := &EcoAccountCustomFieldEventDataBuilder{}
	return builder
}

// 自定义字段的标识
//
// 示例值：ord_id
func (builder *EcoAccountCustomFieldEventDataBuilder) Key(key string) *EcoAccountCustomFieldEventDataBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}

// 自定义字段的值
//
// 示例值：7233333
func (builder *EcoAccountCustomFieldEventDataBuilder) Value(value string) *EcoAccountCustomFieldEventDataBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *EcoAccountCustomFieldEventDataBuilder) Build() *EcoAccountCustomFieldEventData {
	req := &EcoAccountCustomFieldEventData{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type EcoBackgroundCheckCreateEventCandidateInfo struct {
	Name   *string                              `json:"name,omitempty"`   // 候选人姓名
	Mobile *EcoBackgroundCheckCreateEventMobile `json:"mobile,omitempty"` // 候选人手机号
	Email  *string                              `json:"email,omitempty"`  // 候选人邮箱
}

type EcoBackgroundCheckCreateEventCandidateInfoBuilder struct {
	name       string // 候选人姓名
	nameFlag   bool
	mobile     *EcoBackgroundCheckCreateEventMobile // 候选人手机号
	mobileFlag bool
	email      string // 候选人邮箱
	emailFlag  bool
}

func NewEcoBackgroundCheckCreateEventCandidateInfoBuilder() *EcoBackgroundCheckCreateEventCandidateInfoBuilder {
	builder := &EcoBackgroundCheckCreateEventCandidateInfoBuilder{}
	return builder
}

// 候选人姓名
//
// 示例值：王二
func (builder *EcoBackgroundCheckCreateEventCandidateInfoBuilder) Name(name string) *EcoBackgroundCheckCreateEventCandidateInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 候选人手机号
//
// 示例值：
func (builder *EcoBackgroundCheckCreateEventCandidateInfoBuilder) Mobile(mobile *EcoBackgroundCheckCreateEventMobile) *EcoBackgroundCheckCreateEventCandidateInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}

// 候选人邮箱
//
// 示例值：xxx@abc.vom
func (builder *EcoBackgroundCheckCreateEventCandidateInfoBuilder) Email(email string) *EcoBackgroundCheckCreateEventCandidateInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

func (builder *EcoBackgroundCheckCreateEventCandidateInfoBuilder) Build() *EcoBackgroundCheckCreateEventCandidateInfo {
	req := &EcoBackgroundCheckCreateEventCandidateInfo{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileFlag {
		req.Mobile = builder.mobile
	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	return req
}

type EcoBackgroundCheckCreateEventContactInfo struct {
	Name   *string                              `json:"name,omitempty"`   // 联系人姓名
	Mobile *EcoBackgroundCheckCreateEventMobile `json:"mobile,omitempty"` // 联系人手机号
	Email  *string                              `json:"email,omitempty"`  // 联系人邮箱
}

type EcoBackgroundCheckCreateEventContactInfoBuilder struct {
	name       string // 联系人姓名
	nameFlag   bool
	mobile     *EcoBackgroundCheckCreateEventMobile // 联系人手机号
	mobileFlag bool
	email      string // 联系人邮箱
	emailFlag  bool
}

func NewEcoBackgroundCheckCreateEventContactInfoBuilder() *EcoBackgroundCheckCreateEventContactInfoBuilder {
	builder := &EcoBackgroundCheckCreateEventContactInfoBuilder{}
	return builder
}

// 联系人姓名
//
// 示例值：王二
func (builder *EcoBackgroundCheckCreateEventContactInfoBuilder) Name(name string) *EcoBackgroundCheckCreateEventContactInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 联系人手机号
//
// 示例值：
func (builder *EcoBackgroundCheckCreateEventContactInfoBuilder) Mobile(mobile *EcoBackgroundCheckCreateEventMobile) *EcoBackgroundCheckCreateEventContactInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}

// 联系人邮箱
//
// 示例值：xxx@abc.vom
func (builder *EcoBackgroundCheckCreateEventContactInfoBuilder) Email(email string) *EcoBackgroundCheckCreateEventContactInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

func (builder *EcoBackgroundCheckCreateEventContactInfoBuilder) Build() *EcoBackgroundCheckCreateEventContactInfo {
	req := &EcoBackgroundCheckCreateEventContactInfo{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileFlag {
		req.Mobile = builder.mobile
	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	return req
}

type EcoBackgroundCheckCreateEventCustomKv struct {
	Key   *string `json:"key,omitempty"`   // 自定义字段标识
	Value *string `json:"value,omitempty"` // 自定义字段值
}

type EcoBackgroundCheckCreateEventCustomKvBuilder struct {
	key       string // 自定义字段标识
	keyFlag   bool
	value     string // 自定义字段值
	valueFlag bool
}

func NewEcoBackgroundCheckCreateEventCustomKvBuilder() *EcoBackgroundCheckCreateEventCustomKvBuilder {
	builder := &EcoBackgroundCheckCreateEventCustomKvBuilder{}
	return builder
}

// 自定义字段标识
//
// 示例值：auth_token
func (builder *EcoBackgroundCheckCreateEventCustomKvBuilder) Key(key string) *EcoBackgroundCheckCreateEventCustomKvBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}

// 自定义字段值
//
// 示例值：apikey_1233kkka
func (builder *EcoBackgroundCheckCreateEventCustomKvBuilder) Value(value string) *EcoBackgroundCheckCreateEventCustomKvBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *EcoBackgroundCheckCreateEventCustomKvBuilder) Build() *EcoBackgroundCheckCreateEventCustomKv {
	req := &EcoBackgroundCheckCreateEventCustomKv{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type EcoBackgroundCheckCreateEventMobile struct {
	Code   *string `json:"code,omitempty"`   // 国家代码
	Number *string `json:"number,omitempty"` // 手机号码
}

type EcoBackgroundCheckCreateEventMobileBuilder struct {
	code       string // 国家代码
	codeFlag   bool
	number     string // 手机号码
	numberFlag bool
}

func NewEcoBackgroundCheckCreateEventMobileBuilder() *EcoBackgroundCheckCreateEventMobileBuilder {
	builder := &EcoBackgroundCheckCreateEventMobileBuilder{}
	return builder
}

// 国家代码
//
// 示例值：86
func (builder *EcoBackgroundCheckCreateEventMobileBuilder) Code(code string) *EcoBackgroundCheckCreateEventMobileBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 手机号码
//
// 示例值：18900001111
func (builder *EcoBackgroundCheckCreateEventMobileBuilder) Number(number string) *EcoBackgroundCheckCreateEventMobileBuilder {
	builder.number = number
	builder.numberFlag = true
	return builder
}

func (builder *EcoBackgroundCheckCreateEventMobileBuilder) Build() *EcoBackgroundCheckCreateEventMobile {
	req := &EcoBackgroundCheckCreateEventMobile{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.numberFlag {
		req.Number = &builder.number

	}
	return req
}

type EcoBackgroundCheckCustomField struct {
	AccountId       *string                              `json:"account_id,omitempty"`        // 背调账号 ID，可在「账号绑定」事件中获取
	CustomFieldList []*EcoBackgroundCheckCustomFieldData `json:"custom_field_list,omitempty"` // 自定义字段列表
}

type EcoBackgroundCheckCustomFieldBuilder struct {
	accountId           string // 背调账号 ID，可在「账号绑定」事件中获取
	accountIdFlag       bool
	customFieldList     []*EcoBackgroundCheckCustomFieldData // 自定义字段列表
	customFieldListFlag bool
}

func NewEcoBackgroundCheckCustomFieldBuilder() *EcoBackgroundCheckCustomFieldBuilder {
	builder := &EcoBackgroundCheckCustomFieldBuilder{}
	return builder
}

// 背调账号 ID，可在「账号绑定」事件中获取
//
// 示例值：6995842370159937061
func (builder *EcoBackgroundCheckCustomFieldBuilder) AccountId(accountId string) *EcoBackgroundCheckCustomFieldBuilder {
	builder.accountId = accountId
	builder.accountIdFlag = true
	return builder
}

// 自定义字段列表
//
// 示例值：
func (builder *EcoBackgroundCheckCustomFieldBuilder) CustomFieldList(customFieldList []*EcoBackgroundCheckCustomFieldData) *EcoBackgroundCheckCustomFieldBuilder {
	builder.customFieldList = customFieldList
	builder.customFieldListFlag = true
	return builder
}

func (builder *EcoBackgroundCheckCustomFieldBuilder) Build() *EcoBackgroundCheckCustomField {
	req := &EcoBackgroundCheckCustomField{}
	if builder.accountIdFlag {
		req.AccountId = &builder.accountId

	}
	if builder.customFieldListFlag {
		req.CustomFieldList = builder.customFieldList
	}
	return req
}

type EcoBackgroundCheckCustomFieldData struct {
	Type        *string                                    `json:"type,omitempty"`        // 自定义字段类型
	Key         *string                                    `json:"key,omitempty"`         // 自定义字段的标识，在同一账号内唯一
	Name        *I18n                                      `json:"name,omitempty"`        // 自定义字段的名称，用户在安排背调表单看到的控件标题
	IsRequired  *bool                                      `json:"is_required,omitempty"` // 是否必填
	Description *I18n                                      `json:"description,omitempty"` // 自定义字段的描述，如果是输入控件，为用户在安排背调表单看到的 placeholder 或 提示文字
	Options     []*EcoBackgroundCheckCustomFieldDataOption `json:"options,omitempty"`     // type 为 select 或 multiselect 时必填，单选或多选的选项
}

type EcoBackgroundCheckCustomFieldDataBuilder struct {
	type_           string // 自定义字段类型
	typeFlag        bool
	key             string // 自定义字段的标识，在同一账号内唯一
	keyFlag         bool
	name            *I18n // 自定义字段的名称，用户在安排背调表单看到的控件标题
	nameFlag        bool
	isRequired      bool // 是否必填
	isRequiredFlag  bool
	description     *I18n // 自定义字段的描述，如果是输入控件，为用户在安排背调表单看到的 placeholder 或 提示文字
	descriptionFlag bool
	options         []*EcoBackgroundCheckCustomFieldDataOption // type 为 select 或 multiselect 时必填，单选或多选的选项
	optionsFlag     bool
}

func NewEcoBackgroundCheckCustomFieldDataBuilder() *EcoBackgroundCheckCustomFieldDataBuilder {
	builder := &EcoBackgroundCheckCustomFieldDataBuilder{}
	return builder
}

// 自定义字段类型
//
// 示例值：text
func (builder *EcoBackgroundCheckCustomFieldDataBuilder) Type(type_ string) *EcoBackgroundCheckCustomFieldDataBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 自定义字段的标识，在同一账号内唯一
//
// 示例值：candidate_resume
func (builder *EcoBackgroundCheckCustomFieldDataBuilder) Key(key string) *EcoBackgroundCheckCustomFieldDataBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}

// 自定义字段的名称，用户在安排背调表单看到的控件标题
//
// 示例值：
func (builder *EcoBackgroundCheckCustomFieldDataBuilder) Name(name *I18n) *EcoBackgroundCheckCustomFieldDataBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 是否必填
//
// 示例值：true
func (builder *EcoBackgroundCheckCustomFieldDataBuilder) IsRequired(isRequired bool) *EcoBackgroundCheckCustomFieldDataBuilder {
	builder.isRequired = isRequired
	builder.isRequiredFlag = true
	return builder
}

// 自定义字段的描述，如果是输入控件，为用户在安排背调表单看到的 placeholder 或 提示文字
//
// 示例值：
func (builder *EcoBackgroundCheckCustomFieldDataBuilder) Description(description *I18n) *EcoBackgroundCheckCustomFieldDataBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// type 为 select 或 multiselect 时必填，单选或多选的选项
//
// 示例值：
func (builder *EcoBackgroundCheckCustomFieldDataBuilder) Options(options []*EcoBackgroundCheckCustomFieldDataOption) *EcoBackgroundCheckCustomFieldDataBuilder {
	builder.options = options
	builder.optionsFlag = true
	return builder
}

func (builder *EcoBackgroundCheckCustomFieldDataBuilder) Build() *EcoBackgroundCheckCustomFieldData {
	req := &EcoBackgroundCheckCustomFieldData{}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.isRequiredFlag {
		req.IsRequired = &builder.isRequired

	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.optionsFlag {
		req.Options = builder.options
	}
	return req
}

type EcoBackgroundCheckCustomFieldDataOption struct {
	Key  *string `json:"key,omitempty"`  // 选项的 key
	Name *I18n   `json:"name,omitempty"` // 选项的名称
}

type EcoBackgroundCheckCustomFieldDataOptionBuilder struct {
	key      string // 选项的 key
	keyFlag  bool
	name     *I18n // 选项的名称
	nameFlag bool
}

func NewEcoBackgroundCheckCustomFieldDataOptionBuilder() *EcoBackgroundCheckCustomFieldDataOptionBuilder {
	builder := &EcoBackgroundCheckCustomFieldDataOptionBuilder{}
	return builder
}

// 选项的 key
//
// 示例值：A
func (builder *EcoBackgroundCheckCustomFieldDataOptionBuilder) Key(key string) *EcoBackgroundCheckCustomFieldDataOptionBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}

// 选项的名称
//
// 示例值：
func (builder *EcoBackgroundCheckCustomFieldDataOptionBuilder) Name(name *I18n) *EcoBackgroundCheckCustomFieldDataOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *EcoBackgroundCheckCustomFieldDataOptionBuilder) Build() *EcoBackgroundCheckCustomFieldDataOption {
	req := &EcoBackgroundCheckCustomFieldDataOption{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type EcoBackgroundCheckPackage struct {
	AccountId          *string                                    `json:"account_id,omitempty"`           // 背调账号 ID，可在「账号绑定」事件中获取
	PackageList        []*EcoBackgroundCheckPackageData           `json:"package_list,omitempty"`         // 背调套餐列表
	AdditionalItemList []*EcoBackgroundCheckPackageAdditionalItem `json:"additional_item_list,omitempty"` // 附加调查项列表
}

type EcoBackgroundCheckPackageBuilder struct {
	accountId              string // 背调账号 ID，可在「账号绑定」事件中获取
	accountIdFlag          bool
	packageList            []*EcoBackgroundCheckPackageData // 背调套餐列表
	packageListFlag        bool
	additionalItemList     []*EcoBackgroundCheckPackageAdditionalItem // 附加调查项列表
	additionalItemListFlag bool
}

func NewEcoBackgroundCheckPackageBuilder() *EcoBackgroundCheckPackageBuilder {
	builder := &EcoBackgroundCheckPackageBuilder{}
	return builder
}

// 背调账号 ID，可在「账号绑定」事件中获取
//
// 示例值：ord_id
func (builder *EcoBackgroundCheckPackageBuilder) AccountId(accountId string) *EcoBackgroundCheckPackageBuilder {
	builder.accountId = accountId
	builder.accountIdFlag = true
	return builder
}

// 背调套餐列表
//
// 示例值：
func (builder *EcoBackgroundCheckPackageBuilder) PackageList(packageList []*EcoBackgroundCheckPackageData) *EcoBackgroundCheckPackageBuilder {
	builder.packageList = packageList
	builder.packageListFlag = true
	return builder
}

// 附加调查项列表
//
// 示例值：
func (builder *EcoBackgroundCheckPackageBuilder) AdditionalItemList(additionalItemList []*EcoBackgroundCheckPackageAdditionalItem) *EcoBackgroundCheckPackageBuilder {
	builder.additionalItemList = additionalItemList
	builder.additionalItemListFlag = true
	return builder
}

func (builder *EcoBackgroundCheckPackageBuilder) Build() *EcoBackgroundCheckPackage {
	req := &EcoBackgroundCheckPackage{}
	if builder.accountIdFlag {
		req.AccountId = &builder.accountId

	}
	if builder.packageListFlag {
		req.PackageList = builder.packageList
	}
	if builder.additionalItemListFlag {
		req.AdditionalItemList = builder.additionalItemList
	}
	return req
}

type EcoBackgroundCheckPackageAdditionalItem struct {
	Id          *string `json:"id,omitempty"`          // 附件调查项 ID
	Name        *string `json:"name,omitempty"`        // 附加调查项名称
	Description *string `json:"description,omitempty"` // 附加调查项描述
}

type EcoBackgroundCheckPackageAdditionalItemBuilder struct {
	id              string // 附件调查项 ID
	idFlag          bool
	name            string // 附加调查项名称
	nameFlag        bool
	description     string // 附加调查项描述
	descriptionFlag bool
}

func NewEcoBackgroundCheckPackageAdditionalItemBuilder() *EcoBackgroundCheckPackageAdditionalItemBuilder {
	builder := &EcoBackgroundCheckPackageAdditionalItemBuilder{}
	return builder
}

// 附件调查项 ID
//
// 示例值：ext001
func (builder *EcoBackgroundCheckPackageAdditionalItemBuilder) Id(id string) *EcoBackgroundCheckPackageAdditionalItemBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 附加调查项名称
//
// 示例值：工作履历信息验证X2
func (builder *EcoBackgroundCheckPackageAdditionalItemBuilder) Name(name string) *EcoBackgroundCheckPackageAdditionalItemBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 附加调查项描述
//
// 示例值：详细调查
func (builder *EcoBackgroundCheckPackageAdditionalItemBuilder) Description(description string) *EcoBackgroundCheckPackageAdditionalItemBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *EcoBackgroundCheckPackageAdditionalItemBuilder) Build() *EcoBackgroundCheckPackageAdditionalItem {
	req := &EcoBackgroundCheckPackageAdditionalItem{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

type EcoBackgroundCheckPackageData struct {
	Id          *string `json:"id,omitempty"`          // 套餐 ID
	Name        *string `json:"name,omitempty"`        // 背调名称
	Description *string `json:"description,omitempty"` // 套餐描述
}

type EcoBackgroundCheckPackageDataBuilder struct {
	id              string // 套餐 ID
	idFlag          bool
	name            string // 背调名称
	nameFlag        bool
	description     string // 套餐描述
	descriptionFlag bool
}

func NewEcoBackgroundCheckPackageDataBuilder() *EcoBackgroundCheckPackageDataBuilder {
	builder := &EcoBackgroundCheckPackageDataBuilder{}
	return builder
}

// 套餐 ID
//
// 示例值：pkg001
func (builder *EcoBackgroundCheckPackageDataBuilder) Id(id string) *EcoBackgroundCheckPackageDataBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 背调名称
//
// 示例值：基础套餐
func (builder *EcoBackgroundCheckPackageDataBuilder) Name(name string) *EcoBackgroundCheckPackageDataBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 套餐描述
//
// 示例值：工作履历信息验证X1，工作表现鉴定评价X1，教育背景核实，公民身份信息验证，简历对比，民事诉讼调查
func (builder *EcoBackgroundCheckPackageDataBuilder) Description(description string) *EcoBackgroundCheckPackageDataBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *EcoBackgroundCheckPackageDataBuilder) Build() *EcoBackgroundCheckPackageData {
	req := &EcoBackgroundCheckPackageData{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

type EcoBackgroundCheckReportFile struct {
	ReportName *string `json:"report_name,omitempty"` // 报告名称
	ReportUrl  *string `json:"report_url,omitempty"`  // 报告地址
}

type EcoBackgroundCheckReportFileBuilder struct {
	reportName     string // 报告名称
	reportNameFlag bool
	reportUrl      string // 报告地址
	reportUrlFlag  bool
}

func NewEcoBackgroundCheckReportFileBuilder() *EcoBackgroundCheckReportFileBuilder {
	builder := &EcoBackgroundCheckReportFileBuilder{}
	return builder
}

// 报告名称
//
// 示例值：阶段报告.pdf
func (builder *EcoBackgroundCheckReportFileBuilder) ReportName(reportName string) *EcoBackgroundCheckReportFileBuilder {
	builder.reportName = reportName
	builder.reportNameFlag = true
	return builder
}

// 报告地址
//
// 示例值：https://xxxxx/xxxxxx/xxxx.pdf
func (builder *EcoBackgroundCheckReportFileBuilder) ReportUrl(reportUrl string) *EcoBackgroundCheckReportFileBuilder {
	builder.reportUrl = reportUrl
	builder.reportUrlFlag = true
	return builder
}

func (builder *EcoBackgroundCheckReportFileBuilder) Build() *EcoBackgroundCheckReportFile {
	req := &EcoBackgroundCheckReportFile{}
	if builder.reportNameFlag {
		req.ReportName = &builder.reportName

	}
	if builder.reportUrlFlag {
		req.ReportUrl = &builder.reportUrl

	}
	return req
}

type EcoExamCreateEventCandidateInfo struct {
	Name   *string                   `json:"name,omitempty"`   // 候选人姓名
	Mobile *EcoExamCreateEventMobile `json:"mobile,omitempty"` // 候选人手机号
	Email  *string                   `json:"email,omitempty"`  // 候选人邮箱
}

type EcoExamCreateEventCandidateInfoBuilder struct {
	name       string // 候选人姓名
	nameFlag   bool
	mobile     *EcoExamCreateEventMobile // 候选人手机号
	mobileFlag bool
	email      string // 候选人邮箱
	emailFlag  bool
}

func NewEcoExamCreateEventCandidateInfoBuilder() *EcoExamCreateEventCandidateInfoBuilder {
	builder := &EcoExamCreateEventCandidateInfoBuilder{}
	return builder
}

// 候选人姓名
//
// 示例值：王二
func (builder *EcoExamCreateEventCandidateInfoBuilder) Name(name string) *EcoExamCreateEventCandidateInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 候选人手机号
//
// 示例值：
func (builder *EcoExamCreateEventCandidateInfoBuilder) Mobile(mobile *EcoExamCreateEventMobile) *EcoExamCreateEventCandidateInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}

// 候选人邮箱
//
// 示例值：xxx@abc.vom
func (builder *EcoExamCreateEventCandidateInfoBuilder) Email(email string) *EcoExamCreateEventCandidateInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

func (builder *EcoExamCreateEventCandidateInfoBuilder) Build() *EcoExamCreateEventCandidateInfo {
	req := &EcoExamCreateEventCandidateInfo{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileFlag {
		req.Mobile = builder.mobile
	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	return req
}

type EcoExamCreateEventMobile struct {
	Code   *string `json:"code,omitempty"`   // 国家代码
	Number *string `json:"number,omitempty"` // 手机号码
}

type EcoExamCreateEventMobileBuilder struct {
	code       string // 国家代码
	codeFlag   bool
	number     string // 手机号码
	numberFlag bool
}

func NewEcoExamCreateEventMobileBuilder() *EcoExamCreateEventMobileBuilder {
	builder := &EcoExamCreateEventMobileBuilder{}
	return builder
}

// 国家代码
//
// 示例值：86
func (builder *EcoExamCreateEventMobileBuilder) Code(code string) *EcoExamCreateEventMobileBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 手机号码
//
// 示例值：18900001111
func (builder *EcoExamCreateEventMobileBuilder) Number(number string) *EcoExamCreateEventMobileBuilder {
	builder.number = number
	builder.numberFlag = true
	return builder
}

func (builder *EcoExamCreateEventMobileBuilder) Build() *EcoExamCreateEventMobile {
	req := &EcoExamCreateEventMobile{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.numberFlag {
		req.Number = &builder.number

	}
	return req
}

type EcoExamLoginInfo struct {
	ExamUrl  *string `json:"exam_url,omitempty"` // 笔试链接
	Username *string `json:"username,omitempty"` // 用户名
	Password *string `json:"password,omitempty"` // 密码
}

type EcoExamLoginInfoBuilder struct {
	examUrl      string // 笔试链接
	examUrlFlag  bool
	username     string // 用户名
	usernameFlag bool
	password     string // 密码
	passwordFlag bool
}

func NewEcoExamLoginInfoBuilder() *EcoExamLoginInfoBuilder {
	builder := &EcoExamLoginInfoBuilder{}
	return builder
}

// 笔试链接
//
// 示例值：https://xxxx/xxxx/xxxx
func (builder *EcoExamLoginInfoBuilder) ExamUrl(examUrl string) *EcoExamLoginInfoBuilder {
	builder.examUrl = examUrl
	builder.examUrlFlag = true
	return builder
}

// 用户名
//
// 示例值：waxsdfbhg
func (builder *EcoExamLoginInfoBuilder) Username(username string) *EcoExamLoginInfoBuilder {
	builder.username = username
	builder.usernameFlag = true
	return builder
}

// 密码
//
// 示例值：xxxxxx
func (builder *EcoExamLoginInfoBuilder) Password(password string) *EcoExamLoginInfoBuilder {
	builder.password = password
	builder.passwordFlag = true
	return builder
}

func (builder *EcoExamLoginInfoBuilder) Build() *EcoExamLoginInfo {
	req := &EcoExamLoginInfo{}
	if builder.examUrlFlag {
		req.ExamUrl = &builder.examUrl

	}
	if builder.usernameFlag {
		req.Username = &builder.username

	}
	if builder.passwordFlag {
		req.Password = &builder.password

	}
	return req
}

type EcoExamPaper struct {
	AccountId *string             `json:"account_id,omitempty"` // 账号 ID，可在「账号绑定」事件中获取
	PaperList []*EcoExamPaperData `json:"paper_list,omitempty"` // 试卷列表
}

type EcoExamPaperBuilder struct {
	accountId     string // 账号 ID，可在「账号绑定」事件中获取
	accountIdFlag bool
	paperList     []*EcoExamPaperData // 试卷列表
	paperListFlag bool
}

func NewEcoExamPaperBuilder() *EcoExamPaperBuilder {
	builder := &EcoExamPaperBuilder{}
	return builder
}

// 账号 ID，可在「账号绑定」事件中获取
//
// 示例值：7147998241542539527
func (builder *EcoExamPaperBuilder) AccountId(accountId string) *EcoExamPaperBuilder {
	builder.accountId = accountId
	builder.accountIdFlag = true
	return builder
}

// 试卷列表
//
// 示例值：
func (builder *EcoExamPaperBuilder) PaperList(paperList []*EcoExamPaperData) *EcoExamPaperBuilder {
	builder.paperList = paperList
	builder.paperListFlag = true
	return builder
}

func (builder *EcoExamPaperBuilder) Build() *EcoExamPaper {
	req := &EcoExamPaper{}
	if builder.accountIdFlag {
		req.AccountId = &builder.accountId

	}
	if builder.paperListFlag {
		req.PaperList = builder.paperList
	}
	return req
}

type EcoExamPaperData struct {
	Id            *string `json:"id,omitempty"`             // 试卷 ID
	Name          *string `json:"name,omitempty"`           // 试卷名称
	Duration      *int    `json:"duration,omitempty"`       // 考试时长（分钟）
	QuestionCount *int    `json:"question_count,omitempty"` // 试卷题目数量
	StartTime     *string `json:"start_time,omitempty"`     // 开始时间，留空或不传表示不限制开始时间
	EndTime       *string `json:"end_time,omitempty"`       // 结束时间，留空或不传表示不限制结束时间
}

type EcoExamPaperDataBuilder struct {
	id                string // 试卷 ID
	idFlag            bool
	name              string // 试卷名称
	nameFlag          bool
	duration          int // 考试时长（分钟）
	durationFlag      bool
	questionCount     int // 试卷题目数量
	questionCountFlag bool
	startTime         string // 开始时间，留空或不传表示不限制开始时间
	startTimeFlag     bool
	endTime           string // 结束时间，留空或不传表示不限制结束时间
	endTimeFlag       bool
}

func NewEcoExamPaperDataBuilder() *EcoExamPaperDataBuilder {
	builder := &EcoExamPaperDataBuilder{}
	return builder
}

// 试卷 ID
//
// 示例值：7147998241542539527
func (builder *EcoExamPaperDataBuilder) Id(id string) *EcoExamPaperDataBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 试卷名称
//
// 示例值：春季测评
func (builder *EcoExamPaperDataBuilder) Name(name string) *EcoExamPaperDataBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 考试时长（分钟）
//
// 示例值：30
func (builder *EcoExamPaperDataBuilder) Duration(duration int) *EcoExamPaperDataBuilder {
	builder.duration = duration
	builder.durationFlag = true
	return builder
}

// 试卷题目数量
//
// 示例值：30
func (builder *EcoExamPaperDataBuilder) QuestionCount(questionCount int) *EcoExamPaperDataBuilder {
	builder.questionCount = questionCount
	builder.questionCountFlag = true
	return builder
}

// 开始时间，留空或不传表示不限制开始时间
//
// 示例值：1658676234053
func (builder *EcoExamPaperDataBuilder) StartTime(startTime string) *EcoExamPaperDataBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间，留空或不传表示不限制结束时间
//
// 示例值：1672444800000
func (builder *EcoExamPaperDataBuilder) EndTime(endTime string) *EcoExamPaperDataBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *EcoExamPaperDataBuilder) Build() *EcoExamPaperData {
	req := &EcoExamPaperData{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.durationFlag {
		req.Duration = &builder.duration

	}
	if builder.questionCountFlag {
		req.QuestionCount = &builder.questionCount

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

type EcoExamResult struct {
	Result     *string                `json:"result,omitempty"`      // 笔试结果
	ResultTime *string                `json:"result_time,omitempty"` // 笔试结果时间
	ReportList []*EcoExamResultReport `json:"report_list,omitempty"` // 报告列表
	DetailList []*EcoExamResultDetail `json:"detail_list,omitempty"` // 详细评价结果
}

type EcoExamResultBuilder struct {
	result         string // 笔试结果
	resultFlag     bool
	resultTime     string // 笔试结果时间
	resultTimeFlag bool
	reportList     []*EcoExamResultReport // 报告列表
	reportListFlag bool
	detailList     []*EcoExamResultDetail // 详细评价结果
	detailListFlag bool
}

func NewEcoExamResultBuilder() *EcoExamResultBuilder {
	builder := &EcoExamResultBuilder{}
	return builder
}

// 笔试结果
//
// 示例值：60.5
func (builder *EcoExamResultBuilder) Result(result string) *EcoExamResultBuilder {
	builder.result = result
	builder.resultFlag = true
	return builder
}

// 笔试结果时间
//
// 示例值：1658676234053
func (builder *EcoExamResultBuilder) ResultTime(resultTime string) *EcoExamResultBuilder {
	builder.resultTime = resultTime
	builder.resultTimeFlag = true
	return builder
}

// 报告列表
//
// 示例值：
func (builder *EcoExamResultBuilder) ReportList(reportList []*EcoExamResultReport) *EcoExamResultBuilder {
	builder.reportList = reportList
	builder.reportListFlag = true
	return builder
}

// 详细评价结果
//
// 示例值：
func (builder *EcoExamResultBuilder) DetailList(detailList []*EcoExamResultDetail) *EcoExamResultBuilder {
	builder.detailList = detailList
	builder.detailListFlag = true
	return builder
}

func (builder *EcoExamResultBuilder) Build() *EcoExamResult {
	req := &EcoExamResult{}
	if builder.resultFlag {
		req.Result = &builder.result

	}
	if builder.resultTimeFlag {
		req.ResultTime = &builder.resultTime

	}
	if builder.reportListFlag {
		req.ReportList = builder.reportList
	}
	if builder.detailListFlag {
		req.DetailList = builder.detailList
	}
	return req
}

type EcoExamResultDetail struct {
	Id     *string `json:"id,omitempty"`     // 评价 ID
	Name   *string `json:"name,omitempty"`   // 评价名称
	Result *string `json:"result,omitempty"` // 评价结果
}

type EcoExamResultDetailBuilder struct {
	id         string // 评价 ID
	idFlag     bool
	name       string // 评价名称
	nameFlag   bool
	result     string // 评价结果
	resultFlag bool
}

func NewEcoExamResultDetailBuilder() *EcoExamResultDetailBuilder {
	builder := &EcoExamResultDetailBuilder{}
	return builder
}

// 评价 ID
//
// 示例值：pj001
func (builder *EcoExamResultDetailBuilder) Id(id string) *EcoExamResultDetailBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 评价名称
//
// 示例值：基本功
func (builder *EcoExamResultDetailBuilder) Name(name string) *EcoExamResultDetailBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 评价结果
//
// 示例值：优秀
func (builder *EcoExamResultDetailBuilder) Result(result string) *EcoExamResultDetailBuilder {
	builder.result = result
	builder.resultFlag = true
	return builder
}

func (builder *EcoExamResultDetailBuilder) Build() *EcoExamResultDetail {
	req := &EcoExamResultDetail{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.resultFlag {
		req.Result = &builder.result

	}
	return req
}

type EcoExamResultReport struct {
	Name *string `json:"name,omitempty"` // 报告名称
	Url  *string `json:"url,omitempty"`  // 报告链接
}

type EcoExamResultReportBuilder struct {
	name     string // 报告名称
	nameFlag bool
	url      string // 报告链接
	urlFlag  bool
}

func NewEcoExamResultReportBuilder() *EcoExamResultReportBuilder {
	builder := &EcoExamResultReportBuilder{}
	return builder
}

// 报告名称
//
// 示例值：阶段报告.pdf
func (builder *EcoExamResultReportBuilder) Name(name string) *EcoExamResultReportBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 报告链接
//
// 示例值：https://xxxxx/xxxxxx/xxxx.pdf
func (builder *EcoExamResultReportBuilder) Url(url string) *EcoExamResultReportBuilder {
	builder.url = url
	builder.urlFlag = true
	return builder
}

func (builder *EcoExamResultReportBuilder) Build() *EcoExamResultReport {
	req := &EcoExamResultReport{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.urlFlag {
		req.Url = &builder.url

	}
	return req
}

type EducationInfo struct {
	Degree          *int    `json:"degree,omitempty"`           // 学历
	EndTime         *int    `json:"end_time,omitempty"`         // 结束时间
	FieldOfStudy    *string `json:"field_of_study,omitempty"`   // 专业
	School          *string `json:"school,omitempty"`           // 学校
	StartTime       *int    `json:"start_time,omitempty"`       // 开始时间
	EducationType   *int    `json:"education_type,omitempty"`   // 学历类型
	AcademicRanking *int    `json:"academic_ranking,omitempty"` // 排名
}

type EducationInfoBuilder struct {
	degree              int // 学历
	degreeFlag          bool
	endTime             int // 结束时间
	endTimeFlag         bool
	fieldOfStudy        string // 专业
	fieldOfStudyFlag    bool
	school              string // 学校
	schoolFlag          bool
	startTime           int // 开始时间
	startTimeFlag       bool
	educationType       int // 学历类型
	educationTypeFlag   bool
	academicRanking     int // 排名
	academicRankingFlag bool
}

func NewEducationInfoBuilder() *EducationInfoBuilder {
	builder := &EducationInfoBuilder{}
	return builder
}

// 学历
//
// 示例值：
func (builder *EducationInfoBuilder) Degree(degree int) *EducationInfoBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}

// 结束时间
//
// 示例值：
func (builder *EducationInfoBuilder) EndTime(endTime int) *EducationInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 专业
//
// 示例值：
func (builder *EducationInfoBuilder) FieldOfStudy(fieldOfStudy string) *EducationInfoBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}

// 学校
//
// 示例值：
func (builder *EducationInfoBuilder) School(school string) *EducationInfoBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}

// 开始时间
//
// 示例值：
func (builder *EducationInfoBuilder) StartTime(startTime int) *EducationInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 学历类型
//
// 示例值：
func (builder *EducationInfoBuilder) EducationType(educationType int) *EducationInfoBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}

// 排名
//
// 示例值：
func (builder *EducationInfoBuilder) AcademicRanking(academicRanking int) *EducationInfoBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}

func (builder *EducationInfoBuilder) Build() *EducationInfo {
	req := &EducationInfo{}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	return req
}

type EhrImportTask struct {
	FailReason  *string `json:"fail_reason,omitempty"`  // 失败原因，仅在导入结果为失败时可用
	RedirectUrl *string `json:"redirect_url,omitempty"` // 跳转链接，若需返回跳转链接，请前往飞书招聘「设置 - 生态对接 - e-HR / OA 办公系统 - 『导入 e-HR』功能设置」中开启「支持对接的 e-HR / OA 系统返回外部链接」开关
	State       *int    `json:"state,omitempty"`        // 导入结果
}

type EhrImportTaskBuilder struct {
	failReason      string // 失败原因，仅在导入结果为失败时可用
	failReasonFlag  bool
	redirectUrl     string // 跳转链接，若需返回跳转链接，请前往飞书招聘「设置 - 生态对接 - e-HR / OA 办公系统 - 『导入 e-HR』功能设置」中开启「支持对接的 e-HR / OA 系统返回外部链接」开关
	redirectUrlFlag bool
	state           int // 导入结果
	stateFlag       bool
}

func NewEhrImportTaskBuilder() *EhrImportTaskBuilder {
	builder := &EhrImportTaskBuilder{}
	return builder
}

// 失败原因，仅在导入结果为失败时可用
//
// 示例值：当前 HC 不可用
func (builder *EhrImportTaskBuilder) FailReason(failReason string) *EhrImportTaskBuilder {
	builder.failReason = failReason
	builder.failReasonFlag = true
	return builder
}

// 跳转链接，若需返回跳转链接，请前往飞书招聘「设置 - 生态对接 - e-HR / OA 办公系统 - 『导入 e-HR』功能设置」中开启「支持对接的 e-HR / OA 系统返回外部链接」开关
//
// 示例值：https://example.com
func (builder *EhrImportTaskBuilder) RedirectUrl(redirectUrl string) *EhrImportTaskBuilder {
	builder.redirectUrl = redirectUrl
	builder.redirectUrlFlag = true
	return builder
}

// 导入结果
//
// 示例值：2
func (builder *EhrImportTaskBuilder) State(state int) *EhrImportTaskBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}

func (builder *EhrImportTaskBuilder) Build() *EhrImportTask {
	req := &EhrImportTask{}
	if builder.failReasonFlag {
		req.FailReason = &builder.failReason

	}
	if builder.redirectUrlFlag {
		req.RedirectUrl = &builder.redirectUrl

	}
	if builder.stateFlag {
		req.State = &builder.state

	}
	return req
}

type Employee struct {
	Id                     *string `json:"id,omitempty"`                       // 员工ID
	ApplicationId          *string `json:"application_id,omitempty"`           // 投递ID
	OnboardStatus          *int    `json:"onboard_status,omitempty"`           // 入职状态
	ConversionStatus       *int    `json:"conversion_status,omitempty"`        // 转正状态
	OnboardTime            *int    `json:"onboard_time,omitempty"`             // 实际入职时间
	ExpectedConversionTime *int    `json:"expected_conversion_time,omitempty"` // 预期转正时间
	ActualConversionTime   *int    `json:"actual_conversion_time,omitempty"`   // 实际转正时间
	OverboardTime          *int    `json:"overboard_time,omitempty"`           // 离职时间
	OverboardNote          *string `json:"overboard_note,omitempty"`           // 离职原因
	OnboardCityCode        *string `json:"onboard_city_code,omitempty"`        // 办公地点
	Department             *string `json:"department,omitempty"`               // 入职部门
	Leader                 *string `json:"leader,omitempty"`                   // 直属上级
	Sequence               *string `json:"sequence,omitempty"`                 // 序列
	Level                  *string `json:"level,omitempty"`                    // 职级
	EmployeeType           *string `json:"employee_type,omitempty"`            // 员工类型
}

type EmployeeBuilder struct {
	id                         string // 员工ID
	idFlag                     bool
	applicationId              string // 投递ID
	applicationIdFlag          bool
	onboardStatus              int // 入职状态
	onboardStatusFlag          bool
	conversionStatus           int // 转正状态
	conversionStatusFlag       bool
	onboardTime                int // 实际入职时间
	onboardTimeFlag            bool
	expectedConversionTime     int // 预期转正时间
	expectedConversionTimeFlag bool
	actualConversionTime       int // 实际转正时间
	actualConversionTimeFlag   bool
	overboardTime              int // 离职时间
	overboardTimeFlag          bool
	overboardNote              string // 离职原因
	overboardNoteFlag          bool
	onboardCityCode            string // 办公地点
	onboardCityCodeFlag        bool
	department                 string // 入职部门
	departmentFlag             bool
	leader                     string // 直属上级
	leaderFlag                 bool
	sequence                   string // 序列
	sequenceFlag               bool
	level                      string // 职级
	levelFlag                  bool
	employeeType               string // 员工类型
	employeeTypeFlag           bool
}

func NewEmployeeBuilder() *EmployeeBuilder {
	builder := &EmployeeBuilder{}
	return builder
}

// 员工ID
//
// 示例值：7095600054216542508
func (builder *EmployeeBuilder) Id(id string) *EmployeeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 投递ID
//
// 示例值：7073372582620416300
func (builder *EmployeeBuilder) ApplicationId(applicationId string) *EmployeeBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 入职状态
//
// 示例值：1
func (builder *EmployeeBuilder) OnboardStatus(onboardStatus int) *EmployeeBuilder {
	builder.onboardStatus = onboardStatus
	builder.onboardStatusFlag = true
	return builder
}

// 转正状态
//
// 示例值：1
func (builder *EmployeeBuilder) ConversionStatus(conversionStatus int) *EmployeeBuilder {
	builder.conversionStatus = conversionStatus
	builder.conversionStatusFlag = true
	return builder
}

// 实际入职时间
//
// 示例值：1637596800000
func (builder *EmployeeBuilder) OnboardTime(onboardTime int) *EmployeeBuilder {
	builder.onboardTime = onboardTime
	builder.onboardTimeFlag = true
	return builder
}

// 预期转正时间
//
// 示例值：1637596800000
func (builder *EmployeeBuilder) ExpectedConversionTime(expectedConversionTime int) *EmployeeBuilder {
	builder.expectedConversionTime = expectedConversionTime
	builder.expectedConversionTimeFlag = true
	return builder
}

// 实际转正时间
//
// 示例值：1637596800000
func (builder *EmployeeBuilder) ActualConversionTime(actualConversionTime int) *EmployeeBuilder {
	builder.actualConversionTime = actualConversionTime
	builder.actualConversionTimeFlag = true
	return builder
}

// 离职时间
//
// 示例值：1637596800000
func (builder *EmployeeBuilder) OverboardTime(overboardTime int) *EmployeeBuilder {
	builder.overboardTime = overboardTime
	builder.overboardTimeFlag = true
	return builder
}

// 离职原因
//
// 示例值：职业发展考虑
func (builder *EmployeeBuilder) OverboardNote(overboardNote string) *EmployeeBuilder {
	builder.overboardNote = overboardNote
	builder.overboardNoteFlag = true
	return builder
}

// 办公地点
//
// 示例值：CT_2
func (builder *EmployeeBuilder) OnboardCityCode(onboardCityCode string) *EmployeeBuilder {
	builder.onboardCityCode = onboardCityCode
	builder.onboardCityCodeFlag = true
	return builder
}

// 入职部门
//
// 示例值：6966123381141866028
func (builder *EmployeeBuilder) Department(department string) *EmployeeBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 直属上级
//
// 示例值：ou-xxx
func (builder *EmployeeBuilder) Leader(leader string) *EmployeeBuilder {
	builder.leader = leader
	builder.leaderFlag = true
	return builder
}

// 序列
//
// 示例值：6937934036379650311
func (builder *EmployeeBuilder) Sequence(sequence string) *EmployeeBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}

// 职级
//
// 示例值：7006234385490345986
func (builder *EmployeeBuilder) Level(level string) *EmployeeBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}

// 员工类型
//
// 示例值：1
func (builder *EmployeeBuilder) EmployeeType(employeeType string) *EmployeeBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}

func (builder *EmployeeBuilder) Build() *Employee {
	req := &Employee{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.onboardStatusFlag {
		req.OnboardStatus = &builder.onboardStatus

	}
	if builder.conversionStatusFlag {
		req.ConversionStatus = &builder.conversionStatus

	}
	if builder.onboardTimeFlag {
		req.OnboardTime = &builder.onboardTime

	}
	if builder.expectedConversionTimeFlag {
		req.ExpectedConversionTime = &builder.expectedConversionTime

	}
	if builder.actualConversionTimeFlag {
		req.ActualConversionTime = &builder.actualConversionTime

	}
	if builder.overboardTimeFlag {
		req.OverboardTime = &builder.overboardTime

	}
	if builder.overboardNoteFlag {
		req.OverboardNote = &builder.overboardNote

	}
	if builder.onboardCityCodeFlag {
		req.OnboardCityCode = &builder.onboardCityCode

	}
	if builder.departmentFlag {
		req.Department = &builder.department

	}
	if builder.leaderFlag {
		req.Leader = &builder.leader

	}
	if builder.sequenceFlag {
		req.Sequence = &builder.sequence

	}
	if builder.levelFlag {
		req.Level = &builder.level

	}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType

	}
	return req
}

type EmployeeConversionInfo struct {
	ActualConversionTime *int `json:"actual_conversion_time,omitempty"` // 实际转正日期
}

type EmployeeConversionInfoBuilder struct {
	actualConversionTime     int // 实际转正日期
	actualConversionTimeFlag bool
}

func NewEmployeeConversionInfoBuilder() *EmployeeConversionInfoBuilder {
	builder := &EmployeeConversionInfoBuilder{}
	return builder
}

// 实际转正日期
//
// 示例值：1637596800000
func (builder *EmployeeConversionInfoBuilder) ActualConversionTime(actualConversionTime int) *EmployeeConversionInfoBuilder {
	builder.actualConversionTime = actualConversionTime
	builder.actualConversionTimeFlag = true
	return builder
}

func (builder *EmployeeConversionInfoBuilder) Build() *EmployeeConversionInfo {
	req := &EmployeeConversionInfo{}
	if builder.actualConversionTimeFlag {
		req.ActualConversionTime = &builder.actualConversionTime

	}
	return req
}

type EmployeeOverboardInfo struct {
	ActualOverboardTime *int    `json:"actual_overboard_time,omitempty"` // 实际离职日期
	OverboardNote       *string `json:"overboard_note,omitempty"`        // 离职原因
}

type EmployeeOverboardInfoBuilder struct {
	actualOverboardTime     int // 实际离职日期
	actualOverboardTimeFlag bool
	overboardNote           string // 离职原因
	overboardNoteFlag       bool
}

func NewEmployeeOverboardInfoBuilder() *EmployeeOverboardInfoBuilder {
	builder := &EmployeeOverboardInfoBuilder{}
	return builder
}

// 实际离职日期
//
// 示例值：1637596800000
func (builder *EmployeeOverboardInfoBuilder) ActualOverboardTime(actualOverboardTime int) *EmployeeOverboardInfoBuilder {
	builder.actualOverboardTime = actualOverboardTime
	builder.actualOverboardTimeFlag = true
	return builder
}

// 离职原因
//
// 示例值：职业发展考虑
func (builder *EmployeeOverboardInfoBuilder) OverboardNote(overboardNote string) *EmployeeOverboardInfoBuilder {
	builder.overboardNote = overboardNote
	builder.overboardNoteFlag = true
	return builder
}

func (builder *EmployeeOverboardInfoBuilder) Build() *EmployeeOverboardInfo {
	req := &EmployeeOverboardInfo{}
	if builder.actualOverboardTimeFlag {
		req.ActualOverboardTime = &builder.actualOverboardTime

	}
	if builder.overboardNoteFlag {
		req.OverboardNote = &builder.overboardNote

	}
	return req
}

type Evaluation struct {
	Id            *string `json:"id,omitempty"`             // 评估 ID
	ApplicationId *string `json:"application_id,omitempty"` // 投递 ID
	StageId       *string `json:"stage_id,omitempty"`       // 投递阶段
	CreatorId     *string `json:"creator_id,omitempty"`     // 创建人user_id
	EvaluatorId   *string `json:"evaluator_id,omitempty"`   // 评估人user_id
	CommitStatus  *int    `json:"commit_status,omitempty"`  // 提交状态
	Conclusion    *int    `json:"conclusion,omitempty"`     // 评估结论
	Content       *string `json:"content,omitempty"`        // 评估详情
	CreateTime    *string `json:"create_time,omitempty"`    // 创建时间
	UpdateTime    *string `json:"update_time,omitempty"`    // 最近更新时间
}

type EvaluationBuilder struct {
	id                string // 评估 ID
	idFlag            bool
	applicationId     string // 投递 ID
	applicationIdFlag bool
	stageId           string // 投递阶段
	stageIdFlag       bool
	creatorId         string // 创建人user_id
	creatorIdFlag     bool
	evaluatorId       string // 评估人user_id
	evaluatorIdFlag   bool
	commitStatus      int // 提交状态
	commitStatusFlag  bool
	conclusion        int // 评估结论
	conclusionFlag    bool
	content           string // 评估详情
	contentFlag       bool
	createTime        string // 创建时间
	createTimeFlag    bool
	updateTime        string // 最近更新时间
	updateTimeFlag    bool
}

func NewEvaluationBuilder() *EvaluationBuilder {
	builder := &EvaluationBuilder{}
	return builder
}

// 评估 ID
//
// 示例值：6875295756292425998
func (builder *EvaluationBuilder) Id(id string) *EvaluationBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 投递 ID
//
// 示例值：6875569957036738823
func (builder *EvaluationBuilder) ApplicationId(applicationId string) *EvaluationBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 投递阶段
//
// 示例值：6784315427607595268
func (builder *EvaluationBuilder) StageId(stageId string) *EvaluationBuilder {
	builder.stageId = stageId
	builder.stageIdFlag = true
	return builder
}

// 创建人user_id
//
// 示例值：ou_aaf83d1b2c856ead36aa9a38784b9a5c
func (builder *EvaluationBuilder) CreatorId(creatorId string) *EvaluationBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}

// 评估人user_id
//
// 示例值：ou_aaf83d1b2c856ead36aa9a38784b9a5c
func (builder *EvaluationBuilder) EvaluatorId(evaluatorId string) *EvaluationBuilder {
	builder.evaluatorId = evaluatorId
	builder.evaluatorIdFlag = true
	return builder
}

// 提交状态
//
// 示例值：1
func (builder *EvaluationBuilder) CommitStatus(commitStatus int) *EvaluationBuilder {
	builder.commitStatus = commitStatus
	builder.commitStatusFlag = true
	return builder
}

// 评估结论
//
// 示例值：1
func (builder *EvaluationBuilder) Conclusion(conclusion int) *EvaluationBuilder {
	builder.conclusion = conclusion
	builder.conclusionFlag = true
	return builder
}

// 评估详情
//
// 示例值：这位同学很优秀
func (builder *EvaluationBuilder) Content(content string) *EvaluationBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 创建时间
//
// 示例值：1600843767338
func (builder *EvaluationBuilder) CreateTime(createTime string) *EvaluationBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 最近更新时间
//
// 示例值：1600843937733
func (builder *EvaluationBuilder) UpdateTime(updateTime string) *EvaluationBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}

func (builder *EvaluationBuilder) Build() *Evaluation {
	req := &Evaluation{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.stageIdFlag {
		req.StageId = &builder.stageId

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.evaluatorIdFlag {
		req.EvaluatorId = &builder.evaluatorId

	}
	if builder.commitStatusFlag {
		req.CommitStatus = &builder.commitStatus

	}
	if builder.conclusionFlag {
		req.Conclusion = &builder.conclusion

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	return req
}

type EvaluationTask struct {
	Id             *string `json:"id,omitempty"`              // 评估 ID
	JobId          *string `json:"job_id,omitempty"`          // 职位 ID
	TalentId       *string `json:"talent_id,omitempty"`       // 人才 ID
	ApplicationId  *string `json:"application_id,omitempty"`  // 投递 ID
	ActivityStatus *int    `json:"activity_status,omitempty"` // 任务状态
}

type EvaluationTaskBuilder struct {
	id                 string // 评估 ID
	idFlag             bool
	jobId              string // 职位 ID
	jobIdFlag          bool
	talentId           string // 人才 ID
	talentIdFlag       bool
	applicationId      string // 投递 ID
	applicationIdFlag  bool
	activityStatus     int // 任务状态
	activityStatusFlag bool
}

func NewEvaluationTaskBuilder() *EvaluationTaskBuilder {
	builder := &EvaluationTaskBuilder{}
	return builder
}

// 评估 ID
//
// 示例值：6989202908470446380
func (builder *EvaluationTaskBuilder) Id(id string) *EvaluationTaskBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职位 ID
//
// 示例值：6897921873523247373
func (builder *EvaluationTaskBuilder) JobId(jobId string) *EvaluationTaskBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 人才 ID
//
// 示例值：7046263097923537196
func (builder *EvaluationTaskBuilder) TalentId(talentId string) *EvaluationTaskBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 投递 ID
//
// 示例值：7046315599510833452
func (builder *EvaluationTaskBuilder) ApplicationId(applicationId string) *EvaluationTaskBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 任务状态
//
// 示例值：1
func (builder *EvaluationTaskBuilder) ActivityStatus(activityStatus int) *EvaluationTaskBuilder {
	builder.activityStatus = activityStatus
	builder.activityStatusFlag = true
	return builder
}

func (builder *EvaluationTaskBuilder) Build() *EvaluationTask {
	req := &EvaluationTask{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.activityStatusFlag {
		req.ActivityStatus = &builder.activityStatus

	}
	return req
}

type ExamMarkingTask struct {
	Id             *string `json:"id,omitempty"`              // 笔试 ID
	JobId          *string `json:"job_id,omitempty"`          // 职位 ID
	TalentId       *string `json:"talent_id,omitempty"`       // 人才 ID
	ApplicationId  *string `json:"application_id,omitempty"`  // 投递 ID
	ActivityStatus *int    `json:"activity_status,omitempty"` // 任务状态
}

type ExamMarkingTaskBuilder struct {
	id                 string // 笔试 ID
	idFlag             bool
	jobId              string // 职位 ID
	jobIdFlag          bool
	talentId           string // 人才 ID
	talentIdFlag       bool
	applicationId      string // 投递 ID
	applicationIdFlag  bool
	activityStatus     int // 任务状态
	activityStatusFlag bool
}

func NewExamMarkingTaskBuilder() *ExamMarkingTaskBuilder {
	builder := &ExamMarkingTaskBuilder{}
	return builder
}

// 笔试 ID
//
// 示例值：6989202908470446380
func (builder *ExamMarkingTaskBuilder) Id(id string) *ExamMarkingTaskBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职位 ID
//
// 示例值：6897921873523247373
func (builder *ExamMarkingTaskBuilder) JobId(jobId string) *ExamMarkingTaskBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 人才 ID
//
// 示例值：7046263097923537196
func (builder *ExamMarkingTaskBuilder) TalentId(talentId string) *ExamMarkingTaskBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 投递 ID
//
// 示例值：7046315599510833452
func (builder *ExamMarkingTaskBuilder) ApplicationId(applicationId string) *ExamMarkingTaskBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 任务状态
//
// 示例值：1
func (builder *ExamMarkingTaskBuilder) ActivityStatus(activityStatus int) *ExamMarkingTaskBuilder {
	builder.activityStatus = activityStatus
	builder.activityStatusFlag = true
	return builder
}

func (builder *ExamMarkingTaskBuilder) Build() *ExamMarkingTask {
	req := &ExamMarkingTask{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.activityStatusFlag {
		req.ActivityStatus = &builder.activityStatus

	}
	return req
}

type ExternalApplication struct {
	Id                 *string `json:"id,omitempty"`                   // 外部投递 ID
	ExternalId         *string `json:"external_id,omitempty"`          // 外部系统投递主键 （仅用于幂等）
	JobRecruitmentType *int    `json:"job_recruitment_type,omitempty"` // 职位招聘类型
	JobTitle           *string `json:"job_title,omitempty"`            // 职位名称
	ResumeSource       *string `json:"resume_source,omitempty"`        // 简历来源
	Stage              *string `json:"stage,omitempty"`                // 阶段
	TalentId           *string `json:"talent_id,omitempty"`            // 人才 ID
	TerminationReason  *string `json:"termination_reason,omitempty"`   // 终止原因
	DeliveryType       *int    `json:"delivery_type,omitempty"`        // 投递类型
	ModifyTime         *int    `json:"modify_time,omitempty"`          // 更新时间
	TerminationType    *string `json:"termination_type,omitempty"`     // 终止类型
}

type ExternalApplicationBuilder struct {
	id                     string // 外部投递 ID
	idFlag                 bool
	externalId             string // 外部系统投递主键 （仅用于幂等）
	externalIdFlag         bool
	jobRecruitmentType     int // 职位招聘类型
	jobRecruitmentTypeFlag bool
	jobTitle               string // 职位名称
	jobTitleFlag           bool
	resumeSource           string // 简历来源
	resumeSourceFlag       bool
	stage                  string // 阶段
	stageFlag              bool
	talentId               string // 人才 ID
	talentIdFlag           bool
	terminationReason      string // 终止原因
	terminationReasonFlag  bool
	deliveryType           int // 投递类型
	deliveryTypeFlag       bool
	modifyTime             int // 更新时间
	modifyTimeFlag         bool
	terminationType        string // 终止类型
	terminationTypeFlag    bool
}

func NewExternalApplicationBuilder() *ExternalApplicationBuilder {
	builder := &ExternalApplicationBuilder{}
	return builder
}

// 外部投递 ID
//
// 示例值：6989202908470446380
func (builder *ExternalApplicationBuilder) Id(id string) *ExternalApplicationBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 外部系统投递主键 （仅用于幂等）
//
// 示例值：123
func (builder *ExternalApplicationBuilder) ExternalId(externalId string) *ExternalApplicationBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}

// 职位招聘类型
//
// 示例值：1
func (builder *ExternalApplicationBuilder) JobRecruitmentType(jobRecruitmentType int) *ExternalApplicationBuilder {
	builder.jobRecruitmentType = jobRecruitmentType
	builder.jobRecruitmentTypeFlag = true
	return builder
}

// 职位名称
//
// 示例值：高级Java
func (builder *ExternalApplicationBuilder) JobTitle(jobTitle string) *ExternalApplicationBuilder {
	builder.jobTitle = jobTitle
	builder.jobTitleFlag = true
	return builder
}

// 简历来源
//
// 示例值：lagou
func (builder *ExternalApplicationBuilder) ResumeSource(resumeSource string) *ExternalApplicationBuilder {
	builder.resumeSource = resumeSource
	builder.resumeSourceFlag = true
	return builder
}

// 阶段
//
// 示例值：1
func (builder *ExternalApplicationBuilder) Stage(stage string) *ExternalApplicationBuilder {
	builder.stage = stage
	builder.stageFlag = true
	return builder
}

// 人才 ID
//
// 示例值：6960663240925956459
func (builder *ExternalApplicationBuilder) TalentId(talentId string) *ExternalApplicationBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 终止原因
//
// 示例值：不合适
func (builder *ExternalApplicationBuilder) TerminationReason(terminationReason string) *ExternalApplicationBuilder {
	builder.terminationReason = terminationReason
	builder.terminationReasonFlag = true
	return builder
}

// 投递类型
//
// 示例值：1
func (builder *ExternalApplicationBuilder) DeliveryType(deliveryType int) *ExternalApplicationBuilder {
	builder.deliveryType = deliveryType
	builder.deliveryTypeFlag = true
	return builder
}

// 更新时间
//
// 示例值：1618500278645
func (builder *ExternalApplicationBuilder) ModifyTime(modifyTime int) *ExternalApplicationBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

// 终止类型
//
// 示例值：health
func (builder *ExternalApplicationBuilder) TerminationType(terminationType string) *ExternalApplicationBuilder {
	builder.terminationType = terminationType
	builder.terminationTypeFlag = true
	return builder
}

func (builder *ExternalApplicationBuilder) Build() *ExternalApplication {
	req := &ExternalApplication{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.jobRecruitmentTypeFlag {
		req.JobRecruitmentType = &builder.jobRecruitmentType

	}
	if builder.jobTitleFlag {
		req.JobTitle = &builder.jobTitle

	}
	if builder.resumeSourceFlag {
		req.ResumeSource = &builder.resumeSource

	}
	if builder.stageFlag {
		req.Stage = &builder.stage

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.terminationReasonFlag {
		req.TerminationReason = &builder.terminationReason

	}
	if builder.deliveryTypeFlag {
		req.DeliveryType = &builder.deliveryType

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.terminationTypeFlag {
		req.TerminationType = &builder.terminationType

	}
	return req
}

type ExternalBackgroundCheck struct {
	Id                    *string                              `json:"id,omitempty"`                      // 外部背调 ID
	ExternalId            *string                              `json:"external_id,omitempty"`             // 外部系统背调主键 （仅用于幂等）
	ExternalApplicationId *string                              `json:"external_application_id,omitempty"` // 外部投递 ID
	Date                  *int                                 `json:"date,omitempty"`                    // 背调日期
	Name                  *string                              `json:"name,omitempty"`                    // 背调名字
	Result                *string                              `json:"result,omitempty"`                  // 背调结果
	AttachmentIdList      []string                             `json:"attachment_id_list,omitempty"`      // 背调附件ID列表
	AttachmentList        []*ExternalBackgroundCheckAttachment `json:"attachment_list,omitempty"`         // 背调附件
}

type ExternalBackgroundCheckBuilder struct {
	id                        string // 外部背调 ID
	idFlag                    bool
	externalId                string // 外部系统背调主键 （仅用于幂等）
	externalIdFlag            bool
	externalApplicationId     string // 外部投递 ID
	externalApplicationIdFlag bool
	date                      int // 背调日期
	dateFlag                  bool
	name                      string // 背调名字
	nameFlag                  bool
	result                    string // 背调结果
	resultFlag                bool
	attachmentIdList          []string // 背调附件ID列表
	attachmentIdListFlag      bool
	attachmentList            []*ExternalBackgroundCheckAttachment // 背调附件
	attachmentListFlag        bool
}

func NewExternalBackgroundCheckBuilder() *ExternalBackgroundCheckBuilder {
	builder := &ExternalBackgroundCheckBuilder{}
	return builder
}

// 外部背调 ID
//
// 示例值：6989202908470446380
func (builder *ExternalBackgroundCheckBuilder) Id(id string) *ExternalBackgroundCheckBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 外部系统背调主键 （仅用于幂等）
//
// 示例值：123
func (builder *ExternalBackgroundCheckBuilder) ExternalId(externalId string) *ExternalBackgroundCheckBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}

// 外部投递 ID
//
// 示例值：1234111
func (builder *ExternalBackgroundCheckBuilder) ExternalApplicationId(externalApplicationId string) *ExternalBackgroundCheckBuilder {
	builder.externalApplicationId = externalApplicationId
	builder.externalApplicationIdFlag = true
	return builder
}

// 背调日期
//
// 示例值：1626602069393
func (builder *ExternalBackgroundCheckBuilder) Date(date int) *ExternalBackgroundCheckBuilder {
	builder.date = date
	builder.dateFlag = true
	return builder
}

// 背调名字
//
// 示例值：测试.pdf
func (builder *ExternalBackgroundCheckBuilder) Name(name string) *ExternalBackgroundCheckBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 背调结果
//
// 示例值：1
func (builder *ExternalBackgroundCheckBuilder) Result(result string) *ExternalBackgroundCheckBuilder {
	builder.result = result
	builder.resultFlag = true
	return builder
}

// 背调附件ID列表
//
// 示例值：6989181065243969836
func (builder *ExternalBackgroundCheckBuilder) AttachmentIdList(attachmentIdList []string) *ExternalBackgroundCheckBuilder {
	builder.attachmentIdList = attachmentIdList
	builder.attachmentIdListFlag = true
	return builder
}

// 背调附件
//
// 示例值：
func (builder *ExternalBackgroundCheckBuilder) AttachmentList(attachmentList []*ExternalBackgroundCheckAttachment) *ExternalBackgroundCheckBuilder {
	builder.attachmentList = attachmentList
	builder.attachmentListFlag = true
	return builder
}

func (builder *ExternalBackgroundCheckBuilder) Build() *ExternalBackgroundCheck {
	req := &ExternalBackgroundCheck{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.externalApplicationIdFlag {
		req.ExternalApplicationId = &builder.externalApplicationId

	}
	if builder.dateFlag {
		req.Date = &builder.date

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.resultFlag {
		req.Result = &builder.result

	}
	if builder.attachmentIdListFlag {
		req.AttachmentIdList = builder.attachmentIdList
	}
	if builder.attachmentListFlag {
		req.AttachmentList = builder.attachmentList
	}
	return req
}

type ExternalBackgroundCheckAttachment struct {
	Id   *string `json:"id,omitempty"`   // 附件 ID
	Name *string `json:"name,omitempty"` // 附件名字
	Size *int    `json:"size,omitempty"` // 附件大小
}

type ExternalBackgroundCheckAttachmentBuilder struct {
	id       string // 附件 ID
	idFlag   bool
	name     string // 附件名字
	nameFlag bool
	size     int // 附件大小
	sizeFlag bool
}

func NewExternalBackgroundCheckAttachmentBuilder() *ExternalBackgroundCheckAttachmentBuilder {
	builder := &ExternalBackgroundCheckAttachmentBuilder{}
	return builder
}

// 附件 ID
//
// 示例值：6987954043925432620
func (builder *ExternalBackgroundCheckAttachmentBuilder) Id(id string) *ExternalBackgroundCheckAttachmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 附件名字
//
// 示例值：test_resume.pdf
func (builder *ExternalBackgroundCheckAttachmentBuilder) Name(name string) *ExternalBackgroundCheckAttachmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 附件大小
//
// 示例值：126371
func (builder *ExternalBackgroundCheckAttachmentBuilder) Size(size int) *ExternalBackgroundCheckAttachmentBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}

func (builder *ExternalBackgroundCheckAttachmentBuilder) Build() *ExternalBackgroundCheckAttachment {
	req := &ExternalBackgroundCheckAttachment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.sizeFlag {
		req.Size = &builder.size

	}
	return req
}

type ExternalGrantRoleInfo struct {
	RoleId *string `json:"role_id,omitempty"` // 角色ID
}

type ExternalGrantRoleInfoBuilder struct {
	roleId     string // 角色ID
	roleIdFlag bool
}

func NewExternalGrantRoleInfoBuilder() *ExternalGrantRoleInfoBuilder {
	builder := &ExternalGrantRoleInfoBuilder{}
	return builder
}

// 角色ID
//
// 示例值：1001
func (builder *ExternalGrantRoleInfoBuilder) RoleId(roleId string) *ExternalGrantRoleInfoBuilder {
	builder.roleId = roleId
	builder.roleIdFlag = true
	return builder
}

func (builder *ExternalGrantRoleInfoBuilder) Build() *ExternalGrantRoleInfo {
	req := &ExternalGrantRoleInfo{}
	if builder.roleIdFlag {
		req.RoleId = &builder.roleId

	}
	return req
}

type ExternalInterview struct {
	ExternalId            *string `json:"external_id,omitempty"`             // 外部系统面试主键 （仅用于幂等）
	ExternalApplicationId *string `json:"external_application_id,omitempty"` // 外部投递 ID
	Id                    *string `json:"id,omitempty"`                      // 外部面试 ID
	ParticipateStatus     *int    `json:"participate_status,omitempty"`      // 参与状态
	BeginTime             *int    `json:"begin_time,omitempty"`              // 开始时间
	EndTime               *int    `json:"end_time,omitempty"`                // 结束时间
}

type ExternalInterviewBuilder struct {
	externalId                string // 外部系统面试主键 （仅用于幂等）
	externalIdFlag            bool
	externalApplicationId     string // 外部投递 ID
	externalApplicationIdFlag bool
	id                        string // 外部面试 ID
	idFlag                    bool
	participateStatus         int // 参与状态
	participateStatusFlag     bool
	beginTime                 int // 开始时间
	beginTimeFlag             bool
	endTime                   int // 结束时间
	endTimeFlag               bool
}

func NewExternalInterviewBuilder() *ExternalInterviewBuilder {
	builder := &ExternalInterviewBuilder{}
	return builder
}

// 外部系统面试主键 （仅用于幂等）
//
// 示例值：123
func (builder *ExternalInterviewBuilder) ExternalId(externalId string) *ExternalInterviewBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}

// 外部投递 ID
//
// 示例值：6960663240925956437
func (builder *ExternalInterviewBuilder) ExternalApplicationId(externalApplicationId string) *ExternalInterviewBuilder {
	builder.externalApplicationId = externalApplicationId
	builder.externalApplicationIdFlag = true
	return builder
}

// 外部面试 ID
//
// 示例值：6960663240925956436
func (builder *ExternalInterviewBuilder) Id(id string) *ExternalInterviewBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 参与状态
//
// 示例值：1
func (builder *ExternalInterviewBuilder) ParticipateStatus(participateStatus int) *ExternalInterviewBuilder {
	builder.participateStatus = participateStatus
	builder.participateStatusFlag = true
	return builder
}

// 开始时间
//
// 示例值：1618500278638
func (builder *ExternalInterviewBuilder) BeginTime(beginTime int) *ExternalInterviewBuilder {
	builder.beginTime = beginTime
	builder.beginTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：1618500278639
func (builder *ExternalInterviewBuilder) EndTime(endTime int) *ExternalInterviewBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *ExternalInterviewBuilder) Build() *ExternalInterview {
	req := &ExternalInterview{}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.externalApplicationIdFlag {
		req.ExternalApplicationId = &builder.externalApplicationId

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.participateStatusFlag {
		req.ParticipateStatus = &builder.participateStatus

	}
	if builder.beginTimeFlag {
		req.BeginTime = &builder.beginTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

type ExternalInterviewAssessment struct {
	Id                      *string                                 `json:"id,omitempty"`                        // 外部面评 ID
	ExternalId              *string                                 `json:"external_id,omitempty"`               // 外部系统面评主键（仅用于幂等）
	Username                *string                                 `json:"username,omitempty"`                  // 面试官姓名
	Conclusion              *int                                    `json:"conclusion,omitempty"`                // 面试结果
	AssessmentDimensionList []*ExternalInterviewAssessmentDimension `json:"assessment_dimension_list,omitempty"` // 评价维度列表
	Content                 *string                                 `json:"content,omitempty"`                   // 综合记录
	ExternalInterviewId     *string                                 `json:"external_interview_id,omitempty"`     // 外部面试 ID
}

type ExternalInterviewAssessmentBuilder struct {
	id                          string // 外部面评 ID
	idFlag                      bool
	externalId                  string // 外部系统面评主键（仅用于幂等）
	externalIdFlag              bool
	username                    string // 面试官姓名
	usernameFlag                bool
	conclusion                  int // 面试结果
	conclusionFlag              bool
	assessmentDimensionList     []*ExternalInterviewAssessmentDimension // 评价维度列表
	assessmentDimensionListFlag bool
	content                     string // 综合记录
	contentFlag                 bool
	externalInterviewId         string // 外部面试 ID
	externalInterviewIdFlag     bool
}

func NewExternalInterviewAssessmentBuilder() *ExternalInterviewAssessmentBuilder {
	builder := &ExternalInterviewAssessmentBuilder{}
	return builder
}

// 外部面评 ID
//
// 示例值：6989181065243969836
func (builder *ExternalInterviewAssessmentBuilder) Id(id string) *ExternalInterviewAssessmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 外部系统面评主键（仅用于幂等）
//
// 示例值：123
func (builder *ExternalInterviewAssessmentBuilder) ExternalId(externalId string) *ExternalInterviewAssessmentBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}

// 面试官姓名
//
// 示例值：shaojiale
func (builder *ExternalInterviewAssessmentBuilder) Username(username string) *ExternalInterviewAssessmentBuilder {
	builder.username = username
	builder.usernameFlag = true
	return builder
}

// 面试结果
//
// 示例值：1
func (builder *ExternalInterviewAssessmentBuilder) Conclusion(conclusion int) *ExternalInterviewAssessmentBuilder {
	builder.conclusion = conclusion
	builder.conclusionFlag = true
	return builder
}

// 评价维度列表
//
// 示例值：
func (builder *ExternalInterviewAssessmentBuilder) AssessmentDimensionList(assessmentDimensionList []*ExternalInterviewAssessmentDimension) *ExternalInterviewAssessmentBuilder {
	builder.assessmentDimensionList = assessmentDimensionList
	builder.assessmentDimensionListFlag = true
	return builder
}

// 综合记录
//
// 示例值：hello world
func (builder *ExternalInterviewAssessmentBuilder) Content(content string) *ExternalInterviewAssessmentBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 外部面试 ID
//
// 示例值：6986199832494934316
func (builder *ExternalInterviewAssessmentBuilder) ExternalInterviewId(externalInterviewId string) *ExternalInterviewAssessmentBuilder {
	builder.externalInterviewId = externalInterviewId
	builder.externalInterviewIdFlag = true
	return builder
}

func (builder *ExternalInterviewAssessmentBuilder) Build() *ExternalInterviewAssessment {
	req := &ExternalInterviewAssessment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.usernameFlag {
		req.Username = &builder.username

	}
	if builder.conclusionFlag {
		req.Conclusion = &builder.conclusion

	}
	if builder.assessmentDimensionListFlag {
		req.AssessmentDimensionList = builder.assessmentDimensionList
	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.externalInterviewIdFlag {
		req.ExternalInterviewId = &builder.externalInterviewId

	}
	return req
}

type ExternalInterviewAssessmentDimension struct {
	Score          *int     `json:"score,omitempty"`           // 打分题分数（当题目类型为「打分题」时使用）
	Option         *string  `json:"option,omitempty"`          // 单选选项（当题目类型为「单选题」时使用）
	Options        []string `json:"options,omitempty"`         // 多选选项（当题目类型为「多选题」时使用）
	Content        *string  `json:"content,omitempty"`         // 描述内容（当题目类型为「描述题」时使用）
	AssessmentType *int     `json:"assessment_type,omitempty"` // 题目类型
	Title          *string  `json:"title,omitempty"`           // 题目标题
	Description    *string  `json:"description,omitempty"`     // 题目描述
}

type ExternalInterviewAssessmentDimensionBuilder struct {
	score              int // 打分题分数（当题目类型为「打分题」时使用）
	scoreFlag          bool
	option             string // 单选选项（当题目类型为「单选题」时使用）
	optionFlag         bool
	options            []string // 多选选项（当题目类型为「多选题」时使用）
	optionsFlag        bool
	content            string // 描述内容（当题目类型为「描述题」时使用）
	contentFlag        bool
	assessmentType     int // 题目类型
	assessmentTypeFlag bool
	title              string // 题目标题
	titleFlag          bool
	description        string // 题目描述
	descriptionFlag    bool
}

func NewExternalInterviewAssessmentDimensionBuilder() *ExternalInterviewAssessmentDimensionBuilder {
	builder := &ExternalInterviewAssessmentDimensionBuilder{}
	return builder
}

// 打分题分数（当题目类型为「打分题」时使用）
//
// 示例值：99
func (builder *ExternalInterviewAssessmentDimensionBuilder) Score(score int) *ExternalInterviewAssessmentDimensionBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}

// 单选选项（当题目类型为「单选题」时使用）
//
// 示例值：opt
func (builder *ExternalInterviewAssessmentDimensionBuilder) Option(option string) *ExternalInterviewAssessmentDimensionBuilder {
	builder.option = option
	builder.optionFlag = true
	return builder
}

// 多选选项（当题目类型为「多选题」时使用）
//
// 示例值：6989181065243969836
func (builder *ExternalInterviewAssessmentDimensionBuilder) Options(options []string) *ExternalInterviewAssessmentDimensionBuilder {
	builder.options = options
	builder.optionsFlag = true
	return builder
}

// 描述内容（当题目类型为「描述题」时使用）
//
// 示例值：content
func (builder *ExternalInterviewAssessmentDimensionBuilder) Content(content string) *ExternalInterviewAssessmentDimensionBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 题目类型
//
// 示例值：1
func (builder *ExternalInterviewAssessmentDimensionBuilder) AssessmentType(assessmentType int) *ExternalInterviewAssessmentDimensionBuilder {
	builder.assessmentType = assessmentType
	builder.assessmentTypeFlag = true
	return builder
}

// 题目标题
//
// 示例值：title
func (builder *ExternalInterviewAssessmentDimensionBuilder) Title(title string) *ExternalInterviewAssessmentDimensionBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 题目描述
//
// 示例值：desc
func (builder *ExternalInterviewAssessmentDimensionBuilder) Description(description string) *ExternalInterviewAssessmentDimensionBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *ExternalInterviewAssessmentDimensionBuilder) Build() *ExternalInterviewAssessmentDimension {
	req := &ExternalInterviewAssessmentDimension{}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.optionFlag {
		req.Option = &builder.option

	}
	if builder.optionsFlag {
		req.Options = builder.options
	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.assessmentTypeFlag {
		req.AssessmentType = &builder.assessmentType

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

type FiveStartScoringResult struct {
	HighestScoreDesc   *string  `json:"highest_score_desc,omitempty"`    // 最高分中文描述
	HighestScoreEnDesc *string  `json:"highest_score_en_desc,omitempty"` // 最高分英文描述
	LowestScoreDesc    *string  `json:"lowest_score_desc,omitempty"`     // 最低分中文描述
	LowestScoreEnDesc  *string  `json:"lowest_score_en_desc,omitempty"`  // 最低分英文描述
	ScoreResult        *float64 `json:"score_result,omitempty"`          // 评分分数
}

type FiveStartScoringResultBuilder struct {
	highestScoreDesc       string // 最高分中文描述
	highestScoreDescFlag   bool
	highestScoreEnDesc     string // 最高分英文描述
	highestScoreEnDescFlag bool
	lowestScoreDesc        string // 最低分中文描述
	lowestScoreDescFlag    bool
	lowestScoreEnDesc      string // 最低分英文描述
	lowestScoreEnDescFlag  bool
	scoreResult            float64 // 评分分数
	scoreResultFlag        bool
}

func NewFiveStartScoringResultBuilder() *FiveStartScoringResultBuilder {
	builder := &FiveStartScoringResultBuilder{}
	return builder
}

// 最高分中文描述
//
// 示例值：非常好
func (builder *FiveStartScoringResultBuilder) HighestScoreDesc(highestScoreDesc string) *FiveStartScoringResultBuilder {
	builder.highestScoreDesc = highestScoreDesc
	builder.highestScoreDescFlag = true
	return builder
}

// 最高分英文描述
//
// 示例值：Very Good
func (builder *FiveStartScoringResultBuilder) HighestScoreEnDesc(highestScoreEnDesc string) *FiveStartScoringResultBuilder {
	builder.highestScoreEnDesc = highestScoreEnDesc
	builder.highestScoreEnDescFlag = true
	return builder
}

// 最低分中文描述
//
// 示例值：非常差
func (builder *FiveStartScoringResultBuilder) LowestScoreDesc(lowestScoreDesc string) *FiveStartScoringResultBuilder {
	builder.lowestScoreDesc = lowestScoreDesc
	builder.lowestScoreDescFlag = true
	return builder
}

// 最低分英文描述
//
// 示例值：Very Bad
func (builder *FiveStartScoringResultBuilder) LowestScoreEnDesc(lowestScoreEnDesc string) *FiveStartScoringResultBuilder {
	builder.lowestScoreEnDesc = lowestScoreEnDesc
	builder.lowestScoreEnDescFlag = true
	return builder
}

// 评分分数
//
// 示例值：4
func (builder *FiveStartScoringResultBuilder) ScoreResult(scoreResult float64) *FiveStartScoringResultBuilder {
	builder.scoreResult = scoreResult
	builder.scoreResultFlag = true
	return builder
}

func (builder *FiveStartScoringResultBuilder) Build() *FiveStartScoringResult {
	req := &FiveStartScoringResult{}
	if builder.highestScoreDescFlag {
		req.HighestScoreDesc = &builder.highestScoreDesc

	}
	if builder.highestScoreEnDescFlag {
		req.HighestScoreEnDesc = &builder.highestScoreEnDesc

	}
	if builder.lowestScoreDescFlag {
		req.LowestScoreDesc = &builder.lowestScoreDesc

	}
	if builder.lowestScoreEnDescFlag {
		req.LowestScoreEnDesc = &builder.lowestScoreEnDesc

	}
	if builder.scoreResultFlag {
		req.ScoreResult = &builder.scoreResult

	}
	return req
}

type I18n struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 中文
	EnUs *string `json:"en_us,omitempty"` // 英文
}

type I18nBuilder struct {
	zhCn     string // 中文
	zhCnFlag bool
	enUs     string // 英文
	enUsFlag bool
}

func NewI18nBuilder() *I18nBuilder {
	builder := &I18nBuilder{}
	return builder
}

// 中文
//
// 示例值：测试
func (builder *I18nBuilder) ZhCn(zhCn string) *I18nBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}

// 英文
//
// 示例值：test
func (builder *I18nBuilder) EnUs(enUs string) *I18nBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *I18nBuilder) Build() *I18n {
	req := &I18n{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

type IdNameObject struct {
	Id   *string `json:"id,omitempty"`   // ID
	Name *I18n   `json:"name,omitempty"` // 名称
}

type IdNameObjectBuilder struct {
	id       string // ID
	idFlag   bool
	name     *I18n // 名称
	nameFlag bool
}

func NewIdNameObjectBuilder() *IdNameObjectBuilder {
	builder := &IdNameObjectBuilder{}
	return builder
}

// ID
//
// 示例值：1213213123123
func (builder *IdNameObjectBuilder) Id(id string) *IdNameObjectBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *IdNameObjectBuilder) Name(name *I18n) *IdNameObjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *IdNameObjectBuilder) Build() *IdNameObject {
	req := &IdNameObject{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type Identification struct {
	IdentificationNumber *string `json:"identification_number,omitempty"` // 证件号码
	IdentificationType   *int    `json:"identification_type,omitempty"`   // 证件类型
}

type IdentificationBuilder struct {
	identificationNumber     string // 证件号码
	identificationNumberFlag bool
	identificationType       int // 证件类型
	identificationTypeFlag   bool
}

func NewIdentificationBuilder() *IdentificationBuilder {
	builder := &IdentificationBuilder{}
	return builder
}

// 证件号码
//
// 示例值：
func (builder *IdentificationBuilder) IdentificationNumber(identificationNumber string) *IdentificationBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}

// 证件类型
//
// 示例值：
func (builder *IdentificationBuilder) IdentificationType(identificationType int) *IdentificationBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

func (builder *IdentificationBuilder) Build() *Identification {
	req := &Identification{}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	return req
}

type InternOfferOffboardingInfo struct {
	ActualOffboardingDate *string `json:"actual_offboarding_date,omitempty"` // 实际离职日期（实际离职日期需晚于实际入职日期）
	Notes                 *string `json:"notes,omitempty"`                   // 备注
}

type InternOfferOffboardingInfoBuilder struct {
	actualOffboardingDate     string // 实际离职日期（实际离职日期需晚于实际入职日期）
	actualOffboardingDateFlag bool
	notes                     string // 备注
	notesFlag                 bool
}

func NewInternOfferOffboardingInfoBuilder() *InternOfferOffboardingInfoBuilder {
	builder := &InternOfferOffboardingInfoBuilder{}
	return builder
}

// 实际离职日期（实际离职日期需晚于实际入职日期）
//
// 示例值：2022-03-02
func (builder *InternOfferOffboardingInfoBuilder) ActualOffboardingDate(actualOffboardingDate string) *InternOfferOffboardingInfoBuilder {
	builder.actualOffboardingDate = actualOffboardingDate
	builder.actualOffboardingDateFlag = true
	return builder
}

// 备注
//
// 示例值：主动离职
func (builder *InternOfferOffboardingInfoBuilder) Notes(notes string) *InternOfferOffboardingInfoBuilder {
	builder.notes = notes
	builder.notesFlag = true
	return builder
}

func (builder *InternOfferOffboardingInfoBuilder) Build() *InternOfferOffboardingInfo {
	req := &InternOfferOffboardingInfo{}
	if builder.actualOffboardingDateFlag {
		req.ActualOffboardingDate = &builder.actualOffboardingDate

	}
	if builder.notesFlag {
		req.Notes = &builder.notes

	}
	return req
}

type InternOfferOnboardingInfo struct {
	ActualOnboardingDate *string `json:"actual_onboarding_date,omitempty"` // 实际入职日期
}

type InternOfferOnboardingInfoBuilder struct {
	actualOnboardingDate     string // 实际入职日期
	actualOnboardingDateFlag bool
}

func NewInternOfferOnboardingInfoBuilder() *InternOfferOnboardingInfoBuilder {
	builder := &InternOfferOnboardingInfoBuilder{}
	return builder
}

// 实际入职日期
//
// 示例值：2022-01-01
func (builder *InternOfferOnboardingInfoBuilder) ActualOnboardingDate(actualOnboardingDate string) *InternOfferOnboardingInfoBuilder {
	builder.actualOnboardingDate = actualOnboardingDate
	builder.actualOnboardingDateFlag = true
	return builder
}

func (builder *InternOfferOnboardingInfoBuilder) Build() *InternOfferOnboardingInfo {
	req := &InternOfferOnboardingInfo{}
	if builder.actualOnboardingDateFlag {
		req.ActualOnboardingDate = &builder.actualOnboardingDate

	}
	return req
}

type InternOfferStatus struct {
	OfferId         *string                     `json:"offer_id,omitempty"`         // Offer ID
	Operation       *string                     `json:"operation,omitempty"`        // 更新入/离职状态的操作
	OnboardingInfo  *InternOfferOnboardingInfo  `json:"onboarding_info,omitempty"`  // 入职表单信息（当 operation 为 confirm_onboarding 时，该字段必填）
	OffboardingInfo *InternOfferOffboardingInfo `json:"offboarding_info,omitempty"` // 离职表单信息（当 operation 为 offboard 时，该字段必填）
}

type InternOfferStatusBuilder struct {
	offerId             string // Offer ID
	offerIdFlag         bool
	operation           string // 更新入/离职状态的操作
	operationFlag       bool
	onboardingInfo      *InternOfferOnboardingInfo // 入职表单信息（当 operation 为 confirm_onboarding 时，该字段必填）
	onboardingInfoFlag  bool
	offboardingInfo     *InternOfferOffboardingInfo // 离职表单信息（当 operation 为 offboard 时，该字段必填）
	offboardingInfoFlag bool
}

func NewInternOfferStatusBuilder() *InternOfferStatusBuilder {
	builder := &InternOfferStatusBuilder{}
	return builder
}

// Offer ID
//
// 示例值：6949805467799537964
func (builder *InternOfferStatusBuilder) OfferId(offerId string) *InternOfferStatusBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}

// 更新入/离职状态的操作
//
// 示例值：confirm_onboarding
func (builder *InternOfferStatusBuilder) Operation(operation string) *InternOfferStatusBuilder {
	builder.operation = operation
	builder.operationFlag = true
	return builder
}

// 入职表单信息（当 operation 为 confirm_onboarding 时，该字段必填）
//
// 示例值：
func (builder *InternOfferStatusBuilder) OnboardingInfo(onboardingInfo *InternOfferOnboardingInfo) *InternOfferStatusBuilder {
	builder.onboardingInfo = onboardingInfo
	builder.onboardingInfoFlag = true
	return builder
}

// 离职表单信息（当 operation 为 offboard 时，该字段必填）
//
// 示例值：
func (builder *InternOfferStatusBuilder) OffboardingInfo(offboardingInfo *InternOfferOffboardingInfo) *InternOfferStatusBuilder {
	builder.offboardingInfo = offboardingInfo
	builder.offboardingInfoFlag = true
	return builder
}

func (builder *InternOfferStatusBuilder) Build() *InternOfferStatus {
	req := &InternOfferStatus{}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.operationFlag {
		req.Operation = &builder.operation

	}
	if builder.onboardingInfoFlag {
		req.OnboardingInfo = builder.onboardingInfo
	}
	if builder.offboardingInfoFlag {
		req.OffboardingInfo = builder.offboardingInfo
	}
	return req
}

type InternshipInfo struct {
	CareerType *int    `json:"career_type,omitempty"` // 类型
	Company    *string `json:"company,omitempty"`     // 公司
	Desc       *string `json:"desc,omitempty"`        // 描述
	EndTime    *int    `json:"end_time,omitempty"`    // 结束时间
	StartTime  *int    `json:"start_time,omitempty"`  // 开始时间
	Title      *string `json:"title,omitempty"`       // 职称
}

type InternshipInfoBuilder struct {
	careerType     int // 类型
	careerTypeFlag bool
	company        string // 公司
	companyFlag    bool
	desc           string // 描述
	descFlag       bool
	endTime        int // 结束时间
	endTimeFlag    bool
	startTime      int // 开始时间
	startTimeFlag  bool
	title          string // 职称
	titleFlag      bool
}

func NewInternshipInfoBuilder() *InternshipInfoBuilder {
	builder := &InternshipInfoBuilder{}
	return builder
}

// 类型
//
// 示例值：
func (builder *InternshipInfoBuilder) CareerType(careerType int) *InternshipInfoBuilder {
	builder.careerType = careerType
	builder.careerTypeFlag = true
	return builder
}

// 公司
//
// 示例值：
func (builder *InternshipInfoBuilder) Company(company string) *InternshipInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *InternshipInfoBuilder) Desc(desc string) *InternshipInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 结束时间
//
// 示例值：
func (builder *InternshipInfoBuilder) EndTime(endTime int) *InternshipInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 开始时间
//
// 示例值：
func (builder *InternshipInfoBuilder) StartTime(startTime int) *InternshipInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 职称
//
// 示例值：
func (builder *InternshipInfoBuilder) Title(title string) *InternshipInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

func (builder *InternshipInfoBuilder) Build() *InternshipInfo {
	req := &InternshipInfo{}
	if builder.careerTypeFlag {
		req.CareerType = &builder.careerType

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	return req
}

type Interview struct {
	Id                  *string            `json:"id,omitempty"`                    // 面试id
	BeginTime           *int               `json:"begin_time,omitempty"`            // 面试开始时间（ms）
	EndTime             *int               `json:"end_time,omitempty"`              // 面试结束时间（ms）
	Round               *int               `json:"round,omitempty"`                 // 面试轮次（从0开始计数）
	StageId             *string            `json:"stage_id,omitempty"`              // 面试关联的投递阶段
	InterviewRecordList []*InterviewRecord `json:"interview_record_list,omitempty"` // 面试官记录列表
}

type InterviewBuilder struct {
	id                      string // 面试id
	idFlag                  bool
	beginTime               int // 面试开始时间（ms）
	beginTimeFlag           bool
	endTime                 int // 面试结束时间（ms）
	endTimeFlag             bool
	round                   int // 面试轮次（从0开始计数）
	roundFlag               bool
	stageId                 string // 面试关联的投递阶段
	stageIdFlag             bool
	interviewRecordList     []*InterviewRecord // 面试官记录列表
	interviewRecordListFlag bool
}

func NewInterviewBuilder() *InterviewBuilder {
	builder := &InterviewBuilder{}
	return builder
}

// 面试id
//
// 示例值：6949805467799537964
func (builder *InterviewBuilder) Id(id string) *InterviewBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 面试开始时间（ms）
//
// 示例值：1618899376474
func (builder *InterviewBuilder) BeginTime(beginTime int) *InterviewBuilder {
	builder.beginTime = beginTime
	builder.beginTimeFlag = true
	return builder
}

// 面试结束时间（ms）
//
// 示例值：1618999376474
func (builder *InterviewBuilder) EndTime(endTime int) *InterviewBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 面试轮次（从0开始计数）
//
// 示例值：0
func (builder *InterviewBuilder) Round(round int) *InterviewBuilder {
	builder.round = round
	builder.roundFlag = true
	return builder
}

// 面试关联的投递阶段
//
// 示例值：634324253532232
func (builder *InterviewBuilder) StageId(stageId string) *InterviewBuilder {
	builder.stageId = stageId
	builder.stageIdFlag = true
	return builder
}

// 面试官记录列表
//
// 示例值：
func (builder *InterviewBuilder) InterviewRecordList(interviewRecordList []*InterviewRecord) *InterviewBuilder {
	builder.interviewRecordList = interviewRecordList
	builder.interviewRecordListFlag = true
	return builder
}

func (builder *InterviewBuilder) Build() *Interview {
	req := &Interview{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.beginTimeFlag {
		req.BeginTime = &builder.beginTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.roundFlag {
		req.Round = &builder.round

	}
	if builder.stageIdFlag {
		req.StageId = &builder.stageId

	}
	if builder.interviewRecordListFlag {
		req.InterviewRecordList = builder.interviewRecordList
	}
	return req
}

type InterviewAddress struct {
	Id       *string         `json:"id,omitempty"`       // 地址 ID
	Name     *I18n           `json:"name,omitempty"`     // 地址名称
	District *CodeNameObject `json:"district,omitempty"` // 区域
	City     *CodeNameObject `json:"city,omitempty"`     // 城市
	State    *CodeNameObject `json:"state,omitempty"`    // 省
	Country  *CodeNameObject `json:"country,omitempty"`  // 国家
}

type InterviewAddressBuilder struct {
	id           string // 地址 ID
	idFlag       bool
	name         *I18n // 地址名称
	nameFlag     bool
	district     *CodeNameObject // 区域
	districtFlag bool
	city         *CodeNameObject // 城市
	cityFlag     bool
	state        *CodeNameObject // 省
	stateFlag    bool
	country      *CodeNameObject // 国家
	countryFlag  bool
}

func NewInterviewAddressBuilder() *InterviewAddressBuilder {
	builder := &InterviewAddressBuilder{}
	return builder
}

// 地址 ID
//
// 示例值：6949805467799537964
func (builder *InterviewAddressBuilder) Id(id string) *InterviewAddressBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 地址名称
//
// 示例值：
func (builder *InterviewAddressBuilder) Name(name *I18n) *InterviewAddressBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 区域
//
// 示例值：
func (builder *InterviewAddressBuilder) District(district *CodeNameObject) *InterviewAddressBuilder {
	builder.district = district
	builder.districtFlag = true
	return builder
}

// 城市
//
// 示例值：
func (builder *InterviewAddressBuilder) City(city *CodeNameObject) *InterviewAddressBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}

// 省
//
// 示例值：
func (builder *InterviewAddressBuilder) State(state *CodeNameObject) *InterviewAddressBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}

// 国家
//
// 示例值：
func (builder *InterviewAddressBuilder) Country(country *CodeNameObject) *InterviewAddressBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

func (builder *InterviewAddressBuilder) Build() *InterviewAddress {
	req := &InterviewAddress{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.districtFlag {
		req.District = builder.district
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.stateFlag {
		req.State = builder.state
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	return req
}

type InterviewAppointmentConfig struct {
	EnableInterviewAppointmentByInterviewer *bool                              `json:"enable_interview_appointment_by_interviewer,omitempty"` // 是否开启面试官自助约面
	Config                                  *InterviewAppointmentConfigContent `json:"config,omitempty"`                                      // 配置详情
}

type InterviewAppointmentConfigBuilder struct {
	enableInterviewAppointmentByInterviewer     bool // 是否开启面试官自助约面
	enableInterviewAppointmentByInterviewerFlag bool
	config                                      *InterviewAppointmentConfigContent // 配置详情
	configFlag                                  bool
}

func NewInterviewAppointmentConfigBuilder() *InterviewAppointmentConfigBuilder {
	builder := &InterviewAppointmentConfigBuilder{}
	return builder
}

// 是否开启面试官自助约面
//
// 示例值：true
func (builder *InterviewAppointmentConfigBuilder) EnableInterviewAppointmentByInterviewer(enableInterviewAppointmentByInterviewer bool) *InterviewAppointmentConfigBuilder {
	builder.enableInterviewAppointmentByInterviewer = enableInterviewAppointmentByInterviewer
	builder.enableInterviewAppointmentByInterviewerFlag = true
	return builder
}

// 配置详情
//
// 示例值：
func (builder *InterviewAppointmentConfigBuilder) Config(config *InterviewAppointmentConfigContent) *InterviewAppointmentConfigBuilder {
	builder.config = config
	builder.configFlag = true
	return builder
}

func (builder *InterviewAppointmentConfigBuilder) Build() *InterviewAppointmentConfig {
	req := &InterviewAppointmentConfig{}
	if builder.enableInterviewAppointmentByInterviewerFlag {
		req.EnableInterviewAppointmentByInterviewer = &builder.enableInterviewAppointmentByInterviewer

	}
	if builder.configFlag {
		req.Config = builder.config
	}
	return req
}

type InterviewAppointmentConfigContent struct {
	InterviewType                         *int     `json:"interview_type,omitempty"`                            // 面试类型
	TalentTimezoneCode                    *string  `json:"talent_timezone_code,omitempty"`                      // 时区
	ContactUserId                         *string  `json:"contact_user_id,omitempty"`                           // 联系人id
	ContactMobile                         *string  `json:"contact_mobile,omitempty"`                            // 联系人电话
	ContactEmail                          *string  `json:"contact_email,omitempty"`                             // 联系人邮箱
	AddressId                             *string  `json:"address_id,omitempty"`                                // 地址id
	VideoType                             *int     `json:"video_type,omitempty"`                                // 地址id
	Cc                                    []string `json:"cc,omitempty"`                                        // 抄送人id lsit
	Remark                                *string  `json:"remark,omitempty"`                                    // 备注
	InterviewNotificationTemplateId       *string  `json:"interview_notification_template_id,omitempty"`        // 面试通知模板
	AppointmentNotificationTemplateId     *string  `json:"appointment_notification_template_id,omitempty"`      // 预约通知模板
	CancelInterviewNotificationTemplateId *string  `json:"cancel_interview_notification_template_id,omitempty"` // 取消面试通知
}

type InterviewAppointmentConfigContentBuilder struct {
	interviewType                             int // 面试类型
	interviewTypeFlag                         bool
	talentTimezoneCode                        string // 时区
	talentTimezoneCodeFlag                    bool
	contactUserId                             string // 联系人id
	contactUserIdFlag                         bool
	contactMobile                             string // 联系人电话
	contactMobileFlag                         bool
	contactEmail                              string // 联系人邮箱
	contactEmailFlag                          bool
	addressId                                 string // 地址id
	addressIdFlag                             bool
	videoType                                 int // 地址id
	videoTypeFlag                             bool
	cc                                        []string // 抄送人id lsit
	ccFlag                                    bool
	remark                                    string // 备注
	remarkFlag                                bool
	interviewNotificationTemplateId           string // 面试通知模板
	interviewNotificationTemplateIdFlag       bool
	appointmentNotificationTemplateId         string // 预约通知模板
	appointmentNotificationTemplateIdFlag     bool
	cancelInterviewNotificationTemplateId     string // 取消面试通知
	cancelInterviewNotificationTemplateIdFlag bool
}

func NewInterviewAppointmentConfigContentBuilder() *InterviewAppointmentConfigContentBuilder {
	builder := &InterviewAppointmentConfigContentBuilder{}
	return builder
}

// 面试类型
//
// 示例值：1
func (builder *InterviewAppointmentConfigContentBuilder) InterviewType(interviewType int) *InterviewAppointmentConfigContentBuilder {
	builder.interviewType = interviewType
	builder.interviewTypeFlag = true
	return builder
}

// 时区
//
// 示例值：Asia/Shanghai
func (builder *InterviewAppointmentConfigContentBuilder) TalentTimezoneCode(talentTimezoneCode string) *InterviewAppointmentConfigContentBuilder {
	builder.talentTimezoneCode = talentTimezoneCode
	builder.talentTimezoneCodeFlag = true
	return builder
}

// 联系人id
//
// 示例值：ou_c99c5f35d542efc7ee492afe11af19ef
func (builder *InterviewAppointmentConfigContentBuilder) ContactUserId(contactUserId string) *InterviewAppointmentConfigContentBuilder {
	builder.contactUserId = contactUserId
	builder.contactUserIdFlag = true
	return builder
}

// 联系人电话
//
// 示例值：151********
func (builder *InterviewAppointmentConfigContentBuilder) ContactMobile(contactMobile string) *InterviewAppointmentConfigContentBuilder {
	builder.contactMobile = contactMobile
	builder.contactMobileFlag = true
	return builder
}

// 联系人邮箱
//
// 示例值：test@email
func (builder *InterviewAppointmentConfigContentBuilder) ContactEmail(contactEmail string) *InterviewAppointmentConfigContentBuilder {
	builder.contactEmail = contactEmail
	builder.contactEmailFlag = true
	return builder
}

// 地址id
//
// 示例值：6960663240925956576
func (builder *InterviewAppointmentConfigContentBuilder) AddressId(addressId string) *InterviewAppointmentConfigContentBuilder {
	builder.addressId = addressId
	builder.addressIdFlag = true
	return builder
}

// 地址id
//
// 示例值：1
func (builder *InterviewAppointmentConfigContentBuilder) VideoType(videoType int) *InterviewAppointmentConfigContentBuilder {
	builder.videoType = videoType
	builder.videoTypeFlag = true
	return builder
}

// 抄送人id lsit
//
// 示例值：ou_c99c5f35d542efc7ee492afe11af19ef
func (builder *InterviewAppointmentConfigContentBuilder) Cc(cc []string) *InterviewAppointmentConfigContentBuilder {
	builder.cc = cc
	builder.ccFlag = true
	return builder
}

// 备注
//
// 示例值：备注
func (builder *InterviewAppointmentConfigContentBuilder) Remark(remark string) *InterviewAppointmentConfigContentBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

// 面试通知模板
//
// 示例值：6960663240925956573
func (builder *InterviewAppointmentConfigContentBuilder) InterviewNotificationTemplateId(interviewNotificationTemplateId string) *InterviewAppointmentConfigContentBuilder {
	builder.interviewNotificationTemplateId = interviewNotificationTemplateId
	builder.interviewNotificationTemplateIdFlag = true
	return builder
}

// 预约通知模板
//
// 示例值：6960663240925956573
func (builder *InterviewAppointmentConfigContentBuilder) AppointmentNotificationTemplateId(appointmentNotificationTemplateId string) *InterviewAppointmentConfigContentBuilder {
	builder.appointmentNotificationTemplateId = appointmentNotificationTemplateId
	builder.appointmentNotificationTemplateIdFlag = true
	return builder
}

// 取消面试通知
//
// 示例值：6960663240925956573
func (builder *InterviewAppointmentConfigContentBuilder) CancelInterviewNotificationTemplateId(cancelInterviewNotificationTemplateId string) *InterviewAppointmentConfigContentBuilder {
	builder.cancelInterviewNotificationTemplateId = cancelInterviewNotificationTemplateId
	builder.cancelInterviewNotificationTemplateIdFlag = true
	return builder
}

func (builder *InterviewAppointmentConfigContentBuilder) Build() *InterviewAppointmentConfigContent {
	req := &InterviewAppointmentConfigContent{}
	if builder.interviewTypeFlag {
		req.InterviewType = &builder.interviewType

	}
	if builder.talentTimezoneCodeFlag {
		req.TalentTimezoneCode = &builder.talentTimezoneCode

	}
	if builder.contactUserIdFlag {
		req.ContactUserId = &builder.contactUserId

	}
	if builder.contactMobileFlag {
		req.ContactMobile = &builder.contactMobile

	}
	if builder.contactEmailFlag {
		req.ContactEmail = &builder.contactEmail

	}
	if builder.addressIdFlag {
		req.AddressId = &builder.addressId

	}
	if builder.videoTypeFlag {
		req.VideoType = &builder.videoType

	}
	if builder.ccFlag {
		req.Cc = builder.cc
	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	if builder.interviewNotificationTemplateIdFlag {
		req.InterviewNotificationTemplateId = &builder.interviewNotificationTemplateId

	}
	if builder.appointmentNotificationTemplateIdFlag {
		req.AppointmentNotificationTemplateId = &builder.appointmentNotificationTemplateId

	}
	if builder.cancelInterviewNotificationTemplateIdFlag {
		req.CancelInterviewNotificationTemplateId = &builder.cancelInterviewNotificationTemplateId

	}
	return req
}

type InterviewAssessmentDimension struct {
	Id            *string                           `json:"id,omitempty"`             // 题目 ID
	Name          *I18n                             `json:"name,omitempty"`           // 题目名称
	Description   *I18n                             `json:"description,omitempty"`    // 题目描述
	Enabled       *bool                             `json:"enabled,omitempty"`        // 是否启用
	Seq           *int                              `json:"seq,omitempty"`            // 题目排序
	Required      *bool                             `json:"required,omitempty"`       // 是否必填
	DimensionType *int                              `json:"dimension_type,omitempty"` // 题目类型
	Args          *InterviewAssessmentDimensionArgs `json:"args,omitempty"`           // 选项信息，仅当题目类型为单选题、多选题时有值
}

type InterviewAssessmentDimensionBuilder struct {
	id                string // 题目 ID
	idFlag            bool
	name              *I18n // 题目名称
	nameFlag          bool
	description       *I18n // 题目描述
	descriptionFlag   bool
	enabled           bool // 是否启用
	enabledFlag       bool
	seq               int // 题目排序
	seqFlag           bool
	required          bool // 是否必填
	requiredFlag      bool
	dimensionType     int // 题目类型
	dimensionTypeFlag bool
	args              *InterviewAssessmentDimensionArgs // 选项信息，仅当题目类型为单选题、多选题时有值
	argsFlag          bool
}

func NewInterviewAssessmentDimensionBuilder() *InterviewAssessmentDimensionBuilder {
	builder := &InterviewAssessmentDimensionBuilder{}
	return builder
}

// 题目 ID
//
// 示例值：6949805467799537964
func (builder *InterviewAssessmentDimensionBuilder) Id(id string) *InterviewAssessmentDimensionBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 题目名称
//
// 示例值：
func (builder *InterviewAssessmentDimensionBuilder) Name(name *I18n) *InterviewAssessmentDimensionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 题目描述
//
// 示例值：
func (builder *InterviewAssessmentDimensionBuilder) Description(description *I18n) *InterviewAssessmentDimensionBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 是否启用
//
// 示例值：true
func (builder *InterviewAssessmentDimensionBuilder) Enabled(enabled bool) *InterviewAssessmentDimensionBuilder {
	builder.enabled = enabled
	builder.enabledFlag = true
	return builder
}

// 题目排序
//
// 示例值：1
func (builder *InterviewAssessmentDimensionBuilder) Seq(seq int) *InterviewAssessmentDimensionBuilder {
	builder.seq = seq
	builder.seqFlag = true
	return builder
}

// 是否必填
//
// 示例值：true
func (builder *InterviewAssessmentDimensionBuilder) Required(required bool) *InterviewAssessmentDimensionBuilder {
	builder.required = required
	builder.requiredFlag = true
	return builder
}

// 题目类型
//
// 示例值：1
func (builder *InterviewAssessmentDimensionBuilder) DimensionType(dimensionType int) *InterviewAssessmentDimensionBuilder {
	builder.dimensionType = dimensionType
	builder.dimensionTypeFlag = true
	return builder
}

// 选项信息，仅当题目类型为单选题、多选题时有值
//
// 示例值：
func (builder *InterviewAssessmentDimensionBuilder) Args(args *InterviewAssessmentDimensionArgs) *InterviewAssessmentDimensionBuilder {
	builder.args = args
	builder.argsFlag = true
	return builder
}

func (builder *InterviewAssessmentDimensionBuilder) Build() *InterviewAssessmentDimension {
	req := &InterviewAssessmentDimension{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.enabledFlag {
		req.Enabled = &builder.enabled

	}
	if builder.seqFlag {
		req.Seq = &builder.seq

	}
	if builder.requiredFlag {
		req.Required = &builder.required

	}
	if builder.dimensionTypeFlag {
		req.DimensionType = &builder.dimensionType

	}
	if builder.argsFlag {
		req.Args = builder.args
	}
	return req
}

type InterviewAssessmentDimensionArgs struct {
	ScoreList []*InterviewAssessmentDimensionArgsScore `json:"score_list,omitempty"` // 选项列表
}

type InterviewAssessmentDimensionArgsBuilder struct {
	scoreList     []*InterviewAssessmentDimensionArgsScore // 选项列表
	scoreListFlag bool
}

func NewInterviewAssessmentDimensionArgsBuilder() *InterviewAssessmentDimensionArgsBuilder {
	builder := &InterviewAssessmentDimensionArgsBuilder{}
	return builder
}

// 选项列表
//
// 示例值：
func (builder *InterviewAssessmentDimensionArgsBuilder) ScoreList(scoreList []*InterviewAssessmentDimensionArgsScore) *InterviewAssessmentDimensionArgsBuilder {
	builder.scoreList = scoreList
	builder.scoreListFlag = true
	return builder
}

func (builder *InterviewAssessmentDimensionArgsBuilder) Build() *InterviewAssessmentDimensionArgs {
	req := &InterviewAssessmentDimensionArgs{}
	if builder.scoreListFlag {
		req.ScoreList = builder.scoreList
	}
	return req
}

type InterviewAssessmentDimensionArgsScore struct {
	Id          *string `json:"id,omitempty"`          // 选项 ID
	Name        *I18n   `json:"name,omitempty"`        // 选项名称
	Description *I18n   `json:"description,omitempty"` // 选项描述
	Enabled     *bool   `json:"enabled,omitempty"`     // 是否启用
}

type InterviewAssessmentDimensionArgsScoreBuilder struct {
	id              string // 选项 ID
	idFlag          bool
	name            *I18n // 选项名称
	nameFlag        bool
	description     *I18n // 选项描述
	descriptionFlag bool
	enabled         bool // 是否启用
	enabledFlag     bool
}

func NewInterviewAssessmentDimensionArgsScoreBuilder() *InterviewAssessmentDimensionArgsScoreBuilder {
	builder := &InterviewAssessmentDimensionArgsScoreBuilder{}
	return builder
}

// 选项 ID
//
// 示例值：6949805467799537964
func (builder *InterviewAssessmentDimensionArgsScoreBuilder) Id(id string) *InterviewAssessmentDimensionArgsScoreBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 选项名称
//
// 示例值：
func (builder *InterviewAssessmentDimensionArgsScoreBuilder) Name(name *I18n) *InterviewAssessmentDimensionArgsScoreBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 选项描述
//
// 示例值：
func (builder *InterviewAssessmentDimensionArgsScoreBuilder) Description(description *I18n) *InterviewAssessmentDimensionArgsScoreBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 是否启用
//
// 示例值：true
func (builder *InterviewAssessmentDimensionArgsScoreBuilder) Enabled(enabled bool) *InterviewAssessmentDimensionArgsScoreBuilder {
	builder.enabled = enabled
	builder.enabledFlag = true
	return builder
}

func (builder *InterviewAssessmentDimensionArgsScoreBuilder) Build() *InterviewAssessmentDimensionArgsScore {
	req := &InterviewAssessmentDimensionArgsScore{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.enabledFlag {
		req.Enabled = &builder.enabled

	}
	return req
}

type InterviewAssessmentTemplate struct {
	Id   *string                          `json:"id,omitempty"`   // 面试评价表 ID
	Name *I18n                            `json:"name,omitempty"` // 面试评价表名称
	Args *InterviewAssessmentTemplateArgs `json:"args,omitempty"` // 面试评价表题目
}

type InterviewAssessmentTemplateBuilder struct {
	id       string // 面试评价表 ID
	idFlag   bool
	name     *I18n // 面试评价表名称
	nameFlag bool
	args     *InterviewAssessmentTemplateArgs // 面试评价表题目
	argsFlag bool
}

func NewInterviewAssessmentTemplateBuilder() *InterviewAssessmentTemplateBuilder {
	builder := &InterviewAssessmentTemplateBuilder{}
	return builder
}

// 面试评价表 ID
//
// 示例值：6949805467799537964
func (builder *InterviewAssessmentTemplateBuilder) Id(id string) *InterviewAssessmentTemplateBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 面试评价表名称
//
// 示例值：
func (builder *InterviewAssessmentTemplateBuilder) Name(name *I18n) *InterviewAssessmentTemplateBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 面试评价表题目
//
// 示例值：
func (builder *InterviewAssessmentTemplateBuilder) Args(args *InterviewAssessmentTemplateArgs) *InterviewAssessmentTemplateBuilder {
	builder.args = args
	builder.argsFlag = true
	return builder
}

func (builder *InterviewAssessmentTemplateBuilder) Build() *InterviewAssessmentTemplate {
	req := &InterviewAssessmentTemplate{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.argsFlag {
		req.Args = builder.args
	}
	return req
}

type InterviewAssessmentTemplateArgs struct {
	ConclusionDimension *InterviewAssessmentDimension   `json:"conclusion_dimension,omitempty"`  // 结论题
	ScoreDimension      *InterviewAssessmentDimension   `json:"score_dimension,omitempty"`       // 得分题
	ContentDimension    *InterviewAssessmentDimension   `json:"content_dimension,omitempty"`     // 记录题
	CustomDimensionList []*InterviewAssessmentDimension `json:"custom_dimension_list,omitempty"` // 自定义题目
}

type InterviewAssessmentTemplateArgsBuilder struct {
	conclusionDimension     *InterviewAssessmentDimension // 结论题
	conclusionDimensionFlag bool
	scoreDimension          *InterviewAssessmentDimension // 得分题
	scoreDimensionFlag      bool
	contentDimension        *InterviewAssessmentDimension // 记录题
	contentDimensionFlag    bool
	customDimensionList     []*InterviewAssessmentDimension // 自定义题目
	customDimensionListFlag bool
}

func NewInterviewAssessmentTemplateArgsBuilder() *InterviewAssessmentTemplateArgsBuilder {
	builder := &InterviewAssessmentTemplateArgsBuilder{}
	return builder
}

// 结论题
//
// 示例值：
func (builder *InterviewAssessmentTemplateArgsBuilder) ConclusionDimension(conclusionDimension *InterviewAssessmentDimension) *InterviewAssessmentTemplateArgsBuilder {
	builder.conclusionDimension = conclusionDimension
	builder.conclusionDimensionFlag = true
	return builder
}

// 得分题
//
// 示例值：
func (builder *InterviewAssessmentTemplateArgsBuilder) ScoreDimension(scoreDimension *InterviewAssessmentDimension) *InterviewAssessmentTemplateArgsBuilder {
	builder.scoreDimension = scoreDimension
	builder.scoreDimensionFlag = true
	return builder
}

// 记录题
//
// 示例值：
func (builder *InterviewAssessmentTemplateArgsBuilder) ContentDimension(contentDimension *InterviewAssessmentDimension) *InterviewAssessmentTemplateArgsBuilder {
	builder.contentDimension = contentDimension
	builder.contentDimensionFlag = true
	return builder
}

// 自定义题目
//
// 示例值：
func (builder *InterviewAssessmentTemplateArgsBuilder) CustomDimensionList(customDimensionList []*InterviewAssessmentDimension) *InterviewAssessmentTemplateArgsBuilder {
	builder.customDimensionList = customDimensionList
	builder.customDimensionListFlag = true
	return builder
}

func (builder *InterviewAssessmentTemplateArgsBuilder) Build() *InterviewAssessmentTemplateArgs {
	req := &InterviewAssessmentTemplateArgs{}
	if builder.conclusionDimensionFlag {
		req.ConclusionDimension = builder.conclusionDimension
	}
	if builder.scoreDimensionFlag {
		req.ScoreDimension = builder.scoreDimension
	}
	if builder.contentDimensionFlag {
		req.ContentDimension = builder.contentDimension
	}
	if builder.customDimensionListFlag {
		req.CustomDimensionList = builder.customDimensionList
	}
	return req
}

type InterviewDimensionAssessment struct {
	Id                 *string                    `json:"id,omitempty"`                   // 题目评价 ID
	Name               *I18n                      `json:"name,omitempty"`                 // 题目名称
	Content            *string                    `json:"content,omitempty"`              // 当题目类型为描述题时，从此取值
	DimensionId        *string                    `json:"dimension_id,omitempty"`         // 题目 ID
	DimensionScore     *InterviewDimensionScore   `json:"dimension_score,omitempty"`      // 当题目类型为单选题时，从此取值
	DimensionScoreList []*InterviewDimensionScore `json:"dimension_score_list,omitempty"` // 当题目类型为多选题时，从此取值
	DimensionType      *int                       `json:"dimension_type,omitempty"`       // 题目类型
}

type InterviewDimensionAssessmentBuilder struct {
	id                     string // 题目评价 ID
	idFlag                 bool
	name                   *I18n // 题目名称
	nameFlag               bool
	content                string // 当题目类型为描述题时，从此取值
	contentFlag            bool
	dimensionId            string // 题目 ID
	dimensionIdFlag        bool
	dimensionScore         *InterviewDimensionScore // 当题目类型为单选题时，从此取值
	dimensionScoreFlag     bool
	dimensionScoreList     []*InterviewDimensionScore // 当题目类型为多选题时，从此取值
	dimensionScoreListFlag bool
	dimensionType          int // 题目类型
	dimensionTypeFlag      bool
}

func NewInterviewDimensionAssessmentBuilder() *InterviewDimensionAssessmentBuilder {
	builder := &InterviewDimensionAssessmentBuilder{}
	return builder
}

// 题目评价 ID
//
// 示例值：6949805467799537964
func (builder *InterviewDimensionAssessmentBuilder) Id(id string) *InterviewDimensionAssessmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 题目名称
//
// 示例值：
func (builder *InterviewDimensionAssessmentBuilder) Name(name *I18n) *InterviewDimensionAssessmentBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 当题目类型为描述题时，从此取值
//
// 示例值：这个候选人还不错
func (builder *InterviewDimensionAssessmentBuilder) Content(content string) *InterviewDimensionAssessmentBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 题目 ID
//
// 示例值：11111111
func (builder *InterviewDimensionAssessmentBuilder) DimensionId(dimensionId string) *InterviewDimensionAssessmentBuilder {
	builder.dimensionId = dimensionId
	builder.dimensionIdFlag = true
	return builder
}

// 当题目类型为单选题时，从此取值
//
// 示例值：
func (builder *InterviewDimensionAssessmentBuilder) DimensionScore(dimensionScore *InterviewDimensionScore) *InterviewDimensionAssessmentBuilder {
	builder.dimensionScore = dimensionScore
	builder.dimensionScoreFlag = true
	return builder
}

// 当题目类型为多选题时，从此取值
//
// 示例值：
func (builder *InterviewDimensionAssessmentBuilder) DimensionScoreList(dimensionScoreList []*InterviewDimensionScore) *InterviewDimensionAssessmentBuilder {
	builder.dimensionScoreList = dimensionScoreList
	builder.dimensionScoreListFlag = true
	return builder
}

// 题目类型
//
// 示例值：1
func (builder *InterviewDimensionAssessmentBuilder) DimensionType(dimensionType int) *InterviewDimensionAssessmentBuilder {
	builder.dimensionType = dimensionType
	builder.dimensionTypeFlag = true
	return builder
}

func (builder *InterviewDimensionAssessmentBuilder) Build() *InterviewDimensionAssessment {
	req := &InterviewDimensionAssessment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.dimensionIdFlag {
		req.DimensionId = &builder.dimensionId

	}
	if builder.dimensionScoreFlag {
		req.DimensionScore = builder.dimensionScore
	}
	if builder.dimensionScoreListFlag {
		req.DimensionScoreList = builder.dimensionScoreList
	}
	if builder.dimensionTypeFlag {
		req.DimensionType = &builder.dimensionType

	}
	return req
}

type InterviewDimensionScore struct {
	Id   *string `json:"id,omitempty"`   // 选项 ID
	Name *I18n   `json:"name,omitempty"` // 选项名称
}

type InterviewDimensionScoreBuilder struct {
	id       string // 选项 ID
	idFlag   bool
	name     *I18n // 选项名称
	nameFlag bool
}

func NewInterviewDimensionScoreBuilder() *InterviewDimensionScoreBuilder {
	builder := &InterviewDimensionScoreBuilder{}
	return builder
}

// 选项 ID
//
// 示例值：6949805467799537964
func (builder *InterviewDimensionScoreBuilder) Id(id string) *InterviewDimensionScoreBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 选项名称
//
// 示例值：
func (builder *InterviewDimensionScoreBuilder) Name(name *I18n) *InterviewDimensionScoreBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *InterviewDimensionScoreBuilder) Build() *InterviewDimensionScore {
	req := &InterviewDimensionScore{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type InterviewExtend struct {
	Id                         *string                 `json:"id,omitempty"`                           // 面试 ID
	BeginTime                  *int                    `json:"begin_time,omitempty"`                   // 面试开始时间（ms）
	EndTime                    *int                    `json:"end_time,omitempty"`                     // 面试结束时间（ms）
	Round                      *int                    `json:"round,omitempty"`                        // 面试轮次
	InterviewRecordList        []*InterviewRecord      `json:"interview_record_list,omitempty"`        // 面试记录信息
	FeedbackSubmitTime         *int                    `json:"feedback_submit_time,omitempty"`         // 面试评价提交时间
	StageId                    *string                 `json:"stage_id,omitempty"`                     // 面试关联的投递阶段
	ApplicationId              *string                 `json:"application_id,omitempty"`               // 投递 ID
	Stage                      *IdNameObject           `json:"stage,omitempty"`                        // 阶段信息
	Creator                    *IdNameObject           `json:"creator,omitempty"`                      // 创建人
	BizCreateTime              *int                    `json:"biz_create_time,omitempty"`              // 创建时间（ms）
	BizModifyTime              *int                    `json:"biz_modify_time,omitempty"`              // 最近更新时间（ms）
	InterviewRoundSummary      *int                    `json:"interview_round_summary,omitempty"`      // 面试状态
	InterviewArrangementId     *string                 `json:"interview_arrangement_id,omitempty"`     // 面试安排 ID
	InterviewType              *int                    `json:"interview_type,omitempty"`               // 面试类型
	TalentTimeZone             *CodeNameObject         `json:"talent_time_zone,omitempty"`             // 候选人时区
	ContactUser                *IdNameObject           `json:"contact_user,omitempty"`                 // 面试联系人
	ContactMobile              *string                 `json:"contact_mobile,omitempty"`               // 面试联系人电话
	Remark                     *string                 `json:"remark,omitempty"`                       // 备注
	Address                    *InterviewAddress       `json:"address,omitempty"`                      // 面试地点
	VideoType                  *int                    `json:"video_type,omitempty"`                   // 视频面试工具
	ArrangementStatus          *int                    `json:"arrangement_status,omitempty"`           // 当安排类型为集中面试时，此值表示集中面试的安排状态
	ArrangementType            *int                    `json:"arrangement_type,omitempty"`             // 安排类型
	ArrangementAppointmentKind *int                    `json:"arrangement_appointment_kind,omitempty"` // 安排方式（是否使用自助约面）
	MeetingRoomList            []*InterviewMeetingRoom `json:"meeting_room_list,omitempty"`            // 面试会议室
	InterviewRoundType         *IdNameObject           `json:"interview_round_type,omitempty"`         // 面试轮次类型
}

type InterviewExtendBuilder struct {
	id                             string // 面试 ID
	idFlag                         bool
	beginTime                      int // 面试开始时间（ms）
	beginTimeFlag                  bool
	endTime                        int // 面试结束时间（ms）
	endTimeFlag                    bool
	round                          int // 面试轮次
	roundFlag                      bool
	interviewRecordList            []*InterviewRecord // 面试记录信息
	interviewRecordListFlag        bool
	feedbackSubmitTime             int // 面试评价提交时间
	feedbackSubmitTimeFlag         bool
	stageId                        string // 面试关联的投递阶段
	stageIdFlag                    bool
	applicationId                  string // 投递 ID
	applicationIdFlag              bool
	stage                          *IdNameObject // 阶段信息
	stageFlag                      bool
	creator                        *IdNameObject // 创建人
	creatorFlag                    bool
	bizCreateTime                  int // 创建时间（ms）
	bizCreateTimeFlag              bool
	bizModifyTime                  int // 最近更新时间（ms）
	bizModifyTimeFlag              bool
	interviewRoundSummary          int // 面试状态
	interviewRoundSummaryFlag      bool
	interviewArrangementId         string // 面试安排 ID
	interviewArrangementIdFlag     bool
	interviewType                  int // 面试类型
	interviewTypeFlag              bool
	talentTimeZone                 *CodeNameObject // 候选人时区
	talentTimeZoneFlag             bool
	contactUser                    *IdNameObject // 面试联系人
	contactUserFlag                bool
	contactMobile                  string // 面试联系人电话
	contactMobileFlag              bool
	remark                         string // 备注
	remarkFlag                     bool
	address                        *InterviewAddress // 面试地点
	addressFlag                    bool
	videoType                      int // 视频面试工具
	videoTypeFlag                  bool
	arrangementStatus              int // 当安排类型为集中面试时，此值表示集中面试的安排状态
	arrangementStatusFlag          bool
	arrangementType                int // 安排类型
	arrangementTypeFlag            bool
	arrangementAppointmentKind     int // 安排方式（是否使用自助约面）
	arrangementAppointmentKindFlag bool
	meetingRoomList                []*InterviewMeetingRoom // 面试会议室
	meetingRoomListFlag            bool
	interviewRoundType             *IdNameObject // 面试轮次类型
	interviewRoundTypeFlag         bool
}

func NewInterviewExtendBuilder() *InterviewExtendBuilder {
	builder := &InterviewExtendBuilder{}
	return builder
}

// 面试 ID
//
// 示例值：6949805467799537964
func (builder *InterviewExtendBuilder) Id(id string) *InterviewExtendBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 面试开始时间（ms）
//
// 示例值：1618899376474
func (builder *InterviewExtendBuilder) BeginTime(beginTime int) *InterviewExtendBuilder {
	builder.beginTime = beginTime
	builder.beginTimeFlag = true
	return builder
}

// 面试结束时间（ms）
//
// 示例值：1618999376474
func (builder *InterviewExtendBuilder) EndTime(endTime int) *InterviewExtendBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 面试轮次
//
// 示例值：0
func (builder *InterviewExtendBuilder) Round(round int) *InterviewExtendBuilder {
	builder.round = round
	builder.roundFlag = true
	return builder
}

// 面试记录信息
//
// 示例值：
func (builder *InterviewExtendBuilder) InterviewRecordList(interviewRecordList []*InterviewRecord) *InterviewExtendBuilder {
	builder.interviewRecordList = interviewRecordList
	builder.interviewRecordListFlag = true
	return builder
}

// 面试评价提交时间
//
// 示例值：1659318415000
func (builder *InterviewExtendBuilder) FeedbackSubmitTime(feedbackSubmitTime int) *InterviewExtendBuilder {
	builder.feedbackSubmitTime = feedbackSubmitTime
	builder.feedbackSubmitTimeFlag = true
	return builder
}

// 面试关联的投递阶段
//
// 示例值：634324253532232
func (builder *InterviewExtendBuilder) StageId(stageId string) *InterviewExtendBuilder {
	builder.stageId = stageId
	builder.stageIdFlag = true
	return builder
}

// 投递 ID
//
// 示例值：634324253532232
func (builder *InterviewExtendBuilder) ApplicationId(applicationId string) *InterviewExtendBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 阶段信息
//
// 示例值：
func (builder *InterviewExtendBuilder) Stage(stage *IdNameObject) *InterviewExtendBuilder {
	builder.stage = stage
	builder.stageFlag = true
	return builder
}

// 创建人
//
// 示例值：
func (builder *InterviewExtendBuilder) Creator(creator *IdNameObject) *InterviewExtendBuilder {
	builder.creator = creator
	builder.creatorFlag = true
	return builder
}

// 创建时间（ms）
//
// 示例值：1618999376474
func (builder *InterviewExtendBuilder) BizCreateTime(bizCreateTime int) *InterviewExtendBuilder {
	builder.bizCreateTime = bizCreateTime
	builder.bizCreateTimeFlag = true
	return builder
}

// 最近更新时间（ms）
//
// 示例值：1618999376474
func (builder *InterviewExtendBuilder) BizModifyTime(bizModifyTime int) *InterviewExtendBuilder {
	builder.bizModifyTime = bizModifyTime
	builder.bizModifyTimeFlag = true
	return builder
}

// 面试状态
//
// 示例值：1
func (builder *InterviewExtendBuilder) InterviewRoundSummary(interviewRoundSummary int) *InterviewExtendBuilder {
	builder.interviewRoundSummary = interviewRoundSummary
	builder.interviewRoundSummaryFlag = true
	return builder
}

// 面试安排 ID
//
// 示例值：1111111
func (builder *InterviewExtendBuilder) InterviewArrangementId(interviewArrangementId string) *InterviewExtendBuilder {
	builder.interviewArrangementId = interviewArrangementId
	builder.interviewArrangementIdFlag = true
	return builder
}

// 面试类型
//
// 示例值：1
func (builder *InterviewExtendBuilder) InterviewType(interviewType int) *InterviewExtendBuilder {
	builder.interviewType = interviewType
	builder.interviewTypeFlag = true
	return builder
}

// 候选人时区
//
// 示例值：
func (builder *InterviewExtendBuilder) TalentTimeZone(talentTimeZone *CodeNameObject) *InterviewExtendBuilder {
	builder.talentTimeZone = talentTimeZone
	builder.talentTimeZoneFlag = true
	return builder
}

// 面试联系人
//
// 示例值：
func (builder *InterviewExtendBuilder) ContactUser(contactUser *IdNameObject) *InterviewExtendBuilder {
	builder.contactUser = contactUser
	builder.contactUserFlag = true
	return builder
}

// 面试联系人电话
//
// 示例值：13333333333
func (builder *InterviewExtendBuilder) ContactMobile(contactMobile string) *InterviewExtendBuilder {
	builder.contactMobile = contactMobile
	builder.contactMobileFlag = true
	return builder
}

// 备注
//
// 示例值：test
func (builder *InterviewExtendBuilder) Remark(remark string) *InterviewExtendBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

// 面试地点
//
// 示例值：
func (builder *InterviewExtendBuilder) Address(address *InterviewAddress) *InterviewExtendBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}

// 视频面试工具
//
// 示例值：1
func (builder *InterviewExtendBuilder) VideoType(videoType int) *InterviewExtendBuilder {
	builder.videoType = videoType
	builder.videoTypeFlag = true
	return builder
}

// 当安排类型为集中面试时，此值表示集中面试的安排状态
//
// 示例值：1
func (builder *InterviewExtendBuilder) ArrangementStatus(arrangementStatus int) *InterviewExtendBuilder {
	builder.arrangementStatus = arrangementStatus
	builder.arrangementStatusFlag = true
	return builder
}

// 安排类型
//
// 示例值：1
func (builder *InterviewExtendBuilder) ArrangementType(arrangementType int) *InterviewExtendBuilder {
	builder.arrangementType = arrangementType
	builder.arrangementTypeFlag = true
	return builder
}

// 安排方式（是否使用自助约面）
//
// 示例值：1
func (builder *InterviewExtendBuilder) ArrangementAppointmentKind(arrangementAppointmentKind int) *InterviewExtendBuilder {
	builder.arrangementAppointmentKind = arrangementAppointmentKind
	builder.arrangementAppointmentKindFlag = true
	return builder
}

// 面试会议室
//
// 示例值：
func (builder *InterviewExtendBuilder) MeetingRoomList(meetingRoomList []*InterviewMeetingRoom) *InterviewExtendBuilder {
	builder.meetingRoomList = meetingRoomList
	builder.meetingRoomListFlag = true
	return builder
}

// 面试轮次类型
//
// 示例值：
func (builder *InterviewExtendBuilder) InterviewRoundType(interviewRoundType *IdNameObject) *InterviewExtendBuilder {
	builder.interviewRoundType = interviewRoundType
	builder.interviewRoundTypeFlag = true
	return builder
}

func (builder *InterviewExtendBuilder) Build() *InterviewExtend {
	req := &InterviewExtend{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.beginTimeFlag {
		req.BeginTime = &builder.beginTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.roundFlag {
		req.Round = &builder.round

	}
	if builder.interviewRecordListFlag {
		req.InterviewRecordList = builder.interviewRecordList
	}
	if builder.feedbackSubmitTimeFlag {
		req.FeedbackSubmitTime = &builder.feedbackSubmitTime

	}
	if builder.stageIdFlag {
		req.StageId = &builder.stageId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.stageFlag {
		req.Stage = builder.stage
	}
	if builder.creatorFlag {
		req.Creator = builder.creator
	}
	if builder.bizCreateTimeFlag {
		req.BizCreateTime = &builder.bizCreateTime

	}
	if builder.bizModifyTimeFlag {
		req.BizModifyTime = &builder.bizModifyTime

	}
	if builder.interviewRoundSummaryFlag {
		req.InterviewRoundSummary = &builder.interviewRoundSummary

	}
	if builder.interviewArrangementIdFlag {
		req.InterviewArrangementId = &builder.interviewArrangementId

	}
	if builder.interviewTypeFlag {
		req.InterviewType = &builder.interviewType

	}
	if builder.talentTimeZoneFlag {
		req.TalentTimeZone = builder.talentTimeZone
	}
	if builder.contactUserFlag {
		req.ContactUser = builder.contactUser
	}
	if builder.contactMobileFlag {
		req.ContactMobile = &builder.contactMobile

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.videoTypeFlag {
		req.VideoType = &builder.videoType

	}
	if builder.arrangementStatusFlag {
		req.ArrangementStatus = &builder.arrangementStatus

	}
	if builder.arrangementTypeFlag {
		req.ArrangementType = &builder.arrangementType

	}
	if builder.arrangementAppointmentKindFlag {
		req.ArrangementAppointmentKind = &builder.arrangementAppointmentKind

	}
	if builder.meetingRoomListFlag {
		req.MeetingRoomList = builder.meetingRoomList
	}
	if builder.interviewRoundTypeFlag {
		req.InterviewRoundType = builder.interviewRoundType
	}
	return req
}

type InterviewMeetingRoom struct {
	RoomId         *string `json:"room_id,omitempty"`         // 会议室 ID
	RoomName       *string `json:"room_name,omitempty"`       // 会议室名称
	BuildingName   *string `json:"building_name,omitempty"`   // 建筑名称
	ReservedStatus *int    `json:"reserved_status,omitempty"` // 会议室预定状态
	FloorName      *string `json:"floor_name,omitempty"`      // 楼层
}

type InterviewMeetingRoomBuilder struct {
	roomId             string // 会议室 ID
	roomIdFlag         bool
	roomName           string // 会议室名称
	roomNameFlag       bool
	buildingName       string // 建筑名称
	buildingNameFlag   bool
	reservedStatus     int // 会议室预定状态
	reservedStatusFlag bool
	floorName          string // 楼层
	floorNameFlag      bool
}

func NewInterviewMeetingRoomBuilder() *InterviewMeetingRoomBuilder {
	builder := &InterviewMeetingRoomBuilder{}
	return builder
}

// 会议室 ID
//
// 示例值：6949805467799537964
func (builder *InterviewMeetingRoomBuilder) RoomId(roomId string) *InterviewMeetingRoomBuilder {
	builder.roomId = roomId
	builder.roomIdFlag = true
	return builder
}

// 会议室名称
//
// 示例值：OCG111
func (builder *InterviewMeetingRoomBuilder) RoomName(roomName string) *InterviewMeetingRoomBuilder {
	builder.roomName = roomName
	builder.roomNameFlag = true
	return builder
}

// 建筑名称
//
// 示例值：OCG
func (builder *InterviewMeetingRoomBuilder) BuildingName(buildingName string) *InterviewMeetingRoomBuilder {
	builder.buildingName = buildingName
	builder.buildingNameFlag = true
	return builder
}

// 会议室预定状态
//
// 示例值：1
func (builder *InterviewMeetingRoomBuilder) ReservedStatus(reservedStatus int) *InterviewMeetingRoomBuilder {
	builder.reservedStatus = reservedStatus
	builder.reservedStatusFlag = true
	return builder
}

// 楼层
//
// 示例值：17
func (builder *InterviewMeetingRoomBuilder) FloorName(floorName string) *InterviewMeetingRoomBuilder {
	builder.floorName = floorName
	builder.floorNameFlag = true
	return builder
}

func (builder *InterviewMeetingRoomBuilder) Build() *InterviewMeetingRoom {
	req := &InterviewMeetingRoom{}
	if builder.roomIdFlag {
		req.RoomId = &builder.roomId

	}
	if builder.roomNameFlag {
		req.RoomName = &builder.roomName

	}
	if builder.buildingNameFlag {
		req.BuildingName = &builder.buildingName

	}
	if builder.reservedStatusFlag {
		req.ReservedStatus = &builder.reservedStatus

	}
	if builder.floorNameFlag {
		req.FloorName = &builder.floorName

	}
	return req
}

type InterviewRecord struct {
	Id                      *string                         `json:"id,omitempty"`                        // 面试记录 ID
	UserId                  *string                         `json:"user_id,omitempty"`                   // 面试官用户 ID
	Content                 *string                         `json:"content,omitempty"`                   // 系统预设「记录」题目内容
	MinJobLevelId           *string                         `json:"min_job_level_id,omitempty"`          // 建议定级下限的职级 ID
	MaxJobLevelId           *string                         `json:"max_job_level_id,omitempty"`          // 建议定级上限的职级 ID
	CommitStatus            *int                            `json:"commit_status,omitempty"`             // 提交状态
	FeedbackSubmitTime      *int                            `json:"feedback_submit_time,omitempty"`      // 面试评价提交时间
	Conclusion              *int                            `json:"conclusion,omitempty"`                // 面试结论
	InterviewScore          *InterviewScore                 `json:"interview_score,omitempty"`           // 面试评分
	Interviewer             *IdNameObject                   `json:"interviewer,omitempty"`               // 面试官信息
	DimensionAssessmentList []*InterviewDimensionAssessment `json:"dimension_assessment_list,omitempty"` // 面试评价
}

type InterviewRecordBuilder struct {
	id                          string // 面试记录 ID
	idFlag                      bool
	userId                      string // 面试官用户 ID
	userIdFlag                  bool
	content                     string // 系统预设「记录」题目内容
	contentFlag                 bool
	minJobLevelId               string // 建议定级下限的职级 ID
	minJobLevelIdFlag           bool
	maxJobLevelId               string // 建议定级上限的职级 ID
	maxJobLevelIdFlag           bool
	commitStatus                int // 提交状态
	commitStatusFlag            bool
	feedbackSubmitTime          int // 面试评价提交时间
	feedbackSubmitTimeFlag      bool
	conclusion                  int // 面试结论
	conclusionFlag              bool
	interviewScore              *InterviewScore // 面试评分
	interviewScoreFlag          bool
	interviewer                 *IdNameObject // 面试官信息
	interviewerFlag             bool
	dimensionAssessmentList     []*InterviewDimensionAssessment // 面试评价
	dimensionAssessmentListFlag bool
}

func NewInterviewRecordBuilder() *InterviewRecordBuilder {
	builder := &InterviewRecordBuilder{}
	return builder
}

// 面试记录 ID
//
// 示例值：6949805467799537964
func (builder *InterviewRecordBuilder) Id(id string) *InterviewRecordBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 面试官用户 ID
//
// 示例值：1618899376474
func (builder *InterviewRecordBuilder) UserId(userId string) *InterviewRecordBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 系统预设「记录」题目内容
//
// 示例值：代码还行，只是不够聪明
func (builder *InterviewRecordBuilder) Content(content string) *InterviewRecordBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 建议定级下限的职级 ID
//
// 示例值：6435238827342432
func (builder *InterviewRecordBuilder) MinJobLevelId(minJobLevelId string) *InterviewRecordBuilder {
	builder.minJobLevelId = minJobLevelId
	builder.minJobLevelIdFlag = true
	return builder
}

// 建议定级上限的职级 ID
//
// 示例值：643523885843573
func (builder *InterviewRecordBuilder) MaxJobLevelId(maxJobLevelId string) *InterviewRecordBuilder {
	builder.maxJobLevelId = maxJobLevelId
	builder.maxJobLevelIdFlag = true
	return builder
}

// 提交状态
//
// 示例值：1
func (builder *InterviewRecordBuilder) CommitStatus(commitStatus int) *InterviewRecordBuilder {
	builder.commitStatus = commitStatus
	builder.commitStatusFlag = true
	return builder
}

// 面试评价提交时间
//
// 示例值：1659318415000
func (builder *InterviewRecordBuilder) FeedbackSubmitTime(feedbackSubmitTime int) *InterviewRecordBuilder {
	builder.feedbackSubmitTime = feedbackSubmitTime
	builder.feedbackSubmitTimeFlag = true
	return builder
}

// 面试结论
//
// 示例值：1
func (builder *InterviewRecordBuilder) Conclusion(conclusion int) *InterviewRecordBuilder {
	builder.conclusion = conclusion
	builder.conclusionFlag = true
	return builder
}

// 面试评分
//
// 示例值：
func (builder *InterviewRecordBuilder) InterviewScore(interviewScore *InterviewScore) *InterviewRecordBuilder {
	builder.interviewScore = interviewScore
	builder.interviewScoreFlag = true
	return builder
}

// 面试官信息
//
// 示例值：
func (builder *InterviewRecordBuilder) Interviewer(interviewer *IdNameObject) *InterviewRecordBuilder {
	builder.interviewer = interviewer
	builder.interviewerFlag = true
	return builder
}

// 面试评价
//
// 示例值：
func (builder *InterviewRecordBuilder) DimensionAssessmentList(dimensionAssessmentList []*InterviewDimensionAssessment) *InterviewRecordBuilder {
	builder.dimensionAssessmentList = dimensionAssessmentList
	builder.dimensionAssessmentListFlag = true
	return builder
}

func (builder *InterviewRecordBuilder) Build() *InterviewRecord {
	req := &InterviewRecord{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.minJobLevelIdFlag {
		req.MinJobLevelId = &builder.minJobLevelId

	}
	if builder.maxJobLevelIdFlag {
		req.MaxJobLevelId = &builder.maxJobLevelId

	}
	if builder.commitStatusFlag {
		req.CommitStatus = &builder.commitStatus

	}
	if builder.feedbackSubmitTimeFlag {
		req.FeedbackSubmitTime = &builder.feedbackSubmitTime

	}
	if builder.conclusionFlag {
		req.Conclusion = &builder.conclusion

	}
	if builder.interviewScoreFlag {
		req.InterviewScore = builder.interviewScore
	}
	if builder.interviewerFlag {
		req.Interviewer = builder.interviewer
	}
	if builder.dimensionAssessmentListFlag {
		req.DimensionAssessmentList = builder.dimensionAssessmentList
	}
	return req
}

type InterviewRecordTemplate struct {
	AssessmentTemplate *InterviewAssessmentTemplate `json:"assessment_template,omitempty"` // 面试评价表
}

type InterviewRecordTemplateBuilder struct {
	assessmentTemplate     *InterviewAssessmentTemplate // 面试评价表
	assessmentTemplateFlag bool
}

func NewInterviewRecordTemplateBuilder() *InterviewRecordTemplateBuilder {
	builder := &InterviewRecordTemplateBuilder{}
	return builder
}

// 面试评价表
//
// 示例值：
func (builder *InterviewRecordTemplateBuilder) AssessmentTemplate(assessmentTemplate *InterviewAssessmentTemplate) *InterviewRecordTemplateBuilder {
	builder.assessmentTemplate = assessmentTemplate
	builder.assessmentTemplateFlag = true
	return builder
}

func (builder *InterviewRecordTemplateBuilder) Build() *InterviewRecordTemplate {
	req := &InterviewRecordTemplate{}
	if builder.assessmentTemplateFlag {
		req.AssessmentTemplate = builder.assessmentTemplate
	}
	return req
}

type InterviewRegistrationSchema struct {
	Id                *string         `json:"id,omitempty"`                   // 面试登记表模板 ID
	Name              *string         `json:"name,omitempty"`                 // 面试登记表模板名称
	IsUsedAsInterview *bool           `json:"is_used_as_interview,omitempty"` // 是否用作面试登记表
	ObjectList        []*CommonSchema `json:"object_list,omitempty"`          // 模块列表
}

type InterviewRegistrationSchemaBuilder struct {
	id                    string // 面试登记表模板 ID
	idFlag                bool
	name                  string // 面试登记表模板名称
	nameFlag              bool
	isUsedAsInterview     bool // 是否用作面试登记表
	isUsedAsInterviewFlag bool
	objectList            []*CommonSchema // 模块列表
	objectListFlag        bool
}

func NewInterviewRegistrationSchemaBuilder() *InterviewRegistrationSchemaBuilder {
	builder := &InterviewRegistrationSchemaBuilder{}
	return builder
}

// 面试登记表模板 ID
//
// 示例值：7044739584859326764
func (builder *InterviewRegistrationSchemaBuilder) Id(id string) *InterviewRegistrationSchemaBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 面试登记表模板名称
//
// 示例值：默认面试登记表
func (builder *InterviewRegistrationSchemaBuilder) Name(name string) *InterviewRegistrationSchemaBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 是否用作面试登记表
//
// 示例值：true
func (builder *InterviewRegistrationSchemaBuilder) IsUsedAsInterview(isUsedAsInterview bool) *InterviewRegistrationSchemaBuilder {
	builder.isUsedAsInterview = isUsedAsInterview
	builder.isUsedAsInterviewFlag = true
	return builder
}

// 模块列表
//
// 示例值：
func (builder *InterviewRegistrationSchemaBuilder) ObjectList(objectList []*CommonSchema) *InterviewRegistrationSchemaBuilder {
	builder.objectList = objectList
	builder.objectListFlag = true
	return builder
}

func (builder *InterviewRegistrationSchemaBuilder) Build() *InterviewRegistrationSchema {
	req := &InterviewRegistrationSchema{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.isUsedAsInterviewFlag {
		req.IsUsedAsInterview = &builder.isUsedAsInterview

	}
	if builder.objectListFlag {
		req.ObjectList = builder.objectList
	}
	return req
}

type InterviewRoundType struct {
	Id                              *string                               `json:"id,omitempty"`                                 // 面试轮次类型 ID
	BizId                           *string                               `json:"biz_id,omitempty"`                             // 面试轮次类型业务 ID
	Name                            *I18n                                 `json:"name,omitempty"`                               // 面试轮次类型名称
	ProcessType                     *int                                  `json:"process_type,omitempty"`                       // 职位流程类型
	ActiveStatus                    *int                                  `json:"active_status,omitempty"`                      // 启用状态
	InterviewAssessmentTemplateInfo *InterviewRoundTypeAssessmentTemplate `json:"interview_assessment_template_info,omitempty"` // 面试评价表
}

type InterviewRoundTypeBuilder struct {
	id                                  string // 面试轮次类型 ID
	idFlag                              bool
	bizId                               string // 面试轮次类型业务 ID
	bizIdFlag                           bool
	name                                *I18n // 面试轮次类型名称
	nameFlag                            bool
	processType                         int // 职位流程类型
	processTypeFlag                     bool
	activeStatus                        int // 启用状态
	activeStatusFlag                    bool
	interviewAssessmentTemplateInfo     *InterviewRoundTypeAssessmentTemplate // 面试评价表
	interviewAssessmentTemplateInfoFlag bool
}

func NewInterviewRoundTypeBuilder() *InterviewRoundTypeBuilder {
	builder := &InterviewRoundTypeBuilder{}
	return builder
}

// 面试轮次类型 ID
//
// 示例值：7012129842917869868
func (builder *InterviewRoundTypeBuilder) Id(id string) *InterviewRoundTypeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 面试轮次类型业务 ID
//
// 示例值：7012129842917869868
func (builder *InterviewRoundTypeBuilder) BizId(bizId string) *InterviewRoundTypeBuilder {
	builder.bizId = bizId
	builder.bizIdFlag = true
	return builder
}

// 面试轮次类型名称
//
// 示例值：
func (builder *InterviewRoundTypeBuilder) Name(name *I18n) *InterviewRoundTypeBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 职位流程类型
//
// 示例值：1
func (builder *InterviewRoundTypeBuilder) ProcessType(processType int) *InterviewRoundTypeBuilder {
	builder.processType = processType
	builder.processTypeFlag = true
	return builder
}

// 启用状态
//
// 示例值：1
func (builder *InterviewRoundTypeBuilder) ActiveStatus(activeStatus int) *InterviewRoundTypeBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 面试评价表
//
// 示例值：
func (builder *InterviewRoundTypeBuilder) InterviewAssessmentTemplateInfo(interviewAssessmentTemplateInfo *InterviewRoundTypeAssessmentTemplate) *InterviewRoundTypeBuilder {
	builder.interviewAssessmentTemplateInfo = interviewAssessmentTemplateInfo
	builder.interviewAssessmentTemplateInfoFlag = true
	return builder
}

func (builder *InterviewRoundTypeBuilder) Build() *InterviewRoundType {
	req := &InterviewRoundType{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.bizIdFlag {
		req.BizId = &builder.bizId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.processTypeFlag {
		req.ProcessType = &builder.processType

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.interviewAssessmentTemplateInfoFlag {
		req.InterviewAssessmentTemplateInfo = builder.interviewAssessmentTemplateInfo
	}
	return req
}

type InterviewRoundTypeAssessmentTemplate struct {
	Id    *string `json:"id,omitempty"`     // 面试评价表 ID
	BizId *string `json:"biz_id,omitempty"` // 面试评价表业务 ID
	Name  *I18n   `json:"name,omitempty"`   // 面试评价表名称
}

type InterviewRoundTypeAssessmentTemplateBuilder struct {
	id        string // 面试评价表 ID
	idFlag    bool
	bizId     string // 面试评价表业务 ID
	bizIdFlag bool
	name      *I18n // 面试评价表名称
	nameFlag  bool
}

func NewInterviewRoundTypeAssessmentTemplateBuilder() *InterviewRoundTypeAssessmentTemplateBuilder {
	builder := &InterviewRoundTypeAssessmentTemplateBuilder{}
	return builder
}

// 面试评价表 ID
//
// 示例值：7012129842917869868
func (builder *InterviewRoundTypeAssessmentTemplateBuilder) Id(id string) *InterviewRoundTypeAssessmentTemplateBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 面试评价表业务 ID
//
// 示例值：7012129842917869868
func (builder *InterviewRoundTypeAssessmentTemplateBuilder) BizId(bizId string) *InterviewRoundTypeAssessmentTemplateBuilder {
	builder.bizId = bizId
	builder.bizIdFlag = true
	return builder
}

// 面试评价表名称
//
// 示例值：
func (builder *InterviewRoundTypeAssessmentTemplateBuilder) Name(name *I18n) *InterviewRoundTypeAssessmentTemplateBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *InterviewRoundTypeAssessmentTemplateBuilder) Build() *InterviewRoundTypeAssessmentTemplate {
	req := &InterviewRoundTypeAssessmentTemplate{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.bizIdFlag {
		req.BizId = &builder.bizId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type InterviewScore struct {
	Id            *string `json:"id,omitempty"`             // 面试评分 ID
	Level         *int    `json:"level,omitempty"`          // 分数级别
	ZhName        *string `json:"zh_name,omitempty"`        // 中文名称
	ZhDescription *string `json:"zh_description,omitempty"` // 中文描述
	EnName        *string `json:"en_name,omitempty"`        // 英文名称
	EnDescription *string `json:"en_description,omitempty"` // 英文描述
}

type InterviewScoreBuilder struct {
	id                string // 面试评分 ID
	idFlag            bool
	level             int // 分数级别
	levelFlag         bool
	zhName            string // 中文名称
	zhNameFlag        bool
	zhDescription     string // 中文描述
	zhDescriptionFlag bool
	enName            string // 英文名称
	enNameFlag        bool
	enDescription     string // 英文描述
	enDescriptionFlag bool
}

func NewInterviewScoreBuilder() *InterviewScoreBuilder {
	builder := &InterviewScoreBuilder{}
	return builder
}

// 面试评分 ID
//
// 示例值：6949805467799537964
func (builder *InterviewScoreBuilder) Id(id string) *InterviewScoreBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 分数级别
//
// 示例值：3
func (builder *InterviewScoreBuilder) Level(level int) *InterviewScoreBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}

// 中文名称
//
// 示例值：3
func (builder *InterviewScoreBuilder) ZhName(zhName string) *InterviewScoreBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 中文描述
//
// 示例值：通过, 能力达到要求, 建议录用
func (builder *InterviewScoreBuilder) ZhDescription(zhDescription string) *InterviewScoreBuilder {
	builder.zhDescription = zhDescription
	builder.zhDescriptionFlag = true
	return builder
}

// 英文名称
//
// 示例值：three
func (builder *InterviewScoreBuilder) EnName(enName string) *InterviewScoreBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 英文描述
//
// 示例值：Pass, ability to meet the requirements, suggest to hire
func (builder *InterviewScoreBuilder) EnDescription(enDescription string) *InterviewScoreBuilder {
	builder.enDescription = enDescription
	builder.enDescriptionFlag = true
	return builder
}

func (builder *InterviewScoreBuilder) Build() *InterviewScore {
	req := &InterviewScore{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.levelFlag {
		req.Level = &builder.level

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.zhDescriptionFlag {
		req.ZhDescription = &builder.zhDescription

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.enDescriptionFlag {
		req.EnDescription = &builder.enDescription

	}
	return req
}

type InterviewTask struct {
	Id             *string `json:"id,omitempty"`              // 面试 ID
	JobId          *string `json:"job_id,omitempty"`          // 职位 ID
	TalentId       *string `json:"talent_id,omitempty"`       // 人才 ID
	ApplicationId  *string `json:"application_id,omitempty"`  // 投递 ID
	ActivityStatus *int    `json:"activity_status,omitempty"` // 任务状态
}

type InterviewTaskBuilder struct {
	id                 string // 面试 ID
	idFlag             bool
	jobId              string // 职位 ID
	jobIdFlag          bool
	talentId           string // 人才 ID
	talentIdFlag       bool
	applicationId      string // 投递 ID
	applicationIdFlag  bool
	activityStatus     int // 任务状态
	activityStatusFlag bool
}

func NewInterviewTaskBuilder() *InterviewTaskBuilder {
	builder := &InterviewTaskBuilder{}
	return builder
}

// 面试 ID
//
// 示例值：6989202908470446380
func (builder *InterviewTaskBuilder) Id(id string) *InterviewTaskBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职位 ID
//
// 示例值：6897921873523247373
func (builder *InterviewTaskBuilder) JobId(jobId string) *InterviewTaskBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 人才 ID
//
// 示例值：7046263097923537196
func (builder *InterviewTaskBuilder) TalentId(talentId string) *InterviewTaskBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 投递 ID
//
// 示例值：7046315599510833452
func (builder *InterviewTaskBuilder) ApplicationId(applicationId string) *InterviewTaskBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 任务状态
//
// 示例值：1
func (builder *InterviewTaskBuilder) ActivityStatus(activityStatus int) *InterviewTaskBuilder {
	builder.activityStatus = activityStatus
	builder.activityStatusFlag = true
	return builder
}

func (builder *InterviewTaskBuilder) Build() *InterviewTask {
	req := &InterviewTask{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.activityStatusFlag {
		req.ActivityStatus = &builder.activityStatus

	}
	return req
}

type Job struct {
	Id                 *string              `json:"id,omitempty"`                   // 职位 ID
	Title              *string              `json:"title,omitempty"`                // 职位名称
	Description        *string              `json:"description,omitempty"`          // 职位描述
	Code               *string              `json:"code,omitempty"`                 // 职位编号
	Requirement        *string              `json:"requirement,omitempty"`          // 职位要求
	RecruitmentType    *JobRecruitmentType  `json:"recruitment_type,omitempty"`     // 雇佣类型
	Department         *JobDepartment       `json:"department,omitempty"`           // 部门
	City               *JobCity             `json:"city,omitempty"`                 // 工作地点
	MinJobLevel        *JobLevel            `json:"min_job_level,omitempty"`        // 最低职级
	MaxJobLevel        *JobLevel            `json:"max_job_level,omitempty"`        // 最高职级
	HighlightList      []*JobHighlight      `json:"highlight_list,omitempty"`       // 职位亮点
	JobCategory        *JobCategory         `json:"job_category,omitempty"`         // 职位序列
	JobType            *JobType             `json:"job_type,omitempty"`             // 职位类别
	ActiveStatus       *int                 `json:"active_status,omitempty"`        // 启用状态
	CreateUserId       *string              `json:"create_user_id,omitempty"`       // 创建人ID，若为空则为系统或其他对接系统创建
	CreateTime         *int                 `json:"create_time,omitempty"`          // 创建时间
	UpdateTime         *int                 `json:"update_time,omitempty"`          // 更新时间
	ProcessType        *int                 `json:"process_type,omitempty"`         // 招聘流程类型
	ProcessId          *string              `json:"process_id,omitempty"`           // 招聘流程 ID
	ProcessName        *string              `json:"process_name,omitempty"`         // 招聘流程中文名称
	ProcessEnName      *string              `json:"process_en_name,omitempty"`      // 招聘流程英文名称
	CustomizedDataList []*JobCustomizedData `json:"customized_data_list,omitempty"` // 自定义字段列表
	JobFunction        *IdNameObject        `json:"job_function,omitempty"`         // 职能分类
	Subject            *IdNameObject        `json:"subject,omitempty"`              // 职位项目
	HeadCount          *int                 `json:"head_count,omitempty"`           // 招聘数量
	Experience         *int                 `json:"experience,omitempty"`           // 工作年限
	ExpiryTime         *int                 `json:"expiry_time,omitempty"`          // 到期日期
	MinSalary          *int                 `json:"min_salary,omitempty"`           // 最低薪资，单位:k
	MaxSalary          *int                 `json:"max_salary,omitempty"`           // 最高薪资，单位:k
	RequiredDegree     *int                 `json:"required_degree,omitempty"`      // 学历要求
	CityList           []*CodeNameObject    `json:"city_list,omitempty"`            // 工作地点列表
	JobAttribute       *int                 `json:"job_attribute,omitempty"`        // 职位属性，1是实体职位，2是虚拟职位
	CreateTimestamp    *string              `json:"create_timestamp,omitempty"`     // 创建时间戳
	UpdateTimestamp    *string              `json:"update_timestamp,omitempty"`     // 更新时间戳
	ExpiryTimestamp    *string              `json:"expiry_timestamp,omitempty"`     // 到期时间戳
}

type JobBuilder struct {
	id                     string // 职位 ID
	idFlag                 bool
	title                  string // 职位名称
	titleFlag              bool
	description            string // 职位描述
	descriptionFlag        bool
	code                   string // 职位编号
	codeFlag               bool
	requirement            string // 职位要求
	requirementFlag        bool
	recruitmentType        *JobRecruitmentType // 雇佣类型
	recruitmentTypeFlag    bool
	department             *JobDepartment // 部门
	departmentFlag         bool
	city                   *JobCity // 工作地点
	cityFlag               bool
	minJobLevel            *JobLevel // 最低职级
	minJobLevelFlag        bool
	maxJobLevel            *JobLevel // 最高职级
	maxJobLevelFlag        bool
	highlightList          []*JobHighlight // 职位亮点
	highlightListFlag      bool
	jobCategory            *JobCategory // 职位序列
	jobCategoryFlag        bool
	jobType                *JobType // 职位类别
	jobTypeFlag            bool
	activeStatus           int // 启用状态
	activeStatusFlag       bool
	createUserId           string // 创建人ID，若为空则为系统或其他对接系统创建
	createUserIdFlag       bool
	createTime             int // 创建时间
	createTimeFlag         bool
	updateTime             int // 更新时间
	updateTimeFlag         bool
	processType            int // 招聘流程类型
	processTypeFlag        bool
	processId              string // 招聘流程 ID
	processIdFlag          bool
	processName            string // 招聘流程中文名称
	processNameFlag        bool
	processEnName          string // 招聘流程英文名称
	processEnNameFlag      bool
	customizedDataList     []*JobCustomizedData // 自定义字段列表
	customizedDataListFlag bool
	jobFunction            *IdNameObject // 职能分类
	jobFunctionFlag        bool
	subject                *IdNameObject // 职位项目
	subjectFlag            bool
	headCount              int // 招聘数量
	headCountFlag          bool
	experience             int // 工作年限
	experienceFlag         bool
	expiryTime             int // 到期日期
	expiryTimeFlag         bool
	minSalary              int // 最低薪资，单位:k
	minSalaryFlag          bool
	maxSalary              int // 最高薪资，单位:k
	maxSalaryFlag          bool
	requiredDegree         int // 学历要求
	requiredDegreeFlag     bool
	cityList               []*CodeNameObject // 工作地点列表
	cityListFlag           bool
	jobAttribute           int // 职位属性，1是实体职位，2是虚拟职位
	jobAttributeFlag       bool
	createTimestamp        string // 创建时间戳
	createTimestampFlag    bool
	updateTimestamp        string // 更新时间戳
	updateTimestampFlag    bool
	expiryTimestamp        string // 到期时间戳
	expiryTimestampFlag    bool
}

func NewJobBuilder() *JobBuilder {
	builder := &JobBuilder{}
	return builder
}

// 职位 ID
//
// 示例值：6001
func (builder *JobBuilder) Id(id string) *JobBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职位名称
//
// 示例值：测试职位
func (builder *JobBuilder) Title(title string) *JobBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 职位描述
//
// 示例值：职位描述文本
func (builder *JobBuilder) Description(description string) *JobBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 职位编号
//
// 示例值：R18
func (builder *JobBuilder) Code(code string) *JobBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// 职位要求
//
// 示例值：职位要求文本
func (builder *JobBuilder) Requirement(requirement string) *JobBuilder {
	builder.requirement = requirement
	builder.requirementFlag = true
	return builder
}

// 雇佣类型
//
// 示例值：
func (builder *JobBuilder) RecruitmentType(recruitmentType *JobRecruitmentType) *JobBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}

// 部门
//
// 示例值：
func (builder *JobBuilder) Department(department *JobDepartment) *JobBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 工作地点
//
// 示例值：
func (builder *JobBuilder) City(city *JobCity) *JobBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}

// 最低职级
//
// 示例值：
func (builder *JobBuilder) MinJobLevel(minJobLevel *JobLevel) *JobBuilder {
	builder.minJobLevel = minJobLevel
	builder.minJobLevelFlag = true
	return builder
}

// 最高职级
//
// 示例值：
func (builder *JobBuilder) MaxJobLevel(maxJobLevel *JobLevel) *JobBuilder {
	builder.maxJobLevel = maxJobLevel
	builder.maxJobLevelFlag = true
	return builder
}

// 职位亮点
//
// 示例值：
func (builder *JobBuilder) HighlightList(highlightList []*JobHighlight) *JobBuilder {
	builder.highlightList = highlightList
	builder.highlightListFlag = true
	return builder
}

// 职位序列
//
// 示例值：
func (builder *JobBuilder) JobCategory(jobCategory *JobCategory) *JobBuilder {
	builder.jobCategory = jobCategory
	builder.jobCategoryFlag = true
	return builder
}

// 职位类别
//
// 示例值：
func (builder *JobBuilder) JobType(jobType *JobType) *JobBuilder {
	builder.jobType = jobType
	builder.jobTypeFlag = true
	return builder
}

// 启用状态
//
// 示例值：1
func (builder *JobBuilder) ActiveStatus(activeStatus int) *JobBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 创建人ID，若为空则为系统或其他对接系统创建
//
// 示例值：ou-xxx
func (builder *JobBuilder) CreateUserId(createUserId string) *JobBuilder {
	builder.createUserId = createUserId
	builder.createUserIdFlag = true
	return builder
}

// 创建时间
//
// 示例值：1617170925462
func (builder *JobBuilder) CreateTime(createTime int) *JobBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 更新时间
//
// 示例值：1617170925462
func (builder *JobBuilder) UpdateTime(updateTime int) *JobBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}

// 招聘流程类型
//
// 示例值：1
func (builder *JobBuilder) ProcessType(processType int) *JobBuilder {
	builder.processType = processType
	builder.processTypeFlag = true
	return builder
}

// 招聘流程 ID
//
// 示例值：1
func (builder *JobBuilder) ProcessId(processId string) *JobBuilder {
	builder.processId = processId
	builder.processIdFlag = true
	return builder
}

// 招聘流程中文名称
//
// 示例值：流程中文名
func (builder *JobBuilder) ProcessName(processName string) *JobBuilder {
	builder.processName = processName
	builder.processNameFlag = true
	return builder
}

// 招聘流程英文名称
//
// 示例值：流程英文名
func (builder *JobBuilder) ProcessEnName(processEnName string) *JobBuilder {
	builder.processEnName = processEnName
	builder.processEnNameFlag = true
	return builder
}

// 自定义字段列表
//
// 示例值：
func (builder *JobBuilder) CustomizedDataList(customizedDataList []*JobCustomizedData) *JobBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

// 职能分类
//
// 示例值：
func (builder *JobBuilder) JobFunction(jobFunction *IdNameObject) *JobBuilder {
	builder.jobFunction = jobFunction
	builder.jobFunctionFlag = true
	return builder
}

// 职位项目
//
// 示例值：
func (builder *JobBuilder) Subject(subject *IdNameObject) *JobBuilder {
	builder.subject = subject
	builder.subjectFlag = true
	return builder
}

// 招聘数量
//
// 示例值：100
func (builder *JobBuilder) HeadCount(headCount int) *JobBuilder {
	builder.headCount = headCount
	builder.headCountFlag = true
	return builder
}

// 工作年限
//
// 示例值：1
func (builder *JobBuilder) Experience(experience int) *JobBuilder {
	builder.experience = experience
	builder.experienceFlag = true
	return builder
}

// 到期日期
//
// 示例值：1622484739955
func (builder *JobBuilder) ExpiryTime(expiryTime int) *JobBuilder {
	builder.expiryTime = expiryTime
	builder.expiryTimeFlag = true
	return builder
}

// 最低薪资，单位:k
//
// 示例值：10
func (builder *JobBuilder) MinSalary(minSalary int) *JobBuilder {
	builder.minSalary = minSalary
	builder.minSalaryFlag = true
	return builder
}

// 最高薪资，单位:k
//
// 示例值：20
func (builder *JobBuilder) MaxSalary(maxSalary int) *JobBuilder {
	builder.maxSalary = maxSalary
	builder.maxSalaryFlag = true
	return builder
}

// 学历要求
//
// 示例值：1
func (builder *JobBuilder) RequiredDegree(requiredDegree int) *JobBuilder {
	builder.requiredDegree = requiredDegree
	builder.requiredDegreeFlag = true
	return builder
}

// 工作地点列表
//
// 示例值：
func (builder *JobBuilder) CityList(cityList []*CodeNameObject) *JobBuilder {
	builder.cityList = cityList
	builder.cityListFlag = true
	return builder
}

// 职位属性，1是实体职位，2是虚拟职位
//
// 示例值：1
func (builder *JobBuilder) JobAttribute(jobAttribute int) *JobBuilder {
	builder.jobAttribute = jobAttribute
	builder.jobAttributeFlag = true
	return builder
}

// 创建时间戳
//
// 示例值：1617170925462
func (builder *JobBuilder) CreateTimestamp(createTimestamp string) *JobBuilder {
	builder.createTimestamp = createTimestamp
	builder.createTimestampFlag = true
	return builder
}

// 更新时间戳
//
// 示例值：1617170925462
func (builder *JobBuilder) UpdateTimestamp(updateTimestamp string) *JobBuilder {
	builder.updateTimestamp = updateTimestamp
	builder.updateTimestampFlag = true
	return builder
}

// 到期时间戳
//
// 示例值：1622484739955
func (builder *JobBuilder) ExpiryTimestamp(expiryTimestamp string) *JobBuilder {
	builder.expiryTimestamp = expiryTimestamp
	builder.expiryTimestampFlag = true
	return builder
}

func (builder *JobBuilder) Build() *Job {
	req := &Job{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.requirementFlag {
		req.Requirement = &builder.requirement

	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.minJobLevelFlag {
		req.MinJobLevel = builder.minJobLevel
	}
	if builder.maxJobLevelFlag {
		req.MaxJobLevel = builder.maxJobLevel
	}
	if builder.highlightListFlag {
		req.HighlightList = builder.highlightList
	}
	if builder.jobCategoryFlag {
		req.JobCategory = builder.jobCategory
	}
	if builder.jobTypeFlag {
		req.JobType = builder.jobType
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.createUserIdFlag {
		req.CreateUserId = &builder.createUserId

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	if builder.processTypeFlag {
		req.ProcessType = &builder.processType

	}
	if builder.processIdFlag {
		req.ProcessId = &builder.processId

	}
	if builder.processNameFlag {
		req.ProcessName = &builder.processName

	}
	if builder.processEnNameFlag {
		req.ProcessEnName = &builder.processEnName

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.jobFunctionFlag {
		req.JobFunction = builder.jobFunction
	}
	if builder.subjectFlag {
		req.Subject = builder.subject
	}
	if builder.headCountFlag {
		req.HeadCount = &builder.headCount

	}
	if builder.experienceFlag {
		req.Experience = &builder.experience

	}
	if builder.expiryTimeFlag {
		req.ExpiryTime = &builder.expiryTime

	}
	if builder.minSalaryFlag {
		req.MinSalary = &builder.minSalary

	}
	if builder.maxSalaryFlag {
		req.MaxSalary = &builder.maxSalary

	}
	if builder.requiredDegreeFlag {
		req.RequiredDegree = &builder.requiredDegree

	}
	if builder.cityListFlag {
		req.CityList = builder.cityList
	}
	if builder.jobAttributeFlag {
		req.JobAttribute = &builder.jobAttribute

	}
	if builder.createTimestampFlag {
		req.CreateTimestamp = &builder.createTimestamp

	}
	if builder.updateTimestampFlag {
		req.UpdateTimestamp = &builder.updateTimestamp

	}
	if builder.expiryTimestampFlag {
		req.ExpiryTimestamp = &builder.expiryTimestamp

	}
	return req
}

type JobManager struct {
	Id                  *string  `json:"id,omitempty"`                     // 职位 ID
	RecruiterId         *string  `json:"recruiter_id,omitempty"`           // 招聘负责人 ID，仅一位，可通过用户相关接口获取用户 ID
	HiringManagerIdList []string `json:"hiring_manager_id_list,omitempty"` // 用人经理 ID 列表
	AssistantIdList     []string `json:"assistant_id_list,omitempty"`      // 协助人 ID 列表
}

type JobManagerBuilder struct {
	id                      string // 职位 ID
	idFlag                  bool
	recruiterId             string // 招聘负责人 ID，仅一位，可通过用户相关接口获取用户 ID
	recruiterIdFlag         bool
	hiringManagerIdList     []string // 用人经理 ID 列表
	hiringManagerIdListFlag bool
	assistantIdList         []string // 协助人 ID 列表
	assistantIdListFlag     bool
}

func NewJobManagerBuilder() *JobManagerBuilder {
	builder := &JobManagerBuilder{}
	return builder
}

// 职位 ID
//
// 示例值：1618209327096
func (builder *JobManagerBuilder) Id(id string) *JobManagerBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 招聘负责人 ID，仅一位，可通过用户相关接口获取用户 ID
//
// 示例值：ou_efk39117c300506837def50545420c6a
func (builder *JobManagerBuilder) RecruiterId(recruiterId string) *JobManagerBuilder {
	builder.recruiterId = recruiterId
	builder.recruiterIdFlag = true
	return builder
}

// 用人经理 ID 列表
//
// 示例值：6960663240925956554
func (builder *JobManagerBuilder) HiringManagerIdList(hiringManagerIdList []string) *JobManagerBuilder {
	builder.hiringManagerIdList = hiringManagerIdList
	builder.hiringManagerIdListFlag = true
	return builder
}

// 协助人 ID 列表
//
// 示例值：6960663240925956554
func (builder *JobManagerBuilder) AssistantIdList(assistantIdList []string) *JobManagerBuilder {
	builder.assistantIdList = assistantIdList
	builder.assistantIdListFlag = true
	return builder
}

func (builder *JobManagerBuilder) Build() *JobManager {
	req := &JobManager{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.recruiterIdFlag {
		req.RecruiterId = &builder.recruiterId

	}
	if builder.hiringManagerIdListFlag {
		req.HiringManagerIdList = builder.hiringManagerIdList
	}
	if builder.assistantIdListFlag {
		req.AssistantIdList = builder.assistantIdList
	}
	return req
}

type JobRecruiter struct {
	Id                  *string  `json:"id,omitempty"`                     // 职位ID
	RecruiterId         *string  `json:"recruiter_id,omitempty"`           // 招聘负责人ID
	HiringManagerIdList []string `json:"hiring_manager_id_list,omitempty"` // 用人经理ID列表
	AssistantIdList     []string `json:"assistant_id_list,omitempty"`      // 协助人ID列表
}

type JobRecruiterBuilder struct {
	id                      string // 职位ID
	idFlag                  bool
	recruiterId             string // 招聘负责人ID
	recruiterIdFlag         bool
	hiringManagerIdList     []string // 用人经理ID列表
	hiringManagerIdListFlag bool
	assistantIdList         []string // 协助人ID列表
	assistantIdListFlag     bool
}

func NewJobRecruiterBuilder() *JobRecruiterBuilder {
	builder := &JobRecruiterBuilder{}
	return builder
}

// 职位ID
//
// 示例值：
func (builder *JobRecruiterBuilder) Id(id string) *JobRecruiterBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 招聘负责人ID
//
// 示例值：
func (builder *JobRecruiterBuilder) RecruiterId(recruiterId string) *JobRecruiterBuilder {
	builder.recruiterId = recruiterId
	builder.recruiterIdFlag = true
	return builder
}

// 用人经理ID列表
//
// 示例值：
func (builder *JobRecruiterBuilder) HiringManagerIdList(hiringManagerIdList []string) *JobRecruiterBuilder {
	builder.hiringManagerIdList = hiringManagerIdList
	builder.hiringManagerIdListFlag = true
	return builder
}

// 协助人ID列表
//
// 示例值：
func (builder *JobRecruiterBuilder) AssistantIdList(assistantIdList []string) *JobRecruiterBuilder {
	builder.assistantIdList = assistantIdList
	builder.assistantIdListFlag = true
	return builder
}

func (builder *JobRecruiterBuilder) Build() *JobRecruiter {
	req := &JobRecruiter{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.recruiterIdFlag {
		req.RecruiterId = &builder.recruiterId

	}
	if builder.hiringManagerIdListFlag {
		req.HiringManagerIdList = builder.hiringManagerIdList
	}
	if builder.assistantIdListFlag {
		req.AssistantIdList = builder.assistantIdList
	}
	return req
}

type JobCategory struct {
	Id           *string `json:"id,omitempty"`            // 职位序列 ID
	ZhName       *string `json:"zh_name,omitempty"`       // 职位序列中文名称
	EnName       *string `json:"en_name,omitempty"`       // 职位序列英文名称
	ActiveStatus *int    `json:"active_status,omitempty"` // 职位序列启用状态
}

type JobCategoryBuilder struct {
	id               string // 职位序列 ID
	idFlag           bool
	zhName           string // 职位序列中文名称
	zhNameFlag       bool
	enName           string // 职位序列英文名称
	enNameFlag       bool
	activeStatus     int // 职位序列启用状态
	activeStatusFlag bool
}

func NewJobCategoryBuilder() *JobCategoryBuilder {
	builder := &JobCategoryBuilder{}
	return builder
}

// 职位序列 ID
//
// 示例值：6301
func (builder *JobCategoryBuilder) Id(id string) *JobCategoryBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职位序列中文名称
//
// 示例值：序列-A
func (builder *JobCategoryBuilder) ZhName(zhName string) *JobCategoryBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 职位序列英文名称
//
// 示例值：category-A
func (builder *JobCategoryBuilder) EnName(enName string) *JobCategoryBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 职位序列启用状态
//
// 示例值：1
func (builder *JobCategoryBuilder) ActiveStatus(activeStatus int) *JobCategoryBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *JobCategoryBuilder) Build() *JobCategory {
	req := &JobCategory{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

type JobCity struct {
	CityCode *string `json:"city_code,omitempty"` // 工作地点城市代码
	ZhName   *string `json:"zh_name,omitempty"`   // 工作地点中文名称
	EnName   *string `json:"en_name,omitempty"`   // 工作地点英文名称
}

type JobCityBuilder struct {
	cityCode     string // 工作地点城市代码
	cityCodeFlag bool
	zhName       string // 工作地点中文名称
	zhNameFlag   bool
	enName       string // 工作地点英文名称
	enNameFlag   bool
}

func NewJobCityBuilder() *JobCityBuilder {
	builder := &JobCityBuilder{}
	return builder
}

// 工作地点城市代码
//
// 示例值：C20
func (builder *JobCityBuilder) CityCode(cityCode string) *JobCityBuilder {
	builder.cityCode = cityCode
	builder.cityCodeFlag = true
	return builder
}

// 工作地点中文名称
//
// 示例值：成都
func (builder *JobCityBuilder) ZhName(zhName string) *JobCityBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 工作地点英文名称
//
// 示例值：Chengdu
func (builder *JobCityBuilder) EnName(enName string) *JobCityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *JobCityBuilder) Build() *JobCity {
	req := &JobCity{}
	if builder.cityCodeFlag {
		req.CityCode = &builder.cityCode

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type JobConfig struct {
	OfferApplySchemaId            *string                        `json:"offer_apply_schema_id,omitempty"`            // Offer 申请表，枚举通过接口「获取 Offer 申请表列表」获取
	OfferProcessConf              *string                        `json:"offer_process_conf,omitempty"`               // Offer 审批流，枚举通过接口「获取 Offer 审批流列表」获取
	RecommendedEvaluatorIdList    []string                       `json:"recommended_evaluator_id_list,omitempty"`    // 建议评估人 ID 列表
	UpdateOptionList              []int                          `json:"update_option_list,omitempty"`               // 更新选项，传入要更新的配置项，1=更新面试评价表，2=更新 Offer 申请表，3=更新 Offer 审批流程，4=更新招聘需求，5=更新建议面试官，6=更新推荐评估人
	AssessmentTemplateBizId       *string                        `json:"assessment_template_biz_id,omitempty"`       // 面试评价表，枚举通过接口「获取面试评价表列表」获取
	InterviewRoundConfList        []*JobConfigInterviewRoundConf `json:"interview_round_conf_list,omitempty"`        // 建议面试官列表
	JrIdList                      []string                       `json:"jr_id_list,omitempty"`                       // 关联招聘需求，支持关联多个，枚举通过接口「获取招聘需求」获取
	InterviewRegistrationSchemaId *string                        `json:"interview_registration_schema_id,omitempty"` // 面试登记表 ID, 仅在面试登记表使用设置中开启按职位设置选项后生效
	InterviewRoundTypeConfList    []*JobConfigRoundType          `json:"interview_round_type_conf_list,omitempty"`   // 面试轮次类型 ID 列表
	RelatedJobIdList              []string                       `json:"related_job_id_list,omitempty"`              // 关联职位列表，如职位为实体职位则关联虚拟职位id，如职位为虚拟职位则关联实体职位id
	InterviewAppointmentConfig    *InterviewAppointmentConfig    `json:"interview_appointment_config,omitempty"`     // 自助约面配置
}

type JobConfigBuilder struct {
	offerApplySchemaId                string // Offer 申请表，枚举通过接口「获取 Offer 申请表列表」获取
	offerApplySchemaIdFlag            bool
	offerProcessConf                  string // Offer 审批流，枚举通过接口「获取 Offer 审批流列表」获取
	offerProcessConfFlag              bool
	recommendedEvaluatorIdList        []string // 建议评估人 ID 列表
	recommendedEvaluatorIdListFlag    bool
	updateOptionList                  []int // 更新选项，传入要更新的配置项，1=更新面试评价表，2=更新 Offer 申请表，3=更新 Offer 审批流程，4=更新招聘需求，5=更新建议面试官，6=更新推荐评估人
	updateOptionListFlag              bool
	assessmentTemplateBizId           string // 面试评价表，枚举通过接口「获取面试评价表列表」获取
	assessmentTemplateBizIdFlag       bool
	interviewRoundConfList            []*JobConfigInterviewRoundConf // 建议面试官列表
	interviewRoundConfListFlag        bool
	jrIdList                          []string // 关联招聘需求，支持关联多个，枚举通过接口「获取招聘需求」获取
	jrIdListFlag                      bool
	interviewRegistrationSchemaId     string // 面试登记表 ID, 仅在面试登记表使用设置中开启按职位设置选项后生效
	interviewRegistrationSchemaIdFlag bool
	interviewRoundTypeConfList        []*JobConfigRoundType // 面试轮次类型 ID 列表
	interviewRoundTypeConfListFlag    bool
	relatedJobIdList                  []string // 关联职位列表，如职位为实体职位则关联虚拟职位id，如职位为虚拟职位则关联实体职位id
	relatedJobIdListFlag              bool
	interviewAppointmentConfig        *InterviewAppointmentConfig // 自助约面配置
	interviewAppointmentConfigFlag    bool
}

func NewJobConfigBuilder() *JobConfigBuilder {
	builder := &JobConfigBuilder{}
	return builder
}

// Offer 申请表，枚举通过接口「获取 Offer 申请表列表」获取
//
// 示例值：6960663240925956573
func (builder *JobConfigBuilder) OfferApplySchemaId(offerApplySchemaId string) *JobConfigBuilder {
	builder.offerApplySchemaId = offerApplySchemaId
	builder.offerApplySchemaIdFlag = true
	return builder
}

// Offer 审批流，枚举通过接口「获取 Offer 审批流列表」获取
//
// 示例值：6960663240925956572
func (builder *JobConfigBuilder) OfferProcessConf(offerProcessConf string) *JobConfigBuilder {
	builder.offerProcessConf = offerProcessConf
	builder.offerProcessConfFlag = true
	return builder
}

// 建议评估人 ID 列表
//
// 示例值：6966533137982392320
func (builder *JobConfigBuilder) RecommendedEvaluatorIdList(recommendedEvaluatorIdList []string) *JobConfigBuilder {
	builder.recommendedEvaluatorIdList = recommendedEvaluatorIdList
	builder.recommendedEvaluatorIdListFlag = true
	return builder
}

// 更新选项，传入要更新的配置项，1=更新面试评价表，2=更新 Offer 申请表，3=更新 Offer 审批流程，4=更新招聘需求，5=更新建议面试官，6=更新推荐评估人
//
// 示例值：1
func (builder *JobConfigBuilder) UpdateOptionList(updateOptionList []int) *JobConfigBuilder {
	builder.updateOptionList = updateOptionList
	builder.updateOptionListFlag = true
	return builder
}

// 面试评价表，枚举通过接口「获取面试评价表列表」获取
//
// 示例值：6960663240925956571
func (builder *JobConfigBuilder) AssessmentTemplateBizId(assessmentTemplateBizId string) *JobConfigBuilder {
	builder.assessmentTemplateBizId = assessmentTemplateBizId
	builder.assessmentTemplateBizIdFlag = true
	return builder
}

// 建议面试官列表
//
// 示例值：
func (builder *JobConfigBuilder) InterviewRoundConfList(interviewRoundConfList []*JobConfigInterviewRoundConf) *JobConfigBuilder {
	builder.interviewRoundConfList = interviewRoundConfList
	builder.interviewRoundConfListFlag = true
	return builder
}

// 关联招聘需求，支持关联多个，枚举通过接口「获取招聘需求」获取
//
// 示例值：6966533137982392320
func (builder *JobConfigBuilder) JrIdList(jrIdList []string) *JobConfigBuilder {
	builder.jrIdList = jrIdList
	builder.jrIdListFlag = true
	return builder
}

// 面试登记表 ID, 仅在面试登记表使用设置中开启按职位设置选项后生效
//
// 示例值：6930815272790114324
func (builder *JobConfigBuilder) InterviewRegistrationSchemaId(interviewRegistrationSchemaId string) *JobConfigBuilder {
	builder.interviewRegistrationSchemaId = interviewRegistrationSchemaId
	builder.interviewRegistrationSchemaIdFlag = true
	return builder
}

// 面试轮次类型 ID 列表
//
// 示例值：
func (builder *JobConfigBuilder) InterviewRoundTypeConfList(interviewRoundTypeConfList []*JobConfigRoundType) *JobConfigBuilder {
	builder.interviewRoundTypeConfList = interviewRoundTypeConfList
	builder.interviewRoundTypeConfListFlag = true
	return builder
}

// 关联职位列表，如职位为实体职位则关联虚拟职位id，如职位为虚拟职位则关联实体职位id
//
// 示例值：6966533137982392320
func (builder *JobConfigBuilder) RelatedJobIdList(relatedJobIdList []string) *JobConfigBuilder {
	builder.relatedJobIdList = relatedJobIdList
	builder.relatedJobIdListFlag = true
	return builder
}

// 自助约面配置
//
// 示例值：
func (builder *JobConfigBuilder) InterviewAppointmentConfig(interviewAppointmentConfig *InterviewAppointmentConfig) *JobConfigBuilder {
	builder.interviewAppointmentConfig = interviewAppointmentConfig
	builder.interviewAppointmentConfigFlag = true
	return builder
}

func (builder *JobConfigBuilder) Build() *JobConfig {
	req := &JobConfig{}
	if builder.offerApplySchemaIdFlag {
		req.OfferApplySchemaId = &builder.offerApplySchemaId

	}
	if builder.offerProcessConfFlag {
		req.OfferProcessConf = &builder.offerProcessConf

	}
	if builder.recommendedEvaluatorIdListFlag {
		req.RecommendedEvaluatorIdList = builder.recommendedEvaluatorIdList
	}
	if builder.updateOptionListFlag {
		req.UpdateOptionList = builder.updateOptionList
	}
	if builder.assessmentTemplateBizIdFlag {
		req.AssessmentTemplateBizId = &builder.assessmentTemplateBizId

	}
	if builder.interviewRoundConfListFlag {
		req.InterviewRoundConfList = builder.interviewRoundConfList
	}
	if builder.jrIdListFlag {
		req.JrIdList = builder.jrIdList
	}
	if builder.interviewRegistrationSchemaIdFlag {
		req.InterviewRegistrationSchemaId = &builder.interviewRegistrationSchemaId

	}
	if builder.interviewRoundTypeConfListFlag {
		req.InterviewRoundTypeConfList = builder.interviewRoundTypeConfList
	}
	if builder.relatedJobIdListFlag {
		req.RelatedJobIdList = builder.relatedJobIdList
	}
	if builder.interviewAppointmentConfigFlag {
		req.InterviewAppointmentConfig = builder.interviewAppointmentConfig
	}
	return req
}

type JobConfigInterviewRound struct {
	InterviewerList []*IdNameObject `json:"interviewer_list,omitempty"` // 面试官列表
	Round           *int            `json:"round,omitempty"`            // 面试轮次
}

type JobConfigInterviewRoundBuilder struct {
	interviewerList     []*IdNameObject // 面试官列表
	interviewerListFlag bool
	round               int // 面试轮次
	roundFlag           bool
}

func NewJobConfigInterviewRoundBuilder() *JobConfigInterviewRoundBuilder {
	builder := &JobConfigInterviewRoundBuilder{}
	return builder
}

// 面试官列表
//
// 示例值：
func (builder *JobConfigInterviewRoundBuilder) InterviewerList(interviewerList []*IdNameObject) *JobConfigInterviewRoundBuilder {
	builder.interviewerList = interviewerList
	builder.interviewerListFlag = true
	return builder
}

// 面试轮次
//
// 示例值：1
func (builder *JobConfigInterviewRoundBuilder) Round(round int) *JobConfigInterviewRoundBuilder {
	builder.round = round
	builder.roundFlag = true
	return builder
}

func (builder *JobConfigInterviewRoundBuilder) Build() *JobConfigInterviewRound {
	req := &JobConfigInterviewRound{}
	if builder.interviewerListFlag {
		req.InterviewerList = builder.interviewerList
	}
	if builder.roundFlag {
		req.Round = &builder.round

	}
	return req
}

type JobConfigInterviewRoundConf struct {
	InterviewerIdList []string `json:"interviewer_id_list,omitempty"` // 建议面试官 ID 列表
	Round             *int     `json:"round,omitempty"`               // 面试轮次
}

type JobConfigInterviewRoundConfBuilder struct {
	interviewerIdList     []string // 建议面试官 ID 列表
	interviewerIdListFlag bool
	round                 int // 面试轮次
	roundFlag             bool
}

func NewJobConfigInterviewRoundConfBuilder() *JobConfigInterviewRoundConfBuilder {
	builder := &JobConfigInterviewRoundConfBuilder{}
	return builder
}

// 建议面试官 ID 列表
//
// 示例值：6960663240925956571
func (builder *JobConfigInterviewRoundConfBuilder) InterviewerIdList(interviewerIdList []string) *JobConfigInterviewRoundConfBuilder {
	builder.interviewerIdList = interviewerIdList
	builder.interviewerIdListFlag = true
	return builder
}

// 面试轮次
//
// 示例值：1
func (builder *JobConfigInterviewRoundConfBuilder) Round(round int) *JobConfigInterviewRoundConfBuilder {
	builder.round = round
	builder.roundFlag = true
	return builder
}

func (builder *JobConfigInterviewRoundConfBuilder) Build() *JobConfigInterviewRoundConf {
	req := &JobConfigInterviewRoundConf{}
	if builder.interviewerIdListFlag {
		req.InterviewerIdList = builder.interviewerIdList
	}
	if builder.roundFlag {
		req.Round = &builder.round

	}
	return req
}

type JobConfigResult struct {
	OfferApplySchema            *IdNameObject               `json:"offer_apply_schema,omitempty"`            // Offer 申请表
	OfferProcessConf            *IdNameObject               `json:"offer_process_conf,omitempty"`            // Offer 审批流
	RecommendedEvaluatorList    []*IdNameObject             `json:"recommended_evaluator_list,omitempty"`    // 建议评估人列表
	AssessmentTemplate          *IdNameObject               `json:"assessment_template,omitempty"`           // 面试评价表
	Id                          *string                     `json:"id,omitempty"`                            // 职位 ID
	InterviewRoundList          []*JobConfigInterviewRound  `json:"interview_round_list,omitempty"`          // 建议面试官列表
	JobRequirementList          []*IdNameObject             `json:"job_requirement_list,omitempty"`          // 招聘需求
	InterviewRegistrationSchema *RegistrationInfo           `json:"interview_registration_schema,omitempty"` // 面试登记表
	InterviewRoundTypeList      []*JobConfigRoundTypeResult `json:"interview_round_type_list,omitempty"`     // 面试轮次类型列表
	RelatedJobList              []*IdNameObject             `json:"related_job_list,omitempty"`              // 关联职位列表
	JobAttribute                *int                        `json:"job_attribute,omitempty"`                 // 职位属性，1是实体职位，2是虚拟职位
}

type JobConfigResultBuilder struct {
	offerApplySchema                *IdNameObject // Offer 申请表
	offerApplySchemaFlag            bool
	offerProcessConf                *IdNameObject // Offer 审批流
	offerProcessConfFlag            bool
	recommendedEvaluatorList        []*IdNameObject // 建议评估人列表
	recommendedEvaluatorListFlag    bool
	assessmentTemplate              *IdNameObject // 面试评价表
	assessmentTemplateFlag          bool
	id                              string // 职位 ID
	idFlag                          bool
	interviewRoundList              []*JobConfigInterviewRound // 建议面试官列表
	interviewRoundListFlag          bool
	jobRequirementList              []*IdNameObject // 招聘需求
	jobRequirementListFlag          bool
	interviewRegistrationSchema     *RegistrationInfo // 面试登记表
	interviewRegistrationSchemaFlag bool
	interviewRoundTypeList          []*JobConfigRoundTypeResult // 面试轮次类型列表
	interviewRoundTypeListFlag      bool
	relatedJobList                  []*IdNameObject // 关联职位列表
	relatedJobListFlag              bool
	jobAttribute                    int // 职位属性，1是实体职位，2是虚拟职位
	jobAttributeFlag                bool
}

func NewJobConfigResultBuilder() *JobConfigResultBuilder {
	builder := &JobConfigResultBuilder{}
	return builder
}

// Offer 申请表
//
// 示例值：
func (builder *JobConfigResultBuilder) OfferApplySchema(offerApplySchema *IdNameObject) *JobConfigResultBuilder {
	builder.offerApplySchema = offerApplySchema
	builder.offerApplySchemaFlag = true
	return builder
}

// Offer 审批流
//
// 示例值：
func (builder *JobConfigResultBuilder) OfferProcessConf(offerProcessConf *IdNameObject) *JobConfigResultBuilder {
	builder.offerProcessConf = offerProcessConf
	builder.offerProcessConfFlag = true
	return builder
}

// 建议评估人列表
//
// 示例值：
func (builder *JobConfigResultBuilder) RecommendedEvaluatorList(recommendedEvaluatorList []*IdNameObject) *JobConfigResultBuilder {
	builder.recommendedEvaluatorList = recommendedEvaluatorList
	builder.recommendedEvaluatorListFlag = true
	return builder
}

// 面试评价表
//
// 示例值：
func (builder *JobConfigResultBuilder) AssessmentTemplate(assessmentTemplate *IdNameObject) *JobConfigResultBuilder {
	builder.assessmentTemplate = assessmentTemplate
	builder.assessmentTemplateFlag = true
	return builder
}

// 职位 ID
//
// 示例值：6960663240925956574
func (builder *JobConfigResultBuilder) Id(id string) *JobConfigResultBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 建议面试官列表
//
// 示例值：
func (builder *JobConfigResultBuilder) InterviewRoundList(interviewRoundList []*JobConfigInterviewRound) *JobConfigResultBuilder {
	builder.interviewRoundList = interviewRoundList
	builder.interviewRoundListFlag = true
	return builder
}

// 招聘需求
//
// 示例值：
func (builder *JobConfigResultBuilder) JobRequirementList(jobRequirementList []*IdNameObject) *JobConfigResultBuilder {
	builder.jobRequirementList = jobRequirementList
	builder.jobRequirementListFlag = true
	return builder
}

// 面试登记表
//
// 示例值：
func (builder *JobConfigResultBuilder) InterviewRegistrationSchema(interviewRegistrationSchema *RegistrationInfo) *JobConfigResultBuilder {
	builder.interviewRegistrationSchema = interviewRegistrationSchema
	builder.interviewRegistrationSchemaFlag = true
	return builder
}

// 面试轮次类型列表
//
// 示例值：
func (builder *JobConfigResultBuilder) InterviewRoundTypeList(interviewRoundTypeList []*JobConfigRoundTypeResult) *JobConfigResultBuilder {
	builder.interviewRoundTypeList = interviewRoundTypeList
	builder.interviewRoundTypeListFlag = true
	return builder
}

// 关联职位列表
//
// 示例值：
func (builder *JobConfigResultBuilder) RelatedJobList(relatedJobList []*IdNameObject) *JobConfigResultBuilder {
	builder.relatedJobList = relatedJobList
	builder.relatedJobListFlag = true
	return builder
}

// 职位属性，1是实体职位，2是虚拟职位
//
// 示例值：1
func (builder *JobConfigResultBuilder) JobAttribute(jobAttribute int) *JobConfigResultBuilder {
	builder.jobAttribute = jobAttribute
	builder.jobAttributeFlag = true
	return builder
}

func (builder *JobConfigResultBuilder) Build() *JobConfigResult {
	req := &JobConfigResult{}
	if builder.offerApplySchemaFlag {
		req.OfferApplySchema = builder.offerApplySchema
	}
	if builder.offerProcessConfFlag {
		req.OfferProcessConf = builder.offerProcessConf
	}
	if builder.recommendedEvaluatorListFlag {
		req.RecommendedEvaluatorList = builder.recommendedEvaluatorList
	}
	if builder.assessmentTemplateFlag {
		req.AssessmentTemplate = builder.assessmentTemplate
	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.interviewRoundListFlag {
		req.InterviewRoundList = builder.interviewRoundList
	}
	if builder.jobRequirementListFlag {
		req.JobRequirementList = builder.jobRequirementList
	}
	if builder.interviewRegistrationSchemaFlag {
		req.InterviewRegistrationSchema = builder.interviewRegistrationSchema
	}
	if builder.interviewRoundTypeListFlag {
		req.InterviewRoundTypeList = builder.interviewRoundTypeList
	}
	if builder.relatedJobListFlag {
		req.RelatedJobList = builder.relatedJobList
	}
	if builder.jobAttributeFlag {
		req.JobAttribute = &builder.jobAttribute

	}
	return req
}

type JobConfigRoundType struct {
	RoundBizId              *string `json:"round_biz_id,omitempty"`               // 面试轮次类型业务 ID
	AssessmentTemplateBizId *string `json:"assessment_template_biz_id,omitempty"` // 面试评价表业务 ID
}

type JobConfigRoundTypeBuilder struct {
	roundBizId                  string // 面试轮次类型业务 ID
	roundBizIdFlag              bool
	assessmentTemplateBizId     string // 面试评价表业务 ID
	assessmentTemplateBizIdFlag bool
}

func NewJobConfigRoundTypeBuilder() *JobConfigRoundTypeBuilder {
	builder := &JobConfigRoundTypeBuilder{}
	return builder
}

// 面试轮次类型业务 ID
//
// 示例值：7012129842917837100
func (builder *JobConfigRoundTypeBuilder) RoundBizId(roundBizId string) *JobConfigRoundTypeBuilder {
	builder.roundBizId = roundBizId
	builder.roundBizIdFlag = true
	return builder
}

// 面试评价表业务 ID
//
// 示例值：6960663240925956632
func (builder *JobConfigRoundTypeBuilder) AssessmentTemplateBizId(assessmentTemplateBizId string) *JobConfigRoundTypeBuilder {
	builder.assessmentTemplateBizId = assessmentTemplateBizId
	builder.assessmentTemplateBizIdFlag = true
	return builder
}

func (builder *JobConfigRoundTypeBuilder) Build() *JobConfigRoundType {
	req := &JobConfigRoundType{}
	if builder.roundBizIdFlag {
		req.RoundBizId = &builder.roundBizId

	}
	if builder.assessmentTemplateBizIdFlag {
		req.AssessmentTemplateBizId = &builder.assessmentTemplateBizId

	}
	return req
}

type JobConfigRoundTypeResult struct {
	AssessmentRound    *IdNameObject `json:"assessment_round,omitempty"`    // 面试轮次类型
	AssessmentTemplate *IdNameObject `json:"assessment_template,omitempty"` // 面试评价表
}

type JobConfigRoundTypeResultBuilder struct {
	assessmentRound        *IdNameObject // 面试轮次类型
	assessmentRoundFlag    bool
	assessmentTemplate     *IdNameObject // 面试评价表
	assessmentTemplateFlag bool
}

func NewJobConfigRoundTypeResultBuilder() *JobConfigRoundTypeResultBuilder {
	builder := &JobConfigRoundTypeResultBuilder{}
	return builder
}

// 面试轮次类型
//
// 示例值：
func (builder *JobConfigRoundTypeResultBuilder) AssessmentRound(assessmentRound *IdNameObject) *JobConfigRoundTypeResultBuilder {
	builder.assessmentRound = assessmentRound
	builder.assessmentRoundFlag = true
	return builder
}

// 面试评价表
//
// 示例值：
func (builder *JobConfigRoundTypeResultBuilder) AssessmentTemplate(assessmentTemplate *IdNameObject) *JobConfigRoundTypeResultBuilder {
	builder.assessmentTemplate = assessmentTemplate
	builder.assessmentTemplateFlag = true
	return builder
}

func (builder *JobConfigRoundTypeResultBuilder) Build() *JobConfigRoundTypeResult {
	req := &JobConfigRoundTypeResult{}
	if builder.assessmentRoundFlag {
		req.AssessmentRound = builder.assessmentRound
	}
	if builder.assessmentTemplateFlag {
		req.AssessmentTemplate = builder.assessmentTemplate
	}
	return req
}

type JobCustomizedData struct {
	ObjectId   *string             `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *I18n               `json:"name,omitempty"`        // 字段名称
	ObjectType *int                `json:"object_type,omitempty"` // 字段类型
	Value      *JobCustomizedValue `json:"value,omitempty"`       // 自定义字段值
}

type JobCustomizedDataBuilder struct {
	objectId       string // 自定义字段 ID
	objectIdFlag   bool
	name           *I18n // 字段名称
	nameFlag       bool
	objectType     int // 字段类型
	objectTypeFlag bool
	value          *JobCustomizedValue // 自定义字段值
	valueFlag      bool
}

func NewJobCustomizedDataBuilder() *JobCustomizedDataBuilder {
	builder := &JobCustomizedDataBuilder{}
	return builder
}

// 自定义字段 ID
//
// 示例值：xxxx
func (builder *JobCustomizedDataBuilder) ObjectId(objectId string) *JobCustomizedDataBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}

// 字段名称
//
// 示例值：
func (builder *JobCustomizedDataBuilder) Name(name *I18n) *JobCustomizedDataBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 字段类型
//
// 示例值：1
func (builder *JobCustomizedDataBuilder) ObjectType(objectType int) *JobCustomizedDataBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}

// 自定义字段值
//
// 示例值：
func (builder *JobCustomizedDataBuilder) Value(value *JobCustomizedValue) *JobCustomizedDataBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *JobCustomizedDataBuilder) Build() *JobCustomizedData {
	req := &JobCustomizedData{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

type JobCustomizedOption struct {
	Key  *string `json:"key,omitempty"`  // 选项 ID
	Name *I18n   `json:"name,omitempty"` // 选项名称
}

type JobCustomizedOptionBuilder struct {
	key      string // 选项 ID
	keyFlag  bool
	name     *I18n // 选项名称
	nameFlag bool
}

func NewJobCustomizedOptionBuilder() *JobCustomizedOptionBuilder {
	builder := &JobCustomizedOptionBuilder{}
	return builder
}

// 选项 ID
//
// 示例值：AA
func (builder *JobCustomizedOptionBuilder) Key(key string) *JobCustomizedOptionBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}

// 选项名称
//
// 示例值：
func (builder *JobCustomizedOptionBuilder) Name(name *I18n) *JobCustomizedOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *JobCustomizedOptionBuilder) Build() *JobCustomizedOption {
	req := &JobCustomizedOption{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type JobCustomizedTimeRange struct {
	StartTime *string `json:"start_time,omitempty"` // 开始时间
	EndTime   *string `json:"end_time,omitempty"`   // 结束时间
}

type JobCustomizedTimeRangeBuilder struct {
	startTime     string // 开始时间
	startTimeFlag bool
	endTime       string // 结束时间
	endTimeFlag   bool
}

func NewJobCustomizedTimeRangeBuilder() *JobCustomizedTimeRangeBuilder {
	builder := &JobCustomizedTimeRangeBuilder{}
	return builder
}

// 开始时间
//
// 示例值：AA
func (builder *JobCustomizedTimeRangeBuilder) StartTime(startTime string) *JobCustomizedTimeRangeBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：AA
func (builder *JobCustomizedTimeRangeBuilder) EndTime(endTime string) *JobCustomizedTimeRangeBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *JobCustomizedTimeRangeBuilder) Build() *JobCustomizedTimeRange {
	req := &JobCustomizedTimeRange{}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

type JobCustomizedValue struct {
	Content    *string                 `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *JobCustomizedOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*JobCustomizedOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *JobCustomizedTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       *string                 `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
	Number     *string                 `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

type JobCustomizedValueBuilder struct {
	content        string // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	contentFlag    bool
	option         *JobCustomizedOption // 当字段类型为单选时，从此字段取值
	optionFlag     bool
	optionList     []*JobCustomizedOption // 当字段类型为多选时，从此字段取值
	optionListFlag bool
	timeRange      *JobCustomizedTimeRange // 当字段类型为时间段时，从此字段取值
	timeRangeFlag  bool
	time           string // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
	timeFlag       bool
	number         string // 当字段类型为数字时，从此字段取值
	numberFlag     bool
}

func NewJobCustomizedValueBuilder() *JobCustomizedValueBuilder {
	builder := &JobCustomizedValueBuilder{}
	return builder
}

// 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
//
// 示例值：text
func (builder *JobCustomizedValueBuilder) Content(content string) *JobCustomizedValueBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 当字段类型为单选时，从此字段取值
//
// 示例值：
func (builder *JobCustomizedValueBuilder) Option(option *JobCustomizedOption) *JobCustomizedValueBuilder {
	builder.option = option
	builder.optionFlag = true
	return builder
}

// 当字段类型为多选时，从此字段取值
//
// 示例值：
func (builder *JobCustomizedValueBuilder) OptionList(optionList []*JobCustomizedOption) *JobCustomizedValueBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}

// 当字段类型为时间段时，从此字段取值
//
// 示例值：
func (builder *JobCustomizedValueBuilder) TimeRange(timeRange *JobCustomizedTimeRange) *JobCustomizedValueBuilder {
	builder.timeRange = timeRange
	builder.timeRangeFlag = true
	return builder
}

// 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
//
// 示例值：1625456721000
func (builder *JobCustomizedValueBuilder) Time(time string) *JobCustomizedValueBuilder {
	builder.time = time
	builder.timeFlag = true
	return builder
}

// 当字段类型为数字时，从此字段取值
//
// 示例值：111
func (builder *JobCustomizedValueBuilder) Number(number string) *JobCustomizedValueBuilder {
	builder.number = number
	builder.numberFlag = true
	return builder
}

func (builder *JobCustomizedValueBuilder) Build() *JobCustomizedValue {
	req := &JobCustomizedValue{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.optionFlag {
		req.Option = builder.option
	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	if builder.timeRangeFlag {
		req.TimeRange = builder.timeRange
	}
	if builder.timeFlag {
		req.Time = &builder.time

	}
	if builder.numberFlag {
		req.Number = &builder.number

	}
	return req
}

type JobDepartment struct {
	Id     *string `json:"id,omitempty"`      // 部门 ID
	ZhName *string `json:"zh_name,omitempty"` // 部门中文名称
	EnName *string `json:"en_name,omitempty"` // 部门英文名称
}

type JobDepartmentBuilder struct {
	id         string // 部门 ID
	idFlag     bool
	zhName     string // 部门中文名称
	zhNameFlag bool
	enName     string // 部门英文名称
	enNameFlag bool
}

func NewJobDepartmentBuilder() *JobDepartmentBuilder {
	builder := &JobDepartmentBuilder{}
	return builder
}

// 部门 ID
//
// 示例值：od-xxxx
func (builder *JobDepartmentBuilder) Id(id string) *JobDepartmentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 部门中文名称
//
// 示例值：字节跳动
func (builder *JobDepartmentBuilder) ZhName(zhName string) *JobDepartmentBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 部门英文名称
//
// 示例值：Bytedance
func (builder *JobDepartmentBuilder) EnName(enName string) *JobDepartmentBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *JobDepartmentBuilder) Build() *JobDepartment {
	req := &JobDepartment{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type JobFunction struct {
	Id           *string `json:"id,omitempty"`            // 职能分类 ID
	Name         *I18n   `json:"name,omitempty"`          // 职能名称
	ActiveStatus *int    `json:"active_status,omitempty"` // 启用状态
	ParentId     *string `json:"parent_id,omitempty"`     // 父级职能分类 ID
}

type JobFunctionBuilder struct {
	id               string // 职能分类 ID
	idFlag           bool
	name             *I18n // 职能名称
	nameFlag         bool
	activeStatus     int // 启用状态
	activeStatusFlag bool
	parentId         string // 父级职能分类 ID
	parentIdFlag     bool
}

func NewJobFunctionBuilder() *JobFunctionBuilder {
	builder := &JobFunctionBuilder{}
	return builder
}

// 职能分类 ID
//
// 示例值：7010952553315895596
func (builder *JobFunctionBuilder) Id(id string) *JobFunctionBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职能名称
//
// 示例值：
func (builder *JobFunctionBuilder) Name(name *I18n) *JobFunctionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 启用状态
//
// 示例值：1
func (builder *JobFunctionBuilder) ActiveStatus(activeStatus int) *JobFunctionBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 父级职能分类 ID
//
// 示例值：0
func (builder *JobFunctionBuilder) ParentId(parentId string) *JobFunctionBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}

func (builder *JobFunctionBuilder) Build() *JobFunction {
	req := &JobFunction{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	return req
}

type JobHighlight struct {
	Id     *string `json:"id,omitempty"`      // 职位亮点 ID
	ZhName *string `json:"zh_name,omitempty"` // 职位亮点中文名称
	EnName *string `json:"en_name,omitempty"` // 职位亮点英文名称
}

type JobHighlightBuilder struct {
	id         string // 职位亮点 ID
	idFlag     bool
	zhName     string // 职位亮点中文名称
	zhNameFlag bool
	enName     string // 职位亮点英文名称
	enNameFlag bool
}

func NewJobHighlightBuilder() *JobHighlightBuilder {
	builder := &JobHighlightBuilder{}
	return builder
}

// 职位亮点 ID
//
// 示例值：6301
func (builder *JobHighlightBuilder) Id(id string) *JobHighlightBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职位亮点中文名称
//
// 示例值：团队氛围好
func (builder *JobHighlightBuilder) ZhName(zhName string) *JobHighlightBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 职位亮点英文名称
//
// 示例值：Positive team atmosphere
func (builder *JobHighlightBuilder) EnName(enName string) *JobHighlightBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *JobHighlightBuilder) Build() *JobHighlight {
	req := &JobHighlight{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type JobLevel struct {
	Id           *string `json:"id,omitempty"`            // 职级 ID
	ZhName       *string `json:"zh_name,omitempty"`       // 职级中文名称
	EnName       *string `json:"en_name,omitempty"`       // 职级英文名称
	ActiveStatus *int    `json:"active_status,omitempty"` // 职级启用状态
}

type JobLevelBuilder struct {
	id               string // 职级 ID
	idFlag           bool
	zhName           string // 职级中文名称
	zhNameFlag       bool
	enName           string // 职级英文名称
	enNameFlag       bool
	activeStatus     int // 职级启用状态
	activeStatusFlag bool
}

func NewJobLevelBuilder() *JobLevelBuilder {
	builder := &JobLevelBuilder{}
	return builder
}

// 职级 ID
//
// 示例值：6301
func (builder *JobLevelBuilder) Id(id string) *JobLevelBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职级中文名称
//
// 示例值：级别-2
func (builder *JobLevelBuilder) ZhName(zhName string) *JobLevelBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 职级英文名称
//
// 示例值：level-2
func (builder *JobLevelBuilder) EnName(enName string) *JobLevelBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 职级启用状态
//
// 示例值：1
func (builder *JobLevelBuilder) ActiveStatus(activeStatus int) *JobLevelBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *JobLevelBuilder) Build() *JobLevel {
	req := &JobLevel{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

type JobProcess struct {
	YourPropertyName *string `json:"your_property_name,omitempty"` // id
}

type JobProcessBuilder struct {
	yourPropertyName     string // id
	yourPropertyNameFlag bool
}

func NewJobProcessBuilder() *JobProcessBuilder {
	builder := &JobProcessBuilder{}
	return builder
}

// id
//
// 示例值：
func (builder *JobProcessBuilder) YourPropertyName(yourPropertyName string) *JobProcessBuilder {
	builder.yourPropertyName = yourPropertyName
	builder.yourPropertyNameFlag = true
	return builder
}

func (builder *JobProcessBuilder) Build() *JobProcess {
	req := &JobProcess{}
	if builder.yourPropertyNameFlag {
		req.YourPropertyName = &builder.yourPropertyName

	}
	return req
}

type JobProcesses struct {
	Id        *string              `json:"id,omitempty"`         // ID
	ZhName    *string              `json:"zh_name,omitempty"`    // 中文名称
	EnName    *string              `json:"en_name,omitempty"`    // 英文名称
	Type      *int                 `json:"type,omitempty"`       // 类型 1=社招流程, 2=校招流程,
	StageList []*JobProcessesStage `json:"stage_list,omitempty"` // 阶段列表, 内部按用户设置顺序排列
}

type JobProcessesBuilder struct {
	id            string // ID
	idFlag        bool
	zhName        string // 中文名称
	zhNameFlag    bool
	enName        string // 英文名称
	enNameFlag    bool
	type_         int // 类型 1=社招流程, 2=校招流程,
	typeFlag      bool
	stageList     []*JobProcessesStage // 阶段列表, 内部按用户设置顺序排列
	stageListFlag bool
}

func NewJobProcessesBuilder() *JobProcessesBuilder {
	builder := &JobProcessesBuilder{}
	return builder
}

// ID
//
// 示例值：123123123123
func (builder *JobProcessesBuilder) Id(id string) *JobProcessesBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 中文名称
//
// 示例值：中文
func (builder *JobProcessesBuilder) ZhName(zhName string) *JobProcessesBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名称
//
// 示例值：name
func (builder *JobProcessesBuilder) EnName(enName string) *JobProcessesBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 类型 1=社招流程, 2=校招流程,
//
// 示例值：1
func (builder *JobProcessesBuilder) Type(type_ int) *JobProcessesBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 阶段列表, 内部按用户设置顺序排列
//
// 示例值：
func (builder *JobProcessesBuilder) StageList(stageList []*JobProcessesStage) *JobProcessesBuilder {
	builder.stageList = stageList
	builder.stageListFlag = true
	return builder
}

func (builder *JobProcessesBuilder) Build() *JobProcesses {
	req := &JobProcesses{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.stageListFlag {
		req.StageList = builder.stageList
	}
	return req
}

type JobProcessesStage struct {
	Id     *string `json:"id,omitempty"`      // ID
	ZhName *string `json:"zh_name,omitempty"` // 中文名称
	EnName *string `json:"en_name,omitempty"` // 英文名称
	Type   *int    `json:"type,omitempty"`    // 1=筛选型, 2=评估型, 3=笔试型, 4=面试型, 5=Offer型, 6=待入职, 7=已入职, 8=其它类型, 255=系统默认，后端模型中并没有该字段，仅用于前端显示,
}

type JobProcessesStageBuilder struct {
	id         string // ID
	idFlag     bool
	zhName     string // 中文名称
	zhNameFlag bool
	enName     string // 英文名称
	enNameFlag bool
	type_      int // 1=筛选型, 2=评估型, 3=笔试型, 4=面试型, 5=Offer型, 6=待入职, 7=已入职, 8=其它类型, 255=系统默认，后端模型中并没有该字段，仅用于前端显示,
	typeFlag   bool
}

func NewJobProcessesStageBuilder() *JobProcessesStageBuilder {
	builder := &JobProcessesStageBuilder{}
	return builder
}

// ID
//
// 示例值：123123123123123
func (builder *JobProcessesStageBuilder) Id(id string) *JobProcessesStageBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 中文名称
//
// 示例值：名字
func (builder *JobProcessesStageBuilder) ZhName(zhName string) *JobProcessesStageBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名称
//
// 示例值：name
func (builder *JobProcessesStageBuilder) EnName(enName string) *JobProcessesStageBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 1=筛选型, 2=评估型, 3=笔试型, 4=面试型, 5=Offer型, 6=待入职, 7=已入职, 8=其它类型, 255=系统默认，后端模型中并没有该字段，仅用于前端显示,
//
// 示例值：1
func (builder *JobProcessesStageBuilder) Type(type_ int) *JobProcessesStageBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

func (builder *JobProcessesStageBuilder) Build() *JobProcessesStage {
	req := &JobProcessesStage{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	return req
}

type JobRecruiter2 struct {
	Id                  *string  `json:"id,omitempty"`                     // 职位ID
	RecruiterId         *string  `json:"recruiter_id,omitempty"`           // 招聘负责人ID
	HiringManagerIdList []string `json:"hiring_manager_id_list,omitempty"` // 用人经理ID列表
	AssistantIdList     []string `json:"assistant_id_list,omitempty"`      // 协助人ID列表
}

type JobRecruiter2Builder struct {
	id                      string // 职位ID
	idFlag                  bool
	recruiterId             string // 招聘负责人ID
	recruiterIdFlag         bool
	hiringManagerIdList     []string // 用人经理ID列表
	hiringManagerIdListFlag bool
	assistantIdList         []string // 协助人ID列表
	assistantIdListFlag     bool
}

func NewJobRecruiter2Builder() *JobRecruiter2Builder {
	builder := &JobRecruiter2Builder{}
	return builder
}

// 职位ID
//
// 示例值：
func (builder *JobRecruiter2Builder) Id(id string) *JobRecruiter2Builder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 招聘负责人ID
//
// 示例值：
func (builder *JobRecruiter2Builder) RecruiterId(recruiterId string) *JobRecruiter2Builder {
	builder.recruiterId = recruiterId
	builder.recruiterIdFlag = true
	return builder
}

// 用人经理ID列表
//
// 示例值：
func (builder *JobRecruiter2Builder) HiringManagerIdList(hiringManagerIdList []string) *JobRecruiter2Builder {
	builder.hiringManagerIdList = hiringManagerIdList
	builder.hiringManagerIdListFlag = true
	return builder
}

// 协助人ID列表
//
// 示例值：
func (builder *JobRecruiter2Builder) AssistantIdList(assistantIdList []string) *JobRecruiter2Builder {
	builder.assistantIdList = assistantIdList
	builder.assistantIdListFlag = true
	return builder
}

func (builder *JobRecruiter2Builder) Build() *JobRecruiter2 {
	req := &JobRecruiter2{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.recruiterIdFlag {
		req.RecruiterId = &builder.recruiterId

	}
	if builder.hiringManagerIdListFlag {
		req.HiringManagerIdList = builder.hiringManagerIdList
	}
	if builder.assistantIdListFlag {
		req.AssistantIdList = builder.assistantIdList
	}
	return req
}

type JobRecruitmentType struct {
	Id           *string `json:"id,omitempty"`            // 雇佣类型 ID
	ZhName       *string `json:"zh_name,omitempty"`       // 雇佣类型中文名称
	EnName       *string `json:"en_name,omitempty"`       // 雇佣类型英文名称
	ActiveStatus *int    `json:"active_status,omitempty"` // 雇佣类型启用状态
}

type JobRecruitmentTypeBuilder struct {
	id               string // 雇佣类型 ID
	idFlag           bool
	zhName           string // 雇佣类型中文名称
	zhNameFlag       bool
	enName           string // 雇佣类型英文名称
	enNameFlag       bool
	activeStatus     int // 雇佣类型启用状态
	activeStatusFlag bool
}

func NewJobRecruitmentTypeBuilder() *JobRecruitmentTypeBuilder {
	builder := &JobRecruitmentTypeBuilder{}
	return builder
}

// 雇佣类型 ID
//
// 示例值：6001
func (builder *JobRecruitmentTypeBuilder) Id(id string) *JobRecruitmentTypeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 雇佣类型中文名称
//
// 示例值：全职
func (builder *JobRecruitmentTypeBuilder) ZhName(zhName string) *JobRecruitmentTypeBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 雇佣类型英文名称
//
// 示例值：FullTime
func (builder *JobRecruitmentTypeBuilder) EnName(enName string) *JobRecruitmentTypeBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 雇佣类型启用状态
//
// 示例值：1
func (builder *JobRecruitmentTypeBuilder) ActiveStatus(activeStatus int) *JobRecruitmentTypeBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *JobRecruitmentTypeBuilder) Build() *JobRecruitmentType {
	req := &JobRecruitmentType{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

type JobRequirement struct {
	ShortCode             *string                         `json:"short_code,omitempty"`                // 招聘需求编号
	Name                  *string                         `json:"name,omitempty"`                      // 需求名称
	DisplayProgress       *int                            `json:"display_progress,omitempty"`          // 需求状态
	HeadCount             *int                            `json:"head_count,omitempty"`                // 需求人数
	RecruitmentTypeId     *string                         `json:"recruitment_type_id,omitempty"`       // 职位性质 ID，可在「招聘枚举常量」文档中查看枚举值
	MaxLevelId            *string                         `json:"max_level_id,omitempty"`              // 最高职级 ID
	MinLevelId            *string                         `json:"min_level_id,omitempty"`              // 最低职级 ID
	SequenceId            *string                         `json:"sequence_id,omitempty"`               // 职位序列 ID
	Category              *int                            `json:"category,omitempty"`                  // 需求类型
	DepartmentId          *string                         `json:"department_id,omitempty"`             // 需求部门的 open department id
	RecruiterIdList       []string                        `json:"recruiter_id_list,omitempty"`         // 需求负责人 ID 列表
	JrHiringManagerIdList []string                        `json:"jr_hiring_manager_id_list,omitempty"` // 需求用人经理 ID 列表
	DirectLeaderIdList    []string                        `json:"direct_leader_id_list,omitempty"`     // 直属上级 ID
	StartTime             *string                         `json:"start_time,omitempty"`                // 开始日期，毫秒级时间戳
	Deadline              *string                         `json:"deadline,omitempty"`                  // 预计完成日期，毫秒级时间戳
	Priority              *int                            `json:"priority,omitempty"`                  // 招聘优先级
	RequiredDegree        *int                            `json:"required_degree,omitempty"`           // 学历要求
	MaxSalary             *string                         `json:"max_salary,omitempty"`                // 最高薪资，单位：千
	MinSalary             *string                         `json:"min_salary,omitempty"`                // 最低薪资，单位：千
	AddressId             *string                         `json:"address_id,omitempty"`                // 工作地点 ID，枚举值可通过「获取地址列表」接口查询获得
	Description           *string                         `json:"description,omitempty"`               // 需求描述
	CustomizedDataList    []*JobRequirementCustomizedData `json:"customized_data_list,omitempty"`      // 自定义字段
}

type JobRequirementBuilder struct {
	shortCode                 string // 招聘需求编号
	shortCodeFlag             bool
	name                      string // 需求名称
	nameFlag                  bool
	displayProgress           int // 需求状态
	displayProgressFlag       bool
	headCount                 int // 需求人数
	headCountFlag             bool
	recruitmentTypeId         string // 职位性质 ID，可在「招聘枚举常量」文档中查看枚举值
	recruitmentTypeIdFlag     bool
	maxLevelId                string // 最高职级 ID
	maxLevelIdFlag            bool
	minLevelId                string // 最低职级 ID
	minLevelIdFlag            bool
	sequenceId                string // 职位序列 ID
	sequenceIdFlag            bool
	category                  int // 需求类型
	categoryFlag              bool
	departmentId              string // 需求部门的 open department id
	departmentIdFlag          bool
	recruiterIdList           []string // 需求负责人 ID 列表
	recruiterIdListFlag       bool
	jrHiringManagerIdList     []string // 需求用人经理 ID 列表
	jrHiringManagerIdListFlag bool
	directLeaderIdList        []string // 直属上级 ID
	directLeaderIdListFlag    bool
	startTime                 string // 开始日期，毫秒级时间戳
	startTimeFlag             bool
	deadline                  string // 预计完成日期，毫秒级时间戳
	deadlineFlag              bool
	priority                  int // 招聘优先级
	priorityFlag              bool
	requiredDegree            int // 学历要求
	requiredDegreeFlag        bool
	maxSalary                 string // 最高薪资，单位：千
	maxSalaryFlag             bool
	minSalary                 string // 最低薪资，单位：千
	minSalaryFlag             bool
	addressId                 string // 工作地点 ID，枚举值可通过「获取地址列表」接口查询获得
	addressIdFlag             bool
	description               string // 需求描述
	descriptionFlag           bool
	customizedDataList        []*JobRequirementCustomizedData // 自定义字段
	customizedDataListFlag    bool
}

func NewJobRequirementBuilder() *JobRequirementBuilder {
	builder := &JobRequirementBuilder{}
	return builder
}

// 招聘需求编号
//
// 示例值：xx1
func (builder *JobRequirementBuilder) ShortCode(shortCode string) *JobRequirementBuilder {
	builder.shortCode = shortCode
	builder.shortCodeFlag = true
	return builder
}

// 需求名称
//
// 示例值：test
func (builder *JobRequirementBuilder) Name(name string) *JobRequirementBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 需求状态
//
// 示例值：1
func (builder *JobRequirementBuilder) DisplayProgress(displayProgress int) *JobRequirementBuilder {
	builder.displayProgress = displayProgress
	builder.displayProgressFlag = true
	return builder
}

// 需求人数
//
// 示例值：11
func (builder *JobRequirementBuilder) HeadCount(headCount int) *JobRequirementBuilder {
	builder.headCount = headCount
	builder.headCountFlag = true
	return builder
}

// 职位性质 ID，可在「招聘枚举常量」文档中查看枚举值
//
// 示例值：101
func (builder *JobRequirementBuilder) RecruitmentTypeId(recruitmentTypeId string) *JobRequirementBuilder {
	builder.recruitmentTypeId = recruitmentTypeId
	builder.recruitmentTypeIdFlag = true
	return builder
}

// 最高职级 ID
//
// 示例值：6807409776231254285
func (builder *JobRequirementBuilder) MaxLevelId(maxLevelId string) *JobRequirementBuilder {
	builder.maxLevelId = maxLevelId
	builder.maxLevelIdFlag = true
	return builder
}

// 最低职级 ID
//
// 示例值：6911957338526091534
func (builder *JobRequirementBuilder) MinLevelId(minLevelId string) *JobRequirementBuilder {
	builder.minLevelId = minLevelId
	builder.minLevelIdFlag = true
	return builder
}

// 职位序列 ID
//
// 示例值：6911957338526091536
func (builder *JobRequirementBuilder) SequenceId(sequenceId string) *JobRequirementBuilder {
	builder.sequenceId = sequenceId
	builder.sequenceIdFlag = true
	return builder
}

// 需求类型
//
// 示例值：1
func (builder *JobRequirementBuilder) Category(category int) *JobRequirementBuilder {
	builder.category = category
	builder.categoryFlag = true
	return builder
}

// 需求部门的 open department id
//
// 示例值：od-4e6ac4d14bcd5071a37a39de902c7141
func (builder *JobRequirementBuilder) DepartmentId(departmentId string) *JobRequirementBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 需求负责人 ID 列表
//
// 示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62
func (builder *JobRequirementBuilder) RecruiterIdList(recruiterIdList []string) *JobRequirementBuilder {
	builder.recruiterIdList = recruiterIdList
	builder.recruiterIdListFlag = true
	return builder
}

// 需求用人经理 ID 列表
//
// 示例值：
func (builder *JobRequirementBuilder) JrHiringManagerIdList(jrHiringManagerIdList []string) *JobRequirementBuilder {
	builder.jrHiringManagerIdList = jrHiringManagerIdList
	builder.jrHiringManagerIdListFlag = true
	return builder
}

// 直属上级 ID
//
// 示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62
func (builder *JobRequirementBuilder) DirectLeaderIdList(directLeaderIdList []string) *JobRequirementBuilder {
	builder.directLeaderIdList = directLeaderIdList
	builder.directLeaderIdListFlag = true
	return builder
}

// 开始日期，毫秒级时间戳
//
// 示例值：1625729379000
func (builder *JobRequirementBuilder) StartTime(startTime string) *JobRequirementBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 预计完成日期，毫秒级时间戳
//
// 示例值：1625729379000
func (builder *JobRequirementBuilder) Deadline(deadline string) *JobRequirementBuilder {
	builder.deadline = deadline
	builder.deadlineFlag = true
	return builder
}

// 招聘优先级
//
// 示例值：1
func (builder *JobRequirementBuilder) Priority(priority int) *JobRequirementBuilder {
	builder.priority = priority
	builder.priorityFlag = true
	return builder
}

// 学历要求
//
// 示例值：1
func (builder *JobRequirementBuilder) RequiredDegree(requiredDegree int) *JobRequirementBuilder {
	builder.requiredDegree = requiredDegree
	builder.requiredDegreeFlag = true
	return builder
}

// 最高薪资，单位：千
//
// 示例值：10
func (builder *JobRequirementBuilder) MaxSalary(maxSalary string) *JobRequirementBuilder {
	builder.maxSalary = maxSalary
	builder.maxSalaryFlag = true
	return builder
}

// 最低薪资，单位：千
//
// 示例值：15
func (builder *JobRequirementBuilder) MinSalary(minSalary string) *JobRequirementBuilder {
	builder.minSalary = minSalary
	builder.minSalaryFlag = true
	return builder
}

// 工作地点 ID，枚举值可通过「获取地址列表」接口查询获得
//
// 示例值：11
func (builder *JobRequirementBuilder) AddressId(addressId string) *JobRequirementBuilder {
	builder.addressId = addressId
	builder.addressIdFlag = true
	return builder
}

// 需求描述
//
// 示例值：11
func (builder *JobRequirementBuilder) Description(description string) *JobRequirementBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *JobRequirementBuilder) CustomizedDataList(customizedDataList []*JobRequirementCustomizedData) *JobRequirementBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *JobRequirementBuilder) Build() *JobRequirement {
	req := &JobRequirement{}
	if builder.shortCodeFlag {
		req.ShortCode = &builder.shortCode

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.displayProgressFlag {
		req.DisplayProgress = &builder.displayProgress

	}
	if builder.headCountFlag {
		req.HeadCount = &builder.headCount

	}
	if builder.recruitmentTypeIdFlag {
		req.RecruitmentTypeId = &builder.recruitmentTypeId

	}
	if builder.maxLevelIdFlag {
		req.MaxLevelId = &builder.maxLevelId

	}
	if builder.minLevelIdFlag {
		req.MinLevelId = &builder.minLevelId

	}
	if builder.sequenceIdFlag {
		req.SequenceId = &builder.sequenceId

	}
	if builder.categoryFlag {
		req.Category = &builder.category

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.recruiterIdListFlag {
		req.RecruiterIdList = builder.recruiterIdList
	}
	if builder.jrHiringManagerIdListFlag {
		req.JrHiringManagerIdList = builder.jrHiringManagerIdList
	}
	if builder.directLeaderIdListFlag {
		req.DirectLeaderIdList = builder.directLeaderIdList
	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.deadlineFlag {
		req.Deadline = &builder.deadline

	}
	if builder.priorityFlag {
		req.Priority = &builder.priority

	}
	if builder.requiredDegreeFlag {
		req.RequiredDegree = &builder.requiredDegree

	}
	if builder.maxSalaryFlag {
		req.MaxSalary = &builder.maxSalary

	}
	if builder.minSalaryFlag {
		req.MinSalary = &builder.minSalary

	}
	if builder.addressIdFlag {
		req.AddressId = &builder.addressId

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

type JobRequirementCustomizedData struct {
	ObjectId *string `json:"object_id,omitempty"` // 自定义字段 ID
	Value    *string `json:"value,omitempty"`     // 自定义字段 value，1. 对于自定义字段，若字段类型为单行文本/多行文本，传值格式为"这是一个文本"；2. 若字段类型为单选，传值内容为选项的 ID，格式为"6890840516938696974"；;3. 若字段类型为多选，传值内容为选项的ID 列表，格式为"[\"6890840516938696974\", \"6890840516938696975\" ]"；;4. 若字段类型为时间段，传值格式为"[\"1609430400000\", \"1612108800000\" ]"，单位是毫米级时间戳；;5. 若字段类型为年份选择，传值格式为"1609430400000"，单位是毫秒级时间戳；;6. 若字段类型为月份选择，传值格式为"1625068800000"，单位是毫秒级时间戳；;7. 若字段类型为数字，传值格式为"1";
}

type JobRequirementCustomizedDataBuilder struct {
	objectId     string // 自定义字段 ID
	objectIdFlag bool
	value        string // 自定义字段 value，1. 对于自定义字段，若字段类型为单行文本/多行文本，传值格式为"这是一个文本"；2. 若字段类型为单选，传值内容为选项的 ID，格式为"6890840516938696974"；;3. 若字段类型为多选，传值内容为选项的ID 列表，格式为"[\"6890840516938696974\", \"6890840516938696975\" ]"；;4. 若字段类型为时间段，传值格式为"[\"1609430400000\", \"1612108800000\" ]"，单位是毫米级时间戳；;5. 若字段类型为年份选择，传值格式为"1609430400000"，单位是毫秒级时间戳；;6. 若字段类型为月份选择，传值格式为"1625068800000"，单位是毫秒级时间戳；;7. 若字段类型为数字，传值格式为"1";
	valueFlag    bool
}

func NewJobRequirementCustomizedDataBuilder() *JobRequirementCustomizedDataBuilder {
	builder := &JobRequirementCustomizedDataBuilder{}
	return builder
}

// 自定义字段 ID
//
// 示例值：1213213123123
func (builder *JobRequirementCustomizedDataBuilder) ObjectId(objectId string) *JobRequirementCustomizedDataBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}

// 自定义字段 value，1. 对于自定义字段，若字段类型为单行文本/多行文本，传值格式为"这是一个文本"；2. 若字段类型为单选，传值内容为选项的 ID，格式为"6890840516938696974"；;3. 若字段类型为多选，传值内容为选项的ID 列表，格式为"[\"6890840516938696974\", \"6890840516938696975\" ]"；;4. 若字段类型为时间段，传值格式为"[\"1609430400000\", \"1612108800000\" ]"，单位是毫米级时间戳；;5. 若字段类型为年份选择，传值格式为"1609430400000"，单位是毫秒级时间戳；;6. 若字段类型为月份选择，传值格式为"1625068800000"，单位是毫秒级时间戳；;7. 若字段类型为数字，传值格式为"1";
//
// 示例值：测试
func (builder *JobRequirementCustomizedDataBuilder) Value(value string) *JobRequirementCustomizedDataBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *JobRequirementCustomizedDataBuilder) Build() *JobRequirementCustomizedData {
	req := &JobRequirementCustomizedData{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type JobRequirementCustomizedDataDto struct {
	ObjectId   *string                        `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *I18n                          `json:"name,omitempty"`        // 字段名称
	ObjectType *int                           `json:"object_type,omitempty"` // 字段类型
	Value      *JobRequirementCustomizedValue `json:"value,omitempty"`       // 自定义字段值
}

type JobRequirementCustomizedDataDtoBuilder struct {
	objectId       string // 自定义字段 ID
	objectIdFlag   bool
	name           *I18n // 字段名称
	nameFlag       bool
	objectType     int // 字段类型
	objectTypeFlag bool
	value          *JobRequirementCustomizedValue // 自定义字段值
	valueFlag      bool
}

func NewJobRequirementCustomizedDataDtoBuilder() *JobRequirementCustomizedDataDtoBuilder {
	builder := &JobRequirementCustomizedDataDtoBuilder{}
	return builder
}

// 自定义字段 ID
//
// 示例值：xxxx
func (builder *JobRequirementCustomizedDataDtoBuilder) ObjectId(objectId string) *JobRequirementCustomizedDataDtoBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}

// 字段名称
//
// 示例值：
func (builder *JobRequirementCustomizedDataDtoBuilder) Name(name *I18n) *JobRequirementCustomizedDataDtoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 字段类型
//
// 示例值：1
func (builder *JobRequirementCustomizedDataDtoBuilder) ObjectType(objectType int) *JobRequirementCustomizedDataDtoBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}

// 自定义字段值
//
// 示例值：
func (builder *JobRequirementCustomizedDataDtoBuilder) Value(value *JobRequirementCustomizedValue) *JobRequirementCustomizedDataDtoBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *JobRequirementCustomizedDataDtoBuilder) Build() *JobRequirementCustomizedDataDto {
	req := &JobRequirementCustomizedDataDto{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

type JobRequirementCustomizedOption struct {
	Key  *string `json:"key,omitempty"`  // 选项 ID
	Name *I18n   `json:"name,omitempty"` // 选项名称
}

type JobRequirementCustomizedOptionBuilder struct {
	key      string // 选项 ID
	keyFlag  bool
	name     *I18n // 选项名称
	nameFlag bool
}

func NewJobRequirementCustomizedOptionBuilder() *JobRequirementCustomizedOptionBuilder {
	builder := &JobRequirementCustomizedOptionBuilder{}
	return builder
}

// 选项 ID
//
// 示例值：AA
func (builder *JobRequirementCustomizedOptionBuilder) Key(key string) *JobRequirementCustomizedOptionBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}

// 选项名称
//
// 示例值：
func (builder *JobRequirementCustomizedOptionBuilder) Name(name *I18n) *JobRequirementCustomizedOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *JobRequirementCustomizedOptionBuilder) Build() *JobRequirementCustomizedOption {
	req := &JobRequirementCustomizedOption{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type JobRequirementCustomizedTimeRange struct {
	StartTime *string `json:"start_time,omitempty"` // 开始时间，毫秒级时间戳
	EndTime   *string `json:"end_time,omitempty"`   // 结束时间，毫秒级时间戳
}

type JobRequirementCustomizedTimeRangeBuilder struct {
	startTime     string // 开始时间，毫秒级时间戳
	startTimeFlag bool
	endTime       string // 结束时间，毫秒级时间戳
	endTimeFlag   bool
}

func NewJobRequirementCustomizedTimeRangeBuilder() *JobRequirementCustomizedTimeRangeBuilder {
	builder := &JobRequirementCustomizedTimeRangeBuilder{}
	return builder
}

// 开始时间，毫秒级时间戳
//
// 示例值：AA
func (builder *JobRequirementCustomizedTimeRangeBuilder) StartTime(startTime string) *JobRequirementCustomizedTimeRangeBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间，毫秒级时间戳
//
// 示例值：AA
func (builder *JobRequirementCustomizedTimeRangeBuilder) EndTime(endTime string) *JobRequirementCustomizedTimeRangeBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *JobRequirementCustomizedTimeRangeBuilder) Build() *JobRequirementCustomizedTimeRange {
	req := &JobRequirementCustomizedTimeRange{}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

type JobRequirementCustomizedValue struct {
	Content    *string                            `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *JobRequirementCustomizedOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*JobRequirementCustomizedOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *JobRequirementCustomizedTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       *string                            `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
	Number     *string                            `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

type JobRequirementCustomizedValueBuilder struct {
	content        string // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	contentFlag    bool
	option         *JobRequirementCustomizedOption // 当字段类型为单选时，从此字段取值
	optionFlag     bool
	optionList     []*JobRequirementCustomizedOption // 当字段类型为多选时，从此字段取值
	optionListFlag bool
	timeRange      *JobRequirementCustomizedTimeRange // 当字段类型为时间段时，从此字段取值
	timeRangeFlag  bool
	time           string // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
	timeFlag       bool
	number         string // 当字段类型为数字时，从此字段取值
	numberFlag     bool
}

func NewJobRequirementCustomizedValueBuilder() *JobRequirementCustomizedValueBuilder {
	builder := &JobRequirementCustomizedValueBuilder{}
	return builder
}

// 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
//
// 示例值：text
func (builder *JobRequirementCustomizedValueBuilder) Content(content string) *JobRequirementCustomizedValueBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 当字段类型为单选时，从此字段取值
//
// 示例值：
func (builder *JobRequirementCustomizedValueBuilder) Option(option *JobRequirementCustomizedOption) *JobRequirementCustomizedValueBuilder {
	builder.option = option
	builder.optionFlag = true
	return builder
}

// 当字段类型为多选时，从此字段取值
//
// 示例值：
func (builder *JobRequirementCustomizedValueBuilder) OptionList(optionList []*JobRequirementCustomizedOption) *JobRequirementCustomizedValueBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}

// 当字段类型为时间段时，从此字段取值
//
// 示例值：
func (builder *JobRequirementCustomizedValueBuilder) TimeRange(timeRange *JobRequirementCustomizedTimeRange) *JobRequirementCustomizedValueBuilder {
	builder.timeRange = timeRange
	builder.timeRangeFlag = true
	return builder
}

// 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
//
// 示例值：1625456721000
func (builder *JobRequirementCustomizedValueBuilder) Time(time string) *JobRequirementCustomizedValueBuilder {
	builder.time = time
	builder.timeFlag = true
	return builder
}

// 当字段类型为数字时，从此字段取值
//
// 示例值：111
func (builder *JobRequirementCustomizedValueBuilder) Number(number string) *JobRequirementCustomizedValueBuilder {
	builder.number = number
	builder.numberFlag = true
	return builder
}

func (builder *JobRequirementCustomizedValueBuilder) Build() *JobRequirementCustomizedValue {
	req := &JobRequirementCustomizedValue{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.optionFlag {
		req.Option = builder.option
	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	if builder.timeRangeFlag {
		req.TimeRange = builder.timeRange
	}
	if builder.timeFlag {
		req.Time = &builder.time

	}
	if builder.numberFlag {
		req.Number = &builder.number

	}
	return req
}

type JobRequirementDto struct {
	Id                 *string                            `json:"id,omitempty"`                   // 招聘需求 ID
	ShortCode          *string                            `json:"short_code,omitempty"`           // 招聘需求编号
	Name               *string                            `json:"name,omitempty"`                 // 需求名称
	DisplayProgress    *int                               `json:"display_progress,omitempty"`     // 需求状态
	HeadCount          *int                               `json:"head_count,omitempty"`           // 需求人数
	RecruitmentType    *IdNameObject                      `json:"recruitment_type,omitempty"`     // 职位性质
	MaxLevel           *IdNameObject                      `json:"max_level,omitempty"`            // 最高职级
	MinLevel           *IdNameObject                      `json:"min_level,omitempty"`            // 最低职级
	Sequence           *IdNameObject                      `json:"sequence,omitempty"`             // 职位序列
	Category           *int                               `json:"category,omitempty"`             // 需求类型
	Department         *IdNameObject                      `json:"department,omitempty"`           // 需求部门
	RecruiterList      []*IdNameObject                    `json:"recruiter_list,omitempty"`       // 需求负责人
	JrHiringManagers   []*IdNameObject                    `json:"jr_hiring_managers,omitempty"`   // 需求用人经理
	DirectLeaderList   []*IdNameObject                    `json:"direct_leader_list,omitempty"`   // 直属上级
	StartTime          *string                            `json:"start_time,omitempty"`           // 开始日期，毫秒级时间戳
	Deadline           *string                            `json:"deadline,omitempty"`             // 预计完成日期，毫秒级时间戳
	Priority           *int                               `json:"priority,omitempty"`             // 招聘优先级
	RequiredDegree     *int                               `json:"required_degree,omitempty"`      // 学历要求
	MaxSalary          *string                            `json:"max_salary,omitempty"`           // 最高薪资
	MinSalary          *string                            `json:"min_salary,omitempty"`           // 最低薪资
	Address            *IdNameObject                      `json:"address,omitempty"`              // 工作地点
	Description        *string                            `json:"description,omitempty"`          // 需求描述
	CustomizedDataList []*JobRequirementCustomizedDataDto `json:"customized_data_list,omitempty"` // 自定义字段
	JobIdList          []string                           `json:"job_id_list,omitempty"`          // 关联职位 ID
}

type JobRequirementDtoBuilder struct {
	id                     string // 招聘需求 ID
	idFlag                 bool
	shortCode              string // 招聘需求编号
	shortCodeFlag          bool
	name                   string // 需求名称
	nameFlag               bool
	displayProgress        int // 需求状态
	displayProgressFlag    bool
	headCount              int // 需求人数
	headCountFlag          bool
	recruitmentType        *IdNameObject // 职位性质
	recruitmentTypeFlag    bool
	maxLevel               *IdNameObject // 最高职级
	maxLevelFlag           bool
	minLevel               *IdNameObject // 最低职级
	minLevelFlag           bool
	sequence               *IdNameObject // 职位序列
	sequenceFlag           bool
	category               int // 需求类型
	categoryFlag           bool
	department             *IdNameObject // 需求部门
	departmentFlag         bool
	recruiterList          []*IdNameObject // 需求负责人
	recruiterListFlag      bool
	jrHiringManagers       []*IdNameObject // 需求用人经理
	jrHiringManagersFlag   bool
	directLeaderList       []*IdNameObject // 直属上级
	directLeaderListFlag   bool
	startTime              string // 开始日期，毫秒级时间戳
	startTimeFlag          bool
	deadline               string // 预计完成日期，毫秒级时间戳
	deadlineFlag           bool
	priority               int // 招聘优先级
	priorityFlag           bool
	requiredDegree         int // 学历要求
	requiredDegreeFlag     bool
	maxSalary              string // 最高薪资
	maxSalaryFlag          bool
	minSalary              string // 最低薪资
	minSalaryFlag          bool
	address                *IdNameObject // 工作地点
	addressFlag            bool
	description            string // 需求描述
	descriptionFlag        bool
	customizedDataList     []*JobRequirementCustomizedDataDto // 自定义字段
	customizedDataListFlag bool
	jobIdList              []string // 关联职位 ID
	jobIdListFlag          bool
}

func NewJobRequirementDtoBuilder() *JobRequirementDtoBuilder {
	builder := &JobRequirementDtoBuilder{}
	return builder
}

// 招聘需求 ID
//
// 示例值：6949805467799537964
func (builder *JobRequirementDtoBuilder) Id(id string) *JobRequirementDtoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 招聘需求编号
//
// 示例值：xx1
func (builder *JobRequirementDtoBuilder) ShortCode(shortCode string) *JobRequirementDtoBuilder {
	builder.shortCode = shortCode
	builder.shortCodeFlag = true
	return builder
}

// 需求名称
//
// 示例值：test
func (builder *JobRequirementDtoBuilder) Name(name string) *JobRequirementDtoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 需求状态
//
// 示例值：1
func (builder *JobRequirementDtoBuilder) DisplayProgress(displayProgress int) *JobRequirementDtoBuilder {
	builder.displayProgress = displayProgress
	builder.displayProgressFlag = true
	return builder
}

// 需求人数
//
// 示例值：11
func (builder *JobRequirementDtoBuilder) HeadCount(headCount int) *JobRequirementDtoBuilder {
	builder.headCount = headCount
	builder.headCountFlag = true
	return builder
}

// 职位性质
//
// 示例值：
func (builder *JobRequirementDtoBuilder) RecruitmentType(recruitmentType *IdNameObject) *JobRequirementDtoBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}

// 最高职级
//
// 示例值：
func (builder *JobRequirementDtoBuilder) MaxLevel(maxLevel *IdNameObject) *JobRequirementDtoBuilder {
	builder.maxLevel = maxLevel
	builder.maxLevelFlag = true
	return builder
}

// 最低职级
//
// 示例值：
func (builder *JobRequirementDtoBuilder) MinLevel(minLevel *IdNameObject) *JobRequirementDtoBuilder {
	builder.minLevel = minLevel
	builder.minLevelFlag = true
	return builder
}

// 职位序列
//
// 示例值：
func (builder *JobRequirementDtoBuilder) Sequence(sequence *IdNameObject) *JobRequirementDtoBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}

// 需求类型
//
// 示例值：1
func (builder *JobRequirementDtoBuilder) Category(category int) *JobRequirementDtoBuilder {
	builder.category = category
	builder.categoryFlag = true
	return builder
}

// 需求部门
//
// 示例值：
func (builder *JobRequirementDtoBuilder) Department(department *IdNameObject) *JobRequirementDtoBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 需求负责人
//
// 示例值：
func (builder *JobRequirementDtoBuilder) RecruiterList(recruiterList []*IdNameObject) *JobRequirementDtoBuilder {
	builder.recruiterList = recruiterList
	builder.recruiterListFlag = true
	return builder
}

// 需求用人经理
//
// 示例值：
func (builder *JobRequirementDtoBuilder) JrHiringManagers(jrHiringManagers []*IdNameObject) *JobRequirementDtoBuilder {
	builder.jrHiringManagers = jrHiringManagers
	builder.jrHiringManagersFlag = true
	return builder
}

// 直属上级
//
// 示例值：
func (builder *JobRequirementDtoBuilder) DirectLeaderList(directLeaderList []*IdNameObject) *JobRequirementDtoBuilder {
	builder.directLeaderList = directLeaderList
	builder.directLeaderListFlag = true
	return builder
}

// 开始日期，毫秒级时间戳
//
// 示例值：1625729379000
func (builder *JobRequirementDtoBuilder) StartTime(startTime string) *JobRequirementDtoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 预计完成日期，毫秒级时间戳
//
// 示例值：1625729379000
func (builder *JobRequirementDtoBuilder) Deadline(deadline string) *JobRequirementDtoBuilder {
	builder.deadline = deadline
	builder.deadlineFlag = true
	return builder
}

// 招聘优先级
//
// 示例值：1
func (builder *JobRequirementDtoBuilder) Priority(priority int) *JobRequirementDtoBuilder {
	builder.priority = priority
	builder.priorityFlag = true
	return builder
}

// 学历要求
//
// 示例值：1
func (builder *JobRequirementDtoBuilder) RequiredDegree(requiredDegree int) *JobRequirementDtoBuilder {
	builder.requiredDegree = requiredDegree
	builder.requiredDegreeFlag = true
	return builder
}

// 最高薪资
//
// 示例值：123
func (builder *JobRequirementDtoBuilder) MaxSalary(maxSalary string) *JobRequirementDtoBuilder {
	builder.maxSalary = maxSalary
	builder.maxSalaryFlag = true
	return builder
}

// 最低薪资
//
// 示例值：11
func (builder *JobRequirementDtoBuilder) MinSalary(minSalary string) *JobRequirementDtoBuilder {
	builder.minSalary = minSalary
	builder.minSalaryFlag = true
	return builder
}

// 工作地点
//
// 示例值：
func (builder *JobRequirementDtoBuilder) Address(address *IdNameObject) *JobRequirementDtoBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}

// 需求描述
//
// 示例值：11
func (builder *JobRequirementDtoBuilder) Description(description string) *JobRequirementDtoBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *JobRequirementDtoBuilder) CustomizedDataList(customizedDataList []*JobRequirementCustomizedDataDto) *JobRequirementDtoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

// 关联职位 ID
//
// 示例值：
func (builder *JobRequirementDtoBuilder) JobIdList(jobIdList []string) *JobRequirementDtoBuilder {
	builder.jobIdList = jobIdList
	builder.jobIdListFlag = true
	return builder
}

func (builder *JobRequirementDtoBuilder) Build() *JobRequirementDto {
	req := &JobRequirementDto{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.shortCodeFlag {
		req.ShortCode = &builder.shortCode

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.displayProgressFlag {
		req.DisplayProgress = &builder.displayProgress

	}
	if builder.headCountFlag {
		req.HeadCount = &builder.headCount

	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.maxLevelFlag {
		req.MaxLevel = builder.maxLevel
	}
	if builder.minLevelFlag {
		req.MinLevel = builder.minLevel
	}
	if builder.sequenceFlag {
		req.Sequence = builder.sequence
	}
	if builder.categoryFlag {
		req.Category = &builder.category

	}
	if builder.departmentFlag {
		req.Department = builder.department
	}
	if builder.recruiterListFlag {
		req.RecruiterList = builder.recruiterList
	}
	if builder.jrHiringManagersFlag {
		req.JrHiringManagers = builder.jrHiringManagers
	}
	if builder.directLeaderListFlag {
		req.DirectLeaderList = builder.directLeaderList
	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.deadlineFlag {
		req.Deadline = &builder.deadline

	}
	if builder.priorityFlag {
		req.Priority = &builder.priority

	}
	if builder.requiredDegreeFlag {
		req.RequiredDegree = &builder.requiredDegree

	}
	if builder.maxSalaryFlag {
		req.MaxSalary = &builder.maxSalary

	}
	if builder.minSalaryFlag {
		req.MinSalary = &builder.minSalary

	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.jobIdListFlag {
		req.JobIdList = builder.jobIdList
	}
	return req
}

type JobRequirementSchema struct {
	Id         *string         `json:"id,omitempty"`          // 模板 ID
	Name       *I18n           `json:"name,omitempty"`        // 国际化模板名称
	ObjectList []*CommonSchema `json:"object_list,omitempty"` // 模板字段
}

type JobRequirementSchemaBuilder struct {
	id             string // 模板 ID
	idFlag         bool
	name           *I18n // 国际化模板名称
	nameFlag       bool
	objectList     []*CommonSchema // 模板字段
	objectListFlag bool
}

func NewJobRequirementSchemaBuilder() *JobRequirementSchemaBuilder {
	builder := &JobRequirementSchemaBuilder{}
	return builder
}

// 模板 ID
//
// 示例值：6949805467799537964
func (builder *JobRequirementSchemaBuilder) Id(id string) *JobRequirementSchemaBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 国际化模板名称
//
// 示例值：
func (builder *JobRequirementSchemaBuilder) Name(name *I18n) *JobRequirementSchemaBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 模板字段
//
// 示例值：
func (builder *JobRequirementSchemaBuilder) ObjectList(objectList []*CommonSchema) *JobRequirementSchemaBuilder {
	builder.objectList = objectList
	builder.objectListFlag = true
	return builder
}

func (builder *JobRequirementSchemaBuilder) Build() *JobRequirementSchema {
	req := &JobRequirementSchema{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.objectListFlag {
		req.ObjectList = builder.objectList
	}
	return req
}

type JobSchema struct {
	Id           *string         `json:"id,omitempty"`            // 职位模板 ID
	Name         *I18n           `json:"name,omitempty"`          // 职位模板名称
	ScenarioType *int            `json:"scenario_type,omitempty"` // 职位模板类型
	ObjectList   []*CommonSchema `json:"object_list,omitempty"`   // 模块列表
}

type JobSchemaBuilder struct {
	id               string // 职位模板 ID
	idFlag           bool
	name             *I18n // 职位模板名称
	nameFlag         bool
	scenarioType     int // 职位模板类型
	scenarioTypeFlag bool
	objectList       []*CommonSchema // 模块列表
	objectListFlag   bool
}

func NewJobSchemaBuilder() *JobSchemaBuilder {
	builder := &JobSchemaBuilder{}
	return builder
}

// 职位模板 ID
//
// 示例值：6949805467799537964
func (builder *JobSchemaBuilder) Id(id string) *JobSchemaBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职位模板名称
//
// 示例值：
func (builder *JobSchemaBuilder) Name(name *I18n) *JobSchemaBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 职位模板类型
//
// 示例值：1
func (builder *JobSchemaBuilder) ScenarioType(scenarioType int) *JobSchemaBuilder {
	builder.scenarioType = scenarioType
	builder.scenarioTypeFlag = true
	return builder
}

// 模块列表
//
// 示例值：
func (builder *JobSchemaBuilder) ObjectList(objectList []*CommonSchema) *JobSchemaBuilder {
	builder.objectList = objectList
	builder.objectListFlag = true
	return builder
}

func (builder *JobSchemaBuilder) Build() *JobSchema {
	req := &JobSchema{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.scenarioTypeFlag {
		req.ScenarioType = &builder.scenarioType

	}
	if builder.objectListFlag {
		req.ObjectList = builder.objectList
	}
	return req
}

type JobType struct {
	Id     *string `json:"id,omitempty"`      // 职位类别 ID
	ZhName *string `json:"zh_name,omitempty"` // 职位类别中文名称
	EnName *string `json:"en_name,omitempty"` // 职位类别英文名称
}

type JobTypeBuilder struct {
	id         string // 职位类别 ID
	idFlag     bool
	zhName     string // 职位类别中文名称
	zhNameFlag bool
	enName     string // 职位类别英文名称
	enNameFlag bool
}

func NewJobTypeBuilder() *JobTypeBuilder {
	builder := &JobTypeBuilder{}
	return builder
}

// 职位类别 ID
//
// 示例值：6890840777044265230
func (builder *JobTypeBuilder) Id(id string) *JobTypeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职位类别中文名称
//
// 示例值：金融
func (builder *JobTypeBuilder) ZhName(zhName string) *JobTypeBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 职位类别英文名称
//
// 示例值：Finance
func (builder *JobTypeBuilder) EnName(enName string) *JobTypeBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *JobTypeBuilder) Build() *JobType {
	req := &JobType{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type LanguageInfo struct {
	Language    *int `json:"language,omitempty"`    // 语言
	Proficiency *int `json:"proficiency,omitempty"` // 熟练程度
}

type LanguageInfoBuilder struct {
	language        int // 语言
	languageFlag    bool
	proficiency     int // 熟练程度
	proficiencyFlag bool
}

func NewLanguageInfoBuilder() *LanguageInfoBuilder {
	builder := &LanguageInfoBuilder{}
	return builder
}

// 语言
//
// 示例值：
func (builder *LanguageInfoBuilder) Language(language int) *LanguageInfoBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}

// 熟练程度
//
// 示例值：
func (builder *LanguageInfoBuilder) Proficiency(proficiency int) *LanguageInfoBuilder {
	builder.proficiency = proficiency
	builder.proficiencyFlag = true
	return builder
}

func (builder *LanguageInfoBuilder) Build() *LanguageInfo {
	req := &LanguageInfo{}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	if builder.proficiencyFlag {
		req.Proficiency = &builder.proficiency

	}
	return req
}

type Level struct {
	Id     *string `json:"id,omitempty"`      // ID
	Name   *string `json:"name,omitempty"`    // 名字
	EnName *string `json:"en_name,omitempty"` // 英文名
}

type LevelBuilder struct {
	id         string // ID
	idFlag     bool
	name       string // 名字
	nameFlag   bool
	enName     string // 英文名
	enNameFlag bool
}

func NewLevelBuilder() *LevelBuilder {
	builder := &LevelBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *LevelBuilder) Id(id string) *LevelBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *LevelBuilder) Name(name string) *LevelBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *LevelBuilder) EnName(enName string) *LevelBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *LevelBuilder) Build() *Level {
	req := &Level{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type Location struct {
	Id           *string         `json:"id,omitempty"`            // 地点 ID
	Name         *I18n           `json:"name,omitempty"`          // 地点名称
	District     *CodeNameObject `json:"district,omitempty"`      // 区信息
	City         *CodeNameObject `json:"city,omitempty"`          // 市信息
	State        *CodeNameObject `json:"state,omitempty"`         // 省份/州信息
	Country      *CodeNameObject `json:"country,omitempty"`       // 国家信息
	ActiveStatus *int            `json:"active_status,omitempty"` // 启用状态
}

type LocationBuilder struct {
	id               string // 地点 ID
	idFlag           bool
	name             *I18n // 地点名称
	nameFlag         bool
	district         *CodeNameObject // 区信息
	districtFlag     bool
	city             *CodeNameObject // 市信息
	cityFlag         bool
	state            *CodeNameObject // 省份/州信息
	stateFlag        bool
	country          *CodeNameObject // 国家信息
	countryFlag      bool
	activeStatus     int // 启用状态
	activeStatusFlag bool
}

func NewLocationBuilder() *LocationBuilder {
	builder := &LocationBuilder{}
	return builder
}

// 地点 ID
//
// 示例值：1213213123123
func (builder *LocationBuilder) Id(id string) *LocationBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 地点名称
//
// 示例值：
func (builder *LocationBuilder) Name(name *I18n) *LocationBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 区信息
//
// 示例值：
func (builder *LocationBuilder) District(district *CodeNameObject) *LocationBuilder {
	builder.district = district
	builder.districtFlag = true
	return builder
}

// 市信息
//
// 示例值：
func (builder *LocationBuilder) City(city *CodeNameObject) *LocationBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}

// 省份/州信息
//
// 示例值：
func (builder *LocationBuilder) State(state *CodeNameObject) *LocationBuilder {
	builder.state = state
	builder.stateFlag = true
	return builder
}

// 国家信息
//
// 示例值：
func (builder *LocationBuilder) Country(country *CodeNameObject) *LocationBuilder {
	builder.country = country
	builder.countryFlag = true
	return builder
}

// 启用状态
//
// 示例值：1
func (builder *LocationBuilder) ActiveStatus(activeStatus int) *LocationBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *LocationBuilder) Build() *Location {
	req := &Location{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.districtFlag {
		req.District = builder.district
	}
	if builder.cityFlag {
		req.City = builder.city
	}
	if builder.stateFlag {
		req.State = builder.state
	}
	if builder.countryFlag {
		req.Country = builder.country
	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

type LocationBaseInfo struct {
	Code         *string `json:"code,omitempty"`          // location 地址码
	Name         *string `json:"name,omitempty"`          // location 中文名字
	EnName       *string `json:"en_name,omitempty"`       // location 英文名字
	LocationType *int    `json:"location_type,omitempty"` // location 的类型
	I18nName     *string `json:"i18n_name,omitempty"`     // location 国际名字
	PyName       *string `json:"py_name,omitempty"`       // location 拼音名字
}

type LocationBaseInfoBuilder struct {
	code             string // location 地址码
	codeFlag         bool
	name             string // location 中文名字
	nameFlag         bool
	enName           string // location 英文名字
	enNameFlag       bool
	locationType     int // location 的类型
	locationTypeFlag bool
	i18nName         string // location 国际名字
	i18nNameFlag     bool
	pyName           string // location 拼音名字
	pyNameFlag       bool
}

func NewLocationBaseInfoBuilder() *LocationBaseInfoBuilder {
	builder := &LocationBaseInfoBuilder{}
	return builder
}

// location 地址码
//
// 示例值：
func (builder *LocationBaseInfoBuilder) Code(code string) *LocationBaseInfoBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

// location 中文名字
//
// 示例值：
func (builder *LocationBaseInfoBuilder) Name(name string) *LocationBaseInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// location 英文名字
//
// 示例值：
func (builder *LocationBaseInfoBuilder) EnName(enName string) *LocationBaseInfoBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// location 的类型
//
// 示例值：
func (builder *LocationBaseInfoBuilder) LocationType(locationType int) *LocationBaseInfoBuilder {
	builder.locationType = locationType
	builder.locationTypeFlag = true
	return builder
}

// location 国际名字
//
// 示例值：
func (builder *LocationBaseInfoBuilder) I18nName(i18nName string) *LocationBaseInfoBuilder {
	builder.i18nName = i18nName
	builder.i18nNameFlag = true
	return builder
}

// location 拼音名字
//
// 示例值：
func (builder *LocationBaseInfoBuilder) PyName(pyName string) *LocationBaseInfoBuilder {
	builder.pyName = pyName
	builder.pyNameFlag = true
	return builder
}

func (builder *LocationBaseInfoBuilder) Build() *LocationBaseInfo {
	req := &LocationBaseInfo{}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.locationTypeFlag {
		req.LocationType = &builder.locationType

	}
	if builder.i18nNameFlag {
		req.I18nName = &builder.i18nName

	}
	if builder.pyNameFlag {
		req.PyName = &builder.pyName

	}
	return req
}

type Nationality struct {
	NationalityCode *string `json:"nationality_code,omitempty"` // 国家编码
	Name            *string `json:"name,omitempty"`             // 名字
	EnName          *string `json:"en_name,omitempty"`          // 英文名
}

type NationalityBuilder struct {
	nationalityCode     string // 国家编码
	nationalityCodeFlag bool
	name                string // 名字
	nameFlag            bool
	enName              string // 英文名
	enNameFlag          bool
}

func NewNationalityBuilder() *NationalityBuilder {
	builder := &NationalityBuilder{}
	return builder
}

// 国家编码
//
// 示例值：
func (builder *NationalityBuilder) NationalityCode(nationalityCode string) *NationalityBuilder {
	builder.nationalityCode = nationalityCode
	builder.nationalityCodeFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *NationalityBuilder) Name(name string) *NationalityBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *NationalityBuilder) EnName(enName string) *NationalityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *NationalityBuilder) Build() *Nationality {
	req := &Nationality{}
	if builder.nationalityCodeFlag {
		req.NationalityCode = &builder.nationalityCode

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type Note struct {
	Id            *string `json:"id,omitempty"`             // 备注ID
	TalentId      *string `json:"talent_id,omitempty"`      // 人才ID
	ApplicationId *string `json:"application_id,omitempty"` // 投递ID
	IsPrivate     *bool   `json:"is_private,omitempty"`     // 是否私密
	CreateTime    *int    `json:"create_time,omitempty"`    // 创建时间
	ModifyTime    *int    `json:"modify_time,omitempty"`    // 更新时间
	CreatorId     *string `json:"creator_id,omitempty"`     // 创建人ID
	Content       *string `json:"content,omitempty"`        // 内容
	Privacy       *int    `json:"privacy,omitempty"`        // 备注私密属性（默认为公开）
}

type NoteBuilder struct {
	id                string // 备注ID
	idFlag            bool
	talentId          string // 人才ID
	talentIdFlag      bool
	applicationId     string // 投递ID
	applicationIdFlag bool
	isPrivate         bool // 是否私密
	isPrivateFlag     bool
	createTime        int // 创建时间
	createTimeFlag    bool
	modifyTime        int // 更新时间
	modifyTimeFlag    bool
	creatorId         string // 创建人ID
	creatorIdFlag     bool
	content           string // 内容
	contentFlag       bool
	privacy           int // 备注私密属性（默认为公开）
	privacyFlag       bool
}

func NewNoteBuilder() *NoteBuilder {
	builder := &NoteBuilder{}
	return builder
}

// 备注ID
//
// 示例值：6949805467799537964
func (builder *NoteBuilder) Id(id string) *NoteBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 人才ID
//
// 示例值：6916472453069883661
func (builder *NoteBuilder) TalentId(talentId string) *NoteBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 投递ID
//
// 示例值：6891565253964859661
func (builder *NoteBuilder) ApplicationId(applicationId string) *NoteBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 是否私密
//
// 示例值：false
func (builder *NoteBuilder) IsPrivate(isPrivate bool) *NoteBuilder {
	builder.isPrivate = isPrivate
	builder.isPrivateFlag = true
	return builder
}

// 创建时间
//
// 示例值：1618209327096
func (builder *NoteBuilder) CreateTime(createTime int) *NoteBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 更新时间
//
// 示例值：1618209327096
func (builder *NoteBuilder) ModifyTime(modifyTime int) *NoteBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

// 创建人ID
//
// 示例值：ou_f476cb099ac9227c9bae09ce46112579
func (builder *NoteBuilder) CreatorId(creatorId string) *NoteBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}

// 内容
//
// 示例值：测试
func (builder *NoteBuilder) Content(content string) *NoteBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 备注私密属性（默认为公开）
//
// 示例值：1
func (builder *NoteBuilder) Privacy(privacy int) *NoteBuilder {
	builder.privacy = privacy
	builder.privacyFlag = true
	return builder
}

func (builder *NoteBuilder) Build() *Note {
	req := &Note{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.isPrivateFlag {
		req.IsPrivate = &builder.isPrivate

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.privacyFlag {
		req.Privacy = &builder.privacy

	}
	return req
}

type ObjectAttribute struct {
	Title       *I18n `json:"title,omitempty"`       // 字段名称
	Description *I18n `json:"description,omitempty"` // 字段描述
	DataType    *int  `json:"data_type,omitempty"`   // 字段类型
	Tags        []int `json:"tags,omitempty"`        // 字段标签
	IsFcfData   *bool `json:"is_fcf_data,omitempty"` // 是否为居民数据
	IsDiData    *bool `json:"is_di_data,omitempty"`  // 是否为多元化数据
}

type ObjectAttributeBuilder struct {
	title           *I18n // 字段名称
	titleFlag       bool
	description     *I18n // 字段描述
	descriptionFlag bool
	dataType        int // 字段类型
	dataTypeFlag    bool
	tags            []int // 字段标签
	tagsFlag        bool
	isFcfData       bool // 是否为居民数据
	isFcfDataFlag   bool
	isDiData        bool // 是否为多元化数据
	isDiDataFlag    bool
}

func NewObjectAttributeBuilder() *ObjectAttributeBuilder {
	builder := &ObjectAttributeBuilder{}
	return builder
}

// 字段名称
//
// 示例值：
func (builder *ObjectAttributeBuilder) Title(title *I18n) *ObjectAttributeBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 字段描述
//
// 示例值：
func (builder *ObjectAttributeBuilder) Description(description *I18n) *ObjectAttributeBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 字段类型
//
// 示例值：1
func (builder *ObjectAttributeBuilder) DataType(dataType int) *ObjectAttributeBuilder {
	builder.dataType = dataType
	builder.dataTypeFlag = true
	return builder
}

// 字段标签
//
// 示例值：1
func (builder *ObjectAttributeBuilder) Tags(tags []int) *ObjectAttributeBuilder {
	builder.tags = tags
	builder.tagsFlag = true
	return builder
}

// 是否为居民数据
//
// 示例值：true
func (builder *ObjectAttributeBuilder) IsFcfData(isFcfData bool) *ObjectAttributeBuilder {
	builder.isFcfData = isFcfData
	builder.isFcfDataFlag = true
	return builder
}

// 是否为多元化数据
//
// 示例值：true
func (builder *ObjectAttributeBuilder) IsDiData(isDiData bool) *ObjectAttributeBuilder {
	builder.isDiData = isDiData
	builder.isDiDataFlag = true
	return builder
}

func (builder *ObjectAttributeBuilder) Build() *ObjectAttribute {
	req := &ObjectAttribute{}
	if builder.titleFlag {
		req.Title = builder.title
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.dataTypeFlag {
		req.DataType = &builder.dataType

	}
	if builder.tagsFlag {
		req.Tags = builder.tags
	}
	if builder.isFcfDataFlag {
		req.IsFcfData = &builder.isFcfData

	}
	if builder.isDiDataFlag {
		req.IsDiData = &builder.isDiData

	}
	return req
}

type Offer struct {
	Id            *string                     `json:"id,omitempty"`             // Offer ID
	ApplicationId *string                     `json:"application_id,omitempty"` // 投递 ID
	BasicInfo     *ApplicationOfferBasicInfo  `json:"basic_info,omitempty"`     // 基础信息
	SalaryPlan    *ApplicationOfferSalaryPlan `json:"salary_plan,omitempty"`    // 薪酬计划
	SchemaId      *string                     `json:"schema_id,omitempty"`      // 当前 Offer 使用的 Schema
	OfferStatus   *int                        `json:"offer_status,omitempty"`   // Offer 状态
	OfferType     *int                        `json:"offer_type,omitempty"`     // Offer 类型
	JobInfo       *OfferJobInfo               `json:"job_info,omitempty"`       // 职位信息
}

type OfferBuilder struct {
	id                string // Offer ID
	idFlag            bool
	applicationId     string // 投递 ID
	applicationIdFlag bool
	basicInfo         *ApplicationOfferBasicInfo // 基础信息
	basicInfoFlag     bool
	salaryPlan        *ApplicationOfferSalaryPlan // 薪酬计划
	salaryPlanFlag    bool
	schemaId          string // 当前 Offer 使用的 Schema
	schemaIdFlag      bool
	offerStatus       int // Offer 状态
	offerStatusFlag   bool
	offerType         int // Offer 类型
	offerTypeFlag     bool
	jobInfo           *OfferJobInfo // 职位信息
	jobInfoFlag       bool
}

func NewOfferBuilder() *OfferBuilder {
	builder := &OfferBuilder{}
	return builder
}

// Offer ID
//
// 示例值：1231231231231231
func (builder *OfferBuilder) Id(id string) *OfferBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 投递 ID
//
// 示例值：1231231232312312
func (builder *OfferBuilder) ApplicationId(applicationId string) *OfferBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 基础信息
//
// 示例值：
func (builder *OfferBuilder) BasicInfo(basicInfo *ApplicationOfferBasicInfo) *OfferBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}

// 薪酬计划
//
// 示例值：
func (builder *OfferBuilder) SalaryPlan(salaryPlan *ApplicationOfferSalaryPlan) *OfferBuilder {
	builder.salaryPlan = salaryPlan
	builder.salaryPlanFlag = true
	return builder
}

// 当前 Offer 使用的 Schema
//
// 示例值：6963562624677398823
func (builder *OfferBuilder) SchemaId(schemaId string) *OfferBuilder {
	builder.schemaId = schemaId
	builder.schemaIdFlag = true
	return builder
}

// Offer 状态
//
// 示例值：1
func (builder *OfferBuilder) OfferStatus(offerStatus int) *OfferBuilder {
	builder.offerStatus = offerStatus
	builder.offerStatusFlag = true
	return builder
}

// Offer 类型
//
// 示例值：Offer 类型
func (builder *OfferBuilder) OfferType(offerType int) *OfferBuilder {
	builder.offerType = offerType
	builder.offerTypeFlag = true
	return builder
}

// 职位信息
//
// 示例值：
func (builder *OfferBuilder) JobInfo(jobInfo *OfferJobInfo) *OfferBuilder {
	builder.jobInfo = jobInfo
	builder.jobInfoFlag = true
	return builder
}

func (builder *OfferBuilder) Build() *Offer {
	req := &Offer{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.salaryPlanFlag {
		req.SalaryPlan = builder.salaryPlan
	}
	if builder.schemaIdFlag {
		req.SchemaId = &builder.schemaId

	}
	if builder.offerStatusFlag {
		req.OfferStatus = &builder.offerStatus

	}
	if builder.offerTypeFlag {
		req.OfferType = &builder.offerType

	}
	if builder.jobInfoFlag {
		req.JobInfo = builder.jobInfo
	}
	return req
}

type OfferApplyForm struct {
	Id         *string `json:"id,omitempty"`          // ID
	Name       *I18n   `json:"name,omitempty"`        // 名称
	CreateTime *string `json:"create_time,omitempty"` // 创建时间
}

type OfferApplyFormBuilder struct {
	id             string // ID
	idFlag         bool
	name           *I18n // 名称
	nameFlag       bool
	createTime     string // 创建时间
	createTimeFlag bool
}

func NewOfferApplyFormBuilder() *OfferApplyFormBuilder {
	builder := &OfferApplyFormBuilder{}
	return builder
}

// ID
//
// 示例值：1213213123123
func (builder *OfferApplyFormBuilder) Id(id string) *OfferApplyFormBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *OfferApplyFormBuilder) Name(name *I18n) *OfferApplyFormBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 创建时间
//
// 示例值：1628512038000
func (builder *OfferApplyFormBuilder) CreateTime(createTime string) *OfferApplyFormBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

func (builder *OfferApplyFormBuilder) Build() *OfferApplyForm {
	req := &OfferApplyForm{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	return req
}

type OfferApplyFormConfigFormulaInfo struct {
	Value    *string                              `json:"value,omitempty"`     // 公式值
	Result   *int                                 `json:"result,omitempty"`    // 公式结果类型枚举
	ExtraMap []*OfferApplyFormFormulaExtraMapInfo `json:"extra_map,omitempty"` // 公式额外描述
}

type OfferApplyFormConfigFormulaInfoBuilder struct {
	value        string // 公式值
	valueFlag    bool
	result       int // 公式结果类型枚举
	resultFlag   bool
	extraMap     []*OfferApplyFormFormulaExtraMapInfo // 公式额外描述
	extraMapFlag bool
}

func NewOfferApplyFormConfigFormulaInfoBuilder() *OfferApplyFormConfigFormulaInfoBuilder {
	builder := &OfferApplyFormConfigFormulaInfoBuilder{}
	return builder
}

// 公式值
//
// 示例值：[object_id_1] + [object_id_2] * 12
func (builder *OfferApplyFormConfigFormulaInfoBuilder) Value(value string) *OfferApplyFormConfigFormulaInfoBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

// 公式结果类型枚举
//
// 示例值：1
func (builder *OfferApplyFormConfigFormulaInfoBuilder) Result(result int) *OfferApplyFormConfigFormulaInfoBuilder {
	builder.result = result
	builder.resultFlag = true
	return builder
}

// 公式额外描述
//
// 示例值：
func (builder *OfferApplyFormConfigFormulaInfoBuilder) ExtraMap(extraMap []*OfferApplyFormFormulaExtraMapInfo) *OfferApplyFormConfigFormulaInfoBuilder {
	builder.extraMap = extraMap
	builder.extraMapFlag = true
	return builder
}

func (builder *OfferApplyFormConfigFormulaInfoBuilder) Build() *OfferApplyFormConfigFormulaInfo {
	req := &OfferApplyFormConfigFormulaInfo{}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	if builder.resultFlag {
		req.Result = &builder.result

	}
	if builder.extraMapFlag {
		req.ExtraMap = builder.extraMap
	}
	return req
}

type OfferApplyFormConfigOptionInfo struct {
	Id          *string `json:"id,omitempty"`          // 选项 ID
	Name        *I18n   `json:"name,omitempty"`        // 选项名称
	Description *I18n   `json:"description,omitempty"` // 选项描述
}

type OfferApplyFormConfigOptionInfoBuilder struct {
	id              string // 选项 ID
	idFlag          bool
	name            *I18n // 选项名称
	nameFlag        bool
	description     *I18n // 选项描述
	descriptionFlag bool
}

func NewOfferApplyFormConfigOptionInfoBuilder() *OfferApplyFormConfigOptionInfoBuilder {
	builder := &OfferApplyFormConfigOptionInfoBuilder{}
	return builder
}

// 选项 ID
//
// 示例值：2378568265
func (builder *OfferApplyFormConfigOptionInfoBuilder) Id(id string) *OfferApplyFormConfigOptionInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 选项名称
//
// 示例值：
func (builder *OfferApplyFormConfigOptionInfoBuilder) Name(name *I18n) *OfferApplyFormConfigOptionInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 选项描述
//
// 示例值：
func (builder *OfferApplyFormConfigOptionInfoBuilder) Description(description *I18n) *OfferApplyFormConfigOptionInfoBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *OfferApplyFormConfigOptionInfoBuilder) Build() *OfferApplyFormConfigOptionInfo {
	req := &OfferApplyFormConfigOptionInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	return req
}

type OfferApplyFormFormulaExtraMapInfo struct {
	Key   *string `json:"key,omitempty"`   // object ID
	Value *I18n   `json:"value,omitempty"` // object 名称
}

type OfferApplyFormFormulaExtraMapInfoBuilder struct {
	key       string // object ID
	keyFlag   bool
	value     *I18n // object 名称
	valueFlag bool
}

func NewOfferApplyFormFormulaExtraMapInfoBuilder() *OfferApplyFormFormulaExtraMapInfoBuilder {
	builder := &OfferApplyFormFormulaExtraMapInfoBuilder{}
	return builder
}

// object ID
//
// 示例值：object_id_1
func (builder *OfferApplyFormFormulaExtraMapInfoBuilder) Key(key string) *OfferApplyFormFormulaExtraMapInfoBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}

// object 名称
//
// 示例值：
func (builder *OfferApplyFormFormulaExtraMapInfoBuilder) Value(value *I18n) *OfferApplyFormFormulaExtraMapInfoBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *OfferApplyFormFormulaExtraMapInfoBuilder) Build() *OfferApplyFormFormulaExtraMapInfo {
	req := &OfferApplyFormFormulaExtraMapInfo{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

type OfferApplyFormInfo struct {
	Id     *string               `json:"id,omitempty"`     // offer申请表 ID
	Name   *I18n                 `json:"name,omitempty"`   // offer申请表名称
	Schema *OfferApplyFormSchema `json:"schema,omitempty"` // schema 信息，用于描述申请表单结构的元数据定义，即对申请表内容的描述
}

type OfferApplyFormInfoBuilder struct {
	id         string // offer申请表 ID
	idFlag     bool
	name       *I18n // offer申请表名称
	nameFlag   bool
	schema     *OfferApplyFormSchema // schema 信息，用于描述申请表单结构的元数据定义，即对申请表内容的描述
	schemaFlag bool
}

func NewOfferApplyFormInfoBuilder() *OfferApplyFormInfoBuilder {
	builder := &OfferApplyFormInfoBuilder{}
	return builder
}

// offer申请表 ID
//
// 示例值：23746823748
func (builder *OfferApplyFormInfoBuilder) Id(id string) *OfferApplyFormInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// offer申请表名称
//
// 示例值：
func (builder *OfferApplyFormInfoBuilder) Name(name *I18n) *OfferApplyFormInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// schema 信息，用于描述申请表单结构的元数据定义，即对申请表内容的描述
//
// 示例值：
func (builder *OfferApplyFormInfoBuilder) Schema(schema *OfferApplyFormSchema) *OfferApplyFormInfoBuilder {
	builder.schema = schema
	builder.schemaFlag = true
	return builder
}

func (builder *OfferApplyFormInfoBuilder) Build() *OfferApplyFormInfo {
	req := &OfferApplyFormInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.schemaFlag {
		req.Schema = builder.schema
	}
	return req
}

type OfferApplyFormModuleInfo struct {
	Id           *string                     `json:"id,omitempty"`            // 模块 ID
	Name         *I18n                       `json:"name,omitempty"`          // 模块名称
	IsCustomized *bool                       `json:"is_customized,omitempty"` // 是否为自定义模块
	ActiveStatus *int                        `json:"active_status,omitempty"` // 模块状态是否启用
	Hint         *I18n                       `json:"hint,omitempty"`          // 模块填写提示
	ObjectList   []*OfferApplyFormObjectInfo `json:"object_list,omitempty"`   // 字段列表
}

type OfferApplyFormModuleInfoBuilder struct {
	id               string // 模块 ID
	idFlag           bool
	name             *I18n // 模块名称
	nameFlag         bool
	isCustomized     bool // 是否为自定义模块
	isCustomizedFlag bool
	activeStatus     int // 模块状态是否启用
	activeStatusFlag bool
	hint             *I18n // 模块填写提示
	hintFlag         bool
	objectList       []*OfferApplyFormObjectInfo // 字段列表
	objectListFlag   bool
}

func NewOfferApplyFormModuleInfoBuilder() *OfferApplyFormModuleInfoBuilder {
	builder := &OfferApplyFormModuleInfoBuilder{}
	return builder
}

// 模块 ID
//
// 示例值：23746823748
func (builder *OfferApplyFormModuleInfoBuilder) Id(id string) *OfferApplyFormModuleInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 模块名称
//
// 示例值：
func (builder *OfferApplyFormModuleInfoBuilder) Name(name *I18n) *OfferApplyFormModuleInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 是否为自定义模块
//
// 示例值：false
func (builder *OfferApplyFormModuleInfoBuilder) IsCustomized(isCustomized bool) *OfferApplyFormModuleInfoBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}

// 模块状态是否启用
//
// 示例值：1
func (builder *OfferApplyFormModuleInfoBuilder) ActiveStatus(activeStatus int) *OfferApplyFormModuleInfoBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 模块填写提示
//
// 示例值：
func (builder *OfferApplyFormModuleInfoBuilder) Hint(hint *I18n) *OfferApplyFormModuleInfoBuilder {
	builder.hint = hint
	builder.hintFlag = true
	return builder
}

// 字段列表
//
// 示例值：
func (builder *OfferApplyFormModuleInfoBuilder) ObjectList(objectList []*OfferApplyFormObjectInfo) *OfferApplyFormModuleInfoBuilder {
	builder.objectList = objectList
	builder.objectListFlag = true
	return builder
}

func (builder *OfferApplyFormModuleInfoBuilder) Build() *OfferApplyFormModuleInfo {
	req := &OfferApplyFormModuleInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.hintFlag {
		req.Hint = builder.hint
	}
	if builder.objectListFlag {
		req.ObjectList = builder.objectList
	}
	return req
}

type OfferApplyFormObjectConfigInfo struct {
	Options             []*OfferApplyFormConfigOptionInfo      `json:"options,omitempty"`               // 选项信息
	Formula             *OfferApplyFormConfigFormulaInfo       `json:"formula,omitempty"`               // 公式信息
	ObjectDisplayConfig *OfferApplyFormObjectDisplayConfigInfo `json:"object_display_config,omitempty"` // 级联配置信息
}

type OfferApplyFormObjectConfigInfoBuilder struct {
	options                 []*OfferApplyFormConfigOptionInfo // 选项信息
	optionsFlag             bool
	formula                 *OfferApplyFormConfigFormulaInfo // 公式信息
	formulaFlag             bool
	objectDisplayConfig     *OfferApplyFormObjectDisplayConfigInfo // 级联配置信息
	objectDisplayConfigFlag bool
}

func NewOfferApplyFormObjectConfigInfoBuilder() *OfferApplyFormObjectConfigInfoBuilder {
	builder := &OfferApplyFormObjectConfigInfoBuilder{}
	return builder
}

// 选项信息
//
// 示例值：
func (builder *OfferApplyFormObjectConfigInfoBuilder) Options(options []*OfferApplyFormConfigOptionInfo) *OfferApplyFormObjectConfigInfoBuilder {
	builder.options = options
	builder.optionsFlag = true
	return builder
}

// 公式信息
//
// 示例值：
func (builder *OfferApplyFormObjectConfigInfoBuilder) Formula(formula *OfferApplyFormConfigFormulaInfo) *OfferApplyFormObjectConfigInfoBuilder {
	builder.formula = formula
	builder.formulaFlag = true
	return builder
}

// 级联配置信息
//
// 示例值：
func (builder *OfferApplyFormObjectConfigInfoBuilder) ObjectDisplayConfig(objectDisplayConfig *OfferApplyFormObjectDisplayConfigInfo) *OfferApplyFormObjectConfigInfoBuilder {
	builder.objectDisplayConfig = objectDisplayConfig
	builder.objectDisplayConfigFlag = true
	return builder
}

func (builder *OfferApplyFormObjectConfigInfoBuilder) Build() *OfferApplyFormObjectConfigInfo {
	req := &OfferApplyFormObjectConfigInfo{}
	if builder.optionsFlag {
		req.Options = builder.options
	}
	if builder.formulaFlag {
		req.Formula = builder.formula
	}
	if builder.objectDisplayConfigFlag {
		req.ObjectDisplayConfig = builder.objectDisplayConfig
	}
	return req
}

type OfferApplyFormObjectDisplayConfigInfo struct {
	DisplayCondition    *int                                 `json:"display_condition,omitempty"`      // 展示条件枚举
	PreObjectConfigList []*OfferApplyFormPreObjectConfigInfo `json:"pre_object_config_list,omitempty"` // 字段条件配置
}

type OfferApplyFormObjectDisplayConfigInfoBuilder struct {
	displayCondition        int // 展示条件枚举
	displayConditionFlag    bool
	preObjectConfigList     []*OfferApplyFormPreObjectConfigInfo // 字段条件配置
	preObjectConfigListFlag bool
}

func NewOfferApplyFormObjectDisplayConfigInfoBuilder() *OfferApplyFormObjectDisplayConfigInfoBuilder {
	builder := &OfferApplyFormObjectDisplayConfigInfoBuilder{}
	return builder
}

// 展示条件枚举
//
// 示例值：1
func (builder *OfferApplyFormObjectDisplayConfigInfoBuilder) DisplayCondition(displayCondition int) *OfferApplyFormObjectDisplayConfigInfoBuilder {
	builder.displayCondition = displayCondition
	builder.displayConditionFlag = true
	return builder
}

// 字段条件配置
//
// 示例值：
func (builder *OfferApplyFormObjectDisplayConfigInfoBuilder) PreObjectConfigList(preObjectConfigList []*OfferApplyFormPreObjectConfigInfo) *OfferApplyFormObjectDisplayConfigInfoBuilder {
	builder.preObjectConfigList = preObjectConfigList
	builder.preObjectConfigListFlag = true
	return builder
}

func (builder *OfferApplyFormObjectDisplayConfigInfoBuilder) Build() *OfferApplyFormObjectDisplayConfigInfo {
	req := &OfferApplyFormObjectDisplayConfigInfo{}
	if builder.displayConditionFlag {
		req.DisplayCondition = &builder.displayCondition

	}
	if builder.preObjectConfigListFlag {
		req.PreObjectConfigList = builder.preObjectConfigList
	}
	return req
}

type OfferApplyFormObjectInfo struct {
	Id           *string                         `json:"id,omitempty"`            // 字段 ID
	Name         *I18n                           `json:"name,omitempty"`          // 字段名称
	Description  *I18n                           `json:"description,omitempty"`   // 字段描述
	ModuleId     *string                         `json:"module_id,omitempty"`     // 所属模块 ID
	IsCustomized *bool                           `json:"is_customized,omitempty"` // 是否为自定义字段
	IsRequired   *bool                           `json:"is_required,omitempty"`   // 是否必填
	ActiveStatus *int                            `json:"active_status,omitempty"` // 是否启用
	NeedApprove  *bool                           `json:"need_approve,omitempty"`  // 是否修改后需审批
	IsSensitive  *bool                           `json:"is_sensitive,omitempty"`  // 是否敏感
	ObjectType   *int                            `json:"object_type,omitempty"`   // 字段类型枚举
	Config       *OfferApplyFormObjectConfigInfo `json:"config,omitempty"`        // 配置信息
}

type OfferApplyFormObjectInfoBuilder struct {
	id               string // 字段 ID
	idFlag           bool
	name             *I18n // 字段名称
	nameFlag         bool
	description      *I18n // 字段描述
	descriptionFlag  bool
	moduleId         string // 所属模块 ID
	moduleIdFlag     bool
	isCustomized     bool // 是否为自定义字段
	isCustomizedFlag bool
	isRequired       bool // 是否必填
	isRequiredFlag   bool
	activeStatus     int // 是否启用
	activeStatusFlag bool
	needApprove      bool // 是否修改后需审批
	needApproveFlag  bool
	isSensitive      bool // 是否敏感
	isSensitiveFlag  bool
	objectType       int // 字段类型枚举
	objectTypeFlag   bool
	config           *OfferApplyFormObjectConfigInfo // 配置信息
	configFlag       bool
}

func NewOfferApplyFormObjectInfoBuilder() *OfferApplyFormObjectInfoBuilder {
	builder := &OfferApplyFormObjectInfoBuilder{}
	return builder
}

// 字段 ID
//
// 示例值：23847293234
func (builder *OfferApplyFormObjectInfoBuilder) Id(id string) *OfferApplyFormObjectInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 字段名称
//
// 示例值：
func (builder *OfferApplyFormObjectInfoBuilder) Name(name *I18n) *OfferApplyFormObjectInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 字段描述
//
// 示例值：
func (builder *OfferApplyFormObjectInfoBuilder) Description(description *I18n) *OfferApplyFormObjectInfoBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 所属模块 ID
//
// 示例值：23847293234
func (builder *OfferApplyFormObjectInfoBuilder) ModuleId(moduleId string) *OfferApplyFormObjectInfoBuilder {
	builder.moduleId = moduleId
	builder.moduleIdFlag = true
	return builder
}

// 是否为自定义字段
//
// 示例值：true
func (builder *OfferApplyFormObjectInfoBuilder) IsCustomized(isCustomized bool) *OfferApplyFormObjectInfoBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}

// 是否必填
//
// 示例值：true
func (builder *OfferApplyFormObjectInfoBuilder) IsRequired(isRequired bool) *OfferApplyFormObjectInfoBuilder {
	builder.isRequired = isRequired
	builder.isRequiredFlag = true
	return builder
}

// 是否启用
//
// 示例值：1
func (builder *OfferApplyFormObjectInfoBuilder) ActiveStatus(activeStatus int) *OfferApplyFormObjectInfoBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 是否修改后需审批
//
// 示例值：true
func (builder *OfferApplyFormObjectInfoBuilder) NeedApprove(needApprove bool) *OfferApplyFormObjectInfoBuilder {
	builder.needApprove = needApprove
	builder.needApproveFlag = true
	return builder
}

// 是否敏感
//
// 示例值：false
func (builder *OfferApplyFormObjectInfoBuilder) IsSensitive(isSensitive bool) *OfferApplyFormObjectInfoBuilder {
	builder.isSensitive = isSensitive
	builder.isSensitiveFlag = true
	return builder
}

// 字段类型枚举
//
// 示例值：1
func (builder *OfferApplyFormObjectInfoBuilder) ObjectType(objectType int) *OfferApplyFormObjectInfoBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}

// 配置信息
//
// 示例值：
func (builder *OfferApplyFormObjectInfoBuilder) Config(config *OfferApplyFormObjectConfigInfo) *OfferApplyFormObjectInfoBuilder {
	builder.config = config
	builder.configFlag = true
	return builder
}

func (builder *OfferApplyFormObjectInfoBuilder) Build() *OfferApplyFormObjectInfo {
	req := &OfferApplyFormObjectInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	if builder.moduleIdFlag {
		req.ModuleId = &builder.moduleId

	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.isRequiredFlag {
		req.IsRequired = &builder.isRequired

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.needApproveFlag {
		req.NeedApprove = &builder.needApprove

	}
	if builder.isSensitiveFlag {
		req.IsSensitive = &builder.isSensitive

	}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.configFlag {
		req.Config = builder.config
	}
	return req
}

type OfferApplyFormPreObjectConfigInfo struct {
	Id       *string  `json:"id,omitempty"`       // 字段 ID
	Operator *int     `json:"operator,omitempty"` // 运算符枚举
	Value    []string `json:"value,omitempty"`    // 字段值
}

type OfferApplyFormPreObjectConfigInfoBuilder struct {
	id           string // 字段 ID
	idFlag       bool
	operator     int // 运算符枚举
	operatorFlag bool
	value        []string // 字段值
	valueFlag    bool
}

func NewOfferApplyFormPreObjectConfigInfoBuilder() *OfferApplyFormPreObjectConfigInfoBuilder {
	builder := &OfferApplyFormPreObjectConfigInfoBuilder{}
	return builder
}

// 字段 ID
//
// 示例值：687529575
func (builder *OfferApplyFormPreObjectConfigInfoBuilder) Id(id string) *OfferApplyFormPreObjectConfigInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 运算符枚举
//
// 示例值：1
func (builder *OfferApplyFormPreObjectConfigInfoBuilder) Operator(operator int) *OfferApplyFormPreObjectConfigInfoBuilder {
	builder.operator = operator
	builder.operatorFlag = true
	return builder
}

// 字段值
//
// 示例值：
func (builder *OfferApplyFormPreObjectConfigInfoBuilder) Value(value []string) *OfferApplyFormPreObjectConfigInfoBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *OfferApplyFormPreObjectConfigInfoBuilder) Build() *OfferApplyFormPreObjectConfigInfo {
	req := &OfferApplyFormPreObjectConfigInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.operatorFlag {
		req.Operator = &builder.operator

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

type OfferApplyFormSchema struct {
	Id         *string                     `json:"id,omitempty"`          // schema ID
	ModuleList []*OfferApplyFormModuleInfo `json:"module_list,omitempty"` // 模块列表
}

type OfferApplyFormSchemaBuilder struct {
	id             string // schema ID
	idFlag         bool
	moduleList     []*OfferApplyFormModuleInfo // 模块列表
	moduleListFlag bool
}

func NewOfferApplyFormSchemaBuilder() *OfferApplyFormSchemaBuilder {
	builder := &OfferApplyFormSchemaBuilder{}
	return builder
}

// schema ID
//
// 示例值：7080465990618843430
func (builder *OfferApplyFormSchemaBuilder) Id(id string) *OfferApplyFormSchemaBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 模块列表
//
// 示例值：
func (builder *OfferApplyFormSchemaBuilder) ModuleList(moduleList []*OfferApplyFormModuleInfo) *OfferApplyFormSchemaBuilder {
	builder.moduleList = moduleList
	builder.moduleListFlag = true
	return builder
}

func (builder *OfferApplyFormSchemaBuilder) Build() *OfferApplyFormSchema {
	req := &OfferApplyFormSchema{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.moduleListFlag {
		req.ModuleList = builder.moduleList
	}
	return req
}

type OfferApprovalTemplate struct {
	Id             *string       `json:"id,omitempty"`              // ID
	Name           *I18n         `json:"name,omitempty"`            // 名称
	CreateTime     *string       `json:"create_time,omitempty"`     // 创建时间
	Remark         *string       `json:"remark,omitempty"`          // 备注
	DepartmentList []*Department `json:"department_list,omitempty"` // 适用部门
}

type OfferApprovalTemplateBuilder struct {
	id                 string // ID
	idFlag             bool
	name               *I18n // 名称
	nameFlag           bool
	createTime         string // 创建时间
	createTimeFlag     bool
	remark             string // 备注
	remarkFlag         bool
	departmentList     []*Department // 适用部门
	departmentListFlag bool
}

func NewOfferApprovalTemplateBuilder() *OfferApprovalTemplateBuilder {
	builder := &OfferApprovalTemplateBuilder{}
	return builder
}

// ID
//
// 示例值：1213213123123
func (builder *OfferApprovalTemplateBuilder) Id(id string) *OfferApprovalTemplateBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *OfferApprovalTemplateBuilder) Name(name *I18n) *OfferApprovalTemplateBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 创建时间
//
// 示例值：1628512038000
func (builder *OfferApprovalTemplateBuilder) CreateTime(createTime string) *OfferApprovalTemplateBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 备注
//
// 示例值：test
func (builder *OfferApprovalTemplateBuilder) Remark(remark string) *OfferApprovalTemplateBuilder {
	builder.remark = remark
	builder.remarkFlag = true
	return builder
}

// 适用部门
//
// 示例值：
func (builder *OfferApprovalTemplateBuilder) DepartmentList(departmentList []*Department) *OfferApprovalTemplateBuilder {
	builder.departmentList = departmentList
	builder.departmentListFlag = true
	return builder
}

func (builder *OfferApprovalTemplateBuilder) Build() *OfferApprovalTemplate {
	req := &OfferApprovalTemplate{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.remarkFlag {
		req.Remark = &builder.remark

	}
	if builder.departmentListFlag {
		req.DepartmentList = builder.departmentList
	}
	return req
}

type OfferBasicInfo struct {
	DepartmentId          *string  `json:"department_id,omitempty"`          // 部门 ID
	LeaderUserId          *string  `json:"leader_user_id,omitempty"`         // 直属上级 ID
	EmploymentJobId       *string  `json:"employment_job_id,omitempty"`      // 职务 ID
	EmployeeTypeId        *string  `json:"employee_type_id,omitempty"`       // 人员类型 ID
	JobFamilyId           *string  `json:"job_family_id,omitempty"`          // 职位序列 ID
	JobLevelId            *string  `json:"job_level_id,omitempty"`           // 职位级别 ID
	ProbationMonth        *int     `json:"probation_month,omitempty"`        // 试用期
	ContractYear          *int     `json:"contract_year,omitempty"`          // 合同期
	ExpectedOnboardDate   *string  `json:"expected_onboard_date,omitempty"`  // 预计入职日期
	OnboardAddressId      *string  `json:"onboard_address_id,omitempty"`     // 入职地点 ID
	WorkAddressId         *string  `json:"work_address_id,omitempty"`        // 办公地点 ID
	OwnerUserId           *string  `json:"owner_user_id,omitempty"`          // Offer负责人 ID
	RecommendedWords      *string  `json:"recommended_words,omitempty"`      // Offer 推荐语
	JobRequirementId      *string  `json:"job_requirement_id,omitempty"`     // 招聘需求 ID
	JobProcessTypeId      *int     `json:"job_process_type_id,omitempty"`    // 招聘流程类型 ID
	AttachmentIdList      []string `json:"attachment_id_list,omitempty"`     // 附件ID列表
	AttachmentDescription *string  `json:"attachment_description,omitempty"` // 附件描述
	OperatorUserId        *string  `json:"operator_user_id,omitempty"`       // Offer操作人 ID
}

type OfferBasicInfoBuilder struct {
	departmentId              string // 部门 ID
	departmentIdFlag          bool
	leaderUserId              string // 直属上级 ID
	leaderUserIdFlag          bool
	employmentJobId           string // 职务 ID
	employmentJobIdFlag       bool
	employeeTypeId            string // 人员类型 ID
	employeeTypeIdFlag        bool
	jobFamilyId               string // 职位序列 ID
	jobFamilyIdFlag           bool
	jobLevelId                string // 职位级别 ID
	jobLevelIdFlag            bool
	probationMonth            int // 试用期
	probationMonthFlag        bool
	contractYear              int // 合同期
	contractYearFlag          bool
	expectedOnboardDate       string // 预计入职日期
	expectedOnboardDateFlag   bool
	onboardAddressId          string // 入职地点 ID
	onboardAddressIdFlag      bool
	workAddressId             string // 办公地点 ID
	workAddressIdFlag         bool
	ownerUserId               string // Offer负责人 ID
	ownerUserIdFlag           bool
	recommendedWords          string // Offer 推荐语
	recommendedWordsFlag      bool
	jobRequirementId          string // 招聘需求 ID
	jobRequirementIdFlag      bool
	jobProcessTypeId          int // 招聘流程类型 ID
	jobProcessTypeIdFlag      bool
	attachmentIdList          []string // 附件ID列表
	attachmentIdListFlag      bool
	attachmentDescription     string // 附件描述
	attachmentDescriptionFlag bool
	operatorUserId            string // Offer操作人 ID
	operatorUserIdFlag        bool
}

func NewOfferBasicInfoBuilder() *OfferBasicInfoBuilder {
	builder := &OfferBasicInfoBuilder{}
	return builder
}

// 部门 ID
//
// 示例值：od-6b394871807047c7023ebfc1ff37cd3a
func (builder *OfferBasicInfoBuilder) DepartmentId(departmentId string) *OfferBasicInfoBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 直属上级 ID
//
// 示例值：ou_ce613028fe74745421f5dc320bb9c709
func (builder *OfferBasicInfoBuilder) LeaderUserId(leaderUserId string) *OfferBasicInfoBuilder {
	builder.leaderUserId = leaderUserId
	builder.leaderUserIdFlag = true
	return builder
}

// 职务 ID
//
// 示例值：123
func (builder *OfferBasicInfoBuilder) EmploymentJobId(employmentJobId string) *OfferBasicInfoBuilder {
	builder.employmentJobId = employmentJobId
	builder.employmentJobIdFlag = true
	return builder
}

// 人员类型 ID
//
// 示例值：2
func (builder *OfferBasicInfoBuilder) EmployeeTypeId(employeeTypeId string) *OfferBasicInfoBuilder {
	builder.employeeTypeId = employeeTypeId
	builder.employeeTypeIdFlag = true
	return builder
}

// 职位序列 ID
//
// 示例值：6807407987381831949
func (builder *OfferBasicInfoBuilder) JobFamilyId(jobFamilyId string) *OfferBasicInfoBuilder {
	builder.jobFamilyId = jobFamilyId
	builder.jobFamilyIdFlag = true
	return builder
}

// 职位级别 ID
//
// 示例值：6807407987381881101
func (builder *OfferBasicInfoBuilder) JobLevelId(jobLevelId string) *OfferBasicInfoBuilder {
	builder.jobLevelId = jobLevelId
	builder.jobLevelIdFlag = true
	return builder
}

// 试用期
//
// 示例值：3
func (builder *OfferBasicInfoBuilder) ProbationMonth(probationMonth int) *OfferBasicInfoBuilder {
	builder.probationMonth = probationMonth
	builder.probationMonthFlag = true
	return builder
}

// 合同期
//
// 示例值：3
func (builder *OfferBasicInfoBuilder) ContractYear(contractYear int) *OfferBasicInfoBuilder {
	builder.contractYear = contractYear
	builder.contractYearFlag = true
	return builder
}

// 预计入职日期
//
// 示例值：{"date":"2022-04-07"}
func (builder *OfferBasicInfoBuilder) ExpectedOnboardDate(expectedOnboardDate string) *OfferBasicInfoBuilder {
	builder.expectedOnboardDate = expectedOnboardDate
	builder.expectedOnboardDateFlag = true
	return builder
}

// 入职地点 ID
//
// 示例值：6897079709306259719
func (builder *OfferBasicInfoBuilder) OnboardAddressId(onboardAddressId string) *OfferBasicInfoBuilder {
	builder.onboardAddressId = onboardAddressId
	builder.onboardAddressIdFlag = true
	return builder
}

// 办公地点 ID
//
// 示例值：6897079709306259719
func (builder *OfferBasicInfoBuilder) WorkAddressId(workAddressId string) *OfferBasicInfoBuilder {
	builder.workAddressId = workAddressId
	builder.workAddressIdFlag = true
	return builder
}

// Offer负责人 ID
//
// 示例值：ou_ce613028fe74745421f5dc320bb9c709
func (builder *OfferBasicInfoBuilder) OwnerUserId(ownerUserId string) *OfferBasicInfoBuilder {
	builder.ownerUserId = ownerUserId
	builder.ownerUserIdFlag = true
	return builder
}

// Offer 推荐语
//
// 示例值：十分优秀，推荐入职
func (builder *OfferBasicInfoBuilder) RecommendedWords(recommendedWords string) *OfferBasicInfoBuilder {
	builder.recommendedWords = recommendedWords
	builder.recommendedWordsFlag = true
	return builder
}

// 招聘需求 ID
//
// 示例值：2342352224
func (builder *OfferBasicInfoBuilder) JobRequirementId(jobRequirementId string) *OfferBasicInfoBuilder {
	builder.jobRequirementId = jobRequirementId
	builder.jobRequirementIdFlag = true
	return builder
}

// 招聘流程类型 ID
//
// 示例值：2
func (builder *OfferBasicInfoBuilder) JobProcessTypeId(jobProcessTypeId int) *OfferBasicInfoBuilder {
	builder.jobProcessTypeId = jobProcessTypeId
	builder.jobProcessTypeIdFlag = true
	return builder
}

// 附件ID列表
//
// 示例值：["7081582717280831752"]
func (builder *OfferBasicInfoBuilder) AttachmentIdList(attachmentIdList []string) *OfferBasicInfoBuilder {
	builder.attachmentIdList = attachmentIdList
	builder.attachmentIdListFlag = true
	return builder
}

// 附件描述
//
// 示例值：张三的简历
func (builder *OfferBasicInfoBuilder) AttachmentDescription(attachmentDescription string) *OfferBasicInfoBuilder {
	builder.attachmentDescription = attachmentDescription
	builder.attachmentDescriptionFlag = true
	return builder
}

// Offer操作人 ID
//
// 示例值：ou_ce613028fe74745421f5dc320bb9c709
func (builder *OfferBasicInfoBuilder) OperatorUserId(operatorUserId string) *OfferBasicInfoBuilder {
	builder.operatorUserId = operatorUserId
	builder.operatorUserIdFlag = true
	return builder
}

func (builder *OfferBasicInfoBuilder) Build() *OfferBasicInfo {
	req := &OfferBasicInfo{}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.leaderUserIdFlag {
		req.LeaderUserId = &builder.leaderUserId

	}
	if builder.employmentJobIdFlag {
		req.EmploymentJobId = &builder.employmentJobId

	}
	if builder.employeeTypeIdFlag {
		req.EmployeeTypeId = &builder.employeeTypeId

	}
	if builder.jobFamilyIdFlag {
		req.JobFamilyId = &builder.jobFamilyId

	}
	if builder.jobLevelIdFlag {
		req.JobLevelId = &builder.jobLevelId

	}
	if builder.probationMonthFlag {
		req.ProbationMonth = &builder.probationMonth

	}
	if builder.contractYearFlag {
		req.ContractYear = &builder.contractYear

	}
	if builder.expectedOnboardDateFlag {
		req.ExpectedOnboardDate = &builder.expectedOnboardDate

	}
	if builder.onboardAddressIdFlag {
		req.OnboardAddressId = &builder.onboardAddressId

	}
	if builder.workAddressIdFlag {
		req.WorkAddressId = &builder.workAddressId

	}
	if builder.ownerUserIdFlag {
		req.OwnerUserId = &builder.ownerUserId

	}
	if builder.recommendedWordsFlag {
		req.RecommendedWords = &builder.recommendedWords

	}
	if builder.jobRequirementIdFlag {
		req.JobRequirementId = &builder.jobRequirementId

	}
	if builder.jobProcessTypeIdFlag {
		req.JobProcessTypeId = &builder.jobProcessTypeId

	}
	if builder.attachmentIdListFlag {
		req.AttachmentIdList = builder.attachmentIdList
	}
	if builder.attachmentDescriptionFlag {
		req.AttachmentDescription = &builder.attachmentDescription

	}
	if builder.operatorUserIdFlag {
		req.OperatorUserId = &builder.operatorUserId

	}
	return req
}

type OfferCustomField struct {
	Id     *string                 `json:"id,omitempty"`     // 自定义字段 ID
	Name   *I18n                   `json:"name,omitempty"`   // 自定义字段名称
	Config *OfferCustomFieldConfig `json:"config,omitempty"` // 自定义字段配置信息，仅字段类型为「单选」、「多选」时需传配置选项信息
}

type OfferCustomFieldBuilder struct {
	id         string // 自定义字段 ID
	idFlag     bool
	name       *I18n // 自定义字段名称
	nameFlag   bool
	config     *OfferCustomFieldConfig // 自定义字段配置信息，仅字段类型为「单选」、「多选」时需传配置选项信息
	configFlag bool
}

func NewOfferCustomFieldBuilder() *OfferCustomFieldBuilder {
	builder := &OfferCustomFieldBuilder{}
	return builder
}

// 自定义字段 ID
//
// 示例值：6887476510505748749
func (builder *OfferCustomFieldBuilder) Id(id string) *OfferCustomFieldBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 自定义字段名称
//
// 示例值：
func (builder *OfferCustomFieldBuilder) Name(name *I18n) *OfferCustomFieldBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 自定义字段配置信息，仅字段类型为「单选」、「多选」时需传配置选项信息
//
// 示例值：
func (builder *OfferCustomFieldBuilder) Config(config *OfferCustomFieldConfig) *OfferCustomFieldBuilder {
	builder.config = config
	builder.configFlag = true
	return builder
}

func (builder *OfferCustomFieldBuilder) Build() *OfferCustomField {
	req := &OfferCustomField{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.configFlag {
		req.Config = builder.config
	}
	return req
}

type OfferCustomFieldConfig struct {
	Options []*OfferCustomFieldConfigOption `json:"options,omitempty"` // 选项信息
}

type OfferCustomFieldConfigBuilder struct {
	options     []*OfferCustomFieldConfigOption // 选项信息
	optionsFlag bool
}

func NewOfferCustomFieldConfigBuilder() *OfferCustomFieldConfigBuilder {
	builder := &OfferCustomFieldConfigBuilder{}
	return builder
}

// 选项信息
//
// 示例值：
func (builder *OfferCustomFieldConfigBuilder) Options(options []*OfferCustomFieldConfigOption) *OfferCustomFieldConfigBuilder {
	builder.options = options
	builder.optionsFlag = true
	return builder
}

func (builder *OfferCustomFieldConfigBuilder) Build() *OfferCustomFieldConfig {
	req := &OfferCustomFieldConfig{}
	if builder.optionsFlag {
		req.Options = builder.options
	}
	return req
}

type OfferCustomFieldConfigOption struct {
	Name *I18n `json:"name,omitempty"` // 选项名称
}

type OfferCustomFieldConfigOptionBuilder struct {
	name     *I18n // 选项名称
	nameFlag bool
}

func NewOfferCustomFieldConfigOptionBuilder() *OfferCustomFieldConfigOptionBuilder {
	builder := &OfferCustomFieldConfigOptionBuilder{}
	return builder
}

// 选项名称
//
// 示例值：
func (builder *OfferCustomFieldConfigOptionBuilder) Name(name *I18n) *OfferCustomFieldConfigOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *OfferCustomFieldConfigOptionBuilder) Build() *OfferCustomFieldConfigOption {
	req := &OfferCustomFieldConfigOption{}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type OfferCustomizedInfo struct {
	Id    *string `json:"id,omitempty"`    // 自定义字段 ID
	Value *string `json:"value,omitempty"` // 自定义字段信息，以字符串形式传入，如：;1. 单选： "1";2. 多选："[\"1\", \"2\"]";3. 日期："{"date":"2022-01-01"}";4. 年份选择："{"date":"2022"}";5. 月份选择："{"date":"2022-01"}";6. 单行文本："xxx ";7. 多行文本："xxx ";8. 数字："123";9. 金额："123.1"
}

type OfferCustomizedInfoBuilder struct {
	id        string // 自定义字段 ID
	idFlag    bool
	value     string // 自定义字段信息，以字符串形式传入，如：;1. 单选： "1";2. 多选："[\"1\", \"2\"]";3. 日期："{"date":"2022-01-01"}";4. 年份选择："{"date":"2022"}";5. 月份选择："{"date":"2022-01"}";6. 单行文本："xxx ";7. 多行文本："xxx ";8. 数字："123";9. 金额："123.1"
	valueFlag bool
}

func NewOfferCustomizedInfoBuilder() *OfferCustomizedInfoBuilder {
	builder := &OfferCustomizedInfoBuilder{}
	return builder
}

// 自定义字段 ID
//
// 示例值：6972464088568269100
func (builder *OfferCustomizedInfoBuilder) Id(id string) *OfferCustomizedInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 自定义字段信息，以字符串形式传入，如：;1. 单选： "1";2. 多选："[\"1\", \"2\"]";3. 日期："{"date":"2022-01-01"}";4. 年份选择："{"date":"2022"}";5. 月份选择："{"date":"2022-01"}";6. 单行文本："xxx ";7. 多行文本："xxx ";8. 数字："123";9. 金额："123.1"
//
// 示例值：1
func (builder *OfferCustomizedInfoBuilder) Value(value string) *OfferCustomizedInfoBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *OfferCustomizedInfoBuilder) Build() *OfferCustomizedInfo {
	req := &OfferCustomizedInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type OfferInfo struct {
	OfferId            *string                `json:"offer_id,omitempty"`             // Offer ID
	ApplicationId      *string                `json:"application_id,omitempty"`       // 投递 ID
	SchemaId           *string                `json:"schema_id,omitempty"`            // Offer 申请表模板 ID，用于描述申请表单结构的元数据定义，即对申请表内容的描述。用户每一次更改 Offer 申请表模板信息，都会生成新的 schema_id，创建 Offer 时应传入最新的 schema_id，可从「获取Offer申请表模板信息」接口中获取
	OfferType          *int                   `json:"offer_type,omitempty"`           // Offer 类型
	BasicInfo          *OfferBasicInfo        `json:"basic_info,omitempty"`           // Offer 基本信息
	SalaryInfo         *OfferSalaryInfo       `json:"salary_info,omitempty"`          // Offer 薪资信息
	CustomizedInfoList []*OfferCustomizedInfo `json:"customized_info_list,omitempty"` // 自定义信息
}

type OfferInfoBuilder struct {
	offerId                string // Offer ID
	offerIdFlag            bool
	applicationId          string // 投递 ID
	applicationIdFlag      bool
	schemaId               string // Offer 申请表模板 ID，用于描述申请表单结构的元数据定义，即对申请表内容的描述。用户每一次更改 Offer 申请表模板信息，都会生成新的 schema_id，创建 Offer 时应传入最新的 schema_id，可从「获取Offer申请表模板信息」接口中获取
	schemaIdFlag           bool
	offerType              int // Offer 类型
	offerTypeFlag          bool
	basicInfo              *OfferBasicInfo // Offer 基本信息
	basicInfoFlag          bool
	salaryInfo             *OfferSalaryInfo // Offer 薪资信息
	salaryInfoFlag         bool
	customizedInfoList     []*OfferCustomizedInfo // 自定义信息
	customizedInfoListFlag bool
}

func NewOfferInfoBuilder() *OfferInfoBuilder {
	builder := &OfferInfoBuilder{}
	return builder
}

// Offer ID
//
// 示例值：7016605170635213100
func (builder *OfferInfoBuilder) OfferId(offerId string) *OfferInfoBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}

// 投递 ID
//
// 示例值：7013552389293279532
func (builder *OfferInfoBuilder) ApplicationId(applicationId string) *OfferInfoBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// Offer 申请表模板 ID，用于描述申请表单结构的元数据定义，即对申请表内容的描述。用户每一次更改 Offer 申请表模板信息，都会生成新的 schema_id，创建 Offer 时应传入最新的 schema_id，可从「获取Offer申请表模板信息」接口中获取
//
// 示例值：7013318077945596204
func (builder *OfferInfoBuilder) SchemaId(schemaId string) *OfferInfoBuilder {
	builder.schemaId = schemaId
	builder.schemaIdFlag = true
	return builder
}

// Offer 类型
//
// 示例值：1
func (builder *OfferInfoBuilder) OfferType(offerType int) *OfferInfoBuilder {
	builder.offerType = offerType
	builder.offerTypeFlag = true
	return builder
}

// Offer 基本信息
//
// 示例值：
func (builder *OfferInfoBuilder) BasicInfo(basicInfo *OfferBasicInfo) *OfferInfoBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}

// Offer 薪资信息
//
// 示例值：
func (builder *OfferInfoBuilder) SalaryInfo(salaryInfo *OfferSalaryInfo) *OfferInfoBuilder {
	builder.salaryInfo = salaryInfo
	builder.salaryInfoFlag = true
	return builder
}

// 自定义信息
//
// 示例值：
func (builder *OfferInfoBuilder) CustomizedInfoList(customizedInfoList []*OfferCustomizedInfo) *OfferInfoBuilder {
	builder.customizedInfoList = customizedInfoList
	builder.customizedInfoListFlag = true
	return builder
}

func (builder *OfferInfoBuilder) Build() *OfferInfo {
	req := &OfferInfo{}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.schemaIdFlag {
		req.SchemaId = &builder.schemaId

	}
	if builder.offerTypeFlag {
		req.OfferType = &builder.offerType

	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.salaryInfoFlag {
		req.SalaryInfo = builder.salaryInfo
	}
	if builder.customizedInfoListFlag {
		req.CustomizedInfoList = builder.customizedInfoList
	}
	return req
}

type OfferJobInfo struct {
	JobId   *string `json:"job_id,omitempty"`   // Offer 职位 ID
	JobName *string `json:"job_name,omitempty"` // Offer 职位名称
}

type OfferJobInfoBuilder struct {
	jobId       string // Offer 职位 ID
	jobIdFlag   bool
	jobName     string // Offer 职位名称
	jobNameFlag bool
}

func NewOfferJobInfoBuilder() *OfferJobInfoBuilder {
	builder := &OfferJobInfoBuilder{}
	return builder
}

// Offer 职位 ID
//
// 示例值：7080891505426925854
func (builder *OfferJobInfoBuilder) JobId(jobId string) *OfferJobInfoBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// Offer 职位名称
//
// 示例值：xx
func (builder *OfferJobInfoBuilder) JobName(jobName string) *OfferJobInfoBuilder {
	builder.jobName = jobName
	builder.jobNameFlag = true
	return builder
}

func (builder *OfferJobInfoBuilder) Build() *OfferJobInfo {
	req := &OfferJobInfo{}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.jobNameFlag {
		req.JobName = &builder.jobName

	}
	return req
}

type OfferListInfo struct {
	Id            *string              `json:"id,omitempty"`             // Offer ID
	JobInfo       *OfferJobInfo        `json:"job_info,omitempty"`       // Offer 职位
	CreateTime    *string              `json:"create_time,omitempty"`    // 创建时间
	OfferStatus   *int                 `json:"offer_status,omitempty"`   // Offer 状态
	OfferType     *int                 `json:"offer_type,omitempty"`     // Offer 类型
	EmployeeType  *BaseBilingualWithId `json:"employee_type,omitempty"`  // Offer 人员类型
	ApplicationId *string              `json:"application_id,omitempty"` // Offer 投递 ID
}

type OfferListInfoBuilder struct {
	id                string // Offer ID
	idFlag            bool
	jobInfo           *OfferJobInfo // Offer 职位
	jobInfoFlag       bool
	createTime        string // 创建时间
	createTimeFlag    bool
	offerStatus       int // Offer 状态
	offerStatusFlag   bool
	offerType         int // Offer 类型
	offerTypeFlag     bool
	employeeType      *BaseBilingualWithId // Offer 人员类型
	employeeTypeFlag  bool
	applicationId     string // Offer 投递 ID
	applicationIdFlag bool
}

func NewOfferListInfoBuilder() *OfferListInfoBuilder {
	builder := &OfferListInfoBuilder{}
	return builder
}

// Offer ID
//
// 示例值：7096320678581242123
func (builder *OfferListInfoBuilder) Id(id string) *OfferListInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// Offer 职位
//
// 示例值：
func (builder *OfferListInfoBuilder) JobInfo(jobInfo *OfferJobInfo) *OfferListInfoBuilder {
	builder.jobInfo = jobInfo
	builder.jobInfoFlag = true
	return builder
}

// 创建时间
//
// 示例值：1628512038000
func (builder *OfferListInfoBuilder) CreateTime(createTime string) *OfferListInfoBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// Offer 状态
//
// 示例值：1
func (builder *OfferListInfoBuilder) OfferStatus(offerStatus int) *OfferListInfoBuilder {
	builder.offerStatus = offerStatus
	builder.offerStatusFlag = true
	return builder
}

// Offer 类型
//
// 示例值：Offer 类型
func (builder *OfferListInfoBuilder) OfferType(offerType int) *OfferListInfoBuilder {
	builder.offerType = offerType
	builder.offerTypeFlag = true
	return builder
}

// Offer 人员类型
//
// 示例值：
func (builder *OfferListInfoBuilder) EmployeeType(employeeType *BaseBilingualWithId) *OfferListInfoBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}

// Offer 投递 ID
//
// 示例值：7096358713330272526
func (builder *OfferListInfoBuilder) ApplicationId(applicationId string) *OfferListInfoBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

func (builder *OfferListInfoBuilder) Build() *OfferListInfo {
	req := &OfferListInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobInfoFlag {
		req.JobInfo = builder.jobInfo
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.offerStatusFlag {
		req.OfferStatus = &builder.offerStatus

	}
	if builder.offerTypeFlag {
		req.OfferType = &builder.offerType

	}
	if builder.employeeTypeFlag {
		req.EmployeeType = builder.employeeType
	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	return req
}

type OfferSalaryInfo struct {
	Currency                  *string `json:"currency,omitempty"`                    // 币种
	BasicSalary               *string `json:"basic_salary,omitempty"`                // 基本工资，当启用 Offer 申请表中的「薪资信息」模块时，「基本工资」字段为必传项
	ProbationSalaryPercentage *string `json:"probation_salary_percentage,omitempty"` // 试用期百分比
	AwardSalaryMultiple       *string `json:"award_salary_multiple,omitempty"`       // 年终奖月数
	OptionShares              *string `json:"option_shares,omitempty"`               // 期权股数
	QuarterlyBonus            *string `json:"quarterly_bonus,omitempty"`             // 季度奖金额
	HalfYearBonus             *string `json:"half_year_bonus,omitempty"`             // 半年奖金额
}

type OfferSalaryInfoBuilder struct {
	currency                      string // 币种
	currencyFlag                  bool
	basicSalary                   string // 基本工资，当启用 Offer 申请表中的「薪资信息」模块时，「基本工资」字段为必传项
	basicSalaryFlag               bool
	probationSalaryPercentage     string // 试用期百分比
	probationSalaryPercentageFlag bool
	awardSalaryMultiple           string // 年终奖月数
	awardSalaryMultipleFlag       bool
	optionShares                  string // 期权股数
	optionSharesFlag              bool
	quarterlyBonus                string // 季度奖金额
	quarterlyBonusFlag            bool
	halfYearBonus                 string // 半年奖金额
	halfYearBonusFlag             bool
}

func NewOfferSalaryInfoBuilder() *OfferSalaryInfoBuilder {
	builder := &OfferSalaryInfoBuilder{}
	return builder
}

// 币种
//
// 示例值：CNY
func (builder *OfferSalaryInfoBuilder) Currency(currency string) *OfferSalaryInfoBuilder {
	builder.currency = currency
	builder.currencyFlag = true
	return builder
}

// 基本工资，当启用 Offer 申请表中的「薪资信息」模块时，「基本工资」字段为必传项
//
// 示例值：1000000
func (builder *OfferSalaryInfoBuilder) BasicSalary(basicSalary string) *OfferSalaryInfoBuilder {
	builder.basicSalary = basicSalary
	builder.basicSalaryFlag = true
	return builder
}

// 试用期百分比
//
// 示例值：0.8
func (builder *OfferSalaryInfoBuilder) ProbationSalaryPercentage(probationSalaryPercentage string) *OfferSalaryInfoBuilder {
	builder.probationSalaryPercentage = probationSalaryPercentage
	builder.probationSalaryPercentageFlag = true
	return builder
}

// 年终奖月数
//
// 示例值：3
func (builder *OfferSalaryInfoBuilder) AwardSalaryMultiple(awardSalaryMultiple string) *OfferSalaryInfoBuilder {
	builder.awardSalaryMultiple = awardSalaryMultiple
	builder.awardSalaryMultipleFlag = true
	return builder
}

// 期权股数
//
// 示例值：30
func (builder *OfferSalaryInfoBuilder) OptionShares(optionShares string) *OfferSalaryInfoBuilder {
	builder.optionShares = optionShares
	builder.optionSharesFlag = true
	return builder
}

// 季度奖金额
//
// 示例值：3000
func (builder *OfferSalaryInfoBuilder) QuarterlyBonus(quarterlyBonus string) *OfferSalaryInfoBuilder {
	builder.quarterlyBonus = quarterlyBonus
	builder.quarterlyBonusFlag = true
	return builder
}

// 半年奖金额
//
// 示例值：10000
func (builder *OfferSalaryInfoBuilder) HalfYearBonus(halfYearBonus string) *OfferSalaryInfoBuilder {
	builder.halfYearBonus = halfYearBonus
	builder.halfYearBonusFlag = true
	return builder
}

func (builder *OfferSalaryInfoBuilder) Build() *OfferSalaryInfo {
	req := &OfferSalaryInfo{}
	if builder.currencyFlag {
		req.Currency = &builder.currency

	}
	if builder.basicSalaryFlag {
		req.BasicSalary = &builder.basicSalary

	}
	if builder.probationSalaryPercentageFlag {
		req.ProbationSalaryPercentage = &builder.probationSalaryPercentage

	}
	if builder.awardSalaryMultipleFlag {
		req.AwardSalaryMultiple = &builder.awardSalaryMultiple

	}
	if builder.optionSharesFlag {
		req.OptionShares = &builder.optionShares

	}
	if builder.quarterlyBonusFlag {
		req.QuarterlyBonus = &builder.quarterlyBonus

	}
	if builder.halfYearBonusFlag {
		req.HalfYearBonus = &builder.halfYearBonus

	}
	return req
}

type OfferSchema struct {
	Id         *string              `json:"id,omitempty"`          // offer申请表ID
	Scenario   *int                 `json:"scenario,omitempty"`    // offer申请表使用场景
	Version    *int                 `json:"version,omitempty"`     // 申请表版本
	ObjectList []*OfferSchemaDetail `json:"object_list,omitempty"` // 字段对象信息
}

type OfferSchemaBuilder struct {
	id             string // offer申请表ID
	idFlag         bool
	scenario       int // offer申请表使用场景
	scenarioFlag   bool
	version        int // 申请表版本
	versionFlag    bool
	objectList     []*OfferSchemaDetail // 字段对象信息
	objectListFlag bool
}

func NewOfferSchemaBuilder() *OfferSchemaBuilder {
	builder := &OfferSchemaBuilder{}
	return builder
}

// offer申请表ID
//
// 示例值：1213213123123
func (builder *OfferSchemaBuilder) Id(id string) *OfferSchemaBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// offer申请表使用场景
//
// 示例值：1
func (builder *OfferSchemaBuilder) Scenario(scenario int) *OfferSchemaBuilder {
	builder.scenario = scenario
	builder.scenarioFlag = true
	return builder
}

// 申请表版本
//
// 示例值：121
func (builder *OfferSchemaBuilder) Version(version int) *OfferSchemaBuilder {
	builder.version = version
	builder.versionFlag = true
	return builder
}

// 字段对象信息
//
// 示例值：
func (builder *OfferSchemaBuilder) ObjectList(objectList []*OfferSchemaDetail) *OfferSchemaBuilder {
	builder.objectList = objectList
	builder.objectListFlag = true
	return builder
}

func (builder *OfferSchemaBuilder) Build() *OfferSchema {
	req := &OfferSchema{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.scenarioFlag {
		req.Scenario = &builder.scenario

	}
	if builder.versionFlag {
		req.Version = &builder.version

	}
	if builder.objectListFlag {
		req.ObjectList = builder.objectList
	}
	return req
}

type OfferSchemaChild struct {
	Id         *string              `json:"id,omitempty"`          // offer申请表ID
	Scenario   *int                 `json:"scenario,omitempty"`    // offer申请表使用场景
	Version    *int                 `json:"version,omitempty"`     // 申请表版本
	ObjectList []*OfferSchemaDetail `json:"object_list,omitempty"` // 字段对象信息
}

type OfferSchemaChildBuilder struct {
	id             string // offer申请表ID
	idFlag         bool
	scenario       int // offer申请表使用场景
	scenarioFlag   bool
	version        int // 申请表版本
	versionFlag    bool
	objectList     []*OfferSchemaDetail // 字段对象信息
	objectListFlag bool
}

func NewOfferSchemaChildBuilder() *OfferSchemaChildBuilder {
	builder := &OfferSchemaChildBuilder{}
	return builder
}

// offer申请表ID
//
// 示例值：1213213123123
func (builder *OfferSchemaChildBuilder) Id(id string) *OfferSchemaChildBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// offer申请表使用场景
//
// 示例值：1
func (builder *OfferSchemaChildBuilder) Scenario(scenario int) *OfferSchemaChildBuilder {
	builder.scenario = scenario
	builder.scenarioFlag = true
	return builder
}

// 申请表版本
//
// 示例值：121
func (builder *OfferSchemaChildBuilder) Version(version int) *OfferSchemaChildBuilder {
	builder.version = version
	builder.versionFlag = true
	return builder
}

// 字段对象信息
//
// 示例值：
func (builder *OfferSchemaChildBuilder) ObjectList(objectList []*OfferSchemaDetail) *OfferSchemaChildBuilder {
	builder.objectList = objectList
	builder.objectListFlag = true
	return builder
}

func (builder *OfferSchemaChildBuilder) Build() *OfferSchemaChild {
	req := &OfferSchemaChild{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.scenarioFlag {
		req.Scenario = &builder.scenario

	}
	if builder.versionFlag {
		req.Version = &builder.version

	}
	if builder.objectListFlag {
		req.ObjectList = builder.objectList
	}
	return req
}

type OfferSchemaDetail struct {
	Id           *string                    `json:"id,omitempty"`            // 字段ID
	Name         *OfferSchemaName           `json:"name,omitempty"`          // 字段名称
	Type         *string                    `json:"type,omitempty"`          // 字段类型, text=单行文本, long_text=多行文本, select=单选, multi_select=多选, date_select=日期, number=数字
	IsCustomized *bool                      `json:"is_customized,omitempty"` // 字段是否为自定义
	OptionList   []*OfferSchemaDetailOption `json:"option_list,omitempty"`   // 单选/多选可选择字段的选项值
}

type OfferSchemaDetailBuilder struct {
	id               string // 字段ID
	idFlag           bool
	name             *OfferSchemaName // 字段名称
	nameFlag         bool
	type_            string // 字段类型, text=单行文本, long_text=多行文本, select=单选, multi_select=多选, date_select=日期, number=数字
	typeFlag         bool
	isCustomized     bool // 字段是否为自定义
	isCustomizedFlag bool
	optionList       []*OfferSchemaDetailOption // 单选/多选可选择字段的选项值
	optionListFlag   bool
}

func NewOfferSchemaDetailBuilder() *OfferSchemaDetailBuilder {
	builder := &OfferSchemaDetailBuilder{}
	return builder
}

// 字段ID
//
// 示例值：1213213123123
func (builder *OfferSchemaDetailBuilder) Id(id string) *OfferSchemaDetailBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 字段名称
//
// 示例值：
func (builder *OfferSchemaDetailBuilder) Name(name *OfferSchemaName) *OfferSchemaDetailBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 字段类型, text=单行文本, long_text=多行文本, select=单选, multi_select=多选, date_select=日期, number=数字
//
// 示例值：number
func (builder *OfferSchemaDetailBuilder) Type(type_ string) *OfferSchemaDetailBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 字段是否为自定义
//
// 示例值：true
func (builder *OfferSchemaDetailBuilder) IsCustomized(isCustomized bool) *OfferSchemaDetailBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}

// 单选/多选可选择字段的选项值
//
// 示例值：
func (builder *OfferSchemaDetailBuilder) OptionList(optionList []*OfferSchemaDetailOption) *OfferSchemaDetailBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}

func (builder *OfferSchemaDetailBuilder) Build() *OfferSchemaDetail {
	req := &OfferSchemaDetail{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	return req
}

type OfferSchemaDetailOption struct {
	Name         *OfferSchemaName `json:"name,omitempty"`          // 名字
	Index        *int             `json:"index,omitempty"`         // 选项序号
	ActiveStatus *int             `json:"active_status,omitempty"` // 选项当前是否启用
}

type OfferSchemaDetailOptionBuilder struct {
	name             *OfferSchemaName // 名字
	nameFlag         bool
	index            int // 选项序号
	indexFlag        bool
	activeStatus     int // 选项当前是否启用
	activeStatusFlag bool
}

func NewOfferSchemaDetailOptionBuilder() *OfferSchemaDetailOptionBuilder {
	builder := &OfferSchemaDetailOptionBuilder{}
	return builder
}

// 名字
//
// 示例值：
func (builder *OfferSchemaDetailOptionBuilder) Name(name *OfferSchemaName) *OfferSchemaDetailOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 选项序号
//
// 示例值：121
func (builder *OfferSchemaDetailOptionBuilder) Index(index int) *OfferSchemaDetailOptionBuilder {
	builder.index = index
	builder.indexFlag = true
	return builder
}

// 选项当前是否启用
//
// 示例值：1
func (builder *OfferSchemaDetailOptionBuilder) ActiveStatus(activeStatus int) *OfferSchemaDetailOptionBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *OfferSchemaDetailOptionBuilder) Build() *OfferSchemaDetailOption {
	req := &OfferSchemaDetailOption{}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.indexFlag {
		req.Index = &builder.index

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

type OfferSchemaListInfo struct {
	SchemaList []*OfferSchemaChild `json:"schema_list,omitempty"` // offer申请表列表
}

type OfferSchemaListInfoBuilder struct {
	schemaList     []*OfferSchemaChild // offer申请表列表
	schemaListFlag bool
}

func NewOfferSchemaListInfoBuilder() *OfferSchemaListInfoBuilder {
	builder := &OfferSchemaListInfoBuilder{}
	return builder
}

// offer申请表列表
//
// 示例值：
func (builder *OfferSchemaListInfoBuilder) SchemaList(schemaList []*OfferSchemaChild) *OfferSchemaListInfoBuilder {
	builder.schemaList = schemaList
	builder.schemaListFlag = true
	return builder
}

func (builder *OfferSchemaListInfoBuilder) Build() *OfferSchemaListInfo {
	req := &OfferSchemaListInfo{}
	if builder.schemaListFlag {
		req.SchemaList = builder.schemaList
	}
	return req
}

type OfferSchemaName struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 中文名
	EnUs *string `json:"en_us,omitempty"` // 英文名
}

type OfferSchemaNameBuilder struct {
	zhCn     string // 中文名
	zhCnFlag bool
	enUs     string // 英文名
	enUsFlag bool
}

func NewOfferSchemaNameBuilder() *OfferSchemaNameBuilder {
	builder := &OfferSchemaNameBuilder{}
	return builder
}

// 中文名
//
// 示例值：名字
func (builder *OfferSchemaNameBuilder) ZhCn(zhCn string) *OfferSchemaNameBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}

// 英文名
//
// 示例值：name
func (builder *OfferSchemaNameBuilder) EnUs(enUs string) *OfferSchemaNameBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *OfferSchemaNameBuilder) Build() *OfferSchemaName {
	req := &OfferSchemaName{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

type OfferSelectionObject struct {
	SchemaVersion *int                       `json:"schema_version,omitempty"` // 自定义字段所在的审批表版本
	OptionList    []*OfferSchemaDetailOption `json:"option_list,omitempty"`    // 选项
}

type OfferSelectionObjectBuilder struct {
	schemaVersion     int // 自定义字段所在的审批表版本
	schemaVersionFlag bool
	optionList        []*OfferSchemaDetailOption // 选项
	optionListFlag    bool
}

func NewOfferSelectionObjectBuilder() *OfferSelectionObjectBuilder {
	builder := &OfferSelectionObjectBuilder{}
	return builder
}

// 自定义字段所在的审批表版本
//
// 示例值：
func (builder *OfferSelectionObjectBuilder) SchemaVersion(schemaVersion int) *OfferSelectionObjectBuilder {
	builder.schemaVersion = schemaVersion
	builder.schemaVersionFlag = true
	return builder
}

// 选项
//
// 示例值：
func (builder *OfferSelectionObjectBuilder) OptionList(optionList []*OfferSchemaDetailOption) *OfferSelectionObjectBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}

func (builder *OfferSelectionObjectBuilder) Build() *OfferSelectionObject {
	req := &OfferSelectionObject{}
	if builder.schemaVersionFlag {
		req.SchemaVersion = &builder.schemaVersion

	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	return req
}

type PortalJobPost struct {
	Id                 *string                         `json:"id,omitempty"`                   // 职位广告 ID
	Title              *string                         `json:"title,omitempty"`                // 标题
	JobId              *string                         `json:"job_id,omitempty"`               // 职位 ID
	JobCode            *string                         `json:"job_code,omitempty"`             // 职位编码
	JobExpireTime      *string                         `json:"job_expire_time,omitempty"`      // 职位过期时间，「null」代表「长期有效」
	JobActiveStatus    *int                            `json:"job_active_status,omitempty"`    // 职位状态
	JobProcessType     *int                            `json:"job_process_type,omitempty"`     // 职位流程类型
	JobRecruitmentType *IdNameObject                   `json:"job_recruitment_type,omitempty"` // 职位雇佣类型
	JobDepartment      *IdNameObject                   `json:"job_department,omitempty"`       // 职位部门
	JobType            *IdNameObject                   `json:"job_type,omitempty"`             // 职位类型
	Address            *CommonAddress                  `json:"address,omitempty"`              // 职位地址
	MinSalary          *string                         `json:"min_salary,omitempty"`           // 月薪范围-最低薪资
	MaxSalary          *string                         `json:"max_salary,omitempty"`           // 月薪范围-最高薪资
	RequiredDegree     *int                            `json:"required_degree,omitempty"`      // 学历要求
	Experience         *int                            `json:"experience,omitempty"`           // 经验
	Headcount          *int                            `json:"headcount,omitempty"`            // 数量
	HighLightList      []*IdNameObject                 `json:"high_light_list,omitempty"`      // 职位亮点
	Description        *string                         `json:"description,omitempty"`          // 职位描述
	Requirement        *string                         `json:"requirement,omitempty"`          // 职位要求
	Creator            *IdNameObject                   `json:"creator,omitempty"`              // 创建人
	CreateTime         *string                         `json:"create_time,omitempty"`          // 创建时间
	ModifyTime         *string                         `json:"modify_time,omitempty"`          // 修改时间
	CustomizedDataList []*WebsiteJobPostCustomizedData `json:"customized_data_list,omitempty"` // 自定义字段
	JobFunction        *IdNameObject                   `json:"job_function,omitempty"`         // 职能分类
	Subject            *IdNameObject                   `json:"subject,omitempty"`              // 职位项目
	AddressList        []*CommonAddress                `json:"address_list,omitempty"`         // 职位广告地址列表
}

type PortalJobPostBuilder struct {
	id                     string // 职位广告 ID
	idFlag                 bool
	title                  string // 标题
	titleFlag              bool
	jobId                  string // 职位 ID
	jobIdFlag              bool
	jobCode                string // 职位编码
	jobCodeFlag            bool
	jobExpireTime          string // 职位过期时间，「null」代表「长期有效」
	jobExpireTimeFlag      bool
	jobActiveStatus        int // 职位状态
	jobActiveStatusFlag    bool
	jobProcessType         int // 职位流程类型
	jobProcessTypeFlag     bool
	jobRecruitmentType     *IdNameObject // 职位雇佣类型
	jobRecruitmentTypeFlag bool
	jobDepartment          *IdNameObject // 职位部门
	jobDepartmentFlag      bool
	jobType                *IdNameObject // 职位类型
	jobTypeFlag            bool
	address                *CommonAddress // 职位地址
	addressFlag            bool
	minSalary              string // 月薪范围-最低薪资
	minSalaryFlag          bool
	maxSalary              string // 月薪范围-最高薪资
	maxSalaryFlag          bool
	requiredDegree         int // 学历要求
	requiredDegreeFlag     bool
	experience             int // 经验
	experienceFlag         bool
	headcount              int // 数量
	headcountFlag          bool
	highLightList          []*IdNameObject // 职位亮点
	highLightListFlag      bool
	description            string // 职位描述
	descriptionFlag        bool
	requirement            string // 职位要求
	requirementFlag        bool
	creator                *IdNameObject // 创建人
	creatorFlag            bool
	createTime             string // 创建时间
	createTimeFlag         bool
	modifyTime             string // 修改时间
	modifyTimeFlag         bool
	customizedDataList     []*WebsiteJobPostCustomizedData // 自定义字段
	customizedDataListFlag bool
	jobFunction            *IdNameObject // 职能分类
	jobFunctionFlag        bool
	subject                *IdNameObject // 职位项目
	subjectFlag            bool
	addressList            []*CommonAddress // 职位广告地址列表
	addressListFlag        bool
}

func NewPortalJobPostBuilder() *PortalJobPostBuilder {
	builder := &PortalJobPostBuilder{}
	return builder
}

// 职位广告 ID
//
// 示例值：1213213123123
func (builder *PortalJobPostBuilder) Id(id string) *PortalJobPostBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 标题
//
// 示例值：测试
func (builder *PortalJobPostBuilder) Title(title string) *PortalJobPostBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 职位 ID
//
// 示例值：xxx
func (builder *PortalJobPostBuilder) JobId(jobId string) *PortalJobPostBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 职位编码
//
// 示例值：007
func (builder *PortalJobPostBuilder) JobCode(jobCode string) *PortalJobPostBuilder {
	builder.jobCode = jobCode
	builder.jobCodeFlag = true
	return builder
}

// 职位过期时间，「null」代表「长期有效」
//
// 示例值：1111
func (builder *PortalJobPostBuilder) JobExpireTime(jobExpireTime string) *PortalJobPostBuilder {
	builder.jobExpireTime = jobExpireTime
	builder.jobExpireTimeFlag = true
	return builder
}

// 职位状态
//
// 示例值：1
func (builder *PortalJobPostBuilder) JobActiveStatus(jobActiveStatus int) *PortalJobPostBuilder {
	builder.jobActiveStatus = jobActiveStatus
	builder.jobActiveStatusFlag = true
	return builder
}

// 职位流程类型
//
// 示例值：1
func (builder *PortalJobPostBuilder) JobProcessType(jobProcessType int) *PortalJobPostBuilder {
	builder.jobProcessType = jobProcessType
	builder.jobProcessTypeFlag = true
	return builder
}

// 职位雇佣类型
//
// 示例值：
func (builder *PortalJobPostBuilder) JobRecruitmentType(jobRecruitmentType *IdNameObject) *PortalJobPostBuilder {
	builder.jobRecruitmentType = jobRecruitmentType
	builder.jobRecruitmentTypeFlag = true
	return builder
}

// 职位部门
//
// 示例值：
func (builder *PortalJobPostBuilder) JobDepartment(jobDepartment *IdNameObject) *PortalJobPostBuilder {
	builder.jobDepartment = jobDepartment
	builder.jobDepartmentFlag = true
	return builder
}

// 职位类型
//
// 示例值：
func (builder *PortalJobPostBuilder) JobType(jobType *IdNameObject) *PortalJobPostBuilder {
	builder.jobType = jobType
	builder.jobTypeFlag = true
	return builder
}

// 职位地址
//
// 示例值：
func (builder *PortalJobPostBuilder) Address(address *CommonAddress) *PortalJobPostBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}

// 月薪范围-最低薪资
//
// 示例值：5000
func (builder *PortalJobPostBuilder) MinSalary(minSalary string) *PortalJobPostBuilder {
	builder.minSalary = minSalary
	builder.minSalaryFlag = true
	return builder
}

// 月薪范围-最高薪资
//
// 示例值：10000
func (builder *PortalJobPostBuilder) MaxSalary(maxSalary string) *PortalJobPostBuilder {
	builder.maxSalary = maxSalary
	builder.maxSalaryFlag = true
	return builder
}

// 学历要求
//
// 示例值：1
func (builder *PortalJobPostBuilder) RequiredDegree(requiredDegree int) *PortalJobPostBuilder {
	builder.requiredDegree = requiredDegree
	builder.requiredDegreeFlag = true
	return builder
}

// 经验
//
// 示例值：1
func (builder *PortalJobPostBuilder) Experience(experience int) *PortalJobPostBuilder {
	builder.experience = experience
	builder.experienceFlag = true
	return builder
}

// 数量
//
// 示例值：12
func (builder *PortalJobPostBuilder) Headcount(headcount int) *PortalJobPostBuilder {
	builder.headcount = headcount
	builder.headcountFlag = true
	return builder
}

// 职位亮点
//
// 示例值：
func (builder *PortalJobPostBuilder) HighLightList(highLightList []*IdNameObject) *PortalJobPostBuilder {
	builder.highLightList = highLightList
	builder.highLightListFlag = true
	return builder
}

// 职位描述
//
// 示例值：负责软件开发
func (builder *PortalJobPostBuilder) Description(description string) *PortalJobPostBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 职位要求
//
// 示例值：大专
func (builder *PortalJobPostBuilder) Requirement(requirement string) *PortalJobPostBuilder {
	builder.requirement = requirement
	builder.requirementFlag = true
	return builder
}

// 创建人
//
// 示例值：
func (builder *PortalJobPostBuilder) Creator(creator *IdNameObject) *PortalJobPostBuilder {
	builder.creator = creator
	builder.creatorFlag = true
	return builder
}

// 创建时间
//
// 示例值：1111
func (builder *PortalJobPostBuilder) CreateTime(createTime string) *PortalJobPostBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 修改时间
//
// 示例值：222
func (builder *PortalJobPostBuilder) ModifyTime(modifyTime string) *PortalJobPostBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *PortalJobPostBuilder) CustomizedDataList(customizedDataList []*WebsiteJobPostCustomizedData) *PortalJobPostBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

// 职能分类
//
// 示例值：
func (builder *PortalJobPostBuilder) JobFunction(jobFunction *IdNameObject) *PortalJobPostBuilder {
	builder.jobFunction = jobFunction
	builder.jobFunctionFlag = true
	return builder
}

// 职位项目
//
// 示例值：
func (builder *PortalJobPostBuilder) Subject(subject *IdNameObject) *PortalJobPostBuilder {
	builder.subject = subject
	builder.subjectFlag = true
	return builder
}

// 职位广告地址列表
//
// 示例值：
func (builder *PortalJobPostBuilder) AddressList(addressList []*CommonAddress) *PortalJobPostBuilder {
	builder.addressList = addressList
	builder.addressListFlag = true
	return builder
}

func (builder *PortalJobPostBuilder) Build() *PortalJobPost {
	req := &PortalJobPost{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.jobCodeFlag {
		req.JobCode = &builder.jobCode

	}
	if builder.jobExpireTimeFlag {
		req.JobExpireTime = &builder.jobExpireTime

	}
	if builder.jobActiveStatusFlag {
		req.JobActiveStatus = &builder.jobActiveStatus

	}
	if builder.jobProcessTypeFlag {
		req.JobProcessType = &builder.jobProcessType

	}
	if builder.jobRecruitmentTypeFlag {
		req.JobRecruitmentType = builder.jobRecruitmentType
	}
	if builder.jobDepartmentFlag {
		req.JobDepartment = builder.jobDepartment
	}
	if builder.jobTypeFlag {
		req.JobType = builder.jobType
	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.minSalaryFlag {
		req.MinSalary = &builder.minSalary

	}
	if builder.maxSalaryFlag {
		req.MaxSalary = &builder.maxSalary

	}
	if builder.requiredDegreeFlag {
		req.RequiredDegree = &builder.requiredDegree

	}
	if builder.experienceFlag {
		req.Experience = &builder.experience

	}
	if builder.headcountFlag {
		req.Headcount = &builder.headcount

	}
	if builder.highLightListFlag {
		req.HighLightList = builder.highLightList
	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.requirementFlag {
		req.Requirement = &builder.requirement

	}
	if builder.creatorFlag {
		req.Creator = builder.creator
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.jobFunctionFlag {
		req.JobFunction = builder.jobFunction
	}
	if builder.subjectFlag {
		req.Subject = builder.subject
	}
	if builder.addressListFlag {
		req.AddressList = builder.addressList
	}
	return req
}

type ProjectInfo struct {
	Desc      *string `json:"desc,omitempty"`       // 描述
	EndTime   *int    `json:"end_time,omitempty"`   // 结束时间
	Link      *string `json:"link,omitempty"`       // 项目链接
	Name      *string `json:"name,omitempty"`       // 项目名称
	Role      *string `json:"role,omitempty"`       // 项目角色
	StartTime *int    `json:"start_time,omitempty"` // 开始时间
}

type ProjectInfoBuilder struct {
	desc          string // 描述
	descFlag      bool
	endTime       int // 结束时间
	endTimeFlag   bool
	link          string // 项目链接
	linkFlag      bool
	name          string // 项目名称
	nameFlag      bool
	role          string // 项目角色
	roleFlag      bool
	startTime     int // 开始时间
	startTimeFlag bool
}

func NewProjectInfoBuilder() *ProjectInfoBuilder {
	builder := &ProjectInfoBuilder{}
	return builder
}

// 描述
//
// 示例值：
func (builder *ProjectInfoBuilder) Desc(desc string) *ProjectInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 结束时间
//
// 示例值：
func (builder *ProjectInfoBuilder) EndTime(endTime int) *ProjectInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 项目链接
//
// 示例值：
func (builder *ProjectInfoBuilder) Link(link string) *ProjectInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 项目名称
//
// 示例值：
func (builder *ProjectInfoBuilder) Name(name string) *ProjectInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 项目角色
//
// 示例值：
func (builder *ProjectInfoBuilder) Role(role string) *ProjectInfoBuilder {
	builder.role = role
	builder.roleFlag = true
	return builder
}

// 开始时间
//
// 示例值：
func (builder *ProjectInfoBuilder) StartTime(startTime int) *ProjectInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

func (builder *ProjectInfoBuilder) Build() *ProjectInfo {
	req := &ProjectInfo{}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.roleFlag {
		req.Role = &builder.role

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	return req
}

type PushStage struct {
}

type Question struct {
	QuestionId             *string                 `json:"question_id,omitempty"`               // 题目 ID
	QuestionName           *string                 `json:"question_name,omitempty"`             // 题目中文名称
	QuestionEnName         *string                 `json:"question_en_name,omitempty"`          // 题目英文名称
	QuestionDesc           *string                 `json:"question_desc,omitempty"`             // 题目中文描述
	QuestionEnDesc         *string                 `json:"question_en_desc,omitempty"`          // 题目英文描述
	QuestionType           *int                    `json:"question_type,omitempty"`             // 题目类型
	IsRequired             *bool                   `json:"is_required,omitempty"`               // 是否必填
	SelectOptionResultList []*SelectOptionResult   `json:"select_option_result_list,omitempty"` // 选项题回答列表（单选题及多选题）
	FiveStartScoringResult *FiveStartScoringResult `json:"five_start_scoring_result,omitempty"` // 评分题回答
	DescriptionResult      *string                 `json:"description_result,omitempty"`        // 描述题回答
}

type QuestionBuilder struct {
	questionId                 string // 题目 ID
	questionIdFlag             bool
	questionName               string // 题目中文名称
	questionNameFlag           bool
	questionEnName             string // 题目英文名称
	questionEnNameFlag         bool
	questionDesc               string // 题目中文描述
	questionDescFlag           bool
	questionEnDesc             string // 题目英文描述
	questionEnDescFlag         bool
	questionType               int // 题目类型
	questionTypeFlag           bool
	isRequired                 bool // 是否必填
	isRequiredFlag             bool
	selectOptionResultList     []*SelectOptionResult // 选项题回答列表（单选题及多选题）
	selectOptionResultListFlag bool
	fiveStartScoringResult     *FiveStartScoringResult // 评分题回答
	fiveStartScoringResultFlag bool
	descriptionResult          string // 描述题回答
	descriptionResultFlag      bool
}

func NewQuestionBuilder() *QuestionBuilder {
	builder := &QuestionBuilder{}
	return builder
}

// 题目 ID
//
// 示例值：6950930570311829804
func (builder *QuestionBuilder) QuestionId(questionId string) *QuestionBuilder {
	builder.questionId = questionId
	builder.questionIdFlag = true
	return builder
}

// 题目中文名称
//
// 示例值：你的总体评价如何？
func (builder *QuestionBuilder) QuestionName(questionName string) *QuestionBuilder {
	builder.questionName = questionName
	builder.questionNameFlag = true
	return builder
}

// 题目英文名称
//
// 示例值：How would you describe your overall experience?
func (builder *QuestionBuilder) QuestionEnName(questionEnName string) *QuestionBuilder {
	builder.questionEnName = questionEnName
	builder.questionEnNameFlag = true
	return builder
}

// 题目中文描述
//
// 示例值：测试描述内容
func (builder *QuestionBuilder) QuestionDesc(questionDesc string) *QuestionBuilder {
	builder.questionDesc = questionDesc
	builder.questionDescFlag = true
	return builder
}

// 题目英文描述
//
// 示例值：Test Text
func (builder *QuestionBuilder) QuestionEnDesc(questionEnDesc string) *QuestionBuilder {
	builder.questionEnDesc = questionEnDesc
	builder.questionEnDescFlag = true
	return builder
}

// 题目类型
//
// 示例值：4
func (builder *QuestionBuilder) QuestionType(questionType int) *QuestionBuilder {
	builder.questionType = questionType
	builder.questionTypeFlag = true
	return builder
}

// 是否必填
//
// 示例值：true
func (builder *QuestionBuilder) IsRequired(isRequired bool) *QuestionBuilder {
	builder.isRequired = isRequired
	builder.isRequiredFlag = true
	return builder
}

// 选项题回答列表（单选题及多选题）
//
// 示例值：
func (builder *QuestionBuilder) SelectOptionResultList(selectOptionResultList []*SelectOptionResult) *QuestionBuilder {
	builder.selectOptionResultList = selectOptionResultList
	builder.selectOptionResultListFlag = true
	return builder
}

// 评分题回答
//
// 示例值：
func (builder *QuestionBuilder) FiveStartScoringResult(fiveStartScoringResult *FiveStartScoringResult) *QuestionBuilder {
	builder.fiveStartScoringResult = fiveStartScoringResult
	builder.fiveStartScoringResultFlag = true
	return builder
}

// 描述题回答
//
// 示例值：测试描述内容
func (builder *QuestionBuilder) DescriptionResult(descriptionResult string) *QuestionBuilder {
	builder.descriptionResult = descriptionResult
	builder.descriptionResultFlag = true
	return builder
}

func (builder *QuestionBuilder) Build() *Question {
	req := &Question{}
	if builder.questionIdFlag {
		req.QuestionId = &builder.questionId

	}
	if builder.questionNameFlag {
		req.QuestionName = &builder.questionName

	}
	if builder.questionEnNameFlag {
		req.QuestionEnName = &builder.questionEnName

	}
	if builder.questionDescFlag {
		req.QuestionDesc = &builder.questionDesc

	}
	if builder.questionEnDescFlag {
		req.QuestionEnDesc = &builder.questionEnDesc

	}
	if builder.questionTypeFlag {
		req.QuestionType = &builder.questionType

	}
	if builder.isRequiredFlag {
		req.IsRequired = &builder.isRequired

	}
	if builder.selectOptionResultListFlag {
		req.SelectOptionResultList = builder.selectOptionResultList
	}
	if builder.fiveStartScoringResultFlag {
		req.FiveStartScoringResult = builder.fiveStartScoringResult
	}
	if builder.descriptionResultFlag {
		req.DescriptionResult = &builder.descriptionResult

	}
	return req
}

type Questionnaire struct {
	QuestionnaireId *string     `json:"questionnaire_id,omitempty"` // 问卷 ID
	ApplicationId   *string     `json:"application_id,omitempty"`   // 投递 ID；当「面试满意度问卷发送时间」选项选择「面试流程结束后」，将返回 投递 ID
	InterviewId     *string     `json:"interview_id,omitempty"`     // 面试 ID；当「面试满意度问卷发送时间」选项选择「第一次面试后」、「每次面试后」将返回 面试 ID
	Version         *int        `json:"version,omitempty"`          // 问卷版本
	Questions       []*Question `json:"questions,omitempty"`        // 题目列表
	HasAnswers      *bool       `json:"has_answers,omitempty"`      // 是否完成作答
	UpdateTime      *string     `json:"update_time,omitempty"`      // 更新时间
}

type QuestionnaireBuilder struct {
	questionnaireId     string // 问卷 ID
	questionnaireIdFlag bool
	applicationId       string // 投递 ID；当「面试满意度问卷发送时间」选项选择「面试流程结束后」，将返回 投递 ID
	applicationIdFlag   bool
	interviewId         string // 面试 ID；当「面试满意度问卷发送时间」选项选择「第一次面试后」、「每次面试后」将返回 面试 ID
	interviewIdFlag     bool
	version             int // 问卷版本
	versionFlag         bool
	questions           []*Question // 题目列表
	questionsFlag       bool
	hasAnswers          bool // 是否完成作答
	hasAnswersFlag      bool
	updateTime          string // 更新时间
	updateTimeFlag      bool
}

func NewQuestionnaireBuilder() *QuestionnaireBuilder {
	builder := &QuestionnaireBuilder{}
	return builder
}

// 问卷 ID
//
// 示例值：7037986982531778860
func (builder *QuestionnaireBuilder) QuestionnaireId(questionnaireId string) *QuestionnaireBuilder {
	builder.questionnaireId = questionnaireId
	builder.questionnaireIdFlag = true
	return builder
}

// 投递 ID；当「面试满意度问卷发送时间」选项选择「面试流程结束后」，将返回 投递 ID
//
// 示例值：6985833807195212076
func (builder *QuestionnaireBuilder) ApplicationId(applicationId string) *QuestionnaireBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 面试 ID；当「面试满意度问卷发送时间」选项选择「第一次面试后」、「每次面试后」将返回 面试 ID
//
// 示例值：7038435261598763308
func (builder *QuestionnaireBuilder) InterviewId(interviewId string) *QuestionnaireBuilder {
	builder.interviewId = interviewId
	builder.interviewIdFlag = true
	return builder
}

// 问卷版本
//
// 示例值：59
func (builder *QuestionnaireBuilder) Version(version int) *QuestionnaireBuilder {
	builder.version = version
	builder.versionFlag = true
	return builder
}

// 题目列表
//
// 示例值：
func (builder *QuestionnaireBuilder) Questions(questions []*Question) *QuestionnaireBuilder {
	builder.questions = questions
	builder.questionsFlag = true
	return builder
}

// 是否完成作答
//
// 示例值：true
func (builder *QuestionnaireBuilder) HasAnswers(hasAnswers bool) *QuestionnaireBuilder {
	builder.hasAnswers = hasAnswers
	builder.hasAnswersFlag = true
	return builder
}

// 更新时间
//
// 示例值：1644412504000
func (builder *QuestionnaireBuilder) UpdateTime(updateTime string) *QuestionnaireBuilder {
	builder.updateTime = updateTime
	builder.updateTimeFlag = true
	return builder
}

func (builder *QuestionnaireBuilder) Build() *Questionnaire {
	req := &Questionnaire{}
	if builder.questionnaireIdFlag {
		req.QuestionnaireId = &builder.questionnaireId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.interviewIdFlag {
		req.InterviewId = &builder.interviewId

	}
	if builder.versionFlag {
		req.Version = &builder.version

	}
	if builder.questionsFlag {
		req.Questions = builder.questions
	}
	if builder.hasAnswersFlag {
		req.HasAnswers = &builder.hasAnswers

	}
	if builder.updateTimeFlag {
		req.UpdateTime = &builder.updateTime

	}
	return req
}

type RecruitmentType struct {
	Id     *string `json:"id,omitempty"`      // ID
	Name   *string `json:"name,omitempty"`    // 名字
	EnName *string `json:"en_name,omitempty"` // 英文名
}

type RecruitmentTypeBuilder struct {
	id         string // ID
	idFlag     bool
	name       string // 名字
	nameFlag   bool
	enName     string // 英文名
	enNameFlag bool
}

func NewRecruitmentTypeBuilder() *RecruitmentTypeBuilder {
	builder := &RecruitmentTypeBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *RecruitmentTypeBuilder) Id(id string) *RecruitmentTypeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *RecruitmentTypeBuilder) Name(name string) *RecruitmentTypeBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *RecruitmentTypeBuilder) EnName(enName string) *RecruitmentTypeBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *RecruitmentTypeBuilder) Build() *RecruitmentType {
	req := &RecruitmentType{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type Referral struct {
	Id             *string       `json:"id,omitempty"`               // 内推的 ID
	ApplicationId  *string       `json:"application_id,omitempty"`   // 投递 ID
	CreateTime     *int          `json:"create_time,omitempty"`      // 创建时间（ms）
	ReferralUserId *string       `json:"referral_user_id,omitempty"` // 内推人的 ID
	ReferralUser   *IdNameObject `json:"referral_user,omitempty"`    // 内推人信息
}

type ReferralBuilder struct {
	id                 string // 内推的 ID
	idFlag             bool
	applicationId      string // 投递 ID
	applicationIdFlag  bool
	createTime         int // 创建时间（ms）
	createTimeFlag     bool
	referralUserId     string // 内推人的 ID
	referralUserIdFlag bool
	referralUser       *IdNameObject // 内推人信息
	referralUserFlag   bool
}

func NewReferralBuilder() *ReferralBuilder {
	builder := &ReferralBuilder{}
	return builder
}

// 内推的 ID
//
// 示例值：6643786345878
func (builder *ReferralBuilder) Id(id string) *ReferralBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 投递 ID
//
// 示例值：643452344576878
func (builder *ReferralBuilder) ApplicationId(applicationId string) *ReferralBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 创建时间（ms）
//
// 示例值：1618899376474
func (builder *ReferralBuilder) CreateTime(createTime int) *ReferralBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 内推人的 ID
//
// 示例值：ou_xxxx
func (builder *ReferralBuilder) ReferralUserId(referralUserId string) *ReferralBuilder {
	builder.referralUserId = referralUserId
	builder.referralUserIdFlag = true
	return builder
}

// 内推人信息
//
// 示例值：
func (builder *ReferralBuilder) ReferralUser(referralUser *IdNameObject) *ReferralBuilder {
	builder.referralUser = referralUser
	builder.referralUserFlag = true
	return builder
}

func (builder *ReferralBuilder) Build() *Referral {
	req := &Referral{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.referralUserIdFlag {
		req.ReferralUserId = &builder.referralUserId

	}
	if builder.referralUserFlag {
		req.ReferralUser = builder.referralUser
	}
	return req
}

type RegistrationInfo struct {
	Id   *string `json:"id,omitempty"`   // 面试登记表ID
	Name *string `json:"name,omitempty"` // 面试登记表名称
}

type RegistrationInfoBuilder struct {
	id       string // 面试登记表ID
	idFlag   bool
	name     string // 面试登记表名称
	nameFlag bool
}

func NewRegistrationInfoBuilder() *RegistrationInfoBuilder {
	builder := &RegistrationInfoBuilder{}
	return builder
}

// 面试登记表ID
//
// 示例值：6930815272790114324
func (builder *RegistrationInfoBuilder) Id(id string) *RegistrationInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 面试登记表名称
//
// 示例值：默认登记表
func (builder *RegistrationInfoBuilder) Name(name string) *RegistrationInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *RegistrationInfoBuilder) Build() *RegistrationInfo {
	req := &RegistrationInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

type ResumeSource struct {
	Id               *string `json:"id,omitempty"`                 // 来源 ID
	ZhName           *string `json:"zh_name,omitempty"`            // 中文名
	EnName           *string `json:"en_name,omitempty"`            // 英文名
	ActiveStatus     *int    `json:"active_status,omitempty"`      // 启用状态
	ResumeSourceType *int    `json:"resume_source_type,omitempty"` // 来源类型
}

type ResumeSourceBuilder struct {
	id                   string // 来源 ID
	idFlag               bool
	zhName               string // 中文名
	zhNameFlag           bool
	enName               string // 英文名
	enNameFlag           bool
	activeStatus         int // 启用状态
	activeStatusFlag     bool
	resumeSourceType     int // 来源类型
	resumeSourceTypeFlag bool
}

func NewResumeSourceBuilder() *ResumeSourceBuilder {
	builder := &ResumeSourceBuilder{}
	return builder
}

// 来源 ID
//
// 示例值：1111
func (builder *ResumeSourceBuilder) Id(id string) *ResumeSourceBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 中文名
//
// 示例值：内推
func (builder *ResumeSourceBuilder) ZhName(zhName string) *ResumeSourceBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名
//
// 示例值：referral
func (builder *ResumeSourceBuilder) EnName(enName string) *ResumeSourceBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

// 启用状态
//
// 示例值：1
func (builder *ResumeSourceBuilder) ActiveStatus(activeStatus int) *ResumeSourceBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 来源类型
//
// 示例值：1
func (builder *ResumeSourceBuilder) ResumeSourceType(resumeSourceType int) *ResumeSourceBuilder {
	builder.resumeSourceType = resumeSourceType
	builder.resumeSourceTypeFlag = true
	return builder
}

func (builder *ResumeSourceBuilder) Build() *ResumeSource {
	req := &ResumeSource{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.resumeSourceTypeFlag {
		req.ResumeSourceType = &builder.resumeSourceType

	}
	return req
}

type Role struct {
	Id          *string `json:"id,omitempty"`          // 角色 ID
	Name        *I18n   `json:"name,omitempty"`        // 角色名称
	Description *I18n   `json:"description,omitempty"` // 角色描述
}

type RoleBuilder struct {
	id              string // 角色 ID
	idFlag          bool
	name            *I18n // 角色名称
	nameFlag        bool
	description     *I18n // 角色描述
	descriptionFlag bool
}

func NewRoleBuilder() *RoleBuilder {
	builder := &RoleBuilder{}
	return builder
}

// 角色 ID
//
// 示例值：101
func (builder *RoleBuilder) Id(id string) *RoleBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 角色名称
//
// 示例值：
func (builder *RoleBuilder) Name(name *I18n) *RoleBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 角色描述
//
// 示例值：
func (builder *RoleBuilder) Description(description *I18n) *RoleBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *RoleBuilder) Build() *Role {
	req := &Role{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.descriptionFlag {
		req.Description = builder.description
	}
	return req
}

type Salary struct {
	OperateTime  *string `json:"operate_time,omitempty"`  // 操作时间
	SalaryStatus *int    `json:"salary_status,omitempty"` // 薪酬审批状态
	OfferId      *string `json:"offer_id,omitempty"`      // Offer ID
	SalayId      *string `json:"salay_id,omitempty"`      // 薪酬 ID
	OperatorId   *string `json:"operator_id,omitempty"`   // 操作人 ID
}

type SalaryBuilder struct {
	operateTime      string // 操作时间
	operateTimeFlag  bool
	salaryStatus     int // 薪酬审批状态
	salaryStatusFlag bool
	offerId          string // Offer ID
	offerIdFlag      bool
	salayId          string // 薪酬 ID
	salayIdFlag      bool
	operatorId       string // 操作人 ID
	operatorIdFlag   bool
}

func NewSalaryBuilder() *SalaryBuilder {
	builder := &SalaryBuilder{}
	return builder
}

// 操作时间
//
// 示例值：1638260625671
func (builder *SalaryBuilder) OperateTime(operateTime string) *SalaryBuilder {
	builder.operateTime = operateTime
	builder.operateTimeFlag = true
	return builder
}

// 薪酬审批状态
//
// 示例值：2
func (builder *SalaryBuilder) SalaryStatus(salaryStatus int) *SalaryBuilder {
	builder.salaryStatus = salaryStatus
	builder.salaryStatusFlag = true
	return builder
}

// Offer ID
//
// 示例值：7981638260625671
func (builder *SalaryBuilder) OfferId(offerId string) *SalaryBuilder {
	builder.offerId = offerId
	builder.offerIdFlag = true
	return builder
}

// 薪酬 ID
//
// 示例值：salay_id
func (builder *SalaryBuilder) SalayId(salayId string) *SalaryBuilder {
	builder.salayId = salayId
	builder.salayIdFlag = true
	return builder
}

// 操作人 ID
//
// 示例值：ou_xxxxxx
func (builder *SalaryBuilder) OperatorId(operatorId string) *SalaryBuilder {
	builder.operatorId = operatorId
	builder.operatorIdFlag = true
	return builder
}

func (builder *SalaryBuilder) Build() *Salary {
	req := &Salary{}
	if builder.operateTimeFlag {
		req.OperateTime = &builder.operateTime

	}
	if builder.salaryStatusFlag {
		req.SalaryStatus = &builder.salaryStatus

	}
	if builder.offerIdFlag {
		req.OfferId = &builder.offerId

	}
	if builder.salayIdFlag {
		req.SalayId = &builder.salayId

	}
	if builder.operatorIdFlag {
		req.OperatorId = &builder.operatorId

	}
	return req
}

type SelectOptionResult struct {
	OptionId     *string `json:"option_id,omitempty"`      // 选项 ID
	OptionName   *string `json:"option_name,omitempty"`    // 选项中文名称
	OptionEnName *string `json:"option_en_name,omitempty"` // 选项英文名称
	OptionDesc   *string `json:"option_desc,omitempty"`    // 选项中文描述
	OptionEnDesc *string `json:"option_en_desc,omitempty"` // 选项英文描述
	IsSelected   *bool   `json:"is_selected,omitempty"`    // 是否选择
}

type SelectOptionResultBuilder struct {
	optionId         string // 选项 ID
	optionIdFlag     bool
	optionName       string // 选项中文名称
	optionNameFlag   bool
	optionEnName     string // 选项英文名称
	optionEnNameFlag bool
	optionDesc       string // 选项中文描述
	optionDescFlag   bool
	optionEnDesc     string // 选项英文描述
	optionEnDescFlag bool
	isSelected       bool // 是否选择
	isSelectedFlag   bool
}

func NewSelectOptionResultBuilder() *SelectOptionResultBuilder {
	builder := &SelectOptionResultBuilder{}
	return builder
}

// 选项 ID
//
// 示例值：6950930570311993644
func (builder *SelectOptionResultBuilder) OptionId(optionId string) *SelectOptionResultBuilder {
	builder.optionId = optionId
	builder.optionIdFlag = true
	return builder
}

// 选项中文名称
//
// 示例值：选项一
func (builder *SelectOptionResultBuilder) OptionName(optionName string) *SelectOptionResultBuilder {
	builder.optionName = optionName
	builder.optionNameFlag = true
	return builder
}

// 选项英文名称
//
// 示例值：Option 1
func (builder *SelectOptionResultBuilder) OptionEnName(optionEnName string) *SelectOptionResultBuilder {
	builder.optionEnName = optionEnName
	builder.optionEnNameFlag = true
	return builder
}

// 选项中文描述
//
// 示例值：测试选项描述
func (builder *SelectOptionResultBuilder) OptionDesc(optionDesc string) *SelectOptionResultBuilder {
	builder.optionDesc = optionDesc
	builder.optionDescFlag = true
	return builder
}

// 选项英文描述
//
// 示例值：Test Option Desc
func (builder *SelectOptionResultBuilder) OptionEnDesc(optionEnDesc string) *SelectOptionResultBuilder {
	builder.optionEnDesc = optionEnDesc
	builder.optionEnDescFlag = true
	return builder
}

// 是否选择
//
// 示例值：true
func (builder *SelectOptionResultBuilder) IsSelected(isSelected bool) *SelectOptionResultBuilder {
	builder.isSelected = isSelected
	builder.isSelectedFlag = true
	return builder
}

func (builder *SelectOptionResultBuilder) Build() *SelectOptionResult {
	req := &SelectOptionResult{}
	if builder.optionIdFlag {
		req.OptionId = &builder.optionId

	}
	if builder.optionNameFlag {
		req.OptionName = &builder.optionName

	}
	if builder.optionEnNameFlag {
		req.OptionEnName = &builder.optionEnName

	}
	if builder.optionDescFlag {
		req.OptionDesc = &builder.optionDesc

	}
	if builder.optionEnDescFlag {
		req.OptionEnDesc = &builder.optionEnDesc

	}
	if builder.isSelectedFlag {
		req.IsSelected = &builder.isSelected

	}
	return req
}

type Sequence struct {
	Id     *string `json:"id,omitempty"`      // ID
	Name   *string `json:"name,omitempty"`    // 名字
	EnName *string `json:"en_name,omitempty"` // 英文名
}

type SequenceBuilder struct {
	id         string // ID
	idFlag     bool
	name       string // 名字
	nameFlag   bool
	enName     string // 英文名
	enNameFlag bool
}

func NewSequenceBuilder() *SequenceBuilder {
	builder := &SequenceBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *SequenceBuilder) Id(id string) *SequenceBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名字
//
// 示例值：
func (builder *SequenceBuilder) Name(name string) *SequenceBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 英文名
//
// 示例值：
func (builder *SequenceBuilder) EnName(enName string) *SequenceBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *SequenceBuilder) Build() *Sequence {
	req := &Sequence{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type Site struct {
	Id   *string   `json:"id,omitempty"`   // 官网id
	Name *SiteName `json:"name,omitempty"` // 官网名称
}

type SiteBuilder struct {
	id       string // 官网id
	idFlag   bool
	name     *SiteName // 官网名称
	nameFlag bool
}

func NewSiteBuilder() *SiteBuilder {
	builder := &SiteBuilder{}
	return builder
}

// 官网id
//
// 示例值：
func (builder *SiteBuilder) Id(id string) *SiteBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 官网名称
//
// 示例值：
func (builder *SiteBuilder) Name(name *SiteName) *SiteBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *SiteBuilder) Build() *Site {
	req := &Site{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type SiteApplication struct {
	ExternalId *string                `json:"external_id,omitempty"` // 外部id，用于转换内部id
	JobPostId  *string                `json:"job_post_id,omitempty"` // 职位id
	Resume     *SiteApplicationResume `json:"resume,omitempty"`      // 简历信息
	Status     *string                `json:"status,omitempty"`      // 投递状态
}

type SiteApplicationBuilder struct {
	externalId     string // 外部id，用于转换内部id
	externalIdFlag bool
	jobPostId      string // 职位id
	jobPostIdFlag  bool
	resume         *SiteApplicationResume // 简历信息
	resumeFlag     bool
	status         string // 投递状态
	statusFlag     bool
}

func NewSiteApplicationBuilder() *SiteApplicationBuilder {
	builder := &SiteApplicationBuilder{}
	return builder
}

// 外部id，用于转换内部id
//
// 示例值：
func (builder *SiteApplicationBuilder) ExternalId(externalId string) *SiteApplicationBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}

// 职位id
//
// 示例值：
func (builder *SiteApplicationBuilder) JobPostId(jobPostId string) *SiteApplicationBuilder {
	builder.jobPostId = jobPostId
	builder.jobPostIdFlag = true
	return builder
}

// 简历信息
//
// 示例值：
func (builder *SiteApplicationBuilder) Resume(resume *SiteApplicationResume) *SiteApplicationBuilder {
	builder.resume = resume
	builder.resumeFlag = true
	return builder
}

// 投递状态
//
// 示例值：
func (builder *SiteApplicationBuilder) Status(status string) *SiteApplicationBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

func (builder *SiteApplicationBuilder) Build() *SiteApplication {
	req := &SiteApplication{}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.jobPostIdFlag {
		req.JobPostId = &builder.jobPostId

	}
	if builder.resumeFlag {
		req.Resume = builder.resume
	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	return req
}

type SiteJobCity struct {
	CityCode *string   `json:"city_code,omitempty"` // 地址code
	Name     *SiteName `json:"name,omitempty"`      // 地址名称
}

type SiteJobCityBuilder struct {
	cityCode     string // 地址code
	cityCodeFlag bool
	name         *SiteName // 地址名称
	nameFlag     bool
}

func NewSiteJobCityBuilder() *SiteJobCityBuilder {
	builder := &SiteJobCityBuilder{}
	return builder
}

// 地址code
//
// 示例值：
func (builder *SiteJobCityBuilder) CityCode(cityCode string) *SiteJobCityBuilder {
	builder.cityCode = cityCode
	builder.cityCodeFlag = true
	return builder
}

// 地址名称
//
// 示例值：
func (builder *SiteJobCityBuilder) Name(name *SiteName) *SiteJobCityBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *SiteJobCityBuilder) Build() *SiteJobCity {
	req := &SiteJobCity{}
	if builder.cityCodeFlag {
		req.CityCode = &builder.cityCode

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type SiteJobPost struct {
	Id              *string                 `json:"id,omitempty"`               // 职位id
	Title           *string                 `json:"title,omitempty"`            // 职位名称
	Description     *string                 `json:"description,omitempty"`      // 职位描述
	Requirement     *string                 `json:"requirement,omitempty"`      // 职位要求
	JobTypeInfo     *SiteJobType            `json:"job_type_info,omitempty"`    // 职位职能
	CityInfo        *SiteJobCity            `json:"city_info,omitempty"`        // 职位城市
	RecruitmentType *SiteJobRecruitmentType `json:"recruitment_type,omitempty"` // 雇佣类型
	PublishTime     *int                    `json:"publish_time,omitempty"`     // 职位发布时间
}

type SiteJobPostBuilder struct {
	id                  string // 职位id
	idFlag              bool
	title               string // 职位名称
	titleFlag           bool
	description         string // 职位描述
	descriptionFlag     bool
	requirement         string // 职位要求
	requirementFlag     bool
	jobTypeInfo         *SiteJobType // 职位职能
	jobTypeInfoFlag     bool
	cityInfo            *SiteJobCity // 职位城市
	cityInfoFlag        bool
	recruitmentType     *SiteJobRecruitmentType // 雇佣类型
	recruitmentTypeFlag bool
	publishTime         int // 职位发布时间
	publishTimeFlag     bool
}

func NewSiteJobPostBuilder() *SiteJobPostBuilder {
	builder := &SiteJobPostBuilder{}
	return builder
}

// 职位id
//
// 示例值：
func (builder *SiteJobPostBuilder) Id(id string) *SiteJobPostBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职位名称
//
// 示例值：
func (builder *SiteJobPostBuilder) Title(title string) *SiteJobPostBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 职位描述
//
// 示例值：
func (builder *SiteJobPostBuilder) Description(description string) *SiteJobPostBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 职位要求
//
// 示例值：
func (builder *SiteJobPostBuilder) Requirement(requirement string) *SiteJobPostBuilder {
	builder.requirement = requirement
	builder.requirementFlag = true
	return builder
}

// 职位职能
//
// 示例值：
func (builder *SiteJobPostBuilder) JobTypeInfo(jobTypeInfo *SiteJobType) *SiteJobPostBuilder {
	builder.jobTypeInfo = jobTypeInfo
	builder.jobTypeInfoFlag = true
	return builder
}

// 职位城市
//
// 示例值：
func (builder *SiteJobPostBuilder) CityInfo(cityInfo *SiteJobCity) *SiteJobPostBuilder {
	builder.cityInfo = cityInfo
	builder.cityInfoFlag = true
	return builder
}

// 雇佣类型
//
// 示例值：
func (builder *SiteJobPostBuilder) RecruitmentType(recruitmentType *SiteJobRecruitmentType) *SiteJobPostBuilder {
	builder.recruitmentType = recruitmentType
	builder.recruitmentTypeFlag = true
	return builder
}

// 职位发布时间
//
// 示例值：
func (builder *SiteJobPostBuilder) PublishTime(publishTime int) *SiteJobPostBuilder {
	builder.publishTime = publishTime
	builder.publishTimeFlag = true
	return builder
}

func (builder *SiteJobPostBuilder) Build() *SiteJobPost {
	req := &SiteJobPost{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.requirementFlag {
		req.Requirement = &builder.requirement

	}
	if builder.jobTypeInfoFlag {
		req.JobTypeInfo = builder.jobTypeInfo
	}
	if builder.cityInfoFlag {
		req.CityInfo = builder.cityInfo
	}
	if builder.recruitmentTypeFlag {
		req.RecruitmentType = builder.recruitmentType
	}
	if builder.publishTimeFlag {
		req.PublishTime = &builder.publishTime

	}
	return req
}

type SiteJobType struct {
	Id   *string   `json:"id,omitempty"`   // 职能id
	Name *SiteName `json:"name,omitempty"` // 职位职能名称
}

type SiteJobTypeBuilder struct {
	id       string // 职能id
	idFlag   bool
	name     *SiteName // 职位职能名称
	nameFlag bool
}

func NewSiteJobTypeBuilder() *SiteJobTypeBuilder {
	builder := &SiteJobTypeBuilder{}
	return builder
}

// 职能id
//
// 示例值：
func (builder *SiteJobTypeBuilder) Id(id string) *SiteJobTypeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职位职能名称
//
// 示例值：
func (builder *SiteJobTypeBuilder) Name(name *SiteName) *SiteJobTypeBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *SiteJobTypeBuilder) Build() *SiteJobType {
	req := &SiteJobType{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type SiteApplicationResume struct {
	Name              *string                    `json:"name,omitempty"`                // 姓名
	MobileNumber      *string                    `json:"mobile_number,omitempty"`       // 手机号
	MoblieCode        *string                    `json:"moblie_code,omitempty"`         // 手机区号
	Email             *string                    `json:"email,omitempty"`               // 邮箱
	SiteAttachmentId  *string                    `json:"site_attachment_id,omitempty"`  // 简历附件id
	SelfEvaluation    *string                    `json:"self_evaluation,omitempty"`     // 自我评价
	Age               *string                    `json:"age,omitempty"`                 // 年龄
	WorkingYear       *string                    `json:"working_year,omitempty"`        // 工作年限
	EducationList     []*SiteResumeEducation     `json:"education_list,omitempty"`      // 教育经历列表
	CareerList        []*SiteResumeCareer        `json:"career_list,omitempty"`         // 工作经历列表
	ProjectList       []*SiteResumeProject       `json:"project_list,omitempty"`        // 项目经历列表
	InternshipList    []*SiteResumeInternship    `json:"internship_list,omitempty"`     // 实习经历列表
	WorkList          []*SiteResumeWork          `json:"work_list,omitempty"`           // 作品集列表
	AwardList         []*SiteResumeAward         `json:"award_list,omitempty"`          // 获奖经历列表
	LanguageSkillList []*SiteResumeLanguageSkill `json:"language_skill_list,omitempty"` // 语言技能列表
	SnsList           []*SiteResumeSns           `json:"sns_list,omitempty"`            // 社交账号列表
	Identification    *SiteResumeIdentification  `json:"identification,omitempty"`      // 身份信息
	CompetitionList   []*SiteResumeCompetition   `json:"competition_list,omitempty"`    // 竞赛经历列表
	CertificateList   []*SiteResumeCertificate   `json:"certificate_list,omitempty"`    // 证书列表
}

type SiteApplicationResumeBuilder struct {
	name                  string // 姓名
	nameFlag              bool
	mobileNumber          string // 手机号
	mobileNumberFlag      bool
	moblieCode            string // 手机区号
	moblieCodeFlag        bool
	email                 string // 邮箱
	emailFlag             bool
	siteAttachmentId      string // 简历附件id
	siteAttachmentIdFlag  bool
	selfEvaluation        string // 自我评价
	selfEvaluationFlag    bool
	age                   string // 年龄
	ageFlag               bool
	workingYear           string // 工作年限
	workingYearFlag       bool
	educationList         []*SiteResumeEducation // 教育经历列表
	educationListFlag     bool
	careerList            []*SiteResumeCareer // 工作经历列表
	careerListFlag        bool
	projectList           []*SiteResumeProject // 项目经历列表
	projectListFlag       bool
	internshipList        []*SiteResumeInternship // 实习经历列表
	internshipListFlag    bool
	workList              []*SiteResumeWork // 作品集列表
	workListFlag          bool
	awardList             []*SiteResumeAward // 获奖经历列表
	awardListFlag         bool
	languageSkillList     []*SiteResumeLanguageSkill // 语言技能列表
	languageSkillListFlag bool
	snsList               []*SiteResumeSns // 社交账号列表
	snsListFlag           bool
	identification        *SiteResumeIdentification // 身份信息
	identificationFlag    bool
	competitionList       []*SiteResumeCompetition // 竞赛经历列表
	competitionListFlag   bool
	certificateList       []*SiteResumeCertificate // 证书列表
	certificateListFlag   bool
}

func NewSiteApplicationResumeBuilder() *SiteApplicationResumeBuilder {
	builder := &SiteApplicationResumeBuilder{}
	return builder
}

// 姓名
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) Name(name string) *SiteApplicationResumeBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 手机号
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) MobileNumber(mobileNumber string) *SiteApplicationResumeBuilder {
	builder.mobileNumber = mobileNumber
	builder.mobileNumberFlag = true
	return builder
}

// 手机区号
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) MoblieCode(moblieCode string) *SiteApplicationResumeBuilder {
	builder.moblieCode = moblieCode
	builder.moblieCodeFlag = true
	return builder
}

// 邮箱
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) Email(email string) *SiteApplicationResumeBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 简历附件id
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) SiteAttachmentId(siteAttachmentId string) *SiteApplicationResumeBuilder {
	builder.siteAttachmentId = siteAttachmentId
	builder.siteAttachmentIdFlag = true
	return builder
}

// 自我评价
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) SelfEvaluation(selfEvaluation string) *SiteApplicationResumeBuilder {
	builder.selfEvaluation = selfEvaluation
	builder.selfEvaluationFlag = true
	return builder
}

// 年龄
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) Age(age string) *SiteApplicationResumeBuilder {
	builder.age = age
	builder.ageFlag = true
	return builder
}

// 工作年限
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) WorkingYear(workingYear string) *SiteApplicationResumeBuilder {
	builder.workingYear = workingYear
	builder.workingYearFlag = true
	return builder
}

// 教育经历列表
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) EducationList(educationList []*SiteResumeEducation) *SiteApplicationResumeBuilder {
	builder.educationList = educationList
	builder.educationListFlag = true
	return builder
}

// 工作经历列表
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) CareerList(careerList []*SiteResumeCareer) *SiteApplicationResumeBuilder {
	builder.careerList = careerList
	builder.careerListFlag = true
	return builder
}

// 项目经历列表
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) ProjectList(projectList []*SiteResumeProject) *SiteApplicationResumeBuilder {
	builder.projectList = projectList
	builder.projectListFlag = true
	return builder
}

// 实习经历列表
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) InternshipList(internshipList []*SiteResumeInternship) *SiteApplicationResumeBuilder {
	builder.internshipList = internshipList
	builder.internshipListFlag = true
	return builder
}

// 作品集列表
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) WorkList(workList []*SiteResumeWork) *SiteApplicationResumeBuilder {
	builder.workList = workList
	builder.workListFlag = true
	return builder
}

// 获奖经历列表
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) AwardList(awardList []*SiteResumeAward) *SiteApplicationResumeBuilder {
	builder.awardList = awardList
	builder.awardListFlag = true
	return builder
}

// 语言技能列表
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) LanguageSkillList(languageSkillList []*SiteResumeLanguageSkill) *SiteApplicationResumeBuilder {
	builder.languageSkillList = languageSkillList
	builder.languageSkillListFlag = true
	return builder
}

// 社交账号列表
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) SnsList(snsList []*SiteResumeSns) *SiteApplicationResumeBuilder {
	builder.snsList = snsList
	builder.snsListFlag = true
	return builder
}

// 身份信息
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) Identification(identification *SiteResumeIdentification) *SiteApplicationResumeBuilder {
	builder.identification = identification
	builder.identificationFlag = true
	return builder
}

// 竞赛经历列表
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) CompetitionList(competitionList []*SiteResumeCompetition) *SiteApplicationResumeBuilder {
	builder.competitionList = competitionList
	builder.competitionListFlag = true
	return builder
}

// 证书列表
//
// 示例值：
func (builder *SiteApplicationResumeBuilder) CertificateList(certificateList []*SiteResumeCertificate) *SiteApplicationResumeBuilder {
	builder.certificateList = certificateList
	builder.certificateListFlag = true
	return builder
}

func (builder *SiteApplicationResumeBuilder) Build() *SiteApplicationResume {
	req := &SiteApplicationResume{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileNumberFlag {
		req.MobileNumber = &builder.mobileNumber

	}
	if builder.moblieCodeFlag {
		req.MoblieCode = &builder.moblieCode

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.siteAttachmentIdFlag {
		req.SiteAttachmentId = &builder.siteAttachmentId

	}
	if builder.selfEvaluationFlag {
		req.SelfEvaluation = &builder.selfEvaluation

	}
	if builder.ageFlag {
		req.Age = &builder.age

	}
	if builder.workingYearFlag {
		req.WorkingYear = &builder.workingYear

	}
	if builder.educationListFlag {
		req.EducationList = builder.educationList
	}
	if builder.careerListFlag {
		req.CareerList = builder.careerList
	}
	if builder.projectListFlag {
		req.ProjectList = builder.projectList
	}
	if builder.internshipListFlag {
		req.InternshipList = builder.internshipList
	}
	if builder.workListFlag {
		req.WorkList = builder.workList
	}
	if builder.awardListFlag {
		req.AwardList = builder.awardList
	}
	if builder.languageSkillListFlag {
		req.LanguageSkillList = builder.languageSkillList
	}
	if builder.snsListFlag {
		req.SnsList = builder.snsList
	}
	if builder.identificationFlag {
		req.Identification = builder.identification
	}
	if builder.competitionListFlag {
		req.CompetitionList = builder.competitionList
	}
	if builder.certificateListFlag {
		req.CertificateList = builder.certificateList
	}
	return req
}

type SiteJobPostSearchInfo struct {
	JobPostInfo []*SiteJobPost `json:"job_post_info,omitempty"` // 职位列表
	Count       *int           `json:"count,omitempty"`         // 职位总数
}

type SiteJobPostSearchInfoBuilder struct {
	jobPostInfo     []*SiteJobPost // 职位列表
	jobPostInfoFlag bool
	count           int // 职位总数
	countFlag       bool
}

func NewSiteJobPostSearchInfoBuilder() *SiteJobPostSearchInfoBuilder {
	builder := &SiteJobPostSearchInfoBuilder{}
	return builder
}

// 职位列表
//
// 示例值：
func (builder *SiteJobPostSearchInfoBuilder) JobPostInfo(jobPostInfo []*SiteJobPost) *SiteJobPostSearchInfoBuilder {
	builder.jobPostInfo = jobPostInfo
	builder.jobPostInfoFlag = true
	return builder
}

// 职位总数
//
// 示例值：
func (builder *SiteJobPostSearchInfoBuilder) Count(count int) *SiteJobPostSearchInfoBuilder {
	builder.count = count
	builder.countFlag = true
	return builder
}

func (builder *SiteJobPostSearchInfoBuilder) Build() *SiteJobPostSearchInfo {
	req := &SiteJobPostSearchInfo{}
	if builder.jobPostInfoFlag {
		req.JobPostInfo = builder.jobPostInfo
	}
	if builder.countFlag {
		req.Count = &builder.count

	}
	return req
}

type SiteJobPostSearchRequest struct {
	Keyword       *string  `json:"keyword,omitempty"`          // 搜索关键字
	Offset        *int     `json:"offset,omitempty"`           // 分页用的偏移量，默认0
	Limit         *int     `json:"limit,omitempty"`            // 分页用的分页条数，最大100
	JobTypeIdList []string `json:"job_type_id_list,omitempty"` // 职能列表返回的id
	CityCodeList  []string `json:"city_code_list,omitempty"`   // 地址列表返回的code
	SiteId        *string  `json:"site_id,omitempty"`          // 官网id，不传则查询默认官网
}

type SiteJobPostSearchRequestBuilder struct {
	keyword           string // 搜索关键字
	keywordFlag       bool
	offset            int // 分页用的偏移量，默认0
	offsetFlag        bool
	limit             int // 分页用的分页条数，最大100
	limitFlag         bool
	jobTypeIdList     []string // 职能列表返回的id
	jobTypeIdListFlag bool
	cityCodeList      []string // 地址列表返回的code
	cityCodeListFlag  bool
	siteId            string // 官网id，不传则查询默认官网
	siteIdFlag        bool
}

func NewSiteJobPostSearchRequestBuilder() *SiteJobPostSearchRequestBuilder {
	builder := &SiteJobPostSearchRequestBuilder{}
	return builder
}

// 搜索关键字
//
// 示例值：
func (builder *SiteJobPostSearchRequestBuilder) Keyword(keyword string) *SiteJobPostSearchRequestBuilder {
	builder.keyword = keyword
	builder.keywordFlag = true
	return builder
}

// 分页用的偏移量，默认0
//
// 示例值：
func (builder *SiteJobPostSearchRequestBuilder) Offset(offset int) *SiteJobPostSearchRequestBuilder {
	builder.offset = offset
	builder.offsetFlag = true
	return builder
}

// 分页用的分页条数，最大100
//
// 示例值：
func (builder *SiteJobPostSearchRequestBuilder) Limit(limit int) *SiteJobPostSearchRequestBuilder {
	builder.limit = limit
	builder.limitFlag = true
	return builder
}

// 职能列表返回的id
//
// 示例值：
func (builder *SiteJobPostSearchRequestBuilder) JobTypeIdList(jobTypeIdList []string) *SiteJobPostSearchRequestBuilder {
	builder.jobTypeIdList = jobTypeIdList
	builder.jobTypeIdListFlag = true
	return builder
}

// 地址列表返回的code
//
// 示例值：
func (builder *SiteJobPostSearchRequestBuilder) CityCodeList(cityCodeList []string) *SiteJobPostSearchRequestBuilder {
	builder.cityCodeList = cityCodeList
	builder.cityCodeListFlag = true
	return builder
}

// 官网id，不传则查询默认官网
//
// 示例值：
func (builder *SiteJobPostSearchRequestBuilder) SiteId(siteId string) *SiteJobPostSearchRequestBuilder {
	builder.siteId = siteId
	builder.siteIdFlag = true
	return builder
}

func (builder *SiteJobPostSearchRequestBuilder) Build() *SiteJobPostSearchRequest {
	req := &SiteJobPostSearchRequest{}
	if builder.keywordFlag {
		req.Keyword = &builder.keyword

	}
	if builder.offsetFlag {
		req.Offset = &builder.offset

	}
	if builder.limitFlag {
		req.Limit = &builder.limit

	}
	if builder.jobTypeIdListFlag {
		req.JobTypeIdList = builder.jobTypeIdList
	}
	if builder.cityCodeListFlag {
		req.CityCodeList = builder.cityCodeList
	}
	if builder.siteIdFlag {
		req.SiteId = &builder.siteId

	}
	return req
}

type SiteJobRecruitmentType struct {
	Id   *string   `json:"id,omitempty"`   // 雇佣类型id
	Name *SiteName `json:"name,omitempty"` // 雇佣类型名称
}

type SiteJobRecruitmentTypeBuilder struct {
	id       string // 雇佣类型id
	idFlag   bool
	name     *SiteName // 雇佣类型名称
	nameFlag bool
}

func NewSiteJobRecruitmentTypeBuilder() *SiteJobRecruitmentTypeBuilder {
	builder := &SiteJobRecruitmentTypeBuilder{}
	return builder
}

// 雇佣类型id
//
// 示例值：
func (builder *SiteJobRecruitmentTypeBuilder) Id(id string) *SiteJobRecruitmentTypeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 雇佣类型名称
//
// 示例值：
func (builder *SiteJobRecruitmentTypeBuilder) Name(name *SiteName) *SiteJobRecruitmentTypeBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *SiteJobRecruitmentTypeBuilder) Build() *SiteJobRecruitmentType {
	req := &SiteJobRecruitmentType{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type SiteName struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 中文名称
	EnUs *string `json:"en_us,omitempty"` // 英文名称
}

type SiteNameBuilder struct {
	zhCn     string // 中文名称
	zhCnFlag bool
	enUs     string // 英文名称
	enUsFlag bool
}

func NewSiteNameBuilder() *SiteNameBuilder {
	builder := &SiteNameBuilder{}
	return builder
}

// 中文名称
//
// 示例值：
func (builder *SiteNameBuilder) ZhCn(zhCn string) *SiteNameBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}

// 英文名称
//
// 示例值：
func (builder *SiteNameBuilder) EnUs(enUs string) *SiteNameBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

func (builder *SiteNameBuilder) Build() *SiteName {
	req := &SiteName{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	return req
}

type SiteResumeAward struct {
	Title       *string `json:"title,omitempty"`       // 标题
	AwardTime   *string `json:"award_time,omitempty"`  // 获奖时间
	Description *string `json:"description,omitempty"` // 描述
}

type SiteResumeAwardBuilder struct {
	title           string // 标题
	titleFlag       bool
	awardTime       string // 获奖时间
	awardTimeFlag   bool
	description     string // 描述
	descriptionFlag bool
}

func NewSiteResumeAwardBuilder() *SiteResumeAwardBuilder {
	builder := &SiteResumeAwardBuilder{}
	return builder
}

// 标题
//
// 示例值：
func (builder *SiteResumeAwardBuilder) Title(title string) *SiteResumeAwardBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 获奖时间
//
// 示例值：
func (builder *SiteResumeAwardBuilder) AwardTime(awardTime string) *SiteResumeAwardBuilder {
	builder.awardTime = awardTime
	builder.awardTimeFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *SiteResumeAwardBuilder) Description(description string) *SiteResumeAwardBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *SiteResumeAwardBuilder) Build() *SiteResumeAward {
	req := &SiteResumeAward{}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.awardTimeFlag {
		req.AwardTime = &builder.awardTime

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

type SiteResumeCareer struct {
	Company     *string `json:"company,omitempty"`     // 公司名
	Title       *string `json:"title,omitempty"`       // 职位名
	CareerType  *string `json:"career_type,omitempty"` // 工作类型
	Description *string `json:"description,omitempty"` // 描述
	StartTime   *string `json:"start_time,omitempty"`  // 开始时间
	EndTime     *string `json:"end_time,omitempty"`    // 结束时间
}

type SiteResumeCareerBuilder struct {
	company         string // 公司名
	companyFlag     bool
	title           string // 职位名
	titleFlag       bool
	careerType      string // 工作类型
	careerTypeFlag  bool
	description     string // 描述
	descriptionFlag bool
	startTime       string // 开始时间
	startTimeFlag   bool
	endTime         string // 结束时间
	endTimeFlag     bool
}

func NewSiteResumeCareerBuilder() *SiteResumeCareerBuilder {
	builder := &SiteResumeCareerBuilder{}
	return builder
}

// 公司名
//
// 示例值：
func (builder *SiteResumeCareerBuilder) Company(company string) *SiteResumeCareerBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}

// 职位名
//
// 示例值：
func (builder *SiteResumeCareerBuilder) Title(title string) *SiteResumeCareerBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 工作类型
//
// 示例值：
func (builder *SiteResumeCareerBuilder) CareerType(careerType string) *SiteResumeCareerBuilder {
	builder.careerType = careerType
	builder.careerTypeFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *SiteResumeCareerBuilder) Description(description string) *SiteResumeCareerBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 开始时间
//
// 示例值：
func (builder *SiteResumeCareerBuilder) StartTime(startTime string) *SiteResumeCareerBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：
func (builder *SiteResumeCareerBuilder) EndTime(endTime string) *SiteResumeCareerBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *SiteResumeCareerBuilder) Build() *SiteResumeCareer {
	req := &SiteResumeCareer{}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.careerTypeFlag {
		req.CareerType = &builder.careerType

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

type SiteResumeCertificate struct {
	Name        *string `json:"name,omitempty"`        // 名称
	Description *string `json:"description,omitempty"` // 描述
}

type SiteResumeCertificateBuilder struct {
	name            string // 名称
	nameFlag        bool
	description     string // 描述
	descriptionFlag bool
}

func NewSiteResumeCertificateBuilder() *SiteResumeCertificateBuilder {
	builder := &SiteResumeCertificateBuilder{}
	return builder
}

// 名称
//
// 示例值：
func (builder *SiteResumeCertificateBuilder) Name(name string) *SiteResumeCertificateBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *SiteResumeCertificateBuilder) Description(description string) *SiteResumeCertificateBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *SiteResumeCertificateBuilder) Build() *SiteResumeCertificate {
	req := &SiteResumeCertificate{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

type SiteResumeCompetition struct {
	Name        *string `json:"name,omitempty"`        // 名称
	Description *string `json:"description,omitempty"` // 描述
}

type SiteResumeCompetitionBuilder struct {
	name            string // 名称
	nameFlag        bool
	description     string // 描述
	descriptionFlag bool
}

func NewSiteResumeCompetitionBuilder() *SiteResumeCompetitionBuilder {
	builder := &SiteResumeCompetitionBuilder{}
	return builder
}

// 名称
//
// 示例值：
func (builder *SiteResumeCompetitionBuilder) Name(name string) *SiteResumeCompetitionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *SiteResumeCompetitionBuilder) Description(description string) *SiteResumeCompetitionBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

func (builder *SiteResumeCompetitionBuilder) Build() *SiteResumeCompetition {
	req := &SiteResumeCompetition{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	return req
}

type SiteResumeEducation struct {
	Degree          *string `json:"degree,omitempty"`           // 学位
	School          *string `json:"school,omitempty"`           // 学校
	Major           *string `json:"major,omitempty"`            // 专业
	StartTime       *string `json:"start_time,omitempty"`       // 入学时间
	EndTime         *string `json:"end_time,omitempty"`         // 毕业时间
	EducationType   *string `json:"education_type,omitempty"`   // 学位类型
	AcademicRanking *string `json:"academic_ranking,omitempty"` // 排名
}

type SiteResumeEducationBuilder struct {
	degree              string // 学位
	degreeFlag          bool
	school              string // 学校
	schoolFlag          bool
	major               string // 专业
	majorFlag           bool
	startTime           string // 入学时间
	startTimeFlag       bool
	endTime             string // 毕业时间
	endTimeFlag         bool
	educationType       string // 学位类型
	educationTypeFlag   bool
	academicRanking     string // 排名
	academicRankingFlag bool
}

func NewSiteResumeEducationBuilder() *SiteResumeEducationBuilder {
	builder := &SiteResumeEducationBuilder{}
	return builder
}

// 学位
//
// 示例值：
func (builder *SiteResumeEducationBuilder) Degree(degree string) *SiteResumeEducationBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}

// 学校
//
// 示例值：
func (builder *SiteResumeEducationBuilder) School(school string) *SiteResumeEducationBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}

// 专业
//
// 示例值：
func (builder *SiteResumeEducationBuilder) Major(major string) *SiteResumeEducationBuilder {
	builder.major = major
	builder.majorFlag = true
	return builder
}

// 入学时间
//
// 示例值：
func (builder *SiteResumeEducationBuilder) StartTime(startTime string) *SiteResumeEducationBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 毕业时间
//
// 示例值：
func (builder *SiteResumeEducationBuilder) EndTime(endTime string) *SiteResumeEducationBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 学位类型
//
// 示例值：
func (builder *SiteResumeEducationBuilder) EducationType(educationType string) *SiteResumeEducationBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}

// 排名
//
// 示例值：
func (builder *SiteResumeEducationBuilder) AcademicRanking(academicRanking string) *SiteResumeEducationBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}

func (builder *SiteResumeEducationBuilder) Build() *SiteResumeEducation {
	req := &SiteResumeEducation{}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.majorFlag {
		req.Major = &builder.major

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	return req
}

type SiteResumeIdentification struct {
	IdentificationType *string `json:"identification_type,omitempty"` // 身份类型
	Code               *string `json:"code,omitempty"`                // 身份号码
}

type SiteResumeIdentificationBuilder struct {
	identificationType     string // 身份类型
	identificationTypeFlag bool
	code                   string // 身份号码
	codeFlag               bool
}

func NewSiteResumeIdentificationBuilder() *SiteResumeIdentificationBuilder {
	builder := &SiteResumeIdentificationBuilder{}
	return builder
}

// 身份类型
//
// 示例值：
func (builder *SiteResumeIdentificationBuilder) IdentificationType(identificationType string) *SiteResumeIdentificationBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

// 身份号码
//
// 示例值：
func (builder *SiteResumeIdentificationBuilder) Code(code string) *SiteResumeIdentificationBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

func (builder *SiteResumeIdentificationBuilder) Build() *SiteResumeIdentification {
	req := &SiteResumeIdentification{}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	return req
}

type SiteResumeInternship struct {
	Company     *string `json:"company,omitempty"`     // 公司名
	Position    *string `json:"position,omitempty"`    // 职位名
	Description *string `json:"description,omitempty"` // 描述
	StartTime   *string `json:"start_time,omitempty"`  // 开始时间
	EndTime     *string `json:"end_time,omitempty"`    // 结束时间
}

type SiteResumeInternshipBuilder struct {
	company         string // 公司名
	companyFlag     bool
	position        string // 职位名
	positionFlag    bool
	description     string // 描述
	descriptionFlag bool
	startTime       string // 开始时间
	startTimeFlag   bool
	endTime         string // 结束时间
	endTimeFlag     bool
}

func NewSiteResumeInternshipBuilder() *SiteResumeInternshipBuilder {
	builder := &SiteResumeInternshipBuilder{}
	return builder
}

// 公司名
//
// 示例值：
func (builder *SiteResumeInternshipBuilder) Company(company string) *SiteResumeInternshipBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}

// 职位名
//
// 示例值：
func (builder *SiteResumeInternshipBuilder) Position(position string) *SiteResumeInternshipBuilder {
	builder.position = position
	builder.positionFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *SiteResumeInternshipBuilder) Description(description string) *SiteResumeInternshipBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 开始时间
//
// 示例值：
func (builder *SiteResumeInternshipBuilder) StartTime(startTime string) *SiteResumeInternshipBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：
func (builder *SiteResumeInternshipBuilder) EndTime(endTime string) *SiteResumeInternshipBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *SiteResumeInternshipBuilder) Build() *SiteResumeInternship {
	req := &SiteResumeInternship{}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.positionFlag {
		req.Position = &builder.position

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

type SiteResumeLanguageSkill struct {
	Language    *string `json:"language,omitempty"`    // 语言名称
	Proficiency *string `json:"proficiency,omitempty"` // 语言等级
}

type SiteResumeLanguageSkillBuilder struct {
	language        string // 语言名称
	languageFlag    bool
	proficiency     string // 语言等级
	proficiencyFlag bool
}

func NewSiteResumeLanguageSkillBuilder() *SiteResumeLanguageSkillBuilder {
	builder := &SiteResumeLanguageSkillBuilder{}
	return builder
}

// 语言名称
//
// 示例值：
func (builder *SiteResumeLanguageSkillBuilder) Language(language string) *SiteResumeLanguageSkillBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}

// 语言等级
//
// 示例值：
func (builder *SiteResumeLanguageSkillBuilder) Proficiency(proficiency string) *SiteResumeLanguageSkillBuilder {
	builder.proficiency = proficiency
	builder.proficiencyFlag = true
	return builder
}

func (builder *SiteResumeLanguageSkillBuilder) Build() *SiteResumeLanguageSkill {
	req := &SiteResumeLanguageSkill{}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	if builder.proficiencyFlag {
		req.Proficiency = &builder.proficiency

	}
	return req
}

type SiteResumeProject struct {
	Name        *string `json:"name,omitempty"`        // 项目名
	Role        *string `json:"role,omitempty"`        // 担任角色
	Description *string `json:"description,omitempty"` // 描述
	StartTime   *string `json:"start_time,omitempty"`  // 开始时间
	EndTime     *string `json:"end_time,omitempty"`    // 结束时间
}

type SiteResumeProjectBuilder struct {
	name            string // 项目名
	nameFlag        bool
	role            string // 担任角色
	roleFlag        bool
	description     string // 描述
	descriptionFlag bool
	startTime       string // 开始时间
	startTimeFlag   bool
	endTime         string // 结束时间
	endTimeFlag     bool
}

func NewSiteResumeProjectBuilder() *SiteResumeProjectBuilder {
	builder := &SiteResumeProjectBuilder{}
	return builder
}

// 项目名
//
// 示例值：
func (builder *SiteResumeProjectBuilder) Name(name string) *SiteResumeProjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 担任角色
//
// 示例值：
func (builder *SiteResumeProjectBuilder) Role(role string) *SiteResumeProjectBuilder {
	builder.role = role
	builder.roleFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *SiteResumeProjectBuilder) Description(description string) *SiteResumeProjectBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 开始时间
//
// 示例值：
func (builder *SiteResumeProjectBuilder) StartTime(startTime string) *SiteResumeProjectBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：
func (builder *SiteResumeProjectBuilder) EndTime(endTime string) *SiteResumeProjectBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *SiteResumeProjectBuilder) Build() *SiteResumeProject {
	req := &SiteResumeProject{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.roleFlag {
		req.Role = &builder.role

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

type SiteResumeSns struct {
	SnsType *string `json:"sns_type,omitempty"` // 社交网站类型
	Link    *string `json:"link,omitempty"`     // 链接
}

type SiteResumeSnsBuilder struct {
	snsType     string // 社交网站类型
	snsTypeFlag bool
	link        string // 链接
	linkFlag    bool
}

func NewSiteResumeSnsBuilder() *SiteResumeSnsBuilder {
	builder := &SiteResumeSnsBuilder{}
	return builder
}

// 社交网站类型
//
// 示例值：
func (builder *SiteResumeSnsBuilder) SnsType(snsType string) *SiteResumeSnsBuilder {
	builder.snsType = snsType
	builder.snsTypeFlag = true
	return builder
}

// 链接
//
// 示例值：
func (builder *SiteResumeSnsBuilder) Link(link string) *SiteResumeSnsBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

func (builder *SiteResumeSnsBuilder) Build() *SiteResumeSns {
	req := &SiteResumeSns{}
	if builder.snsTypeFlag {
		req.SnsType = &builder.snsType

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	return req
}

type SiteResumeWork struct {
	Link             *string `json:"link,omitempty"`               // 作品链接
	Description      *string `json:"description,omitempty"`        // 描述
	SiteAttachmentId *string `json:"site_attachment_id,omitempty"` // 作品附件id
}

type SiteResumeWorkBuilder struct {
	link                 string // 作品链接
	linkFlag             bool
	description          string // 描述
	descriptionFlag      bool
	siteAttachmentId     string // 作品附件id
	siteAttachmentIdFlag bool
}

func NewSiteResumeWorkBuilder() *SiteResumeWorkBuilder {
	builder := &SiteResumeWorkBuilder{}
	return builder
}

// 作品链接
//
// 示例值：
func (builder *SiteResumeWorkBuilder) Link(link string) *SiteResumeWorkBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 描述
//
// 示例值：
func (builder *SiteResumeWorkBuilder) Description(description string) *SiteResumeWorkBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 作品附件id
//
// 示例值：
func (builder *SiteResumeWorkBuilder) SiteAttachmentId(siteAttachmentId string) *SiteResumeWorkBuilder {
	builder.siteAttachmentId = siteAttachmentId
	builder.siteAttachmentIdFlag = true
	return builder
}

func (builder *SiteResumeWorkBuilder) Build() *SiteResumeWork {
	req := &SiteResumeWork{}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.siteAttachmentIdFlag {
		req.SiteAttachmentId = &builder.siteAttachmentId

	}
	return req
}

type SnsInfo struct {
	Link    *string `json:"link,omitempty"`     // SNS链接
	SnsType *int    `json:"sns_type,omitempty"` // SNS类型
}

type SnsInfoBuilder struct {
	link        string // SNS链接
	linkFlag    bool
	snsType     int // SNS类型
	snsTypeFlag bool
}

func NewSnsInfoBuilder() *SnsInfoBuilder {
	builder := &SnsInfoBuilder{}
	return builder
}

// SNS链接
//
// 示例值：
func (builder *SnsInfoBuilder) Link(link string) *SnsInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// SNS类型
//
// 示例值：
func (builder *SnsInfoBuilder) SnsType(snsType int) *SnsInfoBuilder {
	builder.snsType = snsType
	builder.snsTypeFlag = true
	return builder
}

func (builder *SnsInfoBuilder) Build() *SnsInfo {
	req := &SnsInfo{}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.snsTypeFlag {
		req.SnsType = &builder.snsType

	}
	return req
}

type Subject struct {
	Id               *string       `json:"id,omitempty"`                // ID
	Name             *I18n         `json:"name,omitempty"`              // 名称
	CreateTime       *string       `json:"create_time,omitempty"`       // 创建时间
	ActiveStatus     *int          `json:"active_status,omitempty"`     // 状态
	ApplicationLimit *int          `json:"application_limit,omitempty"` // 投递职位数上限
	Creator          *IdNameObject `json:"creator,omitempty"`           // 创建人
}

type SubjectBuilder struct {
	id                   string // ID
	idFlag               bool
	name                 *I18n // 名称
	nameFlag             bool
	createTime           string // 创建时间
	createTimeFlag       bool
	activeStatus         int // 状态
	activeStatusFlag     bool
	applicationLimit     int // 投递职位数上限
	applicationLimitFlag bool
	creator              *IdNameObject // 创建人
	creatorFlag          bool
}

func NewSubjectBuilder() *SubjectBuilder {
	builder := &SubjectBuilder{}
	return builder
}

// ID
//
// 示例值：1213213123123
func (builder *SubjectBuilder) Id(id string) *SubjectBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *SubjectBuilder) Name(name *I18n) *SubjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 创建时间
//
// 示例值：1628512038000
func (builder *SubjectBuilder) CreateTime(createTime string) *SubjectBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 状态
//
// 示例值：1
func (builder *SubjectBuilder) ActiveStatus(activeStatus int) *SubjectBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 投递职位数上限
//
// 示例值：1
func (builder *SubjectBuilder) ApplicationLimit(applicationLimit int) *SubjectBuilder {
	builder.applicationLimit = applicationLimit
	builder.applicationLimitFlag = true
	return builder
}

// 创建人
//
// 示例值：
func (builder *SubjectBuilder) Creator(creator *IdNameObject) *SubjectBuilder {
	builder.creator = creator
	builder.creatorFlag = true
	return builder
}

func (builder *SubjectBuilder) Build() *Subject {
	req := &Subject{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.applicationLimitFlag {
		req.ApplicationLimit = &builder.applicationLimit

	}
	if builder.creatorFlag {
		req.Creator = builder.creator
	}
	return req
}

type Talent struct {
	Id                        *string                              `json:"id,omitempty"`                          // 人才ID
	IsInAgencyPeriod          *bool                                `json:"is_in_agency_period,omitempty"`         // 是否在猎头保护期
	IsOnboarded               *bool                                `json:"is_onboarded,omitempty"`                // 是否已入职
	BasicInfo                 *TalentBasicInfo                     `json:"basic_info,omitempty"`                  // 基础信息
	EducationList             []*TalentEducationInfo               `json:"education_list,omitempty"`              // 教育经历
	CareerList                []*TalentCareerInfo                  `json:"career_list,omitempty"`                 // 工作经历
	ProjectList               []*TalentProjectInfo                 `json:"project_list,omitempty"`                // 项目经历
	WorksList                 []*TalentWorksInfo                   `json:"works_list,omitempty"`                  // 作品
	AwardList                 []*TalentAwardInfo                   `json:"award_list,omitempty"`                  // 获奖
	LanguageList              []*TalentLanguageInfo                `json:"language_list,omitempty"`               // 语言能力
	SnsList                   []*TalentSnsInfo                     `json:"sns_list,omitempty"`                    // 社交账号
	ResumeSourceList          []*TalentResumeSource                `json:"resume_source_list,omitempty"`          // 简历来源
	InterviewRegistrationList []*TalentInterviewRegistrationSimple `json:"interview_registration_list,omitempty"` // 面试登记表
	ResumeAttachmentIdList    []string                             `json:"resume_attachment_id_list,omitempty"`   // 简历附件id列表（按照简历创建时间降序）
	CustomizedDataList        []*TalentCustomizedData              `json:"customized_data_list,omitempty"`        // 自定义模块
	TopDegree                 *int                                 `json:"top_degree,omitempty"`                  // 最高学历
	FirstDegree               *int                                 `json:"first_degree,omitempty"`                // 第一学历
}

type TalentBuilder struct {
	id                            string // 人才ID
	idFlag                        bool
	isInAgencyPeriod              bool // 是否在猎头保护期
	isInAgencyPeriodFlag          bool
	isOnboarded                   bool // 是否已入职
	isOnboardedFlag               bool
	basicInfo                     *TalentBasicInfo // 基础信息
	basicInfoFlag                 bool
	educationList                 []*TalentEducationInfo // 教育经历
	educationListFlag             bool
	careerList                    []*TalentCareerInfo // 工作经历
	careerListFlag                bool
	projectList                   []*TalentProjectInfo // 项目经历
	projectListFlag               bool
	worksList                     []*TalentWorksInfo // 作品
	worksListFlag                 bool
	awardList                     []*TalentAwardInfo // 获奖
	awardListFlag                 bool
	languageList                  []*TalentLanguageInfo // 语言能力
	languageListFlag              bool
	snsList                       []*TalentSnsInfo // 社交账号
	snsListFlag                   bool
	resumeSourceList              []*TalentResumeSource // 简历来源
	resumeSourceListFlag          bool
	interviewRegistrationList     []*TalentInterviewRegistrationSimple // 面试登记表
	interviewRegistrationListFlag bool
	resumeAttachmentIdList        []string // 简历附件id列表（按照简历创建时间降序）
	resumeAttachmentIdListFlag    bool
	customizedDataList            []*TalentCustomizedData // 自定义模块
	customizedDataListFlag        bool
	topDegree                     int // 最高学历
	topDegreeFlag                 bool
	firstDegree                   int // 第一学历
	firstDegreeFlag               bool
}

func NewTalentBuilder() *TalentBuilder {
	builder := &TalentBuilder{}
	return builder
}

// 人才ID
//
// 示例值：6891560630172518670
func (builder *TalentBuilder) Id(id string) *TalentBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 是否在猎头保护期
//
// 示例值：true
func (builder *TalentBuilder) IsInAgencyPeriod(isInAgencyPeriod bool) *TalentBuilder {
	builder.isInAgencyPeriod = isInAgencyPeriod
	builder.isInAgencyPeriodFlag = true
	return builder
}

// 是否已入职
//
// 示例值：true
func (builder *TalentBuilder) IsOnboarded(isOnboarded bool) *TalentBuilder {
	builder.isOnboarded = isOnboarded
	builder.isOnboardedFlag = true
	return builder
}

// 基础信息
//
// 示例值：
func (builder *TalentBuilder) BasicInfo(basicInfo *TalentBasicInfo) *TalentBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}

// 教育经历
//
// 示例值：
func (builder *TalentBuilder) EducationList(educationList []*TalentEducationInfo) *TalentBuilder {
	builder.educationList = educationList
	builder.educationListFlag = true
	return builder
}

// 工作经历
//
// 示例值：
func (builder *TalentBuilder) CareerList(careerList []*TalentCareerInfo) *TalentBuilder {
	builder.careerList = careerList
	builder.careerListFlag = true
	return builder
}

// 项目经历
//
// 示例值：
func (builder *TalentBuilder) ProjectList(projectList []*TalentProjectInfo) *TalentBuilder {
	builder.projectList = projectList
	builder.projectListFlag = true
	return builder
}

// 作品
//
// 示例值：
func (builder *TalentBuilder) WorksList(worksList []*TalentWorksInfo) *TalentBuilder {
	builder.worksList = worksList
	builder.worksListFlag = true
	return builder
}

// 获奖
//
// 示例值：
func (builder *TalentBuilder) AwardList(awardList []*TalentAwardInfo) *TalentBuilder {
	builder.awardList = awardList
	builder.awardListFlag = true
	return builder
}

// 语言能力
//
// 示例值：
func (builder *TalentBuilder) LanguageList(languageList []*TalentLanguageInfo) *TalentBuilder {
	builder.languageList = languageList
	builder.languageListFlag = true
	return builder
}

// 社交账号
//
// 示例值：
func (builder *TalentBuilder) SnsList(snsList []*TalentSnsInfo) *TalentBuilder {
	builder.snsList = snsList
	builder.snsListFlag = true
	return builder
}

// 简历来源
//
// 示例值：
func (builder *TalentBuilder) ResumeSourceList(resumeSourceList []*TalentResumeSource) *TalentBuilder {
	builder.resumeSourceList = resumeSourceList
	builder.resumeSourceListFlag = true
	return builder
}

// 面试登记表
//
// 示例值：
func (builder *TalentBuilder) InterviewRegistrationList(interviewRegistrationList []*TalentInterviewRegistrationSimple) *TalentBuilder {
	builder.interviewRegistrationList = interviewRegistrationList
	builder.interviewRegistrationListFlag = true
	return builder
}

// 简历附件id列表（按照简历创建时间降序）
//
// 示例值：
func (builder *TalentBuilder) ResumeAttachmentIdList(resumeAttachmentIdList []string) *TalentBuilder {
	builder.resumeAttachmentIdList = resumeAttachmentIdList
	builder.resumeAttachmentIdListFlag = true
	return builder
}

// 自定义模块
//
// 示例值：
func (builder *TalentBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedData) *TalentBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

// 最高学历
//
// 示例值：1
func (builder *TalentBuilder) TopDegree(topDegree int) *TalentBuilder {
	builder.topDegree = topDegree
	builder.topDegreeFlag = true
	return builder
}

// 第一学历
//
// 示例值：3
func (builder *TalentBuilder) FirstDegree(firstDegree int) *TalentBuilder {
	builder.firstDegree = firstDegree
	builder.firstDegreeFlag = true
	return builder
}

func (builder *TalentBuilder) Build() *Talent {
	req := &Talent{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.isInAgencyPeriodFlag {
		req.IsInAgencyPeriod = &builder.isInAgencyPeriod

	}
	if builder.isOnboardedFlag {
		req.IsOnboarded = &builder.isOnboarded

	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.educationListFlag {
		req.EducationList = builder.educationList
	}
	if builder.careerListFlag {
		req.CareerList = builder.careerList
	}
	if builder.projectListFlag {
		req.ProjectList = builder.projectList
	}
	if builder.worksListFlag {
		req.WorksList = builder.worksList
	}
	if builder.awardListFlag {
		req.AwardList = builder.awardList
	}
	if builder.languageListFlag {
		req.LanguageList = builder.languageList
	}
	if builder.snsListFlag {
		req.SnsList = builder.snsList
	}
	if builder.resumeSourceListFlag {
		req.ResumeSourceList = builder.resumeSourceList
	}
	if builder.interviewRegistrationListFlag {
		req.InterviewRegistrationList = builder.interviewRegistrationList
	}
	if builder.resumeAttachmentIdListFlag {
		req.ResumeAttachmentIdList = builder.resumeAttachmentIdList
	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.topDegreeFlag {
		req.TopDegree = &builder.topDegree

	}
	if builder.firstDegreeFlag {
		req.FirstDegree = &builder.firstDegree

	}
	return req
}

type TalentInterviewRegistration struct {
}

type TalentAwardInfo struct {
	Id                 *string                      `json:"id,omitempty"`                   // ID
	Title              *string                      `json:"title,omitempty"`                // 获奖名称
	AwardTime          *string                      `json:"award_time,omitempty"`           // 获奖时间
	Desc               *string                      `json:"desc,omitempty"`                 // 描述
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"` // 自定义字段
}

type TalentAwardInfoBuilder struct {
	id                     string // ID
	idFlag                 bool
	title                  string // 获奖名称
	titleFlag              bool
	awardTime              string // 获奖时间
	awardTimeFlag          bool
	desc                   string // 描述
	descFlag               bool
	customizedDataList     []*TalentCustomizedDataChild // 自定义字段
	customizedDataListFlag bool
}

func NewTalentAwardInfoBuilder() *TalentAwardInfoBuilder {
	builder := &TalentAwardInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentAwardInfoBuilder) Id(id string) *TalentAwardInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 获奖名称
//
// 示例值：最佳新人奖
func (builder *TalentAwardInfoBuilder) Title(title string) *TalentAwardInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 获奖时间
//
// 示例值：1991
func (builder *TalentAwardInfoBuilder) AwardTime(awardTime string) *TalentAwardInfoBuilder {
	builder.awardTime = awardTime
	builder.awardTimeFlag = true
	return builder
}

// 描述
//
// 示例值：最优秀的新人奖
func (builder *TalentAwardInfoBuilder) Desc(desc string) *TalentAwardInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentAwardInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentAwardInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentAwardInfoBuilder) Build() *TalentAwardInfo {
	req := &TalentAwardInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.awardTimeFlag {
		req.AwardTime = &builder.awardTime

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

type TalentBasicInfo struct {
	Name                 *string                      `json:"name,omitempty"`                  // 名字
	Mobile               *string                      `json:"mobile,omitempty"`                // 手机
	MobileCode           *string                      `json:"mobile_code,omitempty"`           // 手机国家区号
	MobileCountryCode    *string                      `json:"mobile_country_code,omitempty"`   // 手机国家代码
	Email                *string                      `json:"email,omitempty"`                 // 邮箱
	ExperienceYears      *int                         `json:"experience_years,omitempty"`      // 工作年限
	Age                  *int                         `json:"age,omitempty"`                   // 年龄
	Nationality          *TalentNationality           `json:"nationality,omitempty"`           // 国籍
	Gender               *int                         `json:"gender,omitempty"`                // 性别
	CurrentCity          *TalentCityInfo              `json:"current_city,omitempty"`          // 所在地点
	HometownCity         *TalentCityInfo              `json:"hometown_city,omitempty"`         // 家乡
	PreferredCityList    []*TalentCityInfo            `json:"preferred_city_list,omitempty"`   // 意向地点
	IdentificationType   *int                         `json:"identification_type,omitempty"`   // 证件类型
	IdentificationNumber *string                      `json:"identification_number,omitempty"` // 证件号
	Identification       *TalentIdentificationInfo    `json:"identification,omitempty"`        // 证件信息
	Birthday             *int                         `json:"birthday,omitempty"`              // 生日
	CreatorId            *string                      `json:"creator_id,omitempty"`            // 创建人
	MaritalStatus        *int                         `json:"marital_status,omitempty"`        // 婚姻状况
	CurrentHomeAddress   *string                      `json:"current_home_address,omitempty"`  // 家庭住址
	CustomizedDataList   []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"`  // 自定义字段
	ModifyTime           *string                      `json:"modify_time,omitempty"`           // 修改时间
}

type TalentBasicInfoBuilder struct {
	name                     string // 名字
	nameFlag                 bool
	mobile                   string // 手机
	mobileFlag               bool
	mobileCode               string // 手机国家区号
	mobileCodeFlag           bool
	mobileCountryCode        string // 手机国家代码
	mobileCountryCodeFlag    bool
	email                    string // 邮箱
	emailFlag                bool
	experienceYears          int // 工作年限
	experienceYearsFlag      bool
	age                      int // 年龄
	ageFlag                  bool
	nationality              *TalentNationality // 国籍
	nationalityFlag          bool
	gender                   int // 性别
	genderFlag               bool
	currentCity              *TalentCityInfo // 所在地点
	currentCityFlag          bool
	hometownCity             *TalentCityInfo // 家乡
	hometownCityFlag         bool
	preferredCityList        []*TalentCityInfo // 意向地点
	preferredCityListFlag    bool
	identificationType       int // 证件类型
	identificationTypeFlag   bool
	identificationNumber     string // 证件号
	identificationNumberFlag bool
	identification           *TalentIdentificationInfo // 证件信息
	identificationFlag       bool
	birthday                 int // 生日
	birthdayFlag             bool
	creatorId                string // 创建人
	creatorIdFlag            bool
	maritalStatus            int // 婚姻状况
	maritalStatusFlag        bool
	currentHomeAddress       string // 家庭住址
	currentHomeAddressFlag   bool
	customizedDataList       []*TalentCustomizedDataChild // 自定义字段
	customizedDataListFlag   bool
	modifyTime               string // 修改时间
	modifyTimeFlag           bool
}

func NewTalentBasicInfoBuilder() *TalentBasicInfoBuilder {
	builder := &TalentBasicInfoBuilder{}
	return builder
}

// 名字
//
// 示例值：测试
func (builder *TalentBasicInfoBuilder) Name(name string) *TalentBasicInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 手机
//
// 示例值：182900291190
func (builder *TalentBasicInfoBuilder) Mobile(mobile string) *TalentBasicInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}

// 手机国家区号
//
// 示例值：86
func (builder *TalentBasicInfoBuilder) MobileCode(mobileCode string) *TalentBasicInfoBuilder {
	builder.mobileCode = mobileCode
	builder.mobileCodeFlag = true
	return builder
}

// 手机国家代码
//
// 示例值：CN_1
func (builder *TalentBasicInfoBuilder) MobileCountryCode(mobileCountryCode string) *TalentBasicInfoBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}

// 邮箱
//
// 示例值：16xx1@126.com
func (builder *TalentBasicInfoBuilder) Email(email string) *TalentBasicInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 工作年限
//
// 示例值：5
func (builder *TalentBasicInfoBuilder) ExperienceYears(experienceYears int) *TalentBasicInfoBuilder {
	builder.experienceYears = experienceYears
	builder.experienceYearsFlag = true
	return builder
}

// 年龄
//
// 示例值：22
func (builder *TalentBasicInfoBuilder) Age(age int) *TalentBasicInfoBuilder {
	builder.age = age
	builder.ageFlag = true
	return builder
}

// 国籍
//
// 示例值：
func (builder *TalentBasicInfoBuilder) Nationality(nationality *TalentNationality) *TalentBasicInfoBuilder {
	builder.nationality = nationality
	builder.nationalityFlag = true
	return builder
}

// 性别
//
// 示例值：1
func (builder *TalentBasicInfoBuilder) Gender(gender int) *TalentBasicInfoBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}

// 所在地点
//
// 示例值：
func (builder *TalentBasicInfoBuilder) CurrentCity(currentCity *TalentCityInfo) *TalentBasicInfoBuilder {
	builder.currentCity = currentCity
	builder.currentCityFlag = true
	return builder
}

// 家乡
//
// 示例值：
func (builder *TalentBasicInfoBuilder) HometownCity(hometownCity *TalentCityInfo) *TalentBasicInfoBuilder {
	builder.hometownCity = hometownCity
	builder.hometownCityFlag = true
	return builder
}

// 意向地点
//
// 示例值：
func (builder *TalentBasicInfoBuilder) PreferredCityList(preferredCityList []*TalentCityInfo) *TalentBasicInfoBuilder {
	builder.preferredCityList = preferredCityList
	builder.preferredCityListFlag = true
	return builder
}

// 证件类型
//
// 示例值：1
func (builder *TalentBasicInfoBuilder) IdentificationType(identificationType int) *TalentBasicInfoBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

// 证件号
//
// 示例值：511699199x1x111234
func (builder *TalentBasicInfoBuilder) IdentificationNumber(identificationNumber string) *TalentBasicInfoBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}

// 证件信息
//
// 示例值：
func (builder *TalentBasicInfoBuilder) Identification(identification *TalentIdentificationInfo) *TalentBasicInfoBuilder {
	builder.identification = identification
	builder.identificationFlag = true
	return builder
}

// 生日
//
// 示例值：293016767159
func (builder *TalentBasicInfoBuilder) Birthday(birthday int) *TalentBasicInfoBuilder {
	builder.birthday = birthday
	builder.birthdayFlag = true
	return builder
}

// 创建人
//
// 示例值：ou-xxx
func (builder *TalentBasicInfoBuilder) CreatorId(creatorId string) *TalentBasicInfoBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}

// 婚姻状况
//
// 示例值：1
func (builder *TalentBasicInfoBuilder) MaritalStatus(maritalStatus int) *TalentBasicInfoBuilder {
	builder.maritalStatus = maritalStatus
	builder.maritalStatusFlag = true
	return builder
}

// 家庭住址
//
// 示例值：南京路1号
func (builder *TalentBasicInfoBuilder) CurrentHomeAddress(currentHomeAddress string) *TalentBasicInfoBuilder {
	builder.currentHomeAddress = currentHomeAddress
	builder.currentHomeAddressFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentBasicInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentBasicInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

// 修改时间
//
// 示例值：1634801678103
func (builder *TalentBasicInfoBuilder) ModifyTime(modifyTime string) *TalentBasicInfoBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

func (builder *TalentBasicInfoBuilder) Build() *TalentBasicInfo {
	req := &TalentBasicInfo{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.mobileCodeFlag {
		req.MobileCode = &builder.mobileCode

	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.experienceYearsFlag {
		req.ExperienceYears = &builder.experienceYears

	}
	if builder.ageFlag {
		req.Age = &builder.age

	}
	if builder.nationalityFlag {
		req.Nationality = builder.nationality
	}
	if builder.genderFlag {
		req.Gender = &builder.gender

	}
	if builder.currentCityFlag {
		req.CurrentCity = builder.currentCity
	}
	if builder.hometownCityFlag {
		req.HometownCity = builder.hometownCity
	}
	if builder.preferredCityListFlag {
		req.PreferredCityList = builder.preferredCityList
	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	if builder.identificationFlag {
		req.Identification = builder.identification
	}
	if builder.birthdayFlag {
		req.Birthday = &builder.birthday

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.maritalStatusFlag {
		req.MaritalStatus = &builder.maritalStatus

	}
	if builder.currentHomeAddressFlag {
		req.CurrentHomeAddress = &builder.currentHomeAddress

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	return req
}

type TalentBatchInfo struct {
	TalentId             *string `json:"talent_id,omitempty"`             // 人才 ID
	MobileCode           *string `json:"mobile_code,omitempty"`           // 手机国家区号
	MobileNumber         *string `json:"mobile_number,omitempty"`         // 手机号
	Email                *string `json:"email,omitempty"`                 // 邮箱
	IdentificationType   *int    `json:"identification_type,omitempty"`   // 证件类型，可参考招聘枚举常量 IdentificationType 枚举定义
	IdentificationNumber *string `json:"identification_number,omitempty"` // 证件号
}

type TalentBatchInfoBuilder struct {
	talentId                 string // 人才 ID
	talentIdFlag             bool
	mobileCode               string // 手机国家区号
	mobileCodeFlag           bool
	mobileNumber             string // 手机号
	mobileNumberFlag         bool
	email                    string // 邮箱
	emailFlag                bool
	identificationType       int // 证件类型，可参考招聘枚举常量 IdentificationType 枚举定义
	identificationTypeFlag   bool
	identificationNumber     string // 证件号
	identificationNumberFlag bool
}

func NewTalentBatchInfoBuilder() *TalentBatchInfoBuilder {
	builder := &TalentBatchInfoBuilder{}
	return builder
}

// 人才 ID
//
// 示例值：6891560630172518670
func (builder *TalentBatchInfoBuilder) TalentId(talentId string) *TalentBatchInfoBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 手机国家区号
//
// 示例值：86
func (builder *TalentBatchInfoBuilder) MobileCode(mobileCode string) *TalentBatchInfoBuilder {
	builder.mobileCode = mobileCode
	builder.mobileCodeFlag = true
	return builder
}

// 手机号
//
// 示例值：182900291190
func (builder *TalentBatchInfoBuilder) MobileNumber(mobileNumber string) *TalentBatchInfoBuilder {
	builder.mobileNumber = mobileNumber
	builder.mobileNumberFlag = true
	return builder
}

// 邮箱
//
// 示例值：foo@bytedance.com
func (builder *TalentBatchInfoBuilder) Email(email string) *TalentBatchInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 证件类型，可参考招聘枚举常量 IdentificationType 枚举定义
//
// 示例值：1
func (builder *TalentBatchInfoBuilder) IdentificationType(identificationType int) *TalentBatchInfoBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

// 证件号
//
// 示例值：130xxxxxxxxx
func (builder *TalentBatchInfoBuilder) IdentificationNumber(identificationNumber string) *TalentBatchInfoBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}

func (builder *TalentBatchInfoBuilder) Build() *TalentBatchInfo {
	req := &TalentBatchInfo{}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.mobileCodeFlag {
		req.MobileCode = &builder.mobileCode

	}
	if builder.mobileNumberFlag {
		req.MobileNumber = &builder.mobileNumber

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	return req
}

type TalentCareerInfo struct {
	Id                 *string                      `json:"id,omitempty"`                   // ID
	Company            *string                      `json:"company,omitempty"`              // 公司名称
	Title              *string                      `json:"title,omitempty"`                // 职位名称
	Desc               *string                      `json:"desc,omitempty"`                 // 描述
	StartTime          *string                      `json:"start_time,omitempty"`           // 开始时间
	EndTime            *string                      `json:"end_time,omitempty"`             // 结束时间
	CareerType         *int                         `json:"career_type,omitempty"`          // 经历类型
	TagList            []int                        `json:"tag_list,omitempty"`             // 工作经历标签
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"` // 自定义字段
}

type TalentCareerInfoBuilder struct {
	id                     string // ID
	idFlag                 bool
	company                string // 公司名称
	companyFlag            bool
	title                  string // 职位名称
	titleFlag              bool
	desc                   string // 描述
	descFlag               bool
	startTime              string // 开始时间
	startTimeFlag          bool
	endTime                string // 结束时间
	endTimeFlag            bool
	careerType             int // 经历类型
	careerTypeFlag         bool
	tagList                []int // 工作经历标签
	tagListFlag            bool
	customizedDataList     []*TalentCustomizedDataChild // 自定义字段
	customizedDataListFlag bool
}

func NewTalentCareerInfoBuilder() *TalentCareerInfoBuilder {
	builder := &TalentCareerInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentCareerInfoBuilder) Id(id string) *TalentCareerInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 公司名称
//
// 示例值：测试公司
func (builder *TalentCareerInfoBuilder) Company(company string) *TalentCareerInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}

// 职位名称
//
// 示例值：高级工程师
func (builder *TalentCareerInfoBuilder) Title(title string) *TalentCareerInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 描述
//
// 示例值：测试
func (builder *TalentCareerInfoBuilder) Desc(desc string) *TalentCareerInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 开始时间
//
// 示例值：1990-01
func (builder *TalentCareerInfoBuilder) StartTime(startTime string) *TalentCareerInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：1994-01
func (builder *TalentCareerInfoBuilder) EndTime(endTime string) *TalentCareerInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 经历类型
//
// 示例值：1
func (builder *TalentCareerInfoBuilder) CareerType(careerType int) *TalentCareerInfoBuilder {
	builder.careerType = careerType
	builder.careerTypeFlag = true
	return builder
}

// 工作经历标签
//
// 示例值：
func (builder *TalentCareerInfoBuilder) TagList(tagList []int) *TalentCareerInfoBuilder {
	builder.tagList = tagList
	builder.tagListFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentCareerInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentCareerInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentCareerInfoBuilder) Build() *TalentCareerInfo {
	req := &TalentCareerInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.careerTypeFlag {
		req.CareerType = &builder.careerType

	}
	if builder.tagListFlag {
		req.TagList = builder.tagList
	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

type TalentCertificateInfo struct {
	Id                 *string                      `json:"id,omitempty"`                   // ID
	Name               *string                      `json:"name,omitempty"`                 // 证件名称
	Desc               *string                      `json:"desc,omitempty"`                 // 证件描述
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"` // 自定义字段
}

type TalentCertificateInfoBuilder struct {
	id                     string // ID
	idFlag                 bool
	name                   string // 证件名称
	nameFlag               bool
	desc                   string // 证件描述
	descFlag               bool
	customizedDataList     []*TalentCustomizedDataChild // 自定义字段
	customizedDataListFlag bool
}

func NewTalentCertificateInfoBuilder() *TalentCertificateInfoBuilder {
	builder := &TalentCertificateInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentCertificateInfoBuilder) Id(id string) *TalentCertificateInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 证件名称
//
// 示例值：身份证
func (builder *TalentCertificateInfoBuilder) Name(name string) *TalentCertificateInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 证件描述
//
// 示例值：
func (builder *TalentCertificateInfoBuilder) Desc(desc string) *TalentCertificateInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentCertificateInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentCertificateInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentCertificateInfoBuilder) Build() *TalentCertificateInfo {
	req := &TalentCertificateInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

type TalentCityInfo struct {
	CityCode *string `json:"city_code,omitempty"` // 城市码
	ZhName   *string `json:"zh_name,omitempty"`   // 中文名
	EnName   *string `json:"en_name,omitempty"`   // 英文名
}

type TalentCityInfoBuilder struct {
	cityCode     string // 城市码
	cityCodeFlag bool
	zhName       string // 中文名
	zhNameFlag   bool
	enName       string // 英文名
	enNameFlag   bool
}

func NewTalentCityInfoBuilder() *TalentCityInfoBuilder {
	builder := &TalentCityInfoBuilder{}
	return builder
}

// 城市码
//
// 示例值：CN_183
func (builder *TalentCityInfoBuilder) CityCode(cityCode string) *TalentCityInfoBuilder {
	builder.cityCode = cityCode
	builder.cityCodeFlag = true
	return builder
}

// 中文名
//
// 示例值：测试
func (builder *TalentCityInfoBuilder) ZhName(zhName string) *TalentCityInfoBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名
//
// 示例值：test
func (builder *TalentCityInfoBuilder) EnName(enName string) *TalentCityInfoBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *TalentCityInfoBuilder) Build() *TalentCityInfo {
	req := &TalentCityInfo{}
	if builder.cityCodeFlag {
		req.CityCode = &builder.cityCode

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type TalentCombinedAwardInfo struct {
	Id             *string                            `json:"id,omitempty"`              // ID
	Title          *string                            `json:"title,omitempty"`           // 获奖名称
	AwardTime      *string                            `json:"award_time,omitempty"`      // 获奖时间
	Desc           *string                            `json:"desc,omitempty"`            // 描述
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"` // 自定义字段
}

type TalentCombinedAwardInfoBuilder struct {
	id                 string // ID
	idFlag             bool
	title              string // 获奖名称
	titleFlag          bool
	awardTime          string // 获奖时间
	awardTimeFlag      bool
	desc               string // 描述
	descFlag           bool
	customizedData     []*TalentCustomizedDataObjectValue // 自定义字段
	customizedDataFlag bool
}

func NewTalentCombinedAwardInfoBuilder() *TalentCombinedAwardInfoBuilder {
	builder := &TalentCombinedAwardInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentCombinedAwardInfoBuilder) Id(id string) *TalentCombinedAwardInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 获奖名称
//
// 示例值：最佳新人奖
func (builder *TalentCombinedAwardInfoBuilder) Title(title string) *TalentCombinedAwardInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 获奖时间
//
// 示例值：293016767159
func (builder *TalentCombinedAwardInfoBuilder) AwardTime(awardTime string) *TalentCombinedAwardInfoBuilder {
	builder.awardTime = awardTime
	builder.awardTimeFlag = true
	return builder
}

// 描述
//
// 示例值：最优秀的新人奖
func (builder *TalentCombinedAwardInfoBuilder) Desc(desc string) *TalentCombinedAwardInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentCombinedAwardInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedAwardInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedAwardInfoBuilder) Build() *TalentCombinedAwardInfo {
	req := &TalentCombinedAwardInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.awardTimeFlag {
		req.AwardTime = &builder.awardTime

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type TalentCombinedBasicInfo struct {
	Name                 *string                            `json:"name,omitempty"`                  // 名字
	Mobile               *string                            `json:"mobile,omitempty"`                // 手机号
	MobileCountryCode    *string                            `json:"mobile_country_code,omitempty"`   // 手机国家代码
	Email                *string                            `json:"email,omitempty"`                 // 邮箱
	IdentificationType   *int                               `json:"identification_type,omitempty"`   // 证件类型
	IdentificationNumber *string                            `json:"identification_number,omitempty"` // 证件号
	Identification       *TalentIdentificationInfo          `json:"identification,omitempty"`        // 证件信息
	StartWorkTime        *string                            `json:"start_work_time,omitempty"`       // 开始工作时间
	Birthday             *string                            `json:"birthday,omitempty"`              // 出生日期
	Gender               *int                               `json:"gender,omitempty"`                // 性别
	NationalityId        *string                            `json:"nationality_id,omitempty"`        // 国籍编码
	CurrentCityCode      *string                            `json:"current_city_code,omitempty"`     // 所在地点编码
	HometownCityCode     *string                            `json:"hometown_city_code,omitempty"`    // 家乡编码
	CustomizedData       []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"`       // 自定义字段列表
}

type TalentCombinedBasicInfoBuilder struct {
	name                     string // 名字
	nameFlag                 bool
	mobile                   string // 手机号
	mobileFlag               bool
	mobileCountryCode        string // 手机国家代码
	mobileCountryCodeFlag    bool
	email                    string // 邮箱
	emailFlag                bool
	identificationType       int // 证件类型
	identificationTypeFlag   bool
	identificationNumber     string // 证件号
	identificationNumberFlag bool
	identification           *TalentIdentificationInfo // 证件信息
	identificationFlag       bool
	startWorkTime            string // 开始工作时间
	startWorkTimeFlag        bool
	birthday                 string // 出生日期
	birthdayFlag             bool
	gender                   int // 性别
	genderFlag               bool
	nationalityId            string // 国籍编码
	nationalityIdFlag        bool
	currentCityCode          string // 所在地点编码
	currentCityCodeFlag      bool
	hometownCityCode         string // 家乡编码
	hometownCityCodeFlag     bool
	customizedData           []*TalentCustomizedDataObjectValue // 自定义字段列表
	customizedDataFlag       bool
}

func NewTalentCombinedBasicInfoBuilder() *TalentCombinedBasicInfoBuilder {
	builder := &TalentCombinedBasicInfoBuilder{}
	return builder
}

// 名字
//
// 示例值：测试
func (builder *TalentCombinedBasicInfoBuilder) Name(name string) *TalentCombinedBasicInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 手机号
//
// 示例值：182900291190
func (builder *TalentCombinedBasicInfoBuilder) Mobile(mobile string) *TalentCombinedBasicInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}

// 手机国家代码
//
// 示例值：CN_1
func (builder *TalentCombinedBasicInfoBuilder) MobileCountryCode(mobileCountryCode string) *TalentCombinedBasicInfoBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}

// 邮箱
//
// 示例值：16xx1@126.com
func (builder *TalentCombinedBasicInfoBuilder) Email(email string) *TalentCombinedBasicInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 证件类型
//
// 示例值：1
func (builder *TalentCombinedBasicInfoBuilder) IdentificationType(identificationType int) *TalentCombinedBasicInfoBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

// 证件号
//
// 示例值：511699199x1x111234
func (builder *TalentCombinedBasicInfoBuilder) IdentificationNumber(identificationNumber string) *TalentCombinedBasicInfoBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}

// 证件信息
//
// 示例值：
func (builder *TalentCombinedBasicInfoBuilder) Identification(identification *TalentIdentificationInfo) *TalentCombinedBasicInfoBuilder {
	builder.identification = identification
	builder.identificationFlag = true
	return builder
}

// 开始工作时间
//
// 示例值：293016767159
func (builder *TalentCombinedBasicInfoBuilder) StartWorkTime(startWorkTime string) *TalentCombinedBasicInfoBuilder {
	builder.startWorkTime = startWorkTime
	builder.startWorkTimeFlag = true
	return builder
}

// 出生日期
//
// 示例值：293016767159
func (builder *TalentCombinedBasicInfoBuilder) Birthday(birthday string) *TalentCombinedBasicInfoBuilder {
	builder.birthday = birthday
	builder.birthdayFlag = true
	return builder
}

// 性别
//
// 示例值：1
func (builder *TalentCombinedBasicInfoBuilder) Gender(gender int) *TalentCombinedBasicInfoBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}

// 国籍编码
//
// 示例值：CN_112
func (builder *TalentCombinedBasicInfoBuilder) NationalityId(nationalityId string) *TalentCombinedBasicInfoBuilder {
	builder.nationalityId = nationalityId
	builder.nationalityIdFlag = true
	return builder
}

// 所在地点编码
//
// 示例值：CT_159
func (builder *TalentCombinedBasicInfoBuilder) CurrentCityCode(currentCityCode string) *TalentCombinedBasicInfoBuilder {
	builder.currentCityCode = currentCityCode
	builder.currentCityCodeFlag = true
	return builder
}

// 家乡编码
//
// 示例值：CT_159
func (builder *TalentCombinedBasicInfoBuilder) HometownCityCode(hometownCityCode string) *TalentCombinedBasicInfoBuilder {
	builder.hometownCityCode = hometownCityCode
	builder.hometownCityCodeFlag = true
	return builder
}

// 自定义字段列表
//
// 示例值：
func (builder *TalentCombinedBasicInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedBasicInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedBasicInfoBuilder) Build() *TalentCombinedBasicInfo {
	req := &TalentCombinedBasicInfo{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	if builder.identificationFlag {
		req.Identification = builder.identification
	}
	if builder.startWorkTimeFlag {
		req.StartWorkTime = &builder.startWorkTime

	}
	if builder.birthdayFlag {
		req.Birthday = &builder.birthday

	}
	if builder.genderFlag {
		req.Gender = &builder.gender

	}
	if builder.nationalityIdFlag {
		req.NationalityId = &builder.nationalityId

	}
	if builder.currentCityCodeFlag {
		req.CurrentCityCode = &builder.currentCityCode

	}
	if builder.hometownCityCodeFlag {
		req.HometownCityCode = &builder.hometownCityCode

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type TalentCombinedCareerInfo struct {
	Id             *string                            `json:"id,omitempty"`              // ID
	Company        *string                            `json:"company,omitempty"`         // 公司名称
	Title          *string                            `json:"title,omitempty"`           // 职位名称
	Desc           *string                            `json:"desc,omitempty"`            // 描述
	StartTime      *string                            `json:"start_time,omitempty"`      // 开始时间
	EndTime        *string                            `json:"end_time,omitempty"`        // 结束时间
	CareerType     *int                               `json:"career_type,omitempty"`     // 经历类型
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"` // 自定义字段
}

type TalentCombinedCareerInfoBuilder struct {
	id                 string // ID
	idFlag             bool
	company            string // 公司名称
	companyFlag        bool
	title              string // 职位名称
	titleFlag          bool
	desc               string // 描述
	descFlag           bool
	startTime          string // 开始时间
	startTimeFlag      bool
	endTime            string // 结束时间
	endTimeFlag        bool
	careerType         int // 经历类型
	careerTypeFlag     bool
	customizedData     []*TalentCustomizedDataObjectValue // 自定义字段
	customizedDataFlag bool
}

func NewTalentCombinedCareerInfoBuilder() *TalentCombinedCareerInfoBuilder {
	builder := &TalentCombinedCareerInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentCombinedCareerInfoBuilder) Id(id string) *TalentCombinedCareerInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 公司名称
//
// 示例值：测试公司
func (builder *TalentCombinedCareerInfoBuilder) Company(company string) *TalentCombinedCareerInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}

// 职位名称
//
// 示例值：高级工程师
func (builder *TalentCombinedCareerInfoBuilder) Title(title string) *TalentCombinedCareerInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 描述
//
// 示例值：测试
func (builder *TalentCombinedCareerInfoBuilder) Desc(desc string) *TalentCombinedCareerInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 开始时间
//
// 示例值：293016767159
func (builder *TalentCombinedCareerInfoBuilder) StartTime(startTime string) *TalentCombinedCareerInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：293016767159
func (builder *TalentCombinedCareerInfoBuilder) EndTime(endTime string) *TalentCombinedCareerInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 经历类型
//
// 示例值：1
func (builder *TalentCombinedCareerInfoBuilder) CareerType(careerType int) *TalentCombinedCareerInfoBuilder {
	builder.careerType = careerType
	builder.careerTypeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentCombinedCareerInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedCareerInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedCareerInfoBuilder) Build() *TalentCombinedCareerInfo {
	req := &TalentCombinedCareerInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.careerTypeFlag {
		req.CareerType = &builder.careerType

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type TalentCombinedEducationInfo struct {
	Id              *string                            `json:"id,omitempty"`               // ID
	Degree          *int                               `json:"degree,omitempty"`           // 学历
	School          *string                            `json:"school,omitempty"`           // 学校
	FieldOfStudy    *string                            `json:"field_of_study,omitempty"`   // 专业
	StartTime       *string                            `json:"start_time,omitempty"`       // 开始时间
	EndTime         *string                            `json:"end_time,omitempty"`         // 结束时间
	EducationType   *int                               `json:"education_type,omitempty"`   // 学历类型
	AcademicRanking *int                               `json:"academic_ranking,omitempty"` // 成绩排名
	CustomizedData  []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"`  // 自定义字段
}

type TalentCombinedEducationInfoBuilder struct {
	id                  string // ID
	idFlag              bool
	degree              int // 学历
	degreeFlag          bool
	school              string // 学校
	schoolFlag          bool
	fieldOfStudy        string // 专业
	fieldOfStudyFlag    bool
	startTime           string // 开始时间
	startTimeFlag       bool
	endTime             string // 结束时间
	endTimeFlag         bool
	educationType       int // 学历类型
	educationTypeFlag   bool
	academicRanking     int // 成绩排名
	academicRankingFlag bool
	customizedData      []*TalentCustomizedDataObjectValue // 自定义字段
	customizedDataFlag  bool
}

func NewTalentCombinedEducationInfoBuilder() *TalentCombinedEducationInfoBuilder {
	builder := &TalentCombinedEducationInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentCombinedEducationInfoBuilder) Id(id string) *TalentCombinedEducationInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 学历
//
// 示例值：1
func (builder *TalentCombinedEducationInfoBuilder) Degree(degree int) *TalentCombinedEducationInfoBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}

// 学校
//
// 示例值：湘港大学
func (builder *TalentCombinedEducationInfoBuilder) School(school string) *TalentCombinedEducationInfoBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}

// 专业
//
// 示例值：考古
func (builder *TalentCombinedEducationInfoBuilder) FieldOfStudy(fieldOfStudy string) *TalentCombinedEducationInfoBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}

// 开始时间
//
// 示例值：293016767159
func (builder *TalentCombinedEducationInfoBuilder) StartTime(startTime string) *TalentCombinedEducationInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：293016767159
func (builder *TalentCombinedEducationInfoBuilder) EndTime(endTime string) *TalentCombinedEducationInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 学历类型
//
// 示例值：1
func (builder *TalentCombinedEducationInfoBuilder) EducationType(educationType int) *TalentCombinedEducationInfoBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}

// 成绩排名
//
// 示例值：5
func (builder *TalentCombinedEducationInfoBuilder) AcademicRanking(academicRanking int) *TalentCombinedEducationInfoBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentCombinedEducationInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedEducationInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedEducationInfoBuilder) Build() *TalentCombinedEducationInfo {
	req := &TalentCombinedEducationInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type TalentCombinedLanguageInfo struct {
	Id             *string                            `json:"id,omitempty"`              // ID
	Language       *int                               `json:"language,omitempty"`        // 语言
	Proficiency    *int                               `json:"proficiency,omitempty"`     // 精通程度
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"` // 自定义字段
}

type TalentCombinedLanguageInfoBuilder struct {
	id                 string // ID
	idFlag             bool
	language           int // 语言
	languageFlag       bool
	proficiency        int // 精通程度
	proficiencyFlag    bool
	customizedData     []*TalentCustomizedDataObjectValue // 自定义字段
	customizedDataFlag bool
}

func NewTalentCombinedLanguageInfoBuilder() *TalentCombinedLanguageInfoBuilder {
	builder := &TalentCombinedLanguageInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentCombinedLanguageInfoBuilder) Id(id string) *TalentCombinedLanguageInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 语言
//
// 示例值：1
func (builder *TalentCombinedLanguageInfoBuilder) Language(language int) *TalentCombinedLanguageInfoBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}

// 精通程度
//
// 示例值：1
func (builder *TalentCombinedLanguageInfoBuilder) Proficiency(proficiency int) *TalentCombinedLanguageInfoBuilder {
	builder.proficiency = proficiency
	builder.proficiencyFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentCombinedLanguageInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedLanguageInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedLanguageInfoBuilder) Build() *TalentCombinedLanguageInfo {
	req := &TalentCombinedLanguageInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	if builder.proficiencyFlag {
		req.Proficiency = &builder.proficiency

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type TalentCombinedProjectInfo struct {
	Id             *string                            `json:"id,omitempty"`              // ID
	Name           *string                            `json:"name,omitempty"`            // 项目名称
	Role           *string                            `json:"role,omitempty"`            // 项目角色
	Link           *string                            `json:"link,omitempty"`            // 项目链接
	Desc           *string                            `json:"desc,omitempty"`            // 描述
	StartTime      *string                            `json:"start_time,omitempty"`      // 开始时间
	EndTime        *string                            `json:"end_time,omitempty"`        // 结束时间
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"` // 自定义字段
}

type TalentCombinedProjectInfoBuilder struct {
	id                 string // ID
	idFlag             bool
	name               string // 项目名称
	nameFlag           bool
	role               string // 项目角色
	roleFlag           bool
	link               string // 项目链接
	linkFlag           bool
	desc               string // 描述
	descFlag           bool
	startTime          string // 开始时间
	startTimeFlag      bool
	endTime            string // 结束时间
	endTimeFlag        bool
	customizedData     []*TalentCustomizedDataObjectValue // 自定义字段
	customizedDataFlag bool
}

func NewTalentCombinedProjectInfoBuilder() *TalentCombinedProjectInfoBuilder {
	builder := &TalentCombinedProjectInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentCombinedProjectInfoBuilder) Id(id string) *TalentCombinedProjectInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 项目名称
//
// 示例值：测试
func (builder *TalentCombinedProjectInfoBuilder) Name(name string) *TalentCombinedProjectInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 项目角色
//
// 示例值：test
func (builder *TalentCombinedProjectInfoBuilder) Role(role string) *TalentCombinedProjectInfoBuilder {
	builder.role = role
	builder.roleFlag = true
	return builder
}

// 项目链接
//
// 示例值：https://www.a.com
func (builder *TalentCombinedProjectInfoBuilder) Link(link string) *TalentCombinedProjectInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 描述
//
// 示例值：xxx
func (builder *TalentCombinedProjectInfoBuilder) Desc(desc string) *TalentCombinedProjectInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 开始时间
//
// 示例值：293016767159
func (builder *TalentCombinedProjectInfoBuilder) StartTime(startTime string) *TalentCombinedProjectInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：293016767159
func (builder *TalentCombinedProjectInfoBuilder) EndTime(endTime string) *TalentCombinedProjectInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentCombinedProjectInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedProjectInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedProjectInfoBuilder) Build() *TalentCombinedProjectInfo {
	req := &TalentCombinedProjectInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.roleFlag {
		req.Role = &builder.role

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type TalentCombinedSnsInfo struct {
	Id             *string                            `json:"id,omitempty"`              // ID
	SnsType        *int                               `json:"sns_type,omitempty"`        // SNS名称
	Link           *string                            `json:"link,omitempty"`            // URL/ID
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"` // 自定义字段
}

type TalentCombinedSnsInfoBuilder struct {
	id                 string // ID
	idFlag             bool
	snsType            int // SNS名称
	snsTypeFlag        bool
	link               string // URL/ID
	linkFlag           bool
	customizedData     []*TalentCustomizedDataObjectValue // 自定义字段
	customizedDataFlag bool
}

func NewTalentCombinedSnsInfoBuilder() *TalentCombinedSnsInfoBuilder {
	builder := &TalentCombinedSnsInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentCombinedSnsInfoBuilder) Id(id string) *TalentCombinedSnsInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// SNS名称
//
// 示例值：1
func (builder *TalentCombinedSnsInfoBuilder) SnsType(snsType int) *TalentCombinedSnsInfoBuilder {
	builder.snsType = snsType
	builder.snsTypeFlag = true
	return builder
}

// URL/ID
//
// 示例值：https://www.a.com
func (builder *TalentCombinedSnsInfoBuilder) Link(link string) *TalentCombinedSnsInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentCombinedSnsInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedSnsInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedSnsInfoBuilder) Build() *TalentCombinedSnsInfo {
	req := &TalentCombinedSnsInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.snsTypeFlag {
		req.SnsType = &builder.snsType

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type TalentCombinedWorkInfo struct {
	Id             *string                            `json:"id,omitempty"`              // ID
	Link           *string                            `json:"link,omitempty"`            // 作品链接
	Desc           *string                            `json:"desc,omitempty"`            // 描述
	AttachmentId   *string                            `json:"attachment_id,omitempty"`   // 附件 ID
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"` // 自定义字段
}

type TalentCombinedWorkInfoBuilder struct {
	id                 string // ID
	idFlag             bool
	link               string // 作品链接
	linkFlag           bool
	desc               string // 描述
	descFlag           bool
	attachmentId       string // 附件 ID
	attachmentIdFlag   bool
	customizedData     []*TalentCustomizedDataObjectValue // 自定义字段
	customizedDataFlag bool
}

func NewTalentCombinedWorkInfoBuilder() *TalentCombinedWorkInfoBuilder {
	builder := &TalentCombinedWorkInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentCombinedWorkInfoBuilder) Id(id string) *TalentCombinedWorkInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 作品链接
//
// 示例值：https://www.a.com
func (builder *TalentCombinedWorkInfoBuilder) Link(link string) *TalentCombinedWorkInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 描述
//
// 示例值：个人设计作品
func (builder *TalentCombinedWorkInfoBuilder) Desc(desc string) *TalentCombinedWorkInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 附件 ID
//
// 示例值：12345678
func (builder *TalentCombinedWorkInfoBuilder) AttachmentId(attachmentId string) *TalentCombinedWorkInfoBuilder {
	builder.attachmentId = attachmentId
	builder.attachmentIdFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentCombinedWorkInfoBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentCombinedWorkInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentCombinedWorkInfoBuilder) Build() *TalentCombinedWorkInfo {
	req := &TalentCombinedWorkInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.attachmentIdFlag {
		req.AttachmentId = &builder.attachmentId

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type TalentCompetitionInfo struct {
	Id                 *string                      `json:"id,omitempty"`                   // ID
	Name               *string                      `json:"name,omitempty"`                 // 竞赛名称
	Desc               *string                      `json:"desc,omitempty"`                 // 竞赛描述
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"` // 自定义字段
}

type TalentCompetitionInfoBuilder struct {
	id                     string // ID
	idFlag                 bool
	name                   string // 竞赛名称
	nameFlag               bool
	desc                   string // 竞赛描述
	descFlag               bool
	customizedDataList     []*TalentCustomizedDataChild // 自定义字段
	customizedDataListFlag bool
}

func NewTalentCompetitionInfoBuilder() *TalentCompetitionInfoBuilder {
	builder := &TalentCompetitionInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentCompetitionInfoBuilder) Id(id string) *TalentCompetitionInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 竞赛名称
//
// 示例值：计算机技能竞赛
func (builder *TalentCompetitionInfoBuilder) Name(name string) *TalentCompetitionInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 竞赛描述
//
// 示例值：C++竞赛
func (builder *TalentCompetitionInfoBuilder) Desc(desc string) *TalentCompetitionInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentCompetitionInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentCompetitionInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentCompetitionInfoBuilder) Build() *TalentCompetitionInfo {
	req := &TalentCompetitionInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

type TalentCustomizedAttachment struct {
	FileId      *string `json:"file_id,omitempty"`      // 附件 ID
	FileName    *string `json:"file_name,omitempty"`    // 附件名称
	ContentType *string `json:"content_type,omitempty"` // 附件类型
	FileSize    *string `json:"file_size,omitempty"`    // 附件大小
}

type TalentCustomizedAttachmentBuilder struct {
	fileId          string // 附件 ID
	fileIdFlag      bool
	fileName        string // 附件名称
	fileNameFlag    bool
	contentType     string // 附件类型
	contentTypeFlag bool
	fileSize        string // 附件大小
	fileSizeFlag    bool
}

func NewTalentCustomizedAttachmentBuilder() *TalentCustomizedAttachmentBuilder {
	builder := &TalentCustomizedAttachmentBuilder{}
	return builder
}

// 附件 ID
//
// 示例值：7140517838785481004
func (builder *TalentCustomizedAttachmentBuilder) FileId(fileId string) *TalentCustomizedAttachmentBuilder {
	builder.fileId = fileId
	builder.fileIdFlag = true
	return builder
}

// 附件名称
//
// 示例值：1.13测试1的面试记录.pdf
func (builder *TalentCustomizedAttachmentBuilder) FileName(fileName string) *TalentCustomizedAttachmentBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}

// 附件类型
//
// 示例值：application/pdf
func (builder *TalentCustomizedAttachmentBuilder) ContentType(contentType string) *TalentCustomizedAttachmentBuilder {
	builder.contentType = contentType
	builder.contentTypeFlag = true
	return builder
}

// 附件大小
//
// 示例值：16615
func (builder *TalentCustomizedAttachmentBuilder) FileSize(fileSize string) *TalentCustomizedAttachmentBuilder {
	builder.fileSize = fileSize
	builder.fileSizeFlag = true
	return builder
}

func (builder *TalentCustomizedAttachmentBuilder) Build() *TalentCustomizedAttachment {
	req := &TalentCustomizedAttachment{}
	if builder.fileIdFlag {
		req.FileId = &builder.fileId

	}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName

	}
	if builder.contentTypeFlag {
		req.ContentType = &builder.contentType

	}
	if builder.fileSizeFlag {
		req.FileSize = &builder.fileSize

	}
	return req
}

type TalentCustomizedData struct {
	ObjectId   *string                      `json:"object_id,omitempty"`   // 模块 ID
	Name       *I18n                        `json:"name,omitempty"`        // 模块名称
	ObjectType *int                         `json:"object_type,omitempty"` // 类型
	Children   []*TalentCustomizedDataChild `json:"children,omitempty"`    // 模块下的字段
}

type TalentCustomizedDataBuilder struct {
	objectId       string // 模块 ID
	objectIdFlag   bool
	name           *I18n // 模块名称
	nameFlag       bool
	objectType     int // 类型
	objectTypeFlag bool
	children       []*TalentCustomizedDataChild // 模块下的字段
	childrenFlag   bool
}

func NewTalentCustomizedDataBuilder() *TalentCustomizedDataBuilder {
	builder := &TalentCustomizedDataBuilder{}
	return builder
}

// 模块 ID
//
// 示例值：xxxx
func (builder *TalentCustomizedDataBuilder) ObjectId(objectId string) *TalentCustomizedDataBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}

// 模块名称
//
// 示例值：
func (builder *TalentCustomizedDataBuilder) Name(name *I18n) *TalentCustomizedDataBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 类型
//
// 示例值：1
func (builder *TalentCustomizedDataBuilder) ObjectType(objectType int) *TalentCustomizedDataBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}

// 模块下的字段
//
// 示例值：
func (builder *TalentCustomizedDataBuilder) Children(children []*TalentCustomizedDataChild) *TalentCustomizedDataBuilder {
	builder.children = children
	builder.childrenFlag = true
	return builder
}

func (builder *TalentCustomizedDataBuilder) Build() *TalentCustomizedData {
	req := &TalentCustomizedData{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.childrenFlag {
		req.Children = builder.children
	}
	return req
}

type TalentCustomizedDataChild struct {
	ObjectId   *string                `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *I18n                  `json:"name,omitempty"`        // 字段名称
	ObjectType *int                   `json:"object_type,omitempty"` // 字段类型
	Value      *TalentCustomizedValue `json:"value,omitempty"`       // 自定义字段值
}

type TalentCustomizedDataChildBuilder struct {
	objectId       string // 自定义字段 ID
	objectIdFlag   bool
	name           *I18n // 字段名称
	nameFlag       bool
	objectType     int // 字段类型
	objectTypeFlag bool
	value          *TalentCustomizedValue // 自定义字段值
	valueFlag      bool
}

func NewTalentCustomizedDataChildBuilder() *TalentCustomizedDataChildBuilder {
	builder := &TalentCustomizedDataChildBuilder{}
	return builder
}

// 自定义字段 ID
//
// 示例值：xxxx
func (builder *TalentCustomizedDataChildBuilder) ObjectId(objectId string) *TalentCustomizedDataChildBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}

// 字段名称
//
// 示例值：
func (builder *TalentCustomizedDataChildBuilder) Name(name *I18n) *TalentCustomizedDataChildBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 字段类型
//
// 示例值：1
func (builder *TalentCustomizedDataChildBuilder) ObjectType(objectType int) *TalentCustomizedDataChildBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}

// 自定义字段值
//
// 示例值：
func (builder *TalentCustomizedDataChildBuilder) Value(value *TalentCustomizedValue) *TalentCustomizedDataChildBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *TalentCustomizedDataChildBuilder) Build() *TalentCustomizedDataChild {
	req := &TalentCustomizedDataChild{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

type TalentCustomizedDataObjectValue struct {
	ObjectId *string                                 `json:"object_id,omitempty"` // 自定义字段 ID
	Children []*TalentCustomizedDataObjectValueChild `json:"children,omitempty"`  // 子字段列表
}

type TalentCustomizedDataObjectValueBuilder struct {
	objectId     string // 自定义字段 ID
	objectIdFlag bool
	children     []*TalentCustomizedDataObjectValueChild // 子字段列表
	childrenFlag bool
}

func NewTalentCustomizedDataObjectValueBuilder() *TalentCustomizedDataObjectValueBuilder {
	builder := &TalentCustomizedDataObjectValueBuilder{}
	return builder
}

// 自定义字段 ID
//
// 示例值：6934193211960330504
func (builder *TalentCustomizedDataObjectValueBuilder) ObjectId(objectId string) *TalentCustomizedDataObjectValueBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}

// 子字段列表
//
// 示例值：
func (builder *TalentCustomizedDataObjectValueBuilder) Children(children []*TalentCustomizedDataObjectValueChild) *TalentCustomizedDataObjectValueBuilder {
	builder.children = children
	builder.childrenFlag = true
	return builder
}

func (builder *TalentCustomizedDataObjectValueBuilder) Build() *TalentCustomizedDataObjectValue {
	req := &TalentCustomizedDataObjectValue{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.childrenFlag {
		req.Children = builder.children
	}
	return req
}

type TalentCustomizedDataObjectValueChild struct {
	ObjectId *string `json:"object_id,omitempty"` // 自定义字段 ID
	Value    *string `json:"value,omitempty"`     // 自定义字段值
}

type TalentCustomizedDataObjectValueChildBuilder struct {
	objectId     string // 自定义字段 ID
	objectIdFlag bool
	value        string // 自定义字段值
	valueFlag    bool
}

func NewTalentCustomizedDataObjectValueChildBuilder() *TalentCustomizedDataObjectValueChildBuilder {
	builder := &TalentCustomizedDataObjectValueChildBuilder{}
	return builder
}

// 自定义字段 ID
//
// 示例值：6934193211960330504
func (builder *TalentCustomizedDataObjectValueChildBuilder) ObjectId(objectId string) *TalentCustomizedDataObjectValueChildBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}

// 自定义字段值
//
// 示例值：张三
func (builder *TalentCustomizedDataObjectValueChildBuilder) Value(value string) *TalentCustomizedDataObjectValueChildBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *TalentCustomizedDataObjectValueChildBuilder) Build() *TalentCustomizedDataObjectValueChild {
	req := &TalentCustomizedDataObjectValueChild{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type TalentCustomizedOption struct {
	Key  *string `json:"key,omitempty"`  // 选项 ID
	Name *I18n   `json:"name,omitempty"` // 选项名称
}

type TalentCustomizedOptionBuilder struct {
	key      string // 选项 ID
	keyFlag  bool
	name     *I18n // 选项名称
	nameFlag bool
}

func NewTalentCustomizedOptionBuilder() *TalentCustomizedOptionBuilder {
	builder := &TalentCustomizedOptionBuilder{}
	return builder
}

// 选项 ID
//
// 示例值：AA
func (builder *TalentCustomizedOptionBuilder) Key(key string) *TalentCustomizedOptionBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}

// 选项名称
//
// 示例值：
func (builder *TalentCustomizedOptionBuilder) Name(name *I18n) *TalentCustomizedOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *TalentCustomizedOptionBuilder) Build() *TalentCustomizedOption {
	req := &TalentCustomizedOption{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type TalentCustomizedTimeRange struct {
	StartTime *string `json:"start_time,omitempty"` // 开始时间
	EndTime   *string `json:"end_time,omitempty"`   // 结束时间，当值为至今时，返回「-」
}

type TalentCustomizedTimeRangeBuilder struct {
	startTime     string // 开始时间
	startTimeFlag bool
	endTime       string // 结束时间，当值为至今时，返回「-」
	endTimeFlag   bool
}

func NewTalentCustomizedTimeRangeBuilder() *TalentCustomizedTimeRangeBuilder {
	builder := &TalentCustomizedTimeRangeBuilder{}
	return builder
}

// 开始时间
//
// 示例值：1625456721
func (builder *TalentCustomizedTimeRangeBuilder) StartTime(startTime string) *TalentCustomizedTimeRangeBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间，当值为至今时，返回「-」
//
// 示例值：1625656721
func (builder *TalentCustomizedTimeRangeBuilder) EndTime(endTime string) *TalentCustomizedTimeRangeBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *TalentCustomizedTimeRangeBuilder) Build() *TalentCustomizedTimeRange {
	req := &TalentCustomizedTimeRange{}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

type TalentCustomizedValue struct {
	Content              *string                       `json:"content,omitempty"`               // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option               *TalentCustomizedOption       `json:"option,omitempty"`                // 当字段类型为单选时，从此字段取值
	OptionList           []*TalentCustomizedOption     `json:"option_list,omitempty"`           // 当字段类型为多选时，从此字段取值
	TimeRange            *TalentCustomizedTimeRange    `json:"time_range,omitempty"`            // 当字段类型为时间段时，从此字段取值
	Time                 *string                       `json:"time,omitempty"`                  // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是秒级时间戳
	Number               *string                       `json:"number,omitempty"`                // 当字段类型为数字时，从此字段取值
	CustomizedAttachment []*TalentCustomizedAttachment `json:"customized_attachment,omitempty"` // 当字段类型为附件时，从此字段取值
}

type TalentCustomizedValueBuilder struct {
	content                  string // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	contentFlag              bool
	option                   *TalentCustomizedOption // 当字段类型为单选时，从此字段取值
	optionFlag               bool
	optionList               []*TalentCustomizedOption // 当字段类型为多选时，从此字段取值
	optionListFlag           bool
	timeRange                *TalentCustomizedTimeRange // 当字段类型为时间段时，从此字段取值
	timeRangeFlag            bool
	time                     string // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是秒级时间戳
	timeFlag                 bool
	number                   string // 当字段类型为数字时，从此字段取值
	numberFlag               bool
	customizedAttachment     []*TalentCustomizedAttachment // 当字段类型为附件时，从此字段取值
	customizedAttachmentFlag bool
}

func NewTalentCustomizedValueBuilder() *TalentCustomizedValueBuilder {
	builder := &TalentCustomizedValueBuilder{}
	return builder
}

// 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
//
// 示例值：text
func (builder *TalentCustomizedValueBuilder) Content(content string) *TalentCustomizedValueBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 当字段类型为单选时，从此字段取值
//
// 示例值：
func (builder *TalentCustomizedValueBuilder) Option(option *TalentCustomizedOption) *TalentCustomizedValueBuilder {
	builder.option = option
	builder.optionFlag = true
	return builder
}

// 当字段类型为多选时，从此字段取值
//
// 示例值：
func (builder *TalentCustomizedValueBuilder) OptionList(optionList []*TalentCustomizedOption) *TalentCustomizedValueBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}

// 当字段类型为时间段时，从此字段取值
//
// 示例值：
func (builder *TalentCustomizedValueBuilder) TimeRange(timeRange *TalentCustomizedTimeRange) *TalentCustomizedValueBuilder {
	builder.timeRange = timeRange
	builder.timeRangeFlag = true
	return builder
}

// 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是秒级时间戳
//
// 示例值：1625456721
func (builder *TalentCustomizedValueBuilder) Time(time string) *TalentCustomizedValueBuilder {
	builder.time = time
	builder.timeFlag = true
	return builder
}

// 当字段类型为数字时，从此字段取值
//
// 示例值：111
func (builder *TalentCustomizedValueBuilder) Number(number string) *TalentCustomizedValueBuilder {
	builder.number = number
	builder.numberFlag = true
	return builder
}

// 当字段类型为附件时，从此字段取值
//
// 示例值：
func (builder *TalentCustomizedValueBuilder) CustomizedAttachment(customizedAttachment []*TalentCustomizedAttachment) *TalentCustomizedValueBuilder {
	builder.customizedAttachment = customizedAttachment
	builder.customizedAttachmentFlag = true
	return builder
}

func (builder *TalentCustomizedValueBuilder) Build() *TalentCustomizedValue {
	req := &TalentCustomizedValue{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.optionFlag {
		req.Option = builder.option
	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	if builder.timeRangeFlag {
		req.TimeRange = builder.timeRange
	}
	if builder.timeFlag {
		req.Time = &builder.time

	}
	if builder.numberFlag {
		req.Number = &builder.number

	}
	if builder.customizedAttachmentFlag {
		req.CustomizedAttachment = builder.customizedAttachment
	}
	return req
}

type TalentEducationInfo struct {
	Id                 *string                      `json:"id,omitempty"`                   // ID
	Degree             *int                         `json:"degree,omitempty"`               // 学位
	School             *string                      `json:"school,omitempty"`               // 学校
	FieldOfStudy       *string                      `json:"field_of_study,omitempty"`       // 专业
	StartTime          *string                      `json:"start_time,omitempty"`           // 开始时间
	EndTime            *string                      `json:"end_time,omitempty"`             // 结束时间
	EducationType      *int                         `json:"education_type,omitempty"`       // 学历类型
	AcademicRanking    *int                         `json:"academic_ranking,omitempty"`     // 成绩排名
	TagList            []int                        `json:"tag_list,omitempty"`             // 教育经历标签
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"` // 自定义字段
}

type TalentEducationInfoBuilder struct {
	id                     string // ID
	idFlag                 bool
	degree                 int // 学位
	degreeFlag             bool
	school                 string // 学校
	schoolFlag             bool
	fieldOfStudy           string // 专业
	fieldOfStudyFlag       bool
	startTime              string // 开始时间
	startTimeFlag          bool
	endTime                string // 结束时间
	endTimeFlag            bool
	educationType          int // 学历类型
	educationTypeFlag      bool
	academicRanking        int // 成绩排名
	academicRankingFlag    bool
	tagList                []int // 教育经历标签
	tagListFlag            bool
	customizedDataList     []*TalentCustomizedDataChild // 自定义字段
	customizedDataListFlag bool
}

func NewTalentEducationInfoBuilder() *TalentEducationInfoBuilder {
	builder := &TalentEducationInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentEducationInfoBuilder) Id(id string) *TalentEducationInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 学位
//
// 示例值：1
func (builder *TalentEducationInfoBuilder) Degree(degree int) *TalentEducationInfoBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}

// 学校
//
// 示例值：湘港大学
func (builder *TalentEducationInfoBuilder) School(school string) *TalentEducationInfoBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}

// 专业
//
// 示例值：考古
func (builder *TalentEducationInfoBuilder) FieldOfStudy(fieldOfStudy string) *TalentEducationInfoBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}

// 开始时间
//
// 示例值：1990-01
func (builder *TalentEducationInfoBuilder) StartTime(startTime string) *TalentEducationInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：1994-01
func (builder *TalentEducationInfoBuilder) EndTime(endTime string) *TalentEducationInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 学历类型
//
// 示例值：1
func (builder *TalentEducationInfoBuilder) EducationType(educationType int) *TalentEducationInfoBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}

// 成绩排名
//
// 示例值：5
func (builder *TalentEducationInfoBuilder) AcademicRanking(academicRanking int) *TalentEducationInfoBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}

// 教育经历标签
//
// 示例值：
func (builder *TalentEducationInfoBuilder) TagList(tagList []int) *TalentEducationInfoBuilder {
	builder.tagList = tagList
	builder.tagListFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentEducationInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentEducationInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentEducationInfoBuilder) Build() *TalentEducationInfo {
	req := &TalentEducationInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	if builder.tagListFlag {
		req.TagList = builder.tagList
	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

type TalentExternalInfo struct {
	TalentId           *string `json:"talent_id,omitempty"`            // 人才 ID
	ExternalCreateTime *string `json:"external_create_time,omitempty"` // 人才在外部系统的创建时间
}

type TalentExternalInfoBuilder struct {
	talentId               string // 人才 ID
	talentIdFlag           bool
	externalCreateTime     string // 人才在外部系统的创建时间
	externalCreateTimeFlag bool
}

func NewTalentExternalInfoBuilder() *TalentExternalInfoBuilder {
	builder := &TalentExternalInfoBuilder{}
	return builder
}

// 人才 ID
//
// 示例值：7043758982146345223
func (builder *TalentExternalInfoBuilder) TalentId(talentId string) *TalentExternalInfoBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 人才在外部系统的创建时间
//
// 示例值：1608467675393
func (builder *TalentExternalInfoBuilder) ExternalCreateTime(externalCreateTime string) *TalentExternalInfoBuilder {
	builder.externalCreateTime = externalCreateTime
	builder.externalCreateTimeFlag = true
	return builder
}

func (builder *TalentExternalInfoBuilder) Build() *TalentExternalInfo {
	req := &TalentExternalInfo{}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.externalCreateTimeFlag {
		req.ExternalCreateTime = &builder.externalCreateTime

	}
	return req
}

type TalentFolder struct {
	ExternalId *string `json:"external_id,omitempty"` // 外部ID
	Name       *string `json:"name,omitempty"`        // 名字
	ParentId   *string `json:"parent_id,omitempty"`   // 父ID
	CreatorId  *string `json:"creator_id,omitempty"`  // 创建人 ID
	FolderId   *string `json:"folder_id,omitempty"`   // 文件夹ID
	OwnerId    *string `json:"owner_id,omitempty"`    // 所有者ID
}

type TalentFolderBuilder struct {
	externalId     string // 外部ID
	externalIdFlag bool
	name           string // 名字
	nameFlag       bool
	parentId       string // 父ID
	parentIdFlag   bool
	creatorId      string // 创建人 ID
	creatorIdFlag  bool
	folderId       string // 文件夹ID
	folderIdFlag   bool
	ownerId        string // 所有者ID
	ownerIdFlag    bool
}

func NewTalentFolderBuilder() *TalentFolderBuilder {
	builder := &TalentFolderBuilder{}
	return builder
}

// 外部ID
//
// 示例值：
func (builder *TalentFolderBuilder) ExternalId(externalId string) *TalentFolderBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}

// 名字
//
// 示例值：人才文件夹A1
func (builder *TalentFolderBuilder) Name(name string) *TalentFolderBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 父ID
//
// 示例值：
func (builder *TalentFolderBuilder) ParentId(parentId string) *TalentFolderBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}

// 创建人 ID
//
// 示例值：
func (builder *TalentFolderBuilder) CreatorId(creatorId string) *TalentFolderBuilder {
	builder.creatorId = creatorId
	builder.creatorIdFlag = true
	return builder
}

// 文件夹ID
//
// 示例值：7041806543797995820
func (builder *TalentFolderBuilder) FolderId(folderId string) *TalentFolderBuilder {
	builder.folderId = folderId
	builder.folderIdFlag = true
	return builder
}

// 所有者ID
//
// 示例值：ou_85bb308c57f597471cd2bb5b4f580245
func (builder *TalentFolderBuilder) OwnerId(ownerId string) *TalentFolderBuilder {
	builder.ownerId = ownerId
	builder.ownerIdFlag = true
	return builder
}

func (builder *TalentFolderBuilder) Build() *TalentFolder {
	req := &TalentFolder{}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	if builder.creatorIdFlag {
		req.CreatorId = &builder.creatorId

	}
	if builder.folderIdFlag {
		req.FolderId = &builder.folderId

	}
	if builder.ownerIdFlag {
		req.OwnerId = &builder.ownerId

	}
	return req
}

type TalentIdentificationInfo struct {
	IdentificationType   *int    `json:"identification_type,omitempty"`   // 证件类型
	IdentificationNumber *string `json:"identification_number,omitempty"` // 证件号
}

type TalentIdentificationInfoBuilder struct {
	identificationType       int // 证件类型
	identificationTypeFlag   bool
	identificationNumber     string // 证件号
	identificationNumberFlag bool
}

func NewTalentIdentificationInfoBuilder() *TalentIdentificationInfoBuilder {
	builder := &TalentIdentificationInfoBuilder{}
	return builder
}

// 证件类型
//
// 示例值：1
func (builder *TalentIdentificationInfoBuilder) IdentificationType(identificationType int) *TalentIdentificationInfoBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

// 证件号
//
// 示例值：511699199x1x111234
func (builder *TalentIdentificationInfoBuilder) IdentificationNumber(identificationNumber string) *TalentIdentificationInfoBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}

func (builder *TalentIdentificationInfoBuilder) Build() *TalentIdentificationInfo {
	req := &TalentIdentificationInfo{}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	return req
}

type TalentInternshipInfo struct {
	Id        *string `json:"id,omitempty"`         // ID
	Company   *string `json:"company,omitempty"`    // 公司
	Desc      *string `json:"desc,omitempty"`       // 描述
	EndTime   *int    `json:"end_time,omitempty"`   // 结束时间
	StartTime *int    `json:"start_time,omitempty"` // 开始时间
	Title     *string `json:"title,omitempty"`      // 职称
	TagList   []int   `json:"tag_list,omitempty"`   // 标记, 只会出现学校部分
}

type TalentInternshipInfoBuilder struct {
	id            string // ID
	idFlag        bool
	company       string // 公司
	companyFlag   bool
	desc          string // 描述
	descFlag      bool
	endTime       int // 结束时间
	endTimeFlag   bool
	startTime     int // 开始时间
	startTimeFlag bool
	title         string // 职称
	titleFlag     bool
	tagList       []int // 标记, 只会出现学校部分
	tagListFlag   bool
}

func NewTalentInternshipInfoBuilder() *TalentInternshipInfoBuilder {
	builder := &TalentInternshipInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6986199832494934316
func (builder *TalentInternshipInfoBuilder) Id(id string) *TalentInternshipInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 公司
//
// 示例值：小米
func (builder *TalentInternshipInfoBuilder) Company(company string) *TalentInternshipInfoBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}

// 描述
//
// 示例值：研发部实习
func (builder *TalentInternshipInfoBuilder) Desc(desc string) *TalentInternshipInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 结束时间
//
// 示例值：1618500278638
func (builder *TalentInternshipInfoBuilder) EndTime(endTime int) *TalentInternshipInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 开始时间
//
// 示例值：1618500278639
func (builder *TalentInternshipInfoBuilder) StartTime(startTime int) *TalentInternshipInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 职称
//
// 示例值：高级工程师
func (builder *TalentInternshipInfoBuilder) Title(title string) *TalentInternshipInfoBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 标记, 只会出现学校部分
//
// 示例值：
func (builder *TalentInternshipInfoBuilder) TagList(tagList []int) *TalentInternshipInfoBuilder {
	builder.tagList = tagList
	builder.tagListFlag = true
	return builder
}

func (builder *TalentInternshipInfoBuilder) Build() *TalentInternshipInfo {
	req := &TalentInternshipInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.tagListFlag {
		req.TagList = builder.tagList
	}
	return req
}

type TalentInterview struct {
	ApplicationId *string            `json:"application_id,omitempty"` // 投递 ID
	InterviewList []*InterviewExtend `json:"interview_list,omitempty"` // 面试列表
}

type TalentInterviewBuilder struct {
	applicationId     string // 投递 ID
	applicationIdFlag bool
	interviewList     []*InterviewExtend // 面试列表
	interviewListFlag bool
}

func NewTalentInterviewBuilder() *TalentInterviewBuilder {
	builder := &TalentInterviewBuilder{}
	return builder
}

// 投递 ID
//
// 示例值：6949805467799537964
func (builder *TalentInterviewBuilder) ApplicationId(applicationId string) *TalentInterviewBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 面试列表
//
// 示例值：
func (builder *TalentInterviewBuilder) InterviewList(interviewList []*InterviewExtend) *TalentInterviewBuilder {
	builder.interviewList = interviewList
	builder.interviewListFlag = true
	return builder
}

func (builder *TalentInterviewBuilder) Build() *TalentInterview {
	req := &TalentInterview{}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.interviewListFlag {
		req.InterviewList = builder.interviewList
	}
	return req
}

type TalentInterviewRegistrationSimple struct {
	Id               *string `json:"id,omitempty"`                // ID
	RegistrationTime *int    `json:"registration_time,omitempty"` // 创建时间
	DownloadUrl      *string `json:"download_url,omitempty"`      // 下载链接
}

type TalentInterviewRegistrationSimpleBuilder struct {
	id                   string // ID
	idFlag               bool
	registrationTime     int // 创建时间
	registrationTimeFlag bool
	downloadUrl          string // 下载链接
	downloadUrlFlag      bool
}

func NewTalentInterviewRegistrationSimpleBuilder() *TalentInterviewRegistrationSimpleBuilder {
	builder := &TalentInterviewRegistrationSimpleBuilder{}
	return builder
}

// ID
//
// 示例值：6833685612520950030
func (builder *TalentInterviewRegistrationSimpleBuilder) Id(id string) *TalentInterviewRegistrationSimpleBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 创建时间
//
// 示例值：1618494330932
func (builder *TalentInterviewRegistrationSimpleBuilder) RegistrationTime(registrationTime int) *TalentInterviewRegistrationSimpleBuilder {
	builder.registrationTime = registrationTime
	builder.registrationTimeFlag = true
	return builder
}

// 下载链接
//
// 示例值：https://hire.feishu.cn/hire/file/blob/...token.../
func (builder *TalentInterviewRegistrationSimpleBuilder) DownloadUrl(downloadUrl string) *TalentInterviewRegistrationSimpleBuilder {
	builder.downloadUrl = downloadUrl
	builder.downloadUrlFlag = true
	return builder
}

func (builder *TalentInterviewRegistrationSimpleBuilder) Build() *TalentInterviewRegistrationSimple {
	req := &TalentInterviewRegistrationSimple{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.registrationTimeFlag {
		req.RegistrationTime = &builder.registrationTime

	}
	if builder.downloadUrlFlag {
		req.DownloadUrl = &builder.downloadUrl

	}
	return req
}

type TalentLanguageInfo struct {
	Id                 *string                      `json:"id,omitempty"`                   // ID
	Language           *int                         `json:"language,omitempty"`             // 语言
	Proficiency        *int                         `json:"proficiency,omitempty"`          // 精通程度
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"` // 自定义字段
}

type TalentLanguageInfoBuilder struct {
	id                     string // ID
	idFlag                 bool
	language               int // 语言
	languageFlag           bool
	proficiency            int // 精通程度
	proficiencyFlag        bool
	customizedDataList     []*TalentCustomizedDataChild // 自定义字段
	customizedDataListFlag bool
}

func NewTalentLanguageInfoBuilder() *TalentLanguageInfoBuilder {
	builder := &TalentLanguageInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentLanguageInfoBuilder) Id(id string) *TalentLanguageInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 语言
//
// 示例值：1
func (builder *TalentLanguageInfoBuilder) Language(language int) *TalentLanguageInfoBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}

// 精通程度
//
// 示例值：1
func (builder *TalentLanguageInfoBuilder) Proficiency(proficiency int) *TalentLanguageInfoBuilder {
	builder.proficiency = proficiency
	builder.proficiencyFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentLanguageInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentLanguageInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentLanguageInfoBuilder) Build() *TalentLanguageInfo {
	req := &TalentLanguageInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	if builder.proficiencyFlag {
		req.Proficiency = &builder.proficiency

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

type TalentNationality struct {
	NationalityCode *string `json:"nationality_code,omitempty"` // 国家编码
	ZhName          *string `json:"zh_name,omitempty"`          // 中文名
	EnName          *string `json:"en_name,omitempty"`          // 英文名
}

type TalentNationalityBuilder struct {
	nationalityCode     string // 国家编码
	nationalityCodeFlag bool
	zhName              string // 中文名
	zhNameFlag          bool
	enName              string // 英文名
	enNameFlag          bool
}

func NewTalentNationalityBuilder() *TalentNationalityBuilder {
	builder := &TalentNationalityBuilder{}
	return builder
}

// 国家编码
//
// 示例值：CN_183
func (builder *TalentNationalityBuilder) NationalityCode(nationalityCode string) *TalentNationalityBuilder {
	builder.nationalityCode = nationalityCode
	builder.nationalityCodeFlag = true
	return builder
}

// 中文名
//
// 示例值：测试
func (builder *TalentNationalityBuilder) ZhName(zhName string) *TalentNationalityBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名
//
// 示例值：test
func (builder *TalentNationalityBuilder) EnName(enName string) *TalentNationalityBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *TalentNationalityBuilder) Build() *TalentNationality {
	req := &TalentNationality{}
	if builder.nationalityCodeFlag {
		req.NationalityCode = &builder.nationalityCode

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type TalentOperationLog struct {
	ApplicationId *string       `json:"application_id,omitempty"` // 投递 ID
	TalentId      *string       `json:"talent_id,omitempty"`      // 候选人 ID
	Operator      *IdNameObject `json:"operator,omitempty"`       // 操作人
	OperationType *int          `json:"operation_type,omitempty"` // 操作类型
	OperationTime *string       `json:"operation_time,omitempty"` // 操作时间
	OperatorType  *int          `json:"operator_type,omitempty"`  // 操作人类型
}

type TalentOperationLogBuilder struct {
	applicationId     string // 投递 ID
	applicationIdFlag bool
	talentId          string // 候选人 ID
	talentIdFlag      bool
	operator          *IdNameObject // 操作人
	operatorFlag      bool
	operationType     int // 操作类型
	operationTypeFlag bool
	operationTime     string // 操作时间
	operationTimeFlag bool
	operatorType      int // 操作人类型
	operatorTypeFlag  bool
}

func NewTalentOperationLogBuilder() *TalentOperationLogBuilder {
	builder := &TalentOperationLogBuilder{}
	return builder
}

// 投递 ID
//
// 示例值：6949805467799537964
func (builder *TalentOperationLogBuilder) ApplicationId(applicationId string) *TalentOperationLogBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 候选人 ID
//
// 示例值：6843547872837273223
func (builder *TalentOperationLogBuilder) TalentId(talentId string) *TalentOperationLogBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 操作人
//
// 示例值：
func (builder *TalentOperationLogBuilder) Operator(operator *IdNameObject) *TalentOperationLogBuilder {
	builder.operator = operator
	builder.operatorFlag = true
	return builder
}

// 操作类型
//
// 示例值："3001"
func (builder *TalentOperationLogBuilder) OperationType(operationType int) *TalentOperationLogBuilder {
	builder.operationType = operationType
	builder.operationTypeFlag = true
	return builder
}

// 操作时间
//
// 示例值：1618500278663
func (builder *TalentOperationLogBuilder) OperationTime(operationTime string) *TalentOperationLogBuilder {
	builder.operationTime = operationTime
	builder.operationTimeFlag = true
	return builder
}

// 操作人类型
//
// 示例值：1
func (builder *TalentOperationLogBuilder) OperatorType(operatorType int) *TalentOperationLogBuilder {
	builder.operatorType = operatorType
	builder.operatorTypeFlag = true
	return builder
}

func (builder *TalentOperationLogBuilder) Build() *TalentOperationLog {
	req := &TalentOperationLog{}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.operatorFlag {
		req.Operator = builder.operator
	}
	if builder.operationTypeFlag {
		req.OperationType = &builder.operationType

	}
	if builder.operationTimeFlag {
		req.OperationTime = &builder.operationTime

	}
	if builder.operatorTypeFlag {
		req.OperatorType = &builder.operatorType

	}
	return req
}

type TalentPool struct {
	Id              *string `json:"id,omitempty"`               // 人才库ID
	I18nName        *I18n   `json:"i18n_name,omitempty"`        // 人才库名称
	I18nDescription *I18n   `json:"i18n_description,omitempty"` // 人才库描述
	ParentId        *string `json:"parent_id,omitempty"`        // 父级人才库ID
	IsPrivate       *int    `json:"is_private,omitempty"`       // 是否「仅部分用户可见」
	CreateTime      *string `json:"create_time,omitempty"`      // 创建时间，毫秒时间戳
	ModifyTime      *string `json:"modify_time,omitempty"`      // 修改时间，毫秒时间戳
}

type TalentPoolBuilder struct {
	id                  string // 人才库ID
	idFlag              bool
	i18nName            *I18n // 人才库名称
	i18nNameFlag        bool
	i18nDescription     *I18n // 人才库描述
	i18nDescriptionFlag bool
	parentId            string // 父级人才库ID
	parentIdFlag        bool
	isPrivate           int // 是否「仅部分用户可见」
	isPrivateFlag       bool
	createTime          string // 创建时间，毫秒时间戳
	createTimeFlag      bool
	modifyTime          string // 修改时间，毫秒时间戳
	modifyTimeFlag      bool
}

func NewTalentPoolBuilder() *TalentPoolBuilder {
	builder := &TalentPoolBuilder{}
	return builder
}

// 人才库ID
//
// 示例值：6930815272790114324
func (builder *TalentPoolBuilder) Id(id string) *TalentPoolBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 人才库名称
//
// 示例值：
func (builder *TalentPoolBuilder) I18nName(i18nName *I18n) *TalentPoolBuilder {
	builder.i18nName = i18nName
	builder.i18nNameFlag = true
	return builder
}

// 人才库描述
//
// 示例值：
func (builder *TalentPoolBuilder) I18nDescription(i18nDescription *I18n) *TalentPoolBuilder {
	builder.i18nDescription = i18nDescription
	builder.i18nDescriptionFlag = true
	return builder
}

// 父级人才库ID
//
// 示例值：6930815272790114324
func (builder *TalentPoolBuilder) ParentId(parentId string) *TalentPoolBuilder {
	builder.parentId = parentId
	builder.parentIdFlag = true
	return builder
}

// 是否「仅部分用户可见」
//
// 示例值：1
func (builder *TalentPoolBuilder) IsPrivate(isPrivate int) *TalentPoolBuilder {
	builder.isPrivate = isPrivate
	builder.isPrivateFlag = true
	return builder
}

// 创建时间，毫秒时间戳
//
// 示例值：1679300424000
func (builder *TalentPoolBuilder) CreateTime(createTime string) *TalentPoolBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 修改时间，毫秒时间戳
//
// 示例值：1679300424000
func (builder *TalentPoolBuilder) ModifyTime(modifyTime string) *TalentPoolBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

func (builder *TalentPoolBuilder) Build() *TalentPool {
	req := &TalentPool{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.i18nNameFlag {
		req.I18nName = builder.i18nName
	}
	if builder.i18nDescriptionFlag {
		req.I18nDescription = builder.i18nDescription
	}
	if builder.parentIdFlag {
		req.ParentId = &builder.parentId

	}
	if builder.isPrivateFlag {
		req.IsPrivate = &builder.isPrivate

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	return req
}

type TalentProjectInfo struct {
	Id                 *string                      `json:"id,omitempty"`                   // ID
	Name               *string                      `json:"name,omitempty"`                 // 项目名称
	Role               *string                      `json:"role,omitempty"`                 // 项目角色
	Link               *string                      `json:"link,omitempty"`                 // 项目链接
	Desc               *string                      `json:"desc,omitempty"`                 // 描述
	StartTime          *string                      `json:"start_time,omitempty"`           // 开始时间
	EndTime            *string                      `json:"end_time,omitempty"`             // 结束时间
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"` // 自定义字段
}

type TalentProjectInfoBuilder struct {
	id                     string // ID
	idFlag                 bool
	name                   string // 项目名称
	nameFlag               bool
	role                   string // 项目角色
	roleFlag               bool
	link                   string // 项目链接
	linkFlag               bool
	desc                   string // 描述
	descFlag               bool
	startTime              string // 开始时间
	startTimeFlag          bool
	endTime                string // 结束时间
	endTimeFlag            bool
	customizedDataList     []*TalentCustomizedDataChild // 自定义字段
	customizedDataListFlag bool
}

func NewTalentProjectInfoBuilder() *TalentProjectInfoBuilder {
	builder := &TalentProjectInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentProjectInfoBuilder) Id(id string) *TalentProjectInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 项目名称
//
// 示例值：测试
func (builder *TalentProjectInfoBuilder) Name(name string) *TalentProjectInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 项目角色
//
// 示例值：test
func (builder *TalentProjectInfoBuilder) Role(role string) *TalentProjectInfoBuilder {
	builder.role = role
	builder.roleFlag = true
	return builder
}

// 项目链接
//
// 示例值：www.test.com
func (builder *TalentProjectInfoBuilder) Link(link string) *TalentProjectInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 描述
//
// 示例值：test
func (builder *TalentProjectInfoBuilder) Desc(desc string) *TalentProjectInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 开始时间
//
// 示例值：1990-01
func (builder *TalentProjectInfoBuilder) StartTime(startTime string) *TalentProjectInfoBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：1991-01
func (builder *TalentProjectInfoBuilder) EndTime(endTime string) *TalentProjectInfoBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentProjectInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentProjectInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentProjectInfoBuilder) Build() *TalentProjectInfo {
	req := &TalentProjectInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.roleFlag {
		req.Role = &builder.role

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

type TalentResumeSource struct {
	Id     *string `json:"id,omitempty"`      // ID
	ZhName *string `json:"zh_name,omitempty"` // 中文名
	EnName *string `json:"en_name,omitempty"` // 英文名
}

type TalentResumeSourceBuilder struct {
	id         string // ID
	idFlag     bool
	zhName     string // 中文名
	zhNameFlag bool
	enName     string // 英文名
	enNameFlag bool
}

func NewTalentResumeSourceBuilder() *TalentResumeSourceBuilder {
	builder := &TalentResumeSourceBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentResumeSourceBuilder) Id(id string) *TalentResumeSourceBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 中文名
//
// 示例值：猎头
func (builder *TalentResumeSourceBuilder) ZhName(zhName string) *TalentResumeSourceBuilder {
	builder.zhName = zhName
	builder.zhNameFlag = true
	return builder
}

// 英文名
//
// 示例值：Hunter
func (builder *TalentResumeSourceBuilder) EnName(enName string) *TalentResumeSourceBuilder {
	builder.enName = enName
	builder.enNameFlag = true
	return builder
}

func (builder *TalentResumeSourceBuilder) Build() *TalentResumeSource {
	req := &TalentResumeSource{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.zhNameFlag {
		req.ZhName = &builder.zhName

	}
	if builder.enNameFlag {
		req.EnName = &builder.enName

	}
	return req
}

type TalentSchema struct {
}

type TalentSchemaChildObject struct {
	Id           *string               `json:"id,omitempty"`            // ID
	ActiveStatus *int                  `json:"active_status,omitempty"` // 活跃状态
	IsCustomized *bool                 `json:"is_customized,omitempty"` // 是否自定义
	Name         *I18n                 `json:"name,omitempty"`          // 名称
	OptionList   []*TalentSchemaOption `json:"option_list,omitempty"`   // 选项
}

type TalentSchemaChildObjectBuilder struct {
	id               string // ID
	idFlag           bool
	activeStatus     int // 活跃状态
	activeStatusFlag bool
	isCustomized     bool // 是否自定义
	isCustomizedFlag bool
	name             *I18n // 名称
	nameFlag         bool
	optionList       []*TalentSchemaOption // 选项
	optionListFlag   bool
}

func NewTalentSchemaChildObjectBuilder() *TalentSchemaChildObjectBuilder {
	builder := &TalentSchemaChildObjectBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *TalentSchemaChildObjectBuilder) Id(id string) *TalentSchemaChildObjectBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 活跃状态
//
// 示例值：
func (builder *TalentSchemaChildObjectBuilder) ActiveStatus(activeStatus int) *TalentSchemaChildObjectBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 是否自定义
//
// 示例值：
func (builder *TalentSchemaChildObjectBuilder) IsCustomized(isCustomized bool) *TalentSchemaChildObjectBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *TalentSchemaChildObjectBuilder) Name(name *I18n) *TalentSchemaChildObjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 选项
//
// 示例值：
func (builder *TalentSchemaChildObjectBuilder) OptionList(optionList []*TalentSchemaOption) *TalentSchemaChildObjectBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}

func (builder *TalentSchemaChildObjectBuilder) Build() *TalentSchemaChildObject {
	req := &TalentSchemaChildObject{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	return req
}

type TalentSchemaObject struct {
	Id           *string                    `json:"id,omitempty"`            // ID
	ActiveStatus *int                       `json:"active_status,omitempty"` // 活跃状态
	IsCustomized *bool                      `json:"is_customized,omitempty"` // 是否自定义
	Name         *I18n                      `json:"name,omitempty"`          // 名称
	OptionList   []*TalentSchemaOption      `json:"option_list,omitempty"`   // 选项
	Children     []*TalentSchemaChildObject `json:"children,omitempty"`      // 子节点
}

type TalentSchemaObjectBuilder struct {
	id               string // ID
	idFlag           bool
	activeStatus     int // 活跃状态
	activeStatusFlag bool
	isCustomized     bool // 是否自定义
	isCustomizedFlag bool
	name             *I18n // 名称
	nameFlag         bool
	optionList       []*TalentSchemaOption // 选项
	optionListFlag   bool
	children         []*TalentSchemaChildObject // 子节点
	childrenFlag     bool
}

func NewTalentSchemaObjectBuilder() *TalentSchemaObjectBuilder {
	builder := &TalentSchemaObjectBuilder{}
	return builder
}

// ID
//
// 示例值：
func (builder *TalentSchemaObjectBuilder) Id(id string) *TalentSchemaObjectBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 活跃状态
//
// 示例值：
func (builder *TalentSchemaObjectBuilder) ActiveStatus(activeStatus int) *TalentSchemaObjectBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 是否自定义
//
// 示例值：
func (builder *TalentSchemaObjectBuilder) IsCustomized(isCustomized bool) *TalentSchemaObjectBuilder {
	builder.isCustomized = isCustomized
	builder.isCustomizedFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *TalentSchemaObjectBuilder) Name(name *I18n) *TalentSchemaObjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 选项
//
// 示例值：
func (builder *TalentSchemaObjectBuilder) OptionList(optionList []*TalentSchemaOption) *TalentSchemaObjectBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}

// 子节点
//
// 示例值：
func (builder *TalentSchemaObjectBuilder) Children(children []*TalentSchemaChildObject) *TalentSchemaObjectBuilder {
	builder.children = children
	builder.childrenFlag = true
	return builder
}

func (builder *TalentSchemaObjectBuilder) Build() *TalentSchemaObject {
	req := &TalentSchemaObject{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.isCustomizedFlag {
		req.IsCustomized = &builder.isCustomized

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	if builder.childrenFlag {
		req.Children = builder.children
	}
	return req
}

type TalentSchemaOption struct {
	ActiveStatus *int    `json:"active_status,omitempty"` // 活跃状态
	Value        *string `json:"value,omitempty"`         // 值
	Name         *I18n   `json:"name,omitempty"`          // 名称
}

type TalentSchemaOptionBuilder struct {
	activeStatus     int // 活跃状态
	activeStatusFlag bool
	value            string // 值
	valueFlag        bool
	name             *I18n // 名称
	nameFlag         bool
}

func NewTalentSchemaOptionBuilder() *TalentSchemaOptionBuilder {
	builder := &TalentSchemaOptionBuilder{}
	return builder
}

// 活跃状态
//
// 示例值：
func (builder *TalentSchemaOptionBuilder) ActiveStatus(activeStatus int) *TalentSchemaOptionBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

// 值
//
// 示例值：
func (builder *TalentSchemaOptionBuilder) Value(value string) *TalentSchemaOptionBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *TalentSchemaOptionBuilder) Name(name *I18n) *TalentSchemaOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *TalentSchemaOptionBuilder) Build() *TalentSchemaOption {
	req := &TalentSchemaOption{}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type TalentSelfEvaluation struct {
	Id             *string                            `json:"id,omitempty"`              // ID
	Content        *string                            `json:"content,omitempty"`         // 内容
	CustomizedData []*TalentCustomizedDataObjectValue `json:"customized_data,omitempty"` // 自定义字段
}

type TalentSelfEvaluationBuilder struct {
	id                 string // ID
	idFlag             bool
	content            string // 内容
	contentFlag        bool
	customizedData     []*TalentCustomizedDataObjectValue // 自定义字段
	customizedDataFlag bool
}

func NewTalentSelfEvaluationBuilder() *TalentSelfEvaluationBuilder {
	builder := &TalentSelfEvaluationBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentSelfEvaluationBuilder) Id(id string) *TalentSelfEvaluationBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 内容
//
// 示例值：自我评价：平常心
func (builder *TalentSelfEvaluationBuilder) Content(content string) *TalentSelfEvaluationBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentSelfEvaluationBuilder) CustomizedData(customizedData []*TalentCustomizedDataObjectValue) *TalentSelfEvaluationBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *TalentSelfEvaluationBuilder) Build() *TalentSelfEvaluation {
	req := &TalentSelfEvaluation{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type TalentSnsInfo struct {
	Id                 *string                      `json:"id,omitempty"`                   // ID
	SnsType            *int                         `json:"sns_type,omitempty"`             // SNS名称
	Link               *string                      `json:"link,omitempty"`                 // URL/ID
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"` // 自定义字段
}

type TalentSnsInfoBuilder struct {
	id                     string // ID
	idFlag                 bool
	snsType                int // SNS名称
	snsTypeFlag            bool
	link                   string // URL/ID
	linkFlag               bool
	customizedDataList     []*TalentCustomizedDataChild // 自定义字段
	customizedDataListFlag bool
}

func NewTalentSnsInfoBuilder() *TalentSnsInfoBuilder {
	builder := &TalentSnsInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentSnsInfoBuilder) Id(id string) *TalentSnsInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// SNS名称
//
// 示例值：1
func (builder *TalentSnsInfoBuilder) SnsType(snsType int) *TalentSnsInfoBuilder {
	builder.snsType = snsType
	builder.snsTypeFlag = true
	return builder
}

// URL/ID
//
// 示例值：www.test.com
func (builder *TalentSnsInfoBuilder) Link(link string) *TalentSnsInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentSnsInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentSnsInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentSnsInfoBuilder) Build() *TalentSnsInfo {
	req := &TalentSnsInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.snsTypeFlag {
		req.SnsType = &builder.snsType

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

type TalentWorksInfo struct {
	Id                 *string                      `json:"id,omitempty"`                   // ID
	Link               *string                      `json:"link,omitempty"`                 // 作品链接
	Desc               *string                      `json:"desc,omitempty"`                 // 描述
	Name               *string                      `json:"name,omitempty"`                 // 作品附件名称，若需获取作品附件预览信息可调用「获取附件预览信息」接口
	CustomizedDataList []*TalentCustomizedDataChild `json:"customized_data_list,omitempty"` // 自定义字段
}

type TalentWorksInfoBuilder struct {
	id                     string // ID
	idFlag                 bool
	link                   string // 作品链接
	linkFlag               bool
	desc                   string // 描述
	descFlag               bool
	name                   string // 作品附件名称，若需获取作品附件预览信息可调用「获取附件预览信息」接口
	nameFlag               bool
	customizedDataList     []*TalentCustomizedDataChild // 自定义字段
	customizedDataListFlag bool
}

func NewTalentWorksInfoBuilder() *TalentWorksInfoBuilder {
	builder := &TalentWorksInfoBuilder{}
	return builder
}

// ID
//
// 示例值：6891560630172518670
func (builder *TalentWorksInfoBuilder) Id(id string) *TalentWorksInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 作品链接
//
// 示例值：www.test.com
func (builder *TalentWorksInfoBuilder) Link(link string) *TalentWorksInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 描述
//
// 示例值：test
func (builder *TalentWorksInfoBuilder) Desc(desc string) *TalentWorksInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 作品附件名称，若需获取作品附件预览信息可调用「获取附件预览信息」接口
//
// 示例值：XX项目
func (builder *TalentWorksInfoBuilder) Name(name string) *TalentWorksInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *TalentWorksInfoBuilder) CustomizedDataList(customizedDataList []*TalentCustomizedDataChild) *TalentWorksInfoBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

func (builder *TalentWorksInfoBuilder) Build() *TalentWorksInfo {
	req := &TalentWorksInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	return req
}

type TerminationReason struct {
	Id                 *string `json:"id,omitempty"`                    // 终止原因 ID
	Name               *I18n   `json:"name,omitempty"`                  // 终止原因名称
	ReferralName       *I18n   `json:"referral_name,omitempty"`         // 内推渠道展示文案
	TerminationType    *int    `json:"termination_type,omitempty"`      // 终止原因类型
	IsUsedAsEvaluation *bool   `json:"is_used_as_evaluation,omitempty"` // 是否用于评估
	ActiveStatus       *int    `json:"active_status,omitempty"`         // 状态
}

type TerminationReasonBuilder struct {
	id                     string // 终止原因 ID
	idFlag                 bool
	name                   *I18n // 终止原因名称
	nameFlag               bool
	referralName           *I18n // 内推渠道展示文案
	referralNameFlag       bool
	terminationType        int // 终止原因类型
	terminationTypeFlag    bool
	isUsedAsEvaluation     bool // 是否用于评估
	isUsedAsEvaluationFlag bool
	activeStatus           int // 状态
	activeStatusFlag       bool
}

func NewTerminationReasonBuilder() *TerminationReasonBuilder {
	builder := &TerminationReasonBuilder{}
	return builder
}

// 终止原因 ID
//
// 示例值：10002
func (builder *TerminationReasonBuilder) Id(id string) *TerminationReasonBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 终止原因名称
//
// 示例值：
func (builder *TerminationReasonBuilder) Name(name *I18n) *TerminationReasonBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 内推渠道展示文案
//
// 示例值：
func (builder *TerminationReasonBuilder) ReferralName(referralName *I18n) *TerminationReasonBuilder {
	builder.referralName = referralName
	builder.referralNameFlag = true
	return builder
}

// 终止原因类型
//
// 示例值：22
func (builder *TerminationReasonBuilder) TerminationType(terminationType int) *TerminationReasonBuilder {
	builder.terminationType = terminationType
	builder.terminationTypeFlag = true
	return builder
}

// 是否用于评估
//
// 示例值：false
func (builder *TerminationReasonBuilder) IsUsedAsEvaluation(isUsedAsEvaluation bool) *TerminationReasonBuilder {
	builder.isUsedAsEvaluation = isUsedAsEvaluation
	builder.isUsedAsEvaluationFlag = true
	return builder
}

// 状态
//
// 示例值：1
func (builder *TerminationReasonBuilder) ActiveStatus(activeStatus int) *TerminationReasonBuilder {
	builder.activeStatus = activeStatus
	builder.activeStatusFlag = true
	return builder
}

func (builder *TerminationReasonBuilder) Build() *TerminationReason {
	req := &TerminationReason{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.referralNameFlag {
		req.ReferralName = builder.referralName
	}
	if builder.terminationTypeFlag {
		req.TerminationType = &builder.terminationType

	}
	if builder.isUsedAsEvaluationFlag {
		req.IsUsedAsEvaluation = &builder.isUsedAsEvaluation

	}
	if builder.activeStatusFlag {
		req.ActiveStatus = &builder.activeStatus

	}
	return req
}

type Test struct {
	TestId              *string             `json:"test_id,omitempty"`                // 笔试 ID
	ApplicationId       *string             `json:"application_id,omitempty"`         // 投递 ID
	TestPaperId         *string             `json:"test_paper_id,omitempty"`          // 试卷 ID
	TestPaperName       *string             `json:"test_paper_name,omitempty"`        // 试卷名称
	TestPaperSourceId   *string             `json:"test_paper_source_id,omitempty"`   // 试卷来源 ID
	TestPaperSourceName *I18n               `json:"test_paper_source_name,omitempty"` // 试卷来源名称
	ReplyStatus         *int                `json:"reply_status,omitempty"`           // 笔试答复状态
	TestStatus          *int                `json:"test_status,omitempty"`            // 笔试状态
	TestSchedule        *TestSchedule       `json:"test_schedule,omitempty"`          // 笔试时间
	TestCompleteTime    *string             `json:"test_complete_time,omitempty"`     // 笔试作答完成时间
	ReportUrlList       []string            `json:"report_url_list,omitempty"`        // 笔试报告链接列表
	ResultDetailList    []*TestResultDetail `json:"result_detail_list,omitempty"`     // 笔试详细成绩
	ResultUploadTime    *string             `json:"result_upload_time,omitempty"`     // 笔试结果上传时间（手动录入的笔试成绩具有）
	Score               *string             `json:"score,omitempty"`                  // 阅卷得分
	ScoreSubmitTime     *string             `json:"score_submit_time,omitempty"`      // 阅卷结果提交时间（若重复提交，则为最新提交时间）
	Reviewer            *string             `json:"reviewer,omitempty"`               // 阅卷人，值类型由 user_id_type 查询参数决定
	CreatedAt           *string             `json:"created_at,omitempty"`             // 笔试创建时间
}

type TestBuilder struct {
	testId                  string // 笔试 ID
	testIdFlag              bool
	applicationId           string // 投递 ID
	applicationIdFlag       bool
	testPaperId             string // 试卷 ID
	testPaperIdFlag         bool
	testPaperName           string // 试卷名称
	testPaperNameFlag       bool
	testPaperSourceId       string // 试卷来源 ID
	testPaperSourceIdFlag   bool
	testPaperSourceName     *I18n // 试卷来源名称
	testPaperSourceNameFlag bool
	replyStatus             int // 笔试答复状态
	replyStatusFlag         bool
	testStatus              int // 笔试状态
	testStatusFlag          bool
	testSchedule            *TestSchedule // 笔试时间
	testScheduleFlag        bool
	testCompleteTime        string // 笔试作答完成时间
	testCompleteTimeFlag    bool
	reportUrlList           []string // 笔试报告链接列表
	reportUrlListFlag       bool
	resultDetailList        []*TestResultDetail // 笔试详细成绩
	resultDetailListFlag    bool
	resultUploadTime        string // 笔试结果上传时间（手动录入的笔试成绩具有）
	resultUploadTimeFlag    bool
	score                   string // 阅卷得分
	scoreFlag               bool
	scoreSubmitTime         string // 阅卷结果提交时间（若重复提交，则为最新提交时间）
	scoreSubmitTimeFlag     bool
	reviewer                string // 阅卷人，值类型由 user_id_type 查询参数决定
	reviewerFlag            bool
	createdAt               string // 笔试创建时间
	createdAtFlag           bool
}

func NewTestBuilder() *TestBuilder {
	builder := &TestBuilder{}
	return builder
}

// 笔试 ID
//
// 示例值：6963784391454918956
func (builder *TestBuilder) TestId(testId string) *TestBuilder {
	builder.testId = testId
	builder.testIdFlag = true
	return builder
}

// 投递 ID
//
// 示例值：6920544531948800269
func (builder *TestBuilder) ApplicationId(applicationId string) *TestBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// 试卷 ID
//
// 示例值：6963549885526346028
func (builder *TestBuilder) TestPaperId(testPaperId string) *TestBuilder {
	builder.testPaperId = testPaperId
	builder.testPaperIdFlag = true
	return builder
}

// 试卷名称
//
// 示例值：数据结构测验
func (builder *TestBuilder) TestPaperName(testPaperName string) *TestBuilder {
	builder.testPaperName = testPaperName
	builder.testPaperNameFlag = true
	return builder
}

// 试卷来源 ID
//
// 示例值：5
func (builder *TestBuilder) TestPaperSourceId(testPaperSourceId string) *TestBuilder {
	builder.testPaperSourceId = testPaperSourceId
	builder.testPaperSourceIdFlag = true
	return builder
}

// 试卷来源名称
//
// 示例值：
func (builder *TestBuilder) TestPaperSourceName(testPaperSourceName *I18n) *TestBuilder {
	builder.testPaperSourceName = testPaperSourceName
	builder.testPaperSourceNameFlag = true
	return builder
}

// 笔试答复状态
//
// 示例值：1
func (builder *TestBuilder) ReplyStatus(replyStatus int) *TestBuilder {
	builder.replyStatus = replyStatus
	builder.replyStatusFlag = true
	return builder
}

// 笔试状态
//
// 示例值：1
func (builder *TestBuilder) TestStatus(testStatus int) *TestBuilder {
	builder.testStatus = testStatus
	builder.testStatusFlag = true
	return builder
}

// 笔试时间
//
// 示例值：
func (builder *TestBuilder) TestSchedule(testSchedule *TestSchedule) *TestBuilder {
	builder.testSchedule = testSchedule
	builder.testScheduleFlag = true
	return builder
}

// 笔试作答完成时间
//
// 示例值：1608725989000
func (builder *TestBuilder) TestCompleteTime(testCompleteTime string) *TestBuilder {
	builder.testCompleteTime = testCompleteTime
	builder.testCompleteTimeFlag = true
	return builder
}

// 笔试报告链接列表
//
// 示例值：
func (builder *TestBuilder) ReportUrlList(reportUrlList []string) *TestBuilder {
	builder.reportUrlList = reportUrlList
	builder.reportUrlListFlag = true
	return builder
}

// 笔试详细成绩
//
// 示例值：
func (builder *TestBuilder) ResultDetailList(resultDetailList []*TestResultDetail) *TestBuilder {
	builder.resultDetailList = resultDetailList
	builder.resultDetailListFlag = true
	return builder
}

// 笔试结果上传时间（手动录入的笔试成绩具有）
//
// 示例值：1608725989000
func (builder *TestBuilder) ResultUploadTime(resultUploadTime string) *TestBuilder {
	builder.resultUploadTime = resultUploadTime
	builder.resultUploadTimeFlag = true
	return builder
}

// 阅卷得分
//
// 示例值：60
func (builder *TestBuilder) Score(score string) *TestBuilder {
	builder.score = score
	builder.scoreFlag = true
	return builder
}

// 阅卷结果提交时间（若重复提交，则为最新提交时间）
//
// 示例值：1608725989000
func (builder *TestBuilder) ScoreSubmitTime(scoreSubmitTime string) *TestBuilder {
	builder.scoreSubmitTime = scoreSubmitTime
	builder.scoreSubmitTimeFlag = true
	return builder
}

// 阅卷人，值类型由 user_id_type 查询参数决定
//
// 示例值：ou_266ed047ed37f24554e5a0afdbb15556
func (builder *TestBuilder) Reviewer(reviewer string) *TestBuilder {
	builder.reviewer = reviewer
	builder.reviewerFlag = true
	return builder
}

// 笔试创建时间
//
// 示例值：1608725989000
func (builder *TestBuilder) CreatedAt(createdAt string) *TestBuilder {
	builder.createdAt = createdAt
	builder.createdAtFlag = true
	return builder
}

func (builder *TestBuilder) Build() *Test {
	req := &Test{}
	if builder.testIdFlag {
		req.TestId = &builder.testId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.testPaperIdFlag {
		req.TestPaperId = &builder.testPaperId

	}
	if builder.testPaperNameFlag {
		req.TestPaperName = &builder.testPaperName

	}
	if builder.testPaperSourceIdFlag {
		req.TestPaperSourceId = &builder.testPaperSourceId

	}
	if builder.testPaperSourceNameFlag {
		req.TestPaperSourceName = builder.testPaperSourceName
	}
	if builder.replyStatusFlag {
		req.ReplyStatus = &builder.replyStatus

	}
	if builder.testStatusFlag {
		req.TestStatus = &builder.testStatus

	}
	if builder.testScheduleFlag {
		req.TestSchedule = builder.testSchedule
	}
	if builder.testCompleteTimeFlag {
		req.TestCompleteTime = &builder.testCompleteTime

	}
	if builder.reportUrlListFlag {
		req.ReportUrlList = builder.reportUrlList
	}
	if builder.resultDetailListFlag {
		req.ResultDetailList = builder.resultDetailList
	}
	if builder.resultUploadTimeFlag {
		req.ResultUploadTime = &builder.resultUploadTime

	}
	if builder.scoreFlag {
		req.Score = &builder.score

	}
	if builder.scoreSubmitTimeFlag {
		req.ScoreSubmitTime = &builder.scoreSubmitTime

	}
	if builder.reviewerFlag {
		req.Reviewer = &builder.reviewer

	}
	if builder.createdAtFlag {
		req.CreatedAt = &builder.createdAt

	}
	return req
}

type TestResultDetail struct {
	Subject *string `json:"subject,omitempty"` // 笔试科目
	Result  *string `json:"result,omitempty"`  // 笔试科目结论
}

type TestResultDetailBuilder struct {
	subject     string // 笔试科目
	subjectFlag bool
	result      string // 笔试科目结论
	resultFlag  bool
}

func NewTestResultDetailBuilder() *TestResultDetailBuilder {
	builder := &TestResultDetailBuilder{}
	return builder
}

// 笔试科目
//
// 示例值：定制化报告测验
func (builder *TestResultDetailBuilder) Subject(subject string) *TestResultDetailBuilder {
	builder.subject = subject
	builder.subjectFlag = true
	return builder
}

// 笔试科目结论
//
// 示例值：合格
func (builder *TestResultDetailBuilder) Result(result string) *TestResultDetailBuilder {
	builder.result = result
	builder.resultFlag = true
	return builder
}

func (builder *TestResultDetailBuilder) Build() *TestResultDetail {
	req := &TestResultDetail{}
	if builder.subjectFlag {
		req.Subject = &builder.subject

	}
	if builder.resultFlag {
		req.Result = &builder.result

	}
	return req
}

type TestSchedule struct {
	StartTime *string `json:"start_time,omitempty"` // 开始时间
	EndTime   *string `json:"end_time,omitempty"`   // 结束时间
}

type TestScheduleBuilder struct {
	startTime     string // 开始时间
	startTimeFlag bool
	endTime       string // 结束时间
	endTimeFlag   bool
}

func NewTestScheduleBuilder() *TestScheduleBuilder {
	builder := &TestScheduleBuilder{}
	return builder
}

// 开始时间
//
// 示例值：1621390695000
func (builder *TestScheduleBuilder) StartTime(startTime string) *TestScheduleBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：1632839400000
func (builder *TestScheduleBuilder) EndTime(endTime string) *TestScheduleBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *TestScheduleBuilder) Build() *TestSchedule {
	req := &TestSchedule{}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

type Todo struct {
	Evaluation *TodoCommon `json:"evaluation,omitempty"` // 简历评估待办信息，仅当 type=evaluation 时返回
	Offer      *TodoCommon `json:"offer,omitempty"`      // Offer 待办信息，仅当 type=offer 时返回
	Exam       *TodoCommon `json:"exam,omitempty"`       // 笔试待办信息，仅当 type=exam 时返回
	Interview  *TodoCommon `json:"interview,omitempty"`  // 面试待办信息，仅当 type=interview 时返回
}

type TodoBuilder struct {
	evaluation     *TodoCommon // 简历评估待办信息，仅当 type=evaluation 时返回
	evaluationFlag bool
	offer          *TodoCommon // Offer 待办信息，仅当 type=offer 时返回
	offerFlag      bool
	exam           *TodoCommon // 笔试待办信息，仅当 type=exam 时返回
	examFlag       bool
	interview      *TodoCommon // 面试待办信息，仅当 type=interview 时返回
	interviewFlag  bool
}

func NewTodoBuilder() *TodoBuilder {
	builder := &TodoBuilder{}
	return builder
}

// 简历评估待办信息，仅当 type=evaluation 时返回
//
// 示例值：
func (builder *TodoBuilder) Evaluation(evaluation *TodoCommon) *TodoBuilder {
	builder.evaluation = evaluation
	builder.evaluationFlag = true
	return builder
}

// Offer 待办信息，仅当 type=offer 时返回
//
// 示例值：
func (builder *TodoBuilder) Offer(offer *TodoCommon) *TodoBuilder {
	builder.offer = offer
	builder.offerFlag = true
	return builder
}

// 笔试待办信息，仅当 type=exam 时返回
//
// 示例值：
func (builder *TodoBuilder) Exam(exam *TodoCommon) *TodoBuilder {
	builder.exam = exam
	builder.examFlag = true
	return builder
}

// 面试待办信息，仅当 type=interview 时返回
//
// 示例值：
func (builder *TodoBuilder) Interview(interview *TodoCommon) *TodoBuilder {
	builder.interview = interview
	builder.interviewFlag = true
	return builder
}

func (builder *TodoBuilder) Build() *Todo {
	req := &Todo{}
	if builder.evaluationFlag {
		req.Evaluation = builder.evaluation
	}
	if builder.offerFlag {
		req.Offer = builder.offer
	}
	if builder.examFlag {
		req.Exam = builder.exam
	}
	if builder.interviewFlag {
		req.Interview = builder.interview
	}
	return req
}

type TodoCommon struct {
	TalentId      *string `json:"talent_id,omitempty"`      // 候选人 ID
	JobId         *string `json:"job_id,omitempty"`         // 职位 ID
	ApplicationId *string `json:"application_id,omitempty"` // 投递 ID
	Id            *string `json:"id,omitempty"`             // ID
}

type TodoCommonBuilder struct {
	talentId          string // 候选人 ID
	talentIdFlag      bool
	jobId             string // 职位 ID
	jobIdFlag         bool
	applicationId     string // 投递 ID
	applicationIdFlag bool
	id                string // ID
	idFlag            bool
}

func NewTodoCommonBuilder() *TodoCommonBuilder {
	builder := &TodoCommonBuilder{}
	return builder
}

// 候选人 ID
//
// 示例值：6891524011667228941
func (builder *TodoCommonBuilder) TalentId(talentId string) *TodoCommonBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 职位 ID
//
// 示例值：6891113155221522701
func (builder *TodoCommonBuilder) JobId(jobId string) *TodoCommonBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 投递 ID
//
// 示例值：6945436033023625516
func (builder *TodoCommonBuilder) ApplicationId(applicationId string) *TodoCommonBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// ID
//
// 示例值：6914542162822695181
func (builder *TodoCommonBuilder) Id(id string) *TodoCommonBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *TodoCommonBuilder) Build() *TodoCommon {
	req := &TodoCommon{}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

type UserId struct {
	UserId  *string `json:"user_id,omitempty"`  //
	OpenId  *string `json:"open_id,omitempty"`  //
	UnionId *string `json:"union_id,omitempty"` //
}

type UserIdBuilder struct {
	userId      string //
	userIdFlag  bool
	openId      string //
	openIdFlag  bool
	unionId     string //
	unionIdFlag bool
}

func NewUserIdBuilder() *UserIdBuilder {
	builder := &UserIdBuilder{}
	return builder
}

//
//
// 示例值：
func (builder *UserIdBuilder) UserId(userId string) *UserIdBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

//
//
// 示例值：
func (builder *UserIdBuilder) OpenId(openId string) *UserIdBuilder {
	builder.openId = openId
	builder.openIdFlag = true
	return builder
}

//
//
// 示例值：
func (builder *UserIdBuilder) UnionId(unionId string) *UserIdBuilder {
	builder.unionId = unionId
	builder.unionIdFlag = true
	return builder
}

func (builder *UserIdBuilder) Build() *UserId {
	req := &UserId{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.openIdFlag {
		req.OpenId = &builder.openId

	}
	if builder.unionIdFlag {
		req.UnionId = &builder.unionId

	}
	return req
}

type UserRole struct {
	UserId     *string `json:"user_id,omitempty"`     // 用户 ID
	RoleId     *string `json:"role_id,omitempty"`     // 角色 ID
	ModifyTime *string `json:"modify_time,omitempty"` // 修改时间
}

type UserRoleBuilder struct {
	userId         string // 用户 ID
	userIdFlag     bool
	roleId         string // 角色 ID
	roleIdFlag     bool
	modifyTime     string // 修改时间
	modifyTimeFlag bool
}

func NewUserRoleBuilder() *UserRoleBuilder {
	builder := &UserRoleBuilder{}
	return builder
}

// 用户 ID
//
// 示例值：ou_49772cf5d2d19ebb5059de777a4dd487
func (builder *UserRoleBuilder) UserId(userId string) *UserRoleBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 角色 ID
//
// 示例值：101
func (builder *UserRoleBuilder) RoleId(roleId string) *UserRoleBuilder {
	builder.roleId = roleId
	builder.roleIdFlag = true
	return builder
}

// 修改时间
//
// 示例值：1618500278663
func (builder *UserRoleBuilder) ModifyTime(modifyTime string) *UserRoleBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

func (builder *UserRoleBuilder) Build() *UserRole {
	req := &UserRole{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.roleIdFlag {
		req.RoleId = &builder.roleId

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	return req
}

type Website struct {
	Id              *string  `json:"id,omitempty"`                // ID
	Name            *I18n    `json:"name,omitempty"`              // 名称
	ProcessTypeList []string `json:"process_type_list,omitempty"` // 流程类型，1-社招，2-校招
	JobChannelId    *string  `json:"job_channel_id,omitempty"`    // 职位渠道ID
}

type WebsiteBuilder struct {
	id                  string // ID
	idFlag              bool
	name                *I18n // 名称
	nameFlag            bool
	processTypeList     []string // 流程类型，1-社招，2-校招
	processTypeListFlag bool
	jobChannelId        string // 职位渠道ID
	jobChannelIdFlag    bool
}

func NewWebsiteBuilder() *WebsiteBuilder {
	builder := &WebsiteBuilder{}
	return builder
}

// ID
//
// 示例值：1213213123123
func (builder *WebsiteBuilder) Id(id string) *WebsiteBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 名称
//
// 示例值：
func (builder *WebsiteBuilder) Name(name *I18n) *WebsiteBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 流程类型，1-社招，2-校招
//
// 示例值：
func (builder *WebsiteBuilder) ProcessTypeList(processTypeList []string) *WebsiteBuilder {
	builder.processTypeList = processTypeList
	builder.processTypeListFlag = true
	return builder
}

// 职位渠道ID
//
// 示例值：1213213123123
func (builder *WebsiteBuilder) JobChannelId(jobChannelId string) *WebsiteBuilder {
	builder.jobChannelId = jobChannelId
	builder.jobChannelIdFlag = true
	return builder
}

func (builder *WebsiteBuilder) Build() *Website {
	req := &Website{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.processTypeListFlag {
		req.ProcessTypeList = builder.processTypeList
	}
	if builder.jobChannelIdFlag {
		req.JobChannelId = &builder.jobChannelId

	}
	return req
}

type WebsiteChannelInfo struct {
	Id   *string `json:"id,omitempty"`   // 推广渠道 ID
	Name *string `json:"name,omitempty"` // 推广渠道名称
	Link *string `json:"link,omitempty"` // 推广渠道链接
	Code *string `json:"code,omitempty"` // 推广渠道推广码
}

type WebsiteChannelInfoBuilder struct {
	id       string // 推广渠道 ID
	idFlag   bool
	name     string // 推广渠道名称
	nameFlag bool
	link     string // 推广渠道链接
	linkFlag bool
	code     string // 推广渠道推广码
	codeFlag bool
}

func NewWebsiteChannelInfoBuilder() *WebsiteChannelInfoBuilder {
	builder := &WebsiteChannelInfoBuilder{}
	return builder
}

// 推广渠道 ID
//
// 示例值：7085989097067563300
func (builder *WebsiteChannelInfoBuilder) Id(id string) *WebsiteChannelInfoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 推广渠道名称
//
// 示例值：官网
func (builder *WebsiteChannelInfoBuilder) Name(name string) *WebsiteChannelInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 推广渠道链接
//
// 示例值：http://recrui-demo.jobs.xxx.cn/485083/?spread=A1KM6A5
func (builder *WebsiteChannelInfoBuilder) Link(link string) *WebsiteChannelInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 推广渠道推广码
//
// 示例值：A1KM6A5
func (builder *WebsiteChannelInfoBuilder) Code(code string) *WebsiteChannelInfoBuilder {
	builder.code = code
	builder.codeFlag = true
	return builder
}

func (builder *WebsiteChannelInfoBuilder) Build() *WebsiteChannelInfo {
	req := &WebsiteChannelInfo{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.codeFlag {
		req.Code = &builder.code

	}
	return req
}

type WebsiteDelivery struct {
	JobPostId                        *string                `json:"job_post_id,omitempty"`                          // 职位广告 ID
	Resume                           *WebsiteDeliveryResume `json:"resume,omitempty"`                               // 人才信息
	UserId                           *string                `json:"user_id,omitempty"`                              // 官网用户 ID
	ApplicationPreferredCityCodeList []string               `json:"application_preferred_city_code_list,omitempty"` // 意向投递城市列表，可从「获取职位信息」返回的工作地点列表获取
	ChannelId                        *string                `json:"channel_id,omitempty"`                           // 官网推广渠道 ID
}

type WebsiteDeliveryBuilder struct {
	jobPostId                            string // 职位广告 ID
	jobPostIdFlag                        bool
	resume                               *WebsiteDeliveryResume // 人才信息
	resumeFlag                           bool
	userId                               string // 官网用户 ID
	userIdFlag                           bool
	applicationPreferredCityCodeList     []string // 意向投递城市列表，可从「获取职位信息」返回的工作地点列表获取
	applicationPreferredCityCodeListFlag bool
	channelId                            string // 官网推广渠道 ID
	channelIdFlag                        bool
}

func NewWebsiteDeliveryBuilder() *WebsiteDeliveryBuilder {
	builder := &WebsiteDeliveryBuilder{}
	return builder
}

// 职位广告 ID
//
// 示例值：6960663240925956636
func (builder *WebsiteDeliveryBuilder) JobPostId(jobPostId string) *WebsiteDeliveryBuilder {
	builder.jobPostId = jobPostId
	builder.jobPostIdFlag = true
	return builder
}

// 人才信息
//
// 示例值：
func (builder *WebsiteDeliveryBuilder) Resume(resume *WebsiteDeliveryResume) *WebsiteDeliveryBuilder {
	builder.resume = resume
	builder.resumeFlag = true
	return builder
}

// 官网用户 ID
//
// 示例值：6960663240925956634
func (builder *WebsiteDeliveryBuilder) UserId(userId string) *WebsiteDeliveryBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 意向投递城市列表，可从「获取职位信息」返回的工作地点列表获取
//
// 示例值：CT_11
func (builder *WebsiteDeliveryBuilder) ApplicationPreferredCityCodeList(applicationPreferredCityCodeList []string) *WebsiteDeliveryBuilder {
	builder.applicationPreferredCityCodeList = applicationPreferredCityCodeList
	builder.applicationPreferredCityCodeListFlag = true
	return builder
}

// 官网推广渠道 ID
//
// 示例值：6891560630172518670
func (builder *WebsiteDeliveryBuilder) ChannelId(channelId string) *WebsiteDeliveryBuilder {
	builder.channelId = channelId
	builder.channelIdFlag = true
	return builder
}

func (builder *WebsiteDeliveryBuilder) Build() *WebsiteDelivery {
	req := &WebsiteDelivery{}
	if builder.jobPostIdFlag {
		req.JobPostId = &builder.jobPostId

	}
	if builder.resumeFlag {
		req.Resume = builder.resume
	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.applicationPreferredCityCodeListFlag {
		req.ApplicationPreferredCityCodeList = builder.applicationPreferredCityCodeList
	}
	if builder.channelIdFlag {
		req.ChannelId = &builder.channelId

	}
	return req
}

type WebsiteDeliveryAttachment struct {
	JobPostId                        *string                                   `json:"job_post_id,omitempty"`                          // 职位广告 ID
	UserId                           *string                                   `json:"user_id,omitempty"`                              // 官网用户 ID
	ResumeFileId                     *string                                   `json:"resume_file_id,omitempty"`                       // 简历文件 ID，使用「创建附件」生成
	ChannelId                        *string                                   `json:"channel_id,omitempty"`                           // 官网推广渠道 ID
	ApplicationPreferredCityCodeList []string                                  `json:"application_preferred_city_code_list,omitempty"` // 意向投递城市列表，可从「获取职位信息」返回的工作地点列表获取
	MobileCountryCode                *string                                   `json:"mobile_country_code,omitempty"`                  // 电话国际区号，可从「获取地址码」查询（当该参数值与简历附件中的相关值不一致时，将以该参数值为准）
	Mobile                           *string                                   `json:"mobile,omitempty"`                               // 电话号码（当该参数值与简历附件中的相关值不一致时，将以该参数值为准）
	Email                            *string                                   `json:"email,omitempty"`                                // 邮箱（当该参数值与简历附件中的相关值不一致时，将以该参数值为准）
	Identification                   *WebsiteDeliveryAttachmentIndentification `json:"identification,omitempty"`                       // 身份证件号码（当该参数值与简历附件中的相关值不一致时，将以该参数值为准）
}

type WebsiteDeliveryAttachmentBuilder struct {
	jobPostId                            string // 职位广告 ID
	jobPostIdFlag                        bool
	userId                               string // 官网用户 ID
	userIdFlag                           bool
	resumeFileId                         string // 简历文件 ID，使用「创建附件」生成
	resumeFileIdFlag                     bool
	channelId                            string // 官网推广渠道 ID
	channelIdFlag                        bool
	applicationPreferredCityCodeList     []string // 意向投递城市列表，可从「获取职位信息」返回的工作地点列表获取
	applicationPreferredCityCodeListFlag bool
	mobileCountryCode                    string // 电话国际区号，可从「获取地址码」查询（当该参数值与简历附件中的相关值不一致时，将以该参数值为准）
	mobileCountryCodeFlag                bool
	mobile                               string // 电话号码（当该参数值与简历附件中的相关值不一致时，将以该参数值为准）
	mobileFlag                           bool
	email                                string // 邮箱（当该参数值与简历附件中的相关值不一致时，将以该参数值为准）
	emailFlag                            bool
	identification                       *WebsiteDeliveryAttachmentIndentification // 身份证件号码（当该参数值与简历附件中的相关值不一致时，将以该参数值为准）
	identificationFlag                   bool
}

func NewWebsiteDeliveryAttachmentBuilder() *WebsiteDeliveryAttachmentBuilder {
	builder := &WebsiteDeliveryAttachmentBuilder{}
	return builder
}

// 职位广告 ID
//
// 示例值：6960663240925956636
func (builder *WebsiteDeliveryAttachmentBuilder) JobPostId(jobPostId string) *WebsiteDeliveryAttachmentBuilder {
	builder.jobPostId = jobPostId
	builder.jobPostIdFlag = true
	return builder
}

// 官网用户 ID
//
// 示例值：6960663240925956634
func (builder *WebsiteDeliveryAttachmentBuilder) UserId(userId string) *WebsiteDeliveryAttachmentBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 简历文件 ID，使用「创建附件」生成
//
// 示例值：7095614894070434092
func (builder *WebsiteDeliveryAttachmentBuilder) ResumeFileId(resumeFileId string) *WebsiteDeliveryAttachmentBuilder {
	builder.resumeFileId = resumeFileId
	builder.resumeFileIdFlag = true
	return builder
}

// 官网推广渠道 ID
//
// 示例值：6891560630172518670
func (builder *WebsiteDeliveryAttachmentBuilder) ChannelId(channelId string) *WebsiteDeliveryAttachmentBuilder {
	builder.channelId = channelId
	builder.channelIdFlag = true
	return builder
}

// 意向投递城市列表，可从「获取职位信息」返回的工作地点列表获取
//
// 示例值：CT_1
func (builder *WebsiteDeliveryAttachmentBuilder) ApplicationPreferredCityCodeList(applicationPreferredCityCodeList []string) *WebsiteDeliveryAttachmentBuilder {
	builder.applicationPreferredCityCodeList = applicationPreferredCityCodeList
	builder.applicationPreferredCityCodeListFlag = true
	return builder
}

// 电话国际区号，可从「获取地址码」查询（当该参数值与简历附件中的相关值不一致时，将以该参数值为准）
//
// 示例值：CN_1
func (builder *WebsiteDeliveryAttachmentBuilder) MobileCountryCode(mobileCountryCode string) *WebsiteDeliveryAttachmentBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}

// 电话号码（当该参数值与简历附件中的相关值不一致时，将以该参数值为准）
//
// 示例值：182900291190
func (builder *WebsiteDeliveryAttachmentBuilder) Mobile(mobile string) *WebsiteDeliveryAttachmentBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}

// 邮箱（当该参数值与简历附件中的相关值不一致时，将以该参数值为准）
//
// 示例值：foo@bytedance.com
func (builder *WebsiteDeliveryAttachmentBuilder) Email(email string) *WebsiteDeliveryAttachmentBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 身份证件号码（当该参数值与简历附件中的相关值不一致时，将以该参数值为准）
//
// 示例值：
func (builder *WebsiteDeliveryAttachmentBuilder) Identification(identification *WebsiteDeliveryAttachmentIndentification) *WebsiteDeliveryAttachmentBuilder {
	builder.identification = identification
	builder.identificationFlag = true
	return builder
}

func (builder *WebsiteDeliveryAttachmentBuilder) Build() *WebsiteDeliveryAttachment {
	req := &WebsiteDeliveryAttachment{}
	if builder.jobPostIdFlag {
		req.JobPostId = &builder.jobPostId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.resumeFileIdFlag {
		req.ResumeFileId = &builder.resumeFileId

	}
	if builder.channelIdFlag {
		req.ChannelId = &builder.channelId

	}
	if builder.applicationPreferredCityCodeListFlag {
		req.ApplicationPreferredCityCodeList = builder.applicationPreferredCityCodeList
	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.identificationFlag {
		req.Identification = builder.identification
	}
	return req
}

type WebsiteDeliveryAttachmentIndentification struct {
	IdentificationType   *int    `json:"identification_type,omitempty"`   // 身份证件类型
	IdentificationNumber *string `json:"identification_number,omitempty"` // 身份证件号
}

type WebsiteDeliveryAttachmentIndentificationBuilder struct {
	identificationType       int // 身份证件类型
	identificationTypeFlag   bool
	identificationNumber     string // 身份证件号
	identificationNumberFlag bool
}

func NewWebsiteDeliveryAttachmentIndentificationBuilder() *WebsiteDeliveryAttachmentIndentificationBuilder {
	builder := &WebsiteDeliveryAttachmentIndentificationBuilder{}
	return builder
}

// 身份证件类型
//
// 示例值：1
func (builder *WebsiteDeliveryAttachmentIndentificationBuilder) IdentificationType(identificationType int) *WebsiteDeliveryAttachmentIndentificationBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

// 身份证件号
//
// 示例值：11002030131312312
func (builder *WebsiteDeliveryAttachmentIndentificationBuilder) IdentificationNumber(identificationNumber string) *WebsiteDeliveryAttachmentIndentificationBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}

func (builder *WebsiteDeliveryAttachmentIndentificationBuilder) Build() *WebsiteDeliveryAttachmentIndentification {
	req := &WebsiteDeliveryAttachmentIndentification{}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	return req
}

type WebsiteDeliveryAward struct {
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"` // 自定义字段
	Desc           *string                          `json:"desc,omitempty"`            // 描述
	Title          *string                          `json:"title,omitempty"`           // 奖项名称
	AwardTime      *int                             `json:"award_time,omitempty"`      // 获奖时间
}

type WebsiteDeliveryAwardBuilder struct {
	customizedData     []*WebsiteDeliveryCustomizedData // 自定义字段
	customizedDataFlag bool
	desc               string // 描述
	descFlag           bool
	title              string // 奖项名称
	titleFlag          bool
	awardTime          int // 获奖时间
	awardTimeFlag      bool
}

func NewWebsiteDeliveryAwardBuilder() *WebsiteDeliveryAwardBuilder {
	builder := &WebsiteDeliveryAwardBuilder{}
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteDeliveryAwardBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryAwardBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

// 描述
//
// 示例值：ACM国际大学生程序设计竞赛
func (builder *WebsiteDeliveryAwardBuilder) Desc(desc string) *WebsiteDeliveryAwardBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 奖项名称
//
// 示例值：ACM 亚洲区金牌
func (builder *WebsiteDeliveryAwardBuilder) Title(title string) *WebsiteDeliveryAwardBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 获奖时间
//
// 示例值：1609430400
func (builder *WebsiteDeliveryAwardBuilder) AwardTime(awardTime int) *WebsiteDeliveryAwardBuilder {
	builder.awardTime = awardTime
	builder.awardTimeFlag = true
	return builder
}

func (builder *WebsiteDeliveryAwardBuilder) Build() *WebsiteDeliveryAward {
	req := &WebsiteDeliveryAward{}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.awardTimeFlag {
		req.AwardTime = &builder.awardTime

	}
	return req
}

type WebsiteDeliveryBasicInfo struct {
	NationalityId         *string                          `json:"nationality_id,omitempty"`           // 国籍，可从「获取地址码」查询
	StartWorkTime         *int                             `json:"start_work_time,omitempty"`          // 起始工作时间
	CurrentHomeAddress    *string                          `json:"current_home_address,omitempty"`     // 家庭住址
	HometownCityCode      *string                          `json:"hometown_city_code,omitempty"`       // 家乡，可从「获取地址码」查询
	MobileCountryCode     *string                          `json:"mobile_country_code,omitempty"`      // 电话国际区号，可从「获取地址码」查询
	Identification        *WebsiteDeliveryIdentification   `json:"identification,omitempty"`           // 身份证件
	MaritalStatus         *int                             `json:"marital_status,omitempty"`           // 婚姻状况
	Mobile                *string                          `json:"mobile,omitempty"`                   // 电话
	CurrentCityCode       *string                          `json:"current_city_code,omitempty"`        // 所在城市，可从「获取地址码」查询
	ExperienceYears       *int                             `json:"experience_years,omitempty"`         // 工作年限
	Gender                *int                             `json:"gender,omitempty"`                   // 性别
	Birthday              *int                             `json:"birthday,omitempty"`                 // 出生日期
	Name                  *string                          `json:"name,omitempty"`                     // 姓名
	PreferredCityCodeList []string                         `json:"preferred_city_code_list,omitempty"` // 意向城市，可从「获取地址码」查询
	ResumeSourceId        *string                          `json:"resume_source_id,omitempty"`         // 简历来源，可从「获取简历来源列表」查询
	Age                   *int                             `json:"age,omitempty"`                      // 年龄
	CustomizedData        []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`          // 自定义字段
	Email                 *string                          `json:"email,omitempty"`                    // 邮箱
}

type WebsiteDeliveryBasicInfoBuilder struct {
	nationalityId             string // 国籍，可从「获取地址码」查询
	nationalityIdFlag         bool
	startWorkTime             int // 起始工作时间
	startWorkTimeFlag         bool
	currentHomeAddress        string // 家庭住址
	currentHomeAddressFlag    bool
	hometownCityCode          string // 家乡，可从「获取地址码」查询
	hometownCityCodeFlag      bool
	mobileCountryCode         string // 电话国际区号，可从「获取地址码」查询
	mobileCountryCodeFlag     bool
	identification            *WebsiteDeliveryIdentification // 身份证件
	identificationFlag        bool
	maritalStatus             int // 婚姻状况
	maritalStatusFlag         bool
	mobile                    string // 电话
	mobileFlag                bool
	currentCityCode           string // 所在城市，可从「获取地址码」查询
	currentCityCodeFlag       bool
	experienceYears           int // 工作年限
	experienceYearsFlag       bool
	gender                    int // 性别
	genderFlag                bool
	birthday                  int // 出生日期
	birthdayFlag              bool
	name                      string // 姓名
	nameFlag                  bool
	preferredCityCodeList     []string // 意向城市，可从「获取地址码」查询
	preferredCityCodeListFlag bool
	resumeSourceId            string // 简历来源，可从「获取简历来源列表」查询
	resumeSourceIdFlag        bool
	age                       int // 年龄
	ageFlag                   bool
	customizedData            []*WebsiteDeliveryCustomizedData // 自定义字段
	customizedDataFlag        bool
	email                     string // 邮箱
	emailFlag                 bool
}

func NewWebsiteDeliveryBasicInfoBuilder() *WebsiteDeliveryBasicInfoBuilder {
	builder := &WebsiteDeliveryBasicInfoBuilder{}
	return builder
}

// 国籍，可从「获取地址码」查询
//
// 示例值：CN_112
func (builder *WebsiteDeliveryBasicInfoBuilder) NationalityId(nationalityId string) *WebsiteDeliveryBasicInfoBuilder {
	builder.nationalityId = nationalityId
	builder.nationalityIdFlag = true
	return builder
}

// 起始工作时间
//
// 示例值：1625648596
func (builder *WebsiteDeliveryBasicInfoBuilder) StartWorkTime(startWorkTime int) *WebsiteDeliveryBasicInfoBuilder {
	builder.startWorkTime = startWorkTime
	builder.startWorkTimeFlag = true
	return builder
}

// 家庭住址
//
// 示例值：成都
func (builder *WebsiteDeliveryBasicInfoBuilder) CurrentHomeAddress(currentHomeAddress string) *WebsiteDeliveryBasicInfoBuilder {
	builder.currentHomeAddress = currentHomeAddress
	builder.currentHomeAddressFlag = true
	return builder
}

// 家乡，可从「获取地址码」查询
//
// 示例值：CT_159
func (builder *WebsiteDeliveryBasicInfoBuilder) HometownCityCode(hometownCityCode string) *WebsiteDeliveryBasicInfoBuilder {
	builder.hometownCityCode = hometownCityCode
	builder.hometownCityCodeFlag = true
	return builder
}

// 电话国际区号，可从「获取地址码」查询
//
// 示例值：CN_1
func (builder *WebsiteDeliveryBasicInfoBuilder) MobileCountryCode(mobileCountryCode string) *WebsiteDeliveryBasicInfoBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}

// 身份证件
//
// 示例值：
func (builder *WebsiteDeliveryBasicInfoBuilder) Identification(identification *WebsiteDeliveryIdentification) *WebsiteDeliveryBasicInfoBuilder {
	builder.identification = identification
	builder.identificationFlag = true
	return builder
}

// 婚姻状况
//
// 示例值：1
func (builder *WebsiteDeliveryBasicInfoBuilder) MaritalStatus(maritalStatus int) *WebsiteDeliveryBasicInfoBuilder {
	builder.maritalStatus = maritalStatus
	builder.maritalStatusFlag = true
	return builder
}

// 电话
//
// 示例值：182900291190
func (builder *WebsiteDeliveryBasicInfoBuilder) Mobile(mobile string) *WebsiteDeliveryBasicInfoBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}

// 所在城市，可从「获取地址码」查询
//
// 示例值：CT_11
func (builder *WebsiteDeliveryBasicInfoBuilder) CurrentCityCode(currentCityCode string) *WebsiteDeliveryBasicInfoBuilder {
	builder.currentCityCode = currentCityCode
	builder.currentCityCodeFlag = true
	return builder
}

// 工作年限
//
// 示例值：3
func (builder *WebsiteDeliveryBasicInfoBuilder) ExperienceYears(experienceYears int) *WebsiteDeliveryBasicInfoBuilder {
	builder.experienceYears = experienceYears
	builder.experienceYearsFlag = true
	return builder
}

// 性别
//
// 示例值：1
func (builder *WebsiteDeliveryBasicInfoBuilder) Gender(gender int) *WebsiteDeliveryBasicInfoBuilder {
	builder.gender = gender
	builder.genderFlag = true
	return builder
}

// 出生日期
//
// 示例值：1609430400
func (builder *WebsiteDeliveryBasicInfoBuilder) Birthday(birthday int) *WebsiteDeliveryBasicInfoBuilder {
	builder.birthday = birthday
	builder.birthdayFlag = true
	return builder
}

// 姓名
//
// 示例值：张三
func (builder *WebsiteDeliveryBasicInfoBuilder) Name(name string) *WebsiteDeliveryBasicInfoBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 意向城市，可从「获取地址码」查询
//
// 示例值：意向城市
func (builder *WebsiteDeliveryBasicInfoBuilder) PreferredCityCodeList(preferredCityCodeList []string) *WebsiteDeliveryBasicInfoBuilder {
	builder.preferredCityCodeList = preferredCityCodeList
	builder.preferredCityCodeListFlag = true
	return builder
}

// 简历来源，可从「获取简历来源列表」查询
//
// 示例值：6982104077248219436
func (builder *WebsiteDeliveryBasicInfoBuilder) ResumeSourceId(resumeSourceId string) *WebsiteDeliveryBasicInfoBuilder {
	builder.resumeSourceId = resumeSourceId
	builder.resumeSourceIdFlag = true
	return builder
}

// 年龄
//
// 示例值：25
func (builder *WebsiteDeliveryBasicInfoBuilder) Age(age int) *WebsiteDeliveryBasicInfoBuilder {
	builder.age = age
	builder.ageFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteDeliveryBasicInfoBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryBasicInfoBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

// 邮箱
//
// 示例值：foo@bytedance.com
func (builder *WebsiteDeliveryBasicInfoBuilder) Email(email string) *WebsiteDeliveryBasicInfoBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

func (builder *WebsiteDeliveryBasicInfoBuilder) Build() *WebsiteDeliveryBasicInfo {
	req := &WebsiteDeliveryBasicInfo{}
	if builder.nationalityIdFlag {
		req.NationalityId = &builder.nationalityId

	}
	if builder.startWorkTimeFlag {
		req.StartWorkTime = &builder.startWorkTime

	}
	if builder.currentHomeAddressFlag {
		req.CurrentHomeAddress = &builder.currentHomeAddress

	}
	if builder.hometownCityCodeFlag {
		req.HometownCityCode = &builder.hometownCityCode

	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	if builder.identificationFlag {
		req.Identification = builder.identification
	}
	if builder.maritalStatusFlag {
		req.MaritalStatus = &builder.maritalStatus

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.currentCityCodeFlag {
		req.CurrentCityCode = &builder.currentCityCode

	}
	if builder.experienceYearsFlag {
		req.ExperienceYears = &builder.experienceYears

	}
	if builder.genderFlag {
		req.Gender = &builder.gender

	}
	if builder.birthdayFlag {
		req.Birthday = &builder.birthday

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.preferredCityCodeListFlag {
		req.PreferredCityCodeList = builder.preferredCityCodeList
	}
	if builder.resumeSourceIdFlag {
		req.ResumeSourceId = &builder.resumeSourceId

	}
	if builder.ageFlag {
		req.Age = &builder.age

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	return req
}

type WebsiteDeliveryCareer struct {
	Desc           *string                          `json:"desc,omitempty"`            // 描述
	EndTime        *int                             `json:"end_time,omitempty"`        // 结束时间, 如果是至今传值 -1
	StartTime      *int                             `json:"start_time,omitempty"`      // 开始时间
	Title          *string                          `json:"title,omitempty"`           // 职位名称
	Company        *string                          `json:"company,omitempty"`         // 公司
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"` // 自定义字段
}

type WebsiteDeliveryCareerBuilder struct {
	desc               string // 描述
	descFlag           bool
	endTime            int // 结束时间, 如果是至今传值 -1
	endTimeFlag        bool
	startTime          int // 开始时间
	startTimeFlag      bool
	title              string // 职位名称
	titleFlag          bool
	company            string // 公司
	companyFlag        bool
	customizedData     []*WebsiteDeliveryCustomizedData // 自定义字段
	customizedDataFlag bool
}

func NewWebsiteDeliveryCareerBuilder() *WebsiteDeliveryCareerBuilder {
	builder := &WebsiteDeliveryCareerBuilder{}
	return builder
}

// 描述
//
// 示例值：这是一家创业公司，非常不错
func (builder *WebsiteDeliveryCareerBuilder) Desc(desc string) *WebsiteDeliveryCareerBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 结束时间, 如果是至今传值 -1
//
// 示例值：1618500278667
func (builder *WebsiteDeliveryCareerBuilder) EndTime(endTime int) *WebsiteDeliveryCareerBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 开始时间
//
// 示例值：1609430400
func (builder *WebsiteDeliveryCareerBuilder) StartTime(startTime int) *WebsiteDeliveryCareerBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 职位名称
//
// 示例值：后端研发实习生
func (builder *WebsiteDeliveryCareerBuilder) Title(title string) *WebsiteDeliveryCareerBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 公司
//
// 示例值：字节跳动
func (builder *WebsiteDeliveryCareerBuilder) Company(company string) *WebsiteDeliveryCareerBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteDeliveryCareerBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryCareerBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *WebsiteDeliveryCareerBuilder) Build() *WebsiteDeliveryCareer {
	req := &WebsiteDeliveryCareer{}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type WebsiteDeliveryCertificate struct {
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"` // 自定义字段
	Desc           *string                          `json:"desc,omitempty"`            // 描述
	Name           *string                          `json:"name,omitempty"`            // 证书名称
}

type WebsiteDeliveryCertificateBuilder struct {
	customizedData     []*WebsiteDeliveryCustomizedData // 自定义字段
	customizedDataFlag bool
	desc               string // 描述
	descFlag           bool
	name               string // 证书名称
	nameFlag           bool
}

func NewWebsiteDeliveryCertificateBuilder() *WebsiteDeliveryCertificateBuilder {
	builder := &WebsiteDeliveryCertificateBuilder{}
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteDeliveryCertificateBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryCertificateBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

// 描述
//
// 示例值：全国普通话级别认证
func (builder *WebsiteDeliveryCertificateBuilder) Desc(desc string) *WebsiteDeliveryCertificateBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 证书名称
//
// 示例值：普通话证书
func (builder *WebsiteDeliveryCertificateBuilder) Name(name string) *WebsiteDeliveryCertificateBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *WebsiteDeliveryCertificateBuilder) Build() *WebsiteDeliveryCertificate {
	req := &WebsiteDeliveryCertificate{}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

type WebsiteDeliveryCompetition struct {
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"` // 自定义字段
	Desc           *string                          `json:"desc,omitempty"`            // 竞赛描述
	Name           *string                          `json:"name,omitempty"`            // 竞赛名称
}

type WebsiteDeliveryCompetitionBuilder struct {
	customizedData     []*WebsiteDeliveryCustomizedData // 自定义字段
	customizedDataFlag bool
	desc               string // 竞赛描述
	descFlag           bool
	name               string // 竞赛名称
	nameFlag           bool
}

func NewWebsiteDeliveryCompetitionBuilder() *WebsiteDeliveryCompetitionBuilder {
	builder := &WebsiteDeliveryCompetitionBuilder{}
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteDeliveryCompetitionBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryCompetitionBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

// 竞赛描述
//
// 示例值：唱歌比赛
func (builder *WebsiteDeliveryCompetitionBuilder) Desc(desc string) *WebsiteDeliveryCompetitionBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 竞赛名称
//
// 示例值：青年歌手大赛
func (builder *WebsiteDeliveryCompetitionBuilder) Name(name string) *WebsiteDeliveryCompetitionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *WebsiteDeliveryCompetitionBuilder) Build() *WebsiteDeliveryCompetition {
	req := &WebsiteDeliveryCompetition{}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	return req
}

type WebsiteDeliveryCustomizedData struct {
	ObjectId *string `json:"object_id,omitempty"` // 自定义字段 ID
	Value    *string `json:"value,omitempty"`     // 自定义字段 value，格式见接口说明
}

type WebsiteDeliveryCustomizedDataBuilder struct {
	objectId     string // 自定义字段 ID
	objectIdFlag bool
	value        string // 自定义字段 value，格式见接口说明
	valueFlag    bool
}

func NewWebsiteDeliveryCustomizedDataBuilder() *WebsiteDeliveryCustomizedDataBuilder {
	builder := &WebsiteDeliveryCustomizedDataBuilder{}
	return builder
}

// 自定义字段 ID
//
// 示例值：6960663240925956649
func (builder *WebsiteDeliveryCustomizedDataBuilder) ObjectId(objectId string) *WebsiteDeliveryCustomizedDataBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}

// 自定义字段 value，格式见接口说明
//
// 示例值：AA
func (builder *WebsiteDeliveryCustomizedDataBuilder) Value(value string) *WebsiteDeliveryCustomizedDataBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *WebsiteDeliveryCustomizedDataBuilder) Build() *WebsiteDeliveryCustomizedData {
	req := &WebsiteDeliveryCustomizedData{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.valueFlag {
		req.Value = &builder.value

	}
	return req
}

type WebsiteDeliveryCustomizedDataParent struct {
	ObjectId *string                          `json:"object_id,omitempty"` // 自定义字段 ID
	Children []*WebsiteDeliveryCustomizedData `json:"children,omitempty"`  // 模块下的字段
}

type WebsiteDeliveryCustomizedDataParentBuilder struct {
	objectId     string // 自定义字段 ID
	objectIdFlag bool
	children     []*WebsiteDeliveryCustomizedData // 模块下的字段
	childrenFlag bool
}

func NewWebsiteDeliveryCustomizedDataParentBuilder() *WebsiteDeliveryCustomizedDataParentBuilder {
	builder := &WebsiteDeliveryCustomizedDataParentBuilder{}
	return builder
}

// 自定义字段 ID
//
// 示例值：6960663240925956651
func (builder *WebsiteDeliveryCustomizedDataParentBuilder) ObjectId(objectId string) *WebsiteDeliveryCustomizedDataParentBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}

// 模块下的字段
//
// 示例值：
func (builder *WebsiteDeliveryCustomizedDataParentBuilder) Children(children []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryCustomizedDataParentBuilder {
	builder.children = children
	builder.childrenFlag = true
	return builder
}

func (builder *WebsiteDeliveryCustomizedDataParentBuilder) Build() *WebsiteDeliveryCustomizedDataParent {
	req := &WebsiteDeliveryCustomizedDataParent{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.childrenFlag {
		req.Children = builder.children
	}
	return req
}

type WebsiteDeliveryDto struct {
	ApplicationId  *string `json:"application_id,omitempty"`   // 投递 ID
	Id             *string `json:"id,omitempty"`               // ID
	JobId          *string `json:"job_id,omitempty"`           // 职位 ID
	JobPostId      *string `json:"job_post_id,omitempty"`      // 职位广告 ID
	PortalResumeId *string `json:"portal_resume_id,omitempty"` // 官网简历 ID
	UserId         *string `json:"user_id,omitempty"`          // 官网用户 ID
	TalentId       *string `json:"talent_id,omitempty"`        // 人才 ID
}

type WebsiteDeliveryDtoBuilder struct {
	applicationId      string // 投递 ID
	applicationIdFlag  bool
	id                 string // ID
	idFlag             bool
	jobId              string // 职位 ID
	jobIdFlag          bool
	jobPostId          string // 职位广告 ID
	jobPostIdFlag      bool
	portalResumeId     string // 官网简历 ID
	portalResumeIdFlag bool
	userId             string // 官网用户 ID
	userIdFlag         bool
	talentId           string // 人才 ID
	talentIdFlag       bool
}

func NewWebsiteDeliveryDtoBuilder() *WebsiteDeliveryDtoBuilder {
	builder := &WebsiteDeliveryDtoBuilder{}
	return builder
}

// 投递 ID
//
// 示例值：6960663240925956657
func (builder *WebsiteDeliveryDtoBuilder) ApplicationId(applicationId string) *WebsiteDeliveryDtoBuilder {
	builder.applicationId = applicationId
	builder.applicationIdFlag = true
	return builder
}

// ID
//
// 示例值：6960663240925956655
func (builder *WebsiteDeliveryDtoBuilder) Id(id string) *WebsiteDeliveryDtoBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 职位 ID
//
// 示例值：6960663240925956659
func (builder *WebsiteDeliveryDtoBuilder) JobId(jobId string) *WebsiteDeliveryDtoBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 职位广告 ID
//
// 示例值：6960663240925956658
func (builder *WebsiteDeliveryDtoBuilder) JobPostId(jobPostId string) *WebsiteDeliveryDtoBuilder {
	builder.jobPostId = jobPostId
	builder.jobPostIdFlag = true
	return builder
}

// 官网简历 ID
//
// 示例值：6960663240925956660
func (builder *WebsiteDeliveryDtoBuilder) PortalResumeId(portalResumeId string) *WebsiteDeliveryDtoBuilder {
	builder.portalResumeId = portalResumeId
	builder.portalResumeIdFlag = true
	return builder
}

// 官网用户 ID
//
// 示例值：6960663240925956656
func (builder *WebsiteDeliveryDtoBuilder) UserId(userId string) *WebsiteDeliveryDtoBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 人才 ID
//
// 示例值：7095600054216542508
func (builder *WebsiteDeliveryDtoBuilder) TalentId(talentId string) *WebsiteDeliveryDtoBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

func (builder *WebsiteDeliveryDtoBuilder) Build() *WebsiteDeliveryDto {
	req := &WebsiteDeliveryDto{}
	if builder.applicationIdFlag {
		req.ApplicationId = &builder.applicationId

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.jobPostIdFlag {
		req.JobPostId = &builder.jobPostId

	}
	if builder.portalResumeIdFlag {
		req.PortalResumeId = &builder.portalResumeId

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId

	}
	return req
}

type WebsiteDeliveryEducation struct {
	EducationType   *int                             `json:"education_type,omitempty"`   // 学历类型
	EndTime         *int                             `json:"end_time,omitempty"`         // 结束时间 ,如果是至今传值 -1
	FieldOfStudy    *string                          `json:"field_of_study,omitempty"`   // 专业
	School          *string                          `json:"school,omitempty"`           // 学校
	StartTime       *int                             `json:"start_time,omitempty"`       // 开始时间
	AcademicRanking *int                             `json:"academic_ranking,omitempty"` // 专业排名
	CustomizedData  []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"`  // 自定义字段
	Degree          *int                             `json:"degree,omitempty"`           // 学位
}

type WebsiteDeliveryEducationBuilder struct {
	educationType       int // 学历类型
	educationTypeFlag   bool
	endTime             int // 结束时间 ,如果是至今传值 -1
	endTimeFlag         bool
	fieldOfStudy        string // 专业
	fieldOfStudyFlag    bool
	school              string // 学校
	schoolFlag          bool
	startTime           int // 开始时间
	startTimeFlag       bool
	academicRanking     int // 专业排名
	academicRankingFlag bool
	customizedData      []*WebsiteDeliveryCustomizedData // 自定义字段
	customizedDataFlag  bool
	degree              int // 学位
	degreeFlag          bool
}

func NewWebsiteDeliveryEducationBuilder() *WebsiteDeliveryEducationBuilder {
	builder := &WebsiteDeliveryEducationBuilder{}
	return builder
}

// 学历类型
//
// 示例值：1
func (builder *WebsiteDeliveryEducationBuilder) EducationType(educationType int) *WebsiteDeliveryEducationBuilder {
	builder.educationType = educationType
	builder.educationTypeFlag = true
	return builder
}

// 结束时间 ,如果是至今传值 -1
//
// 示例值：1618500278663
func (builder *WebsiteDeliveryEducationBuilder) EndTime(endTime int) *WebsiteDeliveryEducationBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 专业
//
// 示例值：汉语言文学
func (builder *WebsiteDeliveryEducationBuilder) FieldOfStudy(fieldOfStudy string) *WebsiteDeliveryEducationBuilder {
	builder.fieldOfStudy = fieldOfStudy
	builder.fieldOfStudyFlag = true
	return builder
}

// 学校
//
// 示例值：香港中文大学
func (builder *WebsiteDeliveryEducationBuilder) School(school string) *WebsiteDeliveryEducationBuilder {
	builder.school = school
	builder.schoolFlag = true
	return builder
}

// 开始时间
//
// 示例值：1609430400
func (builder *WebsiteDeliveryEducationBuilder) StartTime(startTime int) *WebsiteDeliveryEducationBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 专业排名
//
// 示例值：5
func (builder *WebsiteDeliveryEducationBuilder) AcademicRanking(academicRanking int) *WebsiteDeliveryEducationBuilder {
	builder.academicRanking = academicRanking
	builder.academicRankingFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteDeliveryEducationBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryEducationBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

// 学位
//
// 示例值：1
func (builder *WebsiteDeliveryEducationBuilder) Degree(degree int) *WebsiteDeliveryEducationBuilder {
	builder.degree = degree
	builder.degreeFlag = true
	return builder
}

func (builder *WebsiteDeliveryEducationBuilder) Build() *WebsiteDeliveryEducation {
	req := &WebsiteDeliveryEducation{}
	if builder.educationTypeFlag {
		req.EducationType = &builder.educationType

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.fieldOfStudyFlag {
		req.FieldOfStudy = &builder.fieldOfStudy

	}
	if builder.schoolFlag {
		req.School = &builder.school

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.academicRankingFlag {
		req.AcademicRanking = &builder.academicRanking

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.degreeFlag {
		req.Degree = &builder.degree

	}
	return req
}

type WebsiteDeliveryIdentification struct {
	IdentificationNumber *string `json:"identification_number,omitempty"` // 身份证件号码
	IdentificationType   *int    `json:"identification_type,omitempty"`   // 身份证件类型
}

type WebsiteDeliveryIdentificationBuilder struct {
	identificationNumber     string // 身份证件号码
	identificationNumberFlag bool
	identificationType       int // 身份证件类型
	identificationTypeFlag   bool
}

func NewWebsiteDeliveryIdentificationBuilder() *WebsiteDeliveryIdentificationBuilder {
	builder := &WebsiteDeliveryIdentificationBuilder{}
	return builder
}

// 身份证件号码
//
// 示例值：11002030131312312
func (builder *WebsiteDeliveryIdentificationBuilder) IdentificationNumber(identificationNumber string) *WebsiteDeliveryIdentificationBuilder {
	builder.identificationNumber = identificationNumber
	builder.identificationNumberFlag = true
	return builder
}

// 身份证件类型
//
// 示例值：1
func (builder *WebsiteDeliveryIdentificationBuilder) IdentificationType(identificationType int) *WebsiteDeliveryIdentificationBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

func (builder *WebsiteDeliveryIdentificationBuilder) Build() *WebsiteDeliveryIdentification {
	req := &WebsiteDeliveryIdentification{}
	if builder.identificationNumberFlag {
		req.IdentificationNumber = &builder.identificationNumber

	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType

	}
	return req
}

type WebsiteDeliveryInternship struct {
	Desc           *string                          `json:"desc,omitempty"`            // 描述
	EndTime        *int                             `json:"end_time,omitempty"`        // 结束时间, 如果是至今传值 -1
	StartTime      *int                             `json:"start_time,omitempty"`      // 开始时间
	Title          *string                          `json:"title,omitempty"`           // 职位名称
	Company        *string                          `json:"company,omitempty"`         // 公司
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"` // 自定义字段
}

type WebsiteDeliveryInternshipBuilder struct {
	desc               string // 描述
	descFlag           bool
	endTime            int // 结束时间, 如果是至今传值 -1
	endTimeFlag        bool
	startTime          int // 开始时间
	startTimeFlag      bool
	title              string // 职位名称
	titleFlag          bool
	company            string // 公司
	companyFlag        bool
	customizedData     []*WebsiteDeliveryCustomizedData // 自定义字段
	customizedDataFlag bool
}

func NewWebsiteDeliveryInternshipBuilder() *WebsiteDeliveryInternshipBuilder {
	builder := &WebsiteDeliveryInternshipBuilder{}
	return builder
}

// 描述
//
// 示例值：这是一家创业公司，非常不错
func (builder *WebsiteDeliveryInternshipBuilder) Desc(desc string) *WebsiteDeliveryInternshipBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 结束时间, 如果是至今传值 -1
//
// 示例值：1618500278667
func (builder *WebsiteDeliveryInternshipBuilder) EndTime(endTime int) *WebsiteDeliveryInternshipBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 开始时间
//
// 示例值：1609430400
func (builder *WebsiteDeliveryInternshipBuilder) StartTime(startTime int) *WebsiteDeliveryInternshipBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 职位名称
//
// 示例值：后端研发实习生
func (builder *WebsiteDeliveryInternshipBuilder) Title(title string) *WebsiteDeliveryInternshipBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 公司
//
// 示例值：字节跳动
func (builder *WebsiteDeliveryInternshipBuilder) Company(company string) *WebsiteDeliveryInternshipBuilder {
	builder.company = company
	builder.companyFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteDeliveryInternshipBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryInternshipBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *WebsiteDeliveryInternshipBuilder) Build() *WebsiteDeliveryInternship {
	req := &WebsiteDeliveryInternship{}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.companyFlag {
		req.Company = &builder.company

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type WebsiteDeliveryLanguage struct {
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"` // 自定义字段
	Language       *int                             `json:"language,omitempty"`        // 语言
	Proficiency    *int                             `json:"proficiency,omitempty"`     // 熟悉程度
}

type WebsiteDeliveryLanguageBuilder struct {
	customizedData     []*WebsiteDeliveryCustomizedData // 自定义字段
	customizedDataFlag bool
	language           int // 语言
	languageFlag       bool
	proficiency        int // 熟悉程度
	proficiencyFlag    bool
}

func NewWebsiteDeliveryLanguageBuilder() *WebsiteDeliveryLanguageBuilder {
	builder := &WebsiteDeliveryLanguageBuilder{}
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteDeliveryLanguageBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryLanguageBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

// 语言
//
// 示例值：1
func (builder *WebsiteDeliveryLanguageBuilder) Language(language int) *WebsiteDeliveryLanguageBuilder {
	builder.language = language
	builder.languageFlag = true
	return builder
}

// 熟悉程度
//
// 示例值：1
func (builder *WebsiteDeliveryLanguageBuilder) Proficiency(proficiency int) *WebsiteDeliveryLanguageBuilder {
	builder.proficiency = proficiency
	builder.proficiencyFlag = true
	return builder
}

func (builder *WebsiteDeliveryLanguageBuilder) Build() *WebsiteDeliveryLanguage {
	req := &WebsiteDeliveryLanguage{}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.languageFlag {
		req.Language = &builder.language

	}
	if builder.proficiencyFlag {
		req.Proficiency = &builder.proficiency

	}
	return req
}

type WebsiteDeliveryProject struct {
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"` // 自定义字段
	Desc           *string                          `json:"desc,omitempty"`            // 描述
	EndTime        *int                             `json:"end_time,omitempty"`        // 结束时间, 如果是至今传值-1
	Link           *string                          `json:"link,omitempty"`            // 项目链接
	Name           *string                          `json:"name,omitempty"`            // 项目名称
	Role           *string                          `json:"role,omitempty"`            // 角色
	StartTime      *int                             `json:"start_time,omitempty"`      // 开始时间
}

type WebsiteDeliveryProjectBuilder struct {
	customizedData     []*WebsiteDeliveryCustomizedData // 自定义字段
	customizedDataFlag bool
	desc               string // 描述
	descFlag           bool
	endTime            int // 结束时间, 如果是至今传值-1
	endTimeFlag        bool
	link               string // 项目链接
	linkFlag           bool
	name               string // 项目名称
	nameFlag           bool
	role               string // 角色
	roleFlag           bool
	startTime          int // 开始时间
	startTimeFlag      bool
}

func NewWebsiteDeliveryProjectBuilder() *WebsiteDeliveryProjectBuilder {
	builder := &WebsiteDeliveryProjectBuilder{}
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteDeliveryProjectBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryProjectBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

// 描述
//
// 示例值：项目描述：xxxx
func (builder *WebsiteDeliveryProjectBuilder) Desc(desc string) *WebsiteDeliveryProjectBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 结束时间, 如果是至今传值-1
//
// 示例值：1618500278669
func (builder *WebsiteDeliveryProjectBuilder) EndTime(endTime int) *WebsiteDeliveryProjectBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

// 项目链接
//
// 示例值：www.toutiao.com
func (builder *WebsiteDeliveryProjectBuilder) Link(link string) *WebsiteDeliveryProjectBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 项目名称
//
// 示例值：XXX项目重构
func (builder *WebsiteDeliveryProjectBuilder) Name(name string) *WebsiteDeliveryProjectBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 角色
//
// 示例值：项目经理
func (builder *WebsiteDeliveryProjectBuilder) Role(role string) *WebsiteDeliveryProjectBuilder {
	builder.role = role
	builder.roleFlag = true
	return builder
}

// 开始时间
//
// 示例值：1609430400
func (builder *WebsiteDeliveryProjectBuilder) StartTime(startTime int) *WebsiteDeliveryProjectBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

func (builder *WebsiteDeliveryProjectBuilder) Build() *WebsiteDeliveryProject {
	req := &WebsiteDeliveryProject{}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.roleFlag {
		req.Role = &builder.role

	}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	return req
}

type WebsiteDeliveryResume struct {
	InternshipList     []*WebsiteDeliveryInternship           `json:"internship_list,omitempty"`      // 实习经历
	BasicInfo          *WebsiteDeliveryBasicInfo              `json:"basic_info,omitempty"`           // 基本信息
	EducationList      []*WebsiteDeliveryEducation            `json:"education_list,omitempty"`       // 教育经历
	SelfEvaluation     *WebsiteDeliverySelfEvaluation         `json:"self_evaluation,omitempty"`      // 自我评价
	CareerList         []*WebsiteDeliveryCareer               `json:"career_list,omitempty"`          // 工作经历
	CustomizedData     []*WebsiteDeliveryCustomizedDataParent `json:"customized_data,omitempty"`      // 自定义模块
	ResumeAttachmentId *string                                `json:"resume_attachment_id,omitempty"` // 简历附件ID，使用「创建附件」生成
	SnsList            []*WebsiteDeliverySns                  `json:"sns_list,omitempty"`             // 社交账号
	WorksList          []*WebsiteDeliveryWorks                `json:"works_list,omitempty"`           // 作品
	AwardList          []*WebsiteDeliveryAward                `json:"award_list,omitempty"`           // 获奖记录
	ProjectList        []*WebsiteDeliveryProject              `json:"project_list,omitempty"`         // 项目经历
	LanguageList       []*WebsiteDeliveryLanguage             `json:"language_list,omitempty"`        // 语言能力
}

type WebsiteDeliveryResumeBuilder struct {
	internshipList         []*WebsiteDeliveryInternship // 实习经历
	internshipListFlag     bool
	basicInfo              *WebsiteDeliveryBasicInfo // 基本信息
	basicInfoFlag          bool
	educationList          []*WebsiteDeliveryEducation // 教育经历
	educationListFlag      bool
	selfEvaluation         *WebsiteDeliverySelfEvaluation // 自我评价
	selfEvaluationFlag     bool
	careerList             []*WebsiteDeliveryCareer // 工作经历
	careerListFlag         bool
	customizedData         []*WebsiteDeliveryCustomizedDataParent // 自定义模块
	customizedDataFlag     bool
	resumeAttachmentId     string // 简历附件ID，使用「创建附件」生成
	resumeAttachmentIdFlag bool
	snsList                []*WebsiteDeliverySns // 社交账号
	snsListFlag            bool
	worksList              []*WebsiteDeliveryWorks // 作品
	worksListFlag          bool
	awardList              []*WebsiteDeliveryAward // 获奖记录
	awardListFlag          bool
	projectList            []*WebsiteDeliveryProject // 项目经历
	projectListFlag        bool
	languageList           []*WebsiteDeliveryLanguage // 语言能力
	languageListFlag       bool
}

func NewWebsiteDeliveryResumeBuilder() *WebsiteDeliveryResumeBuilder {
	builder := &WebsiteDeliveryResumeBuilder{}
	return builder
}

// 实习经历
//
// 示例值：
func (builder *WebsiteDeliveryResumeBuilder) InternshipList(internshipList []*WebsiteDeliveryInternship) *WebsiteDeliveryResumeBuilder {
	builder.internshipList = internshipList
	builder.internshipListFlag = true
	return builder
}

// 基本信息
//
// 示例值：
func (builder *WebsiteDeliveryResumeBuilder) BasicInfo(basicInfo *WebsiteDeliveryBasicInfo) *WebsiteDeliveryResumeBuilder {
	builder.basicInfo = basicInfo
	builder.basicInfoFlag = true
	return builder
}

// 教育经历
//
// 示例值：
func (builder *WebsiteDeliveryResumeBuilder) EducationList(educationList []*WebsiteDeliveryEducation) *WebsiteDeliveryResumeBuilder {
	builder.educationList = educationList
	builder.educationListFlag = true
	return builder
}

// 自我评价
//
// 示例值：
func (builder *WebsiteDeliveryResumeBuilder) SelfEvaluation(selfEvaluation *WebsiteDeliverySelfEvaluation) *WebsiteDeliveryResumeBuilder {
	builder.selfEvaluation = selfEvaluation
	builder.selfEvaluationFlag = true
	return builder
}

// 工作经历
//
// 示例值：
func (builder *WebsiteDeliveryResumeBuilder) CareerList(careerList []*WebsiteDeliveryCareer) *WebsiteDeliveryResumeBuilder {
	builder.careerList = careerList
	builder.careerListFlag = true
	return builder
}

// 自定义模块
//
// 示例值：
func (builder *WebsiteDeliveryResumeBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedDataParent) *WebsiteDeliveryResumeBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

// 简历附件ID，使用「创建附件」生成
//
// 示例值：6960663240925956654
func (builder *WebsiteDeliveryResumeBuilder) ResumeAttachmentId(resumeAttachmentId string) *WebsiteDeliveryResumeBuilder {
	builder.resumeAttachmentId = resumeAttachmentId
	builder.resumeAttachmentIdFlag = true
	return builder
}

// 社交账号
//
// 示例值：
func (builder *WebsiteDeliveryResumeBuilder) SnsList(snsList []*WebsiteDeliverySns) *WebsiteDeliveryResumeBuilder {
	builder.snsList = snsList
	builder.snsListFlag = true
	return builder
}

// 作品
//
// 示例值：
func (builder *WebsiteDeliveryResumeBuilder) WorksList(worksList []*WebsiteDeliveryWorks) *WebsiteDeliveryResumeBuilder {
	builder.worksList = worksList
	builder.worksListFlag = true
	return builder
}

// 获奖记录
//
// 示例值：
func (builder *WebsiteDeliveryResumeBuilder) AwardList(awardList []*WebsiteDeliveryAward) *WebsiteDeliveryResumeBuilder {
	builder.awardList = awardList
	builder.awardListFlag = true
	return builder
}

// 项目经历
//
// 示例值：
func (builder *WebsiteDeliveryResumeBuilder) ProjectList(projectList []*WebsiteDeliveryProject) *WebsiteDeliveryResumeBuilder {
	builder.projectList = projectList
	builder.projectListFlag = true
	return builder
}

// 语言能力
//
// 示例值：
func (builder *WebsiteDeliveryResumeBuilder) LanguageList(languageList []*WebsiteDeliveryLanguage) *WebsiteDeliveryResumeBuilder {
	builder.languageList = languageList
	builder.languageListFlag = true
	return builder
}

func (builder *WebsiteDeliveryResumeBuilder) Build() *WebsiteDeliveryResume {
	req := &WebsiteDeliveryResume{}
	if builder.internshipListFlag {
		req.InternshipList = builder.internshipList
	}
	if builder.basicInfoFlag {
		req.BasicInfo = builder.basicInfo
	}
	if builder.educationListFlag {
		req.EducationList = builder.educationList
	}
	if builder.selfEvaluationFlag {
		req.SelfEvaluation = builder.selfEvaluation
	}
	if builder.careerListFlag {
		req.CareerList = builder.careerList
	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.resumeAttachmentIdFlag {
		req.ResumeAttachmentId = &builder.resumeAttachmentId

	}
	if builder.snsListFlag {
		req.SnsList = builder.snsList
	}
	if builder.worksListFlag {
		req.WorksList = builder.worksList
	}
	if builder.awardListFlag {
		req.AwardList = builder.awardList
	}
	if builder.projectListFlag {
		req.ProjectList = builder.projectList
	}
	if builder.languageListFlag {
		req.LanguageList = builder.languageList
	}
	return req
}

type WebsiteDeliverySelfEvaluation struct {
	Content        *string                          `json:"content,omitempty"`         // 内容
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"` // 自定义字段
}

type WebsiteDeliverySelfEvaluationBuilder struct {
	content            string // 内容
	contentFlag        bool
	customizedData     []*WebsiteDeliveryCustomizedData // 自定义字段
	customizedDataFlag bool
}

func NewWebsiteDeliverySelfEvaluationBuilder() *WebsiteDeliverySelfEvaluationBuilder {
	builder := &WebsiteDeliverySelfEvaluationBuilder{}
	return builder
}

// 内容
//
// 示例值：自我评价：平常心
func (builder *WebsiteDeliverySelfEvaluationBuilder) Content(content string) *WebsiteDeliverySelfEvaluationBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteDeliverySelfEvaluationBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliverySelfEvaluationBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *WebsiteDeliverySelfEvaluationBuilder) Build() *WebsiteDeliverySelfEvaluation {
	req := &WebsiteDeliverySelfEvaluation{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type WebsiteDeliverySns struct {
	SnsType        *int                             `json:"sns_type,omitempty"`        // 社交账号类型
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"` // 自定义字段
	Link           *string                          `json:"link,omitempty"`            // 链接
}

type WebsiteDeliverySnsBuilder struct {
	snsType            int // 社交账号类型
	snsTypeFlag        bool
	customizedData     []*WebsiteDeliveryCustomizedData // 自定义字段
	customizedDataFlag bool
	link               string // 链接
	linkFlag           bool
}

func NewWebsiteDeliverySnsBuilder() *WebsiteDeliverySnsBuilder {
	builder := &WebsiteDeliverySnsBuilder{}
	return builder
}

// 社交账号类型
//
// 示例值：1
func (builder *WebsiteDeliverySnsBuilder) SnsType(snsType int) *WebsiteDeliverySnsBuilder {
	builder.snsType = snsType
	builder.snsTypeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteDeliverySnsBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliverySnsBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

// 链接
//
// 示例值：toutiao.com
func (builder *WebsiteDeliverySnsBuilder) Link(link string) *WebsiteDeliverySnsBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

func (builder *WebsiteDeliverySnsBuilder) Build() *WebsiteDeliverySns {
	req := &WebsiteDeliverySns{}
	if builder.snsTypeFlag {
		req.SnsType = &builder.snsType

	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	return req
}

type WebsiteDeliveryWorks struct {
	Desc           *string                          `json:"desc,omitempty"`            // 作品描述
	Link           *string                          `json:"link,omitempty"`            // 作品链接
	Attachment     *WebsiteDeliveryWorksAttachment  `json:"attachment,omitempty"`      // 附件
	CustomizedData []*WebsiteDeliveryCustomizedData `json:"customized_data,omitempty"` // 自定义字段
}

type WebsiteDeliveryWorksBuilder struct {
	desc               string // 作品描述
	descFlag           bool
	link               string // 作品链接
	linkFlag           bool
	attachment         *WebsiteDeliveryWorksAttachment // 附件
	attachmentFlag     bool
	customizedData     []*WebsiteDeliveryCustomizedData // 自定义字段
	customizedDataFlag bool
}

func NewWebsiteDeliveryWorksBuilder() *WebsiteDeliveryWorksBuilder {
	builder := &WebsiteDeliveryWorksBuilder{}
	return builder
}

// 作品描述
//
// 示例值：作品描述：xxxx
func (builder *WebsiteDeliveryWorksBuilder) Desc(desc string) *WebsiteDeliveryWorksBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 作品链接
//
// 示例值：www.toutiao.com
func (builder *WebsiteDeliveryWorksBuilder) Link(link string) *WebsiteDeliveryWorksBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

// 附件
//
// 示例值：
func (builder *WebsiteDeliveryWorksBuilder) Attachment(attachment *WebsiteDeliveryWorksAttachment) *WebsiteDeliveryWorksBuilder {
	builder.attachment = attachment
	builder.attachmentFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteDeliveryWorksBuilder) CustomizedData(customizedData []*WebsiteDeliveryCustomizedData) *WebsiteDeliveryWorksBuilder {
	builder.customizedData = customizedData
	builder.customizedDataFlag = true
	return builder
}

func (builder *WebsiteDeliveryWorksBuilder) Build() *WebsiteDeliveryWorks {
	req := &WebsiteDeliveryWorks{}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	if builder.attachmentFlag {
		req.Attachment = builder.attachment
	}
	if builder.customizedDataFlag {
		req.CustomizedData = builder.customizedData
	}
	return req
}

type WebsiteDeliveryWorksAttachment struct {
	FileId *string `json:"file_id,omitempty"` // 文件ID，使用「创建附件」生成
}

type WebsiteDeliveryWorksAttachmentBuilder struct {
	fileId     string // 文件ID，使用「创建附件」生成
	fileIdFlag bool
}

func NewWebsiteDeliveryWorksAttachmentBuilder() *WebsiteDeliveryWorksAttachmentBuilder {
	builder := &WebsiteDeliveryWorksAttachmentBuilder{}
	return builder
}

// 文件ID，使用「创建附件」生成
//
// 示例值：6982104077248219436
func (builder *WebsiteDeliveryWorksAttachmentBuilder) FileId(fileId string) *WebsiteDeliveryWorksAttachmentBuilder {
	builder.fileId = fileId
	builder.fileIdFlag = true
	return builder
}

func (builder *WebsiteDeliveryWorksAttachmentBuilder) Build() *WebsiteDeliveryWorksAttachment {
	req := &WebsiteDeliveryWorksAttachment{}
	if builder.fileIdFlag {
		req.FileId = &builder.fileId

	}
	return req
}

type WebsiteJobPost struct {
	Id                 *string                         `json:"id,omitempty"`                   // 职位广告 ID
	Title              *string                         `json:"title,omitempty"`                // 标题
	JobId              *string                         `json:"job_id,omitempty"`               // 职位 ID
	JobCode            *string                         `json:"job_code,omitempty"`             // 职位编码
	JobExpireTime      *string                         `json:"job_expire_time,omitempty"`      // 职位过期时间，「null」代表「长期有效」
	JobActiveStatus    *int                            `json:"job_active_status,omitempty"`    // 职位状态
	JobProcessType     *int                            `json:"job_process_type,omitempty"`     // 职位流程类型
	JobRecruitmentType *IdNameObject                   `json:"job_recruitment_type,omitempty"` // 职位雇佣类型
	JobDepartment      *IdNameObject                   `json:"job_department,omitempty"`       // 职位部门
	JobType            *IdNameObject                   `json:"job_type,omitempty"`             // 职位类型
	Address            *CommonAddress                  `json:"address,omitempty"`              // 职位地址
	MinSalary          *string                         `json:"min_salary,omitempty"`           // 月薪范围-最低薪资
	MaxSalary          *string                         `json:"max_salary,omitempty"`           // 月薪范围-最高薪资
	RequiredDegree     *int                            `json:"required_degree,omitempty"`      // 学历要求
	Experience         *int                            `json:"experience,omitempty"`           // 经验
	Headcount          *int                            `json:"headcount,omitempty"`            // 数量
	HighLightList      []*IdNameObject                 `json:"high_light_list,omitempty"`      // 职位亮点
	Description        *string                         `json:"description,omitempty"`          // 职位描述
	Requirement        *string                         `json:"requirement,omitempty"`          // 职位要求
	Creator            *IdNameObject                   `json:"creator,omitempty"`              // 创建人
	CreateTime         *string                         `json:"create_time,omitempty"`          // 创建时间
	ModifyTime         *string                         `json:"modify_time,omitempty"`          // 修改时间
	PublishTime        *string                         `json:"publish_time,omitempty"`         // 发布时间
	CustomizedDataList []*WebsiteJobPostCustomizedData `json:"customized_data_list,omitempty"` // 自定义字段
	JobFunction        *IdNameObject                   `json:"job_function,omitempty"`         // 职能分类
	Subject            *IdNameObject                   `json:"subject,omitempty"`              // 职位项目
	AddressList        []*CommonAddress                `json:"address_list,omitempty"`         // 职位广告地址列表
}

type WebsiteJobPostBuilder struct {
	id                     string // 职位广告 ID
	idFlag                 bool
	title                  string // 标题
	titleFlag              bool
	jobId                  string // 职位 ID
	jobIdFlag              bool
	jobCode                string // 职位编码
	jobCodeFlag            bool
	jobExpireTime          string // 职位过期时间，「null」代表「长期有效」
	jobExpireTimeFlag      bool
	jobActiveStatus        int // 职位状态
	jobActiveStatusFlag    bool
	jobProcessType         int // 职位流程类型
	jobProcessTypeFlag     bool
	jobRecruitmentType     *IdNameObject // 职位雇佣类型
	jobRecruitmentTypeFlag bool
	jobDepartment          *IdNameObject // 职位部门
	jobDepartmentFlag      bool
	jobType                *IdNameObject // 职位类型
	jobTypeFlag            bool
	address                *CommonAddress // 职位地址
	addressFlag            bool
	minSalary              string // 月薪范围-最低薪资
	minSalaryFlag          bool
	maxSalary              string // 月薪范围-最高薪资
	maxSalaryFlag          bool
	requiredDegree         int // 学历要求
	requiredDegreeFlag     bool
	experience             int // 经验
	experienceFlag         bool
	headcount              int // 数量
	headcountFlag          bool
	highLightList          []*IdNameObject // 职位亮点
	highLightListFlag      bool
	description            string // 职位描述
	descriptionFlag        bool
	requirement            string // 职位要求
	requirementFlag        bool
	creator                *IdNameObject // 创建人
	creatorFlag            bool
	createTime             string // 创建时间
	createTimeFlag         bool
	modifyTime             string // 修改时间
	modifyTimeFlag         bool
	publishTime            string // 发布时间
	publishTimeFlag        bool
	customizedDataList     []*WebsiteJobPostCustomizedData // 自定义字段
	customizedDataListFlag bool
	jobFunction            *IdNameObject // 职能分类
	jobFunctionFlag        bool
	subject                *IdNameObject // 职位项目
	subjectFlag            bool
	addressList            []*CommonAddress // 职位广告地址列表
	addressListFlag        bool
}

func NewWebsiteJobPostBuilder() *WebsiteJobPostBuilder {
	builder := &WebsiteJobPostBuilder{}
	return builder
}

// 职位广告 ID
//
// 示例值：1213213123123
func (builder *WebsiteJobPostBuilder) Id(id string) *WebsiteJobPostBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 标题
//
// 示例值：测试
func (builder *WebsiteJobPostBuilder) Title(title string) *WebsiteJobPostBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 职位 ID
//
// 示例值：xxx
func (builder *WebsiteJobPostBuilder) JobId(jobId string) *WebsiteJobPostBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 职位编码
//
// 示例值：007
func (builder *WebsiteJobPostBuilder) JobCode(jobCode string) *WebsiteJobPostBuilder {
	builder.jobCode = jobCode
	builder.jobCodeFlag = true
	return builder
}

// 职位过期时间，「null」代表「长期有效」
//
// 示例值：1111
func (builder *WebsiteJobPostBuilder) JobExpireTime(jobExpireTime string) *WebsiteJobPostBuilder {
	builder.jobExpireTime = jobExpireTime
	builder.jobExpireTimeFlag = true
	return builder
}

// 职位状态
//
// 示例值：1
func (builder *WebsiteJobPostBuilder) JobActiveStatus(jobActiveStatus int) *WebsiteJobPostBuilder {
	builder.jobActiveStatus = jobActiveStatus
	builder.jobActiveStatusFlag = true
	return builder
}

// 职位流程类型
//
// 示例值：1
func (builder *WebsiteJobPostBuilder) JobProcessType(jobProcessType int) *WebsiteJobPostBuilder {
	builder.jobProcessType = jobProcessType
	builder.jobProcessTypeFlag = true
	return builder
}

// 职位雇佣类型
//
// 示例值：
func (builder *WebsiteJobPostBuilder) JobRecruitmentType(jobRecruitmentType *IdNameObject) *WebsiteJobPostBuilder {
	builder.jobRecruitmentType = jobRecruitmentType
	builder.jobRecruitmentTypeFlag = true
	return builder
}

// 职位部门
//
// 示例值：
func (builder *WebsiteJobPostBuilder) JobDepartment(jobDepartment *IdNameObject) *WebsiteJobPostBuilder {
	builder.jobDepartment = jobDepartment
	builder.jobDepartmentFlag = true
	return builder
}

// 职位类型
//
// 示例值：
func (builder *WebsiteJobPostBuilder) JobType(jobType *IdNameObject) *WebsiteJobPostBuilder {
	builder.jobType = jobType
	builder.jobTypeFlag = true
	return builder
}

// 职位地址
//
// 示例值：
func (builder *WebsiteJobPostBuilder) Address(address *CommonAddress) *WebsiteJobPostBuilder {
	builder.address = address
	builder.addressFlag = true
	return builder
}

// 月薪范围-最低薪资
//
// 示例值：5000
func (builder *WebsiteJobPostBuilder) MinSalary(minSalary string) *WebsiteJobPostBuilder {
	builder.minSalary = minSalary
	builder.minSalaryFlag = true
	return builder
}

// 月薪范围-最高薪资
//
// 示例值：10000
func (builder *WebsiteJobPostBuilder) MaxSalary(maxSalary string) *WebsiteJobPostBuilder {
	builder.maxSalary = maxSalary
	builder.maxSalaryFlag = true
	return builder
}

// 学历要求
//
// 示例值：1
func (builder *WebsiteJobPostBuilder) RequiredDegree(requiredDegree int) *WebsiteJobPostBuilder {
	builder.requiredDegree = requiredDegree
	builder.requiredDegreeFlag = true
	return builder
}

// 经验
//
// 示例值：1
func (builder *WebsiteJobPostBuilder) Experience(experience int) *WebsiteJobPostBuilder {
	builder.experience = experience
	builder.experienceFlag = true
	return builder
}

// 数量
//
// 示例值：12
func (builder *WebsiteJobPostBuilder) Headcount(headcount int) *WebsiteJobPostBuilder {
	builder.headcount = headcount
	builder.headcountFlag = true
	return builder
}

// 职位亮点
//
// 示例值：
func (builder *WebsiteJobPostBuilder) HighLightList(highLightList []*IdNameObject) *WebsiteJobPostBuilder {
	builder.highLightList = highLightList
	builder.highLightListFlag = true
	return builder
}

// 职位描述
//
// 示例值：负责软件开发
func (builder *WebsiteJobPostBuilder) Description(description string) *WebsiteJobPostBuilder {
	builder.description = description
	builder.descriptionFlag = true
	return builder
}

// 职位要求
//
// 示例值：大专
func (builder *WebsiteJobPostBuilder) Requirement(requirement string) *WebsiteJobPostBuilder {
	builder.requirement = requirement
	builder.requirementFlag = true
	return builder
}

// 创建人
//
// 示例值：
func (builder *WebsiteJobPostBuilder) Creator(creator *IdNameObject) *WebsiteJobPostBuilder {
	builder.creator = creator
	builder.creatorFlag = true
	return builder
}

// 创建时间
//
// 示例值：1111
func (builder *WebsiteJobPostBuilder) CreateTime(createTime string) *WebsiteJobPostBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 修改时间
//
// 示例值：222
func (builder *WebsiteJobPostBuilder) ModifyTime(modifyTime string) *WebsiteJobPostBuilder {
	builder.modifyTime = modifyTime
	builder.modifyTimeFlag = true
	return builder
}

// 发布时间
//
// 示例值：333
func (builder *WebsiteJobPostBuilder) PublishTime(publishTime string) *WebsiteJobPostBuilder {
	builder.publishTime = publishTime
	builder.publishTimeFlag = true
	return builder
}

// 自定义字段
//
// 示例值：
func (builder *WebsiteJobPostBuilder) CustomizedDataList(customizedDataList []*WebsiteJobPostCustomizedData) *WebsiteJobPostBuilder {
	builder.customizedDataList = customizedDataList
	builder.customizedDataListFlag = true
	return builder
}

// 职能分类
//
// 示例值：
func (builder *WebsiteJobPostBuilder) JobFunction(jobFunction *IdNameObject) *WebsiteJobPostBuilder {
	builder.jobFunction = jobFunction
	builder.jobFunctionFlag = true
	return builder
}

// 职位项目
//
// 示例值：
func (builder *WebsiteJobPostBuilder) Subject(subject *IdNameObject) *WebsiteJobPostBuilder {
	builder.subject = subject
	builder.subjectFlag = true
	return builder
}

// 职位广告地址列表
//
// 示例值：
func (builder *WebsiteJobPostBuilder) AddressList(addressList []*CommonAddress) *WebsiteJobPostBuilder {
	builder.addressList = addressList
	builder.addressListFlag = true
	return builder
}

func (builder *WebsiteJobPostBuilder) Build() *WebsiteJobPost {
	req := &WebsiteJobPost{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId

	}
	if builder.jobCodeFlag {
		req.JobCode = &builder.jobCode

	}
	if builder.jobExpireTimeFlag {
		req.JobExpireTime = &builder.jobExpireTime

	}
	if builder.jobActiveStatusFlag {
		req.JobActiveStatus = &builder.jobActiveStatus

	}
	if builder.jobProcessTypeFlag {
		req.JobProcessType = &builder.jobProcessType

	}
	if builder.jobRecruitmentTypeFlag {
		req.JobRecruitmentType = builder.jobRecruitmentType
	}
	if builder.jobDepartmentFlag {
		req.JobDepartment = builder.jobDepartment
	}
	if builder.jobTypeFlag {
		req.JobType = builder.jobType
	}
	if builder.addressFlag {
		req.Address = builder.address
	}
	if builder.minSalaryFlag {
		req.MinSalary = &builder.minSalary

	}
	if builder.maxSalaryFlag {
		req.MaxSalary = &builder.maxSalary

	}
	if builder.requiredDegreeFlag {
		req.RequiredDegree = &builder.requiredDegree

	}
	if builder.experienceFlag {
		req.Experience = &builder.experience

	}
	if builder.headcountFlag {
		req.Headcount = &builder.headcount

	}
	if builder.highLightListFlag {
		req.HighLightList = builder.highLightList
	}
	if builder.descriptionFlag {
		req.Description = &builder.description

	}
	if builder.requirementFlag {
		req.Requirement = &builder.requirement

	}
	if builder.creatorFlag {
		req.Creator = builder.creator
	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.modifyTimeFlag {
		req.ModifyTime = &builder.modifyTime

	}
	if builder.publishTimeFlag {
		req.PublishTime = &builder.publishTime

	}
	if builder.customizedDataListFlag {
		req.CustomizedDataList = builder.customizedDataList
	}
	if builder.jobFunctionFlag {
		req.JobFunction = builder.jobFunction
	}
	if builder.subjectFlag {
		req.Subject = builder.subject
	}
	if builder.addressListFlag {
		req.AddressList = builder.addressList
	}
	return req
}

type WebsiteJobPostCustomizedData struct {
	ObjectId   *string                        `json:"object_id,omitempty"`   // 自定义字段 ID
	Name       *I18n                          `json:"name,omitempty"`        // 字段名称
	ObjectType *int                           `json:"object_type,omitempty"` // 字段类型
	Value      *WebsiteJobPostCustomizedValue `json:"value,omitempty"`       // 自定义字段值
}

type WebsiteJobPostCustomizedDataBuilder struct {
	objectId       string // 自定义字段 ID
	objectIdFlag   bool
	name           *I18n // 字段名称
	nameFlag       bool
	objectType     int // 字段类型
	objectTypeFlag bool
	value          *WebsiteJobPostCustomizedValue // 自定义字段值
	valueFlag      bool
}

func NewWebsiteJobPostCustomizedDataBuilder() *WebsiteJobPostCustomizedDataBuilder {
	builder := &WebsiteJobPostCustomizedDataBuilder{}
	return builder
}

// 自定义字段 ID
//
// 示例值：xxxx
func (builder *WebsiteJobPostCustomizedDataBuilder) ObjectId(objectId string) *WebsiteJobPostCustomizedDataBuilder {
	builder.objectId = objectId
	builder.objectIdFlag = true
	return builder
}

// 字段名称
//
// 示例值：
func (builder *WebsiteJobPostCustomizedDataBuilder) Name(name *I18n) *WebsiteJobPostCustomizedDataBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 字段类型
//
// 示例值：1
func (builder *WebsiteJobPostCustomizedDataBuilder) ObjectType(objectType int) *WebsiteJobPostCustomizedDataBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}

// 自定义字段值
//
// 示例值：
func (builder *WebsiteJobPostCustomizedDataBuilder) Value(value *WebsiteJobPostCustomizedValue) *WebsiteJobPostCustomizedDataBuilder {
	builder.value = value
	builder.valueFlag = true
	return builder
}

func (builder *WebsiteJobPostCustomizedDataBuilder) Build() *WebsiteJobPostCustomizedData {
	req := &WebsiteJobPostCustomizedData{}
	if builder.objectIdFlag {
		req.ObjectId = &builder.objectId

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.valueFlag {
		req.Value = builder.value
	}
	return req
}

type WebsiteJobPostCustomizedOption struct {
	Key  *string `json:"key,omitempty"`  // 选项 ID
	Name *I18n   `json:"name,omitempty"` // 选项名称
}

type WebsiteJobPostCustomizedOptionBuilder struct {
	key      string // 选项 ID
	keyFlag  bool
	name     *I18n // 选项名称
	nameFlag bool
}

func NewWebsiteJobPostCustomizedOptionBuilder() *WebsiteJobPostCustomizedOptionBuilder {
	builder := &WebsiteJobPostCustomizedOptionBuilder{}
	return builder
}

// 选项 ID
//
// 示例值：AA
func (builder *WebsiteJobPostCustomizedOptionBuilder) Key(key string) *WebsiteJobPostCustomizedOptionBuilder {
	builder.key = key
	builder.keyFlag = true
	return builder
}

// 选项名称
//
// 示例值：
func (builder *WebsiteJobPostCustomizedOptionBuilder) Name(name *I18n) *WebsiteJobPostCustomizedOptionBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

func (builder *WebsiteJobPostCustomizedOptionBuilder) Build() *WebsiteJobPostCustomizedOption {
	req := &WebsiteJobPostCustomizedOption{}
	if builder.keyFlag {
		req.Key = &builder.key

	}
	if builder.nameFlag {
		req.Name = builder.name
	}
	return req
}

type WebsiteJobPostCustomizedTimeRange struct {
	StartTime *string `json:"start_time,omitempty"` // 开始时间
	EndTime   *string `json:"end_time,omitempty"`   // 结束时间
}

type WebsiteJobPostCustomizedTimeRangeBuilder struct {
	startTime     string // 开始时间
	startTimeFlag bool
	endTime       string // 结束时间
	endTimeFlag   bool
}

func NewWebsiteJobPostCustomizedTimeRangeBuilder() *WebsiteJobPostCustomizedTimeRangeBuilder {
	builder := &WebsiteJobPostCustomizedTimeRangeBuilder{}
	return builder
}

// 开始时间
//
// 示例值：AA
func (builder *WebsiteJobPostCustomizedTimeRangeBuilder) StartTime(startTime string) *WebsiteJobPostCustomizedTimeRangeBuilder {
	builder.startTime = startTime
	builder.startTimeFlag = true
	return builder
}

// 结束时间
//
// 示例值：AA
func (builder *WebsiteJobPostCustomizedTimeRangeBuilder) EndTime(endTime string) *WebsiteJobPostCustomizedTimeRangeBuilder {
	builder.endTime = endTime
	builder.endTimeFlag = true
	return builder
}

func (builder *WebsiteJobPostCustomizedTimeRangeBuilder) Build() *WebsiteJobPostCustomizedTimeRange {
	req := &WebsiteJobPostCustomizedTimeRange{}
	if builder.startTimeFlag {
		req.StartTime = &builder.startTime

	}
	if builder.endTimeFlag {
		req.EndTime = &builder.endTime

	}
	return req
}

type WebsiteJobPostCustomizedValue struct {
	Content    *string                            `json:"content,omitempty"`     // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	Option     *WebsiteJobPostCustomizedOption    `json:"option,omitempty"`      // 当字段类型为单选时，从此字段取值
	OptionList []*WebsiteJobPostCustomizedOption  `json:"option_list,omitempty"` // 当字段类型为多选时，从此字段取值
	TimeRange  *WebsiteJobPostCustomizedTimeRange `json:"time_range,omitempty"`  // 当字段类型为时间段时，从此字段取值
	Time       *string                            `json:"time,omitempty"`        // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
	Number     *string                            `json:"number,omitempty"`      // 当字段类型为数字时，从此字段取值
}

type WebsiteJobPostCustomizedValueBuilder struct {
	content        string // 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
	contentFlag    bool
	option         *WebsiteJobPostCustomizedOption // 当字段类型为单选时，从此字段取值
	optionFlag     bool
	optionList     []*WebsiteJobPostCustomizedOption // 当字段类型为多选时，从此字段取值
	optionListFlag bool
	timeRange      *WebsiteJobPostCustomizedTimeRange // 当字段类型为时间段时，从此字段取值
	timeRangeFlag  bool
	time           string // 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
	timeFlag       bool
	number         string // 当字段类型为数字时，从此字段取值
	numberFlag     bool
}

func NewWebsiteJobPostCustomizedValueBuilder() *WebsiteJobPostCustomizedValueBuilder {
	builder := &WebsiteJobPostCustomizedValueBuilder{}
	return builder
}

// 当字段类型为单行文本、多行文本、模块、默认字段时，从此字段取值
//
// 示例值：text
func (builder *WebsiteJobPostCustomizedValueBuilder) Content(content string) *WebsiteJobPostCustomizedValueBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

// 当字段类型为单选时，从此字段取值
//
// 示例值：
func (builder *WebsiteJobPostCustomizedValueBuilder) Option(option *WebsiteJobPostCustomizedOption) *WebsiteJobPostCustomizedValueBuilder {
	builder.option = option
	builder.optionFlag = true
	return builder
}

// 当字段类型为多选时，从此字段取值
//
// 示例值：
func (builder *WebsiteJobPostCustomizedValueBuilder) OptionList(optionList []*WebsiteJobPostCustomizedOption) *WebsiteJobPostCustomizedValueBuilder {
	builder.optionList = optionList
	builder.optionListFlag = true
	return builder
}

// 当字段类型为时间段时，从此字段取值
//
// 示例值：
func (builder *WebsiteJobPostCustomizedValueBuilder) TimeRange(timeRange *WebsiteJobPostCustomizedTimeRange) *WebsiteJobPostCustomizedValueBuilder {
	builder.timeRange = timeRange
	builder.timeRangeFlag = true
	return builder
}

// 当字段类型为日期选择、月份选择、年份选择时，从此字段取值，该字段是毫秒级时间戳
//
// 示例值：1625456721000
func (builder *WebsiteJobPostCustomizedValueBuilder) Time(time string) *WebsiteJobPostCustomizedValueBuilder {
	builder.time = time
	builder.timeFlag = true
	return builder
}

// 当字段类型为数字时，从此字段取值
//
// 示例值：111
func (builder *WebsiteJobPostCustomizedValueBuilder) Number(number string) *WebsiteJobPostCustomizedValueBuilder {
	builder.number = number
	builder.numberFlag = true
	return builder
}

func (builder *WebsiteJobPostCustomizedValueBuilder) Build() *WebsiteJobPostCustomizedValue {
	req := &WebsiteJobPostCustomizedValue{}
	if builder.contentFlag {
		req.Content = &builder.content

	}
	if builder.optionFlag {
		req.Option = builder.option
	}
	if builder.optionListFlag {
		req.OptionList = builder.optionList
	}
	if builder.timeRangeFlag {
		req.TimeRange = builder.timeRange
	}
	if builder.timeFlag {
		req.Time = &builder.time

	}
	if builder.numberFlag {
		req.Number = &builder.number

	}
	return req
}

type WebsiteUser struct {
	Id                *string `json:"id,omitempty"`                  // 用户 ID
	Name              *string `json:"name,omitempty"`                // 姓名
	Email             *string `json:"email,omitempty"`               // 邮箱
	ExternalId        *string `json:"external_id,omitempty"`         // 外部用户 ID
	Mobile            *string `json:"mobile,omitempty"`              // 电话，请和区号对应的国家码一并提供
	MobileCountryCode *string `json:"mobile_country_code,omitempty"` // 国家码，请和电话一并提供，可从「获取地址码」查询
}

type WebsiteUserBuilder struct {
	id                    string // 用户 ID
	idFlag                bool
	name                  string // 姓名
	nameFlag              bool
	email                 string // 邮箱
	emailFlag             bool
	externalId            string // 外部用户 ID
	externalIdFlag        bool
	mobile                string // 电话，请和区号对应的国家码一并提供
	mobileFlag            bool
	mobileCountryCode     string // 国家码，请和电话一并提供，可从「获取地址码」查询
	mobileCountryCodeFlag bool
}

func NewWebsiteUserBuilder() *WebsiteUserBuilder {
	builder := &WebsiteUserBuilder{}
	return builder
}

// 用户 ID
//
// 示例值：6960663240925956620
func (builder *WebsiteUserBuilder) Id(id string) *WebsiteUserBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 姓名
//
// 示例值：dan27
func (builder *WebsiteUserBuilder) Name(name string) *WebsiteUserBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 邮箱
//
// 示例值：dan27@163.com
func (builder *WebsiteUserBuilder) Email(email string) *WebsiteUserBuilder {
	builder.email = email
	builder.emailFlag = true
	return builder
}

// 外部用户 ID
//
// 示例值：6960663240925956621
func (builder *WebsiteUserBuilder) ExternalId(externalId string) *WebsiteUserBuilder {
	builder.externalId = externalId
	builder.externalIdFlag = true
	return builder
}

// 电话，请和区号对应的国家码一并提供
//
// 示例值：182900291190
func (builder *WebsiteUserBuilder) Mobile(mobile string) *WebsiteUserBuilder {
	builder.mobile = mobile
	builder.mobileFlag = true
	return builder
}

// 国家码，请和电话一并提供，可从「获取地址码」查询
//
// 示例值：CN_1
func (builder *WebsiteUserBuilder) MobileCountryCode(mobileCountryCode string) *WebsiteUserBuilder {
	builder.mobileCountryCode = mobileCountryCode
	builder.mobileCountryCodeFlag = true
	return builder
}

func (builder *WebsiteUserBuilder) Build() *WebsiteUser {
	req := &WebsiteUser{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.emailFlag {
		req.Email = &builder.email

	}
	if builder.externalIdFlag {
		req.ExternalId = &builder.externalId

	}
	if builder.mobileFlag {
		req.Mobile = &builder.mobile

	}
	if builder.mobileCountryCodeFlag {
		req.MobileCountryCode = &builder.mobileCountryCode

	}
	return req
}

type WorksInfo struct {
	AttachmentId *string `json:"attachment_id,omitempty"` // 作品集附件ID
	Desc         *string `json:"desc,omitempty"`          // 作品描述
	Link         *string `json:"link,omitempty"`          // 作品链接
}

type WorksInfoBuilder struct {
	attachmentId     string // 作品集附件ID
	attachmentIdFlag bool
	desc             string // 作品描述
	descFlag         bool
	link             string // 作品链接
	linkFlag         bool
}

func NewWorksInfoBuilder() *WorksInfoBuilder {
	builder := &WorksInfoBuilder{}
	return builder
}

// 作品集附件ID
//
// 示例值：
func (builder *WorksInfoBuilder) AttachmentId(attachmentId string) *WorksInfoBuilder {
	builder.attachmentId = attachmentId
	builder.attachmentIdFlag = true
	return builder
}

// 作品描述
//
// 示例值：
func (builder *WorksInfoBuilder) Desc(desc string) *WorksInfoBuilder {
	builder.desc = desc
	builder.descFlag = true
	return builder
}

// 作品链接
//
// 示例值：
func (builder *WorksInfoBuilder) Link(link string) *WorksInfoBuilder {
	builder.link = link
	builder.linkFlag = true
	return builder
}

func (builder *WorksInfoBuilder) Build() *WorksInfo {
	req := &WorksInfo{}
	if builder.attachmentIdFlag {
		req.AttachmentId = &builder.attachmentId

	}
	if builder.descFlag {
		req.Desc = &builder.desc

	}
	if builder.linkFlag {
		req.Link = &builder.link

	}
	return req
}

type CreateApplicationReqBodyBuilder struct {
	talentId                             string // 人才ID
	talentIdFlag                         bool
	jobId                                string // 职位ID
	jobIdFlag                            bool
	resumeSourceId                       string // 简历来源 ID，可通过「获取简历来源」接口查询。若简历来源类型属于「员工转岗」或「实习生转正」，人才需处于已入职状态。
	resumeSourceIdFlag                   bool
	applicationPreferredCityCodeList     []string // 意向投递城市列表，可从「获取职位信息」返回的工作地点列表获取
	applicationPreferredCityCodeListFlag bool
}

func NewCreateApplicationReqBodyBuilder() *CreateApplicationReqBodyBuilder {
	builder := &CreateApplicationReqBodyBuilder{}
	return builder
}

// 人才ID
//
//示例值：12312312312
func (builder *CreateApplicationReqBodyBuilder) TalentId(talentId string) *CreateApplicationReqBodyBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 职位ID
//
//示例值：12312312312
func (builder *CreateApplicationReqBodyBuilder) JobId(jobId string) *CreateApplicationReqBodyBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 简历来源 ID，可通过「获取简历来源」接口查询。若简历来源类型属于「员工转岗」或「实习生转正」，人才需处于已入职状态。
//
//示例值：7115289562569591070
func (builder *CreateApplicationReqBodyBuilder) ResumeSourceId(resumeSourceId string) *CreateApplicationReqBodyBuilder {
	builder.resumeSourceId = resumeSourceId
	builder.resumeSourceIdFlag = true
	return builder
}

// 意向投递城市列表，可从「获取职位信息」返回的工作地点列表获取
//
//示例值：["CT_1"]
func (builder *CreateApplicationReqBodyBuilder) ApplicationPreferredCityCodeList(applicationPreferredCityCodeList []string) *CreateApplicationReqBodyBuilder {
	builder.applicationPreferredCityCodeList = applicationPreferredCityCodeList
	builder.applicationPreferredCityCodeListFlag = true
	return builder
}

func (builder *CreateApplicationReqBodyBuilder) Build() *CreateApplicationReqBody {
	req := &CreateApplicationReqBody{}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId
	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId
	}
	if builder.resumeSourceIdFlag {
		req.ResumeSourceId = &builder.resumeSourceId
	}
	if builder.applicationPreferredCityCodeListFlag {
		req.ApplicationPreferredCityCodeList = builder.applicationPreferredCityCodeList
	}
	return req
}

type CreateApplicationPathReqBodyBuilder struct {
	talentId                             string // 人才ID
	talentIdFlag                         bool
	jobId                                string // 职位ID
	jobIdFlag                            bool
	resumeSourceId                       string // 简历来源 ID，可通过「获取简历来源」接口查询。若简历来源类型属于「员工转岗」或「实习生转正」，人才需处于已入职状态。
	resumeSourceIdFlag                   bool
	applicationPreferredCityCodeList     []string // 意向投递城市列表，可从「获取职位信息」返回的工作地点列表获取
	applicationPreferredCityCodeListFlag bool
}

func NewCreateApplicationPathReqBodyBuilder() *CreateApplicationPathReqBodyBuilder {
	builder := &CreateApplicationPathReqBodyBuilder{}
	return builder
}

// 人才ID
//
// 示例值：12312312312
func (builder *CreateApplicationPathReqBodyBuilder) TalentId(talentId string) *CreateApplicationPathReqBodyBuilder {
	builder.talentId = talentId
	builder.talentIdFlag = true
	return builder
}

// 职位ID
//
// 示例值：12312312312
func (builder *CreateApplicationPathReqBodyBuilder) JobId(jobId string) *CreateApplicationPathReqBodyBuilder {
	builder.jobId = jobId
	builder.jobIdFlag = true
	return builder
}

// 简历来源 ID，可通过「获取简历来源」接口查询。若简历来源类型属于「员工转岗」或「实习生转正」，人才需处于已入职状态。
//
// 示例值：7115289562569591070
func (builder *CreateApplicationPathReqBodyBuilder) ResumeSourceId(resumeSourceId string) *CreateApplicationPathReqBodyBuilder {
	builder.resumeSourceId = resumeSourceId
	builder.resumeSourceIdFlag = true
	return builder
}

// 意向投递城市列表，可从「获取职位信息」返回的工作地点列表获取
//
// 示例值：["CT_1"]
func (builder *CreateApplicationPathReqBodyBuilder) ApplicationPreferredCityCodeList(applicationPreferredCityCodeList []string) *CreateApplicationPathReqBodyBuilder {
	builder.applicationPreferredCityCodeList = applicationPreferredCityCodeList
	builder.applicationPreferredCityCodeListFlag = true
	return builder
}

func (builder *CreateApplicationPathReqBodyBuilder) Build() (*CreateApplicationReqBody, error) {
	req := &CreateApplicationReqBody{}
	if builder.talentIdFlag {
		req.TalentId = &builder.talentId
	}
	if builder.jobIdFlag {
		req.JobId = &builder.jobId
	}
	if builder.resumeSourceIdFlag {
		req.ResumeSourceId = &builder.resumeSourceId
	}
	if builder.applicationPreferredCityCodeListFlag {
		req.ApplicationPreferredCityCodeList = builder.applicationPreferredCityCodeList
	}
	return req, nil
}

type CreateApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateApplicationReqBody
}

func NewCreateApplicationReqBuilder() *CreateApplicationReqBuilder {
	builder := &CreateApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 根据人才 ID 和职位 ID 创建投递
func (builder *CreateApplicationReqBuilder) Body(body *CreateApplicationReqBody) *CreateApplicationReqBuilder {
	builder.body = body
	return builder
}

func (builder *CreateApplicationReqBuilder) Build() *CreateApplicationReq {
	req := &CreateApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type CreateApplicationReqBody struct {
	TalentId                         *string  `json:"talent_id,omitempty"`                            // 人才ID
	JobId                            *string  `json:"job_id,omitempty"`                               // 职位ID
	ResumeSourceId                   *string  `json:"resume_source_id,omitempty"`                     // 简历来源 ID，可通过「获取简历来源」接口查询。若简历来源类型属于「员工转岗」或「实习生转正」，人才需处于已入职状态。
	ApplicationPreferredCityCodeList []string `json:"application_preferred_city_code_list,omitempty"` // 意向投递城市列表，可从「获取职位信息」返回的工作地点列表获取
}

type CreateApplicationReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateApplicationReqBody `body:""`
}

type CreateApplicationRespData struct {
	Id *string `json:"id,omitempty"` // 投递ID
}

type CreateApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateApplicationRespData `json:"data"` // 业务数据
}

func (resp *CreateApplicationResp) Success() bool {
	return resp.Code == 0
}

type GetApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetApplicationReqBuilder() *GetApplicationReqBuilder {
	builder := &GetApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 投递 ID
//
// 示例值：6949805467799537964
func (builder *GetApplicationReqBuilder) ApplicationId(applicationId string) *GetApplicationReqBuilder {
	builder.apiReq.PathParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}

func (builder *GetApplicationReqBuilder) Build() *GetApplicationReq {
	req := &GetApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetApplicationReq struct {
	apiReq *larkcore.ApiReq
}

type GetApplicationRespData struct {
	Application *Application `json:"application,omitempty"` // 投递数据
}

type GetApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetApplicationRespData `json:"data"` // 业务数据
}

func (resp *GetApplicationResp) Success() bool {
	return resp.Code == 0
}

type ListApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListApplicationReqBuilder() *ListApplicationReqBuilder {
	builder := &ListApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 按流程过滤，招聘流程 ID，枚举值通过接口「获取招聘流程信息」接口获取
//
// 示例值：6960663240925956554
func (builder *ListApplicationReqBuilder) ProcessId(processId string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("process_id", fmt.Sprint(processId))
	return builder
}

// 按招聘阶段过滤，招聘阶段 ID，枚举值通过「获取招聘流程信息」接口获取
//
// 示例值：614218419274131
func (builder *ListApplicationReqBuilder) StageId(stageId string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("stage_id", fmt.Sprint(stageId))
	return builder
}

// 按人才过滤
//
// 示例值：6891560630172518670
func (builder *ListApplicationReqBuilder) TalentId(talentId string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("talent_id", fmt.Sprint(talentId))
	return builder
}

// 按活跃状态筛选 1=活跃投递, 2=非活跃投递, 3=全部
//
// 示例值：1
func (builder *ListApplicationReqBuilder) ActiveStatus(activeStatus string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("active_status", fmt.Sprint(activeStatus))
	return builder
}

// 职位 ID
//
// 示例值：7334134355464633
func (builder *ListApplicationReqBuilder) JobId(jobId string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("job_id", fmt.Sprint(jobId))
	return builder
}

// 查询游标, 由上一页结果返回, 第一页不传
//
// 示例值：1
func (builder *ListApplicationReqBuilder) PageToken(pageToken string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 每页限制, 每页最大不超过100
//
// 示例值：100
func (builder *ListApplicationReqBuilder) PageSize(pageSize int) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 最早更新时间，毫秒级时间戳
//
// 示例值：1618500278663
func (builder *ListApplicationReqBuilder) UpdateStartTime(updateStartTime string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("update_start_time", fmt.Sprint(updateStartTime))
	return builder
}

// 最晚更新时间，毫秒级时间戳
//
// 示例值：1618500278663
func (builder *ListApplicationReqBuilder) UpdateEndTime(updateEndTime string) *ListApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("update_end_time", fmt.Sprint(updateEndTime))
	return builder
}

func (builder *ListApplicationReqBuilder) Build() *ListApplicationReq {
	req := &ListApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListApplicationReq struct {
	apiReq *larkcore.ApiReq
}

type ListApplicationRespData struct {
	Items     []string `json:"items,omitempty"`      // 投递数据列表
	PageToken *string  `json:"page_token,omitempty"` // 游标, 翻下一页数据时使用
	HasMore   *bool    `json:"has_more,omitempty"`   // 是否还有下一页数据
}

type ListApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListApplicationRespData `json:"data"` // 业务数据
}

func (resp *ListApplicationResp) Success() bool {
	return resp.Code == 0
}

type OfferApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewOfferApplicationReqBuilder() *OfferApplicationReqBuilder {
	builder := &OfferApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 投递ID
//
// 示例值：6949805467799537964
func (builder *OfferApplicationReqBuilder) ApplicationId(applicationId string) *OfferApplicationReqBuilder {
	builder.apiReq.PathParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *OfferApplicationReqBuilder) UserIdType(userIdType string) *OfferApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：open_department_id
func (builder *OfferApplicationReqBuilder) DepartmentIdType(departmentIdType string) *OfferApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *OfferApplicationReqBuilder) Build() *OfferApplicationReq {
	req := &OfferApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type OfferApplicationReq struct {
	apiReq *larkcore.ApiReq
}

type OfferApplicationRespData struct {
	Offer *ApplicationOffer `json:"offer,omitempty"` // Offer数据
}

type OfferApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *OfferApplicationRespData `json:"data"` // 业务数据
}

func (resp *OfferApplicationResp) Success() bool {
	return resp.Code == 0
}

type TerminateApplicationReqBodyBuilder struct {
	terminationType           int // 终止原因的类型
	terminationTypeFlag       bool
	terminationReasonList     []string // 终止的具体原因的id列表
	terminationReasonListFlag bool
	terminationReasonNote     string // 终止备注
	terminationReasonNoteFlag bool
}

func NewTerminateApplicationReqBodyBuilder() *TerminateApplicationReqBodyBuilder {
	builder := &TerminateApplicationReqBodyBuilder{}
	return builder
}

// 终止原因的类型
//
//示例值：1
func (builder *TerminateApplicationReqBodyBuilder) TerminationType(terminationType int) *TerminateApplicationReqBodyBuilder {
	builder.terminationType = terminationType
	builder.terminationTypeFlag = true
	return builder
}

// 终止的具体原因的id列表
//
//示例值：["6891560630172518670"]
func (builder *TerminateApplicationReqBodyBuilder) TerminationReasonList(terminationReasonList []string) *TerminateApplicationReqBodyBuilder {
	builder.terminationReasonList = terminationReasonList
	builder.terminationReasonListFlag = true
	return builder
}

// 终止备注
//
//示例值：不符合期望
func (builder *TerminateApplicationReqBodyBuilder) TerminationReasonNote(terminationReasonNote string) *TerminateApplicationReqBodyBuilder {
	builder.terminationReasonNote = terminationReasonNote
	builder.terminationReasonNoteFlag = true
	return builder
}

func (builder *TerminateApplicationReqBodyBuilder) Build() *TerminateApplicationReqBody {
	req := &TerminateApplicationReqBody{}
	if builder.terminationTypeFlag {
		req.TerminationType = &builder.terminationType
	}
	if builder.terminationReasonListFlag {
		req.TerminationReasonList = builder.terminationReasonList
	}
	if builder.terminationReasonNoteFlag {
		req.TerminationReasonNote = &builder.terminationReasonNote
	}
	return req
}

type TerminateApplicationPathReqBodyBuilder struct {
	terminationType           int // 终止原因的类型
	terminationTypeFlag       bool
	terminationReasonList     []string // 终止的具体原因的id列表
	terminationReasonListFlag bool
	terminationReasonNote     string // 终止备注
	terminationReasonNoteFlag bool
}

func NewTerminateApplicationPathReqBodyBuilder() *TerminateApplicationPathReqBodyBuilder {
	builder := &TerminateApplicationPathReqBodyBuilder{}
	return builder
}

// 终止原因的类型
//
// 示例值：1
func (builder *TerminateApplicationPathReqBodyBuilder) TerminationType(terminationType int) *TerminateApplicationPathReqBodyBuilder {
	builder.terminationType = terminationType
	builder.terminationTypeFlag = true
	return builder
}

// 终止的具体原因的id列表
//
// 示例值：["6891560630172518670"]
func (builder *TerminateApplicationPathReqBodyBuilder) TerminationReasonList(terminationReasonList []string) *TerminateApplicationPathReqBodyBuilder {
	builder.terminationReasonList = terminationReasonList
	builder.terminationReasonListFlag = true
	return builder
}

// 终止备注
//
// 示例值：不符合期望
func (builder *TerminateApplicationPathReqBodyBuilder) TerminationReasonNote(terminationReasonNote string) *TerminateApplicationPathReqBodyBuilder {
	builder.terminationReasonNote = terminationReasonNote
	builder.terminationReasonNoteFlag = true
	return builder
}

func (builder *TerminateApplicationPathReqBodyBuilder) Build() (*TerminateApplicationReqBody, error) {
	req := &TerminateApplicationReqBody{}
	if builder.terminationTypeFlag {
		req.TerminationType = &builder.terminationType
	}
	if builder.terminationReasonListFlag {
		req.TerminationReasonList = builder.terminationReasonList
	}
	if builder.terminationReasonNoteFlag {
		req.TerminationReasonNote = &builder.terminationReasonNote
	}
	return req, nil
}

type TerminateApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *TerminateApplicationReqBody
}

func NewTerminateApplicationReqBuilder() *TerminateApplicationReqBuilder {
	builder := &TerminateApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 投递ID
//
// 示例值：12312312312
func (builder *TerminateApplicationReqBuilder) ApplicationId(applicationId string) *TerminateApplicationReqBuilder {
	builder.apiReq.PathParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}

// 根据投递 ID 修改投递状态为「已终止」
func (builder *TerminateApplicationReqBuilder) Body(body *TerminateApplicationReqBody) *TerminateApplicationReqBuilder {
	builder.body = body
	return builder
}

func (builder *TerminateApplicationReqBuilder) Build() *TerminateApplicationReq {
	req := &TerminateApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type TerminateApplicationReqBody struct {
	TerminationType       *int     `json:"termination_type,omitempty"`        // 终止原因的类型
	TerminationReasonList []string `json:"termination_reason_list,omitempty"` // 终止的具体原因的id列表
	TerminationReasonNote *string  `json:"termination_reason_note,omitempty"` // 终止备注
}

type TerminateApplicationReq struct {
	apiReq *larkcore.ApiReq
	Body   *TerminateApplicationReqBody `body:""`
}

type TerminateApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *TerminateApplicationResp) Success() bool {
	return resp.Code == 0
}

type TransferOnboardApplicationReqBodyBuilder struct {
	actualOnboardTime          int // 实际入职时间
	actualOnboardTimeFlag      bool
	expectedConversionTime     int // 预期转正时间
	expectedConversionTimeFlag bool
	jobRequirementId           string // 招聘需求 ID
	jobRequirementIdFlag       bool
	operatorId                 string // 操作人 UserID
	operatorIdFlag             bool
	onboardCityCode            string // 候选人办公地点 ID ，枚举可通过接口「获取地址列表」获取，将用于候选人内推奖规则判断
	onboardCityCodeFlag        bool
	department                 string // 候选人入职部门 ID ，枚举可通过接口「获取部门信息列表」获取，将用于候选人内推奖规则判断
	departmentFlag             bool
	leader                     string // 候选人直属上级 UserID ，将用于候选人内推奖规则判断
	leaderFlag                 bool
	sequence                   string // 候选人序列 ID ，枚举可通过接口「获取职务分类列表」获取，将用于候选人内推奖规则判断
	sequenceFlag               bool
	level                      string // 候选人职级 ID ，枚举可通过接口「获取职级列表」获取，将用于候选人内推奖规则判断
	levelFlag                  bool
	employeeType               string // 候选人入职人员类型 ID，可通过接口人力资源管理平台「获取员工类型列表」获取，将用于候选人内推奖规则判断
	employeeTypeFlag           bool
}

func NewTransferOnboardApplicationReqBodyBuilder() *TransferOnboardApplicationReqBodyBuilder {
	builder := &TransferOnboardApplicationReqBodyBuilder{}
	return builder
}

// 实际入职时间
//
//示例值：1616428800000
func (builder *TransferOnboardApplicationReqBodyBuilder) ActualOnboardTime(actualOnboardTime int) *TransferOnboardApplicationReqBodyBuilder {
	builder.actualOnboardTime = actualOnboardTime
	builder.actualOnboardTimeFlag = true
	return builder
}

// 预期转正时间
//
//示例值：1616428800000
func (builder *TransferOnboardApplicationReqBodyBuilder) ExpectedConversionTime(expectedConversionTime int) *TransferOnboardApplicationReqBodyBuilder {
	builder.expectedConversionTime = expectedConversionTime
	builder.expectedConversionTimeFlag = true
	return builder
}

// 招聘需求 ID
//
//示例值：6960663240925956402
func (builder *TransferOnboardApplicationReqBodyBuilder) JobRequirementId(jobRequirementId string) *TransferOnboardApplicationReqBodyBuilder {
	builder.jobRequirementId = jobRequirementId
	builder.jobRequirementIdFlag = true
	return builder
}

// 操作人 UserID
//
//示例值：ou-xxx
func (builder *TransferOnboardApplicationReqBodyBuilder) OperatorId(operatorId string) *TransferOnboardApplicationReqBodyBuilder {
	builder.operatorId = operatorId
	builder.operatorIdFlag = true
	return builder
}

// 候选人办公地点 ID ，枚举可通过接口「获取地址列表」获取，将用于候选人内推奖规则判断
//
//示例值：CT_2
func (builder *TransferOnboardApplicationReqBodyBuilder) OnboardCityCode(onboardCityCode string) *TransferOnboardApplicationReqBodyBuilder {
	builder.onboardCityCode = onboardCityCode
	builder.onboardCityCodeFlag = true
	return builder
}

// 候选人入职部门 ID ，枚举可通过接口「获取部门信息列表」获取，将用于候选人内推奖规则判断
//
//示例值：6966123381141866028
func (builder *TransferOnboardApplicationReqBodyBuilder) Department(department string) *TransferOnboardApplicationReqBodyBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 候选人直属上级 UserID ，将用于候选人内推奖规则判断
//
//示例值：ou-xxx
func (builder *TransferOnboardApplicationReqBodyBuilder) Leader(leader string) *TransferOnboardApplicationReqBodyBuilder {
	builder.leader = leader
	builder.leaderFlag = true
	return builder
}

// 候选人序列 ID ，枚举可通过接口「获取职务分类列表」获取，将用于候选人内推奖规则判断
//
//示例值：7006234385490345986
func (builder *TransferOnboardApplicationReqBodyBuilder) Sequence(sequence string) *TransferOnboardApplicationReqBodyBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}

// 候选人职级 ID ，枚举可通过接口「获取职级列表」获取，将用于候选人内推奖规则判断
//
//示例值：6937934036379650311
func (builder *TransferOnboardApplicationReqBodyBuilder) Level(level string) *TransferOnboardApplicationReqBodyBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}

// 候选人入职人员类型 ID，可通过接口人力资源管理平台「获取员工类型列表」获取，将用于候选人内推奖规则判断
//
//示例值：1
func (builder *TransferOnboardApplicationReqBodyBuilder) EmployeeType(employeeType string) *TransferOnboardApplicationReqBodyBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}

func (builder *TransferOnboardApplicationReqBodyBuilder) Build() *TransferOnboardApplicationReqBody {
	req := &TransferOnboardApplicationReqBody{}
	if builder.actualOnboardTimeFlag {
		req.ActualOnboardTime = &builder.actualOnboardTime
	}
	if builder.expectedConversionTimeFlag {
		req.ExpectedConversionTime = &builder.expectedConversionTime
	}
	if builder.jobRequirementIdFlag {
		req.JobRequirementId = &builder.jobRequirementId
	}
	if builder.operatorIdFlag {
		req.OperatorId = &builder.operatorId
	}
	if builder.onboardCityCodeFlag {
		req.OnboardCityCode = &builder.onboardCityCode
	}
	if builder.departmentFlag {
		req.Department = &builder.department
	}
	if builder.leaderFlag {
		req.Leader = &builder.leader
	}
	if builder.sequenceFlag {
		req.Sequence = &builder.sequence
	}
	if builder.levelFlag {
		req.Level = &builder.level
	}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	return req
}

type TransferOnboardApplicationPathReqBodyBuilder struct {
	actualOnboardTime          int // 实际入职时间
	actualOnboardTimeFlag      bool
	expectedConversionTime     int // 预期转正时间
	expectedConversionTimeFlag bool
	jobRequirementId           string // 招聘需求 ID
	jobRequirementIdFlag       bool
	operatorId                 string // 操作人 UserID
	operatorIdFlag             bool
	onboardCityCode            string // 候选人办公地点 ID ，枚举可通过接口「获取地址列表」获取，将用于候选人内推奖规则判断
	onboardCityCodeFlag        bool
	department                 string // 候选人入职部门 ID ，枚举可通过接口「获取部门信息列表」获取，将用于候选人内推奖规则判断
	departmentFlag             bool
	leader                     string // 候选人直属上级 UserID ，将用于候选人内推奖规则判断
	leaderFlag                 bool
	sequence                   string // 候选人序列 ID ，枚举可通过接口「获取职务分类列表」获取，将用于候选人内推奖规则判断
	sequenceFlag               bool
	level                      string // 候选人职级 ID ，枚举可通过接口「获取职级列表」获取，将用于候选人内推奖规则判断
	levelFlag                  bool
	employeeType               string // 候选人入职人员类型 ID，可通过接口人力资源管理平台「获取员工类型列表」获取，将用于候选人内推奖规则判断
	employeeTypeFlag           bool
}

func NewTransferOnboardApplicationPathReqBodyBuilder() *TransferOnboardApplicationPathReqBodyBuilder {
	builder := &TransferOnboardApplicationPathReqBodyBuilder{}
	return builder
}

// 实际入职时间
//
// 示例值：1616428800000
func (builder *TransferOnboardApplicationPathReqBodyBuilder) ActualOnboardTime(actualOnboardTime int) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.actualOnboardTime = actualOnboardTime
	builder.actualOnboardTimeFlag = true
	return builder
}

// 预期转正时间
//
// 示例值：1616428800000
func (builder *TransferOnboardApplicationPathReqBodyBuilder) ExpectedConversionTime(expectedConversionTime int) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.expectedConversionTime = expectedConversionTime
	builder.expectedConversionTimeFlag = true
	return builder
}

// 招聘需求 ID
//
// 示例值：6960663240925956402
func (builder *TransferOnboardApplicationPathReqBodyBuilder) JobRequirementId(jobRequirementId string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.jobRequirementId = jobRequirementId
	builder.jobRequirementIdFlag = true
	return builder
}

// 操作人 UserID
//
// 示例值：ou-xxx
func (builder *TransferOnboardApplicationPathReqBodyBuilder) OperatorId(operatorId string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.operatorId = operatorId
	builder.operatorIdFlag = true
	return builder
}

// 候选人办公地点 ID ，枚举可通过接口「获取地址列表」获取，将用于候选人内推奖规则判断
//
// 示例值：CT_2
func (builder *TransferOnboardApplicationPathReqBodyBuilder) OnboardCityCode(onboardCityCode string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.onboardCityCode = onboardCityCode
	builder.onboardCityCodeFlag = true
	return builder
}

// 候选人入职部门 ID ，枚举可通过接口「获取部门信息列表」获取，将用于候选人内推奖规则判断
//
// 示例值：6966123381141866028
func (builder *TransferOnboardApplicationPathReqBodyBuilder) Department(department string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.department = department
	builder.departmentFlag = true
	return builder
}

// 候选人直属上级 UserID ，将用于候选人内推奖规则判断
//
// 示例值：ou-xxx
func (builder *TransferOnboardApplicationPathReqBodyBuilder) Leader(leader string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.leader = leader
	builder.leaderFlag = true
	return builder
}

// 候选人序列 ID ，枚举可通过接口「获取职务分类列表」获取，将用于候选人内推奖规则判断
//
// 示例值：7006234385490345986
func (builder *TransferOnboardApplicationPathReqBodyBuilder) Sequence(sequence string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.sequence = sequence
	builder.sequenceFlag = true
	return builder
}

// 候选人职级 ID ，枚举可通过接口「获取职级列表」获取，将用于候选人内推奖规则判断
//
// 示例值：6937934036379650311
func (builder *TransferOnboardApplicationPathReqBodyBuilder) Level(level string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.level = level
	builder.levelFlag = true
	return builder
}

// 候选人入职人员类型 ID，可通过接口人力资源管理平台「获取员工类型列表」获取，将用于候选人内推奖规则判断
//
// 示例值：1
func (builder *TransferOnboardApplicationPathReqBodyBuilder) EmployeeType(employeeType string) *TransferOnboardApplicationPathReqBodyBuilder {
	builder.employeeType = employeeType
	builder.employeeTypeFlag = true
	return builder
}

func (builder *TransferOnboardApplicationPathReqBodyBuilder) Build() (*TransferOnboardApplicationReqBody, error) {
	req := &TransferOnboardApplicationReqBody{}
	if builder.actualOnboardTimeFlag {
		req.ActualOnboardTime = &builder.actualOnboardTime
	}
	if builder.expectedConversionTimeFlag {
		req.ExpectedConversionTime = &builder.expectedConversionTime
	}
	if builder.jobRequirementIdFlag {
		req.JobRequirementId = &builder.jobRequirementId
	}
	if builder.operatorIdFlag {
		req.OperatorId = &builder.operatorId
	}
	if builder.onboardCityCodeFlag {
		req.OnboardCityCode = &builder.onboardCityCode
	}
	if builder.departmentFlag {
		req.Department = &builder.department
	}
	if builder.leaderFlag {
		req.Leader = &builder.leader
	}
	if builder.sequenceFlag {
		req.Sequence = &builder.sequence
	}
	if builder.levelFlag {
		req.Level = &builder.level
	}
	if builder.employeeTypeFlag {
		req.EmployeeType = &builder.employeeType
	}
	return req, nil
}

type TransferOnboardApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *TransferOnboardApplicationReqBody
}

func NewTransferOnboardApplicationReqBuilder() *TransferOnboardApplicationReqBuilder {
	builder := &TransferOnboardApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 投递ID
//
// 示例值：7073372582620416300
func (builder *TransferOnboardApplicationReqBuilder) ApplicationId(applicationId string) *TransferOnboardApplicationReqBuilder {
	builder.apiReq.PathParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *TransferOnboardApplicationReqBuilder) UserIdType(userIdType string) *TransferOnboardApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：
func (builder *TransferOnboardApplicationReqBuilder) DepartmentIdType(departmentIdType string) *TransferOnboardApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 根据投递 ID 操作候选人入职并创建员工。投递须处于「待入职」阶段，可通过「转移阶段」接口变更投递状态
func (builder *TransferOnboardApplicationReqBuilder) Body(body *TransferOnboardApplicationReqBody) *TransferOnboardApplicationReqBuilder {
	builder.body = body
	return builder
}

func (builder *TransferOnboardApplicationReqBuilder) Build() *TransferOnboardApplicationReq {
	req := &TransferOnboardApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type TransferOnboardApplicationReqBody struct {
	ActualOnboardTime      *int    `json:"actual_onboard_time,omitempty"`      // 实际入职时间
	ExpectedConversionTime *int    `json:"expected_conversion_time,omitempty"` // 预期转正时间
	JobRequirementId       *string `json:"job_requirement_id,omitempty"`       // 招聘需求 ID
	OperatorId             *string `json:"operator_id,omitempty"`              // 操作人 UserID
	OnboardCityCode        *string `json:"onboard_city_code,omitempty"`        // 候选人办公地点 ID ，枚举可通过接口「获取地址列表」获取，将用于候选人内推奖规则判断
	Department             *string `json:"department,omitempty"`               // 候选人入职部门 ID ，枚举可通过接口「获取部门信息列表」获取，将用于候选人内推奖规则判断
	Leader                 *string `json:"leader,omitempty"`                   // 候选人直属上级 UserID ，将用于候选人内推奖规则判断
	Sequence               *string `json:"sequence,omitempty"`                 // 候选人序列 ID ，枚举可通过接口「获取职务分类列表」获取，将用于候选人内推奖规则判断
	Level                  *string `json:"level,omitempty"`                    // 候选人职级 ID ，枚举可通过接口「获取职级列表」获取，将用于候选人内推奖规则判断
	EmployeeType           *string `json:"employee_type,omitempty"`            // 候选人入职人员类型 ID，可通过接口人力资源管理平台「获取员工类型列表」获取，将用于候选人内推奖规则判断
}

type TransferOnboardApplicationReq struct {
	apiReq *larkcore.ApiReq
	Body   *TransferOnboardApplicationReqBody `body:""`
}

type TransferOnboardApplicationRespData struct {
	Employee *Employee `json:"employee,omitempty"` // employee
}

type TransferOnboardApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *TransferOnboardApplicationRespData `json:"data"` // 业务数据
}

func (resp *TransferOnboardApplicationResp) Success() bool {
	return resp.Code == 0
}

type ListApplicationInterviewReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListApplicationInterviewReqBuilder() *ListApplicationInterviewReqBuilder {
	builder := &ListApplicationInterviewReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 投递 ID
//
// 示例值：6960663240925956555
func (builder *ListApplicationInterviewReqBuilder) ApplicationId(applicationId string) *ListApplicationInterviewReqBuilder {
	builder.apiReq.PathParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}

// 分页大小，不能超过 50
//
// 示例值：10
func (builder *ListApplicationInterviewReqBuilder) PageSize(pageSize int) *ListApplicationInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：xx
func (builder *ListApplicationInterviewReqBuilder) PageToken(pageToken string) *ListApplicationInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：open_id
func (builder *ListApplicationInterviewReqBuilder) UserIdType(userIdType string) *ListApplicationInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *ListApplicationInterviewReqBuilder) Build() *ListApplicationInterviewReq {
	req := &ListApplicationInterviewReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListApplicationInterviewReq struct {
	apiReq *larkcore.ApiReq
}

type ListApplicationInterviewRespData struct {
	PageToken *string      `json:"page_token,omitempty"` // 分页标志
	HasMore   *bool        `json:"has_more,omitempty"`   // 是否有更多
	Items     []*Interview `json:"items,omitempty"`      // 面试列表
}

type ListApplicationInterviewResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListApplicationInterviewRespData `json:"data"` // 业务数据
}

func (resp *ListApplicationInterviewResp) Success() bool {
	return resp.Code == 0
}

type GetAttachmentReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetAttachmentReqBuilder() *GetAttachmentReqBuilder {
	builder := &GetAttachmentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 附件id
//
// 示例值：6435242341238
func (builder *GetAttachmentReqBuilder) AttachmentId(attachmentId string) *GetAttachmentReqBuilder {
	builder.apiReq.PathParams.Set("attachment_id", fmt.Sprint(attachmentId))
	return builder
}

// 附件类型
//
// 示例值：1
func (builder *GetAttachmentReqBuilder) Type(type_ int) *GetAttachmentReqBuilder {
	builder.apiReq.QueryParams.Set("type", fmt.Sprint(type_))
	return builder
}

func (builder *GetAttachmentReqBuilder) Build() *GetAttachmentReq {
	req := &GetAttachmentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetAttachmentReq struct {
	apiReq *larkcore.ApiReq
}

type GetAttachmentRespData struct {
	Attachment *Attachment `json:"attachment,omitempty"` // 附件信息
}

type GetAttachmentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetAttachmentRespData `json:"data"` // 业务数据
}

func (resp *GetAttachmentResp) Success() bool {
	return resp.Code == 0
}

type PreviewAttachmentReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewPreviewAttachmentReqBuilder() *PreviewAttachmentReqBuilder {
	builder := &PreviewAttachmentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 附件id
//
// 示例值：11111
func (builder *PreviewAttachmentReqBuilder) AttachmentId(attachmentId string) *PreviewAttachmentReqBuilder {
	builder.apiReq.PathParams.Set("attachment_id", fmt.Sprint(attachmentId))
	return builder
}

func (builder *PreviewAttachmentReqBuilder) Build() *PreviewAttachmentReq {
	req := &PreviewAttachmentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type PreviewAttachmentReq struct {
	apiReq *larkcore.ApiReq
}

type PreviewAttachmentRespData struct {
	Url *string `json:"url,omitempty"` // 预览链接
}

type PreviewAttachmentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PreviewAttachmentRespData `json:"data"` // 业务数据
}

func (resp *PreviewAttachmentResp) Success() bool {
	return resp.Code == 0
}

type PatchEhrImportTaskReqBuilder struct {
	apiReq        *larkcore.ApiReq
	ehrImportTask *EhrImportTask
}

func NewPatchEhrImportTaskReqBuilder() *PatchEhrImportTaskReqBuilder {
	builder := &PatchEhrImportTaskReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 导入任务 ID
//
// 示例值：623455234
func (builder *PatchEhrImportTaskReqBuilder) EhrImportTaskId(ehrImportTaskId string) *PatchEhrImportTaskReqBuilder {
	builder.apiReq.PathParams.Set("ehr_import_task_id", fmt.Sprint(ehrImportTaskId))
	return builder
}

// 在处理完导入 e-HR 事件后，可调用该接口，更新  e-HR 导入任务结果
func (builder *PatchEhrImportTaskReqBuilder) EhrImportTask(ehrImportTask *EhrImportTask) *PatchEhrImportTaskReqBuilder {
	builder.ehrImportTask = ehrImportTask
	return builder
}

func (builder *PatchEhrImportTaskReqBuilder) Build() *PatchEhrImportTaskReq {
	req := &PatchEhrImportTaskReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.ehrImportTask
	return req
}

type PatchEhrImportTaskReq struct {
	apiReq        *larkcore.ApiReq
	EhrImportTask *EhrImportTask `body:""`
}

type PatchEhrImportTaskResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *PatchEhrImportTaskResp) Success() bool {
	return resp.Code == 0
}

type GetEmployeeReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetEmployeeReqBuilder() *GetEmployeeReqBuilder {
	builder := &GetEmployeeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 员工ID
//
// 示例值：123
func (builder *GetEmployeeReqBuilder) EmployeeId(employeeId string) *GetEmployeeReqBuilder {
	builder.apiReq.PathParams.Set("employee_id", fmt.Sprint(employeeId))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *GetEmployeeReqBuilder) UserIdType(userIdType string) *GetEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：
func (builder *GetEmployeeReqBuilder) DepartmentIdType(departmentIdType string) *GetEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *GetEmployeeReqBuilder) Build() *GetEmployeeReq {
	req := &GetEmployeeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetEmployeeReq struct {
	apiReq *larkcore.ApiReq
}

type GetEmployeeRespData struct {
	Employee *Employee `json:"employee,omitempty"` // 员工信息
}

type GetEmployeeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetEmployeeRespData `json:"data"` // 业务数据
}

func (resp *GetEmployeeResp) Success() bool {
	return resp.Code == 0
}

type GetByApplicationEmployeeReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetByApplicationEmployeeReqBuilder() *GetByApplicationEmployeeReqBuilder {
	builder := &GetByApplicationEmployeeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 投递ID
//
// 示例值：123
func (builder *GetByApplicationEmployeeReqBuilder) ApplicationId(applicationId string) *GetByApplicationEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *GetByApplicationEmployeeReqBuilder) UserIdType(userIdType string) *GetByApplicationEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：
func (builder *GetByApplicationEmployeeReqBuilder) DepartmentIdType(departmentIdType string) *GetByApplicationEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *GetByApplicationEmployeeReqBuilder) Build() *GetByApplicationEmployeeReq {
	req := &GetByApplicationEmployeeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetByApplicationEmployeeReq struct {
	apiReq *larkcore.ApiReq
}

type GetByApplicationEmployeeRespData struct {
	Employee *Employee `json:"employee,omitempty"` // 员工信息
}

type GetByApplicationEmployeeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetByApplicationEmployeeRespData `json:"data"` // 业务数据
}

func (resp *GetByApplicationEmployeeResp) Success() bool {
	return resp.Code == 0
}

type PatchEmployeeReqBuilder struct {
	apiReq              *larkcore.ApiReq
	changeEmployeeStage *ChangeEmployeeStage
}

func NewPatchEmployeeReqBuilder() *PatchEmployeeReqBuilder {
	builder := &PatchEmployeeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 员工ID
//
// 示例值：123
func (builder *PatchEmployeeReqBuilder) EmployeeId(employeeId string) *PatchEmployeeReqBuilder {
	builder.apiReq.PathParams.Set("employee_id", fmt.Sprint(employeeId))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *PatchEmployeeReqBuilder) UserIdType(userIdType string) *PatchEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：department_id
func (builder *PatchEmployeeReqBuilder) DepartmentIdType(departmentIdType string) *PatchEmployeeReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 根据员工 ID 更新员工转正、离职状态
func (builder *PatchEmployeeReqBuilder) ChangeEmployeeStage(changeEmployeeStage *ChangeEmployeeStage) *PatchEmployeeReqBuilder {
	builder.changeEmployeeStage = changeEmployeeStage
	return builder
}

func (builder *PatchEmployeeReqBuilder) Build() *PatchEmployeeReq {
	req := &PatchEmployeeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.changeEmployeeStage
	return req
}

type PatchEmployeeReq struct {
	apiReq              *larkcore.ApiReq
	ChangeEmployeeStage *ChangeEmployeeStage `body:""`
}

type PatchEmployeeRespData struct {
	Employee *Employee `json:"employee,omitempty"` // 员工信息
}

type PatchEmployeeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PatchEmployeeRespData `json:"data"` // 业务数据
}

func (resp *PatchEmployeeResp) Success() bool {
	return resp.Code == 0
}

type ListEvaluationReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListEvaluationReqBuilder() *ListEvaluationReqBuilder {
	builder := &ListEvaluationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListEvaluationReqBuilder) Limit(limit int) *ListEvaluationReqBuilder {
	builder.limit = limit
	return builder
}

// 页码标识，获取第一页传空，每次查询会返回下一页的page_token
//
// 示例值：eyJvZmZzZXQiOjEsInRpbWVzdGFtcCI6MTY0MDc2NTYzMjA4OCwiaWQiOm51bGx9
func (builder *ListEvaluationReqBuilder) PageToken(pageToken string) *ListEvaluationReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 每页获取记录数量，最大100
//
// 示例值：100
func (builder *ListEvaluationReqBuilder) PageSize(pageSize int) *ListEvaluationReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 投递 ID
//
// 示例值：6875569957036738823
func (builder *ListEvaluationReqBuilder) ApplicationId(applicationId string) *ListEvaluationReqBuilder {
	builder.apiReq.QueryParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}

// 最早更新时间，毫秒级时间戳
//
// 示例值：1600843767338
func (builder *ListEvaluationReqBuilder) UpdateStartTime(updateStartTime string) *ListEvaluationReqBuilder {
	builder.apiReq.QueryParams.Set("update_start_time", fmt.Sprint(updateStartTime))
	return builder
}

// 最晚更新时间，毫秒级时间戳
//
// 示例值：1600843938726
func (builder *ListEvaluationReqBuilder) UpdateEndTime(updateEndTime string) *ListEvaluationReqBuilder {
	builder.apiReq.QueryParams.Set("update_end_time", fmt.Sprint(updateEndTime))
	return builder
}

// 用户ID类型
//
// 示例值：open_id
func (builder *ListEvaluationReqBuilder) UserIdType(userIdType string) *ListEvaluationReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *ListEvaluationReqBuilder) Build() *ListEvaluationReq {
	req := &ListEvaluationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListEvaluationReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListEvaluationRespData struct {
	HasMore   *bool         `json:"has_more,omitempty"`   // 是否有下一页
	PageToken *string       `json:"page_token,omitempty"` // 下一页页码
	Items     []*Evaluation `json:"items,omitempty"`      // 简历评估信息列表
}

type ListEvaluationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListEvaluationRespData `json:"data"` // 业务数据
}

func (resp *ListEvaluationResp) Success() bool {
	return resp.Code == 0
}

type CreateExternalApplicationReqBuilder struct {
	apiReq              *larkcore.ApiReq
	externalApplication *ExternalApplication
}

func NewCreateExternalApplicationReqBuilder() *CreateExternalApplicationReqBuilder {
	builder := &CreateExternalApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 导入来自其他系统的投递信息，创建为外部投递
func (builder *CreateExternalApplicationReqBuilder) ExternalApplication(externalApplication *ExternalApplication) *CreateExternalApplicationReqBuilder {
	builder.externalApplication = externalApplication
	return builder
}

func (builder *CreateExternalApplicationReqBuilder) Build() *CreateExternalApplicationReq {
	req := &CreateExternalApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.externalApplication
	return req
}

type CreateExternalApplicationReq struct {
	apiReq              *larkcore.ApiReq
	ExternalApplication *ExternalApplication `body:""`
}

type CreateExternalApplicationRespData struct {
	ExternalApplication *ExternalApplication `json:"external_application,omitempty"` // 外部投递信息
}

type CreateExternalApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateExternalApplicationRespData `json:"data"` // 业务数据
}

func (resp *CreateExternalApplicationResp) Success() bool {
	return resp.Code == 0
}

type DeleteExternalApplicationReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewDeleteExternalApplicationReqBuilder() *DeleteExternalApplicationReqBuilder {
	builder := &DeleteExternalApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 外部投递 id
//
// 示例值：6960663240925956660
func (builder *DeleteExternalApplicationReqBuilder) ExternalApplicationId(externalApplicationId string) *DeleteExternalApplicationReqBuilder {
	builder.apiReq.PathParams.Set("external_application_id", fmt.Sprint(externalApplicationId))
	return builder
}

// 人才ID
//
// 示例值：6960663240925956660
func (builder *DeleteExternalApplicationReqBuilder) TalentId(talentId string) *DeleteExternalApplicationReqBuilder {
	builder.apiReq.QueryParams.Set("talent_id", fmt.Sprint(talentId))
	return builder
}

func (builder *DeleteExternalApplicationReqBuilder) Build() *DeleteExternalApplicationReq {
	req := &DeleteExternalApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type DeleteExternalApplicationReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteExternalApplicationRespData struct {
	ExternalApplication *ExternalApplication `json:"external_application,omitempty"` //
}

type DeleteExternalApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *DeleteExternalApplicationRespData `json:"data"` // 业务数据
}

func (resp *DeleteExternalApplicationResp) Success() bool {
	return resp.Code == 0
}

type UpdateExternalApplicationReqBuilder struct {
	apiReq              *larkcore.ApiReq
	externalApplication *ExternalApplication
}

func NewUpdateExternalApplicationReqBuilder() *UpdateExternalApplicationReqBuilder {
	builder := &UpdateExternalApplicationReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 外部投递 id
//
// 示例值：6960663240925956660
func (builder *UpdateExternalApplicationReqBuilder) ExternalApplicationId(externalApplicationId string) *UpdateExternalApplicationReqBuilder {
	builder.apiReq.PathParams.Set("external_application_id", fmt.Sprint(externalApplicationId))
	return builder
}

// 更新外部投递
func (builder *UpdateExternalApplicationReqBuilder) ExternalApplication(externalApplication *ExternalApplication) *UpdateExternalApplicationReqBuilder {
	builder.externalApplication = externalApplication
	return builder
}

func (builder *UpdateExternalApplicationReqBuilder) Build() *UpdateExternalApplicationReq {
	req := &UpdateExternalApplicationReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.externalApplication
	return req
}

type UpdateExternalApplicationReq struct {
	apiReq              *larkcore.ApiReq
	ExternalApplication *ExternalApplication `body:""`
}

type UpdateExternalApplicationRespData struct {
	ExternalApplication *ExternalApplication `json:"external_application,omitempty"` //
}

type UpdateExternalApplicationResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UpdateExternalApplicationRespData `json:"data"` // 业务数据
}

func (resp *UpdateExternalApplicationResp) Success() bool {
	return resp.Code == 0
}

type CreateExternalBackgroundCheckReqBuilder struct {
	apiReq                  *larkcore.ApiReq
	externalBackgroundCheck *ExternalBackgroundCheck
}

func NewCreateExternalBackgroundCheckReqBuilder() *CreateExternalBackgroundCheckReqBuilder {
	builder := &CreateExternalBackgroundCheckReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 导入来自其他系统的背调信息，创建为外部背调
func (builder *CreateExternalBackgroundCheckReqBuilder) ExternalBackgroundCheck(externalBackgroundCheck *ExternalBackgroundCheck) *CreateExternalBackgroundCheckReqBuilder {
	builder.externalBackgroundCheck = externalBackgroundCheck
	return builder
}

func (builder *CreateExternalBackgroundCheckReqBuilder) Build() *CreateExternalBackgroundCheckReq {
	req := &CreateExternalBackgroundCheckReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.externalBackgroundCheck
	return req
}

type CreateExternalBackgroundCheckReq struct {
	apiReq                  *larkcore.ApiReq
	ExternalBackgroundCheck *ExternalBackgroundCheck `body:""`
}

type CreateExternalBackgroundCheckRespData struct {
	ExternalBackgroundCheck *ExternalBackgroundCheck `json:"external_background_check,omitempty"` // 外部背调信息
}

type CreateExternalBackgroundCheckResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateExternalBackgroundCheckRespData `json:"data"` // 业务数据
}

func (resp *CreateExternalBackgroundCheckResp) Success() bool {
	return resp.Code == 0
}

type CreateExternalInterviewReqBuilder struct {
	apiReq            *larkcore.ApiReq
	externalInterview *ExternalInterview
}

func NewCreateExternalInterviewReqBuilder() *CreateExternalInterviewReqBuilder {
	builder := &CreateExternalInterviewReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 导入来自其他系统的面试信息，创建为外部面试
func (builder *CreateExternalInterviewReqBuilder) ExternalInterview(externalInterview *ExternalInterview) *CreateExternalInterviewReqBuilder {
	builder.externalInterview = externalInterview
	return builder
}

func (builder *CreateExternalInterviewReqBuilder) Build() *CreateExternalInterviewReq {
	req := &CreateExternalInterviewReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.externalInterview
	return req
}

type CreateExternalInterviewReq struct {
	apiReq            *larkcore.ApiReq
	ExternalInterview *ExternalInterview `body:""`
}

type CreateExternalInterviewRespData struct {
	ExternalInterview *ExternalInterview `json:"external_interview,omitempty"` // 外部面试信息
}

type CreateExternalInterviewResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateExternalInterviewRespData `json:"data"` // 业务数据
}

func (resp *CreateExternalInterviewResp) Success() bool {
	return resp.Code == 0
}

type CreateExternalInterviewAssessmentReqBuilder struct {
	apiReq                      *larkcore.ApiReq
	externalInterviewAssessment *ExternalInterviewAssessment
}

func NewCreateExternalInterviewAssessmentReqBuilder() *CreateExternalInterviewAssessmentReqBuilder {
	builder := &CreateExternalInterviewAssessmentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 导入来自其他系统的面评信息，创建为外部面评
func (builder *CreateExternalInterviewAssessmentReqBuilder) ExternalInterviewAssessment(externalInterviewAssessment *ExternalInterviewAssessment) *CreateExternalInterviewAssessmentReqBuilder {
	builder.externalInterviewAssessment = externalInterviewAssessment
	return builder
}

func (builder *CreateExternalInterviewAssessmentReqBuilder) Build() *CreateExternalInterviewAssessmentReq {
	req := &CreateExternalInterviewAssessmentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.externalInterviewAssessment
	return req
}

type CreateExternalInterviewAssessmentReq struct {
	apiReq                      *larkcore.ApiReq
	ExternalInterviewAssessment *ExternalInterviewAssessment `body:""`
}

type CreateExternalInterviewAssessmentRespData struct {
	ExternalInterviewAssessment *ExternalInterviewAssessment `json:"external_interview_assessment,omitempty"` // 外部面评信息
}

type CreateExternalInterviewAssessmentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateExternalInterviewAssessmentRespData `json:"data"` // 业务数据
}

func (resp *CreateExternalInterviewAssessmentResp) Success() bool {
	return resp.Code == 0
}

type ListInterviewReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListInterviewReqBuilder() *ListInterviewReqBuilder {
	builder := &ListInterviewReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 分页大小，不能超过 100
//
// 示例值：10
func (builder *ListInterviewReqBuilder) PageSize(pageSize int) *ListInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 查询游标, 由上一页结果返回, 第一页不传
//
// 示例值：xx
func (builder *ListInterviewReqBuilder) PageToken(pageToken string) *ListInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 投递 ID
//
// 示例值：6134134355464633
func (builder *ListInterviewReqBuilder) ApplicationId(applicationId string) *ListInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}

// 面试 ID
//
// 示例值：6888217964693309704
func (builder *ListInterviewReqBuilder) InterviewId(interviewId string) *ListInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("interview_id", fmt.Sprint(interviewId))
	return builder
}

// 最早开始时间，格式为时间戳
//
// 示例值：1609489908000
func (builder *ListInterviewReqBuilder) StartTime(startTime string) *ListInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("start_time", fmt.Sprint(startTime))
	return builder
}

// 最晚开始时间，格式为时间戳
//
// 示例值：1610489908000
func (builder *ListInterviewReqBuilder) EndTime(endTime string) *ListInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("end_time", fmt.Sprint(endTime))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *ListInterviewReqBuilder) UserIdType(userIdType string) *ListInterviewReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *ListInterviewReqBuilder) Build() *ListInterviewReq {
	req := &ListInterviewReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListInterviewReq struct {
	apiReq *larkcore.ApiReq
}

type ListInterviewRespData struct {
	Items     []*InterviewExtend `json:"items,omitempty"`      // 面试列表
	HasMore   *bool              `json:"has_more,omitempty"`   // 是否有下一页
	PageToken *string            `json:"page_token,omitempty"` // 下一页页码
}

type ListInterviewResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListInterviewRespData `json:"data"` // 业务数据
}

func (resp *ListInterviewResp) Success() bool {
	return resp.Code == 0
}

type CombinedCreateJobReqBuilder struct {
	apiReq      *larkcore.ApiReq
	combinedJob *CombinedJob
}

func NewCombinedCreateJobReqBuilder() *CombinedCreateJobReqBuilder {
	builder := &CombinedCreateJobReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *CombinedCreateJobReqBuilder) UserIdType(userIdType string) *CombinedCreateJobReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：此次调用中使用的部门 ID 的类型
func (builder *CombinedCreateJobReqBuilder) DepartmentIdType(departmentIdType string) *CombinedCreateJobReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 新建职位，字段的是否必填，以系统中的「职位字段管理」中的设置为准。
func (builder *CombinedCreateJobReqBuilder) CombinedJob(combinedJob *CombinedJob) *CombinedCreateJobReqBuilder {
	builder.combinedJob = combinedJob
	return builder
}

func (builder *CombinedCreateJobReqBuilder) Build() *CombinedCreateJobReq {
	req := &CombinedCreateJobReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.combinedJob
	return req
}

type CombinedCreateJobReq struct {
	apiReq      *larkcore.ApiReq
	CombinedJob *CombinedJob `body:""`
}

type CombinedCreateJobRespData struct {
	DefaultJobPost                  *CombinedJobResultDefaultJobPost `json:"default_job_post,omitempty"`                   // 职位广告
	Job                             *Job                             `json:"job,omitempty"`                                // 职位
	JobManager                      *JobManager                      `json:"job_manager,omitempty"`                        // 职位负责人
	InterviewRegistrationSchemaInfo *RegistrationInfo                `json:"interview_registration_schema_info,omitempty"` // 面试登记表
}

type CombinedCreateJobResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CombinedCreateJobRespData `json:"data"` // 业务数据
}

func (resp *CombinedCreateJobResp) Success() bool {
	return resp.Code == 0
}

type CombinedUpdateJobReqBuilder struct {
	apiReq      *larkcore.ApiReq
	combinedJob *CombinedJob
}

func NewCombinedUpdateJobReqBuilder() *CombinedUpdateJobReqBuilder {
	builder := &CombinedUpdateJobReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 职位 ID
//
// 示例值：6960663240925956660
func (builder *CombinedUpdateJobReqBuilder) JobId(jobId string) *CombinedUpdateJobReqBuilder {
	builder.apiReq.PathParams.Set("job_id", fmt.Sprint(jobId))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *CombinedUpdateJobReqBuilder) UserIdType(userIdType string) *CombinedUpdateJobReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：
func (builder *CombinedUpdateJobReqBuilder) DepartmentIdType(departmentIdType string) *CombinedUpdateJobReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 更新职位信息，该接口为全量更新，若字段没有返回值，则原有值将会被清空。字段的是否必填，将以系统中的「职位字段管理」中的设置为准。
func (builder *CombinedUpdateJobReqBuilder) CombinedJob(combinedJob *CombinedJob) *CombinedUpdateJobReqBuilder {
	builder.combinedJob = combinedJob
	return builder
}

func (builder *CombinedUpdateJobReqBuilder) Build() *CombinedUpdateJobReq {
	req := &CombinedUpdateJobReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.combinedJob
	return req
}

type CombinedUpdateJobReq struct {
	apiReq      *larkcore.ApiReq
	CombinedJob *CombinedJob `body:""`
}

type CombinedUpdateJobRespData struct {
	DefaultJobPost                  *CombinedJobResultDefaultJobPost `json:"default_job_post,omitempty"`                   // 职位广告
	Job                             *Job                             `json:"job,omitempty"`                                // 职位
	JobManager                      *JobManager                      `json:"job_manager,omitempty"`                        // 职位负责人
	InterviewRegistrationSchemaInfo *RegistrationInfo                `json:"interview_registration_schema_info,omitempty"` // 面试登记表
}

type CombinedUpdateJobResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CombinedUpdateJobRespData `json:"data"` // 业务数据
}

func (resp *CombinedUpdateJobResp) Success() bool {
	return resp.Code == 0
}

type ConfigJobReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewConfigJobReqBuilder() *ConfigJobReqBuilder {
	builder := &ConfigJobReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 职位 ID
//
// 示例值：6960663240925956660
func (builder *ConfigJobReqBuilder) JobId(jobId string) *ConfigJobReqBuilder {
	builder.apiReq.PathParams.Set("job_id", fmt.Sprint(jobId))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *ConfigJobReqBuilder) UserIdType(userIdType string) *ConfigJobReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *ConfigJobReqBuilder) Build() *ConfigJobReq {
	req := &ConfigJobReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ConfigJobReq struct {
	apiReq *larkcore.ApiReq
}

type ConfigJobRespData struct {
	JobConfig *JobConfigResult `json:"job_config,omitempty"` // 职位配置
}

type ConfigJobResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ConfigJobRespData `json:"data"` // 业务数据
}

func (resp *ConfigJobResp) Success() bool {
	return resp.Code == 0
}

type GetJobReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetJobReqBuilder() *GetJobReqBuilder {
	builder := &GetJobReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 职位 ID，请求Path中
//
// 示例值：6001
func (builder *GetJobReqBuilder) JobId(jobId string) *GetJobReqBuilder {
	builder.apiReq.PathParams.Set("job_id", fmt.Sprint(jobId))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *GetJobReqBuilder) UserIdType(userIdType string) *GetJobReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：
func (builder *GetJobReqBuilder) DepartmentIdType(departmentIdType string) *GetJobReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *GetJobReqBuilder) Build() *GetJobReq {
	req := &GetJobReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetJobReq struct {
	apiReq *larkcore.ApiReq
}

type GetJobRespData struct {
	Job *Job `json:"job,omitempty"` // 职位数据
}

type GetJobResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetJobRespData `json:"data"` // 业务数据
}

func (resp *GetJobResp) Success() bool {
	return resp.Code == 0
}

type UpdateConfigJobReqBuilder struct {
	apiReq    *larkcore.ApiReq
	jobConfig *JobConfig
}

func NewUpdateConfigJobReqBuilder() *UpdateConfigJobReqBuilder {
	builder := &UpdateConfigJobReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 职位 ID
//
// 示例值：6960663240925956660
func (builder *UpdateConfigJobReqBuilder) JobId(jobId string) *UpdateConfigJobReqBuilder {
	builder.apiReq.PathParams.Set("job_id", fmt.Sprint(jobId))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *UpdateConfigJobReqBuilder) UserIdType(userIdType string) *UpdateConfigJobReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 更新职位设置，包括面试评价表、Offer 申请表等。接口将按照所选择的「更新选项」进行设置参数校验和更新。
func (builder *UpdateConfigJobReqBuilder) JobConfig(jobConfig *JobConfig) *UpdateConfigJobReqBuilder {
	builder.jobConfig = jobConfig
	return builder
}

func (builder *UpdateConfigJobReqBuilder) Build() *UpdateConfigJobReq {
	req := &UpdateConfigJobReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.jobConfig
	return req
}

type UpdateConfigJobReq struct {
	apiReq    *larkcore.ApiReq
	JobConfig *JobConfig `body:""`
}

type UpdateConfigJobRespData struct {
	JobConfig *JobConfigResult `json:"job_config,omitempty"` // 职位信息
}

type UpdateConfigJobResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UpdateConfigJobRespData `json:"data"` // 业务数据
}

func (resp *UpdateConfigJobResp) Success() bool {
	return resp.Code == 0
}

type GetJobManagerReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetJobManagerReqBuilder() *GetJobManagerReqBuilder {
	builder := &GetJobManagerReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 职位 ID
//
// 示例值：1618209327096
func (builder *GetJobManagerReqBuilder) JobId(jobId string) *GetJobManagerReqBuilder {
	builder.apiReq.PathParams.Set("job_id", fmt.Sprint(jobId))
	return builder
}

// 此处传入职位 ID
//
// 示例值：1618209327096
func (builder *GetJobManagerReqBuilder) ManagerId(managerId string) *GetJobManagerReqBuilder {
	builder.apiReq.PathParams.Set("manager_id", fmt.Sprint(managerId))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *GetJobManagerReqBuilder) UserIdType(userIdType string) *GetJobManagerReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *GetJobManagerReqBuilder) Build() *GetJobManagerReq {
	req := &GetJobManagerReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetJobManagerReq struct {
	apiReq *larkcore.ApiReq
}

type GetJobManagerRespData struct {
	Info *JobManager `json:"info,omitempty"` // 职位负责人
}

type GetJobManagerResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetJobManagerRespData `json:"data"` // 业务数据
}

func (resp *GetJobManagerResp) Success() bool {
	return resp.Code == 0
}

type ListJobProcessReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListJobProcessReqBuilder() *ListJobProcessReqBuilder {
	builder := &ListJobProcessReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 分页大小, 不能超过 100
//
// 示例值：10
func (builder *ListJobProcessReqBuilder) PageSize(pageSize int) *ListJobProcessReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：1
func (builder *ListJobProcessReqBuilder) PageToken(pageToken string) *ListJobProcessReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *ListJobProcessReqBuilder) Build() *ListJobProcessReq {
	req := &ListJobProcessReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListJobProcessReq struct {
	apiReq *larkcore.ApiReq
}

type ListJobProcessRespData struct {
	HasMore   *bool           `json:"has_more,omitempty"`   // 是否还有更多项
	PageToken *string         `json:"page_token,omitempty"` // 分页标记，当 has_more 为 true 时，会同时返回新的 page_token，否则不返回 page_token
	Items     []*JobProcesses `json:"items,omitempty"`      // 列表
}

type ListJobProcessResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListJobProcessRespData `json:"data"` // 业务数据
}

func (resp *ListJobProcessResp) Success() bool {
	return resp.Code == 0
}

type CreateJobRequirementReqBuilder struct {
	apiReq         *larkcore.ApiReq
	jobRequirement *JobRequirement
}

func NewCreateJobRequirementReqBuilder() *CreateJobRequirementReqBuilder {
	builder := &CreateJobRequirementReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *CreateJobRequirementReqBuilder) UserIdType(userIdType string) *CreateJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：open_department_id
func (builder *CreateJobRequirementReqBuilder) DepartmentIdType(departmentIdType string) *CreateJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 创建招聘需求，除招聘需求编号为必填外，其他字段是否必填与飞书招聘「招聘需求字段管理」内设置一致
func (builder *CreateJobRequirementReqBuilder) JobRequirement(jobRequirement *JobRequirement) *CreateJobRequirementReqBuilder {
	builder.jobRequirement = jobRequirement
	return builder
}

func (builder *CreateJobRequirementReqBuilder) Build() *CreateJobRequirementReq {
	req := &CreateJobRequirementReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.jobRequirement
	return req
}

type CreateJobRequirementReq struct {
	apiReq         *larkcore.ApiReq
	JobRequirement *JobRequirement `body:""`
}

type CreateJobRequirementRespData struct {
	JobRequirement *JobRequirementDto `json:"job_requirement,omitempty"` // 招聘需求信息
}

type CreateJobRequirementResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateJobRequirementRespData `json:"data"` // 业务数据
}

func (resp *CreateJobRequirementResp) Success() bool {
	return resp.Code == 0
}

type DeleteJobRequirementReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewDeleteJobRequirementReqBuilder() *DeleteJobRequirementReqBuilder {
	builder := &DeleteJobRequirementReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 招聘需求 ID
//
// 示例值：1616161616
func (builder *DeleteJobRequirementReqBuilder) JobRequirementId(jobRequirementId string) *DeleteJobRequirementReqBuilder {
	builder.apiReq.PathParams.Set("job_requirement_id", fmt.Sprint(jobRequirementId))
	return builder
}

func (builder *DeleteJobRequirementReqBuilder) Build() *DeleteJobRequirementReq {
	req := &DeleteJobRequirementReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteJobRequirementReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteJobRequirementResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteJobRequirementResp) Success() bool {
	return resp.Code == 0
}

type ListJobRequirementReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListJobRequirementReqBuilder() *ListJobRequirementReqBuilder {
	builder := &ListJobRequirementReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 页码标识，获取第一页传空，每次查询会返回下一页的page_token
//
// 示例值：1231231987
func (builder *ListJobRequirementReqBuilder) PageToken(pageToken string) *ListJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 每页获取记录数量，最大100
//
// 示例值：20
func (builder *ListJobRequirementReqBuilder) PageSize(pageSize int) *ListJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 职位ID
//
// 示例值：6001
func (builder *ListJobRequirementReqBuilder) JobId(jobId string) *ListJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("job_id", fmt.Sprint(jobId))
	return builder
}

// 起始创建时间，传入毫秒级时间戳
//
// 示例值：1658980233000
func (builder *ListJobRequirementReqBuilder) CreateTimeBegin(createTimeBegin string) *ListJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("create_time_begin", fmt.Sprint(createTimeBegin))
	return builder
}

// 截止创建时间，传入毫秒级时间戳
//
// 示例值：1658980233000
func (builder *ListJobRequirementReqBuilder) CreateTimeEnd(createTimeEnd string) *ListJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("create_time_end", fmt.Sprint(createTimeEnd))
	return builder
}

// 起始更新时间，传入毫秒级时间戳
//
// 示例值：1658980233000
func (builder *ListJobRequirementReqBuilder) UpdateTimeBegin(updateTimeBegin string) *ListJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("update_time_begin", fmt.Sprint(updateTimeBegin))
	return builder
}

// 截止更新时间，传入毫秒级时间戳
//
// 示例值：1658980233000
func (builder *ListJobRequirementReqBuilder) UpdateTimeEnd(updateTimeEnd string) *ListJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("update_time_end", fmt.Sprint(updateTimeEnd))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *ListJobRequirementReqBuilder) UserIdType(userIdType string) *ListJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：
func (builder *ListJobRequirementReqBuilder) DepartmentIdType(departmentIdType string) *ListJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *ListJobRequirementReqBuilder) Build() *ListJobRequirementReq {
	req := &ListJobRequirementReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListJobRequirementReq struct {
	apiReq *larkcore.ApiReq
}

type ListJobRequirementRespData struct {
	HasMore   *bool                `json:"has_more,omitempty"`   // 是否有下一页
	PageToken *string              `json:"page_token,omitempty"` // 下一页页码
	Items     []*JobRequirementDto `json:"items,omitempty"`      // 查询的招聘需求信息
}

type ListJobRequirementResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListJobRequirementRespData `json:"data"` // 业务数据
}

func (resp *ListJobRequirementResp) Success() bool {
	return resp.Code == 0
}

type ListByIdJobRequirementReqBodyBuilder struct {
	idList     []string // 招聘需求ID列表
	idListFlag bool
}

func NewListByIdJobRequirementReqBodyBuilder() *ListByIdJobRequirementReqBodyBuilder {
	builder := &ListByIdJobRequirementReqBodyBuilder{}
	return builder
}

// 招聘需求ID列表
//
//示例值：
func (builder *ListByIdJobRequirementReqBodyBuilder) IdList(idList []string) *ListByIdJobRequirementReqBodyBuilder {
	builder.idList = idList
	builder.idListFlag = true
	return builder
}

func (builder *ListByIdJobRequirementReqBodyBuilder) Build() *ListByIdJobRequirementReqBody {
	req := &ListByIdJobRequirementReqBody{}
	if builder.idListFlag {
		req.IdList = builder.idList
	}
	return req
}

type ListByIdJobRequirementPathReqBodyBuilder struct {
	idList     []string // 招聘需求ID列表
	idListFlag bool
}

func NewListByIdJobRequirementPathReqBodyBuilder() *ListByIdJobRequirementPathReqBodyBuilder {
	builder := &ListByIdJobRequirementPathReqBodyBuilder{}
	return builder
}

// 招聘需求ID列表
//
// 示例值：
func (builder *ListByIdJobRequirementPathReqBodyBuilder) IdList(idList []string) *ListByIdJobRequirementPathReqBodyBuilder {
	builder.idList = idList
	builder.idListFlag = true
	return builder
}

func (builder *ListByIdJobRequirementPathReqBodyBuilder) Build() (*ListByIdJobRequirementReqBody, error) {
	req := &ListByIdJobRequirementReqBody{}
	if builder.idListFlag {
		req.IdList = builder.idList
	}
	return req, nil
}

type ListByIdJobRequirementReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *ListByIdJobRequirementReqBody
}

func NewListByIdJobRequirementReqBuilder() *ListByIdJobRequirementReqBuilder {
	builder := &ListByIdJobRequirementReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *ListByIdJobRequirementReqBuilder) UserIdType(userIdType string) *ListByIdJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：
func (builder *ListByIdJobRequirementReqBuilder) DepartmentIdType(departmentIdType string) *ListByIdJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 获取招聘需求信息
func (builder *ListByIdJobRequirementReqBuilder) Body(body *ListByIdJobRequirementReqBody) *ListByIdJobRequirementReqBuilder {
	builder.body = body
	return builder
}

func (builder *ListByIdJobRequirementReqBuilder) Build() *ListByIdJobRequirementReq {
	req := &ListByIdJobRequirementReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type ListByIdJobRequirementReqBody struct {
	IdList []string `json:"id_list,omitempty"` // 招聘需求ID列表
}

type ListByIdJobRequirementReq struct {
	apiReq *larkcore.ApiReq
	Body   *ListByIdJobRequirementReqBody `body:""`
}

type ListByIdJobRequirementRespData struct {
	Items []*JobRequirementDto `json:"items,omitempty"` // 招聘需求列表
}

type ListByIdJobRequirementResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListByIdJobRequirementRespData `json:"data"` // 业务数据
}

func (resp *ListByIdJobRequirementResp) Success() bool {
	return resp.Code == 0
}

type UpdateJobRequirementReqBuilder struct {
	apiReq         *larkcore.ApiReq
	jobRequirement *JobRequirement
}

func NewUpdateJobRequirementReqBuilder() *UpdateJobRequirementReqBuilder {
	builder := &UpdateJobRequirementReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 招聘需求ID
//
// 示例值：623455234
func (builder *UpdateJobRequirementReqBuilder) JobRequirementId(jobRequirementId string) *UpdateJobRequirementReqBuilder {
	builder.apiReq.PathParams.Set("job_requirement_id", fmt.Sprint(jobRequirementId))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *UpdateJobRequirementReqBuilder) UserIdType(userIdType string) *UpdateJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：
func (builder *UpdateJobRequirementReqBuilder) DepartmentIdType(departmentIdType string) *UpdateJobRequirementReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 更新招聘需求
func (builder *UpdateJobRequirementReqBuilder) JobRequirement(jobRequirement *JobRequirement) *UpdateJobRequirementReqBuilder {
	builder.jobRequirement = jobRequirement
	return builder
}

func (builder *UpdateJobRequirementReqBuilder) Build() *UpdateJobRequirementReq {
	req := &UpdateJobRequirementReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.jobRequirement
	return req
}

type UpdateJobRequirementReq struct {
	apiReq         *larkcore.ApiReq
	JobRequirement *JobRequirement `body:""`
}

type UpdateJobRequirementResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *UpdateJobRequirementResp) Success() bool {
	return resp.Code == 0
}

type ListJobRequirementSchemaReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListJobRequirementSchemaReqBuilder() *ListJobRequirementSchemaReqBuilder {
	builder := &ListJobRequirementSchemaReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 页码标识，获取第一页传空，每次查询会返回下一页的page_token
//
// 示例值：1231231987
func (builder *ListJobRequirementSchemaReqBuilder) PageToken(pageToken string) *ListJobRequirementSchemaReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 每页获取记录数量，最大100
//
// 示例值：100
func (builder *ListJobRequirementSchemaReqBuilder) PageSize(pageSize int) *ListJobRequirementSchemaReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

func (builder *ListJobRequirementSchemaReqBuilder) Build() *ListJobRequirementSchemaReq {
	req := &ListJobRequirementSchemaReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListJobRequirementSchemaReq struct {
	apiReq *larkcore.ApiReq
}

type ListJobRequirementSchemaRespData struct {
	Items     []*JobRequirementSchema `json:"items,omitempty"`      // 列表
	HasMore   *bool                   `json:"has_more,omitempty"`   // 是否有下一页
	PageToken *string                 `json:"page_token,omitempty"` // 下一页页码
}

type ListJobRequirementSchemaResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListJobRequirementSchemaRespData `json:"data"` // 业务数据
}

func (resp *ListJobRequirementSchemaResp) Success() bool {
	return resp.Code == 0
}

type CreateNoteReqBuilder struct {
	apiReq *larkcore.ApiReq
	note   *Note
}

func NewCreateNoteReqBuilder() *CreateNoteReqBuilder {
	builder := &CreateNoteReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *CreateNoteReqBuilder) UserIdType(userIdType string) *CreateNoteReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 创建备注信息
func (builder *CreateNoteReqBuilder) Note(note *Note) *CreateNoteReqBuilder {
	builder.note = note
	return builder
}

func (builder *CreateNoteReqBuilder) Build() *CreateNoteReq {
	req := &CreateNoteReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.note
	return req
}

type CreateNoteReq struct {
	apiReq *larkcore.ApiReq
	Note   *Note `body:""`
}

type CreateNoteRespData struct {
	Note *Note `json:"note,omitempty"` // 备注信息
}

type CreateNoteResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateNoteRespData `json:"data"` // 业务数据
}

func (resp *CreateNoteResp) Success() bool {
	return resp.Code == 0
}

type GetNoteReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetNoteReqBuilder() *GetNoteReqBuilder {
	builder := &GetNoteReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 备注ID
//
// 示例值：6949805467799537964
func (builder *GetNoteReqBuilder) NoteId(noteId string) *GetNoteReqBuilder {
	builder.apiReq.PathParams.Set("note_id", fmt.Sprint(noteId))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *GetNoteReqBuilder) UserIdType(userIdType string) *GetNoteReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *GetNoteReqBuilder) Build() *GetNoteReq {
	req := &GetNoteReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetNoteReq struct {
	apiReq *larkcore.ApiReq
}

type GetNoteRespData struct {
	Note *Note `json:"note,omitempty"` // 备注数据
}

type GetNoteResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetNoteRespData `json:"data"` // 业务数据
}

func (resp *GetNoteResp) Success() bool {
	return resp.Code == 0
}

type ListNoteReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListNoteReqBuilder() *ListNoteReqBuilder {
	builder := &ListNoteReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 每页限制, 每页最大不超过100
//
// 示例值：10
func (builder *ListNoteReqBuilder) PageSize(pageSize int) *ListNoteReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 查询游标, 由上一页结果返回, 第一页不传
//
// 示例值：1
func (builder *ListNoteReqBuilder) PageToken(pageToken string) *ListNoteReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 人才ID
//
// 示例值：6916472453069883661
func (builder *ListNoteReqBuilder) TalentId(talentId string) *ListNoteReqBuilder {
	builder.apiReq.QueryParams.Set("talent_id", fmt.Sprint(talentId))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *ListNoteReqBuilder) UserIdType(userIdType string) *ListNoteReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *ListNoteReqBuilder) Build() *ListNoteReq {
	req := &ListNoteReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListNoteReq struct {
	apiReq *larkcore.ApiReq
}

type ListNoteRespData struct {
	Items     []*Note `json:"items,omitempty"`      // 备注数据列表
	HasMore   *bool   `json:"has_more,omitempty"`   // 是否还有下一页数据
	PageToken *string `json:"page_token,omitempty"` // 游标, 翻下一页数据时使用
}

type ListNoteResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListNoteRespData `json:"data"` // 业务数据
}

func (resp *ListNoteResp) Success() bool {
	return resp.Code == 0
}

type PatchNoteReqBodyBuilder struct {
	content     string // 备注内容
	contentFlag bool
}

func NewPatchNoteReqBodyBuilder() *PatchNoteReqBodyBuilder {
	builder := &PatchNoteReqBodyBuilder{}
	return builder
}

// 备注内容
//
//示例值：111
func (builder *PatchNoteReqBodyBuilder) Content(content string) *PatchNoteReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *PatchNoteReqBodyBuilder) Build() *PatchNoteReqBody {
	req := &PatchNoteReqBody{}
	if builder.contentFlag {
		req.Content = &builder.content
	}
	return req
}

type PatchNotePathReqBodyBuilder struct {
	content     string // 备注内容
	contentFlag bool
}

func NewPatchNotePathReqBodyBuilder() *PatchNotePathReqBodyBuilder {
	builder := &PatchNotePathReqBodyBuilder{}
	return builder
}

// 备注内容
//
// 示例值：111
func (builder *PatchNotePathReqBodyBuilder) Content(content string) *PatchNotePathReqBodyBuilder {
	builder.content = content
	builder.contentFlag = true
	return builder
}

func (builder *PatchNotePathReqBodyBuilder) Build() (*PatchNoteReqBody, error) {
	req := &PatchNoteReqBody{}
	if builder.contentFlag {
		req.Content = &builder.content
	}
	return req, nil
}

type PatchNoteReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *PatchNoteReqBody
}

func NewPatchNoteReqBuilder() *PatchNoteReqBuilder {
	builder := &PatchNoteReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 备注 ID
//
// 示例值：6960663240925956401
func (builder *PatchNoteReqBuilder) NoteId(noteId string) *PatchNoteReqBuilder {
	builder.apiReq.PathParams.Set("note_id", fmt.Sprint(noteId))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *PatchNoteReqBuilder) UserIdType(userIdType string) *PatchNoteReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 根据备注 ID 更新备注信息
func (builder *PatchNoteReqBuilder) Body(body *PatchNoteReqBody) *PatchNoteReqBuilder {
	builder.body = body
	return builder
}

func (builder *PatchNoteReqBuilder) Build() *PatchNoteReq {
	req := &PatchNoteReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type PatchNoteReqBody struct {
	Content *string `json:"content,omitempty"` // 备注内容
}

type PatchNoteReq struct {
	apiReq *larkcore.ApiReq
	Body   *PatchNoteReqBody `body:""`
}

type PatchNoteRespData struct {
	Note *Note `json:"note,omitempty"` // 备注数据
}

type PatchNoteResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *PatchNoteRespData `json:"data"` // 业务数据
}

func (resp *PatchNoteResp) Success() bool {
	return resp.Code == 0
}

type CreateOfferReqBuilder struct {
	apiReq    *larkcore.ApiReq
	offerInfo *OfferInfo
}

func NewCreateOfferReqBuilder() *CreateOfferReqBuilder {
	builder := &CreateOfferReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：open_id
func (builder *CreateOfferReqBuilder) UserIdType(userIdType string) *CreateOfferReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：
func (builder *CreateOfferReqBuilder) DepartmentIdType(departmentIdType string) *CreateOfferReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 创建 Offer 时，需传入本文档中标注为必传的参数，其余参数是否必传参考「获取 Offer 申请表模板信息」的参数定义
func (builder *CreateOfferReqBuilder) OfferInfo(offerInfo *OfferInfo) *CreateOfferReqBuilder {
	builder.offerInfo = offerInfo
	return builder
}

func (builder *CreateOfferReqBuilder) Build() *CreateOfferReq {
	req := &CreateOfferReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.offerInfo
	return req
}

type CreateOfferReq struct {
	apiReq    *larkcore.ApiReq
	OfferInfo *OfferInfo `body:""`
}

type CreateOfferRespData struct {
	OfferId            *string                `json:"offer_id,omitempty"`             // Offer ID
	ApplicationId      *string                `json:"application_id,omitempty"`       // 投递 ID
	SchemaId           *string                `json:"schema_id,omitempty"`            // 模板 ID
	OfferType          *int                   `json:"offer_type,omitempty"`           // Offer 类型
	BasicInfo          *OfferBasicInfo        `json:"basic_info,omitempty"`           // Offer 基本信息
	SalaryInfo         *OfferSalaryInfo       `json:"salary_info,omitempty"`          // Offer 薪资信息
	CustomizedInfoList []*OfferCustomizedInfo `json:"customized_info_list,omitempty"` // 自定义信息
}

type CreateOfferResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateOfferRespData `json:"data"` // 业务数据
}

func (resp *CreateOfferResp) Success() bool {
	return resp.Code == 0
}

type GetOfferReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetOfferReqBuilder() *GetOfferReqBuilder {
	builder := &GetOfferReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// Offer ID
//
// 示例值：1111111
func (builder *GetOfferReqBuilder) OfferId(offerId string) *GetOfferReqBuilder {
	builder.apiReq.PathParams.Set("offer_id", fmt.Sprint(offerId))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *GetOfferReqBuilder) UserIdType(userIdType string) *GetOfferReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：
func (builder *GetOfferReqBuilder) DepartmentIdType(departmentIdType string) *GetOfferReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *GetOfferReqBuilder) Build() *GetOfferReq {
	req := &GetOfferReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetOfferReq struct {
	apiReq *larkcore.ApiReq
}

type GetOfferRespData struct {
	Offer *Offer `json:"offer,omitempty"` // Offer 详情
}

type GetOfferResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetOfferRespData `json:"data"` // 业务数据
}

func (resp *GetOfferResp) Success() bool {
	return resp.Code == 0
}

type InternOfferStatusOfferReqBuilder struct {
	apiReq            *larkcore.ApiReq
	internOfferStatus *InternOfferStatus
}

func NewInternOfferStatusOfferReqBuilder() *InternOfferStatusOfferReqBuilder {
	builder := &InternOfferStatusOfferReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// Offer ID
//
// 示例值：7016605170635213100
func (builder *InternOfferStatusOfferReqBuilder) OfferId(offerId string) *InternOfferStatusOfferReqBuilder {
	builder.apiReq.PathParams.Set("offer_id", fmt.Sprint(offerId))
	return builder
}

// 对「实习待入职」状态的实习 Offer 确认入职、放弃入职，或对「实习已入职」状态的实习 Offer 操作离职
func (builder *InternOfferStatusOfferReqBuilder) InternOfferStatus(internOfferStatus *InternOfferStatus) *InternOfferStatusOfferReqBuilder {
	builder.internOfferStatus = internOfferStatus
	return builder
}

func (builder *InternOfferStatusOfferReqBuilder) Build() *InternOfferStatusOfferReq {
	req := &InternOfferStatusOfferReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.internOfferStatus
	return req
}

type InternOfferStatusOfferReq struct {
	apiReq            *larkcore.ApiReq
	InternOfferStatus *InternOfferStatus `body:""`
}

type InternOfferStatusOfferRespData struct {
	OfferId         *string                     `json:"offer_id,omitempty"`         // Offer ID
	Operation       *string                     `json:"operation,omitempty"`        // 更新入/离职状态的操作
	OnboardingInfo  *InternOfferOnboardingInfo  `json:"onboarding_info,omitempty"`  // 入职表单信息（当 operation 为 confirm_onboarding 时，该字段必填）
	OffboardingInfo *InternOfferOffboardingInfo `json:"offboarding_info,omitempty"` // 离职表单信息（当 operation 为 offboard 时，该字段必填）
}

type InternOfferStatusOfferResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *InternOfferStatusOfferRespData `json:"data"` // 业务数据
}

func (resp *InternOfferStatusOfferResp) Success() bool {
	return resp.Code == 0
}

type ListOfferReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListOfferReqBuilder() *ListOfferReqBuilder {
	builder := &ListOfferReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 页码标识，获取第一页传空，每次查询会返回下一页的page_token
//
// 示例值：1231231987
func (builder *ListOfferReqBuilder) PageToken(pageToken string) *ListOfferReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 每页获取记录数量，最大100
//
// 示例值：100
func (builder *ListOfferReqBuilder) PageSize(pageSize int) *ListOfferReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 人才 ID
//
// 示例值：7096320678581242123
func (builder *ListOfferReqBuilder) TalentId(talentId string) *ListOfferReqBuilder {
	builder.apiReq.QueryParams.Set("talent_id", fmt.Sprint(talentId))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *ListOfferReqBuilder) UserIdType(userIdType string) *ListOfferReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *ListOfferReqBuilder) Build() *ListOfferReq {
	req := &ListOfferReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListOfferReq struct {
	apiReq *larkcore.ApiReq
}

type ListOfferRespData struct {
	HasMore   *bool            `json:"has_more,omitempty"`   // 是否有下一页
	PageToken *string          `json:"page_token,omitempty"` // 下一页页码
	Items     []*OfferListInfo `json:"items,omitempty"`      // Offer 列表
}

type ListOfferResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListOfferRespData `json:"data"` // 业务数据
}

func (resp *ListOfferResp) Success() bool {
	return resp.Code == 0
}

type OfferStatusOfferReqBodyBuilder struct {
	offerStatus                 int // offer状态
	offerStatusFlag             bool
	expirationDate              string // offer 失效时间，当反馈状态是「offer已发出」时为必填项
	expirationDateFlag          bool
	terminationReasonIdList     []string // 终止原因列表，当反馈状态是「候选人已拒绝」时为必填项；最多传入50个
	terminationReasonIdListFlag bool
	terminationReasonNote       string // 终止备注
	terminationReasonNoteFlag   bool
}

func NewOfferStatusOfferReqBodyBuilder() *OfferStatusOfferReqBodyBuilder {
	builder := &OfferStatusOfferReqBodyBuilder{}
	return builder
}

// offer状态
//
//示例值：
func (builder *OfferStatusOfferReqBodyBuilder) OfferStatus(offerStatus int) *OfferStatusOfferReqBodyBuilder {
	builder.offerStatus = offerStatus
	builder.offerStatusFlag = true
	return builder
}

// offer 失效时间，当反馈状态是「offer已发出」时为必填项
//
//示例值：2023-01-01
func (builder *OfferStatusOfferReqBodyBuilder) ExpirationDate(expirationDate string) *OfferStatusOfferReqBodyBuilder {
	builder.expirationDate = expirationDate
	builder.expirationDateFlag = true
	return builder
}

// 终止原因列表，当反馈状态是「候选人已拒绝」时为必填项；最多传入50个
//
//示例值：
func (builder *OfferStatusOfferReqBodyBuilder) TerminationReasonIdList(terminationReasonIdList []string) *OfferStatusOfferReqBodyBuilder {
	builder.terminationReasonIdList = terminationReasonIdList
	builder.terminationReasonIdListFlag = true
	return builder
}

// 终止备注
//
//示例值：不符合期望
func (builder *OfferStatusOfferReqBodyBuilder) TerminationReasonNote(terminationReasonNote string) *OfferStatusOfferReqBodyBuilder {
	builder.terminationReasonNote = terminationReasonNote
	builder.terminationReasonNoteFlag = true
	return builder
}

func (builder *OfferStatusOfferReqBodyBuilder) Build() *OfferStatusOfferReqBody {
	req := &OfferStatusOfferReqBody{}
	if builder.offerStatusFlag {
		req.OfferStatus = &builder.offerStatus
	}
	if builder.expirationDateFlag {
		req.ExpirationDate = &builder.expirationDate
	}
	if builder.terminationReasonIdListFlag {
		req.TerminationReasonIdList = builder.terminationReasonIdList
	}
	if builder.terminationReasonNoteFlag {
		req.TerminationReasonNote = &builder.terminationReasonNote
	}
	return req
}

type OfferStatusOfferPathReqBodyBuilder struct {
	offerStatus                 int // offer状态
	offerStatusFlag             bool
	expirationDate              string // offer 失效时间，当反馈状态是「offer已发出」时为必填项
	expirationDateFlag          bool
	terminationReasonIdList     []string // 终止原因列表，当反馈状态是「候选人已拒绝」时为必填项；最多传入50个
	terminationReasonIdListFlag bool
	terminationReasonNote       string // 终止备注
	terminationReasonNoteFlag   bool
}

func NewOfferStatusOfferPathReqBodyBuilder() *OfferStatusOfferPathReqBodyBuilder {
	builder := &OfferStatusOfferPathReqBodyBuilder{}
	return builder
}

// offer状态
//
// 示例值：
func (builder *OfferStatusOfferPathReqBodyBuilder) OfferStatus(offerStatus int) *OfferStatusOfferPathReqBodyBuilder {
	builder.offerStatus = offerStatus
	builder.offerStatusFlag = true
	return builder
}

// offer 失效时间，当反馈状态是「offer已发出」时为必填项
//
// 示例值：2023-01-01
func (builder *OfferStatusOfferPathReqBodyBuilder) ExpirationDate(expirationDate string) *OfferStatusOfferPathReqBodyBuilder {
	builder.expirationDate = expirationDate
	builder.expirationDateFlag = true
	return builder
}

// 终止原因列表，当反馈状态是「候选人已拒绝」时为必填项；最多传入50个
//
// 示例值：
func (builder *OfferStatusOfferPathReqBodyBuilder) TerminationReasonIdList(terminationReasonIdList []string) *OfferStatusOfferPathReqBodyBuilder {
	builder.terminationReasonIdList = terminationReasonIdList
	builder.terminationReasonIdListFlag = true
	return builder
}

// 终止备注
//
// 示例值：不符合期望
func (builder *OfferStatusOfferPathReqBodyBuilder) TerminationReasonNote(terminationReasonNote string) *OfferStatusOfferPathReqBodyBuilder {
	builder.terminationReasonNote = terminationReasonNote
	builder.terminationReasonNoteFlag = true
	return builder
}

func (builder *OfferStatusOfferPathReqBodyBuilder) Build() (*OfferStatusOfferReqBody, error) {
	req := &OfferStatusOfferReqBody{}
	if builder.offerStatusFlag {
		req.OfferStatus = &builder.offerStatus
	}
	if builder.expirationDateFlag {
		req.ExpirationDate = &builder.expirationDate
	}
	if builder.terminationReasonIdListFlag {
		req.TerminationReasonIdList = builder.terminationReasonIdList
	}
	if builder.terminationReasonNoteFlag {
		req.TerminationReasonNote = &builder.terminationReasonNote
	}
	return req, nil
}

type OfferStatusOfferReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *OfferStatusOfferReqBody
}

func NewOfferStatusOfferReqBuilder() *OfferStatusOfferReqBuilder {
	builder := &OfferStatusOfferReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// offer ID
//
// 示例值：6930815272790114324
func (builder *OfferStatusOfferReqBuilder) OfferId(offerId string) *OfferStatusOfferReqBuilder {
	builder.apiReq.PathParams.Set("offer_id", fmt.Sprint(offerId))
	return builder
}

//
func (builder *OfferStatusOfferReqBuilder) Body(body *OfferStatusOfferReqBody) *OfferStatusOfferReqBuilder {
	builder.body = body
	return builder
}

func (builder *OfferStatusOfferReqBuilder) Build() *OfferStatusOfferReq {
	req := &OfferStatusOfferReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.body
	return req
}

type OfferStatusOfferReqBody struct {
	OfferStatus             *int     `json:"offer_status,omitempty"`               // offer状态
	ExpirationDate          *string  `json:"expiration_date,omitempty"`            // offer 失效时间，当反馈状态是「offer已发出」时为必填项
	TerminationReasonIdList []string `json:"termination_reason_id_list,omitempty"` // 终止原因列表，当反馈状态是「候选人已拒绝」时为必填项；最多传入50个
	TerminationReasonNote   *string  `json:"termination_reason_note,omitempty"`    // 终止备注
}

type OfferStatusOfferReq struct {
	apiReq *larkcore.ApiReq
	Body   *OfferStatusOfferReqBody `body:""`
}

type OfferStatusOfferResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *OfferStatusOfferResp) Success() bool {
	return resp.Code == 0
}

type UpdateOfferReqBuilder struct {
	apiReq    *larkcore.ApiReq
	offerInfo *OfferInfo
}

func NewUpdateOfferReqBuilder() *UpdateOfferReqBuilder {
	builder := &UpdateOfferReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// Offer ID
//
// 示例值：7016605170635213100
func (builder *UpdateOfferReqBuilder) OfferId(offerId string) *UpdateOfferReqBuilder {
	builder.apiReq.PathParams.Set("offer_id", fmt.Sprint(offerId))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：open_id
func (builder *UpdateOfferReqBuilder) UserIdType(userIdType string) *UpdateOfferReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门 ID 的类型
//
// 示例值：
func (builder *UpdateOfferReqBuilder) DepartmentIdType(departmentIdType string) *UpdateOfferReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 1. 更新 Offer 时，需传入本文档中标注为必传的参数，其余参数是否必传参考「获取 Offer 申请表模板信息」的参数定义；;2. 对系统中已存在的 offer 进行更新的，若更新 offer 中含有「修改需审批」的字段，更新后原 Offer 的审批会自动撤回，需要重新发起审批
func (builder *UpdateOfferReqBuilder) OfferInfo(offerInfo *OfferInfo) *UpdateOfferReqBuilder {
	builder.offerInfo = offerInfo
	return builder
}

func (builder *UpdateOfferReqBuilder) Build() *UpdateOfferReq {
	req := &UpdateOfferReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.offerInfo
	return req
}

type UpdateOfferReq struct {
	apiReq    *larkcore.ApiReq
	OfferInfo *OfferInfo `body:""`
}

type UpdateOfferResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *UpdateOfferResp) Success() bool {
	return resp.Code == 0
}

type GetOfferSchemaReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetOfferSchemaReqBuilder() *GetOfferSchemaReqBuilder {
	builder := &GetOfferSchemaReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// offer申请表的ID *必需属性
//
// 示例值：1231231231231
func (builder *GetOfferSchemaReqBuilder) OfferSchemaId(offerSchemaId string) *GetOfferSchemaReqBuilder {
	builder.apiReq.PathParams.Set("offer_schema_id", fmt.Sprint(offerSchemaId))
	return builder
}

func (builder *GetOfferSchemaReqBuilder) Build() *GetOfferSchemaReq {
	req := &GetOfferSchemaReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetOfferSchemaReq struct {
	apiReq *larkcore.ApiReq
}

type GetOfferSchemaRespData struct {
	Id         *string              `json:"id,omitempty"`          // offer申请表ID
	Scenario   *int                 `json:"scenario,omitempty"`    // offer申请表使用场景
	Version    *int                 `json:"version,omitempty"`     // 申请表版本
	ObjectList []*OfferSchemaDetail `json:"object_list,omitempty"` // 字段对象信息
}

type GetOfferSchemaResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetOfferSchemaRespData `json:"data"` // 业务数据
}

func (resp *GetOfferSchemaResp) Success() bool {
	return resp.Code == 0
}

type ListQuestionnaireReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListQuestionnaireReqBuilder() *ListQuestionnaireReqBuilder {
	builder := &ListQuestionnaireReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 页码标识，获取第一页传空，每次查询会返回下一页的page_token
//
// 示例值：1231231987
func (builder *ListQuestionnaireReqBuilder) PageToken(pageToken string) *ListQuestionnaireReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 每页获取记录数量，最大100
//
// 示例值：100
func (builder *ListQuestionnaireReqBuilder) PageSize(pageSize int) *ListQuestionnaireReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 投递 ID
//
// 示例值：6985833807195212076
func (builder *ListQuestionnaireReqBuilder) ApplicationId(applicationId string) *ListQuestionnaireReqBuilder {
	builder.apiReq.QueryParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}

// 面试 ID
//
// 示例值：7038435261598763308
func (builder *ListQuestionnaireReqBuilder) InterviewId(interviewId string) *ListQuestionnaireReqBuilder {
	builder.apiReq.QueryParams.Set("interview_id", fmt.Sprint(interviewId))
	return builder
}

// 最早更新时间
//
// 示例值：1638848468868
func (builder *ListQuestionnaireReqBuilder) UpdateStartTime(updateStartTime string) *ListQuestionnaireReqBuilder {
	builder.apiReq.QueryParams.Set("update_start_time", fmt.Sprint(updateStartTime))
	return builder
}

// 最晚更新时间
//
// 示例值：1638848468869
func (builder *ListQuestionnaireReqBuilder) UpdateEndTime(updateEndTime string) *ListQuestionnaireReqBuilder {
	builder.apiReq.QueryParams.Set("update_end_time", fmt.Sprint(updateEndTime))
	return builder
}

func (builder *ListQuestionnaireReqBuilder) Build() *ListQuestionnaireReq {
	req := &ListQuestionnaireReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListQuestionnaireReq struct {
	apiReq *larkcore.ApiReq
}

type ListQuestionnaireRespData struct {
	HasMore   *bool            `json:"has_more,omitempty"`   // 是否有下一页
	PageToken *string          `json:"page_token,omitempty"` // 下一页页码
	Items     []*Questionnaire `json:"items,omitempty"`      // 满意度评价列表
}

type ListQuestionnaireResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListQuestionnaireRespData `json:"data"` // 业务数据
}

func (resp *ListQuestionnaireResp) Success() bool {
	return resp.Code == 0
}

type GetByApplicationReferralReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetByApplicationReferralReqBuilder() *GetByApplicationReferralReqBuilder {
	builder := &GetByApplicationReferralReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 投递的 ID
//
// 示例值：6134134355464633
func (builder *GetByApplicationReferralReqBuilder) ApplicationId(applicationId string) *GetByApplicationReferralReqBuilder {
	builder.apiReq.QueryParams.Set("application_id", fmt.Sprint(applicationId))
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：open_id
func (builder *GetByApplicationReferralReqBuilder) UserIdType(userIdType string) *GetByApplicationReferralReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *GetByApplicationReferralReqBuilder) Build() *GetByApplicationReferralReq {
	req := &GetByApplicationReferralReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetByApplicationReferralReq struct {
	apiReq *larkcore.ApiReq
}

type GetByApplicationReferralRespData struct {
	Referral *Referral `json:"referral,omitempty"` // 内推信息
}

type GetByApplicationReferralResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetByApplicationReferralRespData `json:"data"` // 业务数据
}

func (resp *GetByApplicationReferralResp) Success() bool {
	return resp.Code == 0
}

type ListResumeSourceReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListResumeSourceReqBuilder() *ListResumeSourceReqBuilder {
	builder := &ListResumeSourceReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListResumeSourceReqBuilder) Limit(limit int) *ListResumeSourceReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小
//
// 示例值：10
func (builder *ListResumeSourceReqBuilder) PageSize(pageSize int) *ListResumeSourceReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：1
func (builder *ListResumeSourceReqBuilder) PageToken(pageToken string) *ListResumeSourceReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *ListResumeSourceReqBuilder) Build() *ListResumeSourceReq {
	req := &ListResumeSourceReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListResumeSourceReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListResumeSourceRespData struct {
	Items     []*ResumeSource `json:"items,omitempty"`      // 数据
	PageToken *string         `json:"page_token,omitempty"` //
	HasMore   *bool           `json:"has_more,omitempty"`   //
}

type ListResumeSourceResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListResumeSourceRespData `json:"data"` // 业务数据
}

func (resp *ListResumeSourceResp) Success() bool {
	return resp.Code == 0
}

type AddToFolderTalentReqBodyBuilder struct {
	talentIdList     []string // 人才 ID 列表
	talentIdListFlag bool
	folderId         string // 文件夹 ID
	folderIdFlag     bool
}

func NewAddToFolderTalentReqBodyBuilder() *AddToFolderTalentReqBodyBuilder {
	builder := &AddToFolderTalentReqBodyBuilder{}
	return builder
}

// 人才 ID 列表
//
//示例值：6039620186502138151
func (builder *AddToFolderTalentReqBodyBuilder) TalentIdList(talentIdList []string) *AddToFolderTalentReqBodyBuilder {
	builder.talentIdList = talentIdList
	builder.talentIdListFlag = true
	return builder
}

// 文件夹 ID
//
//示例值：7039620186502138156
func (builder *AddToFolderTalentReqBodyBuilder) FolderId(folderId string) *AddToFolderTalentReqBodyBuilder {
	builder.folderId = folderId
	builder.folderIdFlag = true
	return builder
}

func (builder *AddToFolderTalentReqBodyBuilder) Build() *AddToFolderTalentReqBody {
	req := &AddToFolderTalentReqBody{}
	if builder.talentIdListFlag {
		req.TalentIdList = builder.talentIdList
	}
	if builder.folderIdFlag {
		req.FolderId = &builder.folderId
	}
	return req
}

type AddToFolderTalentPathReqBodyBuilder struct {
	talentIdList     []string // 人才 ID 列表
	talentIdListFlag bool
	folderId         string // 文件夹 ID
	folderIdFlag     bool
}

func NewAddToFolderTalentPathReqBodyBuilder() *AddToFolderTalentPathReqBodyBuilder {
	builder := &AddToFolderTalentPathReqBodyBuilder{}
	return builder
}

// 人才 ID 列表
//
// 示例值：6039620186502138151
func (builder *AddToFolderTalentPathReqBodyBuilder) TalentIdList(talentIdList []string) *AddToFolderTalentPathReqBodyBuilder {
	builder.talentIdList = talentIdList
	builder.talentIdListFlag = true
	return builder
}

// 文件夹 ID
//
// 示例值：7039620186502138156
func (builder *AddToFolderTalentPathReqBodyBuilder) FolderId(folderId string) *AddToFolderTalentPathReqBodyBuilder {
	builder.folderId = folderId
	builder.folderIdFlag = true
	return builder
}

func (builder *AddToFolderTalentPathReqBodyBuilder) Build() (*AddToFolderTalentReqBody, error) {
	req := &AddToFolderTalentReqBody{}
	if builder.talentIdListFlag {
		req.TalentIdList = builder.talentIdList
	}
	if builder.folderIdFlag {
		req.FolderId = &builder.folderId
	}
	return req, nil
}

type AddToFolderTalentReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *AddToFolderTalentReqBody
}

func NewAddToFolderTalentReqBuilder() *AddToFolderTalentReqBuilder {
	builder := &AddToFolderTalentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 将人才加入指定文件夹
func (builder *AddToFolderTalentReqBuilder) Body(body *AddToFolderTalentReqBody) *AddToFolderTalentReqBuilder {
	builder.body = body
	return builder
}

func (builder *AddToFolderTalentReqBuilder) Build() *AddToFolderTalentReq {
	req := &AddToFolderTalentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type AddToFolderTalentReqBody struct {
	TalentIdList []string `json:"talent_id_list,omitempty"` // 人才 ID 列表
	FolderId     *string  `json:"folder_id,omitempty"`      // 文件夹 ID
}

type AddToFolderTalentReq struct {
	apiReq *larkcore.ApiReq
	Body   *AddToFolderTalentReqBody `body:""`
}

type AddToFolderTalentRespData struct {
	TalentIdList []string `json:"talent_id_list,omitempty"` // 人才 ID 列表
	FolderId     *string  `json:"folder_id,omitempty"`      // 文件夹 ID
}

type AddToFolderTalentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *AddToFolderTalentRespData `json:"data"` // 业务数据
}

func (resp *AddToFolderTalentResp) Success() bool {
	return resp.Code == 0
}

type BatchGetIdTalentReqBodyBuilder struct {
	mobileCode                   string // 手机国家区号，默认值：86，即中国大陆地区
	mobileCodeFlag               bool
	mobileNumberList             []string // 手机号，区号均采用 mobile_code 参数的值，最多 100 个
	mobileNumberListFlag         bool
	emailList                    []string // 邮箱信息列表，最多 100 个
	emailListFlag                bool
	identificationType           int // 证件类型，可参考招聘枚举常量文档下的 IdentificationType 枚举定义
	identificationTypeFlag       bool
	identificationNumberList     []string // 证件号
	identificationNumberListFlag bool
}

func NewBatchGetIdTalentReqBodyBuilder() *BatchGetIdTalentReqBodyBuilder {
	builder := &BatchGetIdTalentReqBodyBuilder{}
	return builder
}

// 手机国家区号，默认值：86，即中国大陆地区
//
//示例值：86
func (builder *BatchGetIdTalentReqBodyBuilder) MobileCode(mobileCode string) *BatchGetIdTalentReqBodyBuilder {
	builder.mobileCode = mobileCode
	builder.mobileCodeFlag = true
	return builder
}

// 手机号，区号均采用 mobile_code 参数的值，最多 100 个
//
//示例值：182900291190
func (builder *BatchGetIdTalentReqBodyBuilder) MobileNumberList(mobileNumberList []string) *BatchGetIdTalentReqBodyBuilder {
	builder.mobileNumberList = mobileNumberList
	builder.mobileNumberListFlag = true
	return builder
}

// 邮箱信息列表，最多 100 个
//
//示例值：foo@bytedance.com
func (builder *BatchGetIdTalentReqBodyBuilder) EmailList(emailList []string) *BatchGetIdTalentReqBodyBuilder {
	builder.emailList = emailList
	builder.emailListFlag = true
	return builder
}

// 证件类型，可参考招聘枚举常量文档下的 IdentificationType 枚举定义
//
//示例值：1
func (builder *BatchGetIdTalentReqBodyBuilder) IdentificationType(identificationType int) *BatchGetIdTalentReqBodyBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

// 证件号
//
//示例值：130xxxxxxx
func (builder *BatchGetIdTalentReqBodyBuilder) IdentificationNumberList(identificationNumberList []string) *BatchGetIdTalentReqBodyBuilder {
	builder.identificationNumberList = identificationNumberList
	builder.identificationNumberListFlag = true
	return builder
}

func (builder *BatchGetIdTalentReqBodyBuilder) Build() *BatchGetIdTalentReqBody {
	req := &BatchGetIdTalentReqBody{}
	if builder.mobileCodeFlag {
		req.MobileCode = &builder.mobileCode
	}
	if builder.mobileNumberListFlag {
		req.MobileNumberList = builder.mobileNumberList
	}
	if builder.emailListFlag {
		req.EmailList = builder.emailList
	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType
	}
	if builder.identificationNumberListFlag {
		req.IdentificationNumberList = builder.identificationNumberList
	}
	return req
}

type BatchGetIdTalentPathReqBodyBuilder struct {
	mobileCode                   string // 手机国家区号，默认值：86，即中国大陆地区
	mobileCodeFlag               bool
	mobileNumberList             []string // 手机号，区号均采用 mobile_code 参数的值，最多 100 个
	mobileNumberListFlag         bool
	emailList                    []string // 邮箱信息列表，最多 100 个
	emailListFlag                bool
	identificationType           int // 证件类型，可参考招聘枚举常量文档下的 IdentificationType 枚举定义
	identificationTypeFlag       bool
	identificationNumberList     []string // 证件号
	identificationNumberListFlag bool
}

func NewBatchGetIdTalentPathReqBodyBuilder() *BatchGetIdTalentPathReqBodyBuilder {
	builder := &BatchGetIdTalentPathReqBodyBuilder{}
	return builder
}

// 手机国家区号，默认值：86，即中国大陆地区
//
// 示例值：86
func (builder *BatchGetIdTalentPathReqBodyBuilder) MobileCode(mobileCode string) *BatchGetIdTalentPathReqBodyBuilder {
	builder.mobileCode = mobileCode
	builder.mobileCodeFlag = true
	return builder
}

// 手机号，区号均采用 mobile_code 参数的值，最多 100 个
//
// 示例值：182900291190
func (builder *BatchGetIdTalentPathReqBodyBuilder) MobileNumberList(mobileNumberList []string) *BatchGetIdTalentPathReqBodyBuilder {
	builder.mobileNumberList = mobileNumberList
	builder.mobileNumberListFlag = true
	return builder
}

// 邮箱信息列表，最多 100 个
//
// 示例值：foo@bytedance.com
func (builder *BatchGetIdTalentPathReqBodyBuilder) EmailList(emailList []string) *BatchGetIdTalentPathReqBodyBuilder {
	builder.emailList = emailList
	builder.emailListFlag = true
	return builder
}

// 证件类型，可参考招聘枚举常量文档下的 IdentificationType 枚举定义
//
// 示例值：1
func (builder *BatchGetIdTalentPathReqBodyBuilder) IdentificationType(identificationType int) *BatchGetIdTalentPathReqBodyBuilder {
	builder.identificationType = identificationType
	builder.identificationTypeFlag = true
	return builder
}

// 证件号
//
// 示例值：130xxxxxxx
func (builder *BatchGetIdTalentPathReqBodyBuilder) IdentificationNumberList(identificationNumberList []string) *BatchGetIdTalentPathReqBodyBuilder {
	builder.identificationNumberList = identificationNumberList
	builder.identificationNumberListFlag = true
	return builder
}

func (builder *BatchGetIdTalentPathReqBodyBuilder) Build() (*BatchGetIdTalentReqBody, error) {
	req := &BatchGetIdTalentReqBody{}
	if builder.mobileCodeFlag {
		req.MobileCode = &builder.mobileCode
	}
	if builder.mobileNumberListFlag {
		req.MobileNumberList = builder.mobileNumberList
	}
	if builder.emailListFlag {
		req.EmailList = builder.emailList
	}
	if builder.identificationTypeFlag {
		req.IdentificationType = &builder.identificationType
	}
	if builder.identificationNumberListFlag {
		req.IdentificationNumberList = builder.identificationNumberList
	}
	return req, nil
}

type BatchGetIdTalentReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *BatchGetIdTalentReqBody
}

func NewBatchGetIdTalentReqBuilder() *BatchGetIdTalentReqBuilder {
	builder := &BatchGetIdTalentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 通过人才信息获取人才 ID
func (builder *BatchGetIdTalentReqBuilder) Body(body *BatchGetIdTalentReqBody) *BatchGetIdTalentReqBuilder {
	builder.body = body
	return builder
}

func (builder *BatchGetIdTalentReqBuilder) Build() *BatchGetIdTalentReq {
	req := &BatchGetIdTalentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type BatchGetIdTalentReqBody struct {
	MobileCode               *string  `json:"mobile_code,omitempty"`                // 手机国家区号，默认值：86，即中国大陆地区
	MobileNumberList         []string `json:"mobile_number_list,omitempty"`         // 手机号，区号均采用 mobile_code 参数的值，最多 100 个
	EmailList                []string `json:"email_list,omitempty"`                 // 邮箱信息列表，最多 100 个
	IdentificationType       *int     `json:"identification_type,omitempty"`        // 证件类型，可参考招聘枚举常量文档下的 IdentificationType 枚举定义
	IdentificationNumberList []string `json:"identification_number_list,omitempty"` // 证件号
}

type BatchGetIdTalentReq struct {
	apiReq *larkcore.ApiReq
	Body   *BatchGetIdTalentReqBody `body:""`
}

type BatchGetIdTalentRespData struct {
	Talent []*TalentBatchInfo `json:"talent,omitempty"` // 人才信息列表
}

type BatchGetIdTalentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *BatchGetIdTalentRespData `json:"data"` // 业务数据
}

func (resp *BatchGetIdTalentResp) Success() bool {
	return resp.Code == 0
}

type GetTalentReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetTalentReqBuilder() *GetTalentReqBuilder {
	builder := &GetTalentReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 人才ID
//
// 示例值：6891560630172518670
func (builder *GetTalentReqBuilder) TalentId(talentId string) *GetTalentReqBuilder {
	builder.apiReq.PathParams.Set("talent_id", fmt.Sprint(talentId))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *GetTalentReqBuilder) UserIdType(userIdType string) *GetTalentReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *GetTalentReqBuilder) Build() *GetTalentReq {
	req := &GetTalentReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetTalentReq struct {
	apiReq *larkcore.ApiReq
}

type GetTalentRespData struct {
	Talent *Talent `json:"talent,omitempty"` // 人才信息
}

type GetTalentResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetTalentRespData `json:"data"` // 业务数据
}

func (resp *GetTalentResp) Success() bool {
	return resp.Code == 0
}

type ListTalentFolderReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListTalentFolderReqBuilder() *ListTalentFolderReqBuilder {
	builder := &ListTalentFolderReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListTalentFolderReqBuilder) Limit(limit int) *ListTalentFolderReqBuilder {
	builder.limit = limit
	return builder
}

// 页码标识，获取第一页传空，每次查询会返回下一页的page_token
//
// 示例值：eyJvZmZzZXQiOjEsInRpbWVzdGFtcCI6MTY0MDc2NTYzMjA4OCwiaWQiOm51bGx9
func (builder *ListTalentFolderReqBuilder) PageToken(pageToken string) *ListTalentFolderReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 每页获取记录数量，最大100
//
// 示例值：10
func (builder *ListTalentFolderReqBuilder) PageSize(pageSize int) *ListTalentFolderReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 用户ID类型
//
// 示例值：open_id
func (builder *ListTalentFolderReqBuilder) UserIdType(userIdType string) *ListTalentFolderReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

func (builder *ListTalentFolderReqBuilder) Build() *ListTalentFolderReq {
	req := &ListTalentFolderReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListTalentFolderReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListTalentFolderRespData struct {
	HasMore   *bool           `json:"has_more,omitempty"`   // 是否有下一页
	PageToken *string         `json:"page_token,omitempty"` // 下一页页码
	Items     []*TalentFolder `json:"items,omitempty"`      // 文件夹列表
}

type ListTalentFolderResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListTalentFolderRespData `json:"data"` // 业务数据
}

func (resp *ListTalentFolderResp) Success() bool {
	return resp.Code == 0
}

type P2ApplicationStageChangedV1Data struct {
	ApplicationId *string `json:"application_id,omitempty"`  //
	OriginStageId *string `json:"origin_stage_id,omitempty"` //
	TargetStageId *string `json:"target_stage_id,omitempty"` //
	UpdateTime    *int    `json:"update_time,omitempty"`     //
}

type P2ApplicationStageChangedV1 struct {
	*larkevent.EventV2Base                                  // 事件基础数据
	*larkevent.EventReq                                     // 请求原生数据
	Event                  *P2ApplicationStageChangedV1Data `json:"event"` // 事件内容
}

func (m *P2ApplicationStageChangedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2EhrImportTaskImportedV1Data struct {
	TaskId           *string `json:"task_id,omitempty"`            // 导入任务 ID
	ApplicationId    *string `json:"application_id,omitempty"`     // 投递 ID
	EhrDepartmentId  *string `json:"ehr_department_id,omitempty"`  // 导入部门 ID
	EhrRequirementId *string `json:"ehr_requirement_id,omitempty"` // 招聘需求 ID
	OperatorId       *string `json:"operator_id,omitempty"`        // 操作人的飞书招聘 user_id
	OperatorUserId   *UserId `json:"operator_user_id,omitempty"`   // 操作人的飞书 user_id
}

type P2EhrImportTaskImportedV1 struct {
	*larkevent.EventV2Base                                // 事件基础数据
	*larkevent.EventReq                                   // 请求原生数据
	Event                  *P2EhrImportTaskImportedV1Data `json:"event"` // 事件内容
}

func (m *P2EhrImportTaskImportedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2EhrImportTaskForInternshipOfferImportedV1Data struct {
	TaskId          *string `json:"task_id,omitempty"`           // 导入任务 ID
	ApplicationId   *string `json:"application_id,omitempty"`    // 投递 ID
	OfferId         *string `json:"offer_id,omitempty"`          // Offer ID
	PreOnboardId    *string `json:"pre_onboard_id,omitempty"`    // 实习 ID
	EhrDepartmentId *string `json:"ehr_department_id,omitempty"` // 导入部门 ID
	OperatorId      *string `json:"operator_id,omitempty"`       // 操作人的飞书招聘 user_id
	OperatorUserId  *UserId `json:"operator_user_id,omitempty"`  // 操作人的飞书 user_id
}

type P2EhrImportTaskForInternshipOfferImportedV1 struct {
	*larkevent.EventV2Base                                                  // 事件基础数据
	*larkevent.EventReq                                                     // 请求原生数据
	Event                  *P2EhrImportTaskForInternshipOfferImportedV1Data `json:"event"` // 事件内容
}

func (m *P2EhrImportTaskForInternshipOfferImportedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type P2OfferStatusChangedV1Data struct {
	OfferId *string `json:"offer_id,omitempty"` // 发生状态变更的 OfferID
}

type P2OfferStatusChangedV1 struct {
	*larkevent.EventV2Base                             // 事件基础数据
	*larkevent.EventReq                                // 请求原生数据
	Event                  *P2OfferStatusChangedV1Data `json:"event"` // 事件内容
}

func (m *P2OfferStatusChangedV1) RawReq(req *larkevent.EventReq) {
	m.EventReq = req
}

type ListEvaluationIterator struct {
	nextPageToken *string
	items         []*Evaluation
	index         int
	limit         int
	ctx           context.Context
	req           *ListEvaluationReq
	listFunc      func(ctx context.Context, req *ListEvaluationReq, options ...larkcore.RequestOptionFunc) (*ListEvaluationResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListEvaluationIterator) Next() (bool, *Evaluation, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListEvaluationIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListResumeSourceIterator struct {
	nextPageToken *string
	items         []*ResumeSource
	index         int
	limit         int
	ctx           context.Context
	req           *ListResumeSourceReq
	listFunc      func(ctx context.Context, req *ListResumeSourceReq, options ...larkcore.RequestOptionFunc) (*ListResumeSourceResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListResumeSourceIterator) Next() (bool, *ResumeSource, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListResumeSourceIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListTalentFolderIterator struct {
	nextPageToken *string
	items         []*TalentFolder
	index         int
	limit         int
	ctx           context.Context
	req           *ListTalentFolderReq
	listFunc      func(ctx context.Context, req *ListTalentFolderReq, options ...larkcore.RequestOptionFunc) (*ListTalentFolderResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListTalentFolderIterator) Next() (bool, *TalentFolder, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Items) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Items
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListTalentFolderIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
