// Package admin code generated by oapi sdk gen
/*
 * MIT License
 *
 * Copyright (c) 2022 Lark Technologies Pte. Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice, shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package larkadmin

import (
	"io"

	"bytes"

	"fmt"

	"context"
	"errors"

	"github.com/larksuite/oapi-sdk-go/v3/core"
)

const (
	DepartmentIdTypeDepartmentId     = "department_id"      // 以自定义department_id来标识部门
	DepartmentIdTypeOpenDepartmentId = "open_department_id" // 以open_department_id来标识部门
)

const (
	UserIdTypeUserId  = "user_id"  // 以user_id来识别用户
	UserIdTypeUnionId = "union_id" // 以union_id来识别用户
	UserIdTypeOpenId  = "open_id"  // 以open_id来识别用户
)

const (
	DepartmentIdTypeListAdminUserStatDepartmentId     = "department_id"      // 以自定义department_id来标识部门
	DepartmentIdTypeListAdminUserStatOpenDepartmentId = "open_department_id" // 以open_department_id来标识部门
)

const (
	GrantTypeManual   = 0 // 手动选择有效期
	GrantTypeJoinTime = 1 // 匹配系统入职时间

)

const (
	UserIdTypeCreateBadgeGrantOpenId  = "open_id"  // 用户的open_id
	UserIdTypeCreateBadgeGrantUnionId = "union_id" // 用户的union_id
	UserIdTypeCreateBadgeGrantUserId  = "user_id"  // 用户的user_id
)

const (
	DepartmentIdTypeCreateBadgeGrantDepartmentId     = "department_id"      // 以自定义department_id来标识部门
	DepartmentIdTypeCreateBadgeGrantOpenDepartmentId = "open_department_id" // 以open_department_id来标识部门
)

const (
	UserIdTypeGetBadgeGrantOpenId  = "open_id"  // 用户的open_id
	UserIdTypeGetBadgeGrantUnionId = "union_id" // 用户的union_id
	UserIdTypeGetBadgeGrantUserId  = "user_id"  // 用户的user_id
)

const (
	DepartmentIdTypeGetBadgeGrantDepartmentId     = "department_id"      // 以自定义department_id来标识部门
	DepartmentIdTypeGetBadgeGrantOpenDepartmentId = "open_department_id" // 以open_department_id来标识部门
)

const (
	UserIdTypeListBadgeGrantOpenId  = "open_id"  // 用户的open_id
	UserIdTypeListBadgeGrantUnionId = "union_id" // 用户的union_id
	UserIdTypeListBadgeGrantUserId  = "user_id"  // 用户的user_id
)

const (
	DepartmentIdTypeListBadgeGrantDepartmentId     = "department_id"      // 以自定义department_id来标识部门
	DepartmentIdTypeListBadgeGrantOpenDepartmentId = "open_department_id" // 以open_department_id来标识部门
)

const (
	GrantTypeUpdateBadgeGrantManual   = 0 // 手动选择有效期
	GrantTypeUpdateBadgeGrantJoinTime = 1 // 匹配系统入职时间

)

const (
	UserIdTypeUpdateBadgeGrantOpenId  = "open_id"  // 用户的open_id
	UserIdTypeUpdateBadgeGrantUnionId = "union_id" // 用户的union_id
	UserIdTypeUpdateBadgeGrantUserId  = "user_id"  // 用户的user_id
)

const (
	DepartmentIdTypeUpdateBadgeGrantDepartmentId     = "department_id"      // 以自定义department_id来标识部门
	DepartmentIdTypeUpdateBadgeGrantOpenDepartmentId = "open_department_id" // 以open_department_id来标识部门
)

const (
	ImageTypeDetail = 1 // 勋章详情图
	ImageTypeShow   = 2 // 勋章挂饰图

)

const (
	UserIdTypeResetPasswordOpenId  = "open_id"  // open_id
	UserIdTypeResetPasswordUnionId = "union_id" // union_id
	UserIdTypeResetPasswordUserId  = "user_id"  // user_id
)

type AdminDeptStat struct {
	Date                 *string `json:"date,omitempty"`                    // 日期
	DepartmentId         *string `json:"department_id,omitempty"`           // 部门的department_id 或者open_department_id
	DepartmentName       *string `json:"department_name,omitempty"`         // 部门名字
	DepartmentPath       *string `json:"department_path,omitempty"`         // 部门路径
	TotalUserNum         *int    `json:"total_user_num,omitempty"`          // 部门总人数
	ActiveUserNum        *int    `json:"active_user_num,omitempty"`         // 激活人数
	ActiveUserRate       *string `json:"active_user_rate,omitempty"`        // 激活率
	SuiteDau             *int    `json:"suite_dau,omitempty"`               // 活跃人数
	SuiteActiveRate      *string `json:"suite_active_rate,omitempty"`       // 活跃率
	NewUserNum           *int    `json:"new_user_num,omitempty"`            // 新用户数
	NewActiveNum         *int    `json:"new_active_num,omitempty"`          // 新激活数
	ResignUserNum        *int    `json:"resign_user_num,omitempty"`         // 离职人数
	ImDau                *int    `json:"im_dau,omitempty"`                  // 消息活跃人数
	SendMessengerUserNum *int    `json:"send_messenger_user_num,omitempty"` // 发送消息人数
	SendMessengerNum     *int    `json:"send_messenger_num,omitempty"`      // 发送消息数
	AvgSendMessengerNum  *string `json:"avg_send_messenger_num,omitempty"`  // 人均发送消息数
	DocsDau              *int    `json:"docs_dau,omitempty"`                // 云文档活跃人数
	CreateDocsUserNum    *int    `json:"create_docs_user_num,omitempty"`    // 创建文件人数
	CreateDocsNum        *int    `json:"create_docs_num,omitempty"`         // 创建文件数
	AvgCreateDocsNum     *string `json:"avg_create_docs_num,omitempty"`     // 人均创建文件数
	CalDau               *int    `json:"cal_dau,omitempty"`                 // 日历活跃人数
	CreateCalUserNum     *int    `json:"create_cal_user_num,omitempty"`     // 创建日程人数
	CreateCalNum         *int    `json:"create_cal_num,omitempty"`          // 创建日程数
	AvgCreateCalNum      *string `json:"avg_create_cal_num,omitempty"`      // 人均创建日程数
	VcDau                *int    `json:"vc_dau,omitempty"`                  // 音视频会议活跃人数
	VcDuration           *int    `json:"vc_duration,omitempty"`             // 会议时长：企业内员工参与通话与会议的总时长（分钟）
	AvgVcDuration        *string `json:"avg_vc_duration,omitempty"`         // 人均会议时长（分钟）
	AvgDuration          *string `json:"avg_duration,omitempty"`            // 人均飞书使用时长（分钟）
	TaskDau              *int    `json:"task_dau,omitempty"`                // 任务活跃人数
	CreateTaskUserNum    *int    `json:"create_task_user_num,omitempty"`    // 创建任务人数
	CreateTaskNum        *int    `json:"create_task_num,omitempty"`         // 创建任务数
	AvgCreateTaskNum     *string `json:"avg_create_task_num,omitempty"`     // 人均创建任务数
}

type AdminDeptStatBuilder struct {
	date                     string // 日期
	dateFlag                 bool
	departmentId             string // 部门的department_id 或者open_department_id
	departmentIdFlag         bool
	departmentName           string // 部门名字
	departmentNameFlag       bool
	departmentPath           string // 部门路径
	departmentPathFlag       bool
	totalUserNum             int // 部门总人数
	totalUserNumFlag         bool
	activeUserNum            int // 激活人数
	activeUserNumFlag        bool
	activeUserRate           string // 激活率
	activeUserRateFlag       bool
	suiteDau                 int // 活跃人数
	suiteDauFlag             bool
	suiteActiveRate          string // 活跃率
	suiteActiveRateFlag      bool
	newUserNum               int // 新用户数
	newUserNumFlag           bool
	newActiveNum             int // 新激活数
	newActiveNumFlag         bool
	resignUserNum            int // 离职人数
	resignUserNumFlag        bool
	imDau                    int // 消息活跃人数
	imDauFlag                bool
	sendMessengerUserNum     int // 发送消息人数
	sendMessengerUserNumFlag bool
	sendMessengerNum         int // 发送消息数
	sendMessengerNumFlag     bool
	avgSendMessengerNum      string // 人均发送消息数
	avgSendMessengerNumFlag  bool
	docsDau                  int // 云文档活跃人数
	docsDauFlag              bool
	createDocsUserNum        int // 创建文件人数
	createDocsUserNumFlag    bool
	createDocsNum            int // 创建文件数
	createDocsNumFlag        bool
	avgCreateDocsNum         string // 人均创建文件数
	avgCreateDocsNumFlag     bool
	calDau                   int // 日历活跃人数
	calDauFlag               bool
	createCalUserNum         int // 创建日程人数
	createCalUserNumFlag     bool
	createCalNum             int // 创建日程数
	createCalNumFlag         bool
	avgCreateCalNum          string // 人均创建日程数
	avgCreateCalNumFlag      bool
	vcDau                    int // 音视频会议活跃人数
	vcDauFlag                bool
	vcDuration               int // 会议时长：企业内员工参与通话与会议的总时长（分钟）
	vcDurationFlag           bool
	avgVcDuration            string // 人均会议时长（分钟）
	avgVcDurationFlag        bool
	avgDuration              string // 人均飞书使用时长（分钟）
	avgDurationFlag          bool
	taskDau                  int // 任务活跃人数
	taskDauFlag              bool
	createTaskUserNum        int // 创建任务人数
	createTaskUserNumFlag    bool
	createTaskNum            int // 创建任务数
	createTaskNumFlag        bool
	avgCreateTaskNum         string // 人均创建任务数
	avgCreateTaskNumFlag     bool
}

func NewAdminDeptStatBuilder() *AdminDeptStatBuilder {
	builder := &AdminDeptStatBuilder{}
	return builder
}

// 日期
//
// 示例值：2020-02-15
func (builder *AdminDeptStatBuilder) Date(date string) *AdminDeptStatBuilder {
	builder.date = date
	builder.dateFlag = true
	return builder
}

// 部门的department_id 或者open_department_id
//
// 示例值：od-382e2793cfc9471f892e8a672987654c
func (builder *AdminDeptStatBuilder) DepartmentId(departmentId string) *AdminDeptStatBuilder {
	builder.departmentId = departmentId
	builder.departmentIdFlag = true
	return builder
}

// 部门名字
//
// 示例值：subtestkkk
func (builder *AdminDeptStatBuilder) DepartmentName(departmentName string) *AdminDeptStatBuilder {
	builder.departmentName = departmentName
	builder.departmentNameFlag = true
	return builder
}

// 部门路径
//
// 示例值：testkkk/subtestkkk
func (builder *AdminDeptStatBuilder) DepartmentPath(departmentPath string) *AdminDeptStatBuilder {
	builder.departmentPath = departmentPath
	builder.departmentPathFlag = true
	return builder
}

// 部门总人数
//
// 示例值：2
func (builder *AdminDeptStatBuilder) TotalUserNum(totalUserNum int) *AdminDeptStatBuilder {
	builder.totalUserNum = totalUserNum
	builder.totalUserNumFlag = true
	return builder
}

// 激活人数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) ActiveUserNum(activeUserNum int) *AdminDeptStatBuilder {
	builder.activeUserNum = activeUserNum
	builder.activeUserNumFlag = true
	return builder
}

// 激活率
//
// 示例值：1.00
func (builder *AdminDeptStatBuilder) ActiveUserRate(activeUserRate string) *AdminDeptStatBuilder {
	builder.activeUserRate = activeUserRate
	builder.activeUserRateFlag = true
	return builder
}

// 活跃人数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) SuiteDau(suiteDau int) *AdminDeptStatBuilder {
	builder.suiteDau = suiteDau
	builder.suiteDauFlag = true
	return builder
}

// 活跃率
//
// 示例值：0.00
func (builder *AdminDeptStatBuilder) SuiteActiveRate(suiteActiveRate string) *AdminDeptStatBuilder {
	builder.suiteActiveRate = suiteActiveRate
	builder.suiteActiveRateFlag = true
	return builder
}

// 新用户数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) NewUserNum(newUserNum int) *AdminDeptStatBuilder {
	builder.newUserNum = newUserNum
	builder.newUserNumFlag = true
	return builder
}

// 新激活数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) NewActiveNum(newActiveNum int) *AdminDeptStatBuilder {
	builder.newActiveNum = newActiveNum
	builder.newActiveNumFlag = true
	return builder
}

// 离职人数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) ResignUserNum(resignUserNum int) *AdminDeptStatBuilder {
	builder.resignUserNum = resignUserNum
	builder.resignUserNumFlag = true
	return builder
}

// 消息活跃人数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) ImDau(imDau int) *AdminDeptStatBuilder {
	builder.imDau = imDau
	builder.imDauFlag = true
	return builder
}

// 发送消息人数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) SendMessengerUserNum(sendMessengerUserNum int) *AdminDeptStatBuilder {
	builder.sendMessengerUserNum = sendMessengerUserNum
	builder.sendMessengerUserNumFlag = true
	return builder
}

// 发送消息数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) SendMessengerNum(sendMessengerNum int) *AdminDeptStatBuilder {
	builder.sendMessengerNum = sendMessengerNum
	builder.sendMessengerNumFlag = true
	return builder
}

// 人均发送消息数
//
// 示例值：0.00
func (builder *AdminDeptStatBuilder) AvgSendMessengerNum(avgSendMessengerNum string) *AdminDeptStatBuilder {
	builder.avgSendMessengerNum = avgSendMessengerNum
	builder.avgSendMessengerNumFlag = true
	return builder
}

// 云文档活跃人数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) DocsDau(docsDau int) *AdminDeptStatBuilder {
	builder.docsDau = docsDau
	builder.docsDauFlag = true
	return builder
}

// 创建文件人数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) CreateDocsUserNum(createDocsUserNum int) *AdminDeptStatBuilder {
	builder.createDocsUserNum = createDocsUserNum
	builder.createDocsUserNumFlag = true
	return builder
}

// 创建文件数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) CreateDocsNum(createDocsNum int) *AdminDeptStatBuilder {
	builder.createDocsNum = createDocsNum
	builder.createDocsNumFlag = true
	return builder
}

// 人均创建文件数
//
// 示例值：0.00
func (builder *AdminDeptStatBuilder) AvgCreateDocsNum(avgCreateDocsNum string) *AdminDeptStatBuilder {
	builder.avgCreateDocsNum = avgCreateDocsNum
	builder.avgCreateDocsNumFlag = true
	return builder
}

// 日历活跃人数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) CalDau(calDau int) *AdminDeptStatBuilder {
	builder.calDau = calDau
	builder.calDauFlag = true
	return builder
}

// 创建日程人数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) CreateCalUserNum(createCalUserNum int) *AdminDeptStatBuilder {
	builder.createCalUserNum = createCalUserNum
	builder.createCalUserNumFlag = true
	return builder
}

// 创建日程数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) CreateCalNum(createCalNum int) *AdminDeptStatBuilder {
	builder.createCalNum = createCalNum
	builder.createCalNumFlag = true
	return builder
}

// 人均创建日程数
//
// 示例值：0.00
func (builder *AdminDeptStatBuilder) AvgCreateCalNum(avgCreateCalNum string) *AdminDeptStatBuilder {
	builder.avgCreateCalNum = avgCreateCalNum
	builder.avgCreateCalNumFlag = true
	return builder
}

// 音视频会议活跃人数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) VcDau(vcDau int) *AdminDeptStatBuilder {
	builder.vcDau = vcDau
	builder.vcDauFlag = true
	return builder
}

// 会议时长：企业内员工参与通话与会议的总时长（分钟）
//
// 示例值：0
func (builder *AdminDeptStatBuilder) VcDuration(vcDuration int) *AdminDeptStatBuilder {
	builder.vcDuration = vcDuration
	builder.vcDurationFlag = true
	return builder
}

// 人均会议时长（分钟）
//
// 示例值：0.00
func (builder *AdminDeptStatBuilder) AvgVcDuration(avgVcDuration string) *AdminDeptStatBuilder {
	builder.avgVcDuration = avgVcDuration
	builder.avgVcDurationFlag = true
	return builder
}

// 人均飞书使用时长（分钟）
//
// 示例值：0.00
func (builder *AdminDeptStatBuilder) AvgDuration(avgDuration string) *AdminDeptStatBuilder {
	builder.avgDuration = avgDuration
	builder.avgDurationFlag = true
	return builder
}

// 任务活跃人数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) TaskDau(taskDau int) *AdminDeptStatBuilder {
	builder.taskDau = taskDau
	builder.taskDauFlag = true
	return builder
}

// 创建任务人数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) CreateTaskUserNum(createTaskUserNum int) *AdminDeptStatBuilder {
	builder.createTaskUserNum = createTaskUserNum
	builder.createTaskUserNumFlag = true
	return builder
}

// 创建任务数
//
// 示例值：0
func (builder *AdminDeptStatBuilder) CreateTaskNum(createTaskNum int) *AdminDeptStatBuilder {
	builder.createTaskNum = createTaskNum
	builder.createTaskNumFlag = true
	return builder
}

// 人均创建任务数
//
// 示例值：0.00
func (builder *AdminDeptStatBuilder) AvgCreateTaskNum(avgCreateTaskNum string) *AdminDeptStatBuilder {
	builder.avgCreateTaskNum = avgCreateTaskNum
	builder.avgCreateTaskNumFlag = true
	return builder
}

func (builder *AdminDeptStatBuilder) Build() *AdminDeptStat {
	req := &AdminDeptStat{}
	if builder.dateFlag {
		req.Date = &builder.date

	}
	if builder.departmentIdFlag {
		req.DepartmentId = &builder.departmentId

	}
	if builder.departmentNameFlag {
		req.DepartmentName = &builder.departmentName

	}
	if builder.departmentPathFlag {
		req.DepartmentPath = &builder.departmentPath

	}
	if builder.totalUserNumFlag {
		req.TotalUserNum = &builder.totalUserNum

	}
	if builder.activeUserNumFlag {
		req.ActiveUserNum = &builder.activeUserNum

	}
	if builder.activeUserRateFlag {
		req.ActiveUserRate = &builder.activeUserRate

	}
	if builder.suiteDauFlag {
		req.SuiteDau = &builder.suiteDau

	}
	if builder.suiteActiveRateFlag {
		req.SuiteActiveRate = &builder.suiteActiveRate

	}
	if builder.newUserNumFlag {
		req.NewUserNum = &builder.newUserNum

	}
	if builder.newActiveNumFlag {
		req.NewActiveNum = &builder.newActiveNum

	}
	if builder.resignUserNumFlag {
		req.ResignUserNum = &builder.resignUserNum

	}
	if builder.imDauFlag {
		req.ImDau = &builder.imDau

	}
	if builder.sendMessengerUserNumFlag {
		req.SendMessengerUserNum = &builder.sendMessengerUserNum

	}
	if builder.sendMessengerNumFlag {
		req.SendMessengerNum = &builder.sendMessengerNum

	}
	if builder.avgSendMessengerNumFlag {
		req.AvgSendMessengerNum = &builder.avgSendMessengerNum

	}
	if builder.docsDauFlag {
		req.DocsDau = &builder.docsDau

	}
	if builder.createDocsUserNumFlag {
		req.CreateDocsUserNum = &builder.createDocsUserNum

	}
	if builder.createDocsNumFlag {
		req.CreateDocsNum = &builder.createDocsNum

	}
	if builder.avgCreateDocsNumFlag {
		req.AvgCreateDocsNum = &builder.avgCreateDocsNum

	}
	if builder.calDauFlag {
		req.CalDau = &builder.calDau

	}
	if builder.createCalUserNumFlag {
		req.CreateCalUserNum = &builder.createCalUserNum

	}
	if builder.createCalNumFlag {
		req.CreateCalNum = &builder.createCalNum

	}
	if builder.avgCreateCalNumFlag {
		req.AvgCreateCalNum = &builder.avgCreateCalNum

	}
	if builder.vcDauFlag {
		req.VcDau = &builder.vcDau

	}
	if builder.vcDurationFlag {
		req.VcDuration = &builder.vcDuration

	}
	if builder.avgVcDurationFlag {
		req.AvgVcDuration = &builder.avgVcDuration

	}
	if builder.avgDurationFlag {
		req.AvgDuration = &builder.avgDuration

	}
	if builder.taskDauFlag {
		req.TaskDau = &builder.taskDau

	}
	if builder.createTaskUserNumFlag {
		req.CreateTaskUserNum = &builder.createTaskUserNum

	}
	if builder.createTaskNumFlag {
		req.CreateTaskNum = &builder.createTaskNum

	}
	if builder.avgCreateTaskNumFlag {
		req.AvgCreateTaskNum = &builder.avgCreateTaskNum

	}
	return req
}

type AdminUserStat struct {
	Date             *string `json:"date,omitempty"`               // 日期
	UserId           *string `json:"user_id,omitempty"`            // 用户ID
	UserName         *string `json:"user_name,omitempty"`          // 用户名
	DepartmentName   *string `json:"department_name,omitempty"`    // 部门名
	DepartmentPath   *string `json:"department_path,omitempty"`    // 部门路径
	CreateTime       *string `json:"create_time,omitempty"`        // 账号创建时间
	UserActiveFlag   *int    `json:"user_active_flag,omitempty"`   // 用户激活状态
	RegisterTime     *string `json:"register_time,omitempty"`      // 激活时间
	SuiteActiveFlag  *int    `json:"suite_active_flag,omitempty"`  // 用户活跃状态，用户在飞书套件任意应用登陆，即为活跃。包括飞书即时消息，文档，日历，会议，开放平台等
	LastActiveTime   *string `json:"last_active_time,omitempty"`   // 最近活跃时间
	ImActiveFlag     *int    `json:"im_active_flag,omitempty"`     // 用户消息活跃状态，发生过如下事件，则认为该用户消息活跃：;发送消息、回复消息、reaction、转发消息、阅读消息、查看会话、发送表情消息等
	SendMessengerNum *int    `json:"send_messenger_num,omitempty"` // 发送消息数
	DocsActiveFlag   *int    `json:"docs_active_flag,omitempty"`   // 用户云文档活跃状态，"发生过如下事件，则认为该用户云文档活跃： ;事件1：文档/文件打开;事件2：进入docs相关页面：如文档详情页，space的各个页面"
	CreateDocsNum    *int    `json:"create_docs_num,omitempty"`    // 创建文件数
	CalActiveFlag    *int    `json:"cal_active_flag,omitempty"`    // 用户日历活跃状态，发生过如下事件，则认为用户日历活跃，包含进入日历、创建日程、收到日程邀请等
	CreateCalNum     *int    `json:"create_cal_num,omitempty"`     // 创建日程数
	VcActiveFlag     *int    `json:"vc_active_flag,omitempty"`     // 用户音视频会议活跃状态，用户进入会中状态（不包含妙计和直播）即为活跃
	VcDuration       *int    `json:"vc_duration,omitempty"`        // 会议时长（分钟）
	ActiveOs         *string `json:"active_os,omitempty"`          // 活跃设备
	CreateTaskNum    *int    `json:"create_task_num,omitempty"`    // 创建任务数
	VcNum            *int    `json:"vc_num,omitempty"`             // 会议数
	AppPackageType   *string `json:"app_package_type,omitempty"`   // 飞书的应用类型名称
	OsName           *string `json:"os_name,omitempty"`            // 操作系统名称
}

type AdminUserStatBuilder struct {
	date                 string // 日期
	dateFlag             bool
	userId               string // 用户ID
	userIdFlag           bool
	userName             string // 用户名
	userNameFlag         bool
	departmentName       string // 部门名
	departmentNameFlag   bool
	departmentPath       string // 部门路径
	departmentPathFlag   bool
	createTime           string // 账号创建时间
	createTimeFlag       bool
	userActiveFlag       int // 用户激活状态
	userActiveFlagFlag   bool
	registerTime         string // 激活时间
	registerTimeFlag     bool
	suiteActiveFlag      int // 用户活跃状态，用户在飞书套件任意应用登陆，即为活跃。包括飞书即时消息，文档，日历，会议，开放平台等
	suiteActiveFlagFlag  bool
	lastActiveTime       string // 最近活跃时间
	lastActiveTimeFlag   bool
	imActiveFlag         int // 用户消息活跃状态，发生过如下事件，则认为该用户消息活跃：;发送消息、回复消息、reaction、转发消息、阅读消息、查看会话、发送表情消息等
	imActiveFlagFlag     bool
	sendMessengerNum     int // 发送消息数
	sendMessengerNumFlag bool
	docsActiveFlag       int // 用户云文档活跃状态，"发生过如下事件，则认为该用户云文档活跃： ;事件1：文档/文件打开;事件2：进入docs相关页面：如文档详情页，space的各个页面"
	docsActiveFlagFlag   bool
	createDocsNum        int // 创建文件数
	createDocsNumFlag    bool
	calActiveFlag        int // 用户日历活跃状态，发生过如下事件，则认为用户日历活跃，包含进入日历、创建日程、收到日程邀请等
	calActiveFlagFlag    bool
	createCalNum         int // 创建日程数
	createCalNumFlag     bool
	vcActiveFlag         int // 用户音视频会议活跃状态，用户进入会中状态（不包含妙计和直播）即为活跃
	vcActiveFlagFlag     bool
	vcDuration           int // 会议时长（分钟）
	vcDurationFlag       bool
	activeOs             string // 活跃设备
	activeOsFlag         bool
	createTaskNum        int // 创建任务数
	createTaskNumFlag    bool
	vcNum                int // 会议数
	vcNumFlag            bool
	appPackageType       string // 飞书的应用类型名称
	appPackageTypeFlag   bool
	osName               string // 操作系统名称
	osNameFlag           bool
}

func NewAdminUserStatBuilder() *AdminUserStatBuilder {
	builder := &AdminUserStatBuilder{}
	return builder
}

// 日期
//
// 示例值：2020-02-15
func (builder *AdminUserStatBuilder) Date(date string) *AdminUserStatBuilder {
	builder.date = date
	builder.dateFlag = true
	return builder
}

// 用户ID
//
// 示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62
func (builder *AdminUserStatBuilder) UserId(userId string) *AdminUserStatBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 用户名
//
// 示例值：Zhang San
func (builder *AdminUserStatBuilder) UserName(userName string) *AdminUserStatBuilder {
	builder.userName = userName
	builder.userNameFlag = true
	return builder
}

// 部门名
//
// 示例值：testcqlbfaaasdasdasd
func (builder *AdminUserStatBuilder) DepartmentName(departmentName string) *AdminUserStatBuilder {
	builder.departmentName = departmentName
	builder.departmentNameFlag = true
	return builder
}

// 部门路径
//
// 示例值：testkkk/testcqlbfaaasdasdasd
func (builder *AdminUserStatBuilder) DepartmentPath(departmentPath string) *AdminUserStatBuilder {
	builder.departmentPath = departmentPath
	builder.departmentPathFlag = true
	return builder
}

// 账号创建时间
//
// 示例值：2020-09-04 11:17:55
func (builder *AdminUserStatBuilder) CreateTime(createTime string) *AdminUserStatBuilder {
	builder.createTime = createTime
	builder.createTimeFlag = true
	return builder
}

// 用户激活状态
//
// 示例值：1
func (builder *AdminUserStatBuilder) UserActiveFlag(userActiveFlag int) *AdminUserStatBuilder {
	builder.userActiveFlag = userActiveFlag
	builder.userActiveFlagFlag = true
	return builder
}

// 激活时间
//
// 示例值：2020-09-04 11:18:32
func (builder *AdminUserStatBuilder) RegisterTime(registerTime string) *AdminUserStatBuilder {
	builder.registerTime = registerTime
	builder.registerTimeFlag = true
	return builder
}

// 用户活跃状态，用户在飞书套件任意应用登陆，即为活跃。包括飞书即时消息，文档，日历，会议，开放平台等
//
// 示例值：1
func (builder *AdminUserStatBuilder) SuiteActiveFlag(suiteActiveFlag int) *AdminUserStatBuilder {
	builder.suiteActiveFlag = suiteActiveFlag
	builder.suiteActiveFlagFlag = true
	return builder
}

// 最近活跃时间
//
// 示例值：2020-12-21 22:21:28
func (builder *AdminUserStatBuilder) LastActiveTime(lastActiveTime string) *AdminUserStatBuilder {
	builder.lastActiveTime = lastActiveTime
	builder.lastActiveTimeFlag = true
	return builder
}

// 用户消息活跃状态，发生过如下事件，则认为该用户消息活跃：;发送消息、回复消息、reaction、转发消息、阅读消息、查看会话、发送表情消息等
//
// 示例值：1
func (builder *AdminUserStatBuilder) ImActiveFlag(imActiveFlag int) *AdminUserStatBuilder {
	builder.imActiveFlag = imActiveFlag
	builder.imActiveFlagFlag = true
	return builder
}

// 发送消息数
//
// 示例值：0
func (builder *AdminUserStatBuilder) SendMessengerNum(sendMessengerNum int) *AdminUserStatBuilder {
	builder.sendMessengerNum = sendMessengerNum
	builder.sendMessengerNumFlag = true
	return builder
}

// 用户云文档活跃状态，"发生过如下事件，则认为该用户云文档活跃： ;事件1：文档/文件打开;事件2：进入docs相关页面：如文档详情页，space的各个页面"
//
// 示例值：1
func (builder *AdminUserStatBuilder) DocsActiveFlag(docsActiveFlag int) *AdminUserStatBuilder {
	builder.docsActiveFlag = docsActiveFlag
	builder.docsActiveFlagFlag = true
	return builder
}

// 创建文件数
//
// 示例值：1
func (builder *AdminUserStatBuilder) CreateDocsNum(createDocsNum int) *AdminUserStatBuilder {
	builder.createDocsNum = createDocsNum
	builder.createDocsNumFlag = true
	return builder
}

// 用户日历活跃状态，发生过如下事件，则认为用户日历活跃，包含进入日历、创建日程、收到日程邀请等
//
// 示例值：1
func (builder *AdminUserStatBuilder) CalActiveFlag(calActiveFlag int) *AdminUserStatBuilder {
	builder.calActiveFlag = calActiveFlag
	builder.calActiveFlagFlag = true
	return builder
}

// 创建日程数
//
// 示例值：0
func (builder *AdminUserStatBuilder) CreateCalNum(createCalNum int) *AdminUserStatBuilder {
	builder.createCalNum = createCalNum
	builder.createCalNumFlag = true
	return builder
}

// 用户音视频会议活跃状态，用户进入会中状态（不包含妙计和直播）即为活跃
//
// 示例值：1
func (builder *AdminUserStatBuilder) VcActiveFlag(vcActiveFlag int) *AdminUserStatBuilder {
	builder.vcActiveFlag = vcActiveFlag
	builder.vcActiveFlagFlag = true
	return builder
}

// 会议时长（分钟）
//
// 示例值：0
func (builder *AdminUserStatBuilder) VcDuration(vcDuration int) *AdminUserStatBuilder {
	builder.vcDuration = vcDuration
	builder.vcDurationFlag = true
	return builder
}

// 活跃设备
//
// 示例值：'ios 14.2,-','ios 14.2,feishu 3.40.0-alpha'
func (builder *AdminUserStatBuilder) ActiveOs(activeOs string) *AdminUserStatBuilder {
	builder.activeOs = activeOs
	builder.activeOsFlag = true
	return builder
}

// 创建任务数
//
// 示例值：0
func (builder *AdminUserStatBuilder) CreateTaskNum(createTaskNum int) *AdminUserStatBuilder {
	builder.createTaskNum = createTaskNum
	builder.createTaskNumFlag = true
	return builder
}

// 会议数
//
// 示例值：0
func (builder *AdminUserStatBuilder) VcNum(vcNum int) *AdminUserStatBuilder {
	builder.vcNum = vcNum
	builder.vcNumFlag = true
	return builder
}

// 飞书的应用类型名称
//
// 示例值：Feishu，Lark
func (builder *AdminUserStatBuilder) AppPackageType(appPackageType string) *AdminUserStatBuilder {
	builder.appPackageType = appPackageType
	builder.appPackageTypeFlag = true
	return builder
}

// 操作系统名称
//
// 示例值：iOS,Andorid,Windows
func (builder *AdminUserStatBuilder) OsName(osName string) *AdminUserStatBuilder {
	builder.osName = osName
	builder.osNameFlag = true
	return builder
}

func (builder *AdminUserStatBuilder) Build() *AdminUserStat {
	req := &AdminUserStat{}
	if builder.dateFlag {
		req.Date = &builder.date

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.userNameFlag {
		req.UserName = &builder.userName

	}
	if builder.departmentNameFlag {
		req.DepartmentName = &builder.departmentName

	}
	if builder.departmentPathFlag {
		req.DepartmentPath = &builder.departmentPath

	}
	if builder.createTimeFlag {
		req.CreateTime = &builder.createTime

	}
	if builder.userActiveFlagFlag {
		req.UserActiveFlag = &builder.userActiveFlag

	}
	if builder.registerTimeFlag {
		req.RegisterTime = &builder.registerTime

	}
	if builder.suiteActiveFlagFlag {
		req.SuiteActiveFlag = &builder.suiteActiveFlag

	}
	if builder.lastActiveTimeFlag {
		req.LastActiveTime = &builder.lastActiveTime

	}
	if builder.imActiveFlagFlag {
		req.ImActiveFlag = &builder.imActiveFlag

	}
	if builder.sendMessengerNumFlag {
		req.SendMessengerNum = &builder.sendMessengerNum

	}
	if builder.docsActiveFlagFlag {
		req.DocsActiveFlag = &builder.docsActiveFlag

	}
	if builder.createDocsNumFlag {
		req.CreateDocsNum = &builder.createDocsNum

	}
	if builder.calActiveFlagFlag {
		req.CalActiveFlag = &builder.calActiveFlag

	}
	if builder.createCalNumFlag {
		req.CreateCalNum = &builder.createCalNum

	}
	if builder.vcActiveFlagFlag {
		req.VcActiveFlag = &builder.vcActiveFlag

	}
	if builder.vcDurationFlag {
		req.VcDuration = &builder.vcDuration

	}
	if builder.activeOsFlag {
		req.ActiveOs = &builder.activeOs

	}
	if builder.createTaskNumFlag {
		req.CreateTaskNum = &builder.createTaskNum

	}
	if builder.vcNumFlag {
		req.VcNum = &builder.vcNum

	}
	if builder.appPackageTypeFlag {
		req.AppPackageType = &builder.appPackageType

	}
	if builder.osNameFlag {
		req.OsName = &builder.osName

	}
	return req
}

type Administrator struct {
	UserId               *string `json:"user_id,omitempty"`                //
	IsSuperAdministrator *bool   `json:"is_super_administrator,omitempty"` // 用户是否是超级管理员
	IsAdministrator      *bool   `json:"is_administrator,omitempty"`       // 用户是否是管理员
}

type AdministratorBuilder struct {
	userId                   string //
	userIdFlag               bool
	isSuperAdministrator     bool // 用户是否是超级管理员
	isSuperAdministratorFlag bool
	isAdministrator          bool // 用户是否是管理员
	isAdministratorFlag      bool
}

func NewAdministratorBuilder() *AdministratorBuilder {
	builder := &AdministratorBuilder{}
	return builder
}

//
//
// 示例值：
func (builder *AdministratorBuilder) UserId(userId string) *AdministratorBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 用户是否是超级管理员
//
// 示例值：
func (builder *AdministratorBuilder) IsSuperAdministrator(isSuperAdministrator bool) *AdministratorBuilder {
	builder.isSuperAdministrator = isSuperAdministrator
	builder.isSuperAdministratorFlag = true
	return builder
}

// 用户是否是管理员
//
// 示例值：
func (builder *AdministratorBuilder) IsAdministrator(isAdministrator bool) *AdministratorBuilder {
	builder.isAdministrator = isAdministrator
	builder.isAdministratorFlag = true
	return builder
}

func (builder *AdministratorBuilder) Build() *Administrator {
	req := &Administrator{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.isSuperAdministratorFlag {
		req.IsSuperAdministrator = &builder.isSuperAdministrator

	}
	if builder.isAdministratorFlag {
		req.IsAdministrator = &builder.isAdministrator

	}
	return req
}

type ApiAuditCommonDrawers struct {
	CommonDrawInfoList []*ApiAuditDrawerInfo `json:"common_draw_info_list,omitempty"` // 扩展字段信息
}

type ApiAuditCommonDrawersBuilder struct {
	commonDrawInfoList     []*ApiAuditDrawerInfo // 扩展字段信息
	commonDrawInfoListFlag bool
}

func NewApiAuditCommonDrawersBuilder() *ApiAuditCommonDrawersBuilder {
	builder := &ApiAuditCommonDrawersBuilder{}
	return builder
}

// 扩展字段信息
//
// 示例值：
func (builder *ApiAuditCommonDrawersBuilder) CommonDrawInfoList(commonDrawInfoList []*ApiAuditDrawerInfo) *ApiAuditCommonDrawersBuilder {
	builder.commonDrawInfoList = commonDrawInfoList
	builder.commonDrawInfoListFlag = true
	return builder
}

func (builder *ApiAuditCommonDrawersBuilder) Build() *ApiAuditCommonDrawers {
	req := &ApiAuditCommonDrawers{}
	if builder.commonDrawInfoListFlag {
		req.CommonDrawInfoList = builder.commonDrawInfoList
	}
	return req
}

type ApiAuditDrawerInfo struct {
	InfoKey    *string `json:"info_key,omitempty"`     // key信息
	InfoVal    *string `json:"info_val,omitempty"`     // val值
	KeyI18nKey *string `json:"key_i18n_key,omitempty"` // key对应的i18nkey
	ValType    *string `json:"val_type,omitempty"`     // val类型
	ValI18nKey *string `json:"val_i18n_key,omitempty"` // val对应的i18nkey
}

type ApiAuditDrawerInfoBuilder struct {
	infoKey        string // key信息
	infoKeyFlag    bool
	infoVal        string // val值
	infoValFlag    bool
	keyI18nKey     string // key对应的i18nkey
	keyI18nKeyFlag bool
	valType        string // val类型
	valTypeFlag    bool
	valI18nKey     string // val对应的i18nkey
	valI18nKeyFlag bool
}

func NewApiAuditDrawerInfoBuilder() *ApiAuditDrawerInfoBuilder {
	builder := &ApiAuditDrawerInfoBuilder{}
	return builder
}

// key信息
//
// 示例值：
func (builder *ApiAuditDrawerInfoBuilder) InfoKey(infoKey string) *ApiAuditDrawerInfoBuilder {
	builder.infoKey = infoKey
	builder.infoKeyFlag = true
	return builder
}

// val值
//
// 示例值：
func (builder *ApiAuditDrawerInfoBuilder) InfoVal(infoVal string) *ApiAuditDrawerInfoBuilder {
	builder.infoVal = infoVal
	builder.infoValFlag = true
	return builder
}

// key对应的i18nkey
//
// 示例值：
func (builder *ApiAuditDrawerInfoBuilder) KeyI18nKey(keyI18nKey string) *ApiAuditDrawerInfoBuilder {
	builder.keyI18nKey = keyI18nKey
	builder.keyI18nKeyFlag = true
	return builder
}

// val类型
//
// 示例值：
func (builder *ApiAuditDrawerInfoBuilder) ValType(valType string) *ApiAuditDrawerInfoBuilder {
	builder.valType = valType
	builder.valTypeFlag = true
	return builder
}

// val对应的i18nkey
//
// 示例值：
func (builder *ApiAuditDrawerInfoBuilder) ValI18nKey(valI18nKey string) *ApiAuditDrawerInfoBuilder {
	builder.valI18nKey = valI18nKey
	builder.valI18nKeyFlag = true
	return builder
}

func (builder *ApiAuditDrawerInfoBuilder) Build() *ApiAuditDrawerInfo {
	req := &ApiAuditDrawerInfo{}
	if builder.infoKeyFlag {
		req.InfoKey = &builder.infoKey

	}
	if builder.infoValFlag {
		req.InfoVal = &builder.infoVal

	}
	if builder.keyI18nKeyFlag {
		req.KeyI18nKey = &builder.keyI18nKey

	}
	if builder.valTypeFlag {
		req.ValType = &builder.valType

	}
	if builder.valI18nKeyFlag {
		req.ValI18nKey = &builder.valI18nKey

	}
	return req
}

type AuditAndroidContext struct {
	Udid            *string `json:"udid,omitempty"`              // UDID
	Did             *string `json:"did,omitempty"`               // 设备ID
	AppVer          *string `json:"app_ver,omitempty"`           // app的版本
	Ver             *string `json:"ver,omitempty"`               // SecSDK版本
	Region          *string `json:"region,omitempty"`            // 设备语言
	IdI             *string `json:"id_i,omitempty"`              // 安卓版本号
	IdR             *string `json:"id_r,omitempty"`              // 安卓版本
	HwBrand         *string `json:"hw_brand,omitempty"`          // Brand
	HwManuf         *string `json:"hw_manuf,omitempty"`          // 制造商
	Wifip           *string `json:"wifip,omitempty"`             // wifi ip
	RouteIip        *string `json:"route_iip,omitempty"`         // 路由IP
	RouteGip        *string `json:"route_gip,omitempty"`         // 路由网关IP
	EnvSu           *string `json:"env_su,omitempty"`            // 表示当前是否root
	EnvTz           *string `json:"env_tz,omitempty"`            // 手机系统时区
	EnvMl           *string `json:"env_ml,omitempty"`            // 手机系统语言
	Location        *string `json:"location,omitempty"`          // GPS经纬度
	ActiveIp        *string `json:"active_ip,omitempty"`         // 当前设备活跃ip
	ActiveIpDetail  *string `json:"active_ip_detail,omitempty"`  // 当前设备活跃ip对应网卡类型
	CellBaseStation *string `json:"cell_base_station,omitempty"` // 基站信息
	IP              *string `json:"IP,omitempty"`                // 公网ip
}

type AuditAndroidContextBuilder struct {
	udid                string // UDID
	udidFlag            bool
	did                 string // 设备ID
	didFlag             bool
	appVer              string // app的版本
	appVerFlag          bool
	ver                 string // SecSDK版本
	verFlag             bool
	region              string // 设备语言
	regionFlag          bool
	idI                 string // 安卓版本号
	idIFlag             bool
	idR                 string // 安卓版本
	idRFlag             bool
	hwBrand             string // Brand
	hwBrandFlag         bool
	hwManuf             string // 制造商
	hwManufFlag         bool
	wifip               string // wifi ip
	wifipFlag           bool
	routeIip            string // 路由IP
	routeIipFlag        bool
	routeGip            string // 路由网关IP
	routeGipFlag        bool
	envSu               string // 表示当前是否root
	envSuFlag           bool
	envTz               string // 手机系统时区
	envTzFlag           bool
	envMl               string // 手机系统语言
	envMlFlag           bool
	location            string // GPS经纬度
	locationFlag        bool
	activeIp            string // 当前设备活跃ip
	activeIpFlag        bool
	activeIpDetail      string // 当前设备活跃ip对应网卡类型
	activeIpDetailFlag  bool
	cellBaseStation     string // 基站信息
	cellBaseStationFlag bool
	iP                  string // 公网ip
	iPFlag              bool
}

func NewAuditAndroidContextBuilder() *AuditAndroidContextBuilder {
	builder := &AuditAndroidContextBuilder{}
	return builder
}

// UDID
//
// 示例值：
func (builder *AuditAndroidContextBuilder) Udid(udid string) *AuditAndroidContextBuilder {
	builder.udid = udid
	builder.udidFlag = true
	return builder
}

// 设备ID
//
// 示例值：
func (builder *AuditAndroidContextBuilder) Did(did string) *AuditAndroidContextBuilder {
	builder.did = did
	builder.didFlag = true
	return builder
}

// app的版本
//
// 示例值：
func (builder *AuditAndroidContextBuilder) AppVer(appVer string) *AuditAndroidContextBuilder {
	builder.appVer = appVer
	builder.appVerFlag = true
	return builder
}

// SecSDK版本
//
// 示例值：
func (builder *AuditAndroidContextBuilder) Ver(ver string) *AuditAndroidContextBuilder {
	builder.ver = ver
	builder.verFlag = true
	return builder
}

// 设备语言
//
// 示例值：
func (builder *AuditAndroidContextBuilder) Region(region string) *AuditAndroidContextBuilder {
	builder.region = region
	builder.regionFlag = true
	return builder
}

// 安卓版本号
//
// 示例值：
func (builder *AuditAndroidContextBuilder) IdI(idI string) *AuditAndroidContextBuilder {
	builder.idI = idI
	builder.idIFlag = true
	return builder
}

// 安卓版本
//
// 示例值：
func (builder *AuditAndroidContextBuilder) IdR(idR string) *AuditAndroidContextBuilder {
	builder.idR = idR
	builder.idRFlag = true
	return builder
}

// Brand
//
// 示例值：
func (builder *AuditAndroidContextBuilder) HwBrand(hwBrand string) *AuditAndroidContextBuilder {
	builder.hwBrand = hwBrand
	builder.hwBrandFlag = true
	return builder
}

// 制造商
//
// 示例值：
func (builder *AuditAndroidContextBuilder) HwManuf(hwManuf string) *AuditAndroidContextBuilder {
	builder.hwManuf = hwManuf
	builder.hwManufFlag = true
	return builder
}

// wifi ip
//
// 示例值：
func (builder *AuditAndroidContextBuilder) Wifip(wifip string) *AuditAndroidContextBuilder {
	builder.wifip = wifip
	builder.wifipFlag = true
	return builder
}

// 路由IP
//
// 示例值：
func (builder *AuditAndroidContextBuilder) RouteIip(routeIip string) *AuditAndroidContextBuilder {
	builder.routeIip = routeIip
	builder.routeIipFlag = true
	return builder
}

// 路由网关IP
//
// 示例值：
func (builder *AuditAndroidContextBuilder) RouteGip(routeGip string) *AuditAndroidContextBuilder {
	builder.routeGip = routeGip
	builder.routeGipFlag = true
	return builder
}

// 表示当前是否root
//
// 示例值：
func (builder *AuditAndroidContextBuilder) EnvSu(envSu string) *AuditAndroidContextBuilder {
	builder.envSu = envSu
	builder.envSuFlag = true
	return builder
}

// 手机系统时区
//
// 示例值：
func (builder *AuditAndroidContextBuilder) EnvTz(envTz string) *AuditAndroidContextBuilder {
	builder.envTz = envTz
	builder.envTzFlag = true
	return builder
}

// 手机系统语言
//
// 示例值：
func (builder *AuditAndroidContextBuilder) EnvMl(envMl string) *AuditAndroidContextBuilder {
	builder.envMl = envMl
	builder.envMlFlag = true
	return builder
}

// GPS经纬度
//
// 示例值：
func (builder *AuditAndroidContextBuilder) Location(location string) *AuditAndroidContextBuilder {
	builder.location = location
	builder.locationFlag = true
	return builder
}

// 当前设备活跃ip
//
// 示例值：
func (builder *AuditAndroidContextBuilder) ActiveIp(activeIp string) *AuditAndroidContextBuilder {
	builder.activeIp = activeIp
	builder.activeIpFlag = true
	return builder
}

// 当前设备活跃ip对应网卡类型
//
// 示例值：
func (builder *AuditAndroidContextBuilder) ActiveIpDetail(activeIpDetail string) *AuditAndroidContextBuilder {
	builder.activeIpDetail = activeIpDetail
	builder.activeIpDetailFlag = true
	return builder
}

// 基站信息
//
// 示例值：
func (builder *AuditAndroidContextBuilder) CellBaseStation(cellBaseStation string) *AuditAndroidContextBuilder {
	builder.cellBaseStation = cellBaseStation
	builder.cellBaseStationFlag = true
	return builder
}

// 公网ip
//
// 示例值：
func (builder *AuditAndroidContextBuilder) IP(iP string) *AuditAndroidContextBuilder {
	builder.iP = iP
	builder.iPFlag = true
	return builder
}

func (builder *AuditAndroidContextBuilder) Build() *AuditAndroidContext {
	req := &AuditAndroidContext{}
	if builder.udidFlag {
		req.Udid = &builder.udid

	}
	if builder.didFlag {
		req.Did = &builder.did

	}
	if builder.appVerFlag {
		req.AppVer = &builder.appVer

	}
	if builder.verFlag {
		req.Ver = &builder.ver

	}
	if builder.regionFlag {
		req.Region = &builder.region

	}
	if builder.idIFlag {
		req.IdI = &builder.idI

	}
	if builder.idRFlag {
		req.IdR = &builder.idR

	}
	if builder.hwBrandFlag {
		req.HwBrand = &builder.hwBrand

	}
	if builder.hwManufFlag {
		req.HwManuf = &builder.hwManuf

	}
	if builder.wifipFlag {
		req.Wifip = &builder.wifip

	}
	if builder.routeIipFlag {
		req.RouteIip = &builder.routeIip

	}
	if builder.routeGipFlag {
		req.RouteGip = &builder.routeGip

	}
	if builder.envSuFlag {
		req.EnvSu = &builder.envSu

	}
	if builder.envTzFlag {
		req.EnvTz = &builder.envTz

	}
	if builder.envMlFlag {
		req.EnvMl = &builder.envMl

	}
	if builder.locationFlag {
		req.Location = &builder.location

	}
	if builder.activeIpFlag {
		req.ActiveIp = &builder.activeIp

	}
	if builder.activeIpDetailFlag {
		req.ActiveIpDetail = &builder.activeIpDetail

	}
	if builder.cellBaseStationFlag {
		req.CellBaseStation = &builder.cellBaseStation

	}
	if builder.iPFlag {
		req.IP = &builder.iP

	}
	return req
}

type AuditContext struct {
	TerminalType   *int                 `json:"terminal_type,omitempty"`   // 终端类型
	IosContext     *AuditIosContext     `json:"ios_context,omitempty"`     // ios的环境信息
	PcContext      *AuditPcContext      `json:"pc_context,omitempty"`      // pc的环境信息
	WebContext     *AuditWebContext     `json:"web_context,omitempty"`     // web的环境信息
	AndroidContext *AuditAndroidContext `json:"android_context,omitempty"` // android的环境信息
}

type AuditContextBuilder struct {
	terminalType       int // 终端类型
	terminalTypeFlag   bool
	iosContext         *AuditIosContext // ios的环境信息
	iosContextFlag     bool
	pcContext          *AuditPcContext // pc的环境信息
	pcContextFlag      bool
	webContext         *AuditWebContext // web的环境信息
	webContextFlag     bool
	androidContext     *AuditAndroidContext // android的环境信息
	androidContextFlag bool
}

func NewAuditContextBuilder() *AuditContextBuilder {
	builder := &AuditContextBuilder{}
	return builder
}

// 终端类型
//
// 示例值：
func (builder *AuditContextBuilder) TerminalType(terminalType int) *AuditContextBuilder {
	builder.terminalType = terminalType
	builder.terminalTypeFlag = true
	return builder
}

// ios的环境信息
//
// 示例值：
func (builder *AuditContextBuilder) IosContext(iosContext *AuditIosContext) *AuditContextBuilder {
	builder.iosContext = iosContext
	builder.iosContextFlag = true
	return builder
}

// pc的环境信息
//
// 示例值：
func (builder *AuditContextBuilder) PcContext(pcContext *AuditPcContext) *AuditContextBuilder {
	builder.pcContext = pcContext
	builder.pcContextFlag = true
	return builder
}

// web的环境信息
//
// 示例值：
func (builder *AuditContextBuilder) WebContext(webContext *AuditWebContext) *AuditContextBuilder {
	builder.webContext = webContext
	builder.webContextFlag = true
	return builder
}

// android的环境信息
//
// 示例值：
func (builder *AuditContextBuilder) AndroidContext(androidContext *AuditAndroidContext) *AuditContextBuilder {
	builder.androidContext = androidContext
	builder.androidContextFlag = true
	return builder
}

func (builder *AuditContextBuilder) Build() *AuditContext {
	req := &AuditContext{}
	if builder.terminalTypeFlag {
		req.TerminalType = &builder.terminalType

	}
	if builder.iosContextFlag {
		req.IosContext = builder.iosContext
	}
	if builder.pcContextFlag {
		req.PcContext = builder.pcContext
	}
	if builder.webContextFlag {
		req.WebContext = builder.webContext
	}
	if builder.androidContextFlag {
		req.AndroidContext = builder.androidContext
	}
	return req
}

type AuditDetail struct {
	Mc          *string `json:"mc,omitempty"`           // mac地址
	DeviceModel *string `json:"device_model,omitempty"` // 设备模型
	Os          *string `json:"os,omitempty"`           // 操作系统
	City        *string `json:"city,omitempty"`         // ip属地
}

type AuditDetailBuilder struct {
	mc              string // mac地址
	mcFlag          bool
	deviceModel     string // 设备模型
	deviceModelFlag bool
	os              string // 操作系统
	osFlag          bool
	city            string // ip属地
	cityFlag        bool
}

func NewAuditDetailBuilder() *AuditDetailBuilder {
	builder := &AuditDetailBuilder{}
	return builder
}

// mac地址
//
// 示例值：08:00:20:0A:8C:6D
func (builder *AuditDetailBuilder) Mc(mc string) *AuditDetailBuilder {
	builder.mc = mc
	builder.mcFlag = true
	return builder
}

// 设备模型
//
// 示例值：iphone14
func (builder *AuditDetailBuilder) DeviceModel(deviceModel string) *AuditDetailBuilder {
	builder.deviceModel = deviceModel
	builder.deviceModelFlag = true
	return builder
}

// 操作系统
//
// 示例值：mac os
func (builder *AuditDetailBuilder) Os(os string) *AuditDetailBuilder {
	builder.os = os
	builder.osFlag = true
	return builder
}

// ip属地
//
// 示例值：北京
func (builder *AuditDetailBuilder) City(city string) *AuditDetailBuilder {
	builder.city = city
	builder.cityFlag = true
	return builder
}

func (builder *AuditDetailBuilder) Build() *AuditDetail {
	req := &AuditDetail{}
	if builder.mcFlag {
		req.Mc = &builder.mc

	}
	if builder.deviceModelFlag {
		req.DeviceModel = &builder.deviceModel

	}
	if builder.osFlag {
		req.Os = &builder.os

	}
	if builder.cityFlag {
		req.City = &builder.city

	}
	return req
}

type AuditEventExtend struct {
	CommentType                 *string `json:"comment_type,omitempty"`                     // 评论类型
	AppDetail                   *string `json:"app_detail,omitempty"`                       // app信息
	TwoStepValidation           *bool   `json:"two_step_validation,omitempty"`              // 是否两步验证
	LoginMethod                 *string `json:"login_method,omitempty"`                     // 登录方式
	NewPeopleNumInVideo         *int    `json:"new_people_num_in_video,omitempty"`          // 创建新的{x}人会议/通话
	ExternalPeopleNumInVideo    *int    `json:"external_people_num_in_video,omitempty"`     // 将{x}名外部用户加入/退出通话
	ExternalPeopleNumInChat     *int    `json:"external_people_num_in_chat,omitempty"`      // 将{x}名外部用户加入/退出群组
	JoinGroup                   *int    `json:"join_group,omitempty"`                       // 创建{x}人数的群组
	QuitGroup                   *int    `json:"quit_group,omitempty"`                       // 解散{x}人数的群组
	ExternalPeopleNumInDocShare *int    `json:"external_people_num_in_doc_share,omitempty"` // 分享文档给{x}名外部用户
}

type AuditEventExtendBuilder struct {
	commentType                     string // 评论类型
	commentTypeFlag                 bool
	appDetail                       string // app信息
	appDetailFlag                   bool
	twoStepValidation               bool // 是否两步验证
	twoStepValidationFlag           bool
	loginMethod                     string // 登录方式
	loginMethodFlag                 bool
	newPeopleNumInVideo             int // 创建新的{x}人会议/通话
	newPeopleNumInVideoFlag         bool
	externalPeopleNumInVideo        int // 将{x}名外部用户加入/退出通话
	externalPeopleNumInVideoFlag    bool
	externalPeopleNumInChat         int // 将{x}名外部用户加入/退出群组
	externalPeopleNumInChatFlag     bool
	joinGroup                       int // 创建{x}人数的群组
	joinGroupFlag                   bool
	quitGroup                       int // 解散{x}人数的群组
	quitGroupFlag                   bool
	externalPeopleNumInDocShare     int // 分享文档给{x}名外部用户
	externalPeopleNumInDocShareFlag bool
}

func NewAuditEventExtendBuilder() *AuditEventExtendBuilder {
	builder := &AuditEventExtendBuilder{}
	return builder
}

// 评论类型
//
// 示例值：
func (builder *AuditEventExtendBuilder) CommentType(commentType string) *AuditEventExtendBuilder {
	builder.commentType = commentType
	builder.commentTypeFlag = true
	return builder
}

// app信息
//
// 示例值：
func (builder *AuditEventExtendBuilder) AppDetail(appDetail string) *AuditEventExtendBuilder {
	builder.appDetail = appDetail
	builder.appDetailFlag = true
	return builder
}

// 是否两步验证
//
// 示例值：
func (builder *AuditEventExtendBuilder) TwoStepValidation(twoStepValidation bool) *AuditEventExtendBuilder {
	builder.twoStepValidation = twoStepValidation
	builder.twoStepValidationFlag = true
	return builder
}

// 登录方式
//
// 示例值：
func (builder *AuditEventExtendBuilder) LoginMethod(loginMethod string) *AuditEventExtendBuilder {
	builder.loginMethod = loginMethod
	builder.loginMethodFlag = true
	return builder
}

// 创建新的{x}人会议/通话
//
// 示例值：
func (builder *AuditEventExtendBuilder) NewPeopleNumInVideo(newPeopleNumInVideo int) *AuditEventExtendBuilder {
	builder.newPeopleNumInVideo = newPeopleNumInVideo
	builder.newPeopleNumInVideoFlag = true
	return builder
}

// 将{x}名外部用户加入/退出通话
//
// 示例值：
func (builder *AuditEventExtendBuilder) ExternalPeopleNumInVideo(externalPeopleNumInVideo int) *AuditEventExtendBuilder {
	builder.externalPeopleNumInVideo = externalPeopleNumInVideo
	builder.externalPeopleNumInVideoFlag = true
	return builder
}

// 将{x}名外部用户加入/退出群组
//
// 示例值：
func (builder *AuditEventExtendBuilder) ExternalPeopleNumInChat(externalPeopleNumInChat int) *AuditEventExtendBuilder {
	builder.externalPeopleNumInChat = externalPeopleNumInChat
	builder.externalPeopleNumInChatFlag = true
	return builder
}

// 创建{x}人数的群组
//
// 示例值：
func (builder *AuditEventExtendBuilder) JoinGroup(joinGroup int) *AuditEventExtendBuilder {
	builder.joinGroup = joinGroup
	builder.joinGroupFlag = true
	return builder
}

// 解散{x}人数的群组
//
// 示例值：
func (builder *AuditEventExtendBuilder) QuitGroup(quitGroup int) *AuditEventExtendBuilder {
	builder.quitGroup = quitGroup
	builder.quitGroupFlag = true
	return builder
}

// 分享文档给{x}名外部用户
//
// 示例值：
func (builder *AuditEventExtendBuilder) ExternalPeopleNumInDocShare(externalPeopleNumInDocShare int) *AuditEventExtendBuilder {
	builder.externalPeopleNumInDocShare = externalPeopleNumInDocShare
	builder.externalPeopleNumInDocShareFlag = true
	return builder
}

func (builder *AuditEventExtendBuilder) Build() *AuditEventExtend {
	req := &AuditEventExtend{}
	if builder.commentTypeFlag {
		req.CommentType = &builder.commentType

	}
	if builder.appDetailFlag {
		req.AppDetail = &builder.appDetail

	}
	if builder.twoStepValidationFlag {
		req.TwoStepValidation = &builder.twoStepValidation

	}
	if builder.loginMethodFlag {
		req.LoginMethod = &builder.loginMethod

	}
	if builder.newPeopleNumInVideoFlag {
		req.NewPeopleNumInVideo = &builder.newPeopleNumInVideo

	}
	if builder.externalPeopleNumInVideoFlag {
		req.ExternalPeopleNumInVideo = &builder.externalPeopleNumInVideo

	}
	if builder.externalPeopleNumInChatFlag {
		req.ExternalPeopleNumInChat = &builder.externalPeopleNumInChat

	}
	if builder.joinGroupFlag {
		req.JoinGroup = &builder.joinGroup

	}
	if builder.quitGroupFlag {
		req.QuitGroup = &builder.quitGroup

	}
	if builder.externalPeopleNumInDocShareFlag {
		req.ExternalPeopleNumInDocShare = &builder.externalPeopleNumInDocShare

	}
	return req
}

type AuditInfo struct {
	EventId         *string                 `json:"event_id,omitempty"`          // 事件id
	UniqueId        *string                 `json:"unique_id,omitempty"`         // 唯一id
	EventName       *string                 `json:"event_name,omitempty"`        // 事件名称
	DepartmentIds   []string                `json:"department_ids,omitempty"`    // 用户所属部门的ID列表
	EventModule     *int                    `json:"event_module,omitempty"`      // 模块
	OperatorType    *int                    `json:"operator_type,omitempty"`     // 操作人类型
	OperatorValue   *string                 `json:"operator_value,omitempty"`    // 操作人id
	Objects         []*AuditObjectEntity    `json:"objects,omitempty"`           // 操作对象列表
	Recipients      []*AuditRecipientEntity `json:"recipients,omitempty"`        // 接收者对象列表
	EventTime       *int                    `json:"event_time,omitempty"`        // 事件时间
	Ip              *string                 `json:"ip,omitempty"`                // ip信息
	OperatorApp     *string                 `json:"operator_app,omitempty"`      // 第三方isvID
	AuditContext    *AuditContext           `json:"audit_context,omitempty"`     // 环境信息
	Extend          *AuditEventExtend       `json:"extend,omitempty"`            // 事件级别的扩展
	OperatorAppName *string                 `json:"operator_app_name,omitempty"` // 第三方isv名称
	CommonDrawers   *ApiAuditCommonDrawers  `json:"common_drawers,omitempty"`    // 扩展字段信息
	AuditDetail     *AuditDetail            `json:"audit_detail,omitempty"`      // 日志扩展信息
}

type AuditInfoBuilder struct {
	eventId             string // 事件id
	eventIdFlag         bool
	uniqueId            string // 唯一id
	uniqueIdFlag        bool
	eventName           string // 事件名称
	eventNameFlag       bool
	departmentIds       []string // 用户所属部门的ID列表
	departmentIdsFlag   bool
	eventModule         int // 模块
	eventModuleFlag     bool
	operatorType        int // 操作人类型
	operatorTypeFlag    bool
	operatorValue       string // 操作人id
	operatorValueFlag   bool
	objects             []*AuditObjectEntity // 操作对象列表
	objectsFlag         bool
	recipients          []*AuditRecipientEntity // 接收者对象列表
	recipientsFlag      bool
	eventTime           int // 事件时间
	eventTimeFlag       bool
	ip                  string // ip信息
	ipFlag              bool
	operatorApp         string // 第三方isvID
	operatorAppFlag     bool
	auditContext        *AuditContext // 环境信息
	auditContextFlag    bool
	extend              *AuditEventExtend // 事件级别的扩展
	extendFlag          bool
	operatorAppName     string // 第三方isv名称
	operatorAppNameFlag bool
	commonDrawers       *ApiAuditCommonDrawers // 扩展字段信息
	commonDrawersFlag   bool
	auditDetail         *AuditDetail // 日志扩展信息
	auditDetailFlag     bool
}

func NewAuditInfoBuilder() *AuditInfoBuilder {
	builder := &AuditInfoBuilder{}
	return builder
}

// 事件id
//
// 示例值：7126195947859656705
func (builder *AuditInfoBuilder) EventId(eventId string) *AuditInfoBuilder {
	builder.eventId = eventId
	builder.eventIdFlag = true
	return builder
}

// 唯一id
//
// 示例值：7126195947859656705
func (builder *AuditInfoBuilder) UniqueId(uniqueId string) *AuditInfoBuilder {
	builder.uniqueId = uniqueId
	builder.uniqueIdFlag = true
	return builder
}

// 事件名称
//
// 示例值：space_read_doc
func (builder *AuditInfoBuilder) EventName(eventName string) *AuditInfoBuilder {
	builder.eventName = eventName
	builder.eventNameFlag = true
	return builder
}

// 用户所属部门的ID列表
//
// 示例值：
func (builder *AuditInfoBuilder) DepartmentIds(departmentIds []string) *AuditInfoBuilder {
	builder.departmentIds = departmentIds
	builder.departmentIdsFlag = true
	return builder
}

// 模块
//
// 示例值：1
func (builder *AuditInfoBuilder) EventModule(eventModule int) *AuditInfoBuilder {
	builder.eventModule = eventModule
	builder.eventModuleFlag = true
	return builder
}

// 操作人类型
//
// 示例值：
func (builder *AuditInfoBuilder) OperatorType(operatorType int) *AuditInfoBuilder {
	builder.operatorType = operatorType
	builder.operatorTypeFlag = true
	return builder
}

// 操作人id
//
// 示例值：11111111111111
func (builder *AuditInfoBuilder) OperatorValue(operatorValue string) *AuditInfoBuilder {
	builder.operatorValue = operatorValue
	builder.operatorValueFlag = true
	return builder
}

// 操作对象列表
//
// 示例值：
func (builder *AuditInfoBuilder) Objects(objects []*AuditObjectEntity) *AuditInfoBuilder {
	builder.objects = objects
	builder.objectsFlag = true
	return builder
}

// 接收者对象列表
//
// 示例值：
func (builder *AuditInfoBuilder) Recipients(recipients []*AuditRecipientEntity) *AuditInfoBuilder {
	builder.recipients = recipients
	builder.recipientsFlag = true
	return builder
}

// 事件时间
//
// 示例值：1669046400
func (builder *AuditInfoBuilder) EventTime(eventTime int) *AuditInfoBuilder {
	builder.eventTime = eventTime
	builder.eventTimeFlag = true
	return builder
}

// ip信息
//
// 示例值：192.168.168.1
func (builder *AuditInfoBuilder) Ip(ip string) *AuditInfoBuilder {
	builder.ip = ip
	builder.ipFlag = true
	return builder
}

// 第三方isvID
//
// 示例值：xxx
func (builder *AuditInfoBuilder) OperatorApp(operatorApp string) *AuditInfoBuilder {
	builder.operatorApp = operatorApp
	builder.operatorAppFlag = true
	return builder
}

// 环境信息
//
// 示例值：
func (builder *AuditInfoBuilder) AuditContext(auditContext *AuditContext) *AuditInfoBuilder {
	builder.auditContext = auditContext
	builder.auditContextFlag = true
	return builder
}

// 事件级别的扩展
//
// 示例值：
func (builder *AuditInfoBuilder) Extend(extend *AuditEventExtend) *AuditInfoBuilder {
	builder.extend = extend
	builder.extendFlag = true
	return builder
}

// 第三方isv名称
//
// 示例值：xxx
func (builder *AuditInfoBuilder) OperatorAppName(operatorAppName string) *AuditInfoBuilder {
	builder.operatorAppName = operatorAppName
	builder.operatorAppNameFlag = true
	return builder
}

// 扩展字段信息
//
// 示例值：
func (builder *AuditInfoBuilder) CommonDrawers(commonDrawers *ApiAuditCommonDrawers) *AuditInfoBuilder {
	builder.commonDrawers = commonDrawers
	builder.commonDrawersFlag = true
	return builder
}

// 日志扩展信息
//
// 示例值：
func (builder *AuditInfoBuilder) AuditDetail(auditDetail *AuditDetail) *AuditInfoBuilder {
	builder.auditDetail = auditDetail
	builder.auditDetailFlag = true
	return builder
}

func (builder *AuditInfoBuilder) Build() *AuditInfo {
	req := &AuditInfo{}
	if builder.eventIdFlag {
		req.EventId = &builder.eventId

	}
	if builder.uniqueIdFlag {
		req.UniqueId = &builder.uniqueId

	}
	if builder.eventNameFlag {
		req.EventName = &builder.eventName

	}
	if builder.departmentIdsFlag {
		req.DepartmentIds = builder.departmentIds
	}
	if builder.eventModuleFlag {
		req.EventModule = &builder.eventModule

	}
	if builder.operatorTypeFlag {
		req.OperatorType = &builder.operatorType

	}
	if builder.operatorValueFlag {
		req.OperatorValue = &builder.operatorValue

	}
	if builder.objectsFlag {
		req.Objects = builder.objects
	}
	if builder.recipientsFlag {
		req.Recipients = builder.recipients
	}
	if builder.eventTimeFlag {
		req.EventTime = &builder.eventTime

	}
	if builder.ipFlag {
		req.Ip = &builder.ip

	}
	if builder.operatorAppFlag {
		req.OperatorApp = &builder.operatorApp

	}
	if builder.auditContextFlag {
		req.AuditContext = builder.auditContext
	}
	if builder.extendFlag {
		req.Extend = builder.extend
	}
	if builder.operatorAppNameFlag {
		req.OperatorAppName = &builder.operatorAppName

	}
	if builder.commonDrawersFlag {
		req.CommonDrawers = builder.commonDrawers
	}
	if builder.auditDetailFlag {
		req.AuditDetail = builder.auditDetail
	}
	return req
}

type AuditIosContext struct {
	Udid            *string `json:"udid,omitempty"`              // UDID
	Did             *string `json:"did,omitempty"`               // 设备ID
	AppVer          *string `json:"app_ver,omitempty"`           // app的版本
	Ver             *string `json:"ver,omitempty"`               // SecSDK版本
	Os              *string `json:"os,omitempty"`                // 系统类型及版本
	STZone          *string `json:"STZone,omitempty"`            // 系统时区
	ML              *string `json:"ML,omitempty"`                // 当前语言
	Sjd             *string `json:"sjd,omitempty"`               // 是否越狱
	Proxyip         *string `json:"proxyip,omitempty"`           // 代理ip
	Wifip           *string `json:"wifip,omitempty"`             // wifi ip
	Location        *string `json:"location,omitempty"`          // GPS经纬度
	ActiveIp        *string `json:"active_ip,omitempty"`         // 当前设备活跃ip
	ActiveIpDetail  *string `json:"active_ip_detail,omitempty"`  // 当前设备活跃ip对应网卡类型
	CellBaseStation *string `json:"cell_base_station,omitempty"` // 基站信息
	IP              *string `json:"IP,omitempty"`                // 公网ip
}

type AuditIosContextBuilder struct {
	udid                string // UDID
	udidFlag            bool
	did                 string // 设备ID
	didFlag             bool
	appVer              string // app的版本
	appVerFlag          bool
	ver                 string // SecSDK版本
	verFlag             bool
	os                  string // 系统类型及版本
	osFlag              bool
	sTZone              string // 系统时区
	sTZoneFlag          bool
	mL                  string // 当前语言
	mLFlag              bool
	sjd                 string // 是否越狱
	sjdFlag             bool
	proxyip             string // 代理ip
	proxyipFlag         bool
	wifip               string // wifi ip
	wifipFlag           bool
	location            string // GPS经纬度
	locationFlag        bool
	activeIp            string // 当前设备活跃ip
	activeIpFlag        bool
	activeIpDetail      string // 当前设备活跃ip对应网卡类型
	activeIpDetailFlag  bool
	cellBaseStation     string // 基站信息
	cellBaseStationFlag bool
	iP                  string // 公网ip
	iPFlag              bool
}

func NewAuditIosContextBuilder() *AuditIosContextBuilder {
	builder := &AuditIosContextBuilder{}
	return builder
}

// UDID
//
// 示例值：
func (builder *AuditIosContextBuilder) Udid(udid string) *AuditIosContextBuilder {
	builder.udid = udid
	builder.udidFlag = true
	return builder
}

// 设备ID
//
// 示例值：
func (builder *AuditIosContextBuilder) Did(did string) *AuditIosContextBuilder {
	builder.did = did
	builder.didFlag = true
	return builder
}

// app的版本
//
// 示例值：
func (builder *AuditIosContextBuilder) AppVer(appVer string) *AuditIosContextBuilder {
	builder.appVer = appVer
	builder.appVerFlag = true
	return builder
}

// SecSDK版本
//
// 示例值：
func (builder *AuditIosContextBuilder) Ver(ver string) *AuditIosContextBuilder {
	builder.ver = ver
	builder.verFlag = true
	return builder
}

// 系统类型及版本
//
// 示例值：
func (builder *AuditIosContextBuilder) Os(os string) *AuditIosContextBuilder {
	builder.os = os
	builder.osFlag = true
	return builder
}

// 系统时区
//
// 示例值：
func (builder *AuditIosContextBuilder) STZone(sTZone string) *AuditIosContextBuilder {
	builder.sTZone = sTZone
	builder.sTZoneFlag = true
	return builder
}

// 当前语言
//
// 示例值：
func (builder *AuditIosContextBuilder) ML(mL string) *AuditIosContextBuilder {
	builder.mL = mL
	builder.mLFlag = true
	return builder
}

// 是否越狱
//
// 示例值：
func (builder *AuditIosContextBuilder) Sjd(sjd string) *AuditIosContextBuilder {
	builder.sjd = sjd
	builder.sjdFlag = true
	return builder
}

// 代理ip
//
// 示例值：
func (builder *AuditIosContextBuilder) Proxyip(proxyip string) *AuditIosContextBuilder {
	builder.proxyip = proxyip
	builder.proxyipFlag = true
	return builder
}

// wifi ip
//
// 示例值：
func (builder *AuditIosContextBuilder) Wifip(wifip string) *AuditIosContextBuilder {
	builder.wifip = wifip
	builder.wifipFlag = true
	return builder
}

// GPS经纬度
//
// 示例值：
func (builder *AuditIosContextBuilder) Location(location string) *AuditIosContextBuilder {
	builder.location = location
	builder.locationFlag = true
	return builder
}

// 当前设备活跃ip
//
// 示例值：
func (builder *AuditIosContextBuilder) ActiveIp(activeIp string) *AuditIosContextBuilder {
	builder.activeIp = activeIp
	builder.activeIpFlag = true
	return builder
}

// 当前设备活跃ip对应网卡类型
//
// 示例值：
func (builder *AuditIosContextBuilder) ActiveIpDetail(activeIpDetail string) *AuditIosContextBuilder {
	builder.activeIpDetail = activeIpDetail
	builder.activeIpDetailFlag = true
	return builder
}

// 基站信息
//
// 示例值：
func (builder *AuditIosContextBuilder) CellBaseStation(cellBaseStation string) *AuditIosContextBuilder {
	builder.cellBaseStation = cellBaseStation
	builder.cellBaseStationFlag = true
	return builder
}

// 公网ip
//
// 示例值：
func (builder *AuditIosContextBuilder) IP(iP string) *AuditIosContextBuilder {
	builder.iP = iP
	builder.iPFlag = true
	return builder
}

func (builder *AuditIosContextBuilder) Build() *AuditIosContext {
	req := &AuditIosContext{}
	if builder.udidFlag {
		req.Udid = &builder.udid

	}
	if builder.didFlag {
		req.Did = &builder.did

	}
	if builder.appVerFlag {
		req.AppVer = &builder.appVer

	}
	if builder.verFlag {
		req.Ver = &builder.ver

	}
	if builder.osFlag {
		req.Os = &builder.os

	}
	if builder.sTZoneFlag {
		req.STZone = &builder.sTZone

	}
	if builder.mLFlag {
		req.ML = &builder.mL

	}
	if builder.sjdFlag {
		req.Sjd = &builder.sjd

	}
	if builder.proxyipFlag {
		req.Proxyip = &builder.proxyip

	}
	if builder.wifipFlag {
		req.Wifip = &builder.wifip

	}
	if builder.locationFlag {
		req.Location = &builder.location

	}
	if builder.activeIpFlag {
		req.ActiveIp = &builder.activeIp

	}
	if builder.activeIpDetailFlag {
		req.ActiveIpDetail = &builder.activeIpDetail

	}
	if builder.cellBaseStationFlag {
		req.CellBaseStation = &builder.cellBaseStation

	}
	if builder.iPFlag {
		req.IP = &builder.iP

	}
	return req
}

type AuditObjectDetail struct {
	CloneSource                  *string `json:"clone_source,omitempty"`                    // 克隆来源
	TextDetail                   *string `json:"text_detail,omitempty"`                     // 其他文本
	FileName                     *string `json:"file_name,omitempty"`                       // 文件名称
	ThirdPartyAppID              *string `json:"third_party_appID,omitempty"`               // 第三方APPID
	ContainFileNum               *int    `json:"contain_file_num,omitempty"`                // 文件或文件夹数量
	PermissionSettingType        *string `json:"permission_setting_type,omitempty"`         // 链接分享设置
	PermissionExternalAccessType *bool   `json:"permission_external_access_Type,omitempty"` // 是否开启外部访问设置
	PermissionShareType          *string `json:"permission_share_type,omitempty"`           // 分享设置
	FileServiceSource            *string `json:"file_service_source,omitempty"`             // file上传业务来源
	OkrDownloadContent           *string `json:"okr_download_content,omitempty"`            // 下载OKR时的内容范围
	ContainerType                *string `json:"container_type,omitempty"`                  // 容器类型，标识是否wiki
	ContainerId                  *string `json:"container_id,omitempty"`                    // 容器id，wiki标识字段
	CurrentPage                  *string `json:"current_page,omitempty"`                    // 截屏、录制的开始页面
}

type AuditObjectDetailBuilder struct {
	cloneSource                      string // 克隆来源
	cloneSourceFlag                  bool
	textDetail                       string // 其他文本
	textDetailFlag                   bool
	fileName                         string // 文件名称
	fileNameFlag                     bool
	thirdPartyAppID                  string // 第三方APPID
	thirdPartyAppIDFlag              bool
	containFileNum                   int // 文件或文件夹数量
	containFileNumFlag               bool
	permissionSettingType            string // 链接分享设置
	permissionSettingTypeFlag        bool
	permissionExternalAccessType     bool // 是否开启外部访问设置
	permissionExternalAccessTypeFlag bool
	permissionShareType              string // 分享设置
	permissionShareTypeFlag          bool
	fileServiceSource                string // file上传业务来源
	fileServiceSourceFlag            bool
	okrDownloadContent               string // 下载OKR时的内容范围
	okrDownloadContentFlag           bool
	containerType                    string // 容器类型，标识是否wiki
	containerTypeFlag                bool
	containerId                      string // 容器id，wiki标识字段
	containerIdFlag                  bool
	currentPage                      string // 截屏、录制的开始页面
	currentPageFlag                  bool
}

func NewAuditObjectDetailBuilder() *AuditObjectDetailBuilder {
	builder := &AuditObjectDetailBuilder{}
	return builder
}

// 克隆来源
//
// 示例值：
func (builder *AuditObjectDetailBuilder) CloneSource(cloneSource string) *AuditObjectDetailBuilder {
	builder.cloneSource = cloneSource
	builder.cloneSourceFlag = true
	return builder
}

// 其他文本
//
// 示例值：
func (builder *AuditObjectDetailBuilder) TextDetail(textDetail string) *AuditObjectDetailBuilder {
	builder.textDetail = textDetail
	builder.textDetailFlag = true
	return builder
}

// 文件名称
//
// 示例值：
func (builder *AuditObjectDetailBuilder) FileName(fileName string) *AuditObjectDetailBuilder {
	builder.fileName = fileName
	builder.fileNameFlag = true
	return builder
}

// 第三方APPID
//
// 示例值：
func (builder *AuditObjectDetailBuilder) ThirdPartyAppID(thirdPartyAppID string) *AuditObjectDetailBuilder {
	builder.thirdPartyAppID = thirdPartyAppID
	builder.thirdPartyAppIDFlag = true
	return builder
}

// 文件或文件夹数量
//
// 示例值：
func (builder *AuditObjectDetailBuilder) ContainFileNum(containFileNum int) *AuditObjectDetailBuilder {
	builder.containFileNum = containFileNum
	builder.containFileNumFlag = true
	return builder
}

// 链接分享设置
//
// 示例值：
func (builder *AuditObjectDetailBuilder) PermissionSettingType(permissionSettingType string) *AuditObjectDetailBuilder {
	builder.permissionSettingType = permissionSettingType
	builder.permissionSettingTypeFlag = true
	return builder
}

// 是否开启外部访问设置
//
// 示例值：
func (builder *AuditObjectDetailBuilder) PermissionExternalAccessType(permissionExternalAccessType bool) *AuditObjectDetailBuilder {
	builder.permissionExternalAccessType = permissionExternalAccessType
	builder.permissionExternalAccessTypeFlag = true
	return builder
}

// 分享设置
//
// 示例值：
func (builder *AuditObjectDetailBuilder) PermissionShareType(permissionShareType string) *AuditObjectDetailBuilder {
	builder.permissionShareType = permissionShareType
	builder.permissionShareTypeFlag = true
	return builder
}

// file上传业务来源
//
// 示例值：
func (builder *AuditObjectDetailBuilder) FileServiceSource(fileServiceSource string) *AuditObjectDetailBuilder {
	builder.fileServiceSource = fileServiceSource
	builder.fileServiceSourceFlag = true
	return builder
}

// 下载OKR时的内容范围
//
// 示例值：
func (builder *AuditObjectDetailBuilder) OkrDownloadContent(okrDownloadContent string) *AuditObjectDetailBuilder {
	builder.okrDownloadContent = okrDownloadContent
	builder.okrDownloadContentFlag = true
	return builder
}

// 容器类型，标识是否wiki
//
// 示例值：
func (builder *AuditObjectDetailBuilder) ContainerType(containerType string) *AuditObjectDetailBuilder {
	builder.containerType = containerType
	builder.containerTypeFlag = true
	return builder
}

// 容器id，wiki标识字段
//
// 示例值：
func (builder *AuditObjectDetailBuilder) ContainerId(containerId string) *AuditObjectDetailBuilder {
	builder.containerId = containerId
	builder.containerIdFlag = true
	return builder
}

// 截屏、录制的开始页面
//
// 示例值：
func (builder *AuditObjectDetailBuilder) CurrentPage(currentPage string) *AuditObjectDetailBuilder {
	builder.currentPage = currentPage
	builder.currentPageFlag = true
	return builder
}

func (builder *AuditObjectDetailBuilder) Build() *AuditObjectDetail {
	req := &AuditObjectDetail{}
	if builder.cloneSourceFlag {
		req.CloneSource = &builder.cloneSource

	}
	if builder.textDetailFlag {
		req.TextDetail = &builder.textDetail

	}
	if builder.fileNameFlag {
		req.FileName = &builder.fileName

	}
	if builder.thirdPartyAppIDFlag {
		req.ThirdPartyAppID = &builder.thirdPartyAppID

	}
	if builder.containFileNumFlag {
		req.ContainFileNum = &builder.containFileNum

	}
	if builder.permissionSettingTypeFlag {
		req.PermissionSettingType = &builder.permissionSettingType

	}
	if builder.permissionExternalAccessTypeFlag {
		req.PermissionExternalAccessType = &builder.permissionExternalAccessType

	}
	if builder.permissionShareTypeFlag {
		req.PermissionShareType = &builder.permissionShareType

	}
	if builder.fileServiceSourceFlag {
		req.FileServiceSource = &builder.fileServiceSource

	}
	if builder.okrDownloadContentFlag {
		req.OkrDownloadContent = &builder.okrDownloadContent

	}
	if builder.containerTypeFlag {
		req.ContainerType = &builder.containerType

	}
	if builder.containerIdFlag {
		req.ContainerId = &builder.containerId

	}
	if builder.currentPageFlag {
		req.CurrentPage = &builder.currentPage

	}
	return req
}

type AuditObjectEntity struct {
	ObjectType   *string            `json:"object_type,omitempty"`   // 操作对象类型
	ObjectValue  *string            `json:"object_value,omitempty"`  // 操作对象值，可能存在department_id、user_id等，需要进行lark_id的转换
	ObjectName   *string            `json:"object_name,omitempty"`   // 操作对象名称，如会话名、文档名等
	ObjectOwner  *string            `json:"object_owner,omitempty"`  // 操作对象的所有者
	ObjectDetail *AuditObjectDetail `json:"object_detail,omitempty"` // object 详情
}

type AuditObjectEntityBuilder struct {
	objectType       string // 操作对象类型
	objectTypeFlag   bool
	objectValue      string // 操作对象值，可能存在department_id、user_id等，需要进行lark_id的转换
	objectValueFlag  bool
	objectName       string // 操作对象名称，如会话名、文档名等
	objectNameFlag   bool
	objectOwner      string // 操作对象的所有者
	objectOwnerFlag  bool
	objectDetail     *AuditObjectDetail // object 详情
	objectDetailFlag bool
}

func NewAuditObjectEntityBuilder() *AuditObjectEntityBuilder {
	builder := &AuditObjectEntityBuilder{}
	return builder
}

// 操作对象类型
//
// 示例值：
func (builder *AuditObjectEntityBuilder) ObjectType(objectType string) *AuditObjectEntityBuilder {
	builder.objectType = objectType
	builder.objectTypeFlag = true
	return builder
}

// 操作对象值，可能存在department_id、user_id等，需要进行lark_id的转换
//
// 示例值：
func (builder *AuditObjectEntityBuilder) ObjectValue(objectValue string) *AuditObjectEntityBuilder {
	builder.objectValue = objectValue
	builder.objectValueFlag = true
	return builder
}

// 操作对象名称，如会话名、文档名等
//
// 示例值：
func (builder *AuditObjectEntityBuilder) ObjectName(objectName string) *AuditObjectEntityBuilder {
	builder.objectName = objectName
	builder.objectNameFlag = true
	return builder
}

// 操作对象的所有者
//
// 示例值：
func (builder *AuditObjectEntityBuilder) ObjectOwner(objectOwner string) *AuditObjectEntityBuilder {
	builder.objectOwner = objectOwner
	builder.objectOwnerFlag = true
	return builder
}

// object 详情
//
// 示例值：
func (builder *AuditObjectEntityBuilder) ObjectDetail(objectDetail *AuditObjectDetail) *AuditObjectEntityBuilder {
	builder.objectDetail = objectDetail
	builder.objectDetailFlag = true
	return builder
}

func (builder *AuditObjectEntityBuilder) Build() *AuditObjectEntity {
	req := &AuditObjectEntity{}
	if builder.objectTypeFlag {
		req.ObjectType = &builder.objectType

	}
	if builder.objectValueFlag {
		req.ObjectValue = &builder.objectValue

	}
	if builder.objectNameFlag {
		req.ObjectName = &builder.objectName

	}
	if builder.objectOwnerFlag {
		req.ObjectOwner = &builder.objectOwner

	}
	if builder.objectDetailFlag {
		req.ObjectDetail = builder.objectDetail
	}
	return req
}

type AuditPcContext struct {
	Udid   *string `json:"udid,omitempty"`    // UDID
	Did    *string `json:"did,omitempty"`     // 设备ID
	AppVer *string `json:"app_ver,omitempty"` // app的版本
	Ver    *string `json:"ver,omitempty"`     // SecSDK版本
	Os     *string `json:"os,omitempty"`      // 客户端类型
	Wifip  *string `json:"wifip,omitempty"`   // wifi ip
	Region *string `json:"region,omitempty"`  // 设备区域
	IP     *string `json:"IP,omitempty"`      // 公网ip
}

type AuditPcContextBuilder struct {
	udid       string // UDID
	udidFlag   bool
	did        string // 设备ID
	didFlag    bool
	appVer     string // app的版本
	appVerFlag bool
	ver        string // SecSDK版本
	verFlag    bool
	os         string // 客户端类型
	osFlag     bool
	wifip      string // wifi ip
	wifipFlag  bool
	region     string // 设备区域
	regionFlag bool
	iP         string // 公网ip
	iPFlag     bool
}

func NewAuditPcContextBuilder() *AuditPcContextBuilder {
	builder := &AuditPcContextBuilder{}
	return builder
}

// UDID
//
// 示例值：
func (builder *AuditPcContextBuilder) Udid(udid string) *AuditPcContextBuilder {
	builder.udid = udid
	builder.udidFlag = true
	return builder
}

// 设备ID
//
// 示例值：
func (builder *AuditPcContextBuilder) Did(did string) *AuditPcContextBuilder {
	builder.did = did
	builder.didFlag = true
	return builder
}

// app的版本
//
// 示例值：
func (builder *AuditPcContextBuilder) AppVer(appVer string) *AuditPcContextBuilder {
	builder.appVer = appVer
	builder.appVerFlag = true
	return builder
}

// SecSDK版本
//
// 示例值：
func (builder *AuditPcContextBuilder) Ver(ver string) *AuditPcContextBuilder {
	builder.ver = ver
	builder.verFlag = true
	return builder
}

// 客户端类型
//
// 示例值：
func (builder *AuditPcContextBuilder) Os(os string) *AuditPcContextBuilder {
	builder.os = os
	builder.osFlag = true
	return builder
}

// wifi ip
//
// 示例值：
func (builder *AuditPcContextBuilder) Wifip(wifip string) *AuditPcContextBuilder {
	builder.wifip = wifip
	builder.wifipFlag = true
	return builder
}

// 设备区域
//
// 示例值：
func (builder *AuditPcContextBuilder) Region(region string) *AuditPcContextBuilder {
	builder.region = region
	builder.regionFlag = true
	return builder
}

// 公网ip
//
// 示例值：
func (builder *AuditPcContextBuilder) IP(iP string) *AuditPcContextBuilder {
	builder.iP = iP
	builder.iPFlag = true
	return builder
}

func (builder *AuditPcContextBuilder) Build() *AuditPcContext {
	req := &AuditPcContext{}
	if builder.udidFlag {
		req.Udid = &builder.udid

	}
	if builder.didFlag {
		req.Did = &builder.did

	}
	if builder.appVerFlag {
		req.AppVer = &builder.appVer

	}
	if builder.verFlag {
		req.Ver = &builder.ver

	}
	if builder.osFlag {
		req.Os = &builder.os

	}
	if builder.wifipFlag {
		req.Wifip = &builder.wifip

	}
	if builder.regionFlag {
		req.Region = &builder.region

	}
	if builder.iPFlag {
		req.IP = &builder.iP

	}
	return req
}

type AuditRecipientDetail struct {
	PermissionActionType *string `json:"permission_action_type,omitempty"` // 修改权限协作者
}

type AuditRecipientDetailBuilder struct {
	permissionActionType     string // 修改权限协作者
	permissionActionTypeFlag bool
}

func NewAuditRecipientDetailBuilder() *AuditRecipientDetailBuilder {
	builder := &AuditRecipientDetailBuilder{}
	return builder
}

// 修改权限协作者
//
// 示例值：
func (builder *AuditRecipientDetailBuilder) PermissionActionType(permissionActionType string) *AuditRecipientDetailBuilder {
	builder.permissionActionType = permissionActionType
	builder.permissionActionTypeFlag = true
	return builder
}

func (builder *AuditRecipientDetailBuilder) Build() *AuditRecipientDetail {
	req := &AuditRecipientDetail{}
	if builder.permissionActionTypeFlag {
		req.PermissionActionType = &builder.permissionActionType

	}
	return req
}

type AuditRecipientEntity struct {
	RecipientType   *string               `json:"recipient_type,omitempty"`   // 接收者对象类型
	RecipientValue  *string               `json:"recipient_value,omitempty"`  // 接收者对象值，可能存在department_id、user_id等，需要进行lark_id的转换
	RecipientDetail *AuditRecipientDetail `json:"recipient_detail,omitempty"` // recipient 详情
}

type AuditRecipientEntityBuilder struct {
	recipientType       string // 接收者对象类型
	recipientTypeFlag   bool
	recipientValue      string // 接收者对象值，可能存在department_id、user_id等，需要进行lark_id的转换
	recipientValueFlag  bool
	recipientDetail     *AuditRecipientDetail // recipient 详情
	recipientDetailFlag bool
}

func NewAuditRecipientEntityBuilder() *AuditRecipientEntityBuilder {
	builder := &AuditRecipientEntityBuilder{}
	return builder
}

// 接收者对象类型
//
// 示例值：
func (builder *AuditRecipientEntityBuilder) RecipientType(recipientType string) *AuditRecipientEntityBuilder {
	builder.recipientType = recipientType
	builder.recipientTypeFlag = true
	return builder
}

// 接收者对象值，可能存在department_id、user_id等，需要进行lark_id的转换
//
// 示例值：
func (builder *AuditRecipientEntityBuilder) RecipientValue(recipientValue string) *AuditRecipientEntityBuilder {
	builder.recipientValue = recipientValue
	builder.recipientValueFlag = true
	return builder
}

// recipient 详情
//
// 示例值：
func (builder *AuditRecipientEntityBuilder) RecipientDetail(recipientDetail *AuditRecipientDetail) *AuditRecipientEntityBuilder {
	builder.recipientDetail = recipientDetail
	builder.recipientDetailFlag = true
	return builder
}

func (builder *AuditRecipientEntityBuilder) Build() *AuditRecipientEntity {
	req := &AuditRecipientEntity{}
	if builder.recipientTypeFlag {
		req.RecipientType = &builder.recipientType

	}
	if builder.recipientValueFlag {
		req.RecipientValue = &builder.recipientValue

	}
	if builder.recipientDetailFlag {
		req.RecipientDetail = builder.recipientDetail
	}
	return req
}

type AuditWebContext struct {
	UserAgent *string `json:"user_agent,omitempty"` // UA信息
	IP        *string `json:"IP,omitempty"`         // 本机IP
}

type AuditWebContextBuilder struct {
	userAgent     string // UA信息
	userAgentFlag bool
	iP            string // 本机IP
	iPFlag        bool
}

func NewAuditWebContextBuilder() *AuditWebContextBuilder {
	builder := &AuditWebContextBuilder{}
	return builder
}

// UA信息
//
// 示例值：
func (builder *AuditWebContextBuilder) UserAgent(userAgent string) *AuditWebContextBuilder {
	builder.userAgent = userAgent
	builder.userAgentFlag = true
	return builder
}

// 本机IP
//
// 示例值：
func (builder *AuditWebContextBuilder) IP(iP string) *AuditWebContextBuilder {
	builder.iP = iP
	builder.iPFlag = true
	return builder
}

func (builder *AuditWebContextBuilder) Build() *AuditWebContext {
	req := &AuditWebContext{}
	if builder.userAgentFlag {
		req.UserAgent = &builder.userAgent

	}
	if builder.iPFlag {
		req.IP = &builder.iP

	}
	return req
}

type Badge struct {
	Id              *string `json:"id,omitempty"`               // 租户内勋章的唯一标识，该值由系统随机生成。
	Name            *string `json:"name,omitempty"`             // 租户内唯一的勋章名称，最多30个字符。
	Explanation     *string `json:"explanation,omitempty"`      // 勋章的描述文案，最多100个字符。
	DetailImage     *string `json:"detail_image,omitempty"`     // 企业勋章的详情图Key。1.权限校验：非本租户上传的图片key，不能直接使用；2.时效校验：创建勋章，或者修改勋章图片key时，需使用1h内上传的图片key。
	ShowImage       *string `json:"show_image,omitempty"`       // 企业勋章的头像挂饰图Key。1.权限校验：非本租户上传的图片key，不能直接使用；2.时效校验：创建勋章，或者修改勋章图片key时，需使用1h内上传的图片key。
	I18nName        *I18n   `json:"i18n_name,omitempty"`        // 勋章的多语言名称，同name字段限制，最多30个字符。
	I18nExplanation *I18n   `json:"i18n_explanation,omitempty"` // 勋章的多语言描述文案，同explanation字段限制，最多100个字符。
}

type BadgeBuilder struct {
	id                  string // 租户内勋章的唯一标识，该值由系统随机生成。
	idFlag              bool
	name                string // 租户内唯一的勋章名称，最多30个字符。
	nameFlag            bool
	explanation         string // 勋章的描述文案，最多100个字符。
	explanationFlag     bool
	detailImage         string // 企业勋章的详情图Key。1.权限校验：非本租户上传的图片key，不能直接使用；2.时效校验：创建勋章，或者修改勋章图片key时，需使用1h内上传的图片key。
	detailImageFlag     bool
	showImage           string // 企业勋章的头像挂饰图Key。1.权限校验：非本租户上传的图片key，不能直接使用；2.时效校验：创建勋章，或者修改勋章图片key时，需使用1h内上传的图片key。
	showImageFlag       bool
	i18nName            *I18n // 勋章的多语言名称，同name字段限制，最多30个字符。
	i18nNameFlag        bool
	i18nExplanation     *I18n // 勋章的多语言描述文案，同explanation字段限制，最多100个字符。
	i18nExplanationFlag bool
}

func NewBadgeBuilder() *BadgeBuilder {
	builder := &BadgeBuilder{}
	return builder
}

// 租户内勋章的唯一标识，该值由系统随机生成。
//
// 示例值：m_MzfKDM
func (builder *BadgeBuilder) Id(id string) *BadgeBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 租户内唯一的勋章名称，最多30个字符。
//
// 示例值：激励勋章
func (builder *BadgeBuilder) Name(name string) *BadgeBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 勋章的描述文案，最多100个字符。
//
// 示例值：这枚勋章为了激励员工颁发。
func (builder *BadgeBuilder) Explanation(explanation string) *BadgeBuilder {
	builder.explanation = explanation
	builder.explanationFlag = true
	return builder
}

// 企业勋章的详情图Key。1.权限校验：非本租户上传的图片key，不能直接使用；2.时效校验：创建勋章，或者修改勋章图片key时，需使用1h内上传的图片key。
//
// 示例值：75a1949f-d9df-4b46-bc88-dacc51e88f3j
func (builder *BadgeBuilder) DetailImage(detailImage string) *BadgeBuilder {
	builder.detailImage = detailImage
	builder.detailImageFlag = true
	return builder
}

// 企业勋章的头像挂饰图Key。1.权限校验：非本租户上传的图片key，不能直接使用；2.时效校验：创建勋章，或者修改勋章图片key时，需使用1h内上传的图片key。
//
// 示例值：03daa74a-159f-49e9-963e-b6c4d76103fj
func (builder *BadgeBuilder) ShowImage(showImage string) *BadgeBuilder {
	builder.showImage = showImage
	builder.showImageFlag = true
	return builder
}

// 勋章的多语言名称，同name字段限制，最多30个字符。
//
// 示例值：{		 "zh_cn": "激励勋章",		 "en_us": "Incentive Medal",		 "ja_jp": "奨励メダル"	 }
func (builder *BadgeBuilder) I18nName(i18nName *I18n) *BadgeBuilder {
	builder.i18nName = i18nName
	builder.i18nNameFlag = true
	return builder
}

// 勋章的多语言描述文案，同explanation字段限制，最多100个字符。
//
// 示例值：{		 "zh_cn": "这枚勋章为了激励员工颁发。",		 "en_us": "This medal is awarded to motivate employees.",		 "ja_jp": "このメダルは、従業員のモチベーションを高めるために授与されます。"	 }
func (builder *BadgeBuilder) I18nExplanation(i18nExplanation *I18n) *BadgeBuilder {
	builder.i18nExplanation = i18nExplanation
	builder.i18nExplanationFlag = true
	return builder
}

func (builder *BadgeBuilder) Build() *Badge {
	req := &Badge{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.explanationFlag {
		req.Explanation = &builder.explanation

	}
	if builder.detailImageFlag {
		req.DetailImage = &builder.detailImage

	}
	if builder.showImageFlag {
		req.ShowImage = &builder.showImage

	}
	if builder.i18nNameFlag {
		req.I18nName = builder.i18nName
	}
	if builder.i18nExplanationFlag {
		req.I18nExplanation = builder.i18nExplanation
	}
	return req
}

type File struct {
	Title      *string `json:"title,omitempty"`        // 文档标题
	Type       *string `json:"type,omitempty"`         // 文档类型
	Owner      *User   `json:"owner,omitempty"`        // 文档所有者
	Size       *string `json:"size,omitempty"`         // 文档大小
	LastOpTime *string `json:"last_op_time,omitempty"` // 更新时间
	Status     *string `json:"status,omitempty"`       // 文档状态
	Token      *string `json:"token,omitempty"`        // 文档token
}

type FileBuilder struct {
	title          string // 文档标题
	titleFlag      bool
	type_          string // 文档类型
	typeFlag       bool
	owner          *User // 文档所有者
	ownerFlag      bool
	size           string // 文档大小
	sizeFlag       bool
	lastOpTime     string // 更新时间
	lastOpTimeFlag bool
	status         string // 文档状态
	statusFlag     bool
	token          string // 文档token
	tokenFlag      bool
}

func NewFileBuilder() *FileBuilder {
	builder := &FileBuilder{}
	return builder
}

// 文档标题
//
// 示例值：文件管理综述
func (builder *FileBuilder) Title(title string) *FileBuilder {
	builder.title = title
	builder.titleFlag = true
	return builder
}

// 文档类型
//
// 示例值：doc
func (builder *FileBuilder) Type(type_ string) *FileBuilder {
	builder.type_ = type_
	builder.typeFlag = true
	return builder
}

// 文档所有者
//
// 示例值：
func (builder *FileBuilder) Owner(owner *User) *FileBuilder {
	builder.owner = owner
	builder.ownerFlag = true
	return builder
}

// 文档大小
//
// 示例值：1024
func (builder *FileBuilder) Size(size string) *FileBuilder {
	builder.size = size
	builder.sizeFlag = true
	return builder
}

// 更新时间
//
// 示例值：1649419092
func (builder *FileBuilder) LastOpTime(lastOpTime string) *FileBuilder {
	builder.lastOpTime = lastOpTime
	builder.lastOpTimeFlag = true
	return builder
}

// 文档状态
//
// 示例值：1
func (builder *FileBuilder) Status(status string) *FileBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

// 文档token
//
// 示例值：doxbcOIyUhrRBWSKpBGfzefQgHe
func (builder *FileBuilder) Token(token string) *FileBuilder {
	builder.token = token
	builder.tokenFlag = true
	return builder
}

func (builder *FileBuilder) Build() *File {
	req := &File{}
	if builder.titleFlag {
		req.Title = &builder.title

	}
	if builder.typeFlag {
		req.Type = &builder.type_

	}
	if builder.ownerFlag {
		req.Owner = builder.owner
	}
	if builder.sizeFlag {
		req.Size = &builder.size

	}
	if builder.lastOpTimeFlag {
		req.LastOpTime = &builder.lastOpTime

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.tokenFlag {
		req.Token = &builder.token

	}
	return req
}

type FileList struct {
	Files []*File `json:"files,omitempty"` // 文档token
}

type FileListBuilder struct {
	files     []*File // 文档token
	filesFlag bool
}

func NewFileListBuilder() *FileListBuilder {
	builder := &FileListBuilder{}
	return builder
}

// 文档token
//
// 示例值：
func (builder *FileListBuilder) Files(files []*File) *FileListBuilder {
	builder.files = files
	builder.filesFlag = true
	return builder
}

func (builder *FileListBuilder) Build() *FileList {
	req := &FileList{}
	if builder.filesFlag {
		req.Files = builder.files
	}
	return req
}

type Grant struct {
	Id            *string     `json:"id,omitempty"`             // 租户内授予名单的唯一标识，该值由系统随机生成。
	BadgeId       *string     `json:"badge_id,omitempty"`       // 企业勋章的唯一ID
	Name          *string     `json:"name,omitempty"`           // 勋章下唯一的授予事项，最多100个字符。
	GrantType     *int        `json:"grant_type,omitempty"`     // 授予名单类型
	TimeZone      *string     `json:"time_zone,omitempty"`      // 授予名单的生效时间对应的时区，用于检查RuleDetail的时间戳的取值是否规范，取值范围为TZ database name
	RuleDetail    *RuleDetail `json:"rule_detail,omitempty"`    // 规则详情
	IsGrantAll    *bool       `json:"is_grant_all,omitempty"`   // 是否授予给全员。1.为false时，需要关联1~500个用户群体。2.为true时，不可关联用户、用户组、部门。
	UserIds       []string    `json:"user_ids,omitempty"`       // 授予的用户ID列表，授予名单列表接口返回结果中不返回该字段，只在详情接口返回
	DepartmentIds []string    `json:"department_ids,omitempty"` // 授予的部门ID列表，授予名单列表接口返回结果中不返回该字段，只在详情接口返回
	GroupIds      []string    `json:"group_ids,omitempty"`      // 授予的用户组ID列表，授予名单列表接口返回结果中不返回该字段，只在详情接口返回
}

type GrantBuilder struct {
	id                string // 租户内授予名单的唯一标识，该值由系统随机生成。
	idFlag            bool
	badgeId           string // 企业勋章的唯一ID
	badgeIdFlag       bool
	name              string // 勋章下唯一的授予事项，最多100个字符。
	nameFlag          bool
	grantType         int // 授予名单类型
	grantTypeFlag     bool
	timeZone          string // 授予名单的生效时间对应的时区，用于检查RuleDetail的时间戳的取值是否规范，取值范围为TZ database name
	timeZoneFlag      bool
	ruleDetail        *RuleDetail // 规则详情
	ruleDetailFlag    bool
	isGrantAll        bool // 是否授予给全员。1.为false时，需要关联1~500个用户群体。2.为true时，不可关联用户、用户组、部门。
	isGrantAllFlag    bool
	userIds           []string // 授予的用户ID列表，授予名单列表接口返回结果中不返回该字段，只在详情接口返回
	userIdsFlag       bool
	departmentIds     []string // 授予的部门ID列表，授予名单列表接口返回结果中不返回该字段，只在详情接口返回
	departmentIdsFlag bool
	groupIds          []string // 授予的用户组ID列表，授予名单列表接口返回结果中不返回该字段，只在详情接口返回
	groupIdsFlag      bool
}

func NewGrantBuilder() *GrantBuilder {
	builder := &GrantBuilder{}
	return builder
}

// 租户内授予名单的唯一标识，该值由系统随机生成。
//
// 示例值：g_49Z7CQ
func (builder *GrantBuilder) Id(id string) *GrantBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

// 企业勋章的唯一ID
//
// 示例值：m_qTR2HM
func (builder *GrantBuilder) BadgeId(badgeId string) *GrantBuilder {
	builder.badgeId = badgeId
	builder.badgeIdFlag = true
	return builder
}

// 勋章下唯一的授予事项，最多100个字符。
//
// 示例值：激励勋章的授予名单
func (builder *GrantBuilder) Name(name string) *GrantBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 授予名单类型
//
// 示例值：0
func (builder *GrantBuilder) GrantType(grantType int) *GrantBuilder {
	builder.grantType = grantType
	builder.grantTypeFlag = true
	return builder
}

// 授予名单的生效时间对应的时区，用于检查RuleDetail的时间戳的取值是否规范，取值范围为TZ database name
//
// 示例值：Asia/Shanghai
func (builder *GrantBuilder) TimeZone(timeZone string) *GrantBuilder {
	builder.timeZone = timeZone
	builder.timeZoneFlag = true
	return builder
}

// 规则详情
//
// 示例值：
func (builder *GrantBuilder) RuleDetail(ruleDetail *RuleDetail) *GrantBuilder {
	builder.ruleDetail = ruleDetail
	builder.ruleDetailFlag = true
	return builder
}

// 是否授予给全员。1.为false时，需要关联1~500个用户群体。2.为true时，不可关联用户、用户组、部门。
//
// 示例值：false
func (builder *GrantBuilder) IsGrantAll(isGrantAll bool) *GrantBuilder {
	builder.isGrantAll = isGrantAll
	builder.isGrantAllFlag = true
	return builder
}

// 授予的用户ID列表，授予名单列表接口返回结果中不返回该字段，只在详情接口返回
//
// 示例值：[u273y71]
func (builder *GrantBuilder) UserIds(userIds []string) *GrantBuilder {
	builder.userIds = userIds
	builder.userIdsFlag = true
	return builder
}

// 授予的部门ID列表，授予名单列表接口返回结果中不返回该字段，只在详情接口返回
//
// 示例值：[h121921]
func (builder *GrantBuilder) DepartmentIds(departmentIds []string) *GrantBuilder {
	builder.departmentIds = departmentIds
	builder.departmentIdsFlag = true
	return builder
}

// 授予的用户组ID列表，授予名单列表接口返回结果中不返回该字段，只在详情接口返回
//
// 示例值：[g122817]
func (builder *GrantBuilder) GroupIds(groupIds []string) *GrantBuilder {
	builder.groupIds = groupIds
	builder.groupIdsFlag = true
	return builder
}

func (builder *GrantBuilder) Build() *Grant {
	req := &Grant{}
	if builder.idFlag {
		req.Id = &builder.id

	}
	if builder.badgeIdFlag {
		req.BadgeId = &builder.badgeId

	}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.grantTypeFlag {
		req.GrantType = &builder.grantType

	}
	if builder.timeZoneFlag {
		req.TimeZone = &builder.timeZone

	}
	if builder.ruleDetailFlag {
		req.RuleDetail = builder.ruleDetail
	}
	if builder.isGrantAllFlag {
		req.IsGrantAll = &builder.isGrantAll

	}
	if builder.userIdsFlag {
		req.UserIds = builder.userIds
	}
	if builder.departmentIdsFlag {
		req.DepartmentIds = builder.departmentIds
	}
	if builder.groupIdsFlag {
		req.GroupIds = builder.groupIds
	}
	return req
}

type I18n struct {
	ZhCn *string `json:"zh_cn,omitempty"` // 中文文案
	EnUs *string `json:"en_us,omitempty"` // 英文文案
	JaJp *string `json:"ja_jp,omitempty"` // 日文文案
}

type I18nBuilder struct {
	zhCn     string // 中文文案
	zhCnFlag bool
	enUs     string // 英文文案
	enUsFlag bool
	jaJp     string // 日文文案
	jaJpFlag bool
}

func NewI18nBuilder() *I18nBuilder {
	builder := &I18nBuilder{}
	return builder
}

// 中文文案
//
// 示例值：激励勋章
func (builder *I18nBuilder) ZhCn(zhCn string) *I18nBuilder {
	builder.zhCn = zhCn
	builder.zhCnFlag = true
	return builder
}

// 英文文案
//
// 示例值：Incentive Medal
func (builder *I18nBuilder) EnUs(enUs string) *I18nBuilder {
	builder.enUs = enUs
	builder.enUsFlag = true
	return builder
}

// 日文文案
//
// 示例值：奨励メダル
func (builder *I18nBuilder) JaJp(jaJp string) *I18nBuilder {
	builder.jaJp = jaJp
	builder.jaJpFlag = true
	return builder
}

func (builder *I18nBuilder) Build() *I18n {
	req := &I18n{}
	if builder.zhCnFlag {
		req.ZhCn = &builder.zhCn

	}
	if builder.enUsFlag {
		req.EnUs = &builder.enUs

	}
	if builder.jaJpFlag {
		req.JaJp = &builder.jaJp

	}
	return req
}

type Password struct {
	EntEmailPassword *string `json:"ent_email_password,omitempty"` // 企业邮箱密码
}

type PasswordBuilder struct {
	entEmailPassword     string // 企业邮箱密码
	entEmailPasswordFlag bool
}

func NewPasswordBuilder() *PasswordBuilder {
	builder := &PasswordBuilder{}
	return builder
}

// 企业邮箱密码
//
// 示例值：abcd*efg
func (builder *PasswordBuilder) EntEmailPassword(entEmailPassword string) *PasswordBuilder {
	builder.entEmailPassword = entEmailPassword
	builder.entEmailPasswordFlag = true
	return builder
}

func (builder *PasswordBuilder) Build() *Password {
	req := &Password{}
	if builder.entEmailPasswordFlag {
		req.EntEmailPassword = &builder.entEmailPassword

	}
	return req
}

type RuleDetail struct {
	EffectiveTime   *string `json:"effective_time,omitempty"`   // 开始生效的时间戳。1.手动设置有效期类型勋章，配置有效期限需要配置该字段；2.时间戳必须是所在时区当天的零点时间戳，如时区为Asia/Shanghai时区时的1649606400
	ExpirationTime  *string `json:"expiration_time,omitempty"`  // 结束生效的时间戳。1.手动设置有效期类型勋章，配置有效期限需要配置该字段；2.最大值：不得超过effective_time+100 年；3.非永久有效：时间戳必须是所在时区当天的23:59:59时间戳，如时区为Asia/Shanghai时区时的1649692799；4.永久有效：传值为0即可
	Anniversary     *int    `json:"anniversary,omitempty"`      // 入职周年日。根据入职时间发放类型勋章，需要配置该字段。
	EffectivePeriod *int    `json:"effective_period,omitempty"` // 有效期限。根据入职时间发放类型勋章，需要配置该字段。
}

type RuleDetailBuilder struct {
	effectiveTime       string // 开始生效的时间戳。1.手动设置有效期类型勋章，配置有效期限需要配置该字段；2.时间戳必须是所在时区当天的零点时间戳，如时区为Asia/Shanghai时区时的1649606400
	effectiveTimeFlag   bool
	expirationTime      string // 结束生效的时间戳。1.手动设置有效期类型勋章，配置有效期限需要配置该字段；2.最大值：不得超过effective_time+100 年；3.非永久有效：时间戳必须是所在时区当天的23:59:59时间戳，如时区为Asia/Shanghai时区时的1649692799；4.永久有效：传值为0即可
	expirationTimeFlag  bool
	anniversary         int // 入职周年日。根据入职时间发放类型勋章，需要配置该字段。
	anniversaryFlag     bool
	effectivePeriod     int // 有效期限。根据入职时间发放类型勋章，需要配置该字段。
	effectivePeriodFlag bool
}

func NewRuleDetailBuilder() *RuleDetailBuilder {
	builder := &RuleDetailBuilder{}
	return builder
}

// 开始生效的时间戳。1.手动设置有效期类型勋章，配置有效期限需要配置该字段；2.时间戳必须是所在时区当天的零点时间戳，如时区为Asia/Shanghai时区时的1649606400
//
// 示例值：1649606400
func (builder *RuleDetailBuilder) EffectiveTime(effectiveTime string) *RuleDetailBuilder {
	builder.effectiveTime = effectiveTime
	builder.effectiveTimeFlag = true
	return builder
}

// 结束生效的时间戳。1.手动设置有效期类型勋章，配置有效期限需要配置该字段；2.最大值：不得超过effective_time+100 年；3.非永久有效：时间戳必须是所在时区当天的23:59:59时间戳，如时区为Asia/Shanghai时区时的1649692799；4.永久有效：传值为0即可
//
// 示例值：1649692799
func (builder *RuleDetailBuilder) ExpirationTime(expirationTime string) *RuleDetailBuilder {
	builder.expirationTime = expirationTime
	builder.expirationTimeFlag = true
	return builder
}

// 入职周年日。根据入职时间发放类型勋章，需要配置该字段。
//
// 示例值：1
func (builder *RuleDetailBuilder) Anniversary(anniversary int) *RuleDetailBuilder {
	builder.anniversary = anniversary
	builder.anniversaryFlag = true
	return builder
}

// 有效期限。根据入职时间发放类型勋章，需要配置该字段。
//
// 示例值：1
func (builder *RuleDetailBuilder) EffectivePeriod(effectivePeriod int) *RuleDetailBuilder {
	builder.effectivePeriod = effectivePeriod
	builder.effectivePeriodFlag = true
	return builder
}

func (builder *RuleDetailBuilder) Build() *RuleDetail {
	req := &RuleDetail{}
	if builder.effectiveTimeFlag {
		req.EffectiveTime = &builder.effectiveTime

	}
	if builder.expirationTimeFlag {
		req.ExpirationTime = &builder.expirationTime

	}
	if builder.anniversaryFlag {
		req.Anniversary = &builder.anniversary

	}
	if builder.effectivePeriodFlag {
		req.EffectivePeriod = &builder.effectivePeriod

	}
	return req
}

type SplashPageStat struct {
	Date                      *string `json:"date,omitempty"`                        // 日期
	SplashId                  *string `json:"splash_id,omitempty"`                   // 开屏素材id
	ImpressionCount           *int    `json:"impression_count,omitempty"`            // 曝光数
	ClickCount                *int    `json:"click_count,omitempty"`                 // 点击数
	SkipCount                 *int    `json:"skip_count,omitempty"`                  // 点击跳过数
	ImpressionCountAccumulate *int    `json:"impression_count_accumulate,omitempty"` // 累计曝光
	ClickCountAccumulate      *int    `json:"click_count_accumulate,omitempty"`      // 累计点击
	SkipCountAccumulate       *int    `json:"skip_count_accumulate,omitempty"`       // 累积点击跳过数
}

type SplashPageStatBuilder struct {
	date                          string // 日期
	dateFlag                      bool
	splashId                      string // 开屏素材id
	splashIdFlag                  bool
	impressionCount               int // 曝光数
	impressionCountFlag           bool
	clickCount                    int // 点击数
	clickCountFlag                bool
	skipCount                     int // 点击跳过数
	skipCountFlag                 bool
	impressionCountAccumulate     int // 累计曝光
	impressionCountAccumulateFlag bool
	clickCountAccumulate          int // 累计点击
	clickCountAccumulateFlag      bool
	skipCountAccumulate           int // 累积点击跳过数
	skipCountAccumulateFlag       bool
}

func NewSplashPageStatBuilder() *SplashPageStatBuilder {
	builder := &SplashPageStatBuilder{}
	return builder
}

// 日期
//
// 示例值：
func (builder *SplashPageStatBuilder) Date(date string) *SplashPageStatBuilder {
	builder.date = date
	builder.dateFlag = true
	return builder
}

// 开屏素材id
//
// 示例值：
func (builder *SplashPageStatBuilder) SplashId(splashId string) *SplashPageStatBuilder {
	builder.splashId = splashId
	builder.splashIdFlag = true
	return builder
}

// 曝光数
//
// 示例值：
func (builder *SplashPageStatBuilder) ImpressionCount(impressionCount int) *SplashPageStatBuilder {
	builder.impressionCount = impressionCount
	builder.impressionCountFlag = true
	return builder
}

// 点击数
//
// 示例值：
func (builder *SplashPageStatBuilder) ClickCount(clickCount int) *SplashPageStatBuilder {
	builder.clickCount = clickCount
	builder.clickCountFlag = true
	return builder
}

// 点击跳过数
//
// 示例值：
func (builder *SplashPageStatBuilder) SkipCount(skipCount int) *SplashPageStatBuilder {
	builder.skipCount = skipCount
	builder.skipCountFlag = true
	return builder
}

// 累计曝光
//
// 示例值：
func (builder *SplashPageStatBuilder) ImpressionCountAccumulate(impressionCountAccumulate int) *SplashPageStatBuilder {
	builder.impressionCountAccumulate = impressionCountAccumulate
	builder.impressionCountAccumulateFlag = true
	return builder
}

// 累计点击
//
// 示例值：
func (builder *SplashPageStatBuilder) ClickCountAccumulate(clickCountAccumulate int) *SplashPageStatBuilder {
	builder.clickCountAccumulate = clickCountAccumulate
	builder.clickCountAccumulateFlag = true
	return builder
}

// 累积点击跳过数
//
// 示例值：
func (builder *SplashPageStatBuilder) SkipCountAccumulate(skipCountAccumulate int) *SplashPageStatBuilder {
	builder.skipCountAccumulate = skipCountAccumulate
	builder.skipCountAccumulateFlag = true
	return builder
}

func (builder *SplashPageStatBuilder) Build() *SplashPageStat {
	req := &SplashPageStat{}
	if builder.dateFlag {
		req.Date = &builder.date

	}
	if builder.splashIdFlag {
		req.SplashId = &builder.splashId

	}
	if builder.impressionCountFlag {
		req.ImpressionCount = &builder.impressionCount

	}
	if builder.clickCountFlag {
		req.ClickCount = &builder.clickCount

	}
	if builder.skipCountFlag {
		req.SkipCount = &builder.skipCount

	}
	if builder.impressionCountAccumulateFlag {
		req.ImpressionCountAccumulate = &builder.impressionCountAccumulate

	}
	if builder.clickCountAccumulateFlag {
		req.ClickCountAccumulate = &builder.clickCountAccumulate

	}
	if builder.skipCountAccumulateFlag {
		req.SkipCountAccumulate = &builder.skipCountAccumulate

	}
	return req
}

type Task struct {
	OriginalUserId    *string `json:"original_user_id,omitempty"`    // 文档原所有者ID
	TargetOwnerId     *string `json:"target_owner_id,omitempty"`     // 目标用户ID
	FileList          []*File `json:"file_list,omitempty"`           // 恢复文件列表
	TaskId            *string `json:"task_id,omitempty"`             // 任务id
	Status            *int    `json:"status,omitempty"`              // 任务状态
	OriginalUserEmail *string `json:"original_user_email,omitempty"` // 文档原所有者邮箱
	TargetOwnerEmail  *string `json:"target_owner_email,omitempty"`  // 文档新所有者邮箱
}

type TaskBuilder struct {
	originalUserId        string // 文档原所有者ID
	originalUserIdFlag    bool
	targetOwnerId         string // 目标用户ID
	targetOwnerIdFlag     bool
	fileList              []*File // 恢复文件列表
	fileListFlag          bool
	taskId                string // 任务id
	taskIdFlag            bool
	status                int // 任务状态
	statusFlag            bool
	originalUserEmail     string // 文档原所有者邮箱
	originalUserEmailFlag bool
	targetOwnerEmail      string // 文档新所有者邮箱
	targetOwnerEmailFlag  bool
}

func NewTaskBuilder() *TaskBuilder {
	builder := &TaskBuilder{}
	return builder
}

// 文档原所有者ID
//
// 示例值：
func (builder *TaskBuilder) OriginalUserId(originalUserId string) *TaskBuilder {
	builder.originalUserId = originalUserId
	builder.originalUserIdFlag = true
	return builder
}

// 目标用户ID
//
// 示例值：
func (builder *TaskBuilder) TargetOwnerId(targetOwnerId string) *TaskBuilder {
	builder.targetOwnerId = targetOwnerId
	builder.targetOwnerIdFlag = true
	return builder
}

// 恢复文件列表
//
// 示例值：
func (builder *TaskBuilder) FileList(fileList []*File) *TaskBuilder {
	builder.fileList = fileList
	builder.fileListFlag = true
	return builder
}

// 任务id
//
// 示例值：
func (builder *TaskBuilder) TaskId(taskId string) *TaskBuilder {
	builder.taskId = taskId
	builder.taskIdFlag = true
	return builder
}

// 任务状态
//
// 示例值：1,2
func (builder *TaskBuilder) Status(status int) *TaskBuilder {
	builder.status = status
	builder.statusFlag = true
	return builder
}

// 文档原所有者邮箱
//
// 示例值：
func (builder *TaskBuilder) OriginalUserEmail(originalUserEmail string) *TaskBuilder {
	builder.originalUserEmail = originalUserEmail
	builder.originalUserEmailFlag = true
	return builder
}

// 文档新所有者邮箱
//
// 示例值：
func (builder *TaskBuilder) TargetOwnerEmail(targetOwnerEmail string) *TaskBuilder {
	builder.targetOwnerEmail = targetOwnerEmail
	builder.targetOwnerEmailFlag = true
	return builder
}

func (builder *TaskBuilder) Build() *Task {
	req := &Task{}
	if builder.originalUserIdFlag {
		req.OriginalUserId = &builder.originalUserId

	}
	if builder.targetOwnerIdFlag {
		req.TargetOwnerId = &builder.targetOwnerId

	}
	if builder.fileListFlag {
		req.FileList = builder.fileList
	}
	if builder.taskIdFlag {
		req.TaskId = &builder.taskId

	}
	if builder.statusFlag {
		req.Status = &builder.status

	}
	if builder.originalUserEmailFlag {
		req.OriginalUserEmail = &builder.originalUserEmail

	}
	if builder.targetOwnerEmailFlag {
		req.TargetOwnerEmail = &builder.targetOwnerEmail

	}
	return req
}

type User struct {
	Name   *string `json:"name,omitempty"`   // 用户名称
	Avatar *string `json:"avatar,omitempty"` // 用户头像
	Id     *string `json:"id,omitempty"`     // 用户ID
}

type UserBuilder struct {
	name       string // 用户名称
	nameFlag   bool
	avatar     string // 用户头像
	avatarFlag bool
	id         string // 用户ID
	idFlag     bool
}

func NewUserBuilder() *UserBuilder {
	builder := &UserBuilder{}
	return builder
}

// 用户名称
//
// 示例值：张三
func (builder *UserBuilder) Name(name string) *UserBuilder {
	builder.name = name
	builder.nameFlag = true
	return builder
}

// 用户头像
//
// 示例值：https://internal-api-lark-file.feishu-boe.cn/static-resource/v1/d50ddc01-5ddb-4431-950e-452637e4a09j~?image_size=72x72&cut_type=default-face&quality=&format=png&sticker_format=.webp
func (builder *UserBuilder) Avatar(avatar string) *UserBuilder {
	builder.avatar = avatar
	builder.avatarFlag = true
	return builder
}

// 用户ID
//
// 示例值：6994699009591869459
func (builder *UserBuilder) Id(id string) *UserBuilder {
	builder.id = id
	builder.idFlag = true
	return builder
}

func (builder *UserBuilder) Build() *User {
	req := &User{}
	if builder.nameFlag {
		req.Name = &builder.name

	}
	if builder.avatarFlag {
		req.Avatar = &builder.avatar

	}
	if builder.idFlag {
		req.Id = &builder.id

	}
	return req
}

type UserAnnualReport struct {
	Year2021 *UserReport2021 `json:"year_2021,omitempty"` // 2021用户年度报告
	Year2022 *UserReport2022 `json:"year_2022,omitempty"` // 2022用户年度报告
}

type UserAnnualReportBuilder struct {
	year2021     *UserReport2021 // 2021用户年度报告
	year2021Flag bool
	year2022     *UserReport2022 // 2022用户年度报告
	year2022Flag bool
}

func NewUserAnnualReportBuilder() *UserAnnualReportBuilder {
	builder := &UserAnnualReportBuilder{}
	return builder
}

// 2021用户年度报告
//
// 示例值：
func (builder *UserAnnualReportBuilder) Year2021(year2021 *UserReport2021) *UserAnnualReportBuilder {
	builder.year2021 = year2021
	builder.year2021Flag = true
	return builder
}

// 2022用户年度报告
//
// 示例值：
func (builder *UserAnnualReportBuilder) Year2022(year2022 *UserReport2022) *UserAnnualReportBuilder {
	builder.year2022 = year2022
	builder.year2022Flag = true
	return builder
}

func (builder *UserAnnualReportBuilder) Build() *UserAnnualReport {
	req := &UserAnnualReport{}
	if builder.year2021Flag {
		req.Year2021 = builder.year2021
	}
	if builder.year2022Flag {
		req.Year2022 = builder.year2022
	}
	return req
}

type UserReport2021 struct {
	ActiveDayCount                *int     `json:"active_day_count,omitempty"`                 // 活跃时长> 0的天数
	BusyWeek                      *string  `json:"busy_week,omitempty"`                        // 工作日平均活跃最长的一周，「2021W10」格式
	P2pChatCount                  *string  `json:"p2p_chat_count,omitempty"`                   // 单聊过的人数（仅限普通单聊，不包括bot等，不限本人是否有过发送消息）
	TalkedChatCount               *string  `json:"talked_chat_count,omitempty"`                // 发过言的群数
	FavoriteEmoji                 *string  `json:"favorite_emoji,omitempty"`                   // 任何场景下发的表情次数最多的一个表情
	ReactionCount                 *string  `json:"reaction_count,omitempty"`                   // 本人使用快捷表情的次数
	ConferenceCreateCount         *string  `json:"conference_create_count,omitempty"`          // 创建了日程并发起了视频会议的次数
	TotalPartiCount               *string  `json:"total_parti_count,omitempty"`                // 创建日程中涉及到的总人次
	MinutesObjectCount            *string  `json:"minutes_object_count,omitempty"`             // 录制了多少篇妙记
	MinutesDuration               *float64 `json:"minutes_duration,omitempty"`                 // 录制妙记累积时长（分钟）
	CreateEditFileCount           *string  `json:"create_edit_file_count,omitempty"`           // 创建及参与协作的文档篇数
	CreateFileCount               *string  `json:"create_file_count,omitempty"`                // 创建文档数
	CooperateEditFileCount        *string  `json:"cooperate_edit_file_count,omitempty"`        // 参与协作文档数
	LikeRecordCount               *string  `json:"like_record_count,omitempty"`                // 所属的文档共获得多少个点赞
	OkrCumOCount                  *string  `json:"okr_cum_o_count,omitempty"`                  // 填写过的O的数量
	OkrCumKrCount                 *string  `json:"okr_cum_kr_count,omitempty"`                 // 填写过的KR的数量
	OkrAlignedUserRankfirst       *string  `json:"okr_aligned_user_rankfirst,omitempty"`       // 被对齐次数最多的用户
	ApprovalStartCount            *string  `json:"approval_start_count,omitempty"`             // 发起的审批流程数
	ApprovalExecuteCount          *string  `json:"approval_execute_count,omitempty"`           // 处理的审批流程数
	ApprovalRelationUserRankfirst *string  `json:"approval_relation_user_rankfirst,omitempty"` // 审批协作次数最多的用户（在同一个审批实例中出现过即算为审批协作）
	UserId                        *string  `json:"user_id,omitempty"`                          // 用户id
	BusyWeekSumDuration           *string  `json:"busy_week_sum_duration,omitempty"`           // 工作日平均活跃最长的一周 的总活跃时长（分钟）
	BusyWeekMdate                 *string  `json:"busy_week_mdate,omitempty"`                  // 工作日平均活跃最长的一周 的最早工作日
	BusyWeekActDays               *int     `json:"busy_week_act_days,omitempty"`               // 工作日平均活跃最长的一周 有活跃的工作日天数
	CreateReadUserCount           *string  `json:"create_read_user_count,omitempty"`           // 创建的文档被XXX人阅读过
}

type UserReport2021Builder struct {
	activeDayCount                    int // 活跃时长> 0的天数
	activeDayCountFlag                bool
	busyWeek                          string // 工作日平均活跃最长的一周，「2021W10」格式
	busyWeekFlag                      bool
	p2pChatCount                      string // 单聊过的人数（仅限普通单聊，不包括bot等，不限本人是否有过发送消息）
	p2pChatCountFlag                  bool
	talkedChatCount                   string // 发过言的群数
	talkedChatCountFlag               bool
	favoriteEmoji                     string // 任何场景下发的表情次数最多的一个表情
	favoriteEmojiFlag                 bool
	reactionCount                     string // 本人使用快捷表情的次数
	reactionCountFlag                 bool
	conferenceCreateCount             string // 创建了日程并发起了视频会议的次数
	conferenceCreateCountFlag         bool
	totalPartiCount                   string // 创建日程中涉及到的总人次
	totalPartiCountFlag               bool
	minutesObjectCount                string // 录制了多少篇妙记
	minutesObjectCountFlag            bool
	minutesDuration                   float64 // 录制妙记累积时长（分钟）
	minutesDurationFlag               bool
	createEditFileCount               string // 创建及参与协作的文档篇数
	createEditFileCountFlag           bool
	createFileCount                   string // 创建文档数
	createFileCountFlag               bool
	cooperateEditFileCount            string // 参与协作文档数
	cooperateEditFileCountFlag        bool
	likeRecordCount                   string // 所属的文档共获得多少个点赞
	likeRecordCountFlag               bool
	okrCumOCount                      string // 填写过的O的数量
	okrCumOCountFlag                  bool
	okrCumKrCount                     string // 填写过的KR的数量
	okrCumKrCountFlag                 bool
	okrAlignedUserRankfirst           string // 被对齐次数最多的用户
	okrAlignedUserRankfirstFlag       bool
	approvalStartCount                string // 发起的审批流程数
	approvalStartCountFlag            bool
	approvalExecuteCount              string // 处理的审批流程数
	approvalExecuteCountFlag          bool
	approvalRelationUserRankfirst     string // 审批协作次数最多的用户（在同一个审批实例中出现过即算为审批协作）
	approvalRelationUserRankfirstFlag bool
	userId                            string // 用户id
	userIdFlag                        bool
	busyWeekSumDuration               string // 工作日平均活跃最长的一周 的总活跃时长（分钟）
	busyWeekSumDurationFlag           bool
	busyWeekMdate                     string // 工作日平均活跃最长的一周 的最早工作日
	busyWeekMdateFlag                 bool
	busyWeekActDays                   int // 工作日平均活跃最长的一周 有活跃的工作日天数
	busyWeekActDaysFlag               bool
	createReadUserCount               string // 创建的文档被XXX人阅读过
	createReadUserCountFlag           bool
}

func NewUserReport2021Builder() *UserReport2021Builder {
	builder := &UserReport2021Builder{}
	return builder
}

// 活跃时长> 0的天数
//
// 示例值：111
func (builder *UserReport2021Builder) ActiveDayCount(activeDayCount int) *UserReport2021Builder {
	builder.activeDayCount = activeDayCount
	builder.activeDayCountFlag = true
	return builder
}

// 工作日平均活跃最长的一周，「2021W10」格式
//
// 示例值：2021W33
func (builder *UserReport2021Builder) BusyWeek(busyWeek string) *UserReport2021Builder {
	builder.busyWeek = busyWeek
	builder.busyWeekFlag = true
	return builder
}

// 单聊过的人数（仅限普通单聊，不包括bot等，不限本人是否有过发送消息）
//
// 示例值：3
func (builder *UserReport2021Builder) P2pChatCount(p2pChatCount string) *UserReport2021Builder {
	builder.p2pChatCount = p2pChatCount
	builder.p2pChatCountFlag = true
	return builder
}

// 发过言的群数
//
// 示例值：4
func (builder *UserReport2021Builder) TalkedChatCount(talkedChatCount string) *UserReport2021Builder {
	builder.talkedChatCount = talkedChatCount
	builder.talkedChatCountFlag = true
	return builder
}

// 任何场景下发的表情次数最多的一个表情
//
// 示例值：MUSCLE
func (builder *UserReport2021Builder) FavoriteEmoji(favoriteEmoji string) *UserReport2021Builder {
	builder.favoriteEmoji = favoriteEmoji
	builder.favoriteEmojiFlag = true
	return builder
}

// 本人使用快捷表情的次数
//
// 示例值：341
func (builder *UserReport2021Builder) ReactionCount(reactionCount string) *UserReport2021Builder {
	builder.reactionCount = reactionCount
	builder.reactionCountFlag = true
	return builder
}

// 创建了日程并发起了视频会议的次数
//
// 示例值：78
func (builder *UserReport2021Builder) ConferenceCreateCount(conferenceCreateCount string) *UserReport2021Builder {
	builder.conferenceCreateCount = conferenceCreateCount
	builder.conferenceCreateCountFlag = true
	return builder
}

// 创建日程中涉及到的总人次
//
// 示例值：1
func (builder *UserReport2021Builder) TotalPartiCount(totalPartiCount string) *UserReport2021Builder {
	builder.totalPartiCount = totalPartiCount
	builder.totalPartiCountFlag = true
	return builder
}

// 录制了多少篇妙记
//
// 示例值：0
func (builder *UserReport2021Builder) MinutesObjectCount(minutesObjectCount string) *UserReport2021Builder {
	builder.minutesObjectCount = minutesObjectCount
	builder.minutesObjectCountFlag = true
	return builder
}

// 录制妙记累积时长（分钟）
//
// 示例值：0
func (builder *UserReport2021Builder) MinutesDuration(minutesDuration float64) *UserReport2021Builder {
	builder.minutesDuration = minutesDuration
	builder.minutesDurationFlag = true
	return builder
}

// 创建及参与协作的文档篇数
//
// 示例值：0
func (builder *UserReport2021Builder) CreateEditFileCount(createEditFileCount string) *UserReport2021Builder {
	builder.createEditFileCount = createEditFileCount
	builder.createEditFileCountFlag = true
	return builder
}

// 创建文档数
//
// 示例值：0
func (builder *UserReport2021Builder) CreateFileCount(createFileCount string) *UserReport2021Builder {
	builder.createFileCount = createFileCount
	builder.createFileCountFlag = true
	return builder
}

// 参与协作文档数
//
// 示例值：0
func (builder *UserReport2021Builder) CooperateEditFileCount(cooperateEditFileCount string) *UserReport2021Builder {
	builder.cooperateEditFileCount = cooperateEditFileCount
	builder.cooperateEditFileCountFlag = true
	return builder
}

// 所属的文档共获得多少个点赞
//
// 示例值：0
func (builder *UserReport2021Builder) LikeRecordCount(likeRecordCount string) *UserReport2021Builder {
	builder.likeRecordCount = likeRecordCount
	builder.likeRecordCountFlag = true
	return builder
}

// 填写过的O的数量
//
// 示例值：0
func (builder *UserReport2021Builder) OkrCumOCount(okrCumOCount string) *UserReport2021Builder {
	builder.okrCumOCount = okrCumOCount
	builder.okrCumOCountFlag = true
	return builder
}

// 填写过的KR的数量
//
// 示例值：0
func (builder *UserReport2021Builder) OkrCumKrCount(okrCumKrCount string) *UserReport2021Builder {
	builder.okrCumKrCount = okrCumKrCount
	builder.okrCumKrCountFlag = true
	return builder
}

// 被对齐次数最多的用户
//
// 示例值：ou_XXXXXXX
func (builder *UserReport2021Builder) OkrAlignedUserRankfirst(okrAlignedUserRankfirst string) *UserReport2021Builder {
	builder.okrAlignedUserRankfirst = okrAlignedUserRankfirst
	builder.okrAlignedUserRankfirstFlag = true
	return builder
}

// 发起的审批流程数
//
// 示例值：0
func (builder *UserReport2021Builder) ApprovalStartCount(approvalStartCount string) *UserReport2021Builder {
	builder.approvalStartCount = approvalStartCount
	builder.approvalStartCountFlag = true
	return builder
}

// 处理的审批流程数
//
// 示例值：0
func (builder *UserReport2021Builder) ApprovalExecuteCount(approvalExecuteCount string) *UserReport2021Builder {
	builder.approvalExecuteCount = approvalExecuteCount
	builder.approvalExecuteCountFlag = true
	return builder
}

// 审批协作次数最多的用户（在同一个审批实例中出现过即算为审批协作）
//
// 示例值：ou_XXXXXXX
func (builder *UserReport2021Builder) ApprovalRelationUserRankfirst(approvalRelationUserRankfirst string) *UserReport2021Builder {
	builder.approvalRelationUserRankfirst = approvalRelationUserRankfirst
	builder.approvalRelationUserRankfirstFlag = true
	return builder
}

// 用户id
//
// 示例值：ou_XXXXXXX
func (builder *UserReport2021Builder) UserId(userId string) *UserReport2021Builder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 工作日平均活跃最长的一周 的总活跃时长（分钟）
//
// 示例值：1816
func (builder *UserReport2021Builder) BusyWeekSumDuration(busyWeekSumDuration string) *UserReport2021Builder {
	builder.busyWeekSumDuration = busyWeekSumDuration
	builder.busyWeekSumDurationFlag = true
	return builder
}

// 工作日平均活跃最长的一周 的最早工作日
//
// 示例值：20210816
func (builder *UserReport2021Builder) BusyWeekMdate(busyWeekMdate string) *UserReport2021Builder {
	builder.busyWeekMdate = busyWeekMdate
	builder.busyWeekMdateFlag = true
	return builder
}

// 工作日平均活跃最长的一周 有活跃的工作日天数
//
// 示例值：4
func (builder *UserReport2021Builder) BusyWeekActDays(busyWeekActDays int) *UserReport2021Builder {
	builder.busyWeekActDays = busyWeekActDays
	builder.busyWeekActDaysFlag = true
	return builder
}

// 创建的文档被XXX人阅读过
//
// 示例值：10
func (builder *UserReport2021Builder) CreateReadUserCount(createReadUserCount string) *UserReport2021Builder {
	builder.createReadUserCount = createReadUserCount
	builder.createReadUserCountFlag = true
	return builder
}

func (builder *UserReport2021Builder) Build() *UserReport2021 {
	req := &UserReport2021{}
	if builder.activeDayCountFlag {
		req.ActiveDayCount = &builder.activeDayCount

	}
	if builder.busyWeekFlag {
		req.BusyWeek = &builder.busyWeek

	}
	if builder.p2pChatCountFlag {
		req.P2pChatCount = &builder.p2pChatCount

	}
	if builder.talkedChatCountFlag {
		req.TalkedChatCount = &builder.talkedChatCount

	}
	if builder.favoriteEmojiFlag {
		req.FavoriteEmoji = &builder.favoriteEmoji

	}
	if builder.reactionCountFlag {
		req.ReactionCount = &builder.reactionCount

	}
	if builder.conferenceCreateCountFlag {
		req.ConferenceCreateCount = &builder.conferenceCreateCount

	}
	if builder.totalPartiCountFlag {
		req.TotalPartiCount = &builder.totalPartiCount

	}
	if builder.minutesObjectCountFlag {
		req.MinutesObjectCount = &builder.minutesObjectCount

	}
	if builder.minutesDurationFlag {
		req.MinutesDuration = &builder.minutesDuration

	}
	if builder.createEditFileCountFlag {
		req.CreateEditFileCount = &builder.createEditFileCount

	}
	if builder.createFileCountFlag {
		req.CreateFileCount = &builder.createFileCount

	}
	if builder.cooperateEditFileCountFlag {
		req.CooperateEditFileCount = &builder.cooperateEditFileCount

	}
	if builder.likeRecordCountFlag {
		req.LikeRecordCount = &builder.likeRecordCount

	}
	if builder.okrCumOCountFlag {
		req.OkrCumOCount = &builder.okrCumOCount

	}
	if builder.okrCumKrCountFlag {
		req.OkrCumKrCount = &builder.okrCumKrCount

	}
	if builder.okrAlignedUserRankfirstFlag {
		req.OkrAlignedUserRankfirst = &builder.okrAlignedUserRankfirst

	}
	if builder.approvalStartCountFlag {
		req.ApprovalStartCount = &builder.approvalStartCount

	}
	if builder.approvalExecuteCountFlag {
		req.ApprovalExecuteCount = &builder.approvalExecuteCount

	}
	if builder.approvalRelationUserRankfirstFlag {
		req.ApprovalRelationUserRankfirst = &builder.approvalRelationUserRankfirst

	}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.busyWeekSumDurationFlag {
		req.BusyWeekSumDuration = &builder.busyWeekSumDuration

	}
	if builder.busyWeekMdateFlag {
		req.BusyWeekMdate = &builder.busyWeekMdate

	}
	if builder.busyWeekActDaysFlag {
		req.BusyWeekActDays = &builder.busyWeekActDays

	}
	if builder.createReadUserCountFlag {
		req.CreateReadUserCount = &builder.createReadUserCount

	}
	return req
}

type UserReport2022 struct {
	UserId                  *string `json:"user_id,omitempty"`                      // 用户id
	UserRegisterDate        *string `json:"user_register_date,omitempty"`           // 用户的飞书激活日期，yyyyMMdd格式（201909之前的用户可能是空
	ActiveDayCount          *int    `json:"active_day_count,omitempty"`             // 用户2022年内在飞书有活跃的天数
	MsgBusyDate             *string `json:"msg_busy_date,omitempty"`                // 2022全年用户发出消息条数最多的一天，yyyyMMdd格式
	MsgBusyDateSendMsgCount *string `json:"msg_busy_date_send_msg_count,omitempty"` // 全年发消息最多一天，发出的消息数
	P2pChatCount            *string `json:"p2p_chat_count,omitempty"`               // 2022全年与此用户有过单聊的人数（双方任意一人发出过消息即计入）
	TalkedChatCount         *string `json:"talked_chat_count,omitempty"`            // 2022全年用户有过发言的飞书群的数量
	PositiveReactionCount   *string `json:"positive_reaction_count,omitempty"`      // 2022全年用户所发消息，收到点赞、送心、碰拳等正面表情回复的总次数
	FirstPositiveReaction   *string `json:"first_positive_reaction,omitempty"`      // 用户所收到的正向表情回复，排第1的表情
	SecondPositiveReaction  *string `json:"second_positive_reaction,omitempty"`     // 用户所收到的正向表情回复，排第2的表情
	ThirdPositiveReaction   *string `json:"third_positive_reaction,omitempty"`      // 用户所收到的正向表情回复，排第3的表情
	FourthPositiveReaction  *string `json:"fourth_positive_reaction,omitempty"`     // 用户所收到的正向表情回复，排第4的表情
	FifthPositiveReaction   *string `json:"fifth_positive_reaction,omitempty"`      // 用户所收到的正向表情回复，排第5的表情
	CreateFileCount         *string `json:"create_file_count,omitempty"`            // 2022全年用户本人创建过的飞书文档数量
	CreatedFileViewCount    *string `json:"created_file_view_count,omitempty"`      // 此用户2022年创建的飞书文档的总阅读人数（含自己）
	CommentFileCount        *string `json:"comment_file_count,omitempty"`           // 2022全年用户发表过评论的飞书文档数量
	AttendEventCount        *string `json:"attend_event_count,omitempty"`           // 2022全年用户的日程总数（主日历日程，排除被删除的日程及用户拒绝、移除的日程，包括全天日程和重复日程，重复日程在周期内计算为多次）
	EventBusyDate           *string `json:"event_busy_date,omitempty"`              // 2022全年用户日程数量最多的一天，yyyyMMdd格式
	EventBusyDateEventCount *string `json:"event_busy_date_event_count,omitempty"`  // 日程最多一天的日程数量
	EventStartTimeRange1    *string `json:"event_start_time_range1,omitempty"`      // 2022全年，此用户最经常的日程开始时间，精确到分钟，HH:mm格式
	ConferenceCreateCount   *string `json:"conference_create_count,omitempty"`      // 2022全年，基于此用户所创建的日程，发起了视频会议的次数
	TotalPartiCount         *string `json:"total_parti_count,omitempty"`            // 2022全年，基于此用户所创建的日程发起的视频会议，涉及的参会总人次
	OkrCumOCount            *string `json:"okr_cum_o_count,omitempty"`              // 2022全年此用户写过的O的数量（未删除）
	OkrCumKrCount           *string `json:"okr_cum_kr_count,omitempty"`             // 2022全年此用户写过的KR的数量（未删除）
	OkrAlignedUserCount     *string `json:"okr_aligned_user_count,omitempty"`       // 2022全年用户所写的OKR对齐过的去重人数（未删除）
	PeopleInterviewNum      *string `json:"people_interview_num,omitempty"`         // 2022全年用户在飞书招聘上进行的面试总场次（候选人是海外账号的未参与计算）
	SendEmailCount          *string `json:"send_email_count,omitempty"`             // 2022全年此用户发出邮件数量
	ReceiveEmailCount       *string `json:"receive_email_count,omitempty"`          // 2022全年此用户收到邮件数量
}

type UserReport2022Builder struct {
	userId                      string // 用户id
	userIdFlag                  bool
	userRegisterDate            string // 用户的飞书激活日期，yyyyMMdd格式（201909之前的用户可能是空
	userRegisterDateFlag        bool
	activeDayCount              int // 用户2022年内在飞书有活跃的天数
	activeDayCountFlag          bool
	msgBusyDate                 string // 2022全年用户发出消息条数最多的一天，yyyyMMdd格式
	msgBusyDateFlag             bool
	msgBusyDateSendMsgCount     string // 全年发消息最多一天，发出的消息数
	msgBusyDateSendMsgCountFlag bool
	p2pChatCount                string // 2022全年与此用户有过单聊的人数（双方任意一人发出过消息即计入）
	p2pChatCountFlag            bool
	talkedChatCount             string // 2022全年用户有过发言的飞书群的数量
	talkedChatCountFlag         bool
	positiveReactionCount       string // 2022全年用户所发消息，收到点赞、送心、碰拳等正面表情回复的总次数
	positiveReactionCountFlag   bool
	firstPositiveReaction       string // 用户所收到的正向表情回复，排第1的表情
	firstPositiveReactionFlag   bool
	secondPositiveReaction      string // 用户所收到的正向表情回复，排第2的表情
	secondPositiveReactionFlag  bool
	thirdPositiveReaction       string // 用户所收到的正向表情回复，排第3的表情
	thirdPositiveReactionFlag   bool
	fourthPositiveReaction      string // 用户所收到的正向表情回复，排第4的表情
	fourthPositiveReactionFlag  bool
	fifthPositiveReaction       string // 用户所收到的正向表情回复，排第5的表情
	fifthPositiveReactionFlag   bool
	createFileCount             string // 2022全年用户本人创建过的飞书文档数量
	createFileCountFlag         bool
	createdFileViewCount        string // 此用户2022年创建的飞书文档的总阅读人数（含自己）
	createdFileViewCountFlag    bool
	commentFileCount            string // 2022全年用户发表过评论的飞书文档数量
	commentFileCountFlag        bool
	attendEventCount            string // 2022全年用户的日程总数（主日历日程，排除被删除的日程及用户拒绝、移除的日程，包括全天日程和重复日程，重复日程在周期内计算为多次）
	attendEventCountFlag        bool
	eventBusyDate               string // 2022全年用户日程数量最多的一天，yyyyMMdd格式
	eventBusyDateFlag           bool
	eventBusyDateEventCount     string // 日程最多一天的日程数量
	eventBusyDateEventCountFlag bool
	eventStartTimeRange1        string // 2022全年，此用户最经常的日程开始时间，精确到分钟，HH:mm格式
	eventStartTimeRange1Flag    bool
	conferenceCreateCount       string // 2022全年，基于此用户所创建的日程，发起了视频会议的次数
	conferenceCreateCountFlag   bool
	totalPartiCount             string // 2022全年，基于此用户所创建的日程发起的视频会议，涉及的参会总人次
	totalPartiCountFlag         bool
	okrCumOCount                string // 2022全年此用户写过的O的数量（未删除）
	okrCumOCountFlag            bool
	okrCumKrCount               string // 2022全年此用户写过的KR的数量（未删除）
	okrCumKrCountFlag           bool
	okrAlignedUserCount         string // 2022全年用户所写的OKR对齐过的去重人数（未删除）
	okrAlignedUserCountFlag     bool
	peopleInterviewNum          string // 2022全年用户在飞书招聘上进行的面试总场次（候选人是海外账号的未参与计算）
	peopleInterviewNumFlag      bool
	sendEmailCount              string // 2022全年此用户发出邮件数量
	sendEmailCountFlag          bool
	receiveEmailCount           string // 2022全年此用户收到邮件数量
	receiveEmailCountFlag       bool
}

func NewUserReport2022Builder() *UserReport2022Builder {
	builder := &UserReport2022Builder{}
	return builder
}

// 用户id
//
// 示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62
func (builder *UserReport2022Builder) UserId(userId string) *UserReport2022Builder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

// 用户的飞书激活日期，yyyyMMdd格式（201909之前的用户可能是空
//
// 示例值：20220726
func (builder *UserReport2022Builder) UserRegisterDate(userRegisterDate string) *UserReport2022Builder {
	builder.userRegisterDate = userRegisterDate
	builder.userRegisterDateFlag = true
	return builder
}

// 用户2022年内在飞书有活跃的天数
//
// 示例值：120
func (builder *UserReport2022Builder) ActiveDayCount(activeDayCount int) *UserReport2022Builder {
	builder.activeDayCount = activeDayCount
	builder.activeDayCountFlag = true
	return builder
}

// 2022全年用户发出消息条数最多的一天，yyyyMMdd格式
//
// 示例值：20220817
func (builder *UserReport2022Builder) MsgBusyDate(msgBusyDate string) *UserReport2022Builder {
	builder.msgBusyDate = msgBusyDate
	builder.msgBusyDateFlag = true
	return builder
}

// 全年发消息最多一天，发出的消息数
//
// 示例值：588
func (builder *UserReport2022Builder) MsgBusyDateSendMsgCount(msgBusyDateSendMsgCount string) *UserReport2022Builder {
	builder.msgBusyDateSendMsgCount = msgBusyDateSendMsgCount
	builder.msgBusyDateSendMsgCountFlag = true
	return builder
}

// 2022全年与此用户有过单聊的人数（双方任意一人发出过消息即计入）
//
// 示例值：22
func (builder *UserReport2022Builder) P2pChatCount(p2pChatCount string) *UserReport2022Builder {
	builder.p2pChatCount = p2pChatCount
	builder.p2pChatCountFlag = true
	return builder
}

// 2022全年用户有过发言的飞书群的数量
//
// 示例值：18
func (builder *UserReport2022Builder) TalkedChatCount(talkedChatCount string) *UserReport2022Builder {
	builder.talkedChatCount = talkedChatCount
	builder.talkedChatCountFlag = true
	return builder
}

// 2022全年用户所发消息，收到点赞、送心、碰拳等正面表情回复的总次数
//
// 示例值：100
func (builder *UserReport2022Builder) PositiveReactionCount(positiveReactionCount string) *UserReport2022Builder {
	builder.positiveReactionCount = positiveReactionCount
	builder.positiveReactionCountFlag = true
	return builder
}

// 用户所收到的正向表情回复，排第1的表情
//
// 示例值：thumbsup
func (builder *UserReport2022Builder) FirstPositiveReaction(firstPositiveReaction string) *UserReport2022Builder {
	builder.firstPositiveReaction = firstPositiveReaction
	builder.firstPositiveReactionFlag = true
	return builder
}

// 用户所收到的正向表情回复，排第2的表情
//
// 示例值：muscle
func (builder *UserReport2022Builder) SecondPositiveReaction(secondPositiveReaction string) *UserReport2022Builder {
	builder.secondPositiveReaction = secondPositiveReaction
	builder.secondPositiveReactionFlag = true
	return builder
}

// 用户所收到的正向表情回复，排第3的表情
//
// 示例值：fingerheart
func (builder *UserReport2022Builder) ThirdPositiveReaction(thirdPositiveReaction string) *UserReport2022Builder {
	builder.thirdPositiveReaction = thirdPositiveReaction
	builder.thirdPositiveReactionFlag = true
	return builder
}

// 用户所收到的正向表情回复，排第4的表情
//
// 示例值：applaud
func (builder *UserReport2022Builder) FourthPositiveReaction(fourthPositiveReaction string) *UserReport2022Builder {
	builder.fourthPositiveReaction = fourthPositiveReaction
	builder.fourthPositiveReactionFlag = true
	return builder
}

// 用户所收到的正向表情回复，排第5的表情
//
// 示例值：fistbump
func (builder *UserReport2022Builder) FifthPositiveReaction(fifthPositiveReaction string) *UserReport2022Builder {
	builder.fifthPositiveReaction = fifthPositiveReaction
	builder.fifthPositiveReactionFlag = true
	return builder
}

// 2022全年用户本人创建过的飞书文档数量
//
// 示例值：12
func (builder *UserReport2022Builder) CreateFileCount(createFileCount string) *UserReport2022Builder {
	builder.createFileCount = createFileCount
	builder.createFileCountFlag = true
	return builder
}

// 此用户2022年创建的飞书文档的总阅读人数（含自己）
//
// 示例值：11
func (builder *UserReport2022Builder) CreatedFileViewCount(createdFileViewCount string) *UserReport2022Builder {
	builder.createdFileViewCount = createdFileViewCount
	builder.createdFileViewCountFlag = true
	return builder
}

// 2022全年用户发表过评论的飞书文档数量
//
// 示例值：11
func (builder *UserReport2022Builder) CommentFileCount(commentFileCount string) *UserReport2022Builder {
	builder.commentFileCount = commentFileCount
	builder.commentFileCountFlag = true
	return builder
}

// 2022全年用户的日程总数（主日历日程，排除被删除的日程及用户拒绝、移除的日程，包括全天日程和重复日程，重复日程在周期内计算为多次）
//
// 示例值：123
func (builder *UserReport2022Builder) AttendEventCount(attendEventCount string) *UserReport2022Builder {
	builder.attendEventCount = attendEventCount
	builder.attendEventCountFlag = true
	return builder
}

// 2022全年用户日程数量最多的一天，yyyyMMdd格式
//
// 示例值：20220801
func (builder *UserReport2022Builder) EventBusyDate(eventBusyDate string) *UserReport2022Builder {
	builder.eventBusyDate = eventBusyDate
	builder.eventBusyDateFlag = true
	return builder
}

// 日程最多一天的日程数量
//
// 示例值：123
func (builder *UserReport2022Builder) EventBusyDateEventCount(eventBusyDateEventCount string) *UserReport2022Builder {
	builder.eventBusyDateEventCount = eventBusyDateEventCount
	builder.eventBusyDateEventCountFlag = true
	return builder
}

// 2022全年，此用户最经常的日程开始时间，精确到分钟，HH:mm格式
//
// 示例值：10:00
func (builder *UserReport2022Builder) EventStartTimeRange1(eventStartTimeRange1 string) *UserReport2022Builder {
	builder.eventStartTimeRange1 = eventStartTimeRange1
	builder.eventStartTimeRange1Flag = true
	return builder
}

// 2022全年，基于此用户所创建的日程，发起了视频会议的次数
//
// 示例值：123
func (builder *UserReport2022Builder) ConferenceCreateCount(conferenceCreateCount string) *UserReport2022Builder {
	builder.conferenceCreateCount = conferenceCreateCount
	builder.conferenceCreateCountFlag = true
	return builder
}

// 2022全年，基于此用户所创建的日程发起的视频会议，涉及的参会总人次
//
// 示例值：123
func (builder *UserReport2022Builder) TotalPartiCount(totalPartiCount string) *UserReport2022Builder {
	builder.totalPartiCount = totalPartiCount
	builder.totalPartiCountFlag = true
	return builder
}

// 2022全年此用户写过的O的数量（未删除）
//
// 示例值：123
func (builder *UserReport2022Builder) OkrCumOCount(okrCumOCount string) *UserReport2022Builder {
	builder.okrCumOCount = okrCumOCount
	builder.okrCumOCountFlag = true
	return builder
}

// 2022全年此用户写过的KR的数量（未删除）
//
// 示例值：123
func (builder *UserReport2022Builder) OkrCumKrCount(okrCumKrCount string) *UserReport2022Builder {
	builder.okrCumKrCount = okrCumKrCount
	builder.okrCumKrCountFlag = true
	return builder
}

// 2022全年用户所写的OKR对齐过的去重人数（未删除）
//
// 示例值：123
func (builder *UserReport2022Builder) OkrAlignedUserCount(okrAlignedUserCount string) *UserReport2022Builder {
	builder.okrAlignedUserCount = okrAlignedUserCount
	builder.okrAlignedUserCountFlag = true
	return builder
}

// 2022全年用户在飞书招聘上进行的面试总场次（候选人是海外账号的未参与计算）
//
// 示例值：123
func (builder *UserReport2022Builder) PeopleInterviewNum(peopleInterviewNum string) *UserReport2022Builder {
	builder.peopleInterviewNum = peopleInterviewNum
	builder.peopleInterviewNumFlag = true
	return builder
}

// 2022全年此用户发出邮件数量
//
// 示例值：123
func (builder *UserReport2022Builder) SendEmailCount(sendEmailCount string) *UserReport2022Builder {
	builder.sendEmailCount = sendEmailCount
	builder.sendEmailCountFlag = true
	return builder
}

// 2022全年此用户收到邮件数量
//
// 示例值：123
func (builder *UserReport2022Builder) ReceiveEmailCount(receiveEmailCount string) *UserReport2022Builder {
	builder.receiveEmailCount = receiveEmailCount
	builder.receiveEmailCountFlag = true
	return builder
}

func (builder *UserReport2022Builder) Build() *UserReport2022 {
	req := &UserReport2022{}
	if builder.userIdFlag {
		req.UserId = &builder.userId

	}
	if builder.userRegisterDateFlag {
		req.UserRegisterDate = &builder.userRegisterDate

	}
	if builder.activeDayCountFlag {
		req.ActiveDayCount = &builder.activeDayCount

	}
	if builder.msgBusyDateFlag {
		req.MsgBusyDate = &builder.msgBusyDate

	}
	if builder.msgBusyDateSendMsgCountFlag {
		req.MsgBusyDateSendMsgCount = &builder.msgBusyDateSendMsgCount

	}
	if builder.p2pChatCountFlag {
		req.P2pChatCount = &builder.p2pChatCount

	}
	if builder.talkedChatCountFlag {
		req.TalkedChatCount = &builder.talkedChatCount

	}
	if builder.positiveReactionCountFlag {
		req.PositiveReactionCount = &builder.positiveReactionCount

	}
	if builder.firstPositiveReactionFlag {
		req.FirstPositiveReaction = &builder.firstPositiveReaction

	}
	if builder.secondPositiveReactionFlag {
		req.SecondPositiveReaction = &builder.secondPositiveReaction

	}
	if builder.thirdPositiveReactionFlag {
		req.ThirdPositiveReaction = &builder.thirdPositiveReaction

	}
	if builder.fourthPositiveReactionFlag {
		req.FourthPositiveReaction = &builder.fourthPositiveReaction

	}
	if builder.fifthPositiveReactionFlag {
		req.FifthPositiveReaction = &builder.fifthPositiveReaction

	}
	if builder.createFileCountFlag {
		req.CreateFileCount = &builder.createFileCount

	}
	if builder.createdFileViewCountFlag {
		req.CreatedFileViewCount = &builder.createdFileViewCount

	}
	if builder.commentFileCountFlag {
		req.CommentFileCount = &builder.commentFileCount

	}
	if builder.attendEventCountFlag {
		req.AttendEventCount = &builder.attendEventCount

	}
	if builder.eventBusyDateFlag {
		req.EventBusyDate = &builder.eventBusyDate

	}
	if builder.eventBusyDateEventCountFlag {
		req.EventBusyDateEventCount = &builder.eventBusyDateEventCount

	}
	if builder.eventStartTimeRange1Flag {
		req.EventStartTimeRange1 = &builder.eventStartTimeRange1

	}
	if builder.conferenceCreateCountFlag {
		req.ConferenceCreateCount = &builder.conferenceCreateCount

	}
	if builder.totalPartiCountFlag {
		req.TotalPartiCount = &builder.totalPartiCount

	}
	if builder.okrCumOCountFlag {
		req.OkrCumOCount = &builder.okrCumOCount

	}
	if builder.okrCumKrCountFlag {
		req.OkrCumKrCount = &builder.okrCumKrCount

	}
	if builder.okrAlignedUserCountFlag {
		req.OkrAlignedUserCount = &builder.okrAlignedUserCount

	}
	if builder.peopleInterviewNumFlag {
		req.PeopleInterviewNum = &builder.peopleInterviewNum

	}
	if builder.sendEmailCountFlag {
		req.SendEmailCount = &builder.sendEmailCount

	}
	if builder.receiveEmailCountFlag {
		req.ReceiveEmailCount = &builder.receiveEmailCount

	}
	return req
}

type ListAdminDeptStatReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListAdminDeptStatReqBuilder() *ListAdminDeptStatReqBuilder {
	builder := &ListAdminDeptStatReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 部门ID类型
//
// 示例值：open_department_id
func (builder *ListAdminDeptStatReqBuilder) DepartmentIdType(departmentIdType string) *ListAdminDeptStatReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 起始日期（包含），格式是YYYY-mm-dd
//
// 示例值：2020-02-15
func (builder *ListAdminDeptStatReqBuilder) StartDate(startDate string) *ListAdminDeptStatReqBuilder {
	builder.apiReq.QueryParams.Set("start_date", fmt.Sprint(startDate))
	return builder
}

// 终止日期（包含），格式是YYYY-mm-dd，起止日期之间相差不能超过91天（包含91天）
//
// 示例值：2020-02-15
func (builder *ListAdminDeptStatReqBuilder) EndDate(endDate string) *ListAdminDeptStatReqBuilder {
	builder.apiReq.QueryParams.Set("end_date", fmt.Sprint(endDate))
	return builder
}

// 部门的 ID，取决于department_id_type，仅支持根部门及其下前4级子部门
//
// 示例值：od-382e2793cfc9471f892e8a672987654c
func (builder *ListAdminDeptStatReqBuilder) DepartmentId(departmentId string) *ListAdminDeptStatReqBuilder {
	builder.apiReq.QueryParams.Set("department_id", fmt.Sprint(departmentId))
	return builder
}

// 是否包含子部门，如果该值为false，则只查出本部门直属用户活跃和功能使用数据；如果该值为true，则查出该部门以及其子部门（子部门层级最多不超过根部门下的前4级）的用户活跃和功能使用数据
//
// 示例值：false
func (builder *ListAdminDeptStatReqBuilder) ContainsChildDept(containsChildDept bool) *ListAdminDeptStatReqBuilder {
	builder.apiReq.QueryParams.Set("contains_child_dept", fmt.Sprint(containsChildDept))
	return builder
}

// 分页大小，默认是10
//
// 示例值：10
func (builder *ListAdminDeptStatReqBuilder) PageSize(pageSize int) *ListAdminDeptStatReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；当返回的has_more为true时，会返回新的page_token，再次调用接口，传入这个page_token，将获得下一页数据
//
// 示例值：2
func (builder *ListAdminDeptStatReqBuilder) PageToken(pageToken string) *ListAdminDeptStatReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *ListAdminDeptStatReqBuilder) Build() *ListAdminDeptStatReq {
	req := &ListAdminDeptStatReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAdminDeptStatReq struct {
	apiReq *larkcore.ApiReq
}

type ListAdminDeptStatRespData struct {
	HasMore   *bool            `json:"has_more,omitempty"`   // 分页查询时返回，代表是否还有更多数据
	PageToken *string          `json:"page_token,omitempty"` // 分页标记，下一页分页的token
	Items     []*AdminDeptStat `json:"items,omitempty"`      // 数据报表
}

type ListAdminDeptStatResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAdminDeptStatRespData `json:"data"` // 业务数据
}

func (resp *ListAdminDeptStatResp) Success() bool {
	return resp.Code == 0
}

type ListAdminUserStatReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewListAdminUserStatReqBuilder() *ListAdminUserStatReqBuilder {
	builder := &ListAdminUserStatReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 此次调用中使用的用户ID的类型
//
// 示例值：
func (builder *ListAdminUserStatReqBuilder) UserIdType(userIdType string) *ListAdminUserStatReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 部门ID类型
//
// 示例值：open_department_id
func (builder *ListAdminUserStatReqBuilder) DepartmentIdType(departmentIdType string) *ListAdminUserStatReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 起始日期（包含），格式是YYYY-mm-dd
//
// 示例值：2020-02-15
func (builder *ListAdminUserStatReqBuilder) StartDate(startDate string) *ListAdminUserStatReqBuilder {
	builder.apiReq.QueryParams.Set("start_date", fmt.Sprint(startDate))
	return builder
}

// 终止日期（包含），格式是YYYY-mm-dd。起止日期之间相差不能超过31天（包含31天）
//
// 示例值：2020-02-15
func (builder *ListAdminUserStatReqBuilder) EndDate(endDate string) *ListAdminUserStatReqBuilder {
	builder.apiReq.QueryParams.Set("end_date", fmt.Sprint(endDate))
	return builder
}

// 部门的 ID，取决于department_id_type
//
// 示例值：od-382e2793cfc9471f892e8a672987654c
func (builder *ListAdminUserStatReqBuilder) DepartmentId(departmentId string) *ListAdminUserStatReqBuilder {
	builder.apiReq.QueryParams.Set("department_id", fmt.Sprint(departmentId))
	return builder
}

// 用户的open_id，user_id或者union_id，取决于user_id_type
//
// 示例值：ou_7dab8a3d3cdcc9da365777c7ad535d62
func (builder *ListAdminUserStatReqBuilder) UserId(userId string) *ListAdminUserStatReqBuilder {
	builder.apiReq.QueryParams.Set("user_id", fmt.Sprint(userId))
	return builder
}

// 分页大小，默认是10
//
// 示例值：10
func (builder *ListAdminUserStatReqBuilder) PageSize(pageSize int) *ListAdminUserStatReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；当返回的has_more为true时，会返回新的page_token，再次调用接口，传入这个page_token，将获得下一页数据
//
// 示例值：2
func (builder *ListAdminUserStatReqBuilder) PageToken(pageToken string) *ListAdminUserStatReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

func (builder *ListAdminUserStatReqBuilder) Build() *ListAdminUserStatReq {
	req := &ListAdminUserStatReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListAdminUserStatReq struct {
	apiReq *larkcore.ApiReq
}

type ListAdminUserStatRespData struct {
	HasMore   *bool            `json:"has_more,omitempty"`   // 是否有下一页数据
	PageToken *string          `json:"page_token,omitempty"` // 下一页分页的token
	Items     []*AdminUserStat `json:"items,omitempty"`      // 数据报表
}

type ListAdminUserStatResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListAdminUserStatRespData `json:"data"` // 业务数据
}

func (resp *ListAdminUserStatResp) Success() bool {
	return resp.Code == 0
}

type CreateBadgeReqBuilder struct {
	apiReq *larkcore.ApiReq
	badge  *Badge
}

func NewCreateBadgeReqBuilder() *CreateBadgeReqBuilder {
	builder := &CreateBadgeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 使用该接口可以创建一枚完整的勋章信息，一个租户下最多可创建1000枚勋章。
func (builder *CreateBadgeReqBuilder) Badge(badge *Badge) *CreateBadgeReqBuilder {
	builder.badge = badge
	return builder
}

func (builder *CreateBadgeReqBuilder) Build() *CreateBadgeReq {
	req := &CreateBadgeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.badge
	return req
}

type CreateBadgeReq struct {
	apiReq *larkcore.ApiReq
	Badge  *Badge `body:""`
}

type CreateBadgeRespData struct {
	Badge *Badge `json:"badge,omitempty"` // 勋章的信息
}

type CreateBadgeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateBadgeRespData `json:"data"` // 业务数据
}

func (resp *CreateBadgeResp) Success() bool {
	return resp.Code == 0
}

type GetBadgeReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetBadgeReqBuilder() *GetBadgeReqBuilder {
	builder := &GetBadgeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 勋章id
//
// 示例值：m_DjMzaK
func (builder *GetBadgeReqBuilder) BadgeId(badgeId string) *GetBadgeReqBuilder {
	builder.apiReq.PathParams.Set("badge_id", fmt.Sprint(badgeId))
	return builder
}

func (builder *GetBadgeReqBuilder) Build() *GetBadgeReq {
	req := &GetBadgeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type GetBadgeReq struct {
	apiReq *larkcore.ApiReq
}

type GetBadgeRespData struct {
	Badge *Badge `json:"badge,omitempty"` // 勋章信息
}

type GetBadgeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetBadgeRespData `json:"data"` // 业务数据
}

func (resp *GetBadgeResp) Success() bool {
	return resp.Code == 0
}

type ListBadgeReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListBadgeReqBuilder() *ListBadgeReqBuilder {
	builder := &ListBadgeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListBadgeReqBuilder) Limit(limit int) *ListBadgeReqBuilder {
	builder.limit = limit
	return builder
}

// 分页大小
//
// 示例值：10
func (builder *ListBadgeReqBuilder) PageSize(pageSize int) *ListBadgeReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：b1fmUz
func (builder *ListBadgeReqBuilder) PageToken(pageToken string) *ListBadgeReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 租户内唯一的勋章名称，精确匹配。
//
// 示例值：激励勋章
func (builder *ListBadgeReqBuilder) Name(name string) *ListBadgeReqBuilder {
	builder.apiReq.QueryParams.Set("name", fmt.Sprint(name))
	return builder
}

func (builder *ListBadgeReqBuilder) Build() *ListBadgeReq {
	req := &ListBadgeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListBadgeReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListBadgeRespData struct {
	Badges    []*Badge `json:"badges,omitempty"`     // 勋章列表
	PageToken *string  `json:"page_token,omitempty"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
	HasMore   *bool    `json:"has_more,omitempty"`   // 是否已经遍历完，表示本次页面请求已经拿到所有列表数据
}

type ListBadgeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListBadgeRespData `json:"data"` // 业务数据
}

func (resp *ListBadgeResp) Success() bool {
	return resp.Code == 0
}

type UpdateBadgeReqBuilder struct {
	apiReq *larkcore.ApiReq
	badge  *Badge
}

func NewUpdateBadgeReqBuilder() *UpdateBadgeReqBuilder {
	builder := &UpdateBadgeReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 勋章ID
//
// 示例值：m_MzfKDM
func (builder *UpdateBadgeReqBuilder) BadgeId(badgeId string) *UpdateBadgeReqBuilder {
	builder.apiReq.PathParams.Set("badge_id", fmt.Sprint(badgeId))
	return builder
}

// 通过该接口可以修改勋章的信息
func (builder *UpdateBadgeReqBuilder) Badge(badge *Badge) *UpdateBadgeReqBuilder {
	builder.badge = badge
	return builder
}

func (builder *UpdateBadgeReqBuilder) Build() *UpdateBadgeReq {
	req := &UpdateBadgeReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.Body = builder.badge
	return req
}

type UpdateBadgeReq struct {
	apiReq *larkcore.ApiReq
	Badge  *Badge `body:""`
}

type UpdateBadgeRespData struct {
	Badge *Badge `json:"badge,omitempty"` // 勋章信息
}

type UpdateBadgeResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UpdateBadgeRespData `json:"data"` // 业务数据
}

func (resp *UpdateBadgeResp) Success() bool {
	return resp.Code == 0
}

type CreateBadgeGrantReqBuilder struct {
	apiReq *larkcore.ApiReq
	grant  *Grant
}

func NewCreateBadgeGrantReqBuilder() *CreateBadgeGrantReqBuilder {
	builder := &CreateBadgeGrantReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 勋章ID
//
// 示例值：m_DjMzaK
func (builder *CreateBadgeGrantReqBuilder) BadgeId(badgeId string) *CreateBadgeGrantReqBuilder {
	builder.apiReq.PathParams.Set("badge_id", fmt.Sprint(badgeId))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *CreateBadgeGrantReqBuilder) UserIdType(userIdType string) *CreateBadgeGrantReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门ID的类型。
//
// 示例值：open_department_id
func (builder *CreateBadgeGrantReqBuilder) DepartmentIdType(departmentIdType string) *CreateBadgeGrantReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 通过该接口可以为特定勋章创建一份授予名单，一枚勋章下最多可创建1000份授予名单。
func (builder *CreateBadgeGrantReqBuilder) Grant(grant *Grant) *CreateBadgeGrantReqBuilder {
	builder.grant = grant
	return builder
}

func (builder *CreateBadgeGrantReqBuilder) Build() *CreateBadgeGrantReq {
	req := &CreateBadgeGrantReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.grant
	return req
}

type CreateBadgeGrantReq struct {
	apiReq *larkcore.ApiReq
	Grant  *Grant `body:""`
}

type CreateBadgeGrantRespData struct {
	Grant *Grant `json:"grant,omitempty"` // 授予名单的信息
}

type CreateBadgeGrantResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateBadgeGrantRespData `json:"data"` // 业务数据
}

func (resp *CreateBadgeGrantResp) Success() bool {
	return resp.Code == 0
}

type DeleteBadgeGrantReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewDeleteBadgeGrantReqBuilder() *DeleteBadgeGrantReqBuilder {
	builder := &DeleteBadgeGrantReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 企业勋章的唯一ID
//
// 示例值：m_DjMzaK
func (builder *DeleteBadgeGrantReqBuilder) BadgeId(badgeId string) *DeleteBadgeGrantReqBuilder {
	builder.apiReq.PathParams.Set("badge_id", fmt.Sprint(badgeId))
	return builder
}

// 租户内授予名单的唯一标识，该值由系统随机生成。
//
// 示例值：g_uS4yux
func (builder *DeleteBadgeGrantReqBuilder) GrantId(grantId string) *DeleteBadgeGrantReqBuilder {
	builder.apiReq.PathParams.Set("grant_id", fmt.Sprint(grantId))
	return builder
}

func (builder *DeleteBadgeGrantReqBuilder) Build() *DeleteBadgeGrantReq {
	req := &DeleteBadgeGrantReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	return req
}

type DeleteBadgeGrantReq struct {
	apiReq *larkcore.ApiReq
}

type DeleteBadgeGrantResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *DeleteBadgeGrantResp) Success() bool {
	return resp.Code == 0
}

type GetBadgeGrantReqBuilder struct {
	apiReq *larkcore.ApiReq
}

func NewGetBadgeGrantReqBuilder() *GetBadgeGrantReqBuilder {
	builder := &GetBadgeGrantReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 租户内勋章的唯一标识，该值由系统随机生成。
//
// 示例值：m_DjMzaK
func (builder *GetBadgeGrantReqBuilder) BadgeId(badgeId string) *GetBadgeGrantReqBuilder {
	builder.apiReq.PathParams.Set("badge_id", fmt.Sprint(badgeId))
	return builder
}

// 租户内授予名单的唯一标识，该值由系统随机生成。
//
// 示例值：g_uS4yux
func (builder *GetBadgeGrantReqBuilder) GrantId(grantId string) *GetBadgeGrantReqBuilder {
	builder.apiReq.PathParams.Set("grant_id", fmt.Sprint(grantId))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *GetBadgeGrantReqBuilder) UserIdType(userIdType string) *GetBadgeGrantReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门ID的类型。
//
// 示例值：open_department_id
func (builder *GetBadgeGrantReqBuilder) DepartmentIdType(departmentIdType string) *GetBadgeGrantReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

func (builder *GetBadgeGrantReqBuilder) Build() *GetBadgeGrantReq {
	req := &GetBadgeGrantReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type GetBadgeGrantReq struct {
	apiReq *larkcore.ApiReq
}

type GetBadgeGrantRespData struct {
	Grant *Grant `json:"grant,omitempty"` // 授予名单信息
}

type GetBadgeGrantResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *GetBadgeGrantRespData `json:"data"` // 业务数据
}

func (resp *GetBadgeGrantResp) Success() bool {
	return resp.Code == 0
}

type ListBadgeGrantReqBuilder struct {
	apiReq *larkcore.ApiReq
	limit  int // 最大返回多少记录，当使用迭代器访问时才有效
}

func NewListBadgeGrantReqBuilder() *ListBadgeGrantReqBuilder {
	builder := &ListBadgeGrantReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 最大返回多少记录，当使用迭代器访问时才有效
func (builder *ListBadgeGrantReqBuilder) Limit(limit int) *ListBadgeGrantReqBuilder {
	builder.limit = limit
	return builder
}

// 企业勋章的唯一ID
//
// 示例值：m_DjMzaK
func (builder *ListBadgeGrantReqBuilder) BadgeId(badgeId string) *ListBadgeGrantReqBuilder {
	builder.apiReq.PathParams.Set("badge_id", fmt.Sprint(badgeId))
	return builder
}

// 分页大小
//
// 示例值：10
func (builder *ListBadgeGrantReqBuilder) PageSize(pageSize int) *ListBadgeGrantReqBuilder {
	builder.apiReq.QueryParams.Set("page_size", fmt.Sprint(pageSize))
	return builder
}

// 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
//
// 示例值：om5fn1
func (builder *ListBadgeGrantReqBuilder) PageToken(pageToken string) *ListBadgeGrantReqBuilder {
	builder.apiReq.QueryParams.Set("page_token", fmt.Sprint(pageToken))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *ListBadgeGrantReqBuilder) UserIdType(userIdType string) *ListBadgeGrantReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门ID的类型。
//
// 示例值：open_department_id
func (builder *ListBadgeGrantReqBuilder) DepartmentIdType(departmentIdType string) *ListBadgeGrantReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 授予名单名称，精确匹配。
//
// 示例值：激励勋章的授予名单
func (builder *ListBadgeGrantReqBuilder) Name(name string) *ListBadgeGrantReqBuilder {
	builder.apiReq.QueryParams.Set("name", fmt.Sprint(name))
	return builder
}

func (builder *ListBadgeGrantReqBuilder) Build() *ListBadgeGrantReq {
	req := &ListBadgeGrantReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.Limit = builder.limit
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	return req
}

type ListBadgeGrantReq struct {
	apiReq *larkcore.ApiReq
	Limit  int // 最多返回多少记录，只有在使用迭代器访问时，才有效

}

type ListBadgeGrantRespData struct {
	Grants    []*Grant `json:"grants,omitempty"`     // 授予名单列表
	PageToken *string  `json:"page_token,omitempty"` // 分页标记，第一次请求不填，表示从头开始遍历；分页查询结果还有更多项时会同时返回新的 page_token，下次遍历可采用该 page_token 获取查询结果
	HasMore   *bool    `json:"has_more,omitempty"`   // 是否已经遍历完，表示本次页面请求已经拿到所有列表数据
}

type ListBadgeGrantResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *ListBadgeGrantRespData `json:"data"` // 业务数据
}

func (resp *ListBadgeGrantResp) Success() bool {
	return resp.Code == 0
}

type UpdateBadgeGrantReqBuilder struct {
	apiReq *larkcore.ApiReq
	grant  *Grant
}

func NewUpdateBadgeGrantReqBuilder() *UpdateBadgeGrantReqBuilder {
	builder := &UpdateBadgeGrantReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 勋章ID
//
// 示例值：m_DjMzaK
func (builder *UpdateBadgeGrantReqBuilder) BadgeId(badgeId string) *UpdateBadgeGrantReqBuilder {
	builder.apiReq.PathParams.Set("badge_id", fmt.Sprint(badgeId))
	return builder
}

// 授予名单ID
//
// 示例值：g_uS4yux
func (builder *UpdateBadgeGrantReqBuilder) GrantId(grantId string) *UpdateBadgeGrantReqBuilder {
	builder.apiReq.PathParams.Set("grant_id", fmt.Sprint(grantId))
	return builder
}

// 用户 ID 类型
//
// 示例值：open_id
func (builder *UpdateBadgeGrantReqBuilder) UserIdType(userIdType string) *UpdateBadgeGrantReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 此次调用中使用的部门ID的类型。
//
// 示例值：open_department_id
func (builder *UpdateBadgeGrantReqBuilder) DepartmentIdType(departmentIdType string) *UpdateBadgeGrantReqBuilder {
	builder.apiReq.QueryParams.Set("department_id_type", fmt.Sprint(departmentIdType))
	return builder
}

// 通过该接口可以修改特定授予名单的相关信息
func (builder *UpdateBadgeGrantReqBuilder) Grant(grant *Grant) *UpdateBadgeGrantReqBuilder {
	builder.grant = grant
	return builder
}

func (builder *UpdateBadgeGrantReqBuilder) Build() *UpdateBadgeGrantReq {
	req := &UpdateBadgeGrantReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.PathParams = builder.apiReq.PathParams
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.grant
	return req
}

type UpdateBadgeGrantReq struct {
	apiReq *larkcore.ApiReq
	Grant  *Grant `body:""`
}

type UpdateBadgeGrantRespData struct {
	Grant *Grant `json:"grant,omitempty"` // 授予名单
}

type UpdateBadgeGrantResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *UpdateBadgeGrantRespData `json:"data"` // 业务数据
}

func (resp *UpdateBadgeGrantResp) Success() bool {
	return resp.Code == 0
}

type CreateBadgeImageReqBodyBuilder struct {
	imageFile     io.Reader // 勋章图片的文件，仅支持 PNG 格式，320 x 320 像素，大小不超过 1024 KB。
	imageFileFlag bool
	imageType     int // 图片的类型
	imageTypeFlag bool
}

func NewCreateBadgeImageReqBodyBuilder() *CreateBadgeImageReqBodyBuilder {
	builder := &CreateBadgeImageReqBodyBuilder{}
	return builder
}

// 勋章图片的文件，仅支持 PNG 格式，320 x 320 像素，大小不超过 1024 KB。
//
//示例值：file binary
func (builder *CreateBadgeImageReqBodyBuilder) ImageFile(imageFile io.Reader) *CreateBadgeImageReqBodyBuilder {
	builder.imageFile = imageFile
	builder.imageFileFlag = true
	return builder
}

// 图片的类型
//
//示例值：1
func (builder *CreateBadgeImageReqBodyBuilder) ImageType(imageType int) *CreateBadgeImageReqBodyBuilder {
	builder.imageType = imageType
	builder.imageTypeFlag = true
	return builder
}

func (builder *CreateBadgeImageReqBodyBuilder) Build() *CreateBadgeImageReqBody {
	req := &CreateBadgeImageReqBody{}
	if builder.imageFileFlag {
		req.ImageFile = builder.imageFile
	}
	if builder.imageTypeFlag {
		req.ImageType = &builder.imageType
	}
	return req
}

type CreateBadgeImagePathReqBodyBuilder struct {
	imageFilePath     string // 勋章图片的文件，仅支持 PNG 格式，320 x 320 像素，大小不超过 1024 KB。
	imageFilePathFlag bool
	imageType         int // 图片的类型
	imageTypeFlag     bool
}

func NewCreateBadgeImagePathReqBodyBuilder() *CreateBadgeImagePathReqBodyBuilder {
	builder := &CreateBadgeImagePathReqBodyBuilder{}
	return builder
}

// 勋章图片的文件，仅支持 PNG 格式，320 x 320 像素，大小不超过 1024 KB。
//
// 示例值：file binary
func (builder *CreateBadgeImagePathReqBodyBuilder) ImageFilePath(imageFilePath string) *CreateBadgeImagePathReqBodyBuilder {
	builder.imageFilePath = imageFilePath
	builder.imageFilePathFlag = true
	return builder
}

// 图片的类型
//
// 示例值：1
func (builder *CreateBadgeImagePathReqBodyBuilder) ImageType(imageType int) *CreateBadgeImagePathReqBodyBuilder {
	builder.imageType = imageType
	builder.imageTypeFlag = true
	return builder
}

func (builder *CreateBadgeImagePathReqBodyBuilder) Build() (*CreateBadgeImageReqBody, error) {
	req := &CreateBadgeImageReqBody{}
	if builder.imageFilePathFlag {
		data, err := larkcore.File2Bytes(builder.imageFilePath)
		if err != nil {
			return nil, err
		}
		req.ImageFile = bytes.NewBuffer(data)
	}
	if builder.imageTypeFlag {
		req.ImageType = &builder.imageType
	}
	return req, nil
}

type CreateBadgeImageReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *CreateBadgeImageReqBody
}

func NewCreateBadgeImageReqBuilder() *CreateBadgeImageReqBuilder {
	builder := &CreateBadgeImageReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 通过该接口可以上传勋章详情图、挂饰图的文件，获取对应的文件key
func (builder *CreateBadgeImageReqBuilder) Body(body *CreateBadgeImageReqBody) *CreateBadgeImageReqBuilder {
	builder.body = body
	return builder
}

func (builder *CreateBadgeImageReqBuilder) Build() *CreateBadgeImageReq {
	req := &CreateBadgeImageReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.Body = builder.body
	return req
}

type CreateBadgeImageReqBody struct {
	ImageFile io.Reader `json:"image_file,omitempty"` // 勋章图片的文件，仅支持 PNG 格式，320 x 320 像素，大小不超过 1024 KB。
	ImageType *int      `json:"image_type,omitempty"` // 图片的类型
}

type CreateBadgeImageReq struct {
	apiReq *larkcore.ApiReq
	Body   *CreateBadgeImageReqBody `body:""`
}

type CreateBadgeImageRespData struct {
	ImageKey *string `json:"image_key,omitempty"` // 图片的key
}

type CreateBadgeImageResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
	Data *CreateBadgeImageRespData `json:"data"` // 业务数据
}

func (resp *CreateBadgeImageResp) Success() bool {
	return resp.Code == 0
}

type ResetPasswordReqBodyBuilder struct {
	password     *Password // 需要重置的密码参数，不少于8个字符，字母、数字和符号，至少三选二
	passwordFlag bool
	userId       string // 待修改密码的用户ID，只针对邮箱登录凭证与企业邮箱(包括别名)相等的用户生效
	userIdFlag   bool
}

func NewResetPasswordReqBodyBuilder() *ResetPasswordReqBodyBuilder {
	builder := &ResetPasswordReqBodyBuilder{}
	return builder
}

// 需要重置的密码参数，不少于8个字符，字母、数字和符号，至少三选二
//
//示例值：1234abcd
func (builder *ResetPasswordReqBodyBuilder) Password(password *Password) *ResetPasswordReqBodyBuilder {
	builder.password = password
	builder.passwordFlag = true
	return builder
}

// 待修改密码的用户ID，只针对邮箱登录凭证与企业邮箱(包括别名)相等的用户生效
//
//示例值：abc123
func (builder *ResetPasswordReqBodyBuilder) UserId(userId string) *ResetPasswordReqBodyBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

func (builder *ResetPasswordReqBodyBuilder) Build() *ResetPasswordReqBody {
	req := &ResetPasswordReqBody{}
	if builder.passwordFlag {
		req.Password = builder.password
	}
	if builder.userIdFlag {
		req.UserId = &builder.userId
	}
	return req
}

type ResetPasswordPathReqBodyBuilder struct {
	password     *Password // 需要重置的密码参数，不少于8个字符，字母、数字和符号，至少三选二
	passwordFlag bool
	userId       string // 待修改密码的用户ID，只针对邮箱登录凭证与企业邮箱(包括别名)相等的用户生效
	userIdFlag   bool
}

func NewResetPasswordPathReqBodyBuilder() *ResetPasswordPathReqBodyBuilder {
	builder := &ResetPasswordPathReqBodyBuilder{}
	return builder
}

// 需要重置的密码参数，不少于8个字符，字母、数字和符号，至少三选二
//
// 示例值：1234abcd
func (builder *ResetPasswordPathReqBodyBuilder) Password(password *Password) *ResetPasswordPathReqBodyBuilder {
	builder.password = password
	builder.passwordFlag = true
	return builder
}

// 待修改密码的用户ID，只针对邮箱登录凭证与企业邮箱(包括别名)相等的用户生效
//
// 示例值：abc123
func (builder *ResetPasswordPathReqBodyBuilder) UserId(userId string) *ResetPasswordPathReqBodyBuilder {
	builder.userId = userId
	builder.userIdFlag = true
	return builder
}

func (builder *ResetPasswordPathReqBodyBuilder) Build() (*ResetPasswordReqBody, error) {
	req := &ResetPasswordReqBody{}
	if builder.passwordFlag {
		req.Password = builder.password
	}
	if builder.userIdFlag {
		req.UserId = &builder.userId
	}
	return req, nil
}

type ResetPasswordReqBuilder struct {
	apiReq *larkcore.ApiReq
	body   *ResetPasswordReqBody
}

func NewResetPasswordReqBuilder() *ResetPasswordReqBuilder {
	builder := &ResetPasswordReqBuilder{}
	builder.apiReq = &larkcore.ApiReq{
		PathParams:  larkcore.PathParams{},
		QueryParams: larkcore.QueryParams{},
	}
	return builder
}

// 用户ID类型
//
// 示例值：user_id
func (builder *ResetPasswordReqBuilder) UserIdType(userIdType string) *ResetPasswordReqBuilder {
	builder.apiReq.QueryParams.Set("user_id_type", fmt.Sprint(userIdType))
	return builder
}

// 重置用户的企业邮箱密码，仅当用户的邮箱和企业邮箱(别名)一致时生效，可用于处理飞书企业邮箱登录死锁的问题。;;邮箱死锁：当用户的登录凭证与飞书企业邮箱一致时，目前飞书登录流程要求用户输入验证码，由于飞书邮箱无单独的帐号体系，则未登录时无法收取邮箱验证码，即陷入死锁
func (builder *ResetPasswordReqBuilder) Body(body *ResetPasswordReqBody) *ResetPasswordReqBuilder {
	builder.body = body
	return builder
}

func (builder *ResetPasswordReqBuilder) Build() *ResetPasswordReq {
	req := &ResetPasswordReq{}
	req.apiReq = &larkcore.ApiReq{}
	req.apiReq.QueryParams = builder.apiReq.QueryParams
	req.apiReq.Body = builder.body
	return req
}

type ResetPasswordReqBody struct {
	Password *Password `json:"password,omitempty"` // 需要重置的密码参数，不少于8个字符，字母、数字和符号，至少三选二
	UserId   *string   `json:"user_id,omitempty"`  // 待修改密码的用户ID，只针对邮箱登录凭证与企业邮箱(包括别名)相等的用户生效
}

type ResetPasswordReq struct {
	apiReq *larkcore.ApiReq
	Body   *ResetPasswordReqBody `body:""`
}

type ResetPasswordResp struct {
	*larkcore.ApiResp `json:"-"`
	larkcore.CodeError
}

func (resp *ResetPasswordResp) Success() bool {
	return resp.Code == 0
}

type ListBadgeIterator struct {
	nextPageToken *string
	items         []*Badge
	index         int
	limit         int
	ctx           context.Context
	req           *ListBadgeReq
	listFunc      func(ctx context.Context, req *ListBadgeReq, options ...larkcore.RequestOptionFunc) (*ListBadgeResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListBadgeIterator) Next() (bool, *Badge, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Badges) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Badges
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListBadgeIterator) NextPageToken() *string {
	return iterator.nextPageToken
}

type ListBadgeGrantIterator struct {
	nextPageToken *string
	items         []*Grant
	index         int
	limit         int
	ctx           context.Context
	req           *ListBadgeGrantReq
	listFunc      func(ctx context.Context, req *ListBadgeGrantReq, options ...larkcore.RequestOptionFunc) (*ListBadgeGrantResp, error)
	options       []larkcore.RequestOptionFunc
	curlNum       int
}

func (iterator *ListBadgeGrantIterator) Next() (bool, *Grant, error) {
	// 达到最大量，则返回
	if iterator.limit > 0 && iterator.curlNum >= iterator.limit {
		return false, nil, nil
	}

	// 为0则拉取数据
	if iterator.index == 0 || iterator.index >= len(iterator.items) {
		if iterator.index != 0 && iterator.nextPageToken == nil {
			return false, nil, nil
		}
		if iterator.nextPageToken != nil {
			iterator.req.apiReq.QueryParams.Set("page_token", *iterator.nextPageToken)
		}
		resp, err := iterator.listFunc(iterator.ctx, iterator.req, iterator.options...)
		if err != nil {
			return false, nil, err
		}

		if resp.Code != 0 {
			return false, nil, errors.New(fmt.Sprintf("Code:%d,Msg:%s", resp.Code, resp.Msg))
		}

		if len(resp.Data.Grants) == 0 {
			return false, nil, nil
		}

		iterator.nextPageToken = resp.Data.PageToken
		iterator.items = resp.Data.Grants
		iterator.index = 0
	}

	block := iterator.items[iterator.index]
	iterator.index++
	iterator.curlNum++
	return true, block, nil
}

func (iterator *ListBadgeGrantIterator) NextPageToken() *string {
	return iterator.nextPageToken
}
